
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,185,171,173,173,163,179,174,176],
[155,0,153,181,170,160,178,166,168],
[169,187,0,185,169,173,181,190,182],
[167,159,155,0,154,162,175,160,181],
[167,170,171,186,0,161,185,170,190],
[177,180,167,178,179,0,187,173,191],
[161,162,159,165,155,153,0,161,174],
[166,174,150,180,170,167,179,0,183],
[164,172,158,159,150,149,166,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,169,183,165,168,168,167,170],
[190,0,184,197,172,168,182,175,183],
[171,156,0,189,170,154,170,160,165],
[157,143,151,0,164,161,171,154,157],
[175,168,170,176,0,186,164,164,172],
[172,172,186,179,154,0,176,167,160],
[172,158,170,169,176,164,0,173,163],
[173,165,180,186,176,173,167,0,157],
[170,157,175,183,168,180,177,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,192,173,167,148,151,193,158],
[155,0,175,157,189,174,165,185,151],
[148,165,0,168,175,164,159,178,149],
[167,183,172,0,185,163,138,171,141],
[173,151,165,155,0,136,169,162,146],
[192,166,176,177,204,0,198,196,170],
[189,175,181,202,171,142,0,190,176],
[147,155,162,169,178,144,150,0,154],
[182,189,191,199,194,170,164,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,147,137,163,131,170,155,179],
[160,0,158,124,183,153,177,174,191],
[193,182,0,136,159,175,190,166,169],
[203,216,204,0,224,165,201,179,173],
[177,157,181,116,0,177,165,179,161],
[209,187,165,175,163,0,141,197,164],
[170,163,150,139,175,199,0,173,180],
[185,166,174,161,161,143,167,0,175],
[161,149,171,167,179,176,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,179,176,184,170,172,181,171],
[151,0,156,163,161,141,142,145,145],
[161,184,0,184,158,175,165,170,166],
[164,177,156,0,170,166,162,166,166],
[156,179,182,170,0,175,143,171,144],
[170,199,165,174,165,0,154,165,166],
[168,198,175,178,197,186,0,163,162],
[159,195,170,174,169,175,177,0,161],
[169,195,174,174,196,174,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,172,172,165,179,176,168,159],
[173,0,172,170,174,176,168,185,167],
[168,168,0,167,170,179,171,183,156],
[168,170,173,0,171,188,175,179,147],
[175,166,170,169,0,170,175,170,145],
[161,164,161,152,170,0,157,163,153],
[164,172,169,165,165,183,0,181,171],
[172,155,157,161,170,177,159,0,161],
[181,173,184,193,195,187,169,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,186,188,173,198,158,175,168],
[161,0,191,176,190,163,187,166,151],
[154,149,0,160,168,164,165,159,166],
[152,164,180,0,180,186,169,159,158],
[167,150,172,160,0,169,170,140,155],
[142,177,176,154,171,0,163,159,147],
[182,153,175,171,170,177,0,158,149],
[165,174,181,181,200,181,182,0,177],
[172,189,174,182,185,193,191,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,202,178,177,191,183,181],
[175,0,175,176,156,184,181,168,183],
[167,165,0,159,160,176,165,164,168],
[138,164,181,0,155,154,169,163,183],
[162,184,180,185,0,180,186,170,182],
[163,156,164,186,160,0,169,156,177],
[149,159,175,171,154,171,0,164,171],
[157,172,176,177,170,184,176,0,177],
[159,157,172,157,158,163,169,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,171,180,160,185,160,179],
[169,0,178,172,173,177,185,179,170],
[177,162,0,163,182,183,179,175,181],
[169,168,177,0,177,172,175,167,170],
[160,167,158,163,0,157,157,153,164],
[180,163,157,168,183,0,180,161,175],
[155,155,161,165,183,160,0,175,181],
[180,161,165,173,187,179,165,0,163],
[161,170,159,170,176,165,159,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,178,190,165,173,184,165,168],
[170,0,168,189,167,182,180,170,159],
[162,172,0,179,168,160,166,161,148],
[150,151,161,0,153,148,156,143,130],
[175,173,172,187,0,172,175,163,160],
[167,158,180,192,168,0,200,153,162],
[156,160,174,184,165,140,0,160,152],
[175,170,179,197,177,187,180,0,176],
[172,181,192,210,180,178,188,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,167,171,160,163,161,151,152],
[193,0,180,179,166,159,175,180,186],
[173,160,0,195,162,170,161,165,170],
[169,161,145,0,148,152,173,148,151],
[180,174,178,192,0,146,192,161,151],
[177,181,170,188,194,0,176,161,154],
[179,165,179,167,148,164,0,143,167],
[189,160,175,192,179,179,197,0,175],
[188,154,170,189,189,186,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,167,151,149,171,163,167],
[177,0,165,171,150,151,175,170,181],
[176,175,0,179,160,172,166,175,172],
[173,169,161,0,157,148,166,172,171],
[189,190,180,183,0,168,186,188,184],
[191,189,168,192,172,0,183,177,180],
[169,165,174,174,154,157,0,171,171],
[177,170,165,168,152,163,169,0,180],
[173,159,168,169,156,160,169,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,117,226,201,147,256,147,226],
[193,0,224,224,193,225,139,139,109],
[223,116,0,254,200,116,139,116,139],
[114,116,86,0,170,116,30,116,86],
[139,147,140,170,0,116,139,30,109],
[193,115,224,224,224,0,223,114,109],
[84,201,201,310,201,117,0,170,86],
[193,201,224,224,310,226,170,0,109],
[114,231,201,254,231,231,254,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,155,172,158,142,152,160,156],
[190,0,185,197,193,144,172,159,194],
[185,155,0,192,174,153,168,164,159],
[168,143,148,0,149,138,157,124,137],
[182,147,166,191,0,159,177,158,172],
[198,196,187,202,181,0,187,185,166],
[188,168,172,183,163,153,0,185,166],
[180,181,176,216,182,155,155,0,162],
[184,146,181,203,168,174,174,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,177,172,177,182,169,186],
[167,0,164,168,154,180,177,176,154],
[174,176,0,185,159,176,180,178,185],
[163,172,155,0,171,157,178,158,163],
[168,186,181,169,0,175,179,168,199],
[163,160,164,183,165,0,181,168,162],
[158,163,160,162,161,159,0,151,175],
[171,164,162,182,172,172,189,0,189],
[154,186,155,177,141,178,165,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,197,174,175,165,172,174,170],
[159,0,167,176,164,172,159,165,174],
[143,173,0,158,166,163,169,158,151],
[166,164,182,0,161,170,157,161,162],
[165,176,174,179,0,172,171,173,167],
[175,168,177,170,168,0,162,163,160],
[168,181,171,183,169,178,0,163,172],
[166,175,182,179,167,177,177,0,175],
[170,166,189,178,173,180,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,187,173,162,161,161,159,183],
[164,0,160,168,152,165,159,154,145],
[153,180,0,155,158,172,165,164,149],
[167,172,185,0,177,181,157,160,155],
[178,188,182,163,0,179,167,158,178],
[179,175,168,159,161,0,173,168,163],
[179,181,175,183,173,167,0,159,155],
[181,186,176,180,182,172,181,0,162],
[157,195,191,185,162,177,185,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,171,162,173,155,147,158],
[164,0,178,146,167,173,185,156,148],
[176,162,0,174,151,175,158,157,150],
[169,194,166,0,178,179,155,170,172],
[178,173,189,162,0,177,166,182,157],
[167,167,165,161,163,0,156,159,150],
[185,155,182,185,174,184,0,174,162],
[193,184,183,170,158,181,166,0,161],
[182,192,190,168,183,190,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,154,140,168,161,170,170,170],
[178,0,149,149,170,168,174,189,133],
[186,191,0,182,188,174,192,188,167],
[200,191,158,0,160,194,194,197,177],
[172,170,152,180,0,174,189,180,166],
[179,172,166,146,166,0,177,182,145],
[170,166,148,146,151,163,0,167,157],
[170,151,152,143,160,158,173,0,162],
[170,207,173,163,174,195,183,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,164,157,159,154,153,168,158],
[188,0,186,188,162,167,176,178,179],
[176,154,0,174,156,163,160,171,167],
[183,152,166,0,163,164,160,166,169],
[181,178,184,177,0,196,164,185,183],
[186,173,177,176,144,0,172,170,177],
[187,164,180,180,176,168,0,180,163],
[172,162,169,174,155,170,160,0,158],
[182,161,173,171,157,163,177,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,189,165,185,182,184,162],
[165,0,167,167,166,175,164,165,153],
[176,173,0,194,172,182,174,165,176],
[151,173,146,0,148,161,148,165,145],
[175,174,168,192,0,167,164,170,166],
[155,165,158,179,173,0,161,164,157],
[158,176,166,192,176,179,0,177,186],
[156,175,175,175,170,176,163,0,173],
[178,187,164,195,174,183,154,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,173,161,142,172,170,165,180],
[184,0,164,177,146,181,184,175,178],
[167,176,0,189,176,168,172,177,179],
[179,163,151,0,157,167,166,168,179],
[198,194,164,183,0,195,190,186,191],
[168,159,172,173,145,0,174,165,179],
[170,156,168,174,150,166,0,168,161],
[175,165,163,172,154,175,172,0,174],
[160,162,161,161,149,161,179,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,174,167,160,176,173,171],
[160,0,169,166,163,159,172,171,177],
[166,171,0,174,162,173,173,168,160],
[166,174,166,0,170,170,174,171,166],
[173,177,178,170,0,176,166,164,184],
[180,181,167,170,164,0,180,173,173],
[164,168,167,166,174,160,0,167,185],
[167,169,172,169,176,167,173,0,172],
[169,163,180,174,156,167,155,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,137,179,186,165,171,125,161],
[202,0,158,186,171,160,169,158,140],
[203,182,0,191,197,153,157,156,146],
[161,154,149,0,178,155,151,144,163],
[154,169,143,162,0,154,167,127,133],
[175,180,187,185,186,0,167,159,175],
[169,171,183,189,173,173,0,162,141],
[215,182,184,196,213,181,178,0,145],
[179,200,194,177,207,165,199,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,206,159,169,209,168,161,155],
[180,0,232,172,194,197,227,157,175],
[134,108,0,129,84,126,130,94,115],
[181,168,211,0,149,186,160,169,169],
[171,146,256,191,0,213,167,155,134],
[131,143,214,154,127,0,143,127,137],
[172,113,210,180,173,197,0,151,129],
[179,183,246,171,185,213,189,0,169],
[185,165,225,171,206,203,211,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,179,188,167,166,195,169],
[180,0,175,169,204,185,195,195,180],
[163,165,0,193,198,167,174,162,162],
[161,171,147,0,178,154,169,175,153],
[152,136,142,162,0,141,145,163,143],
[173,155,173,186,199,0,185,182,170],
[174,145,166,171,195,155,0,184,175],
[145,145,178,165,177,158,156,0,154],
[171,160,178,187,197,170,165,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,164,158,161,170,171,164,172],
[179,0,177,166,170,173,181,174,168],
[176,163,0,160,169,186,182,169,177],
[182,174,180,0,162,176,182,187,169],
[179,170,171,178,0,173,170,160,177],
[170,167,154,164,167,0,166,156,172],
[169,159,158,158,170,174,0,164,166],
[176,166,171,153,180,184,176,0,172],
[168,172,163,171,163,168,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,178,176,171,159,185,162],
[165,0,157,172,177,152,152,169,159],
[167,183,0,188,185,175,167,176,173],
[162,168,152,0,178,148,155,150,153],
[164,163,155,162,0,174,153,155,141],
[169,188,165,192,166,0,152,154,160],
[181,188,173,185,187,188,0,167,165],
[155,171,164,190,185,186,173,0,182],
[178,181,167,187,199,180,175,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,161,158,169,181,141,162],
[177,0,172,164,159,181,177,161,173],
[168,168,0,148,141,169,162,160,161],
[179,176,192,0,171,178,186,169,172],
[182,181,199,169,0,187,192,172,181],
[171,159,171,162,153,0,179,161,159],
[159,163,178,154,148,161,0,158,157],
[199,179,180,171,168,179,182,0,175],
[178,167,179,168,159,181,183,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,165,180,193,185,184,187],
[162,0,138,160,164,148,167,161,155],
[164,202,0,199,155,176,183,177,172],
[175,180,141,0,173,168,144,164,153],
[160,176,185,167,0,170,139,179,177],
[147,192,164,172,170,0,147,171,154],
[155,173,157,196,201,193,0,176,207],
[156,179,163,176,161,169,164,0,142],
[153,185,168,187,163,186,133,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,170,158,150,173,158,166,156],
[175,0,177,187,165,170,164,168,170],
[170,163,0,174,161,163,150,162,158],
[182,153,166,0,167,166,163,169,171],
[190,175,179,173,0,176,171,159,166],
[167,170,177,174,164,0,160,170,167],
[182,176,190,177,169,180,0,162,183],
[174,172,178,171,181,170,178,0,173],
[184,170,182,169,174,173,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,155,169,160,156,158,160,159],
[168,0,169,175,162,173,159,158,170],
[185,171,0,188,175,173,173,170,184],
[171,165,152,0,161,159,158,165,161],
[180,178,165,179,0,170,161,159,182],
[184,167,167,181,170,0,164,165,181],
[182,181,167,182,179,176,0,188,185],
[180,182,170,175,181,175,152,0,181],
[181,170,156,179,158,159,155,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,160,179,163,156,156,159,161],
[187,0,176,170,176,168,175,172,194],
[180,164,0,172,159,174,155,168,171],
[161,170,168,0,166,179,168,162,192],
[177,164,181,174,0,167,158,165,163],
[184,172,166,161,173,0,169,154,158],
[184,165,185,172,182,171,0,175,182],
[181,168,172,178,175,186,165,0,196],
[179,146,169,148,177,182,158,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,168,161,206,167,165,147],
[168,0,192,186,134,213,168,165,156],
[156,148,0,142,137,181,135,143,136],
[172,154,198,0,156,204,184,169,153],
[179,206,203,184,0,220,169,164,184],
[134,127,159,136,120,0,114,104,122],
[173,172,205,156,171,226,0,164,141],
[175,175,197,171,176,236,176,0,136],
[193,184,204,187,156,218,199,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,210,197,164,185,199,161,177],
[147,0,174,203,137,148,184,143,155],
[130,166,0,165,133,133,153,146,149],
[143,137,175,0,138,150,145,153,153],
[176,203,207,202,0,184,205,171,169],
[155,192,207,190,156,0,202,162,158],
[141,156,187,195,135,138,0,163,154],
[179,197,194,187,169,178,177,0,171],
[163,185,191,187,171,182,186,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,168,161,164,178,177,174],
[169,0,185,185,164,175,177,173,168],
[174,155,0,179,161,171,167,178,182],
[172,155,161,0,150,167,177,160,171],
[179,176,179,190,0,168,176,180,180],
[176,165,169,173,172,0,173,164,168],
[162,163,173,163,164,167,0,164,173],
[163,167,162,180,160,176,176,0,171],
[166,172,158,169,160,172,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,181,158,178,177,151,152,175],
[172,0,172,169,176,178,167,176,182],
[159,168,0,161,163,182,162,160,154],
[182,171,179,0,175,189,156,176,166],
[162,164,177,165,0,176,157,167,164],
[163,162,158,151,164,0,157,152,153],
[189,173,178,184,183,183,0,166,181],
[188,164,180,164,173,188,174,0,161],
[165,158,186,174,176,187,159,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,164,175,171,168,171,164,164],
[194,0,187,183,193,189,167,186,197],
[176,153,0,178,183,175,176,179,176],
[165,157,162,0,170,157,172,150,173],
[169,147,157,170,0,163,155,166,171],
[172,151,165,183,177,0,163,160,165],
[169,173,164,168,185,177,0,168,176],
[176,154,161,190,174,180,172,0,177],
[176,143,164,167,169,175,164,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,191,202,201,158,183,188],
[158,0,175,171,196,193,153,167,194],
[170,165,0,187,206,211,173,165,188],
[149,169,153,0,179,177,149,168,154],
[138,144,134,161,0,191,157,133,156],
[139,147,129,163,149,0,136,135,165],
[182,187,167,191,183,204,0,157,171],
[157,173,175,172,207,205,183,0,189],
[152,146,152,186,184,175,169,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,169,232,168,224,187,193,165],
[136,0,144,183,188,166,153,143,165],
[171,196,0,196,200,185,165,211,187],
[108,157,144,0,158,179,129,143,168],
[172,152,140,182,0,200,128,147,122],
[116,174,155,161,140,0,119,136,134],
[153,187,175,211,212,221,0,192,168],
[147,197,129,197,193,204,148,0,175],
[175,175,153,172,218,206,172,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,80,233,189,92,168,137,112],
[203,0,204,257,226,165,182,240,175],
[260,136,0,259,245,184,167,195,157],
[107,83,81,0,226,107,183,98,103],
[151,114,95,114,0,67,124,104,122],
[248,175,156,233,273,0,254,175,150],
[172,158,173,157,216,86,0,148,113],
[203,100,145,242,236,165,192,0,176],
[228,165,183,237,218,190,227,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,176,177,188,188,162,171],
[175,0,168,183,168,203,179,173,166],
[166,172,0,186,176,187,181,163,162],
[164,157,154,0,146,185,174,148,154],
[163,172,164,194,0,195,172,161,172],
[152,137,153,155,145,0,180,149,152],
[152,161,159,166,168,160,0,161,170],
[178,167,177,192,179,191,179,0,180],
[169,174,178,186,168,188,170,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,203,144,186,189,180,158],
[165,0,172,152,169,169,181,182,157],
[173,168,0,175,151,167,184,169,163],
[137,188,165,0,169,168,175,180,138],
[196,171,189,171,0,196,188,198,169],
[154,171,173,172,144,0,180,180,178],
[151,159,156,165,152,160,0,186,179],
[160,158,171,160,142,160,154,0,160],
[182,183,177,202,171,162,161,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,180,172,163,187,187,179,170],
[178,0,188,172,180,183,174,193,167],
[160,152,0,153,181,186,148,171,173],
[168,168,187,0,184,195,176,188,163],
[177,160,159,156,0,174,157,165,168],
[153,157,154,145,166,0,168,164,153],
[153,166,192,164,183,172,0,186,168],
[161,147,169,152,175,176,154,0,155],
[170,173,167,177,172,187,172,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,177,183,169,187,174,166],
[167,0,160,182,168,174,181,179,164],
[173,180,0,189,172,157,175,163,162],
[163,158,151,0,150,156,157,148,150],
[157,172,168,190,0,169,167,164,158],
[171,166,183,184,171,0,162,162,174],
[153,159,165,183,173,178,0,165,171],
[166,161,177,192,176,178,175,0,176],
[174,176,178,190,182,166,169,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,161,162,156,167,163,164],
[168,0,177,170,191,173,174,168,165],
[172,163,0,156,171,169,170,168,161],
[179,170,184,0,177,174,173,172,179],
[178,149,169,163,0,176,171,160,154],
[184,167,171,166,164,0,155,168,153],
[173,166,170,167,169,185,0,167,169],
[177,172,172,168,180,172,173,0,176],
[176,175,179,161,186,187,171,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,154,153,160,160,160,173,163],
[169,0,163,150,155,161,158,167,148],
[186,177,0,163,171,182,168,170,171],
[187,190,177,0,166,175,172,192,174],
[180,185,169,174,0,164,160,168,167],
[180,179,158,165,176,0,163,175,176],
[180,182,172,168,180,177,0,165,174],
[167,173,170,148,172,165,175,0,158],
[177,192,169,166,173,164,166,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,202,207,167,162,174,181,176],
[157,0,180,149,177,160,153,201,163],
[138,160,0,185,181,194,176,154,188],
[133,191,155,0,155,154,165,148,184],
[173,163,159,185,0,205,178,166,162],
[178,180,146,186,135,0,169,158,183],
[166,187,164,175,162,171,0,176,168],
[159,139,186,192,174,182,164,0,161],
[164,177,152,156,178,157,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,174,149,198,150,145,164,150],
[201,0,188,222,218,180,191,156,159],
[166,152,0,152,189,134,128,172,173],
[191,118,188,0,165,175,132,122,116],
[142,122,151,175,0,120,120,138,131],
[190,160,206,165,220,0,186,189,181],
[195,149,212,208,220,154,0,169,149],
[176,184,168,218,202,151,171,0,147],
[190,181,167,224,209,159,191,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,164,171,177,173,173,181,181],
[158,0,161,170,173,157,165,176,166],
[176,179,0,168,172,172,179,175,191],
[169,170,172,0,168,162,171,176,188],
[163,167,168,172,0,155,159,164,175],
[167,183,168,178,185,0,168,171,185],
[167,175,161,169,181,172,0,168,171],
[159,164,165,164,176,169,172,0,173],
[159,174,149,152,165,155,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,220,222,210,162,174,162,207],
[146,0,210,203,202,182,174,165,168],
[120,130,0,142,133,126,124,121,159],
[118,137,198,0,134,133,111,97,176],
[130,138,207,206,0,170,134,112,180],
[178,158,214,207,170,0,173,171,210],
[166,166,216,229,206,167,0,133,180],
[178,175,219,243,228,169,207,0,221],
[133,172,181,164,160,130,160,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,162,170,126,95,116,148,113],
[130,0,118,157,138,73,92,152,130],
[178,222,0,100,170,102,120,192,149],
[170,183,240,0,166,151,120,155,107],
[214,202,170,174,0,94,180,180,205],
[245,267,238,189,246,0,177,147,220],
[224,248,220,220,160,163,0,175,139],
[192,188,148,185,160,193,165,0,194],
[227,210,191,233,135,120,201,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,172,168,165,179,157,154],
[181,0,180,181,175,173,171,167,172],
[170,160,0,166,168,165,183,146,157],
[168,159,174,0,161,174,181,152,167],
[172,165,172,179,0,174,191,165,171],
[175,167,175,166,166,0,175,161,170],
[161,169,157,159,149,165,0,146,145],
[183,173,194,188,175,179,194,0,165],
[186,168,183,173,169,170,195,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,172,131,151,154,160,142,139],
[191,0,180,186,174,198,189,160,177],
[168,160,0,140,168,127,147,166,168],
[209,154,200,0,160,176,162,161,156],
[189,166,172,180,0,160,159,187,188],
[186,142,213,164,180,0,160,191,181],
[180,151,193,178,181,180,0,163,160],
[198,180,174,179,153,149,177,0,168],
[201,163,172,184,152,159,180,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,149,167,172,164,162,130,131],
[216,0,158,194,191,168,184,166,181],
[191,182,0,186,190,168,183,174,157],
[173,146,154,0,212,189,197,150,132],
[168,149,150,128,0,142,160,138,107],
[176,172,172,151,198,0,202,155,183],
[178,156,157,143,180,138,0,149,124],
[210,174,166,190,202,185,191,0,138],
[209,159,183,208,233,157,216,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,176,167,184,164,169,154],
[162,0,183,192,181,160,175,187,160],
[164,157,0,155,171,124,149,162,150],
[164,148,185,0,168,159,171,159,141],
[173,159,169,172,0,165,160,169,159],
[156,180,216,181,175,0,152,173,171],
[176,165,191,169,180,188,0,190,172],
[171,153,178,181,171,167,150,0,152],
[186,180,190,199,181,169,168,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,206,176,176,191,161,170,192],
[165,0,210,173,182,181,173,175,183],
[134,130,0,155,154,162,169,149,152],
[164,167,185,0,172,198,172,165,179],
[164,158,186,168,0,197,160,171,173],
[149,159,178,142,143,0,151,160,157],
[179,167,171,168,180,189,0,171,175],
[170,165,191,175,169,180,169,0,172],
[148,157,188,161,167,183,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,188,156,170,148,169,153],
[164,0,160,165,153,172,162,178,155],
[171,180,0,183,168,183,170,169,168],
[152,175,157,0,146,154,151,163,135],
[184,187,172,194,0,196,163,191,160],
[170,168,157,186,144,0,162,161,143],
[192,178,170,189,177,178,0,178,171],
[171,162,171,177,149,179,162,0,155],
[187,185,172,205,180,197,169,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,177,184,276,187,253,266],
[162,0,171,192,128,254,134,141,214],
[178,169,0,206,184,304,210,178,304],
[163,148,134,0,124,286,215,178,231],
[156,212,156,216,0,209,198,217,204],
[64,86,36,54,131,0,123,100,197],
[153,206,130,125,142,217,0,198,223],
[87,199,162,162,123,240,142,0,230],
[74,126,36,109,136,143,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,163,170,177,174,174,166,183],
[171,0,181,178,181,165,183,178,185],
[177,159,0,166,173,159,171,171,179],
[170,162,174,0,165,142,180,177,182],
[163,159,167,175,0,155,180,174,174],
[166,175,181,198,185,0,180,166,178],
[166,157,169,160,160,160,0,161,154],
[174,162,169,163,166,174,179,0,186],
[157,155,161,158,166,162,186,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,171,149,150,163,151,151,140],
[190,0,183,166,168,157,172,163,189],
[169,157,0,157,153,179,154,163,158],
[191,174,183,0,166,172,169,161,180],
[190,172,187,174,0,177,176,171,166],
[177,183,161,168,163,0,178,181,172],
[189,168,186,171,164,162,0,175,170],
[189,177,177,179,169,159,165,0,173],
[200,151,182,160,174,168,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,179,188,177,174,172,187,170],
[147,0,163,178,176,161,168,161,154],
[161,177,0,176,165,168,173,176,164],
[152,162,164,0,175,161,164,171,167],
[163,164,175,165,0,178,166,169,167],
[166,179,172,179,162,0,180,169,167],
[168,172,167,176,174,160,0,170,169],
[153,179,164,169,171,171,170,0,158],
[170,186,176,173,173,173,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,158,148,133,186,135,164,140],
[192,0,168,183,173,192,176,206,163],
[182,172,0,155,158,148,157,172,147],
[192,157,185,0,176,205,173,174,166],
[207,167,182,164,0,206,161,202,155],
[154,148,192,135,134,0,149,176,137],
[205,164,183,167,179,191,0,221,181],
[176,134,168,166,138,164,119,0,106],
[200,177,193,174,185,203,159,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,152,156,156,151,158,163,167],
[180,0,161,166,146,170,169,177,167],
[188,179,0,172,167,171,181,179,181],
[184,174,168,0,169,169,184,188,186],
[184,194,173,171,0,165,183,176,177],
[189,170,169,171,175,0,184,178,178],
[182,171,159,156,157,156,0,169,168],
[177,163,161,152,164,162,171,0,165],
[173,173,159,154,163,162,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,193,181,178,173,194,156],
[170,0,155,204,177,183,182,194,162],
[177,185,0,175,173,181,171,191,165],
[147,136,165,0,149,167,146,184,142],
[159,163,167,191,0,175,170,174,156],
[162,157,159,173,165,0,155,166,158],
[167,158,169,194,170,185,0,188,173],
[146,146,149,156,166,174,152,0,123],
[184,178,175,198,184,182,167,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,180,172,165,203,155,185,183],
[162,0,184,192,178,188,159,184,175],
[160,156,0,175,162,180,163,161,164],
[168,148,165,0,153,187,173,171,170],
[175,162,178,187,0,185,169,178,191],
[137,152,160,153,155,0,163,160,165],
[185,181,177,167,171,177,0,197,186],
[155,156,179,169,162,180,143,0,178],
[157,165,176,170,149,175,154,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,166,169,177,153,169,177],
[177,0,197,169,184,177,175,192,205],
[174,143,0,178,180,184,163,170,172],
[174,171,162,0,141,192,162,149,172],
[171,156,160,199,0,187,163,162,187],
[163,163,156,148,153,0,169,138,154],
[187,165,177,178,177,171,0,157,199],
[171,148,170,191,178,202,183,0,184],
[163,135,168,168,153,186,141,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,189,128,154,157,155,125,129],
[195,0,224,169,214,190,223,185,197],
[151,116,0,126,170,146,162,139,161],
[212,171,214,0,192,184,191,152,180],
[186,126,170,148,0,159,188,160,169],
[183,150,194,156,181,0,194,143,170],
[185,117,178,149,152,146,0,125,165],
[215,155,201,188,180,197,215,0,188],
[211,143,179,160,171,170,175,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,166,196,170,178,182,173,173],
[148,0,159,156,178,162,167,160,163],
[174,181,0,179,176,164,168,177,172],
[144,184,161,0,178,177,177,176,196],
[170,162,164,162,0,164,165,171,161],
[162,178,176,163,176,0,147,184,174],
[158,173,172,163,175,193,0,169,165],
[167,180,163,164,169,156,171,0,167],
[167,177,168,144,179,166,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,157,168,167,162,166,159,169],
[185,0,182,174,169,175,184,173,175],
[183,158,0,162,148,163,172,174,166],
[172,166,178,0,152,173,170,173,174],
[173,171,192,188,0,177,197,166,170],
[178,165,177,167,163,0,169,161,172],
[174,156,168,170,143,171,0,158,166],
[181,167,166,167,174,179,182,0,172],
[171,165,174,166,170,168,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,185,190,178,190,162,166],
[160,0,171,178,180,175,179,172,171],
[178,169,0,180,180,185,184,165,181],
[155,162,160,0,173,180,179,157,157],
[150,160,160,167,0,156,179,173,164],
[162,165,155,160,184,0,170,156,155],
[150,161,156,161,161,170,0,151,171],
[178,168,175,183,167,184,189,0,177],
[174,169,159,183,176,185,169,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,184,172,176,170,215,169,227],
[179,0,179,89,192,192,247,223,221],
[156,161,0,127,144,132,199,169,249],
[168,251,213,0,205,203,271,256,227],
[164,148,196,135,0,173,185,192,223],
[170,148,208,137,167,0,238,191,212],
[125,93,141,69,155,102,0,113,179],
[171,117,171,84,148,149,227,0,170],
[113,119,91,113,117,128,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,162,187,188,181,207,159,179],
[156,0,184,143,140,188,160,172,188],
[178,156,0,151,147,190,167,146,151],
[153,197,189,0,144,167,156,158,175],
[152,200,193,196,0,203,199,182,197],
[159,152,150,173,137,0,187,188,181],
[133,180,173,184,141,153,0,141,185],
[181,168,194,182,158,152,199,0,191],
[161,152,189,165,143,159,155,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,178,172,168,197,168,190,203],
[166,0,179,172,172,158,188,181,183],
[162,161,0,169,170,174,185,178,181],
[168,168,171,0,158,181,182,182,161],
[172,168,170,182,0,182,174,191,192],
[143,182,166,159,158,0,178,168,187],
[172,152,155,158,166,162,0,171,188],
[150,159,162,158,149,172,169,0,192],
[137,157,159,179,148,153,152,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,162,154,149,169,157,139,174],
[172,0,164,147,150,162,163,154,169],
[178,176,0,185,165,189,176,161,182],
[186,193,155,0,179,180,177,160,173],
[191,190,175,161,0,185,171,180,177],
[171,178,151,160,155,0,150,160,173],
[183,177,164,163,169,190,0,161,172],
[201,186,179,180,160,180,179,0,182],
[166,171,158,167,163,167,168,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,185,170,187,183,172,183,174],
[153,0,183,157,178,191,154,164,165],
[155,157,0,153,168,161,153,175,166],
[170,183,187,0,193,183,169,185,173],
[153,162,172,147,0,166,134,165,159],
[157,149,179,157,174,0,183,167,164],
[168,186,187,171,206,157,0,185,175],
[157,176,165,155,175,173,155,0,166],
[166,175,174,167,181,176,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,201,190,166,192,156,169,191],
[164,0,165,180,168,171,147,174,176],
[139,175,0,159,168,171,169,154,183],
[150,160,181,0,161,159,140,141,171],
[174,172,172,179,0,178,168,167,181],
[148,169,169,181,162,0,128,182,182],
[184,193,171,200,172,212,0,156,204],
[171,166,186,199,173,158,184,0,195],
[149,164,157,169,159,158,136,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,161,164,171,174,158,162,169],
[185,0,170,178,173,191,179,175,160],
[179,170,0,177,166,185,186,160,161],
[176,162,163,0,157,181,174,150,155],
[169,167,174,183,0,187,183,170,166],
[166,149,155,159,153,0,164,145,146],
[182,161,154,166,157,176,0,153,149],
[178,165,180,190,170,195,187,0,170],
[171,180,179,185,174,194,191,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,164,186,175,175,174,166],
[175,0,179,178,177,170,182,190,177],
[172,161,0,179,170,175,177,183,185],
[176,162,161,0,176,166,178,157,176],
[154,163,170,164,0,165,169,166,180],
[165,170,165,174,175,0,180,183,175],
[165,158,163,162,171,160,0,171,162],
[166,150,157,183,174,157,169,0,166],
[174,163,155,164,160,165,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,172,187,172,163,189,186,150],
[130,0,156,148,119,150,184,136,132],
[168,184,0,170,156,175,189,173,165],
[153,192,170,0,151,158,180,152,142],
[168,221,184,189,0,199,211,167,171],
[177,190,165,182,141,0,197,172,157],
[151,156,151,160,129,143,0,131,141],
[154,204,167,188,173,168,209,0,168],
[190,208,175,198,169,183,199,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,155,154,159,157,140,146,170],
[188,0,174,178,193,186,177,155,196],
[185,166,0,136,153,175,137,163,150],
[186,162,204,0,159,176,177,158,188],
[181,147,187,181,0,187,167,177,207],
[183,154,165,164,153,0,152,154,186],
[200,163,203,163,173,188,0,171,208],
[194,185,177,182,163,186,169,0,194],
[170,144,190,152,133,154,132,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,116,132,171,182,211,150,159],
[185,0,153,160,207,185,171,118,178],
[224,187,0,204,203,205,247,150,197],
[208,180,136,0,210,210,239,185,197],
[169,133,137,130,0,157,152,143,149],
[158,155,135,130,183,0,179,146,130],
[129,169,93,101,188,161,0,122,131],
[190,222,190,155,197,194,218,0,185],
[181,162,143,143,191,210,209,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,158,172,173,155,166,160],
[169,0,155,171,146,165,174,170,161],
[162,185,0,164,145,171,137,161,152],
[182,169,176,0,154,188,147,178,162],
[168,194,195,186,0,187,175,159,173],
[167,175,169,152,153,0,150,174,148],
[185,166,203,193,165,190,0,184,160],
[174,170,179,162,181,166,156,0,161],
[180,179,188,178,167,192,180,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,188,159,206,175,160,149,170],
[143,0,184,171,178,180,140,159,168],
[152,156,0,175,191,191,144,152,188],
[181,169,165,0,180,169,145,152,183],
[134,162,149,160,0,162,164,168,157],
[165,160,149,171,178,0,173,156,182],
[180,200,196,195,176,167,0,202,195],
[191,181,188,188,172,184,138,0,184],
[170,172,152,157,183,158,145,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,186,207,201,185,165,201,170],
[178,0,177,192,182,184,167,173,133],
[154,163,0,203,181,169,158,166,157],
[133,148,137,0,142,148,136,165,140],
[139,158,159,198,0,174,139,160,143],
[155,156,171,192,166,0,160,163,146],
[175,173,182,204,201,180,0,188,155],
[139,167,174,175,180,177,152,0,145],
[170,207,183,200,197,194,185,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,158,157,179,198,220,220,201],
[149,0,195,161,159,157,194,193,163],
[182,145,0,162,173,156,181,175,152],
[183,179,178,0,169,167,206,200,208],
[161,181,167,171,0,171,253,170,187],
[142,183,184,173,169,0,206,206,149],
[120,146,159,134,87,134,0,122,140],
[120,147,165,140,170,134,218,0,131],
[139,177,188,132,153,191,200,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,163,181,159,226,170,216,255],
[113,0,88,179,135,173,93,117,213],
[177,252,0,211,163,194,94,148,180],
[159,161,129,0,132,190,157,155,232],
[181,205,177,208,0,220,144,171,189],
[114,167,146,150,120,0,85,118,159],
[170,247,246,183,196,255,0,132,237],
[124,223,192,185,169,222,208,0,206],
[85,127,160,108,151,181,103,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,176,181,184,172,169,168],
[177,0,189,186,180,174,169,175,191],
[175,151,0,174,177,195,173,161,165],
[164,154,166,0,177,169,179,159,165],
[159,160,163,163,0,177,170,153,158],
[156,166,145,171,163,0,172,167,169],
[168,171,167,161,170,168,0,158,183],
[171,165,179,181,187,173,182,0,183],
[172,149,175,175,182,171,157,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,162,159,179,179,191,200,181],
[139,0,176,188,166,151,186,184,227],
[178,164,0,197,208,201,157,220,189],
[181,152,143,0,169,167,153,150,180],
[161,174,132,171,0,166,162,175,186],
[161,189,139,173,174,0,140,159,188],
[149,154,183,187,178,200,0,173,193],
[140,156,120,190,165,181,167,0,206],
[159,113,151,160,154,152,147,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,163,154,171,160,148,168,159],
[178,0,163,158,142,162,169,173,157],
[177,177,0,167,176,189,182,181,179],
[186,182,173,0,165,177,168,189,159],
[169,198,164,175,0,180,184,183,169],
[180,178,151,163,160,0,180,185,156],
[192,171,158,172,156,160,0,176,168],
[172,167,159,151,157,155,164,0,159],
[181,183,161,181,171,184,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,120,151,132,127,130,163,102],
[198,0,197,159,164,161,175,182,184],
[220,143,0,198,199,142,215,146,192],
[189,181,142,0,181,162,195,159,165],
[208,176,141,159,0,156,163,166,156],
[213,179,198,178,184,0,182,163,184],
[210,165,125,145,177,158,0,143,127],
[177,158,194,181,174,177,197,0,160],
[238,156,148,175,184,156,213,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,196,188,166,164,183,161],
[168,0,139,180,183,167,182,166,171],
[166,201,0,224,197,195,175,185,170],
[144,160,116,0,151,159,164,175,145],
[152,157,143,189,0,167,175,181,152],
[174,173,145,181,173,0,171,180,146],
[176,158,165,176,165,169,0,171,174],
[157,174,155,165,159,160,169,0,153],
[179,169,170,195,188,194,166,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,151,172,169,155,171,158,166],
[192,0,170,189,187,160,177,185,185],
[189,170,0,183,181,176,182,181,183],
[168,151,157,0,174,153,169,168,161],
[171,153,159,166,0,154,162,167,173],
[185,180,164,187,186,0,185,176,183],
[169,163,158,171,178,155,0,169,173],
[182,155,159,172,173,164,171,0,179],
[174,155,157,179,167,157,167,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,181,166,162,181,164,182,152],
[175,0,205,184,183,188,193,180,170],
[159,135,0,154,159,170,154,171,164],
[174,156,186,0,162,170,162,178,147],
[178,157,181,178,0,186,167,174,161],
[159,152,170,170,154,0,167,155,147],
[176,147,186,178,173,173,0,173,178],
[158,160,169,162,166,185,167,0,142],
[188,170,176,193,179,193,162,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,163,229,191,206,168,191,224],
[212,0,156,283,210,246,207,180,235],
[177,184,0,192,175,149,170,145,163],
[111,57,148,0,161,128,93,145,154],
[149,130,165,179,0,182,141,175,171],
[134,94,191,212,158,0,152,120,177],
[172,133,170,247,199,188,0,192,199],
[149,160,195,195,165,220,148,0,203],
[116,105,177,186,169,163,141,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,158,185,176,182,173,175],
[156,0,144,136,150,154,164,163,165],
[173,196,0,181,172,168,181,178,178],
[182,204,159,0,180,179,199,193,195],
[155,190,168,160,0,175,182,171,160],
[164,186,172,161,165,0,191,179,190],
[158,176,159,141,158,149,0,165,172],
[167,177,162,147,169,161,175,0,179],
[165,175,162,145,180,150,168,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,149,181,142,154,156,181,131],
[152,0,186,173,185,166,193,182,135],
[191,154,0,183,167,191,156,180,166],
[159,167,157,0,168,175,175,201,138],
[198,155,173,172,0,189,173,183,144],
[186,174,149,165,151,0,174,184,150],
[184,147,184,165,167,166,0,204,154],
[159,158,160,139,157,156,136,0,179],
[209,205,174,202,196,190,186,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,161,159,185,164,183,170],
[164,0,171,170,162,177,159,182,173],
[169,169,0,149,160,170,158,171,165],
[179,170,191,0,160,180,161,182,170],
[181,178,180,180,0,178,163,186,179],
[155,163,170,160,162,0,155,172,163],
[176,181,182,179,177,185,0,185,164],
[157,158,169,158,154,168,155,0,160],
[170,167,175,170,161,177,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,158,181,178,187,162,190,165],
[172,0,178,188,176,187,164,183,166],
[182,162,0,185,186,180,179,180,178],
[159,152,155,0,168,176,154,175,169],
[162,164,154,172,0,173,151,171,166],
[153,153,160,164,167,0,156,159,171],
[178,176,161,186,189,184,0,197,176],
[150,157,160,165,169,181,143,0,159],
[175,174,162,171,174,169,164,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,146,151,164,175,167,171],
[166,0,165,157,169,176,161,154,184],
[171,175,0,179,162,179,187,198,189],
[194,183,161,0,179,205,186,213,177],
[189,171,178,161,0,192,197,190,196],
[176,164,161,135,148,0,171,164,177],
[165,179,153,154,143,169,0,169,186],
[173,186,142,127,150,176,171,0,184],
[169,156,151,163,144,163,154,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,196,178,177,193,185,162,185],
[164,0,169,174,155,184,167,160,181],
[144,171,0,136,166,177,153,151,163],
[162,166,204,0,168,180,180,163,177],
[163,185,174,172,0,164,175,166,167],
[147,156,163,160,176,0,169,172,166],
[155,173,187,160,165,171,0,173,164],
[178,180,189,177,174,168,167,0,177],
[155,159,177,163,173,174,176,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,163,181,177,188,170,194,176],
[144,0,153,149,161,154,153,177,166],
[177,187,0,177,179,179,161,177,174],
[159,191,163,0,160,174,167,183,175],
[163,179,161,180,0,171,173,179,175],
[152,186,161,166,169,0,167,178,177],
[170,187,179,173,167,173,0,179,175],
[146,163,163,157,161,162,161,0,172],
[164,174,166,165,165,163,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,126,133,129,125,129,147,135],
[193,0,154,151,164,153,161,171,162],
[214,186,0,170,174,174,183,187,188],
[207,189,170,0,172,196,198,173,202],
[211,176,166,168,0,187,169,147,189],
[215,187,166,144,153,0,163,146,162],
[211,179,157,142,171,177,0,163,179],
[193,169,153,167,193,194,177,0,186],
[205,178,152,138,151,178,161,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,194,171,178,176,160,184,180],
[167,0,179,163,184,178,172,168,171],
[146,161,0,157,163,160,146,173,162],
[169,177,183,0,183,170,178,185,180],
[162,156,177,157,0,163,164,174,161],
[164,162,180,170,177,0,158,178,178],
[180,168,194,162,176,182,0,163,173],
[156,172,167,155,166,162,177,0,168],
[160,169,178,160,179,162,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,189,174,186,188,176,171,176],
[172,0,181,160,201,176,169,168,176],
[151,159,0,177,184,165,174,164,184],
[166,180,163,0,197,171,175,167,177],
[154,139,156,143,0,164,161,162,164],
[152,164,175,169,176,0,165,163,181],
[164,171,166,165,179,175,0,168,171],
[169,172,176,173,178,177,172,0,187],
[164,164,156,163,176,159,169,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,166,196,174,178,166,180],
[171,0,165,173,194,185,190,181,164],
[174,175,0,169,198,201,178,176,177],
[174,167,171,0,199,184,180,163,178],
[144,146,142,141,0,170,155,137,170],
[166,155,139,156,170,0,167,148,168],
[162,150,162,160,185,173,0,156,176],
[174,159,164,177,203,192,184,0,176],
[160,176,163,162,170,172,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,131,155,129,148,151,120,163],
[163,0,135,159,124,120,144,123,156],
[209,205,0,163,164,144,167,160,158],
[185,181,177,0,138,138,168,128,180],
[211,216,176,202,0,176,176,169,196],
[192,220,196,202,164,0,170,172,192],
[189,196,173,172,164,170,0,150,182],
[220,217,180,212,171,168,190,0,190],
[177,184,182,160,144,148,158,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,181,155,170,167,163,162],
[161,0,164,169,146,164,150,151,157],
[166,176,0,164,166,171,163,161,168],
[159,171,176,0,156,173,167,146,154],
[185,194,174,184,0,185,168,170,170],
[170,176,169,167,155,0,172,159,156],
[173,190,177,173,172,168,0,168,167],
[177,189,179,194,170,181,172,0,166],
[178,183,172,186,170,184,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,191,175,175,184,196,166,200],
[177,0,156,145,162,151,193,171,173],
[149,184,0,159,194,153,198,156,193],
[165,195,181,0,203,192,173,195,191],
[165,178,146,137,0,159,168,161,185],
[156,189,187,148,181,0,201,176,208],
[144,147,142,167,172,139,0,177,166],
[174,169,184,145,179,164,163,0,161],
[140,167,147,149,155,132,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,155,217,136,92,226,127,94],
[160,0,134,166,146,111,205,133,96],
[185,206,0,217,180,141,245,168,93],
[123,174,123,0,159,104,237,87,140],
[204,194,160,181,0,249,292,155,146],
[248,229,199,236,91,0,303,132,214],
[114,135,95,103,48,37,0,58,58],
[213,207,172,253,185,208,282,0,143],
[246,244,247,200,194,126,282,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,176,189,166,173,177,163],
[168,0,170,173,157,175,170,193,165],
[172,170,0,170,169,146,167,168,164],
[164,167,170,0,160,141,169,171,174],
[151,183,171,180,0,157,181,175,169],
[174,165,194,199,183,0,167,187,183],
[167,170,173,171,159,173,0,152,171],
[163,147,172,169,165,153,188,0,162],
[177,175,176,166,171,157,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,145,142,165,134,175,177],
[170,0,157,140,148,139,129,179,167],
[183,183,0,152,150,153,171,189,190],
[195,200,188,0,172,166,151,166,196],
[198,192,190,168,0,167,170,175,203],
[175,201,187,174,173,0,147,169,184],
[206,211,169,189,170,193,0,170,185],
[165,161,151,174,165,171,170,0,189],
[163,173,150,144,137,156,155,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,207,212,206,209,203,219,225],
[170,0,174,178,223,180,189,186,210],
[133,166,0,200,171,215,143,156,236],
[128,162,140,0,178,188,157,123,184],
[134,117,169,162,0,137,144,138,237],
[131,160,125,152,203,0,171,178,222],
[137,151,197,183,196,169,0,221,223],
[121,154,184,217,202,162,119,0,237],
[115,130,104,156,103,118,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,187,172,179,168,167,168],
[180,0,141,190,161,164,168,132,166],
[163,199,0,190,179,199,183,176,190],
[153,150,150,0,178,151,145,162,159],
[168,179,161,162,0,169,185,142,190],
[161,176,141,189,171,0,152,155,176],
[172,172,157,195,155,188,0,167,156],
[173,208,164,178,198,185,173,0,171],
[172,174,150,181,150,164,184,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,165,185,143,196,171,182,164],
[154,0,151,187,162,177,155,169,146],
[175,189,0,183,140,178,154,184,178],
[155,153,157,0,165,159,159,151,146],
[197,178,200,175,0,189,163,178,191],
[144,163,162,181,151,0,156,157,154],
[169,185,186,181,177,184,0,177,174],
[158,171,156,189,162,183,163,0,184],
[176,194,162,194,149,186,166,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,162,192,171,155,171,169,211],
[168,0,164,162,153,152,158,191,177],
[178,176,0,167,161,118,174,166,187],
[148,178,173,0,158,117,158,172,197],
[169,187,179,182,0,172,163,159,181],
[185,188,222,223,168,0,182,217,177],
[169,182,166,182,177,158,0,181,167],
[171,149,174,168,181,123,159,0,181],
[129,163,153,143,159,163,173,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,162,156,168,174,173,168],
[171,0,151,164,154,155,167,160,162],
[171,189,0,180,176,179,181,182,164],
[178,176,160,0,172,171,157,170,175],
[184,186,164,168,0,184,171,180,171],
[172,185,161,169,156,0,143,156,174],
[166,173,159,183,169,197,0,172,164],
[167,180,158,170,160,184,168,0,160],
[172,178,176,165,169,166,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,160,163,145,169,185,163,171],
[169,0,161,155,171,152,162,157,179],
[180,179,0,159,147,169,182,153,167],
[177,185,181,0,167,172,184,182,185],
[195,169,193,173,0,172,190,165,187],
[171,188,171,168,168,0,171,165,169],
[155,178,158,156,150,169,0,145,155],
[177,183,187,158,175,175,195,0,168],
[169,161,173,155,153,171,185,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,217,212,176,191,192,198,163],
[143,0,201,173,150,174,155,164,158],
[123,139,0,147,132,148,135,132,139],
[128,167,193,0,129,174,144,177,139],
[164,190,208,211,0,188,176,165,191],
[149,166,192,166,152,0,164,135,158],
[148,185,205,196,164,176,0,192,184],
[142,176,208,163,175,205,148,0,176],
[177,182,201,201,149,182,156,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,161,159,162,160,153,166,150],
[164,0,175,163,173,171,165,169,157],
[179,165,0,154,157,160,157,163,152],
[181,177,186,0,184,174,164,186,166],
[178,167,183,156,0,164,173,177,165],
[180,169,180,166,176,0,176,191,173],
[187,175,183,176,167,164,0,184,165],
[174,171,177,154,163,149,156,0,149],
[190,183,188,174,175,167,175,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,197,149,116,148,172,207,183],
[175,0,218,189,183,160,204,226,185],
[143,122,0,178,135,188,183,201,160],
[191,151,162,0,134,154,157,185,199],
[224,157,205,206,0,158,203,201,197],
[192,180,152,186,182,0,190,233,234],
[168,136,157,183,137,150,0,180,183],
[133,114,139,155,139,107,160,0,149],
[157,155,180,141,143,106,157,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,166,170,159,166,163,169],
[178,0,157,179,178,166,183,176,174],
[171,183,0,177,188,169,170,185,169],
[174,161,163,0,185,163,169,172,164],
[170,162,152,155,0,159,162,163,169],
[181,174,171,177,181,0,179,164,170],
[174,157,170,171,178,161,0,160,171],
[177,164,155,168,177,176,180,0,159],
[171,166,171,176,171,170,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,170,176,162,173,182,175],
[166,0,176,181,163,167,179,170,174],
[164,164,0,170,179,172,173,181,182],
[170,159,170,0,168,167,161,187,191],
[164,177,161,172,0,169,167,182,179],
[178,173,168,173,171,0,172,180,179],
[167,161,167,179,173,168,0,171,170],
[158,170,159,153,158,160,169,0,181],
[165,166,158,149,161,161,170,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,139,188,148,146,144,147],
[176,0,180,165,179,196,176,170,166],
[173,160,0,158,179,177,166,154,160],
[201,175,182,0,188,161,202,166,177],
[152,161,161,152,0,147,149,175,152],
[192,144,163,179,193,0,177,176,170],
[194,164,174,138,191,163,0,178,157],
[196,170,186,174,165,164,162,0,193],
[193,174,180,163,188,170,183,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,174,162,167,170,190,164],
[167,0,168,156,151,159,153,166,142],
[167,172,0,168,169,172,164,177,164],
[166,184,172,0,154,159,150,182,158],
[178,189,171,186,0,170,168,191,176],
[173,181,168,181,170,0,159,179,166],
[170,187,176,190,172,181,0,188,172],
[150,174,163,158,149,161,152,0,142],
[176,198,176,182,164,174,168,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,170,174,170,178,168,162,165],
[148,0,153,163,154,159,165,152,154],
[170,187,0,167,167,159,165,155,150],
[166,177,173,0,169,173,175,169,175],
[170,186,173,171,0,165,172,162,178],
[162,181,181,167,175,0,175,164,167],
[172,175,175,165,168,165,0,163,165],
[178,188,185,171,178,176,177,0,160],
[175,186,190,165,162,173,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,145,176,162,174,131,213,129],
[103,0,153,134,189,170,222,203,137],
[195,187,0,189,170,170,127,264,195],
[164,206,151,0,196,104,215,192,128],
[178,151,170,144,0,167,234,266,159],
[166,170,170,236,173,0,191,254,183],
[209,118,213,125,106,149,0,221,170],
[127,137,76,148,74,86,119,0,32],
[211,203,145,212,181,157,170,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,160,158,152,150,166,163,137],
[182,0,169,172,170,161,169,172,159],
[180,171,0,163,183,151,155,159,161],
[182,168,177,0,182,168,176,169,172],
[188,170,157,158,0,166,179,165,154],
[190,179,189,172,174,0,172,180,163],
[174,171,185,164,161,168,0,176,172],
[177,168,181,171,175,160,164,0,154],
[203,181,179,168,186,177,168,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,157,173,170,167,173,171],
[178,0,181,160,173,180,176,179,162],
[169,159,0,171,176,169,165,174,160],
[183,180,169,0,184,192,187,186,165],
[167,167,164,156,0,161,145,154,155],
[170,160,171,148,179,0,174,178,165],
[173,164,175,153,195,166,0,173,160],
[167,161,166,154,186,162,167,0,158],
[169,178,180,175,185,175,180,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,118,143,159,102,125,110,136],
[176,0,149,189,152,120,161,123,152],
[222,191,0,168,181,173,184,180,199],
[197,151,172,0,186,121,146,114,149],
[181,188,159,154,0,148,200,145,162],
[238,220,167,219,192,0,194,158,198],
[215,179,156,194,140,146,0,129,154],
[230,217,160,226,195,182,211,0,172],
[204,188,141,191,178,142,186,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,169,150,183,180,202,182,163],
[139,0,165,151,164,194,165,160,166],
[171,175,0,168,165,185,208,186,198],
[190,189,172,0,176,189,203,187,161],
[157,176,175,164,0,197,187,195,163],
[160,146,155,151,143,0,165,163,130],
[138,175,132,137,153,175,0,184,158],
[158,180,154,153,145,177,156,0,161],
[177,174,142,179,177,210,182,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,162,96,115,128,128,201,96],
[147,0,115,100,101,104,94,171,101],
[178,225,0,167,196,167,161,220,133],
[244,240,173,0,169,144,183,248,171],
[225,239,144,171,0,99,166,233,166],
[212,236,173,196,241,0,157,225,145],
[212,246,179,157,174,183,0,247,215],
[139,169,120,92,107,115,93,0,95],
[244,239,207,169,174,195,125,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,197,203,166,156,188,198,159],
[154,0,177,198,181,161,168,183,161],
[143,163,0,175,137,141,144,173,157],
[137,142,165,0,137,155,166,178,155],
[174,159,203,203,0,170,184,189,181],
[184,179,199,185,170,0,172,204,156],
[152,172,196,174,156,168,0,178,175],
[142,157,167,162,151,136,162,0,155],
[181,179,183,185,159,184,165,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,175,160,165,156,160,169,177],
[194,0,184,166,192,165,176,193,170],
[165,156,0,155,163,156,142,169,178],
[180,174,185,0,187,177,162,173,178],
[175,148,177,153,0,159,141,173,148],
[184,175,184,163,181,0,185,184,191],
[180,164,198,178,199,155,0,181,200],
[171,147,171,167,167,156,159,0,168],
[163,170,162,162,192,149,140,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,139,204,191,207,186,202,194],
[100,0,138,128,119,136,71,140,132],
[201,202,0,198,168,224,154,217,205],
[136,212,142,0,158,199,143,169,183],
[149,221,172,182,0,173,155,172,168],
[133,204,116,141,167,0,138,163,138],
[154,269,186,197,185,202,0,199,191],
[138,200,123,171,168,177,141,0,174],
[146,208,135,157,172,202,149,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,190,165,168,165,181,176,157],
[175,0,180,157,199,164,191,168,169],
[150,160,0,156,160,166,178,171,179],
[175,183,184,0,174,170,181,184,191],
[172,141,180,166,0,185,198,191,173],
[175,176,174,170,155,0,165,180,170],
[159,149,162,159,142,175,0,162,165],
[164,172,169,156,149,160,178,0,155],
[183,171,161,149,167,170,175,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,170,170,168,177,178,171],
[173,0,168,168,161,161,176,183,163],
[158,172,0,148,161,164,156,174,167],
[170,172,192,0,171,168,169,172,173],
[170,179,179,169,0,179,172,194,182],
[172,179,176,172,161,0,177,179,171],
[163,164,184,171,168,163,0,163,170],
[162,157,166,168,146,161,177,0,154],
[169,177,173,167,158,169,170,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,102,149,123,143,96,141,183],
[223,0,169,177,234,140,165,144,194],
[238,171,0,149,253,171,181,196,273],
[191,163,191,0,220,113,183,138,207],
[217,106,87,120,0,151,134,132,195],
[197,200,169,227,189,0,163,194,173],
[244,175,159,157,206,177,0,190,238],
[199,196,144,202,208,146,150,0,235],
[157,146,67,133,145,167,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,165,153,152,175,179,166,171],
[185,0,179,165,166,170,184,176,191],
[175,161,0,162,146,173,170,164,168],
[187,175,178,0,170,174,182,188,181],
[188,174,194,170,0,189,191,169,178],
[165,170,167,166,151,0,174,172,158],
[161,156,170,158,149,166,0,161,163],
[174,164,176,152,171,168,179,0,176],
[169,149,172,159,162,182,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,169,177,177,166,163,157],
[170,0,161,151,159,175,168,173,156],
[171,179,0,161,161,186,172,167,159],
[171,189,179,0,161,174,174,179,189],
[163,181,179,179,0,166,165,183,175],
[163,165,154,166,174,0,160,163,158],
[174,172,168,166,175,180,0,164,160],
[177,167,173,161,157,177,176,0,183],
[183,184,181,151,165,182,180,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,158,163,116,109,137,177,149],
[184,0,156,164,125,143,133,162,133],
[182,184,0,162,165,147,115,153,106],
[177,176,178,0,167,188,114,184,133],
[224,215,175,173,0,208,172,218,147],
[231,197,193,152,132,0,174,181,135],
[203,207,225,226,168,166,0,157,149],
[163,178,187,156,122,159,183,0,179],
[191,207,234,207,193,205,191,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,178,181,175,186,176,165,169],
[158,0,187,179,166,187,169,158,167],
[162,153,0,169,157,159,162,154,149],
[159,161,171,0,168,173,178,157,163],
[165,174,183,172,0,175,180,165,149],
[154,153,181,167,165,0,168,165,170],
[164,171,178,162,160,172,0,155,161],
[175,182,186,183,175,175,185,0,159],
[171,173,191,177,191,170,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,164,167,167,171,149,176,145],
[178,0,159,193,168,170,159,161,141],
[176,181,0,192,167,171,168,190,169],
[173,147,148,0,157,166,132,145,123],
[173,172,173,183,0,164,164,177,178],
[169,170,169,174,176,0,179,160,126],
[191,181,172,208,176,161,0,175,140],
[164,179,150,195,163,180,165,0,142],
[195,199,171,217,162,214,200,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,173,162,173,165,165,164,169],
[182,0,178,170,179,170,179,182,185],
[167,162,0,165,162,160,167,142,156],
[178,170,175,0,185,172,169,170,181],
[167,161,178,155,0,174,184,176,173],
[175,170,180,168,166,0,180,165,168],
[175,161,173,171,156,160,0,166,163],
[176,158,198,170,164,175,174,0,159],
[171,155,184,159,167,172,177,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,175,162,162,172,175,170],
[160,0,155,179,175,175,185,158,159],
[167,185,0,181,167,178,184,170,164],
[165,161,159,0,163,174,184,157,164],
[178,165,173,177,0,170,194,172,161],
[178,165,162,166,170,0,170,159,160],
[168,155,156,156,146,170,0,166,156],
[165,182,170,183,168,181,174,0,167],
[170,181,176,176,179,180,184,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,172,190,192,170,191,202],
[165,0,162,170,186,184,165,166,171],
[165,178,0,181,191,186,181,167,210],
[168,170,159,0,166,195,163,180,178],
[150,154,149,174,0,187,137,148,173],
[148,156,154,145,153,0,152,140,169],
[170,175,159,177,203,188,0,188,190],
[149,174,173,160,192,200,152,0,200],
[138,169,130,162,167,171,150,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,247,265,169,224,220,183,236],
[83,0,160,158,138,135,148,157,136],
[93,180,0,157,174,170,168,174,124],
[75,182,183,0,140,190,217,160,131],
[171,202,166,200,0,175,196,220,157],
[116,205,170,150,165,0,182,189,164],
[120,192,172,123,144,158,0,167,177],
[157,183,166,180,120,151,173,0,150],
[104,204,216,209,183,176,163,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,158,160,163,159,163,164,169],
[171,0,170,174,166,166,163,162,165],
[182,170,0,170,169,158,172,165,170],
[180,166,170,0,170,169,166,175,174],
[177,174,171,170,0,155,170,179,169],
[181,174,182,171,185,0,167,180,167],
[177,177,168,174,170,173,0,173,166],
[176,178,175,165,161,160,167,0,161],
[171,175,170,166,171,173,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,169,194,158,175,153,186],
[171,0,176,170,169,181,171,168,165],
[172,164,0,181,209,162,191,178,184],
[171,170,159,0,209,165,173,149,152],
[146,171,131,131,0,147,154,131,161],
[182,159,178,175,193,0,185,163,196],
[165,169,149,167,186,155,0,161,160],
[187,172,162,191,209,177,179,0,193],
[154,175,156,188,179,144,180,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,172,166,151,161,170,155,159],
[151,0,162,160,160,167,155,157,159],
[168,178,0,165,173,184,156,176,160],
[174,180,175,0,164,189,168,166,156],
[189,180,167,176,0,180,173,179,167],
[179,173,156,151,160,0,152,163,158],
[170,185,184,172,167,188,0,176,171],
[185,183,164,174,161,177,164,0,162],
[181,181,180,184,173,182,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,140,130,181,161,209,178,191],
[270,0,192,188,181,173,170,178,260],
[200,148,0,188,181,173,170,178,229],
[210,152,152,0,121,173,152,140,191],
[159,159,159,219,0,180,101,139,152],
[179,167,167,167,160,0,109,109,160],
[131,170,170,188,239,231,0,258,148],
[162,162,162,200,201,231,82,0,179],
[149,80,111,149,188,180,192,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,177,175,138,179,201,166,175],
[185,0,150,171,138,132,177,177,153],
[163,190,0,179,172,163,170,163,190],
[165,169,161,0,171,161,212,172,156],
[202,202,168,169,0,158,175,195,190],
[161,208,177,179,182,0,184,163,199],
[139,163,170,128,165,156,0,162,172],
[174,163,177,168,145,177,178,0,173],
[165,187,150,184,150,141,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,183,146,171,178,158,193,136],
[182,0,181,167,182,209,169,172,182],
[157,159,0,124,135,172,171,161,167],
[194,173,216,0,194,196,185,203,155],
[169,158,205,146,0,177,172,186,164],
[162,131,168,144,163,0,153,181,150],
[182,171,169,155,168,187,0,198,159],
[147,168,179,137,154,159,142,0,152],
[204,158,173,185,176,190,181,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,191,155,213,199,196,185,175],
[169,0,160,194,166,185,172,212,162],
[149,180,0,145,188,139,159,164,163],
[185,146,195,0,198,182,182,158,181],
[127,174,152,142,0,157,147,167,144],
[141,155,201,158,183,0,143,160,143],
[144,168,181,158,193,197,0,192,187],
[155,128,176,182,173,180,148,0,138],
[165,178,177,159,196,197,153,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,155,167,183,196,188,173],
[167,0,170,148,150,200,179,152,177],
[168,170,0,155,168,184,176,189,178],
[185,192,185,0,165,182,194,194,195],
[173,190,172,175,0,168,205,192,215],
[157,140,156,158,172,0,174,170,160],
[144,161,164,146,135,166,0,161,165],
[152,188,151,146,148,170,179,0,184],
[167,163,162,145,125,180,175,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,167,162,166,172,173,157],
[173,0,166,179,157,166,156,166,161],
[174,174,0,163,159,167,155,167,153],
[173,161,177,0,155,162,169,162,169],
[178,183,181,185,0,166,180,178,179],
[174,174,173,178,174,0,166,175,160],
[168,184,185,171,160,174,0,170,157],
[167,174,173,178,162,165,170,0,153],
[183,179,187,171,161,180,183,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,169,181,169,168,169,166],
[166,0,179,171,178,158,160,168,177],
[167,161,0,172,182,157,166,176,166],
[171,169,168,0,169,162,177,180,179],
[159,162,158,171,0,158,167,167,151],
[171,182,183,178,182,0,170,187,176],
[172,180,174,163,173,170,0,175,180],
[171,172,164,160,173,153,165,0,175],
[174,163,174,161,189,164,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,161,132,192,156,184,155],
[162,0,177,152,120,165,163,167,166],
[168,163,0,153,149,192,170,168,170],
[179,188,187,0,157,210,160,179,200],
[208,220,191,183,0,190,181,179,167],
[148,175,148,130,150,0,153,168,160],
[184,177,170,180,159,187,0,183,172],
[156,173,172,161,161,172,157,0,180],
[185,174,170,140,173,180,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,196,157,192,198,177,180,166],
[166,0,174,170,172,180,165,174,176],
[144,166,0,140,180,164,150,169,151],
[183,170,200,0,180,181,165,202,175],
[148,168,160,160,0,183,160,178,181],
[142,160,176,159,157,0,164,155,171],
[163,175,190,175,180,176,0,196,187],
[160,166,171,138,162,185,144,0,175],
[174,164,189,165,159,169,153,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,159,179,164,173,156,155,165],
[194,0,168,194,176,191,168,157,173],
[181,172,0,190,191,173,168,174,166],
[161,146,150,0,155,153,153,152,151],
[176,164,149,185,0,166,153,157,170],
[167,149,167,187,174,0,160,163,153],
[184,172,172,187,187,180,0,173,160],
[185,183,166,188,183,177,167,0,169],
[175,167,174,189,170,187,180,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,160,173,178,180,191,189,187],
[165,0,180,179,185,204,193,185,197],
[180,160,0,171,181,169,195,184,210],
[167,161,169,0,160,172,180,187,186],
[162,155,159,180,0,192,191,179,189],
[160,136,171,168,148,0,180,166,160],
[149,147,145,160,149,160,0,160,171],
[151,155,156,153,161,174,180,0,172],
[153,143,130,154,151,180,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,165,166,128,153,172,186,176],
[205,0,263,183,181,242,212,187,169],
[175,77,0,163,165,169,144,138,166],
[174,157,177,0,147,185,213,208,163],
[212,159,175,193,0,170,205,163,213],
[187,98,171,155,170,0,219,161,172],
[168,128,196,127,135,121,0,198,167],
[154,153,202,132,177,179,142,0,154],
[164,171,174,177,127,168,173,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,159,166,180,174,164,176,170],
[171,0,171,164,171,175,171,171,170],
[181,169,0,188,180,188,166,177,178],
[174,176,152,0,172,175,154,170,170],
[160,169,160,168,0,170,167,173,170],
[166,165,152,165,170,0,166,177,169],
[176,169,174,186,173,174,0,170,175],
[164,169,163,170,167,163,170,0,171],
[170,170,162,170,170,171,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,182,191,152,183,162,168,163],
[179,0,187,184,184,174,171,166,175],
[158,153,0,175,178,169,168,164,171],
[149,156,165,0,179,168,168,155,148],
[188,156,162,161,0,172,170,165,159],
[157,166,171,172,168,0,170,169,168],
[178,169,172,172,170,170,0,167,171],
[172,174,176,185,175,171,173,0,163],
[177,165,169,192,181,172,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,169,176,171,151,150,190,182],
[140,0,170,162,197,149,152,165,150],
[171,170,0,172,173,153,172,170,174],
[164,178,168,0,169,174,170,186,173],
[169,143,167,171,0,136,183,165,161],
[189,191,187,166,204,0,193,202,190],
[190,188,168,170,157,147,0,181,147],
[150,175,170,154,175,138,159,0,159],
[158,190,166,167,179,150,193,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,169,182,178,178,194,171],
[174,0,194,167,181,178,162,184,157],
[167,146,0,161,173,168,173,167,162],
[171,173,179,0,186,198,166,168,170],
[158,159,167,154,0,183,187,183,156],
[162,162,172,142,157,0,158,146,149],
[162,178,167,174,153,182,0,181,163],
[146,156,173,172,157,194,159,0,147],
[169,183,178,170,184,191,177,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,177,165,173,180,160,166,171],
[178,0,169,163,159,158,175,160,168],
[163,171,0,165,165,167,169,162,155],
[175,177,175,0,158,165,168,167,182],
[167,181,175,182,0,186,179,171,188],
[160,182,173,175,154,0,168,157,165],
[180,165,171,172,161,172,0,160,174],
[174,180,178,173,169,183,180,0,166],
[169,172,185,158,152,175,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,183,175,185,178,178,173,160],
[167,0,190,195,169,183,157,167,181],
[157,150,0,170,174,177,160,159,154],
[165,145,170,0,174,176,155,160,155],
[155,171,166,166,0,174,162,172,166],
[162,157,163,164,166,0,154,165,146],
[162,183,180,185,178,186,0,163,166],
[167,173,181,180,168,175,177,0,158],
[180,159,186,185,174,194,174,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,169,173,156,183,174,177,179],
[149,0,166,170,127,165,160,172,121],
[171,174,0,192,178,178,186,195,152],
[167,170,148,0,156,165,173,182,165],
[184,213,162,184,0,197,197,190,163],
[157,175,162,175,143,0,189,180,171],
[166,180,154,167,143,151,0,153,138],
[163,168,145,158,150,160,187,0,167],
[161,219,188,175,177,169,202,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,150,153,165,152,168,161,160],
[182,0,167,180,168,162,174,167,173],
[190,173,0,160,171,157,172,174,167],
[187,160,180,0,186,170,168,171,170],
[175,172,169,154,0,152,168,171,172],
[188,178,183,170,188,0,184,178,186],
[172,166,168,172,172,156,0,166,172],
[179,173,166,169,169,162,174,0,174],
[180,167,173,170,168,154,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,192,169,205,161,169,189,177],
[146,0,170,149,156,143,170,150,155],
[148,170,0,155,181,173,154,163,169],
[171,191,185,0,180,145,179,156,170],
[135,184,159,160,0,159,171,152,179],
[179,197,167,195,181,0,187,194,190],
[171,170,186,161,169,153,0,178,162],
[151,190,177,184,188,146,162,0,173],
[163,185,171,170,161,150,178,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,107,104,101,9,24,155,184],
[289,0,208,113,190,190,190,179,256],
[233,132,0,108,185,33,233,132,209],
[236,227,232,0,125,134,185,232,236],
[239,150,155,215,0,137,108,155,283],
[331,150,307,206,203,0,200,197,274],
[316,150,107,155,232,140,0,155,232],
[185,161,208,108,185,143,185,0,221],
[156,84,131,104,57,66,108,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,171,171,158,187,162,184],
[172,0,158,159,172,168,166,179,172],
[172,182,0,174,185,184,163,159,197],
[169,181,166,0,174,172,178,180,187],
[169,168,155,166,0,169,173,174,177],
[182,172,156,168,171,0,175,174,183],
[153,174,177,162,167,165,0,172,191],
[178,161,181,160,166,166,168,0,196],
[156,168,143,153,163,157,149,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,199,161,192,159,160,156,177],
[158,0,204,164,182,175,169,171,175],
[141,136,0,154,144,154,154,122,150],
[179,176,186,0,173,155,184,164,172],
[148,158,196,167,0,142,156,163,147],
[181,165,186,185,198,0,184,171,177],
[180,171,186,156,184,156,0,163,174],
[184,169,218,176,177,169,177,0,199],
[163,165,190,168,193,163,166,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,190,177,162,171,164,178,175],
[173,0,186,179,157,172,170,169,171],
[150,154,0,162,146,158,165,162,156],
[163,161,178,0,153,152,152,163,160],
[178,183,194,187,0,172,165,171,170],
[169,168,182,188,168,0,162,171,161],
[176,170,175,188,175,178,0,175,175],
[162,171,178,177,169,169,165,0,173],
[165,169,184,180,170,179,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,148,154,166,172,155,176,172],
[176,0,168,171,165,170,177,171,167],
[192,172,0,181,167,186,175,175,187],
[186,169,159,0,152,176,161,179,187],
[174,175,173,188,0,176,170,183,193],
[168,170,154,164,164,0,165,171,185],
[185,163,165,179,170,175,0,175,173],
[164,169,165,161,157,169,165,0,180],
[168,173,153,153,147,155,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,155,191,180,153,163,173],
[182,0,159,163,190,188,177,170,167],
[173,181,0,169,189,179,180,163,186],
[185,177,171,0,188,182,167,158,173],
[149,150,151,152,0,150,157,155,160],
[160,152,161,158,190,0,157,157,164],
[187,163,160,173,183,183,0,161,164],
[177,170,177,182,185,183,179,0,180],
[167,173,154,167,180,176,176,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,166,161,166,164,186,138],
[168,0,167,164,173,146,153,221,170],
[184,173,0,171,188,140,156,181,173],
[174,176,169,0,188,159,169,174,164],
[179,167,152,152,0,125,147,160,121],
[174,194,200,181,215,0,192,216,149],
[176,187,184,171,193,148,0,187,163],
[154,119,159,166,180,124,153,0,128],
[202,170,167,176,219,191,177,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,172,156,151,162,155,158],
[168,0,169,168,160,148,165,161,169],
[179,171,0,170,146,150,170,163,172],
[168,172,170,0,145,135,163,160,165],
[184,180,194,195,0,171,186,169,183],
[189,192,190,205,169,0,182,187,184],
[178,175,170,177,154,158,0,177,166],
[185,179,177,180,171,153,163,0,176],
[182,171,168,175,157,156,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,163,181,145,171,151,163,133],
[198,0,179,179,164,185,196,194,171],
[177,161,0,178,196,181,166,203,168],
[159,161,162,0,131,194,171,158,132],
[195,176,144,209,0,173,173,213,171],
[169,155,159,146,167,0,149,157,147],
[189,144,174,169,167,191,0,189,155],
[177,146,137,182,127,183,151,0,126],
[207,169,172,208,169,193,185,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,125,229,163,114,138,163,180],
[170,0,170,220,216,147,143,147,165],
[215,170,0,231,96,153,164,129,154],
[111,120,109,0,89,110,85,120,170],
[177,124,244,251,0,144,164,165,209],
[226,193,187,230,196,0,181,167,216],
[202,197,176,255,176,159,0,178,195],
[177,193,211,220,175,173,162,0,210],
[160,175,186,170,131,124,145,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,113,178,210,106,123,180,151],
[184,0,106,167,156,104,135,182,187],
[227,234,0,233,252,190,174,214,162],
[162,173,107,0,166,86,52,168,177],
[130,184,88,174,0,137,135,180,155],
[234,236,150,254,203,0,163,251,223],
[217,205,166,288,205,177,0,219,212],
[160,158,126,172,160,89,121,0,128],
[189,153,178,163,185,117,128,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,158,164,152,174,162,187,175],
[179,0,178,157,170,162,162,170,173],
[182,162,0,165,172,180,163,166,170],
[176,183,175,0,159,177,170,208,171],
[188,170,168,181,0,173,171,193,179],
[166,178,160,163,167,0,173,178,172],
[178,178,177,170,169,167,0,175,172],
[153,170,174,132,147,162,165,0,155],
[165,167,170,169,161,168,168,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,164,159,166,169,159,171,184],
[151,0,165,149,157,156,162,150,168],
[176,175,0,155,157,160,169,163,172],
[181,191,185,0,184,166,180,175,185],
[174,183,183,156,0,180,173,154,175],
[171,184,180,174,160,0,171,175,174],
[181,178,171,160,167,169,0,176,188],
[169,190,177,165,186,165,164,0,186],
[156,172,168,155,165,166,152,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,185,176,180,167,179,165,180],
[143,0,156,134,139,146,149,140,148],
[155,184,0,167,166,160,171,155,154],
[164,206,173,0,179,163,175,169,171],
[160,201,174,161,0,165,172,170,171],
[173,194,180,177,175,0,186,165,181],
[161,191,169,165,168,154,0,152,158],
[175,200,185,171,170,175,188,0,178],
[160,192,186,169,169,159,182,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,204,189,173,188,190,156,170],
[169,0,171,188,163,178,165,158,169],
[136,169,0,169,153,165,149,147,167],
[151,152,171,0,157,176,176,162,171],
[167,177,187,183,0,177,191,173,191],
[152,162,175,164,163,0,163,170,165],
[150,175,191,164,149,177,0,170,166],
[184,182,193,178,167,170,170,0,167],
[170,171,173,169,149,175,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,221,193,206,183,184,194,203],
[170,0,181,167,166,159,180,162,157],
[119,159,0,160,133,149,157,132,169],
[147,173,180,0,165,161,176,175,169],
[134,174,207,175,0,187,171,169,203],
[157,181,191,179,153,0,164,192,180],
[156,160,183,164,169,176,0,178,184],
[146,178,208,165,171,148,162,0,173],
[137,183,171,171,137,160,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,178,173,159,174,177,168,183],
[150,0,164,167,148,171,149,156,157],
[162,176,0,174,166,150,156,150,160],
[167,173,166,0,157,171,176,160,161],
[181,192,174,183,0,181,177,162,168],
[166,169,190,169,159,0,159,155,183],
[163,191,184,164,163,181,0,170,172],
[172,184,190,180,178,185,170,0,170],
[157,183,180,179,172,157,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,183,187,171,174,167,197,187],
[154,0,168,185,175,166,158,171,185],
[157,172,0,171,173,175,169,164,178],
[153,155,169,0,158,168,176,170,165],
[169,165,167,182,0,177,177,177,183],
[166,174,165,172,163,0,173,188,165],
[173,182,171,164,163,167,0,174,182],
[143,169,176,170,163,152,166,0,176],
[153,155,162,175,157,175,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,195,196,167,191,188,195,170],
[159,0,177,194,168,183,179,183,161],
[145,163,0,160,147,162,150,151,143],
[144,146,180,0,162,174,173,162,140],
[173,172,193,178,0,211,178,180,165],
[149,157,178,166,129,0,163,181,156],
[152,161,190,167,162,177,0,176,157],
[145,157,189,178,160,159,164,0,153],
[170,179,197,200,175,184,183,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,179,170,153,175,161,159,167],
[184,0,193,182,177,178,169,176,180],
[161,147,0,174,160,165,159,150,181],
[170,158,166,0,165,180,152,163,167],
[187,163,180,175,0,178,174,165,177],
[165,162,175,160,162,0,166,154,169],
[179,171,181,188,166,174,0,159,170],
[181,164,190,177,175,186,181,0,177],
[173,160,159,173,163,171,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,215,208,189,170,191,200,185],
[171,0,173,180,163,150,190,184,160],
[125,167,0,200,162,163,179,191,158],
[132,160,140,0,138,129,158,153,139],
[151,177,178,202,0,173,185,190,158],
[170,190,177,211,167,0,184,195,169],
[149,150,161,182,155,156,0,191,163],
[140,156,149,187,150,145,149,0,136],
[155,180,182,201,182,171,177,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,153,161,182,158,140,203,120],
[199,0,136,157,178,202,150,209,154],
[187,204,0,185,177,165,174,219,176],
[179,183,155,0,198,169,164,221,187],
[158,162,163,142,0,176,137,244,162],
[182,138,175,171,164,0,156,185,144],
[200,190,166,176,203,184,0,240,152],
[137,131,121,119,96,155,100,0,123],
[220,186,164,153,178,196,188,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,169,167,162,166,176,169,170],
[185,0,186,179,179,188,169,173,178],
[171,154,0,180,182,178,165,176,179],
[173,161,160,0,162,166,168,171,172],
[178,161,158,178,0,177,171,176,172],
[174,152,162,174,163,0,170,161,169],
[164,171,175,172,169,170,0,173,182],
[171,167,164,169,164,179,167,0,183],
[170,162,161,168,168,171,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,158,151,155,165,162,170,168],
[187,0,185,188,174,177,160,176,179],
[182,155,0,165,174,149,164,167,178],
[189,152,175,0,171,165,175,170,165],
[185,166,166,169,0,167,177,182,168],
[175,163,191,175,173,0,192,171,182],
[178,180,176,165,163,148,0,153,172],
[170,164,173,170,158,169,187,0,175],
[172,161,162,175,172,158,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,186,142,171,163,143,155],
[173,0,171,180,159,157,171,164,145],
[170,169,0,177,145,157,126,122,181],
[154,160,163,0,168,137,141,153,155],
[198,181,195,172,0,142,160,158,177],
[169,183,183,203,198,0,138,147,139],
[177,169,214,199,180,202,0,183,185],
[197,176,218,187,182,193,157,0,176],
[185,195,159,185,163,201,155,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,181,167,165,168,176,181,162],
[158,0,167,157,168,160,170,174,171],
[159,173,0,167,168,174,181,177,168],
[173,183,173,0,172,170,181,178,163],
[175,172,172,168,0,178,169,189,152],
[172,180,166,170,162,0,177,194,166],
[164,170,159,159,171,163,0,188,167],
[159,166,163,162,151,146,152,0,146],
[178,169,172,177,188,174,173,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,176,178,177,185,174,175],
[171,0,170,177,176,176,182,169,170],
[166,170,0,170,168,181,174,169,164],
[164,163,170,0,169,172,166,159,160],
[162,164,172,171,0,163,169,156,166],
[163,164,159,168,177,0,176,161,154],
[155,158,166,174,171,164,0,165,159],
[166,171,171,181,184,179,175,0,180],
[165,170,176,180,174,186,181,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,227,255,113,142,218,113,255],
[85,0,227,142,113,151,227,122,227],
[113,113,0,255,113,255,255,113,255],
[85,198,85,0,113,227,85,198,85],
[227,227,227,227,0,227,227,85,227],
[198,189,85,113,113,0,85,113,198],
[122,113,85,255,113,255,0,113,255],
[227,218,227,142,255,227,227,0,227],
[85,113,85,255,113,142,85,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,163,181,210,184,183,194,171],
[164,0,180,168,206,190,178,168,204],
[177,160,0,178,193,182,158,190,172],
[159,172,162,0,178,193,181,199,172],
[130,134,147,162,0,180,143,150,151],
[156,150,158,147,160,0,173,181,178],
[157,162,182,159,197,167,0,163,176],
[146,172,150,141,190,159,177,0,183],
[169,136,168,168,189,162,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,151,178,156,216,157,211,171],
[160,0,179,184,197,202,168,228,150],
[189,161,0,223,172,207,191,262,183],
[162,156,117,0,161,169,167,211,226],
[184,143,168,179,0,181,117,224,181],
[124,138,133,171,159,0,168,194,101],
[183,172,149,173,223,172,0,216,152],
[129,112,78,129,116,146,124,0,109],
[169,190,157,114,159,239,188,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,157,167,141,183,177,160],
[177,0,169,163,167,162,179,185,154],
[173,171,0,135,178,147,175,183,190],
[183,177,205,0,175,158,192,208,169],
[173,173,162,165,0,153,181,159,148],
[199,178,193,182,187,0,208,182,168],
[157,161,165,148,159,132,0,182,159],
[163,155,157,132,181,158,158,0,159],
[180,186,150,171,192,172,181,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,186,198,197,130,215,206,185],
[150,0,168,192,165,167,184,160,142],
[154,172,0,186,162,175,185,174,158],
[142,148,154,0,166,145,164,149,177],
[143,175,178,174,0,155,174,183,145],
[210,173,165,195,185,0,185,190,188],
[125,156,155,176,166,155,0,132,136],
[134,180,166,191,157,150,208,0,149],
[155,198,182,163,195,152,204,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,176,195,180,164,194,186],
[165,0,171,182,186,169,164,189,187],
[169,169,0,173,182,190,154,187,177],
[164,158,167,0,191,175,163,173,161],
[145,154,158,149,0,160,163,176,163],
[160,171,150,165,180,0,176,182,184],
[176,176,186,177,177,164,0,167,167],
[146,151,153,167,164,158,173,0,164],
[154,153,163,179,177,156,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,156,169,173,169,175,154],
[160,0,158,148,169,164,180,177,156],
[175,182,0,151,184,165,159,171,176],
[184,192,189,0,171,156,188,164,184],
[171,171,156,169,0,181,152,165,165],
[167,176,175,184,159,0,166,144,174],
[171,160,181,152,188,174,0,149,135],
[165,163,169,176,175,196,191,0,158],
[186,184,164,156,175,166,205,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,193,228,201,173,204,165,201],
[163,0,187,211,180,186,203,177,197],
[147,153,0,189,184,201,188,163,192],
[112,129,151,0,138,139,170,132,170],
[139,160,156,202,0,165,205,161,184],
[167,154,139,201,175,0,175,137,181],
[136,137,152,170,135,165,0,138,156],
[175,163,177,208,179,203,202,0,210],
[139,143,148,170,156,159,184,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,161,178,163,173,162,175,173],
[180,0,167,181,159,177,179,184,170],
[179,173,0,182,159,184,168,168,176],
[162,159,158,0,142,146,148,159,160],
[177,181,181,198,0,189,192,182,168],
[167,163,156,194,151,0,157,170,167],
[178,161,172,192,148,183,0,178,164],
[165,156,172,181,158,170,162,0,180],
[167,170,164,180,172,173,176,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,184,181,168,180,171,178,189],
[157,0,180,164,151,162,163,167,171],
[156,160,0,160,149,170,166,178,172],
[159,176,180,0,180,170,169,175,178],
[172,189,191,160,0,170,179,202,180],
[160,178,170,170,170,0,152,170,168],
[169,177,174,171,161,188,0,182,172],
[162,173,162,165,138,170,158,0,166],
[151,169,168,162,160,172,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,167,174,163,180,165,182,183],
[174,0,171,164,172,180,178,179,170],
[173,169,0,167,175,180,172,183,177],
[166,176,173,0,168,184,188,184,174],
[177,168,165,172,0,159,180,182,171],
[160,160,160,156,181,0,170,166,173],
[175,162,168,152,160,170,0,179,175],
[158,161,157,156,158,174,161,0,163],
[157,170,163,166,169,167,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,178,170,164,158,158,159],
[166,0,153,179,161,163,162,162,160],
[177,187,0,182,172,172,173,169,161],
[162,161,158,0,167,156,166,156,168],
[170,179,168,173,0,160,166,157,163],
[176,177,168,184,180,0,175,175,168],
[182,178,167,174,174,165,0,160,167],
[182,178,171,184,183,165,180,0,178],
[181,180,179,172,177,172,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,174,178,165,173,174,180],
[167,0,168,173,171,167,168,163,178],
[172,172,0,171,181,162,184,178,189],
[166,167,169,0,181,172,172,160,182],
[162,169,159,159,0,164,162,156,174],
[175,173,178,168,176,0,186,165,185],
[167,172,156,168,178,154,0,158,182],
[166,177,162,180,184,175,182,0,177],
[160,162,151,158,166,155,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,189,144,186,224,216,250,209],
[136,0,185,161,157,190,170,222,169],
[151,155,0,149,157,175,176,193,149],
[196,179,191,0,185,186,173,196,151],
[154,183,183,155,0,176,164,200,140],
[116,150,165,154,164,0,146,189,152],
[124,170,164,167,176,194,0,212,149],
[90,118,147,144,140,151,128,0,146],
[131,171,191,189,200,188,191,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,189,166,160,214,167,175,187],
[137,0,159,131,112,147,139,136,135],
[151,181,0,156,155,165,163,133,154],
[174,209,184,0,166,219,154,156,166],
[180,228,185,174,0,197,165,167,185],
[126,193,175,121,143,0,131,143,137],
[173,201,177,186,175,209,0,162,187],
[165,204,207,184,173,197,178,0,174],
[153,205,186,174,155,203,153,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,189,180,181,195,195,204,156],
[130,0,138,138,176,134,174,169,138],
[151,202,0,160,166,174,169,197,142],
[160,202,180,0,203,187,193,213,181],
[159,164,174,137,0,156,157,174,132],
[145,206,166,153,184,0,183,168,163],
[145,166,171,147,183,157,0,194,142],
[136,171,143,127,166,172,146,0,126],
[184,202,198,159,208,177,198,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,195,177,203,193,202,159,210],
[174,0,183,185,193,191,201,151,197],
[145,157,0,156,169,191,180,154,185],
[163,155,184,0,196,204,177,188,190],
[137,147,171,144,0,168,148,137,179],
[147,149,149,136,172,0,152,164,169],
[138,139,160,163,192,188,0,148,184],
[181,189,186,152,203,176,192,0,209],
[130,143,155,150,161,171,156,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,185,177,168,166,179,170,185],
[159,0,179,161,164,168,162,173,172],
[155,161,0,170,152,164,162,161,162],
[163,179,170,0,164,170,165,162,168],
[172,176,188,176,0,175,164,175,170],
[174,172,176,170,165,0,173,164,160],
[161,178,178,175,176,167,0,166,168],
[170,167,179,178,165,176,174,0,172],
[155,168,178,172,170,180,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,157,161,164,166,175,151,164],
[183,0,162,164,187,171,184,148,171],
[183,178,0,179,182,176,194,185,170],
[179,176,161,0,190,183,202,173,170],
[176,153,158,150,0,164,183,159,166],
[174,169,164,157,176,0,192,159,163],
[165,156,146,138,157,148,0,149,148],
[189,192,155,167,181,181,191,0,180],
[176,169,170,170,174,177,192,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,182,171,161,195,195,145,164],
[150,0,165,166,160,168,165,155,144],
[158,175,0,165,145,197,181,161,146],
[169,174,175,0,161,177,192,155,168],
[179,180,195,179,0,201,205,175,156],
[145,172,143,163,139,0,175,157,144],
[145,175,159,148,135,165,0,145,157],
[195,185,179,185,165,183,195,0,175],
[176,196,194,172,184,196,183,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,169,158,154,166,180,168,147],
[183,0,197,174,159,168,178,169,175],
[171,143,0,159,158,168,179,159,167],
[182,166,181,0,175,171,196,165,162],
[186,181,182,165,0,168,184,189,176],
[174,172,172,169,172,0,190,178,166],
[160,162,161,144,156,150,0,147,150],
[172,171,181,175,151,162,193,0,167],
[193,165,173,178,164,174,190,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,183,212,177,154,172,207,204],
[164,0,186,188,163,174,149,166,178],
[157,154,0,203,179,112,175,163,141],
[128,152,137,0,141,103,132,149,138],
[163,177,161,199,0,154,165,152,152],
[186,166,228,237,186,0,193,196,170],
[168,191,165,208,175,147,0,171,173],
[133,174,177,191,188,144,169,0,187],
[136,162,199,202,188,170,167,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,178,178,186,155,151,159,184],
[191,0,161,175,189,148,165,179,178],
[162,179,0,165,158,148,135,149,181],
[162,165,175,0,168,164,146,181,202],
[154,151,182,172,0,147,154,159,184],
[185,192,192,176,193,0,173,159,201],
[189,175,205,194,186,167,0,180,203],
[181,161,191,159,181,181,160,0,186],
[156,162,159,138,156,139,137,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,171,175,154,194,174,156,165],
[190,0,177,192,166,181,158,167,173],
[169,163,0,171,158,178,198,152,160],
[165,148,169,0,166,164,166,158,165],
[186,174,182,174,0,199,170,168,151],
[146,159,162,176,141,0,176,150,151],
[166,182,142,174,170,164,0,151,140],
[184,173,188,182,172,190,189,0,153],
[175,167,180,175,189,189,200,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,154,174,159,156,161,156,162],
[190,0,176,176,172,163,171,160,178],
[186,164,0,184,174,178,165,172,164],
[166,164,156,0,168,161,156,150,169],
[181,168,166,172,0,168,171,163,169],
[184,177,162,179,172,0,176,172,165],
[179,169,175,184,169,164,0,150,173],
[184,180,168,190,177,168,190,0,182],
[178,162,176,171,171,175,167,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,148,173,173,142,177,214,180],
[113,0,113,178,114,133,109,132,115],
[192,227,0,207,169,177,164,198,180],
[167,162,133,0,140,156,104,139,166],
[167,226,171,200,0,211,219,231,170],
[198,207,163,184,129,0,174,172,167],
[163,231,176,236,121,166,0,182,166],
[126,208,142,201,109,168,158,0,176],
[160,225,160,174,170,173,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,177,164,169,171,174,173],
[182,0,167,172,173,183,179,185,188],
[174,173,0,180,169,170,182,166,172],
[163,168,160,0,183,171,160,164,173],
[176,167,171,157,0,169,151,146,164],
[171,157,170,169,171,0,172,166,162],
[169,161,158,180,189,168,0,159,166],
[166,155,174,176,194,174,181,0,166],
[167,152,168,167,176,178,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,168,149,180,182,172,153],
[179,0,172,176,187,181,189,173,170],
[181,168,0,175,172,193,170,176,186],
[172,164,165,0,163,179,169,176,185],
[191,153,168,177,0,186,165,173,173],
[160,159,147,161,154,0,154,162,165],
[158,151,170,171,175,186,0,187,171],
[168,167,164,164,167,178,153,0,177],
[187,170,154,155,167,175,169,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,180,210,161,177,191,188,174],
[133,0,161,157,205,156,139,195,153],
[160,179,0,182,165,165,171,173,150],
[130,183,158,0,160,143,168,148,148],
[179,135,175,180,0,175,164,185,162],
[163,184,175,197,165,0,168,166,167],
[149,201,169,172,176,172,0,178,179],
[152,145,167,192,155,174,162,0,144],
[166,187,190,192,178,173,161,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,190,155,195,165,206,102,184],
[171,0,167,218,201,281,224,153,261],
[150,173,0,167,197,152,189,134,169],
[185,122,173,0,130,179,130,91,214],
[145,139,143,210,0,186,192,190,223],
[175,59,188,161,154,0,181,71,173],
[134,116,151,210,148,159,0,71,210],
[238,187,206,249,150,269,269,0,167],
[156,79,171,126,117,167,130,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,187,193,181,179,185,192,168],
[150,0,186,191,174,174,186,176,170],
[153,154,0,183,165,189,166,171,162],
[147,149,157,0,150,180,143,165,146],
[159,166,175,190,0,178,192,197,183],
[161,166,151,160,162,0,154,189,154],
[155,154,174,197,148,186,0,186,167],
[148,164,169,175,143,151,154,0,150],
[172,170,178,194,157,186,173,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,148,162,128,153,148,143],
[164,0,175,126,140,142,169,142,137],
[167,165,0,151,162,147,165,163,140],
[192,214,189,0,191,171,203,162,181],
[178,200,178,149,0,145,184,163,155],
[212,198,193,169,195,0,191,176,175],
[187,171,175,137,156,149,0,152,123],
[192,198,177,178,177,164,188,0,174],
[197,203,200,159,185,165,217,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,151,178,150,171,191,162,198],
[178,0,157,172,155,164,182,170,188],
[189,183,0,183,183,165,201,185,202],
[162,168,157,0,160,169,176,164,206],
[190,185,157,180,0,165,182,160,194],
[169,176,175,171,175,0,198,162,209],
[149,158,139,164,158,142,0,144,201],
[178,170,155,176,180,178,196,0,205],
[142,152,138,134,146,131,139,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,143,183,222,151,180,152,130],
[190,0,211,175,181,143,72,230,104],
[197,129,0,123,147,142,125,204,124],
[157,165,217,0,210,171,96,199,129],
[118,159,193,130,0,170,137,190,124],
[189,197,198,169,170,0,155,208,183],
[160,268,215,244,203,185,0,210,133],
[188,110,136,141,150,132,130,0,126],
[210,236,216,211,216,157,207,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,167,163,158,176,146,149,173],
[186,0,171,179,171,186,170,163,185],
[173,169,0,168,178,195,156,167,191],
[177,161,172,0,171,189,159,164,182],
[182,169,162,169,0,173,154,163,178],
[164,154,145,151,167,0,147,157,169],
[194,170,184,181,186,193,0,175,191],
[191,177,173,176,177,183,165,0,189],
[167,155,149,158,162,171,149,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,162,155,147,157,176,143,164],
[163,0,159,143,164,174,163,164,134],
[178,181,0,170,163,152,143,178,163],
[185,197,170,0,182,193,173,170,157],
[193,176,177,158,0,180,156,168,163],
[183,166,188,147,160,0,182,145,163],
[164,177,197,167,184,158,0,150,192],
[197,176,162,170,172,195,190,0,140],
[176,206,177,183,177,177,148,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,174,180,179,172,191,169,170],
[158,0,158,173,172,154,172,161,164],
[166,182,0,192,177,154,186,173,170],
[160,167,148,0,168,160,162,159,155],
[161,168,163,172,0,155,180,169,158],
[168,186,186,180,185,0,173,173,161],
[149,168,154,178,160,167,0,161,150],
[171,179,167,181,171,167,179,0,165],
[170,176,170,185,182,179,190,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,205,174,170,183,181,188,164],
[128,0,146,137,157,167,92,140,151],
[135,194,0,142,164,150,149,130,143],
[166,203,198,0,173,177,157,162,173],
[170,183,176,167,0,166,154,159,179],
[157,173,190,163,174,0,178,170,155],
[159,248,191,183,186,162,0,184,184],
[152,200,210,178,181,170,156,0,170],
[176,189,197,167,161,185,156,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,133,152,175,172,163,169,171],
[192,0,165,175,194,162,167,176,177],
[207,175,0,173,189,167,181,180,191],
[188,165,167,0,190,191,169,184,175],
[165,146,151,150,0,164,152,168,158],
[168,178,173,149,176,0,174,171,175],
[177,173,159,171,188,166,0,188,178],
[171,164,160,156,172,169,152,0,155],
[169,163,149,165,182,165,162,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,157,154,154,181,153,154,157],
[187,0,161,176,171,195,159,182,178],
[183,179,0,186,175,199,158,172,188],
[186,164,154,0,183,175,141,166,187],
[186,169,165,157,0,174,124,188,156],
[159,145,141,165,166,0,148,172,157],
[187,181,182,199,216,192,0,184,166],
[186,158,168,174,152,168,156,0,171],
[183,162,152,153,184,183,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,183,182,170,172,191,201,182],
[159,0,180,175,172,171,164,170,168],
[157,160,0,154,161,148,158,184,168],
[158,165,186,0,168,170,170,189,174],
[170,168,179,172,0,176,173,182,180],
[168,169,192,170,164,0,169,186,186],
[149,176,182,170,167,171,0,187,181],
[139,170,156,151,158,154,153,0,158],
[158,172,172,166,160,154,159,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,150,136,172,143,161,175,185],
[175,0,151,146,166,163,148,179,181],
[190,189,0,166,176,176,187,184,183],
[204,194,174,0,192,184,167,175,194],
[168,174,164,148,0,176,170,171,179],
[197,177,164,156,164,0,168,174,184],
[179,192,153,173,170,172,0,168,179],
[165,161,156,165,169,166,172,0,162],
[155,159,157,146,161,156,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,189,168,172,170,174,172,177],
[166,0,180,173,179,178,181,170,174],
[151,160,0,155,161,158,160,145,162],
[172,167,185,0,173,187,180,159,166],
[168,161,179,167,0,177,171,176,175],
[170,162,182,153,163,0,167,155,167],
[166,159,180,160,169,173,0,176,177],
[168,170,195,181,164,185,164,0,166],
[163,166,178,174,165,173,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,169,237,182,203,212,201,224],
[142,0,171,228,136,199,167,196,198],
[171,169,0,229,185,232,164,218,209],
[103,112,111,0,89,164,87,151,159],
[158,204,155,251,0,193,134,163,238],
[137,141,108,176,147,0,116,161,189],
[128,173,176,253,206,224,0,237,223],
[139,144,122,189,177,179,103,0,173],
[116,142,131,181,102,151,117,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,160,162,145,154,168,162,165],
[166,0,163,154,150,161,155,149,154],
[180,177,0,163,153,163,173,178,164],
[178,186,177,0,161,168,181,174,154],
[195,190,187,179,0,181,187,181,163],
[186,179,177,172,159,0,167,163,162],
[172,185,167,159,153,173,0,171,156],
[178,191,162,166,159,177,169,0,177],
[175,186,176,186,177,178,184,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,165,162,174,175,168,169],
[181,0,176,165,172,169,177,169,164],
[170,164,0,169,160,189,167,176,171],
[175,175,171,0,152,175,166,178,164],
[178,168,180,188,0,187,176,180,182],
[166,171,151,165,153,0,166,178,162],
[165,163,173,174,164,174,0,176,160],
[172,171,164,162,160,162,164,0,171],
[171,176,169,176,158,178,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,129,129,203,171,99,111,143],
[220,0,186,197,209,226,137,219,191],
[211,154,0,212,195,184,194,171,153],
[211,143,128,0,246,252,206,186,162],
[137,131,145,94,0,95,193,150,138],
[169,114,156,88,245,0,130,121,149],
[241,203,146,134,147,210,0,221,213],
[229,121,169,154,190,219,119,0,109],
[197,149,187,178,202,191,127,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,170,146,155,155,153,167,174],
[177,0,145,121,140,204,156,153,206],
[170,195,0,173,175,208,189,178,209],
[194,219,167,0,184,201,165,167,241],
[185,200,165,156,0,197,191,177,188],
[185,136,132,139,143,0,173,162,189],
[187,184,151,175,149,167,0,140,205],
[173,187,162,173,163,178,200,0,200],
[166,134,131,99,152,151,135,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,197,185,258,145,160,179,194],
[165,0,186,182,227,166,177,151,191],
[143,154,0,139,189,156,151,131,167],
[155,158,201,0,211,168,168,135,176],
[82,113,151,129,0,119,131,128,136],
[195,174,184,172,221,0,169,151,178],
[180,163,189,172,209,171,0,159,199],
[161,189,209,205,212,189,181,0,196],
[146,149,173,164,204,162,141,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,164,187,186,192,172,166],
[169,0,180,173,187,170,193,169,173],
[156,160,0,153,174,164,173,184,153],
[176,167,187,0,198,176,191,190,181],
[153,153,166,142,0,166,182,178,160],
[154,170,176,164,174,0,175,180,188],
[148,147,167,149,158,165,0,163,157],
[168,171,156,150,162,160,177,0,182],
[174,167,187,159,180,152,183,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,154,165,158,154,154,156,157],
[185,0,174,165,172,176,179,189,163],
[186,166,0,157,167,165,166,172,160],
[175,175,183,0,165,175,175,191,171],
[182,168,173,175,0,176,176,170,162],
[186,164,175,165,164,0,164,169,169],
[186,161,174,165,164,176,0,175,164],
[184,151,168,149,170,171,165,0,156],
[183,177,180,169,178,171,176,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,125,131,99,181,159,118,119],
[195,0,149,155,200,232,185,260,158],
[215,191,0,176,100,185,207,148,186],
[209,185,164,0,138,225,176,252,182],
[241,140,240,202,0,280,252,285,160],
[159,108,155,115,60,0,95,143,69],
[181,155,133,164,88,245,0,225,145],
[222,80,192,88,55,197,115,0,147],
[221,182,154,158,180,271,195,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,192,192,161,174,172,163,173],
[151,0,174,163,160,152,184,157,150],
[148,166,0,160,150,154,172,157,153],
[148,177,180,0,163,153,159,168,148],
[179,180,190,177,0,174,165,170,162],
[166,188,186,187,166,0,181,161,157],
[168,156,168,181,175,159,0,164,143],
[177,183,183,172,170,179,176,0,142],
[167,190,187,192,178,183,197,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,165,182,171,188,176,172,167],
[147,0,148,176,165,159,168,141,167],
[175,192,0,173,180,185,182,168,178],
[158,164,167,0,180,168,178,161,171],
[169,175,160,160,0,175,185,162,170],
[152,181,155,172,165,0,173,168,169],
[164,172,158,162,155,167,0,151,150],
[168,199,172,179,178,172,189,0,180],
[173,173,162,169,170,171,190,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,171,165,177,181,170,175,172],
[152,0,153,167,149,197,171,176,160],
[169,187,0,168,182,178,186,168,184],
[175,173,172,0,167,189,164,177,172],
[163,191,158,173,0,187,170,169,162],
[159,143,162,151,153,0,149,150,143],
[170,169,154,176,170,191,0,170,170],
[165,164,172,163,171,190,170,0,171],
[168,180,156,168,178,197,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,174,159,168,160,189,171],
[176,0,176,173,179,161,148,178,176],
[166,164,0,186,155,184,162,184,181],
[166,167,154,0,178,177,163,171,164],
[181,161,185,162,0,168,171,167,188],
[172,179,156,163,172,0,164,180,164],
[180,192,178,177,169,176,0,171,170],
[151,162,156,169,173,160,169,0,174],
[169,164,159,176,152,176,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,174,194,170,184,219,166],
[165,0,181,155,197,161,189,177,188],
[159,159,0,149,189,195,180,189,181],
[166,185,191,0,191,185,181,188,189],
[146,143,151,149,0,131,166,176,165],
[170,179,145,155,209,0,188,198,194],
[156,151,160,159,174,152,0,174,168],
[121,163,151,152,164,142,166,0,179],
[174,152,159,151,175,146,172,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,167,125,102,202,172,130,159],
[195,0,177,181,172,216,141,188,204],
[173,163,0,178,155,196,151,156,181],
[215,159,162,0,177,215,178,185,222],
[238,168,185,163,0,204,175,191,233],
[138,124,144,125,136,0,89,137,173],
[168,199,189,162,165,251,0,171,232],
[210,152,184,155,149,203,169,0,196],
[181,136,159,118,107,167,108,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,190,182,220,170,176,163],
[167,0,141,161,172,177,174,151,159],
[163,199,0,185,194,205,178,160,177],
[150,179,155,0,173,178,198,152,167],
[158,168,146,167,0,173,175,161,151],
[120,163,135,162,167,0,175,146,154],
[170,166,162,142,165,165,0,150,162],
[164,189,180,188,179,194,190,0,172],
[177,181,163,173,189,186,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,177,180,204,164,190,191,183],
[150,0,145,173,166,138,152,176,159],
[163,195,0,169,186,189,195,180,194],
[160,167,171,0,185,168,157,182,162],
[136,174,154,155,0,163,176,180,168],
[176,202,151,172,177,0,180,192,185],
[150,188,145,183,164,160,0,192,171],
[149,164,160,158,160,148,148,0,156],
[157,181,146,178,172,155,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,201,202,219,168,230,167,194],
[150,0,149,151,133,143,164,167,136],
[139,191,0,173,159,143,207,163,169],
[138,189,167,0,180,181,219,160,179],
[121,207,181,160,0,157,178,130,174],
[172,197,197,159,183,0,214,200,194],
[110,176,133,121,162,126,0,111,136],
[173,173,177,180,210,140,229,0,216],
[146,204,171,161,166,146,204,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,165,161,155,170,164,159,172],
[171,0,156,160,171,166,151,171,161],
[175,184,0,163,142,180,171,169,172],
[179,180,177,0,167,188,170,165,181],
[185,169,198,173,0,174,189,180,179],
[170,174,160,152,166,0,166,160,154],
[176,189,169,170,151,174,0,176,182],
[181,169,171,175,160,180,164,0,171],
[168,179,168,159,161,186,158,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,163,171,167,174,186,184,189],
[159,0,178,155,153,164,172,164,176],
[177,162,0,160,163,168,176,179,179],
[169,185,180,0,171,186,172,190,186],
[173,187,177,169,0,170,181,181,185],
[166,176,172,154,170,0,177,172,192],
[154,168,164,168,159,163,0,176,165],
[156,176,161,150,159,168,164,0,178],
[151,164,161,154,155,148,175,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,176,191,170,172,177,195,183],
[160,0,163,173,164,184,171,181,168],
[164,177,0,179,175,176,176,183,185],
[149,167,161,0,153,156,154,168,174],
[170,176,165,187,0,179,173,171,173],
[168,156,164,184,161,0,169,165,176],
[163,169,164,186,167,171,0,165,173],
[145,159,157,172,169,175,175,0,168],
[157,172,155,166,167,164,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,184,161,162,164,166,146],
[173,0,159,190,154,155,176,153,166],
[179,181,0,179,159,171,172,175,158],
[156,150,161,0,154,150,155,152,150],
[179,186,181,186,0,178,175,168,167],
[178,185,169,190,162,0,189,160,170],
[176,164,168,185,165,151,0,157,143],
[174,187,165,188,172,180,183,0,189],
[194,174,182,190,173,170,197,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,184,169,183,165,167,175,170],
[167,0,184,157,178,155,165,157,154],
[156,156,0,166,174,155,166,158,160],
[171,183,174,0,175,172,160,170,164],
[157,162,166,165,0,151,159,156,150],
[175,185,185,168,189,0,173,176,176],
[173,175,174,180,181,167,0,190,161],
[165,183,182,170,184,164,150,0,164],
[170,186,180,176,190,164,179,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,160,146,159,139,162,154],
[175,0,155,179,145,172,165,190,162],
[179,185,0,183,176,144,167,179,144],
[180,161,157,0,147,152,155,150,143],
[194,195,164,193,0,155,167,181,175],
[181,168,196,188,185,0,177,180,176],
[201,175,173,185,173,163,0,168,165],
[178,150,161,190,159,160,172,0,163],
[186,178,196,197,165,164,175,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,171,161,180,160,163,172],
[174,0,166,158,151,170,155,169,194],
[175,174,0,176,183,179,169,161,187],
[169,182,164,0,162,171,158,165,184],
[179,189,157,178,0,168,184,170,189],
[160,170,161,169,172,0,175,176,190],
[180,185,171,182,156,165,0,168,185],
[177,171,179,175,170,164,172,0,181],
[168,146,153,156,151,150,155,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,183,158,179,179,173,175,174],
[167,0,157,174,181,182,169,175,175],
[157,183,0,159,177,159,154,160,164],
[182,166,181,0,181,193,174,174,179],
[161,159,163,159,0,180,154,165,165],
[161,158,181,147,160,0,146,160,168],
[167,171,186,166,186,194,0,168,169],
[165,165,180,166,175,180,172,0,167],
[166,165,176,161,175,172,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,126,141,154,112,107,97,152],
[201,0,159,158,136,159,161,131,152],
[214,181,0,173,215,181,177,161,168],
[199,182,167,0,161,190,156,176,148],
[186,204,125,179,0,181,176,178,177],
[228,181,159,150,159,0,160,176,177],
[233,179,163,184,164,180,0,184,177],
[243,209,179,164,162,164,156,0,193],
[188,188,172,192,163,163,163,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,161,176,179,166,174,176,170],
[157,0,164,176,160,166,174,162,178],
[179,176,0,171,173,172,170,160,172],
[164,164,169,0,178,180,167,160,172],
[161,180,167,162,0,169,177,160,170],
[174,174,168,160,171,0,170,173,173],
[166,166,170,173,163,170,0,155,176],
[164,178,180,180,180,167,185,0,182],
[170,162,168,168,170,167,164,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,169,147,162,168,178,193,170],
[189,0,198,189,187,192,191,186,169],
[171,142,0,161,174,166,163,171,166],
[193,151,179,0,178,195,162,186,165],
[178,153,166,162,0,173,173,184,169],
[172,148,174,145,167,0,170,176,165],
[162,149,177,178,167,170,0,181,158],
[147,154,169,154,156,164,159,0,141],
[170,171,174,175,171,175,182,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,185,162,203,170,176,171,191],
[155,0,157,131,188,146,149,157,163],
[155,183,0,157,194,143,176,165,141],
[178,209,183,0,210,163,176,179,195],
[137,152,146,130,0,135,141,161,173],
[170,194,197,177,205,0,181,195,179],
[164,191,164,164,199,159,0,181,185],
[169,183,175,161,179,145,159,0,174],
[149,177,199,145,167,161,155,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,181,158,157,163,173,183,170],
[170,0,180,179,173,171,181,192,184],
[159,160,0,157,151,161,152,160,182],
[182,161,183,0,185,171,148,178,183],
[183,167,189,155,0,167,175,188,180],
[177,169,179,169,173,0,166,174,175],
[167,159,188,192,165,174,0,183,176],
[157,148,180,162,152,166,157,0,178],
[170,156,158,157,160,165,164,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,134,163,192,218,211,146,177],
[146,0,160,184,187,205,240,209,110],
[206,180,0,210,143,194,203,212,174],
[177,156,130,0,208,264,237,200,143],
[148,153,197,132,0,207,258,238,144],
[122,135,146,76,133,0,127,87,117],
[129,100,137,103,82,213,0,177,157],
[194,131,128,140,102,253,163,0,161],
[163,230,166,197,196,223,183,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,174,181,160,176,176,190],
[171,0,182,186,189,154,179,178,197],
[168,158,0,174,188,166,169,174,180],
[166,154,166,0,177,149,153,156,173],
[159,151,152,163,0,152,151,162,161],
[180,186,174,191,188,0,160,180,201],
[164,161,171,187,189,180,0,192,186],
[164,162,166,184,178,160,148,0,188],
[150,143,160,167,179,139,154,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,169,168,187,161,176,171],
[167,0,173,171,170,183,156,170,168],
[176,167,0,178,174,190,160,167,153],
[171,169,162,0,164,187,163,162,164],
[172,170,166,176,0,191,171,174,169],
[153,157,150,153,149,0,139,158,151],
[179,184,180,177,169,201,0,175,181],
[164,170,173,178,166,182,165,0,170],
[169,172,187,176,171,189,159,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,170,153,142,147,149,174,169],
[189,0,189,198,150,161,161,187,170],
[170,151,0,177,157,160,167,152,154],
[187,142,163,0,164,168,125,160,168],
[198,190,183,176,0,167,191,169,177],
[193,179,180,172,173,0,140,180,189],
[191,179,173,215,149,200,0,198,168],
[166,153,188,180,171,160,142,0,168],
[171,170,186,172,163,151,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,157,163,173,152,179,177,181],
[191,0,171,178,187,170,185,192,189],
[183,169,0,179,196,170,185,188,187],
[177,162,161,0,177,172,178,189,173],
[167,153,144,163,0,166,156,173,160],
[188,170,170,168,174,0,183,182,187],
[161,155,155,162,184,157,0,173,161],
[163,148,152,151,167,158,167,0,161],
[159,151,153,167,180,153,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,179,152,109,145,192,126,134],
[212,0,171,211,219,157,249,128,167],
[161,169,0,173,150,132,206,177,115],
[188,129,167,0,110,134,214,127,101],
[231,121,190,230,0,151,241,133,109],
[195,183,208,206,189,0,265,148,141],
[148,91,134,126,99,75,0,87,88],
[214,212,163,213,207,192,253,0,232],
[206,173,225,239,231,199,252,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,145,162,145,132,148,175,149],
[163,0,167,174,178,161,165,205,147],
[195,173,0,176,173,178,170,172,169],
[178,166,164,0,161,149,148,158,160],
[195,162,167,179,0,170,192,183,147],
[208,179,162,191,170,0,157,189,170],
[192,175,170,192,148,183,0,188,151],
[165,135,168,182,157,151,152,0,167],
[191,193,171,180,193,170,189,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,166,169,173,159,185,172],
[171,0,181,160,178,167,152,176,163],
[167,159,0,165,188,169,157,190,153],
[174,180,175,0,182,173,157,196,168],
[171,162,152,158,0,159,151,179,145],
[167,173,171,167,181,0,168,193,160],
[181,188,183,183,189,172,0,178,164],
[155,164,150,144,161,147,162,0,146],
[168,177,187,172,195,180,176,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,141,189,168,157,170,188],
[168,0,168,155,192,185,157,154,162],
[158,172,0,150,172,179,156,162,165],
[199,185,190,0,204,231,177,170,173],
[151,148,168,136,0,168,155,158,167],
[172,155,161,109,172,0,156,156,154],
[183,183,184,163,185,184,0,161,177],
[170,186,178,170,182,184,179,0,177],
[152,178,175,167,173,186,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,217,183,171,191,183,158,170],
[117,0,119,87,175,146,172,137,110],
[123,221,0,175,204,189,196,174,169],
[157,253,165,0,222,186,218,237,145],
[169,165,136,118,0,192,198,179,163],
[149,194,151,154,148,0,177,179,126],
[157,168,144,122,142,163,0,169,167],
[182,203,166,103,161,161,171,0,138],
[170,230,171,195,177,214,173,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,172,175,180,186,174,162],
[165,0,151,156,173,158,180,169,155],
[171,189,0,171,173,178,192,170,156],
[168,184,169,0,182,174,192,190,163],
[165,167,167,158,0,161,186,177,181],
[160,182,162,166,179,0,200,181,176],
[154,160,148,148,154,140,0,157,151],
[166,171,170,150,163,159,183,0,165],
[178,185,184,177,159,164,189,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,115,122,127,138,165,138,153],
[206,0,166,170,169,175,179,190,183],
[225,174,0,157,164,185,193,181,195],
[218,170,183,0,185,176,196,166,176],
[213,171,176,155,0,192,189,157,188],
[202,165,155,164,148,0,160,160,182],
[175,161,147,144,151,180,0,157,188],
[202,150,159,174,183,180,183,0,165],
[187,157,145,164,152,158,152,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,176,178,187,187,174,160,186],
[152,0,168,160,159,160,171,154,172],
[164,172,0,163,180,179,176,179,184],
[162,180,177,0,180,178,174,170,182],
[153,181,160,160,0,168,170,160,162],
[153,180,161,162,172,0,169,170,167],
[166,169,164,166,170,171,0,167,195],
[180,186,161,170,180,170,173,0,183],
[154,168,156,158,178,173,145,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,230,203,210,186,180,197,167],
[140,0,177,179,144,111,141,140,148],
[110,163,0,156,211,139,131,138,155],
[137,161,184,0,168,135,182,166,110],
[130,196,129,172,0,145,164,152,148],
[154,229,201,205,195,0,193,175,172],
[160,199,209,158,176,147,0,152,120],
[143,200,202,174,188,165,188,0,178],
[173,192,185,230,192,168,220,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,149,201,170,180,188,162,187],
[152,0,150,177,147,179,157,121,158],
[191,190,0,193,165,175,188,191,198],
[139,163,147,0,132,163,167,142,169],
[170,193,175,208,0,183,191,176,185],
[160,161,165,177,157,0,166,139,185],
[152,183,152,173,149,174,0,150,146],
[178,219,149,198,164,201,190,0,197],
[153,182,142,171,155,155,194,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,183,178,169,154,163,182,177],
[199,0,191,188,184,175,157,177,178],
[157,149,0,164,153,140,157,158,158],
[162,152,176,0,170,156,151,157,171],
[171,156,187,170,0,174,167,169,171],
[186,165,200,184,166,0,180,176,182],
[177,183,183,189,173,160,0,190,185],
[158,163,182,183,171,164,150,0,167],
[163,162,182,169,169,158,155,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,170,168,157,150,144,154,173],
[182,0,175,195,157,178,172,175,186],
[170,165,0,183,174,166,153,170,167],
[172,145,157,0,159,170,138,161,184],
[183,183,166,181,0,175,170,170,182],
[190,162,174,170,165,0,141,156,174],
[196,168,187,202,170,199,0,179,206],
[186,165,170,179,170,184,161,0,185],
[167,154,173,156,158,166,134,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,207,161,205,140,179,161,174],
[132,0,181,115,127,91,117,122,72],
[133,159,0,138,175,171,171,152,167],
[179,225,202,0,218,152,218,183,163],
[135,213,165,122,0,157,131,133,157],
[200,249,169,188,183,0,168,175,185],
[161,223,169,122,209,172,0,181,149],
[179,218,188,157,207,165,159,0,197],
[166,268,173,177,183,155,191,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,160,154,155,174,153,174],
[174,0,167,165,142,158,155,159,170],
[171,173,0,160,156,160,172,152,156],
[180,175,180,0,154,157,168,166,176],
[186,198,184,186,0,184,194,167,167],
[185,182,180,183,156,0,174,172,192],
[166,185,168,172,146,166,0,155,150],
[187,181,188,174,173,168,185,0,187],
[166,170,184,164,173,148,190,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,165,160,154,168,155,174],
[157,0,170,154,177,164,164,171,163],
[167,170,0,182,160,154,171,168,172],
[175,186,158,0,170,175,173,174,169],
[180,163,180,170,0,169,172,166,168],
[186,176,186,165,171,0,182,183,185],
[172,176,169,167,168,158,0,167,194],
[185,169,172,166,174,157,173,0,182],
[166,177,168,171,172,155,146,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,163,177,133,158,149,141],
[170,0,136,183,180,149,140,149,156],
[177,204,0,181,210,173,182,165,171],
[177,157,159,0,180,142,166,161,162],
[163,160,130,160,0,137,163,140,138],
[207,191,167,198,203,0,171,200,174],
[182,200,158,174,177,169,0,183,168],
[191,191,175,179,200,140,157,0,152],
[199,184,169,178,202,166,172,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,171,192,169,175,164,182,192],
[171,0,186,207,175,178,156,215,199],
[169,154,0,186,174,141,141,185,170],
[148,133,154,0,153,148,160,171,173],
[171,165,166,187,0,149,179,182,179],
[165,162,199,192,191,0,180,187,195],
[176,184,199,180,161,160,0,189,177],
[158,125,155,169,158,153,151,0,153],
[148,141,170,167,161,145,163,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,151,152,175,170,165,154],
[176,0,168,158,157,166,157,169,140],
[171,172,0,163,158,179,165,174,161],
[189,182,177,0,167,189,175,172,178],
[188,183,182,173,0,184,174,178,167],
[165,174,161,151,156,0,158,177,165],
[170,183,175,165,166,182,0,174,166],
[175,171,166,168,162,163,166,0,159],
[186,200,179,162,173,175,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,194,157,169,176,171,189,161],
[181,0,187,184,178,159,187,187,179],
[146,153,0,142,149,182,137,144,160],
[183,156,198,0,167,181,201,184,157],
[171,162,191,173,0,156,172,204,166],
[164,181,158,159,184,0,161,183,156],
[169,153,203,139,168,179,0,170,174],
[151,153,196,156,136,157,170,0,165],
[179,161,180,183,174,184,166,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,175,171,172,159,169,183,166],
[182,0,176,185,178,173,178,193,169],
[165,164,0,168,163,147,172,175,159],
[169,155,172,0,170,159,162,179,160],
[168,162,177,170,0,173,175,179,182],
[181,167,193,181,167,0,169,190,162],
[171,162,168,178,165,171,0,188,170],
[157,147,165,161,161,150,152,0,152],
[174,171,181,180,158,178,170,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,178,184,168,172,177,206,177],
[151,0,177,186,182,187,174,188,155],
[162,163,0,173,176,146,172,181,156],
[156,154,167,0,168,166,168,177,132],
[172,158,164,172,0,182,175,181,148],
[168,153,194,174,158,0,189,180,167],
[163,166,168,172,165,151,0,177,151],
[134,152,159,163,159,160,163,0,153],
[163,185,184,208,192,173,189,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,184,182,170,159,178,184,163],
[146,0,182,177,184,178,160,173,174],
[156,158,0,178,185,146,158,151,163],
[158,163,162,0,152,148,166,164,161],
[170,156,155,188,0,169,174,183,175],
[181,162,194,192,171,0,175,162,181],
[162,180,182,174,166,165,0,152,179],
[156,167,189,176,157,178,188,0,177],
[177,166,177,179,165,159,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,224,198,178,163,167,199,200],
[131,0,236,194,152,160,188,134,155],
[116,104,0,215,154,133,176,150,155],
[142,146,125,0,140,122,119,123,115],
[162,188,186,200,0,179,221,195,197],
[177,180,207,218,161,0,269,204,171],
[173,152,164,221,119,71,0,145,162],
[141,206,190,217,145,136,195,0,224],
[140,185,185,225,143,169,178,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,166,193,170,170,186,196],
[170,0,174,160,192,169,185,171,184],
[169,166,0,160,181,149,158,166,183],
[174,180,180,0,180,178,189,170,193],
[147,148,159,160,0,153,171,166,163],
[170,171,191,162,187,0,171,178,168],
[170,155,182,151,169,169,0,176,169],
[154,169,174,170,174,162,164,0,185],
[144,156,157,147,177,172,171,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,154,168,157,162,172,182,192],
[191,0,167,171,169,157,167,167,169],
[186,173,0,189,175,170,165,174,177],
[172,169,151,0,173,175,151,171,174],
[183,171,165,167,0,176,168,177,182],
[178,183,170,165,164,0,169,173,200],
[168,173,175,189,172,171,0,180,179],
[158,173,166,169,163,167,160,0,176],
[148,171,163,166,158,140,161,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,151,165,165,177,166,158,156],
[174,0,166,164,176,179,183,183,175],
[189,174,0,172,173,188,179,169,167],
[175,176,168,0,173,181,171,159,183],
[175,164,167,167,0,176,171,170,159],
[163,161,152,159,164,0,154,148,161],
[174,157,161,169,169,186,0,154,159],
[182,157,171,181,170,192,186,0,170],
[184,165,173,157,181,179,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,171,168,162,156,183,172,175],
[163,0,170,152,162,155,178,161,173],
[169,170,0,172,164,162,169,175,165],
[172,188,168,0,172,188,182,181,176],
[178,178,176,168,0,164,187,173,167],
[184,185,178,152,176,0,186,177,190],
[157,162,171,158,153,154,0,152,156],
[168,179,165,159,167,163,188,0,179],
[165,167,175,164,173,150,184,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,176,185,165,138,176,182,148],
[140,0,155,150,114,127,150,176,137],
[164,185,0,191,111,148,136,141,137],
[155,190,149,0,118,120,187,146,125],
[175,226,229,222,0,184,148,203,227],
[202,213,192,220,156,0,187,200,179],
[164,190,204,153,192,153,0,199,155],
[158,164,199,194,137,140,141,0,155],
[192,203,203,215,113,161,185,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,188,176,168,165,156,174,188],
[159,0,173,185,164,164,149,166,173],
[152,167,0,153,146,149,144,170,157],
[164,155,187,0,157,163,161,168,182],
[172,176,194,183,0,164,171,177,184],
[175,176,191,177,176,0,170,174,175],
[184,191,196,179,169,170,0,185,184],
[166,174,170,172,163,166,155,0,166],
[152,167,183,158,156,165,156,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,162,163,173,173,182,153,168],
[168,0,173,166,156,171,168,170,160],
[178,167,0,182,177,173,186,171,167],
[177,174,158,0,170,176,170,152,162],
[167,184,163,170,0,179,181,169,170],
[167,169,167,164,161,0,177,163,164],
[158,172,154,170,159,163,0,140,141],
[187,170,169,188,171,177,200,0,152],
[172,180,173,178,170,176,199,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,181,194,163,211,202,203,199],
[151,0,181,143,154,163,159,193,182],
[159,159,0,156,176,185,188,173,192],
[146,197,184,0,138,179,165,199,213],
[177,186,164,202,0,194,182,186,193],
[129,177,155,161,146,0,164,183,188],
[138,181,152,175,158,176,0,192,198],
[137,147,167,141,154,157,148,0,186],
[141,158,148,127,147,152,142,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,167,173,172,183,170,170],
[164,0,177,191,168,172,184,186,163],
[167,163,0,169,165,157,174,159,174],
[173,149,171,0,169,160,181,148,166],
[167,172,175,171,0,176,179,160,188],
[168,168,183,180,164,0,186,166,177],
[157,156,166,159,161,154,0,151,155],
[170,154,181,192,180,174,189,0,171],
[170,177,166,174,152,163,185,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,172,190,193,182,203,217,167],
[141,0,180,179,191,206,186,201,176],
[168,160,0,177,156,186,185,196,170],
[150,161,163,0,156,188,168,171,158],
[147,149,184,184,0,186,154,216,184],
[158,134,154,152,154,0,187,167,174],
[137,154,155,172,186,153,0,177,164],
[123,139,144,169,124,173,163,0,153],
[173,164,170,182,156,166,176,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,211,187,210,156,189,202,182],
[151,0,183,179,180,159,144,162,144],
[129,157,0,173,168,124,136,142,135],
[153,161,167,0,158,138,159,193,160],
[130,160,172,182,0,138,147,148,154],
[184,181,216,202,202,0,190,189,170],
[151,196,204,181,193,150,0,184,180],
[138,178,198,147,192,151,156,0,176],
[158,196,205,180,186,170,160,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,196,163,185,174,200,195,203],
[166,0,203,159,207,164,208,192,177],
[144,137,0,164,171,154,151,180,166],
[177,181,176,0,207,169,195,192,194],
[155,133,169,133,0,136,188,183,164],
[166,176,186,171,204,0,181,203,233],
[140,132,189,145,152,159,0,146,149],
[145,148,160,148,157,137,194,0,175],
[137,163,174,146,176,107,191,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,133,135,80,154,107,99,134],
[237,0,259,193,206,176,208,163,210],
[207,81,0,93,133,126,141,145,136],
[205,147,247,0,145,181,163,166,180],
[260,134,207,195,0,167,176,201,174],
[186,164,214,159,173,0,224,202,207],
[233,132,199,177,164,116,0,114,164],
[241,177,195,174,139,138,226,0,167],
[206,130,204,160,166,133,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,190,185,207,178,160,199,228],
[158,0,163,155,193,177,165,172,212],
[150,177,0,177,200,151,147,186,218],
[155,185,163,0,191,179,163,181,197],
[133,147,140,149,0,141,140,133,205],
[162,163,189,161,199,0,181,167,218],
[180,175,193,177,200,159,0,179,225],
[141,168,154,159,207,173,161,0,209],
[112,128,122,143,135,122,115,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,131,153,159,170,174,157],
[166,0,162,184,155,148,163,133,142],
[171,178,0,173,147,145,161,163,137],
[209,156,167,0,167,169,188,169,178],
[187,185,193,173,0,173,173,162,163],
[181,192,195,171,167,0,195,183,161],
[170,177,179,152,167,145,0,172,144],
[166,207,177,171,178,157,168,0,172],
[183,198,203,162,177,179,196,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,197,158,164,122,163,151],
[174,0,175,195,139,156,149,182,163],
[167,165,0,175,161,143,142,172,156],
[143,145,165,0,144,173,143,159,160],
[182,201,179,196,0,167,170,197,184],
[176,184,197,167,173,0,151,189,152],
[218,191,198,197,170,189,0,208,172],
[177,158,168,181,143,151,132,0,139],
[189,177,184,180,156,188,168,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,172,188,155,167,191,167,170],
[186,0,195,189,178,199,188,162,168],
[168,145,0,184,158,167,167,159,162],
[152,151,156,0,165,181,177,149,160],
[185,162,182,175,0,173,182,157,169],
[173,141,173,159,167,0,187,151,167],
[149,152,173,163,158,153,0,137,153],
[173,178,181,191,183,189,203,0,169],
[170,172,178,180,171,173,187,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,149,166,163,169,157,161,167],
[184,0,179,191,167,171,181,178,177],
[191,161,0,176,179,178,178,172,184],
[174,149,164,0,161,142,144,156,151],
[177,173,161,179,0,161,158,162,181],
[171,169,162,198,179,0,166,174,172],
[183,159,162,196,182,174,0,179,172],
[179,162,168,184,178,166,161,0,172],
[173,163,156,189,159,168,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,181,175,169,181,172,168,174],
[169,0,175,176,183,176,161,158,170],
[159,165,0,161,163,170,160,158,152],
[165,164,179,0,164,164,160,169,164],
[171,157,177,176,0,176,171,168,173],
[159,164,170,176,164,0,168,171,174],
[168,179,180,180,169,172,0,173,178],
[172,182,182,171,172,169,167,0,179],
[166,170,188,176,167,166,162,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,196,170,161,134,171,150,155],
[161,0,180,172,164,162,166,139,157],
[144,160,0,185,155,154,146,150,164],
[170,168,155,0,154,172,179,170,165],
[179,176,185,186,0,175,177,166,170],
[206,178,186,168,165,0,206,172,173],
[169,174,194,161,163,134,0,150,170],
[190,201,190,170,174,168,190,0,179],
[185,183,176,175,170,167,170,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,208,203,190,180,194,221,208],
[185,0,249,199,185,185,166,239,216],
[132,91,0,173,116,145,138,126,179],
[137,141,167,0,135,139,146,184,158],
[150,155,224,205,0,186,149,213,224],
[160,155,195,201,154,0,154,182,189],
[146,174,202,194,191,186,0,197,196],
[119,101,214,156,127,158,143,0,205],
[132,124,161,182,116,151,144,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,187,224,224,149,80,180,181],
[182,0,209,179,173,137,192,182,159],
[153,131,0,201,217,123,196,167,191],
[116,161,139,0,151,151,92,151,158],
[116,167,123,189,0,170,137,144,184],
[191,203,217,189,170,0,189,144,170],
[260,148,144,248,203,151,0,169,207],
[160,158,173,189,196,196,171,0,150],
[159,181,149,182,156,170,133,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,172,172,177,151,192,174,160],
[176,0,166,162,158,157,160,174,176],
[168,174,0,168,192,173,167,171,158],
[168,178,172,0,185,151,167,177,157],
[163,182,148,155,0,131,166,155,148],
[189,183,167,189,209,0,180,183,185],
[148,180,173,173,174,160,0,165,157],
[166,166,169,163,185,157,175,0,162],
[180,164,182,183,192,155,183,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,160,177,151,159,183,159],
[173,0,169,188,184,167,179,179,168],
[179,171,0,184,186,166,177,192,169],
[180,152,156,0,180,178,183,175,142],
[163,156,154,160,0,150,145,177,163],
[189,173,174,162,190,0,170,166,164],
[181,161,163,157,195,170,0,169,176],
[157,161,148,165,163,174,171,0,161],
[181,172,171,198,177,176,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,340,288,173,293,299,335,126],
[153,0,153,186,132,252,153,233,106],
[0,187,0,146,132,252,294,193,41],
[52,154,194,0,173,219,219,219,46],
[167,208,208,167,0,167,214,167,208],
[47,88,88,121,173,0,47,127,41],
[41,187,46,121,126,293,0,187,46],
[5,107,147,121,173,213,153,0,46],
[214,234,299,294,132,299,294,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,182,163,155,181,178,168,162],
[164,0,159,160,159,180,173,175,169],
[158,181,0,170,158,178,178,177,168],
[177,180,170,0,170,184,175,188,170],
[185,181,182,170,0,172,180,208,184],
[159,160,162,156,168,0,161,184,177],
[162,167,162,165,160,179,0,194,179],
[172,165,163,152,132,156,146,0,168],
[178,171,172,170,156,163,161,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,152,165,178,157,166,161,177],
[171,0,147,161,168,165,171,173,182],
[188,193,0,169,175,177,184,183,192],
[175,179,171,0,187,162,177,178,187],
[162,172,165,153,0,142,159,144,154],
[183,175,163,178,198,0,176,188,185],
[174,169,156,163,181,164,0,180,177],
[179,167,157,162,196,152,160,0,185],
[163,158,148,153,186,155,163,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,154,134,151,168,161,167,169],
[191,0,160,172,160,174,183,187,177],
[186,180,0,163,177,156,164,173,175],
[206,168,177,0,180,173,166,171,191],
[189,180,163,160,0,183,175,164,186],
[172,166,184,167,157,0,182,169,175],
[179,157,176,174,165,158,0,174,183],
[173,153,167,169,176,171,166,0,164],
[171,163,165,149,154,165,157,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,161,178,155,156,172,155],
[179,0,170,166,175,169,172,175,170],
[178,170,0,158,186,169,174,180,171],
[179,174,182,0,174,176,162,168,174],
[162,165,154,166,0,154,157,154,159],
[185,171,171,164,186,0,161,171,182],
[184,168,166,178,183,179,0,164,182],
[168,165,160,172,186,169,176,0,173],
[185,170,169,166,181,158,158,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,190,172,183,173,164,176,170],
[165,0,167,150,165,171,156,162,158],
[150,173,0,155,158,149,156,145,161],
[168,190,185,0,192,168,191,167,189],
[157,175,182,148,0,159,171,171,170],
[167,169,191,172,181,0,179,177,161],
[176,184,184,149,169,161,0,160,161],
[164,178,195,173,169,163,180,0,173],
[170,182,179,151,170,179,179,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,230,195,171,169,179,203,200],
[115,0,159,140,163,166,161,148,138],
[110,181,0,140,153,158,142,168,120],
[145,200,200,0,172,189,173,190,150],
[169,177,187,168,0,162,175,200,183],
[171,174,182,151,178,0,168,176,165],
[161,179,198,167,165,172,0,166,151],
[137,192,172,150,140,164,174,0,140],
[140,202,220,190,157,175,189,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,151,155,181,177,155,171,163],
[195,0,167,194,171,194,167,181,173],
[189,173,0,170,170,184,179,175,185],
[185,146,170,0,156,186,163,177,161],
[159,169,170,184,0,183,170,182,153],
[163,146,156,154,157,0,159,162,156],
[185,173,161,177,170,181,0,196,170],
[169,159,165,163,158,178,144,0,177],
[177,167,155,179,187,184,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,167,172,170,164,175,170],
[176,0,184,171,172,172,192,169,162],
[173,156,0,159,160,155,163,174,170],
[173,169,181,0,166,160,169,164,169],
[168,168,180,174,0,168,171,176,166],
[170,168,185,180,172,0,178,169,174],
[176,148,177,171,169,162,0,167,148],
[165,171,166,176,164,171,173,0,159],
[170,178,170,171,174,166,192,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,176,178,177,133,164,145],
[168,0,162,152,166,142,167,180,161],
[184,178,0,163,191,150,174,178,148],
[164,188,177,0,158,169,178,170,167],
[162,174,149,182,0,174,150,174,179],
[163,198,190,171,166,0,164,179,153],
[207,173,166,162,190,176,0,187,162],
[176,160,162,170,166,161,153,0,158],
[195,179,192,173,161,187,178,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,190,166,174,169,158,155],
[168,0,179,188,176,173,160,162,157],
[180,161,0,188,166,174,167,150,149],
[150,152,152,0,154,159,161,139,140],
[174,164,174,186,0,180,169,158,155],
[166,167,166,181,160,0,167,152,147],
[171,180,173,179,171,173,0,172,161],
[182,178,190,201,182,188,168,0,174],
[185,183,191,200,185,193,179,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,146,162,176,184,205,174,178],
[178,0,158,204,167,164,180,172,169],
[194,182,0,170,172,178,209,191,204],
[178,136,170,0,156,183,217,219,182],
[164,173,168,184,0,160,176,171,175],
[156,176,162,157,180,0,190,160,196],
[135,160,131,123,164,150,0,169,152],
[166,168,149,121,169,180,171,0,168],
[162,171,136,158,165,144,188,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,180,181,159,174,155,171],
[161,0,173,193,190,150,186,165,163],
[166,167,0,150,203,173,178,169,180],
[160,147,190,0,179,172,194,179,169],
[159,150,137,161,0,133,163,138,145],
[181,190,167,168,207,0,182,181,172],
[166,154,162,146,177,158,0,161,148],
[185,175,171,161,202,159,179,0,168],
[169,177,160,171,195,168,192,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,137,164,159,171,171,160,162],
[189,0,162,160,172,180,181,165,157],
[203,178,0,165,183,213,203,171,189],
[176,180,175,0,174,202,185,184,167],
[181,168,157,166,0,187,172,186,158],
[169,160,127,138,153,0,168,180,154],
[169,159,137,155,168,172,0,181,152],
[180,175,169,156,154,160,159,0,159],
[178,183,151,173,182,186,188,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,166,157,172,147,144,161],
[172,0,174,147,147,179,133,157,170],
[180,166,0,167,182,202,170,184,157],
[174,193,173,0,170,189,171,137,166],
[183,193,158,170,0,190,168,166,169],
[168,161,138,151,150,0,154,160,156],
[193,207,170,169,172,186,0,157,178],
[196,183,156,203,174,180,183,0,180],
[179,170,183,174,171,184,162,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,158,167,161,174,158,169,165],
[178,0,160,174,176,181,173,176,175],
[182,180,0,173,177,182,160,171,180],
[173,166,167,0,162,163,165,166,173],
[179,164,163,178,0,169,164,174,171],
[166,159,158,177,171,0,155,165,173],
[182,167,180,175,176,185,0,175,166],
[171,164,169,174,166,175,165,0,172],
[175,165,160,167,169,167,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,184,201,163,169,173,183,177],
[143,0,154,163,142,176,155,153,180],
[156,186,0,181,149,162,169,172,176],
[139,177,159,0,147,169,177,166,170],
[177,198,191,193,0,161,182,168,188],
[171,164,178,171,179,0,170,174,184],
[167,185,171,163,158,170,0,171,165],
[157,187,168,174,172,166,169,0,187],
[163,160,164,170,152,156,175,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,168,175,158,182,172,161],
[176,0,168,184,188,184,192,180,173],
[174,172,0,167,185,162,170,183,162],
[172,156,173,0,170,156,167,177,160],
[165,152,155,170,0,161,166,166,146],
[182,156,178,184,179,0,194,172,175],
[158,148,170,173,174,146,0,165,161],
[168,160,157,163,174,168,175,0,170],
[179,167,178,180,194,165,179,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,147,146,149,156,143,124,138],
[162,0,169,175,181,156,193,118,165],
[193,171,0,174,228,184,142,110,187],
[194,165,166,0,177,154,205,164,123],
[191,159,112,163,0,202,161,131,152],
[184,184,156,186,138,0,164,147,153],
[197,147,198,135,179,176,0,176,120],
[216,222,230,176,209,193,164,0,197],
[202,175,153,217,188,187,220,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,194,160,158,154,151,173,147],
[193,0,174,163,194,184,200,203,170],
[146,166,0,176,170,180,166,190,170],
[180,177,164,0,168,158,159,181,182],
[182,146,170,172,0,162,175,190,159],
[186,156,160,182,178,0,176,186,166],
[189,140,174,181,165,164,0,182,160],
[167,137,150,159,150,154,158,0,159],
[193,170,170,158,181,174,180,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,161,150,163,165,157,158],
[170,0,164,174,173,171,183,168,172],
[183,176,0,178,178,190,178,196,158],
[179,166,162,0,169,190,181,158,165],
[190,167,162,171,0,176,182,186,168],
[177,169,150,150,164,0,162,160,161],
[175,157,162,159,158,178,0,169,167],
[183,172,144,182,154,180,171,0,171],
[182,168,182,175,172,179,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,171,162,182,159,183,179],
[161,0,165,150,180,159,151,169,167],
[159,175,0,156,159,174,141,148,171],
[169,190,184,0,159,179,185,187,177],
[178,160,181,181,0,174,165,177,176],
[158,181,166,161,166,0,169,172,163],
[181,189,199,155,175,171,0,171,176],
[157,171,192,153,163,168,169,0,183],
[161,173,169,163,164,177,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,190,188,205,171,165,169,193],
[168,0,179,178,214,175,183,180,182],
[150,161,0,158,188,157,155,172,190],
[152,162,182,0,181,174,154,173,175],
[135,126,152,159,0,158,149,158,148],
[169,165,183,166,182,0,160,166,177],
[175,157,185,186,191,180,0,189,191],
[171,160,168,167,182,174,151,0,197],
[147,158,150,165,192,163,149,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,174,172,180,173,186,161,178],
[152,0,149,160,158,175,158,148,158],
[166,191,0,163,174,173,173,157,174],
[168,180,177,0,172,175,181,173,177],
[160,182,166,168,0,163,175,172,161],
[167,165,167,165,177,0,173,157,167],
[154,182,167,159,165,167,0,171,168],
[179,192,183,167,168,183,169,0,174],
[162,182,166,163,179,173,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,178,168,171,172,182,164,166],
[185,0,197,190,185,180,197,178,151],
[162,143,0,155,139,166,167,138,135],
[172,150,185,0,150,174,192,150,160],
[169,155,201,190,0,182,168,172,172],
[168,160,174,166,158,0,177,165,160],
[158,143,173,148,172,163,0,137,157],
[176,162,202,190,168,175,203,0,166],
[174,189,205,180,168,180,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,172,156,151,215,183,191,169],
[206,0,188,164,175,189,197,188,166],
[168,152,0,151,140,185,171,180,155],
[184,176,189,0,199,204,164,184,177],
[189,165,200,141,0,192,176,177,186],
[125,151,155,136,148,0,140,180,161],
[157,143,169,176,164,200,0,183,175],
[149,152,160,156,163,160,157,0,154],
[171,174,185,163,154,179,165,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,152,169,145,133,131,165,145],
[204,0,153,183,182,198,168,180,171],
[188,187,0,166,192,162,181,160,163],
[171,157,174,0,148,165,146,134,118],
[195,158,148,192,0,197,167,172,184],
[207,142,178,175,143,0,153,178,141],
[209,172,159,194,173,187,0,178,178],
[175,160,180,206,168,162,162,0,164],
[195,169,177,222,156,199,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,182,179,178,175,162,174],
[166,0,168,163,158,164,168,151,165],
[172,172,0,179,168,163,171,163,163],
[158,177,161,0,166,166,163,155,162],
[161,182,172,174,0,161,167,167,177],
[162,176,177,174,179,0,174,159,177],
[165,172,169,177,173,166,0,170,179],
[178,189,177,185,173,181,170,0,187],
[166,175,177,178,163,163,161,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,163,177,172,174,186,168,193],
[150,0,142,156,145,166,154,157,176],
[177,198,0,183,194,165,196,190,201],
[163,184,157,0,175,161,165,145,193],
[168,195,146,165,0,168,178,164,188],
[166,174,175,179,172,0,183,157,195],
[154,186,144,175,162,157,0,162,177],
[172,183,150,195,176,183,178,0,193],
[147,164,139,147,152,145,163,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,181,157,179,194,161,185,176],
[183,0,175,200,167,172,173,193,145],
[159,165,0,161,196,154,158,144,179],
[183,140,179,0,173,186,224,188,157],
[161,173,144,167,0,173,198,146,149],
[146,168,186,154,167,0,168,178,125],
[179,167,182,116,142,172,0,147,158],
[155,147,196,152,194,162,193,0,147],
[164,195,161,183,191,215,182,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,47,127,132,97,185,149,99],
[208,0,187,174,110,108,210,165,177],
[293,153,0,237,168,57,240,107,163],
[213,166,103,0,168,93,235,147,184],
[208,230,172,172,0,138,186,189,133],
[243,232,283,247,202,0,289,143,214],
[155,130,100,105,154,51,0,147,11],
[191,175,233,193,151,197,193,0,191],
[241,163,177,156,207,126,329,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,177,144,151,162,155,160],
[166,0,158,174,148,158,170,165,163],
[160,182,0,179,152,147,175,175,165],
[163,166,161,0,164,149,166,160,174],
[196,192,188,176,0,170,181,183,178],
[189,182,193,191,170,0,168,180,182],
[178,170,165,174,159,172,0,179,173],
[185,175,165,180,157,160,161,0,163],
[180,177,175,166,162,158,167,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,198,237,189,230,270,254,200],
[192,0,199,220,157,157,189,207,127],
[142,141,0,153,73,98,152,136,157],
[103,120,187,0,73,64,221,73,120],
[151,183,267,267,0,161,257,151,222],
[110,183,242,276,179,0,258,308,207],
[70,151,188,119,83,82,0,114,185],
[86,133,204,267,189,32,226,0,159],
[140,213,183,220,118,133,155,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,138,205,152,149,152,131,176],
[167,0,176,191,171,148,159,173,196],
[202,164,0,188,141,164,159,137,163],
[135,149,152,0,154,144,150,148,145],
[188,169,199,186,0,156,187,177,172],
[191,192,176,196,184,0,190,160,204],
[188,181,181,190,153,150,0,174,166],
[209,167,203,192,163,180,166,0,181],
[164,144,177,195,168,136,174,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,164,162,183,181,187,168],
[169,0,167,160,154,162,164,195,179],
[169,173,0,180,161,184,176,176,165],
[176,180,160,0,150,184,175,195,162],
[178,186,179,190,0,194,169,195,171],
[157,178,156,156,146,0,159,178,147],
[159,176,164,165,171,181,0,177,161],
[153,145,164,145,145,162,163,0,155],
[172,161,175,178,169,193,179,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,142,158,128,143,128,159,159],
[188,0,215,153,149,188,170,198,176],
[198,125,0,141,147,142,183,174,174],
[182,187,199,0,180,149,166,183,186],
[212,191,193,160,0,180,198,182,178],
[197,152,198,191,160,0,181,191,184],
[212,170,157,174,142,159,0,185,163],
[181,142,166,157,158,149,155,0,151],
[181,164,166,154,162,156,177,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,160,148,143,154,156,146,166],
[194,0,160,177,159,189,166,186,171],
[180,180,0,183,175,188,159,167,181],
[192,163,157,0,164,178,156,172,181],
[197,181,165,176,0,173,170,182,178],
[186,151,152,162,167,0,156,161,167],
[184,174,181,184,170,184,0,170,172],
[194,154,173,168,158,179,170,0,169],
[174,169,159,159,162,173,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,162,165,170,157,154,187],
[161,0,171,147,143,168,148,145,181],
[167,169,0,174,196,174,162,162,188],
[178,193,166,0,163,181,180,175,182],
[175,197,144,177,0,178,192,202,180],
[170,172,166,159,162,0,165,168,190],
[183,192,178,160,148,175,0,178,204],
[186,195,178,165,138,172,162,0,194],
[153,159,152,158,160,150,136,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,178,168,157,181,186,194,175],
[174,0,156,156,167,183,183,183,170],
[162,184,0,175,170,184,191,176,162],
[172,184,165,0,183,186,172,185,172],
[183,173,170,157,0,187,205,179,145],
[159,157,156,154,153,0,176,176,151],
[154,157,149,168,135,164,0,163,164],
[146,157,164,155,161,164,177,0,150],
[165,170,178,168,195,189,176,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,192,162,172,189,187,168],
[162,0,149,187,170,163,167,164,157],
[168,191,0,193,174,169,174,184,174],
[148,153,147,0,144,155,155,158,152],
[178,170,166,196,0,177,195,202,167],
[168,177,171,185,163,0,178,191,147],
[151,173,166,185,145,162,0,199,168],
[153,176,156,182,138,149,141,0,139],
[172,183,166,188,173,193,172,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,147,151,191,161,175,126,138],
[189,0,136,172,121,169,111,139,163],
[193,204,0,161,189,146,101,159,153],
[189,168,179,0,164,164,214,160,156],
[149,219,151,176,0,198,134,179,168],
[179,171,194,176,142,0,183,108,162],
[165,229,239,126,206,157,0,138,181],
[214,201,181,180,161,232,202,0,193],
[202,177,187,184,172,178,159,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,153,140,197,176,168,196,163],
[145,0,174,144,187,138,193,147,175],
[187,166,0,173,214,170,203,159,149],
[200,196,167,0,152,192,141,147,160],
[143,153,126,188,0,145,159,105,151],
[164,202,170,148,195,0,166,162,186],
[172,147,137,199,181,174,0,120,173],
[144,193,181,193,235,178,220,0,169],
[177,165,191,180,189,154,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,162,182,160,166,171,172,158],
[172,0,163,187,173,171,180,179,160],
[178,177,0,192,173,169,178,173,170],
[158,153,148,0,159,153,175,163,151],
[180,167,167,181,0,168,188,167,173],
[174,169,171,187,172,0,179,177,173],
[169,160,162,165,152,161,0,153,155],
[168,161,167,177,173,163,187,0,156],
[182,180,170,189,167,167,185,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,184,187,163,146,176,149,166],
[144,0,177,184,156,186,169,127,156],
[156,163,0,205,159,165,193,149,163],
[153,156,135,0,149,172,182,150,166],
[177,184,181,191,0,146,188,157,189],
[194,154,175,168,194,0,182,172,171],
[164,171,147,158,152,158,0,143,134],
[191,213,191,190,183,168,197,0,190],
[174,184,177,174,151,169,206,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,154,176,178,185,169,171,182],
[157,0,171,194,183,181,165,177,170],
[186,169,0,182,184,191,178,169,196],
[164,146,158,0,162,170,158,136,173],
[162,157,156,178,0,182,152,168,187],
[155,159,149,170,158,0,173,166,183],
[171,175,162,182,188,167,0,168,182],
[169,163,171,204,172,174,172,0,185],
[158,170,144,167,153,157,158,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,167,140,193,188,177,168],
[172,0,183,170,171,170,179,177,171],
[177,157,0,147,172,156,179,156,154],
[173,170,193,0,169,177,198,170,174],
[200,169,168,171,0,182,190,156,183],
[147,170,184,163,158,0,186,162,177],
[152,161,161,142,150,154,0,164,159],
[163,163,184,170,184,178,176,0,180],
[172,169,186,166,157,163,181,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,187,168,155,182,181,168,181],
[159,0,181,169,155,178,177,175,164],
[153,159,0,145,149,164,157,165,168],
[172,171,195,0,172,194,170,176,175],
[185,185,191,168,0,192,184,181,171],
[158,162,176,146,148,0,167,162,160],
[159,163,183,170,156,173,0,167,167],
[172,165,175,164,159,178,173,0,164],
[159,176,172,165,169,180,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,189,158,171,180,152,173,152],
[167,0,174,172,183,178,151,189,158],
[151,166,0,175,178,168,158,180,173],
[182,168,165,0,184,194,166,209,154],
[169,157,162,156,0,173,151,176,150],
[160,162,172,146,167,0,146,163,144],
[188,189,182,174,189,194,0,193,167],
[167,151,160,131,164,177,147,0,149],
[188,182,167,186,190,196,173,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,158,177,163,188,226,198],
[177,0,178,196,155,196,200,206,242],
[161,162,0,131,155,157,174,221,202],
[182,144,209,0,148,177,171,232,182],
[163,185,185,192,0,205,213,242,227],
[177,144,183,163,135,0,151,220,191],
[152,140,166,169,127,189,0,225,196],
[114,134,119,108,98,120,115,0,80],
[142,98,138,158,113,149,144,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,194,217,238,190,206,232,247],
[189,0,108,191,177,157,187,151,165],
[146,232,0,205,237,183,203,166,161],
[123,149,135,0,137,118,86,129,127],
[102,163,103,203,0,170,156,151,70],
[150,183,157,222,170,0,154,178,129],
[134,153,137,254,184,186,0,162,125],
[108,189,174,211,189,162,178,0,177],
[93,175,179,213,270,211,215,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,171,170,144,148,172,158,161],
[159,0,178,155,152,150,160,159,155],
[169,162,0,182,173,163,175,173,165],
[170,185,158,0,145,144,159,161,162],
[196,188,167,195,0,155,172,182,175],
[192,190,177,196,185,0,165,154,164],
[168,180,165,181,168,175,0,148,146],
[182,181,167,179,158,186,192,0,171],
[179,185,175,178,165,176,194,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,158,149,150,159,162,151,143],
[183,0,189,158,178,171,183,177,164],
[182,151,0,166,158,157,155,161,152],
[191,182,174,0,166,177,174,179,172],
[190,162,182,174,0,175,170,166,184],
[181,169,183,163,165,0,173,152,174],
[178,157,185,166,170,167,0,170,177],
[189,163,179,161,174,188,170,0,166],
[197,176,188,168,156,166,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,158,163,168,171,162,152,182],
[163,0,162,161,157,175,165,145,151],
[182,178,0,167,174,181,160,182,171],
[177,179,173,0,166,183,160,170,164],
[172,183,166,174,0,191,161,170,168],
[169,165,159,157,149,0,153,146,149],
[178,175,180,180,179,187,0,180,167],
[188,195,158,170,170,194,160,0,163],
[158,189,169,176,172,191,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,172,179,167,171,181,184,173],
[181,0,169,162,170,173,184,178,175],
[168,171,0,177,176,173,174,176,178],
[161,178,163,0,172,174,186,172,174],
[173,170,164,168,0,173,176,169,177],
[169,167,167,166,167,0,181,169,171],
[159,156,166,154,164,159,0,156,165],
[156,162,164,168,171,171,184,0,172],
[167,165,162,166,163,169,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,152,157,175,148,156,146],
[170,0,168,145,165,167,154,154,158],
[169,172,0,165,164,178,175,184,162],
[188,195,175,0,182,191,181,173,170],
[183,175,176,158,0,179,169,168,188],
[165,173,162,149,161,0,162,155,160],
[192,186,165,159,171,178,0,168,176],
[184,186,156,167,172,185,172,0,165],
[194,182,178,170,152,180,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,176,191,202,171,167,185,180],
[152,0,157,192,184,187,182,189,162],
[164,183,0,183,180,172,173,168,160],
[149,148,157,0,146,151,163,155,159],
[138,156,160,194,0,151,147,180,153],
[169,153,168,189,189,0,176,162,168],
[173,158,167,177,193,164,0,175,182],
[155,151,172,185,160,178,165,0,174],
[160,178,180,181,187,172,158,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,197,187,190,179,184,176,152],
[168,0,188,172,177,174,162,167,174],
[143,152,0,154,158,148,154,153,158],
[153,168,186,0,175,178,172,148,169],
[150,163,182,165,0,175,165,163,141],
[161,166,192,162,165,0,173,156,154],
[156,178,186,168,175,167,0,155,151],
[164,173,187,192,177,184,185,0,167],
[188,166,182,171,199,186,189,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,157,163,167,163,162,177,162],
[166,0,154,161,161,170,174,168,157],
[183,186,0,173,168,158,190,161,174],
[177,179,167,0,160,171,181,186,167],
[173,179,172,180,0,166,177,155,157],
[177,170,182,169,174,0,184,178,169],
[178,166,150,159,163,156,0,172,164],
[163,172,179,154,185,162,168,0,168],
[178,183,166,173,183,171,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,126,146,167,187,186,139,179],
[195,0,171,151,197,188,202,171,184],
[214,169,0,172,218,223,176,194,196],
[194,189,168,0,185,207,217,163,174],
[173,143,122,155,0,186,166,130,161],
[153,152,117,133,154,0,163,150,146],
[154,138,164,123,174,177,0,145,177],
[201,169,146,177,210,190,195,0,193],
[161,156,144,166,179,194,163,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,185,181,176,166,165,172,169],
[176,0,179,183,187,165,170,201,181],
[155,161,0,186,192,177,175,188,187],
[159,157,154,0,160,146,156,169,168],
[164,153,148,180,0,151,162,184,180],
[174,175,163,194,189,0,184,192,193],
[175,170,165,184,178,156,0,185,176],
[168,139,152,171,156,148,155,0,157],
[171,159,153,172,160,147,164,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,148,155,163,134,161,139,151],
[180,0,172,157,172,154,159,159,156],
[192,168,0,185,186,180,181,180,196],
[185,183,155,0,156,165,156,175,166],
[177,168,154,184,0,172,174,174,172],
[206,186,160,175,168,0,192,181,164],
[179,181,159,184,166,148,0,158,159],
[201,181,160,165,166,159,182,0,168],
[189,184,144,174,168,176,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,142,171,123,162,138,110,189],
[176,0,154,153,171,130,149,210,126],
[198,186,0,139,142,149,166,157,185],
[169,187,201,0,155,127,124,159,123],
[217,169,198,185,0,184,174,128,142],
[178,210,191,213,156,0,164,176,202],
[202,191,174,216,166,176,0,159,199],
[230,130,183,181,212,164,181,0,153],
[151,214,155,217,198,138,141,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,183,161,187,179,189,185,179],
[154,0,166,144,169,168,162,153,160],
[157,174,0,161,168,161,193,161,162],
[179,196,179,0,178,169,189,182,177],
[153,171,172,162,0,159,169,167,174],
[161,172,179,171,181,0,177,181,161],
[151,178,147,151,171,163,0,166,160],
[155,187,179,158,173,159,174,0,166],
[161,180,178,163,166,179,180,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,149,157,162,162,160,177,172],
[154,0,169,156,170,163,148,160,156],
[191,171,0,191,179,189,166,193,175],
[183,184,149,0,162,182,155,185,179],
[178,170,161,178,0,171,161,167,155],
[178,177,151,158,169,0,145,170,156],
[180,192,174,185,179,195,0,168,181],
[163,180,147,155,173,170,172,0,151],
[168,184,165,161,185,184,159,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,184,166,171,170,163,178,175],
[178,0,178,165,178,182,187,172,176],
[156,162,0,173,176,182,164,157,160],
[174,175,167,0,176,194,169,183,165],
[169,162,164,164,0,185,168,157,148],
[170,158,158,146,155,0,161,158,159],
[177,153,176,171,172,179,0,178,162],
[162,168,183,157,183,182,162,0,159],
[165,164,180,175,192,181,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,158,132,146,148,147,132,147],
[198,0,172,156,176,178,190,169,178],
[182,168,0,151,161,169,182,124,157],
[208,184,189,0,167,169,191,139,162],
[194,164,179,173,0,160,184,173,170],
[192,162,171,171,180,0,195,160,145],
[193,150,158,149,156,145,0,153,164],
[208,171,216,201,167,180,187,0,145],
[193,162,183,178,170,195,176,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,206,205,220,201,153,189,228],
[152,0,167,202,234,227,200,181,207],
[134,173,0,196,206,171,187,148,193],
[135,138,144,0,200,163,163,170,170],
[120,106,134,140,0,164,160,167,178],
[139,113,169,177,176,0,172,156,190],
[187,140,153,177,180,168,0,165,189],
[151,159,192,170,173,184,175,0,191],
[112,133,147,170,162,150,151,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,177,175,136,166,187,166,195],
[148,0,170,180,136,171,187,168,197],
[163,170,0,170,175,157,179,146,197],
[165,160,170,0,152,142,148,143,179],
[204,204,165,188,0,179,195,190,210],
[174,169,183,198,161,0,199,169,189],
[153,153,161,192,145,141,0,155,166],
[174,172,194,197,150,171,185,0,187],
[145,143,143,161,130,151,174,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,187,168,165,161,168,178,170],
[172,0,180,179,162,169,175,172,175],
[153,160,0,163,175,166,168,180,164],
[172,161,177,0,170,161,165,191,168],
[175,178,165,170,0,179,173,188,171],
[179,171,174,179,161,0,168,194,177],
[172,165,172,175,167,172,0,177,165],
[162,168,160,149,152,146,163,0,163],
[170,165,176,172,169,163,175,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,186,184,166,184,166,164,184],
[172,0,185,180,170,181,170,161,172],
[154,155,0,172,166,161,154,153,175],
[156,160,168,0,168,173,161,157,175],
[174,170,174,172,0,178,155,159,171],
[156,159,179,167,162,0,161,150,172],
[174,170,186,179,185,179,0,176,187],
[176,179,187,183,181,190,164,0,187],
[156,168,165,165,169,168,153,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,160,192,190,180,172,155,161],
[164,0,161,175,193,182,172,166,178],
[180,179,0,170,168,191,184,180,173],
[148,165,170,0,178,175,177,167,182],
[150,147,172,162,0,153,172,159,163],
[160,158,149,165,187,0,174,163,156],
[168,168,156,163,168,166,0,148,170],
[185,174,160,173,181,177,192,0,171],
[179,162,167,158,177,184,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,175,164,137,154,188,147,168],
[200,0,197,183,164,171,213,172,176],
[165,143,0,170,163,147,175,156,176],
[176,157,170,0,141,153,182,155,173],
[203,176,177,199,0,191,220,163,187],
[186,169,193,187,149,0,191,166,167],
[152,127,165,158,120,149,0,123,142],
[193,168,184,185,177,174,217,0,174],
[172,164,164,167,153,173,198,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,210,142,142,236,226,210,144],
[171,0,159,139,172,237,204,178,162],
[130,181,0,145,150,215,211,228,164],
[198,201,195,0,147,192,229,200,164],
[198,168,190,193,0,254,202,191,225],
[104,103,125,148,86,0,187,166,98],
[114,136,129,111,138,153,0,202,118],
[130,162,112,140,149,174,138,0,114],
[196,178,176,176,115,242,222,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,193,186,178,175,180,196],
[165,0,186,188,177,194,166,191,193],
[178,154,0,187,203,189,181,181,186],
[147,152,153,0,169,164,145,163,167],
[154,163,137,171,0,163,170,167,175],
[162,146,151,176,177,0,150,190,180],
[165,174,159,195,170,190,0,166,193],
[160,149,159,177,173,150,174,0,192],
[144,147,154,173,165,160,147,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,170,169,168,174,178,182],
[170,0,182,168,170,178,165,165,165],
[160,158,0,169,162,166,171,163,173],
[170,172,171,0,175,162,170,180,161],
[171,170,178,165,0,174,158,161,171],
[172,162,174,178,166,0,172,162,170],
[166,175,169,170,182,168,0,171,168],
[162,175,177,160,179,178,169,0,172],
[158,175,167,179,169,170,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,119,128,137,161,159,174,160],
[146,0,175,174,155,151,188,195,199],
[221,165,0,173,157,218,214,221,228],
[212,166,167,0,168,178,175,196,209],
[203,185,183,172,0,194,219,162,215],
[179,189,122,162,146,0,159,166,210],
[181,152,126,165,121,181,0,171,154],
[166,145,119,144,178,174,169,0,155],
[180,141,112,131,125,130,186,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,164,183,185,164,154,186,145],
[179,0,185,197,187,184,177,182,163],
[176,155,0,186,174,171,174,191,169],
[157,143,154,0,164,161,159,185,140],
[155,153,166,176,0,179,152,174,173],
[176,156,169,179,161,0,186,178,170],
[186,163,166,181,188,154,0,179,163],
[154,158,149,155,166,162,161,0,160],
[195,177,171,200,167,170,177,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,157,182,169,172,175,181,159],
[177,0,160,183,177,174,170,187,165],
[183,180,0,187,174,177,164,183,176],
[158,157,153,0,147,159,156,162,149],
[171,163,166,193,0,172,164,172,178],
[168,166,163,181,168,0,168,190,164],
[165,170,176,184,176,172,0,184,165],
[159,153,157,178,168,150,156,0,161],
[181,175,164,191,162,176,175,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,150,171,161,172,149,180,164],
[208,0,176,196,166,183,166,177,170],
[190,164,0,207,165,191,174,162,180],
[169,144,133,0,161,152,152,145,155],
[179,174,175,179,0,170,137,137,165],
[168,157,149,188,170,0,154,163,150],
[191,174,166,188,203,186,0,167,164],
[160,163,178,195,203,177,173,0,185],
[176,170,160,185,175,190,176,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,163,159,168,167,177,170,167],
[167,0,165,160,169,171,181,169,173],
[177,175,0,152,184,164,179,170,166],
[181,180,188,0,179,183,191,178,165],
[172,171,156,161,0,166,173,174,172],
[173,169,176,157,174,0,165,166,166],
[163,159,161,149,167,175,0,170,170],
[170,171,170,162,166,174,170,0,175],
[173,167,174,175,168,174,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,179,153,169,168,162,138,187],
[168,0,201,172,196,178,200,184,199],
[161,139,0,156,182,147,130,141,165],
[187,168,184,0,178,215,189,186,210],
[171,144,158,162,0,160,179,204,170],
[172,162,193,125,180,0,161,179,176],
[178,140,210,151,161,179,0,167,168],
[202,156,199,154,136,161,173,0,154],
[153,141,175,130,170,164,172,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,177,159,179,172,175,154],
[161,0,171,174,172,182,190,170,175],
[175,169,0,159,163,182,180,180,174],
[163,166,181,0,179,177,178,173,176],
[181,168,177,161,0,169,161,170,172],
[161,158,158,163,171,0,164,168,158],
[168,150,160,162,179,176,0,167,166],
[165,170,160,167,170,172,173,0,159],
[186,165,166,164,168,182,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,167,183,160,171,173,160],
[166,0,178,186,177,161,166,163,155],
[167,162,0,164,187,157,177,183,151],
[173,154,176,0,173,160,178,152,155],
[157,163,153,167,0,162,162,165,157],
[180,179,183,180,178,0,179,169,174],
[169,174,163,162,178,161,0,161,158],
[167,177,157,188,175,171,179,0,167],
[180,185,189,185,183,166,182,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,162,155,158,162,151,172],
[176,0,174,178,157,174,159,151,158],
[167,166,0,160,167,162,174,155,161],
[178,162,180,0,158,167,163,170,167],
[185,183,173,182,0,181,167,169,174],
[182,166,178,173,159,0,148,151,157],
[178,181,166,177,173,192,0,163,172],
[189,189,185,170,171,189,177,0,178],
[168,182,179,173,166,183,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,182,168,164,176,160,164,172],
[171,0,163,160,149,187,158,170,183],
[158,177,0,146,160,181,166,160,173],
[172,180,194,0,179,193,171,170,203],
[176,191,180,161,0,194,183,184,196],
[164,153,159,147,146,0,154,174,173],
[180,182,174,169,157,186,0,161,179],
[176,170,180,170,156,166,179,0,182],
[168,157,167,137,144,167,161,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,169,182,164,172,171,171,180],
[181,0,163,199,166,199,181,167,196],
[171,177,0,175,164,170,158,178,184],
[158,141,165,0,145,168,168,157,161],
[176,174,176,195,0,183,170,177,179],
[168,141,170,172,157,0,163,178,155],
[169,159,182,172,170,177,0,169,169],
[169,173,162,183,163,162,171,0,152],
[160,144,156,179,161,185,171,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,184,191,176,176,170,184,190],
[173,0,183,195,177,167,171,168,183],
[156,157,0,180,174,163,165,184,180],
[149,145,160,0,163,164,160,173,165],
[164,163,166,177,0,165,176,168,179],
[164,173,177,176,175,0,165,168,151],
[170,169,175,180,164,175,0,175,170],
[156,172,156,167,172,172,165,0,174],
[150,157,160,175,161,189,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,194,166,165,200,169,193,176],
[155,0,173,140,134,162,160,158,159],
[146,167,0,145,164,171,162,171,162],
[174,200,195,0,158,191,183,203,176],
[175,206,176,182,0,186,166,192,172],
[140,178,169,149,154,0,164,160,157],
[171,180,178,157,174,176,0,175,171],
[147,182,169,137,148,180,165,0,158],
[164,181,178,164,168,183,169,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,196,189,144,160,158,178,167],
[157,0,175,186,105,158,151,204,162],
[144,165,0,192,152,159,140,185,166],
[151,154,148,0,93,150,134,178,157],
[196,235,188,247,0,208,170,197,201],
[180,182,181,190,132,0,155,220,168],
[182,189,200,206,170,185,0,201,184],
[162,136,155,162,143,120,139,0,150],
[173,178,174,183,139,172,156,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,190,174,197,167,170,151,169],
[185,0,228,209,184,146,171,179,163],
[150,112,0,111,172,120,160,121,149],
[166,131,229,0,184,129,188,178,173],
[143,156,168,156,0,119,125,131,166],
[173,194,220,211,221,0,169,185,172],
[170,169,180,152,215,171,0,159,185],
[189,161,219,162,209,155,181,0,184],
[171,177,191,167,174,168,155,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,159,135,143,140,131,140,188],
[229,0,172,168,164,129,178,201,201],
[181,168,0,187,169,142,156,163,169],
[205,172,153,0,150,163,163,175,189],
[197,176,171,190,0,195,195,153,213],
[200,211,198,177,145,0,193,185,219],
[209,162,184,177,145,147,0,175,190],
[200,139,177,165,187,155,165,0,179],
[152,139,171,151,127,121,150,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,180,174,170,185,186,171,186],
[148,0,182,166,155,175,176,160,172],
[160,158,0,163,159,164,167,161,170],
[166,174,177,0,155,172,165,159,173],
[170,185,181,185,0,168,168,164,177],
[155,165,176,168,172,0,168,156,170],
[154,164,173,175,172,172,0,164,182],
[169,180,179,181,176,184,176,0,183],
[154,168,170,167,163,170,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,186,236,193,176,217,148,129],
[175,0,203,176,194,144,155,140,68],
[154,137,0,170,141,124,179,140,122],
[104,164,170,0,189,125,154,162,43],
[147,146,199,151,0,169,135,214,151],
[164,196,216,215,171,0,231,166,173],
[123,185,161,186,205,109,0,162,95],
[192,200,200,178,126,174,178,0,129],
[211,272,218,297,189,167,245,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,192,154,127,126,150,145,118],
[163,0,164,185,142,68,189,109,90],
[148,176,0,150,132,86,159,154,154],
[186,155,190,0,165,104,141,175,156],
[213,198,208,175,0,133,176,181,196],
[214,272,254,236,207,0,174,163,173],
[190,151,181,199,164,166,0,108,137],
[195,231,186,165,159,177,232,0,165],
[222,250,186,184,144,167,203,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,160,162,163,160,174,188,178],
[158,0,149,165,147,150,151,174,141],
[180,191,0,175,162,172,175,183,155],
[178,175,165,0,167,172,172,182,172],
[177,193,178,173,0,159,174,186,174],
[180,190,168,168,181,0,167,183,173],
[166,189,165,168,166,173,0,186,169],
[152,166,157,158,154,157,154,0,171],
[162,199,185,168,166,167,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,178,174,166,167,165,179,172],
[161,0,167,175,171,174,167,168,165],
[162,173,0,171,176,157,180,174,162],
[166,165,169,0,165,186,166,174,166],
[174,169,164,175,0,164,169,176,158],
[173,166,183,154,176,0,160,177,165],
[175,173,160,174,171,180,0,161,161],
[161,172,166,166,164,163,179,0,167],
[168,175,178,174,182,175,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,153,180,161,157,173,161,156],
[175,0,176,191,168,179,169,173,175],
[187,164,0,168,167,179,171,168,180],
[160,149,172,0,150,167,163,151,164],
[179,172,173,190,0,167,188,173,176],
[183,161,161,173,173,0,173,174,182],
[167,171,169,177,152,167,0,164,168],
[179,167,172,189,167,166,176,0,174],
[184,165,160,176,164,158,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,198,186,183,172,170,173,171],
[162,0,181,164,168,156,142,185,171],
[142,159,0,147,158,156,139,175,158],
[154,176,193,0,174,170,157,184,159],
[157,172,182,166,0,174,166,181,182],
[168,184,184,170,166,0,159,182,178],
[170,198,201,183,174,181,0,195,186],
[167,155,165,156,159,158,145,0,160],
[169,169,182,181,158,162,154,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,190,154,173,157,154,158,156],
[179,0,176,179,133,151,148,164,156],
[150,164,0,166,143,160,165,160,164],
[186,161,174,0,147,172,140,160,157],
[167,207,197,193,0,168,140,174,164],
[183,189,180,168,172,0,178,195,194],
[186,192,175,200,200,162,0,176,162],
[182,176,180,180,166,145,164,0,128],
[184,184,176,183,176,146,178,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,194,187,160,164,168,176,181],
[190,0,205,200,187,203,184,165,203],
[146,135,0,175,151,140,140,131,155],
[153,140,165,0,151,151,146,147,176],
[180,153,189,189,0,150,169,174,187],
[176,137,200,189,190,0,164,171,195],
[172,156,200,194,171,176,0,150,191],
[164,175,209,193,166,169,190,0,199],
[159,137,185,164,153,145,149,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,190,184,170,175,180,168,185],
[157,0,164,185,157,159,165,178,166],
[150,176,0,163,150,139,162,145,152],
[156,155,177,0,152,155,154,161,153],
[170,183,190,188,0,162,168,166,175],
[165,181,201,185,178,0,174,170,175],
[160,175,178,186,172,166,0,177,166],
[172,162,195,179,174,170,163,0,177],
[155,174,188,187,165,165,174,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,189,170,200,165,189,153,193],
[157,0,174,168,166,155,199,193,160],
[151,166,0,176,176,176,176,168,164],
[170,172,164,0,168,183,195,145,173],
[140,174,164,172,0,153,169,167,155],
[175,185,164,157,187,0,224,186,177],
[151,141,164,145,171,116,0,169,142],
[187,147,172,195,173,154,171,0,168],
[147,180,176,167,185,163,198,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,147,178,158,158,172,161],
[164,0,165,148,188,166,170,168,165],
[170,175,0,167,179,165,167,164,155],
[193,192,173,0,192,163,181,175,173],
[162,152,161,148,0,155,150,147,163],
[182,174,175,177,185,0,174,182,164],
[182,170,173,159,190,166,0,174,184],
[168,172,176,165,193,158,166,0,161],
[179,175,185,167,177,176,156,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,169,183,155,203,182,161,184],
[157,0,155,169,157,172,171,178,167],
[171,185,0,199,150,187,179,167,174],
[157,171,141,0,135,154,154,153,159],
[185,183,190,205,0,172,179,190,160],
[137,168,153,186,168,0,177,163,186],
[158,169,161,186,161,163,0,174,164],
[179,162,173,187,150,177,166,0,176],
[156,173,166,181,180,154,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,162,184,178,173,165,164,195],
[169,0,150,181,164,154,156,157,192],
[178,190,0,195,184,178,169,184,196],
[156,159,145,0,161,169,158,158,183],
[162,176,156,179,0,168,163,170,180],
[167,186,162,171,172,0,169,157,186],
[175,184,171,182,177,171,0,170,205],
[176,183,156,182,170,183,170,0,179],
[145,148,144,157,160,154,135,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,153,170,140,152,143,172],
[171,0,171,164,177,167,167,156,174],
[167,169,0,178,175,164,165,160,168],
[187,176,162,0,184,164,157,151,171],
[170,163,165,156,0,155,154,139,166],
[200,173,176,176,185,0,179,156,174],
[188,173,175,183,186,161,0,177,188],
[197,184,180,189,201,184,163,0,176],
[168,166,172,169,174,166,152,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,187,170,176,180,152,183,175],
[173,0,171,192,162,159,162,172,156],
[153,169,0,174,174,154,150,170,162],
[170,148,166,0,172,159,147,168,169],
[164,178,166,168,0,161,164,168,166],
[160,181,186,181,179,0,172,175,174],
[188,178,190,193,176,168,0,193,187],
[157,168,170,172,172,165,147,0,167],
[165,184,178,171,174,166,153,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,177,163,152,180,116,154],
[162,0,118,125,171,162,101,107,173],
[167,222,0,120,198,197,179,177,184],
[163,215,220,0,200,180,157,131,136],
[177,169,142,140,0,122,157,184,91],
[188,178,143,160,218,0,153,176,165],
[160,239,161,183,183,187,0,147,186],
[224,233,163,209,156,164,193,0,149],
[186,167,156,204,249,175,154,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,80,162,197,159,148,141,106],
[152,0,178,179,142,175,148,123,148],
[260,162,0,178,189,144,163,181,196],
[178,161,162,0,202,134,164,112,166],
[143,198,151,138,0,171,143,128,121],
[181,165,196,206,169,0,149,151,185],
[192,192,177,176,197,191,0,155,181],
[199,217,159,228,212,189,185,0,187],
[234,192,144,174,219,155,159,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,158,154,163,144,151,164,162],
[188,0,180,153,173,166,169,158,186],
[182,160,0,158,154,157,170,171,167],
[186,187,182,0,160,150,169,167,165],
[177,167,186,180,0,163,173,178,181],
[196,174,183,190,177,0,170,181,171],
[189,171,170,171,167,170,0,175,175],
[176,182,169,173,162,159,165,0,166],
[178,154,173,175,159,169,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,173,164,177,183,193,168,172],
[181,0,179,167,190,190,186,177,164],
[167,161,0,167,179,181,182,157,176],
[176,173,173,0,180,204,187,164,169],
[163,150,161,160,0,196,185,167,168],
[157,150,159,136,144,0,170,141,156],
[147,154,158,153,155,170,0,156,168],
[172,163,183,176,173,199,184,0,170],
[168,176,164,171,172,184,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,162,174,164,159,180,157,147],
[178,0,179,186,170,186,179,163,160],
[178,161,0,180,161,180,177,167,154],
[166,154,160,0,146,163,130,137,134],
[176,170,179,194,0,181,171,158,157],
[181,154,160,177,159,0,156,145,142],
[160,161,163,210,169,184,0,171,165],
[183,177,173,203,182,195,169,0,182],
[193,180,186,206,183,198,175,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,206,194,243,166,195,200,141],
[181,0,116,87,236,123,147,169,144],
[134,224,0,135,215,115,133,150,172],
[146,253,205,0,227,138,154,134,122],
[97,104,125,113,0,26,163,69,87],
[174,217,225,202,314,0,229,238,144],
[145,193,207,186,177,111,0,167,92],
[140,171,190,206,271,102,173,0,85],
[199,196,168,218,253,196,248,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,222,192,206,196,177,194,158],
[140,0,185,158,220,164,182,197,162],
[118,155,0,173,184,162,181,174,159],
[148,182,167,0,187,168,198,168,163],
[134,120,156,153,0,151,187,168,130],
[144,176,178,172,189,0,170,163,159],
[163,158,159,142,153,170,0,165,160],
[146,143,166,172,172,177,175,0,172],
[182,178,181,177,210,181,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,220,207,178,184,191,165,184],
[131,0,171,201,174,191,107,141,127],
[120,169,0,192,175,145,142,150,184],
[133,139,148,0,136,145,122,126,142],
[162,166,165,204,0,146,133,142,133],
[156,149,195,195,194,0,114,144,141],
[149,233,198,218,207,226,0,193,169],
[175,199,190,214,198,196,147,0,165],
[156,213,156,198,207,199,171,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,172,171,178,172,184,162],
[173,0,172,180,176,164,170,169,172],
[164,168,0,175,172,177,166,170,156],
[168,160,165,0,165,172,166,175,175],
[169,164,168,175,0,185,168,165,164],
[162,176,163,168,155,0,170,174,168],
[168,170,174,174,172,170,0,196,163],
[156,171,170,165,175,166,144,0,159],
[178,168,184,165,176,172,177,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,169,152,162,178,179,173],
[176,0,170,177,180,184,176,190,180],
[175,170,0,180,154,163,179,172,163],
[171,163,160,0,153,162,158,163,163],
[188,160,186,187,0,176,180,189,170],
[178,156,177,178,164,0,179,173,169],
[162,164,161,182,160,161,0,162,152],
[161,150,168,177,151,167,178,0,154],
[167,160,177,177,170,171,188,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,171,172,165,167,211,148,214],
[151,0,162,165,181,128,198,142,170],
[169,178,0,172,196,190,182,184,189],
[168,175,168,0,187,149,201,182,201],
[175,159,144,153,0,142,189,152,181],
[173,212,150,191,198,0,210,165,184],
[129,142,158,139,151,130,0,163,168],
[192,198,156,158,188,175,177,0,186],
[126,170,151,139,159,156,172,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,178,187,174,159,178,168,194],
[154,0,175,152,163,171,151,159,163],
[162,165,0,162,163,169,153,162,152],
[153,188,178,0,156,155,154,168,145],
[166,177,177,184,0,161,175,176,181],
[181,169,171,185,179,0,167,183,175],
[162,189,187,186,165,173,0,184,185],
[172,181,178,172,164,157,156,0,173],
[146,177,188,195,159,165,155,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,148,162,166,152,157,149],
[168,0,164,155,175,172,158,164,158],
[172,176,0,156,171,172,161,164,163],
[192,185,184,0,189,180,171,177,163],
[178,165,169,151,0,175,159,168,158],
[174,168,168,160,165,0,176,163,164],
[188,182,179,169,181,164,0,169,171],
[183,176,176,163,172,177,171,0,166],
[191,182,177,177,182,176,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,190,157,157,122,141,179,212],
[130,0,130,97,117,107,112,165,195],
[150,210,0,162,174,149,141,224,217],
[183,243,178,0,196,207,188,226,158],
[183,223,166,144,0,182,157,206,174],
[218,233,191,133,158,0,162,234,239],
[199,228,199,152,183,178,0,216,205],
[161,175,116,114,134,106,124,0,168],
[128,145,123,182,166,101,135,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,157,172,166,180,172,125,150],
[163,0,143,140,149,151,152,125,134],
[183,197,0,170,188,177,191,155,147],
[168,200,170,0,193,180,180,172,167],
[174,191,152,147,0,179,160,150,153],
[160,189,163,160,161,0,155,144,157],
[168,188,149,160,180,185,0,142,160],
[215,215,185,168,190,196,198,0,188],
[190,206,193,173,187,183,180,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,168,170,196,146,182,182,187],
[192,0,180,190,211,189,204,162,200],
[172,160,0,169,203,129,178,156,176],
[170,150,171,0,175,142,153,161,160],
[144,129,137,165,0,119,157,125,158],
[194,151,211,198,221,0,192,163,194],
[158,136,162,187,183,148,0,163,174],
[158,178,184,179,215,177,177,0,172],
[153,140,164,180,182,146,166,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,162,181,177,176,195,159,193],
[154,0,179,171,184,163,189,174,179],
[178,161,0,187,203,199,188,182,171],
[159,169,153,0,171,171,159,178,187],
[163,156,137,169,0,177,173,173,179],
[164,177,141,169,163,0,157,160,172],
[145,151,152,181,167,183,0,173,190],
[181,166,158,162,167,180,167,0,162],
[147,161,169,153,161,168,150,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,171,177,180,185,151,187],
[162,0,154,162,146,172,157,141,176],
[178,186,0,173,165,183,189,177,181],
[169,178,167,0,149,153,166,161,165],
[163,194,175,191,0,176,188,179,189],
[160,168,157,187,164,0,174,162,172],
[155,183,151,174,152,166,0,162,179],
[189,199,163,179,161,178,178,0,182],
[153,164,159,175,151,168,161,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,130,183,204,219,176,230,140],
[204,0,172,177,164,235,161,263,171],
[210,168,0,96,178,203,132,235,143],
[157,163,244,0,170,233,176,267,163],
[136,176,162,170,0,227,136,185,114],
[121,105,137,107,113,0,116,178,111],
[164,179,208,164,204,224,0,269,133],
[110,77,105,73,155,162,71,0,61],
[200,169,197,177,226,229,207,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,119,119,169,0,169,221,169],
[340,0,119,119,340,288,288,221,288],
[221,221,0,0,221,169,221,221,169],
[221,221,340,0,221,221,221,221,169],
[171,0,119,119,0,0,288,221,288],
[340,52,171,119,340,0,340,221,288],
[171,52,119,119,52,0,0,52,288],
[119,119,119,119,119,119,288,0,288],
[171,52,171,171,52,52,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,176,151,153,156,167,186,154],
[150,0,161,140,139,155,177,159,150],
[164,179,0,154,170,164,181,189,168],
[189,200,186,0,161,174,187,170,162],
[187,201,170,179,0,186,203,182,190],
[184,185,176,166,154,0,188,169,182],
[173,163,159,153,137,152,0,170,156],
[154,181,151,170,158,171,170,0,155],
[186,190,172,178,150,158,184,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,144,248,189,140,151,88,155],
[141,0,147,190,123,160,163,141,85],
[196,193,0,182,184,159,163,144,166],
[92,150,158,0,163,141,124,133,149],
[151,217,156,177,0,135,118,131,144],
[200,180,181,199,205,0,174,149,139],
[189,177,177,216,222,166,0,166,182],
[252,199,196,207,209,191,174,0,163],
[185,255,174,191,196,201,158,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,36,99,85,0,141,162,98],
[325,0,244,203,191,139,273,174,196],
[304,96,0,84,108,91,220,175,128],
[241,137,256,0,235,204,254,189,241],
[255,149,232,105,0,131,176,126,84],
[340,201,249,136,209,0,246,213,222],
[199,67,120,86,164,94,0,149,150],
[178,166,165,151,214,127,191,0,163],
[242,144,212,99,256,118,190,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,154,133,161,175,169,161,180],
[176,0,161,174,155,192,176,173,197],
[186,179,0,168,190,186,187,164,204],
[207,166,172,0,201,223,207,203,220],
[179,185,150,139,0,180,152,157,211],
[165,148,154,117,160,0,183,171,181],
[171,164,153,133,188,157,0,152,190],
[179,167,176,137,183,169,188,0,199],
[160,143,136,120,129,159,150,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,154,164,169,167,168,156,149],
[175,0,162,170,176,172,159,156,160],
[186,178,0,173,185,175,171,159,163],
[176,170,167,0,164,168,160,157,156],
[171,164,155,176,0,169,165,159,151],
[173,168,165,172,171,0,178,167,167],
[172,181,169,180,175,162,0,161,174],
[184,184,181,183,181,173,179,0,169],
[191,180,177,184,189,173,166,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,167,154,158,177,176,165],
[168,0,182,171,166,159,190,175,169],
[168,158,0,163,146,150,167,166,153],
[173,169,177,0,154,155,175,174,174],
[186,174,194,186,0,169,181,198,175],
[182,181,190,185,171,0,187,190,170],
[163,150,173,165,159,153,0,166,158],
[164,165,174,166,142,150,174,0,163],
[175,171,187,166,165,170,182,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,188,196,180,183,172,158,166],
[176,0,179,211,179,202,197,178,170],
[152,161,0,190,162,180,182,178,165],
[144,129,150,0,152,162,157,133,151],
[160,161,178,188,0,177,170,158,159],
[157,138,160,178,163,0,175,145,150],
[168,143,158,183,170,165,0,162,169],
[182,162,162,207,182,195,178,0,179],
[174,170,175,189,181,190,171,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,195,211,165,196,172,181,209],
[128,0,156,205,155,171,133,169,189],
[145,184,0,208,202,186,169,167,189],
[129,135,132,0,93,176,120,144,139],
[175,185,138,247,0,209,170,179,190],
[144,169,154,164,131,0,146,175,149],
[168,207,171,220,170,194,0,192,203],
[159,171,173,196,161,165,148,0,190],
[131,151,151,201,150,191,137,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,179,185,176,173,160,176,170],
[157,0,185,182,172,171,171,175,162],
[161,155,0,169,159,164,160,163,165],
[155,158,171,0,164,160,160,166,154],
[164,168,181,176,0,167,163,180,156],
[167,169,176,180,173,0,157,178,166],
[180,169,180,180,177,183,0,172,159],
[164,165,177,174,160,162,168,0,149],
[170,178,175,186,184,174,181,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,180,200,159,169,177,184],
[165,0,156,177,169,145,163,183,182],
[165,184,0,168,182,174,187,201,187],
[160,163,172,0,190,152,160,174,180],
[140,171,158,150,0,136,168,173,172],
[181,195,166,188,204,0,175,195,203],
[171,177,153,180,172,165,0,183,182],
[163,157,139,166,167,145,157,0,156],
[156,158,153,160,168,137,158,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,195,175,154,159,167,174,174],
[135,0,150,163,146,150,151,163,175],
[145,190,0,162,185,167,160,158,171],
[165,177,178,0,169,168,159,156,172],
[186,194,155,171,0,163,188,151,189],
[181,190,173,172,177,0,181,158,185],
[173,189,180,181,152,159,0,159,162],
[166,177,182,184,189,182,181,0,185],
[166,165,169,168,151,155,178,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,178,162,161,171,178,168,165],
[181,0,177,166,165,174,184,186,186],
[162,163,0,158,153,154,162,166,169],
[178,174,182,0,169,183,182,182,178],
[179,175,187,171,0,183,182,178,170],
[169,166,186,157,157,0,178,166,165],
[162,156,178,158,158,162,0,169,160],
[172,154,174,158,162,174,171,0,170],
[175,154,171,162,170,175,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,181,178,178,170,179,174,183],
[166,0,185,186,184,182,175,198,177],
[159,155,0,178,169,173,157,172,166],
[162,154,162,0,164,167,173,176,160],
[162,156,171,176,0,173,167,176,172],
[170,158,167,173,167,0,178,175,175],
[161,165,183,167,173,162,0,173,168],
[166,142,168,164,164,165,167,0,158],
[157,163,174,180,168,165,172,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,160,148,152,173,177,133,128],
[192,0,165,160,148,172,174,136,157],
[180,175,0,159,159,164,174,145,153],
[192,180,181,0,172,164,175,157,163],
[188,192,181,168,0,176,180,151,171],
[167,168,176,176,164,0,154,151,161],
[163,166,166,165,160,186,0,130,154],
[207,204,195,183,189,189,210,0,170],
[212,183,187,177,169,179,186,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,182,185,197,188,195,180,167],
[157,0,159,169,178,173,158,166,163],
[158,181,0,171,184,163,185,179,171],
[155,171,169,0,193,166,163,169,175],
[143,162,156,147,0,148,156,160,133],
[152,167,177,174,192,0,156,169,142],
[145,182,155,177,184,184,0,172,165],
[160,174,161,171,180,171,168,0,153],
[173,177,169,165,207,198,175,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,178,173,156,166,156,149,163],
[155,0,224,182,166,192,186,165,170],
[162,116,0,156,119,154,146,148,148],
[167,158,184,0,136,169,160,147,156],
[184,174,221,204,0,170,180,178,185],
[174,148,186,171,170,0,167,173,173],
[184,154,194,180,160,173,0,179,167],
[191,175,192,193,162,167,161,0,170],
[177,170,192,184,155,167,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,10,10,0,10,96,0,0],
[254,0,10,146,146,146,146,146,146],
[330,330,0,254,136,254,340,136,136],
[330,194,86,0,222,232,340,222,222],
[340,194,204,118,0,254,204,330,222],
[330,194,86,108,86,0,194,222,222],
[244,194,0,0,136,146,0,136,136],
[340,194,204,118,10,118,204,0,0],
[340,194,204,118,118,118,204,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,179,186,162,174,186,170],
[170,0,165,182,177,162,181,170,177],
[181,175,0,185,170,170,169,170,168],
[161,158,155,0,164,158,175,158,159],
[154,163,170,176,0,162,167,169,176],
[178,178,170,182,178,0,173,181,174],
[166,159,171,165,173,167,0,160,178],
[154,170,170,182,171,159,180,0,170],
[170,163,172,181,164,166,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,174,206,201,183,169,184,201],
[151,0,177,195,184,179,164,178,190],
[166,163,0,184,186,159,158,167,170],
[134,145,156,0,169,158,147,155,166],
[139,156,154,171,0,165,145,150,172],
[157,161,181,182,175,0,185,180,173],
[171,176,182,193,195,155,0,175,198],
[156,162,173,185,190,160,165,0,194],
[139,150,170,174,168,167,142,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,156,163,163,168,170,177,181],
[153,0,171,160,158,164,175,169,185],
[184,169,0,159,168,170,167,166,188],
[177,180,181,0,174,170,174,178,184],
[177,182,172,166,0,172,172,177,185],
[172,176,170,170,168,0,175,176,186],
[170,165,173,166,168,165,0,168,186],
[163,171,174,162,163,164,172,0,185],
[159,155,152,156,155,154,154,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,139,144,187,162,144,161,193],
[208,0,163,202,196,188,189,185,233],
[201,177,0,181,200,169,168,170,208],
[196,138,159,0,215,184,178,187,200],
[153,144,140,125,0,142,167,136,161],
[178,152,171,156,198,0,180,156,185],
[196,151,172,162,173,160,0,151,218],
[179,155,170,153,204,184,189,0,221],
[147,107,132,140,179,155,122,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,174,188,202,191,168,179,167],
[132,0,131,155,165,179,148,139,154],
[166,209,0,177,188,183,165,161,180],
[152,185,163,0,184,190,167,170,167],
[138,175,152,156,0,156,132,148,159],
[149,161,157,150,184,0,157,163,154],
[172,192,175,173,208,183,0,204,168],
[161,201,179,170,192,177,136,0,184],
[173,186,160,173,181,186,172,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,174,190,153,163,181,176],
[167,0,170,168,187,173,169,163,166],
[164,170,0,173,166,143,168,181,155],
[166,172,167,0,175,159,153,178,171],
[150,153,174,165,0,155,151,173,169],
[187,167,197,181,185,0,171,186,183],
[177,171,172,187,189,169,0,197,181],
[159,177,159,162,167,154,143,0,164],
[164,174,185,169,171,157,159,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,169,177,181,168,174,176,179],
[159,0,170,166,175,167,172,182,175],
[171,170,0,180,169,174,163,180,178],
[163,174,160,0,162,164,155,176,166],
[159,165,171,178,0,164,161,177,168],
[172,173,166,176,176,0,160,176,175],
[166,168,177,185,179,180,0,180,179],
[164,158,160,164,163,164,160,0,162],
[161,165,162,174,172,165,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,169,178,170,171,157,159],
[176,0,185,180,172,165,176,188,169],
[171,155,0,177,167,169,165,162,164],
[171,160,163,0,169,170,172,151,169],
[162,168,173,171,0,173,175,160,167],
[170,175,171,170,167,0,173,164,178],
[169,164,175,168,165,167,0,162,164],
[183,152,178,189,180,176,178,0,176],
[181,171,176,171,173,162,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,193,198,175,185,170,172,154],
[182,0,201,176,177,159,164,173,176],
[147,139,0,177,140,147,158,162,149],
[142,164,163,0,163,143,148,182,162],
[165,163,200,177,0,191,163,163,176],
[155,181,193,197,149,0,179,190,150],
[170,176,182,192,177,161,0,180,138],
[168,167,178,158,177,150,160,0,164],
[186,164,191,178,164,190,202,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,185,175,176,170,172,170,169],
[175,0,182,180,170,171,171,179,175],
[155,158,0,161,158,166,154,172,175],
[165,160,179,0,162,166,166,166,177],
[164,170,182,178,0,178,171,174,178],
[170,169,174,174,162,0,165,182,180],
[168,169,186,174,169,175,0,184,182],
[170,161,168,174,166,158,156,0,163],
[171,165,165,163,162,160,158,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,222,232,234,229,183,154,218],
[142,0,159,214,161,190,159,160,220],
[118,181,0,164,175,150,161,166,175],
[108,126,176,0,175,182,163,119,198],
[106,179,165,165,0,159,122,152,150],
[111,150,190,158,181,0,129,140,219],
[157,181,179,177,218,211,0,198,213],
[186,180,174,221,188,200,142,0,191],
[122,120,165,142,190,121,127,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,186,178,167,205,198,185,193],
[160,0,162,177,130,188,160,167,176],
[154,178,0,159,141,162,162,161,173],
[162,163,181,0,154,181,178,166,165],
[173,210,199,186,0,186,177,167,189],
[135,152,178,159,154,0,161,165,159],
[142,180,178,162,163,179,0,166,162],
[155,173,179,174,173,175,174,0,168],
[147,164,167,175,151,181,178,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,153,144,156,176,155,167,157],
[194,0,161,169,180,182,170,173,160],
[187,179,0,167,177,199,175,185,173],
[196,171,173,0,189,178,170,173,169],
[184,160,163,151,0,183,170,171,164],
[164,158,141,162,157,0,155,158,171],
[185,170,165,170,170,185,0,176,185],
[173,167,155,167,169,182,164,0,177],
[183,180,167,171,176,169,155,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,162,178,167,159,175,167,192],
[183,0,168,194,189,182,162,185,185],
[178,172,0,186,174,167,169,181,171],
[162,146,154,0,171,152,161,189,171],
[173,151,166,169,0,160,157,176,173],
[181,158,173,188,180,0,178,182,197],
[165,178,171,179,183,162,0,187,198],
[173,155,159,151,164,158,153,0,176],
[148,155,169,169,167,143,142,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,150,138,140,147,169,163,162],
[178,0,148,148,159,144,163,158,157],
[190,192,0,161,175,175,185,182,171],
[202,192,179,0,165,159,182,187,180],
[200,181,165,175,0,166,171,181,186],
[193,196,165,181,174,0,184,181,172],
[171,177,155,158,169,156,0,185,175],
[177,182,158,153,159,159,155,0,150],
[178,183,169,160,154,168,165,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,178,170,174,170,160,173,167],
[185,0,176,164,169,178,159,173,166],
[162,164,0,163,172,167,166,167,171],
[170,176,177,0,173,161,162,173,170],
[166,171,168,167,0,167,166,179,176],
[170,162,173,179,173,0,176,169,173],
[180,181,174,178,174,164,0,172,168],
[167,167,173,167,161,171,168,0,168],
[173,174,169,170,164,167,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,175,186,181,182,172,182,181],
[177,0,177,191,182,183,166,168,178],
[165,163,0,189,166,170,177,178,193],
[154,149,151,0,158,165,157,154,177],
[159,158,174,182,0,160,172,160,167],
[158,157,170,175,180,0,164,154,176],
[168,174,163,183,168,176,0,172,185],
[158,172,162,186,180,186,168,0,174],
[159,162,147,163,173,164,155,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,188,172,172,161,178,178,170],
[174,0,188,174,169,161,176,185,162],
[152,152,0,156,155,156,152,164,139],
[168,166,184,0,173,160,167,182,164],
[168,171,185,167,0,170,157,183,167],
[179,179,184,180,170,0,172,182,165],
[162,164,188,173,183,168,0,181,168],
[162,155,176,158,157,158,159,0,146],
[170,178,201,176,173,175,172,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,144,171,172,146,128,164,159],
[237,0,168,212,189,179,233,256,196],
[196,172,0,212,160,105,173,191,181],
[169,128,128,0,137,127,194,158,150],
[168,151,180,203,0,167,228,186,155],
[194,161,235,213,173,0,178,200,190],
[212,107,167,146,112,162,0,199,157],
[176,84,149,182,154,140,141,0,182],
[181,144,159,190,185,150,183,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,178,200,187,161,146,177],
[162,0,171,160,170,179,160,177,173],
[162,169,0,162,162,187,172,163,157],
[162,180,178,0,179,183,150,165,169],
[140,170,178,161,0,176,145,146,164],
[153,161,153,157,164,0,148,159,140],
[179,180,168,190,195,192,0,169,165],
[194,163,177,175,194,181,171,0,182],
[163,167,183,171,176,200,175,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,186,185,164,185,171,184,193],
[144,0,167,142,170,194,158,175,198],
[154,173,0,169,162,187,159,196,198],
[155,198,171,0,175,184,160,173,198],
[176,170,178,165,0,198,155,176,189],
[155,146,153,156,142,0,145,159,178],
[169,182,181,180,185,195,0,201,201],
[156,165,144,167,164,181,139,0,170],
[147,142,142,142,151,162,139,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,187,188,216,174,170,153,197],
[105,0,182,175,185,164,141,132,131],
[153,158,0,143,188,138,128,109,104],
[152,165,197,0,205,167,145,163,142],
[124,155,152,135,0,111,112,160,128],
[166,176,202,173,229,0,204,170,202],
[170,199,212,195,228,136,0,183,221],
[187,208,231,177,180,170,157,0,193],
[143,209,236,198,212,138,119,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,169,165,180,157,175,159,144],
[196,0,192,173,196,159,174,172,170],
[171,148,0,164,167,157,168,164,151],
[175,167,176,0,198,157,198,149,167],
[160,144,173,142,0,175,158,160,150],
[183,181,183,183,165,0,181,158,180],
[165,166,172,142,182,159,0,150,161],
[181,168,176,191,180,182,190,0,161],
[196,170,189,173,190,160,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,191,152,182,191,170,161],
[168,0,168,196,160,183,179,204,170],
[169,172,0,183,152,176,182,159,161],
[149,144,157,0,141,167,158,173,148],
[188,180,188,199,0,185,162,191,175],
[158,157,164,173,155,0,154,168,156],
[149,161,158,182,178,186,0,184,181],
[170,136,181,167,149,172,156,0,151],
[179,170,179,192,165,184,159,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,162,156,170,156,170,171,193],
[161,0,159,169,173,156,143,161,173],
[178,181,0,161,193,155,176,185,202],
[184,171,179,0,178,163,158,200,184],
[170,167,147,162,0,158,152,177,184],
[184,184,185,177,182,0,170,188,204],
[170,197,164,182,188,170,0,184,197],
[169,179,155,140,163,152,156,0,175],
[147,167,138,156,156,136,143,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,179,169,148,179,176,174,200],
[195,0,182,170,185,176,181,218,198],
[161,158,0,163,161,151,168,164,173],
[171,170,177,0,184,153,190,187,224],
[192,155,179,156,0,177,178,192,200],
[161,164,189,187,163,0,193,192,202],
[164,159,172,150,162,147,0,171,198],
[166,122,176,153,148,148,169,0,174],
[140,142,167,116,140,138,142,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,149,147,158,146,182,170,149],
[171,0,148,131,152,140,160,181,154],
[191,192,0,166,183,182,182,199,181],
[193,209,174,0,187,173,209,192,162],
[182,188,157,153,0,149,171,168,153],
[194,200,158,167,191,0,197,205,178],
[158,180,158,131,169,143,0,181,161],
[170,159,141,148,172,135,159,0,157],
[191,186,159,178,187,162,179,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,171,168,163,162,174,168,175],
[180,0,171,180,168,174,168,179,187],
[169,169,0,180,158,167,167,166,175],
[172,160,160,0,162,153,163,165,179],
[177,172,182,178,0,165,171,185,187],
[178,166,173,187,175,0,162,189,181],
[166,172,173,177,169,178,0,170,187],
[172,161,174,175,155,151,170,0,163],
[165,153,165,161,153,159,153,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,134,154,173,166,177,164],
[172,0,148,116,144,145,161,152,137],
[168,192,0,150,172,181,163,160,163],
[206,224,190,0,161,176,172,155,209],
[186,196,168,179,0,182,174,177,183],
[167,195,159,164,158,0,194,170,167],
[174,179,177,168,166,146,0,138,152],
[163,188,180,185,163,170,202,0,193],
[176,203,177,131,157,173,188,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,181,185,163,160,169,166,167],
[162,0,175,169,160,176,155,170,146],
[159,165,0,166,142,160,151,155,159],
[155,171,174,0,152,165,164,173,151],
[177,180,198,188,0,176,171,167,183],
[180,164,180,175,164,0,167,179,173],
[171,185,189,176,169,173,0,174,181],
[174,170,185,167,173,161,166,0,166],
[173,194,181,189,157,167,159,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,163,179,189,173,180,155,163],
[195,0,183,208,173,178,184,169,185],
[177,157,0,165,169,151,158,167,168],
[161,132,175,0,148,143,144,149,155],
[151,167,171,192,0,153,178,173,167],
[167,162,189,197,187,0,169,185,180],
[160,156,182,196,162,171,0,163,169],
[185,171,173,191,167,155,177,0,175],
[177,155,172,185,173,160,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,144,139,156,143,147,161,135],
[199,0,169,180,172,176,185,201,173],
[196,171,0,153,163,178,174,171,177],
[201,160,187,0,170,176,206,219,177],
[184,168,177,170,0,176,171,203,186],
[197,164,162,164,164,0,179,180,150],
[193,155,166,134,169,161,0,189,161],
[179,139,169,121,137,160,151,0,141],
[205,167,163,163,154,190,179,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,178,166,181,184,172,179],
[176,0,181,168,183,181,177,177,178],
[171,159,0,174,183,173,175,171,184],
[162,172,166,0,165,170,172,156,163],
[174,157,157,175,0,170,183,169,186],
[159,159,167,170,170,0,174,179,177],
[156,163,165,168,157,166,0,162,172],
[168,163,169,184,171,161,178,0,170],
[161,162,156,177,154,163,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,204,200,181,166,192,181,162],
[157,0,153,173,172,191,178,166,178],
[136,187,0,171,150,162,159,138,149],
[140,167,169,0,168,179,173,152,163],
[159,168,190,172,0,187,200,173,184],
[174,149,178,161,153,0,163,164,156],
[148,162,181,167,140,177,0,167,148],
[159,174,202,188,167,176,173,0,154],
[178,162,191,177,156,184,192,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,161,159,177,174,162,171,182],
[172,0,173,156,173,181,168,178,187],
[179,167,0,176,172,176,181,190,173],
[181,184,164,0,185,187,187,176,178],
[163,167,168,155,0,175,173,162,167],
[166,159,164,153,165,0,169,168,165],
[178,172,159,153,167,171,0,172,172],
[169,162,150,164,178,172,168,0,171],
[158,153,167,162,173,175,168,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,182,174,180,161,178,172],
[176,0,178,172,173,189,169,170,175],
[167,162,0,179,166,176,176,187,180],
[158,168,161,0,169,167,147,164,171],
[166,167,174,171,0,185,159,170,157],
[160,151,164,173,155,0,163,170,170],
[179,171,164,193,181,177,0,189,185],
[162,170,153,176,170,170,151,0,173],
[168,165,160,169,183,170,155,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,227,163,163,164,154,165],
[179,0,153,191,173,159,152,149,159],
[167,187,0,216,159,166,164,165,168],
[113,149,124,0,125,138,115,118,122],
[177,167,181,215,0,173,174,169,162],
[177,181,174,202,167,0,189,170,187],
[176,188,176,225,166,151,0,147,159],
[186,191,175,222,171,170,193,0,177],
[175,181,172,218,178,153,181,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,171,178,173,188,168,171],
[174,0,176,175,186,179,175,164,188],
[168,164,0,147,172,178,172,173,168],
[169,165,193,0,189,172,176,176,179],
[162,154,168,151,0,172,177,165,176],
[167,161,162,168,168,0,151,173,171],
[152,165,168,164,163,189,0,163,184],
[172,176,167,164,175,167,177,0,193],
[169,152,172,161,164,169,156,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,198,189,176,170,148,171],
[175,0,177,202,163,189,162,160,177],
[173,163,0,177,164,164,173,185,174],
[142,138,163,0,169,202,156,148,148],
[151,177,176,171,0,178,148,170,167],
[164,151,176,138,162,0,167,156,163],
[170,178,167,184,192,173,0,179,199],
[192,180,155,192,170,184,161,0,189],
[169,163,166,192,173,177,141,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,152,159,149,155,165,143,141],
[153,0,176,151,175,168,155,169,157],
[188,164,0,176,166,174,177,162,179],
[181,189,164,0,171,178,167,165,178],
[191,165,174,169,0,180,160,173,182],
[185,172,166,162,160,0,168,162,167],
[175,185,163,173,180,172,0,178,178],
[197,171,178,175,167,178,162,0,166],
[199,183,161,162,158,173,162,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,158,182,160,164,180,182,167],
[168,0,170,195,162,161,188,177,173],
[182,170,0,190,189,185,194,177,188],
[158,145,150,0,140,152,174,170,153],
[180,178,151,200,0,172,186,181,177],
[176,179,155,188,168,0,179,175,180],
[160,152,146,166,154,161,0,156,136],
[158,163,163,170,159,165,184,0,165],
[173,167,152,187,163,160,204,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,172,170,167,175,172,158,182],
[156,0,161,170,164,171,154,164,169],
[168,179,0,174,163,174,171,159,179],
[170,170,166,0,159,169,153,153,163],
[173,176,177,181,0,176,179,161,179],
[165,169,166,171,164,0,167,147,173],
[168,186,169,187,161,173,0,178,167],
[182,176,181,187,179,193,162,0,179],
[158,171,161,177,161,167,173,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,175,171,190,160,160,162],
[167,0,158,168,166,169,178,163,154],
[164,182,0,163,177,177,186,159,169],
[165,172,177,0,172,181,169,178,178],
[169,174,163,168,0,173,168,164,164],
[150,171,163,159,167,0,149,164,156],
[180,162,154,171,172,191,0,162,161],
[180,177,181,162,176,176,178,0,168],
[178,186,171,162,176,184,179,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,158,171,176,162,175,173],
[174,0,190,183,166,180,171,181,181],
[168,150,0,168,151,163,171,188,161],
[182,157,172,0,151,186,171,177,170],
[169,174,189,189,0,169,158,179,192],
[164,160,177,154,171,0,161,167,179],
[178,169,169,169,182,179,0,183,178],
[165,159,152,163,161,173,157,0,160],
[167,159,179,170,148,161,162,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,171,137,160,148,172,159,150],
[195,0,174,148,158,159,185,162,167],
[169,166,0,142,162,152,188,159,166],
[203,192,198,0,195,178,194,178,159],
[180,182,178,145,0,166,188,169,177],
[192,181,188,162,174,0,190,173,173],
[168,155,152,146,152,150,0,146,165],
[181,178,181,162,171,167,194,0,184],
[190,173,174,181,163,167,175,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,163,164,177,175,141,174,173],
[158,0,163,161,158,159,147,164,165],
[177,177,0,154,175,180,142,177,179],
[176,179,186,0,167,176,150,173,170],
[163,182,165,173,0,183,170,151,192],
[165,181,160,164,157,0,156,170,178],
[199,193,198,190,170,184,0,187,188],
[166,176,163,167,189,170,153,0,178],
[167,175,161,170,148,162,152,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,148,165,177,180,167,167,176],
[186,0,170,182,182,185,179,151,184],
[192,170,0,179,185,188,189,163,184],
[175,158,161,0,158,180,163,166,172],
[163,158,155,182,0,183,169,171,181],
[160,155,152,160,157,0,178,150,178],
[173,161,151,177,171,162,0,155,177],
[173,189,177,174,169,190,185,0,187],
[164,156,156,168,159,162,163,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,160,165,190,186,186,168,177],
[163,0,150,167,170,177,159,180,181],
[180,190,0,177,183,183,151,175,171],
[175,173,163,0,169,166,169,168,168],
[150,170,157,171,0,187,165,169,181],
[154,163,157,174,153,0,153,172,171],
[154,181,189,171,175,187,0,181,177],
[172,160,165,172,171,168,159,0,149],
[163,159,169,172,159,169,163,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,156,171,168,160,166,168,166],
[193,0,139,181,190,158,146,174,204],
[184,201,0,171,209,168,175,184,213],
[169,159,169,0,194,176,177,145,203],
[172,150,131,146,0,163,153,164,177],
[180,182,172,164,177,0,164,191,193],
[174,194,165,163,187,176,0,177,211],
[172,166,156,195,176,149,163,0,211],
[174,136,127,137,163,147,129,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,181,176,163,176,146,155,198],
[155,0,175,184,176,161,152,168,199],
[159,165,0,195,143,193,171,137,215],
[164,156,145,0,124,147,146,150,166],
[177,164,197,216,0,157,163,166,202],
[164,179,147,193,183,0,142,166,217],
[194,188,169,194,177,198,0,195,207],
[185,172,203,190,174,174,145,0,197],
[142,141,125,174,138,123,133,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,168,171,177,173,162,156,181],
[178,0,176,169,179,181,186,175,191],
[172,164,0,156,164,172,155,160,171],
[169,171,184,0,179,179,173,176,181],
[163,161,176,161,0,162,168,159,188],
[167,159,168,161,178,0,166,177,175],
[178,154,185,167,172,174,0,175,184],
[184,165,180,164,181,163,165,0,186],
[159,149,169,159,152,165,156,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,180,187,175,167,179,198,164],
[167,0,152,174,164,163,168,175,158],
[160,188,0,181,176,188,177,181,172],
[153,166,159,0,162,156,172,186,177],
[165,176,164,178,0,186,179,195,181],
[173,177,152,184,154,0,165,197,164],
[161,172,163,168,161,175,0,178,179],
[142,165,159,154,145,143,162,0,164],
[176,182,168,163,159,176,161,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,183,171,165,179,181,173,166],
[179,0,167,178,171,187,179,172,183],
[157,173,0,166,154,173,167,169,158],
[169,162,174,0,163,176,174,178,174],
[175,169,186,177,0,165,179,181,179],
[161,153,167,164,175,0,166,166,158],
[159,161,173,166,161,174,0,177,174],
[167,168,171,162,159,174,163,0,169],
[174,157,182,166,161,182,166,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,170,166,186,171,177,187],
[163,0,161,171,184,175,166,185,181],
[166,179,0,165,165,187,182,181,191],
[170,169,175,0,163,176,162,173,179],
[174,156,175,177,0,171,159,176,168],
[154,165,153,164,169,0,156,170,182],
[169,174,158,178,181,184,0,177,183],
[163,155,159,167,164,170,163,0,169],
[153,159,149,161,172,158,157,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,152,155,161,146,157,168,157],
[186,0,174,170,184,186,175,184,163],
[188,166,0,172,187,169,166,180,172],
[185,170,168,0,176,175,182,190,168],
[179,156,153,164,0,163,159,180,165],
[194,154,171,165,177,0,170,182,175],
[183,165,174,158,181,170,0,175,174],
[172,156,160,150,160,158,165,0,163],
[183,177,168,172,175,165,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,243,154,225,119,281,169,58],
[280,0,282,203,290,203,280,243,132],
[97,58,0,168,255,168,139,208,97],
[186,137,172,0,106,136,263,99,136],
[115,50,85,234,0,199,224,189,128],
[221,137,172,204,141,0,311,189,165],
[59,60,201,77,116,29,0,79,107],
[171,97,132,241,151,151,261,0,219],
[282,208,243,204,212,175,233,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,168,179,185,178,174,170],
[166,0,162,148,169,169,156,159,156],
[163,178,0,178,175,184,173,174,169],
[172,192,162,0,179,182,169,178,174],
[161,171,165,161,0,176,176,164,169],
[155,171,156,158,164,0,158,174,158],
[162,184,167,171,164,182,0,177,161],
[166,181,166,162,176,166,163,0,167],
[170,184,171,166,171,182,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,160,172,191,183,188,178,195],
[151,0,164,162,158,177,175,150,180],
[180,176,0,169,194,216,201,179,183],
[168,178,171,0,199,180,155,151,181],
[149,182,146,141,0,157,157,154,161],
[157,163,124,160,183,0,168,159,166],
[152,165,139,185,183,172,0,171,176],
[162,190,161,189,186,181,169,0,200],
[145,160,157,159,179,174,164,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,168,183,190,172,183,176],
[180,0,188,168,177,192,180,181,174],
[167,152,0,170,174,188,184,188,162],
[172,172,170,0,183,193,175,180,174],
[157,163,166,157,0,178,152,167,167],
[150,148,152,147,162,0,147,163,158],
[168,160,156,165,188,193,0,184,171],
[157,159,152,160,173,177,156,0,164],
[164,166,178,166,173,182,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,149,126,122,134,165,129,129],
[194,0,153,177,143,190,142,190,144],
[191,187,0,209,162,215,233,230,149],
[214,163,131,0,126,138,153,168,156],
[218,197,178,214,0,159,192,206,171],
[206,150,125,202,181,0,168,195,131],
[175,198,107,187,148,172,0,181,119],
[211,150,110,172,134,145,159,0,158],
[211,196,191,184,169,209,221,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,169,165,178,163,164,168],
[177,0,180,168,184,178,167,167,177],
[167,160,0,158,160,180,161,158,161],
[171,172,182,0,166,178,168,172,174],
[175,156,180,174,0,168,154,163,168],
[162,162,160,162,172,0,154,167,170],
[177,173,179,172,186,186,0,167,174],
[176,173,182,168,177,173,173,0,179],
[172,163,179,166,172,170,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,154,163,175,170,162,156,186],
[184,0,172,166,176,170,163,186,188],
[186,168,0,172,171,170,166,175,173],
[177,174,168,0,180,179,183,170,176],
[165,164,169,160,0,182,186,155,178],
[170,170,170,161,158,0,173,188,174],
[178,177,174,157,154,167,0,165,178],
[184,154,165,170,185,152,175,0,174],
[154,152,167,164,162,166,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,197,172,169,178,143,159,157],
[183,0,170,193,159,169,149,175,161],
[143,170,0,179,150,158,146,172,167],
[168,147,161,0,159,164,133,147,161],
[171,181,190,181,0,201,161,171,174],
[162,171,182,176,139,0,129,169,166],
[197,191,194,207,179,211,0,183,167],
[181,165,168,193,169,171,157,0,157],
[183,179,173,179,166,174,173,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,169,154,182,156,179,171],
[173,0,176,172,166,157,167,182,191],
[169,164,0,162,158,163,155,177,172],
[171,168,178,0,167,146,180,179,163],
[186,174,182,173,0,169,153,185,176],
[158,183,177,194,171,0,182,178,183],
[184,173,185,160,187,158,0,183,192],
[161,158,163,161,155,162,157,0,179],
[169,149,168,177,164,157,148,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,165,195,175,178,184,184],
[173,0,182,165,200,194,172,179,169],
[173,158,0,183,194,195,184,193,183],
[175,175,157,0,188,185,170,177,179],
[145,140,146,152,0,172,137,158,150],
[165,146,145,155,168,0,168,186,167],
[162,168,156,170,203,172,0,181,189],
[156,161,147,163,182,154,159,0,177],
[156,171,157,161,190,173,151,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,164,165,138,178,181,173],
[169,0,165,177,161,168,180,179,165],
[174,175,0,160,166,163,164,175,164],
[176,163,180,0,164,150,181,171,162],
[175,179,174,176,0,169,195,195,179],
[202,172,177,190,171,0,188,191,168],
[162,160,176,159,145,152,0,178,168],
[159,161,165,169,145,149,162,0,162],
[167,175,176,178,161,172,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,168,160,180,174,156,177],
[169,0,174,171,177,164,157,138,145],
[165,166,0,169,171,172,150,149,160],
[172,169,171,0,170,139,162,138,174],
[180,163,169,170,0,141,148,177,176],
[160,176,168,201,199,0,161,176,183],
[166,183,190,178,192,179,0,148,171],
[184,202,191,202,163,164,192,0,190],
[163,195,180,166,164,157,169,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,188,172,194,186,175,186,160],
[148,0,171,169,171,170,155,168,159],
[152,169,0,149,172,163,163,157,164],
[168,171,191,0,186,195,186,187,170],
[146,169,168,154,0,158,159,168,170],
[154,170,177,145,182,0,168,165,177],
[165,185,177,154,181,172,0,186,179],
[154,172,183,153,172,175,154,0,169],
[180,181,176,170,170,163,161,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,207,160,203,146,183,201,191],
[194,0,201,164,204,203,219,230,210],
[133,139,0,158,147,130,164,173,192],
[180,176,182,0,166,159,178,165,162],
[137,136,193,174,0,136,167,154,169],
[194,137,210,181,204,0,156,163,180],
[157,121,176,162,173,184,0,174,161],
[139,110,167,175,186,177,166,0,163],
[149,130,148,178,171,160,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,167,159,150,163,161,155,161],
[189,0,193,181,174,187,172,174,169],
[173,147,0,169,162,167,156,160,169],
[181,159,171,0,163,180,174,165,171],
[190,166,178,177,0,189,170,175,176],
[177,153,173,160,151,0,158,162,158],
[179,168,184,166,170,182,0,158,169],
[185,166,180,175,165,178,182,0,172],
[179,171,171,169,164,182,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,166,167,174,161,167,168,168],
[153,0,148,137,154,148,157,151,155],
[174,192,0,167,172,160,165,164,172],
[173,203,173,0,187,169,173,177,176],
[166,186,168,153,0,164,169,165,153],
[179,192,180,171,176,0,174,174,169],
[173,183,175,167,171,166,0,170,158],
[172,189,176,163,175,166,170,0,175],
[172,185,168,164,187,171,182,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,196,152,162,181,175,147,172],
[170,0,171,152,169,181,173,151,183],
[144,169,0,139,162,195,180,141,169],
[188,188,201,0,195,192,198,167,203],
[178,171,178,145,0,183,174,174,187],
[159,159,145,148,157,0,160,121,162],
[165,167,160,142,166,180,0,160,157],
[193,189,199,173,166,219,180,0,184],
[168,157,171,137,153,178,183,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,174,169,166,174,161,177,161],
[186,0,168,162,173,194,170,162,169],
[166,172,0,158,179,184,177,171,169],
[171,178,182,0,169,186,162,154,162],
[174,167,161,171,0,181,172,161,179],
[166,146,156,154,159,0,158,148,150],
[179,170,163,178,168,182,0,151,171],
[163,178,169,186,179,192,189,0,173],
[179,171,171,178,161,190,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,183,171,187,166,178,170],
[160,0,162,162,162,168,155,169,154],
[161,178,0,177,174,195,167,181,160],
[157,178,163,0,164,186,162,178,157],
[169,178,166,176,0,178,162,169,165],
[153,172,145,154,162,0,144,149,147],
[174,185,173,178,178,196,0,176,169],
[162,171,159,162,171,191,164,0,158],
[170,186,180,183,175,193,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,180,179,170,163,178,182],
[165,0,174,179,177,176,167,167,169],
[171,166,0,176,178,148,156,167,173],
[160,161,164,0,161,155,162,165,163],
[161,163,162,179,0,156,168,175,181],
[170,164,192,185,184,0,185,178,187],
[177,173,184,178,172,155,0,170,176],
[162,173,173,175,165,162,170,0,177],
[158,171,167,177,159,153,164,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,184,157,168,166,173,163],
[168,0,181,171,160,172,172,181,169],
[164,159,0,171,162,170,173,172,162],
[156,169,169,0,157,162,157,167,154],
[183,180,178,183,0,170,173,176,170],
[172,168,170,178,170,0,171,178,164],
[174,168,167,183,167,169,0,175,167],
[167,159,168,173,164,162,165,0,170],
[177,171,178,186,170,176,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,165,162,167,165,167,175],
[178,0,174,170,172,183,172,179,186],
[175,166,0,165,173,182,171,181,184],
[175,170,175,0,170,180,177,175,179],
[178,168,167,170,0,176,158,168,174],
[173,157,158,160,164,0,165,179,174],
[175,168,169,163,182,175,0,178,182],
[173,161,159,165,172,161,162,0,177],
[165,154,156,161,166,166,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,149,177,160,140,140,164,156],
[137,0,117,154,143,155,128,149,149],
[191,223,0,170,177,158,163,185,169],
[163,186,170,0,164,192,174,186,187],
[180,197,163,176,0,164,159,189,182],
[200,185,182,148,176,0,183,185,183],
[200,212,177,166,181,157,0,183,177],
[176,191,155,154,151,155,157,0,152],
[184,191,171,153,158,157,163,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,181,172,178,170,182,173,171],
[175,0,179,163,179,169,179,167,159],
[159,161,0,188,172,155,171,157,167],
[168,177,152,0,164,154,179,158,165],
[162,161,168,176,0,169,162,160,163],
[170,171,185,186,171,0,185,169,181],
[158,161,169,161,178,155,0,169,154],
[167,173,183,182,180,171,171,0,172],
[169,181,173,175,177,159,186,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,161,201,186,179,164,186,182],
[165,0,190,170,184,159,164,187,176],
[179,150,0,157,177,164,162,161,172],
[139,170,183,0,162,160,164,162,172],
[154,156,163,178,0,168,165,160,155],
[161,181,176,180,172,0,180,176,176],
[176,176,178,176,175,160,0,162,167],
[154,153,179,178,180,164,178,0,192],
[158,164,168,168,185,164,173,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,176,172,179,169,183,169,183],
[131,0,153,175,164,150,158,152,174],
[164,187,0,189,167,176,206,174,157],
[168,165,151,0,184,154,174,166,139],
[161,176,173,156,0,177,174,140,160],
[171,190,164,186,163,0,157,182,146],
[157,182,134,166,166,183,0,166,171],
[171,188,166,174,200,158,174,0,150],
[157,166,183,201,180,194,169,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,153,143,154,154,152,159],
[170,0,163,151,160,175,168,163,168],
[183,177,0,165,174,170,162,166,177],
[187,189,175,0,168,179,173,186,180],
[197,180,166,172,0,184,175,186,171],
[186,165,170,161,156,0,166,170,165],
[186,172,178,167,165,174,0,169,167],
[188,177,174,154,154,170,171,0,165],
[181,172,163,160,169,175,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,181,170,171,154,150,176,176],
[180,0,169,163,167,148,170,157,172],
[159,171,0,173,169,150,152,157,157],
[170,177,167,0,170,172,177,163,187],
[169,173,171,170,0,170,158,161,175],
[186,192,190,168,170,0,188,176,194],
[190,170,188,163,182,152,0,177,192],
[164,183,183,177,179,164,163,0,182],
[164,168,183,153,165,146,148,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,172,174,162,159,178,171],
[168,0,173,171,170,163,169,168,175],
[157,167,0,147,168,154,160,160,154],
[168,169,193,0,180,169,176,178,166],
[166,170,172,160,0,165,166,163,180],
[178,177,186,171,175,0,166,169,187],
[181,171,180,164,174,174,0,180,167],
[162,172,180,162,177,171,160,0,172],
[169,165,186,174,160,153,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,174,182,167,170,177,163],
[169,0,177,180,187,161,178,176,175],
[169,163,0,176,175,163,162,164,175],
[166,160,164,0,179,172,171,178,168],
[158,153,165,161,0,156,164,168,149],
[173,179,177,168,184,0,174,180,172],
[170,162,178,169,176,166,0,182,165],
[163,164,176,162,172,160,158,0,164],
[177,165,165,172,191,168,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,158,142,161,178,176,176,177],
[146,0,146,169,164,180,176,180,160],
[182,194,0,149,177,184,194,183,178],
[198,171,191,0,167,235,212,186,193],
[179,176,163,173,0,216,203,185,170],
[162,160,156,105,124,0,164,164,175],
[164,164,146,128,137,176,0,153,147],
[164,160,157,154,155,176,187,0,165],
[163,180,162,147,170,165,193,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,162,171,150,185,155,149,146],
[191,0,174,167,175,186,166,166,175],
[178,166,0,149,159,202,153,172,155],
[169,173,191,0,143,201,188,154,133],
[190,165,181,197,0,204,150,159,160],
[155,154,138,139,136,0,159,142,147],
[185,174,187,152,190,181,0,184,164],
[191,174,168,186,181,198,156,0,138],
[194,165,185,207,180,193,176,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,207,97,195,243,243,228,185],
[149,0,149,101,89,186,137,280,149],
[133,191,0,134,89,195,191,228,185],
[243,239,206,0,206,291,158,239,233],
[145,251,251,134,0,255,203,276,197],
[97,154,145,49,85,0,143,276,185],
[97,203,149,182,137,197,0,228,197],
[112,60,112,101,64,64,112,0,197],
[155,191,155,107,143,155,143,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,163,158,151,139,145,154,169],
[201,0,184,175,173,173,170,179,193],
[177,156,0,166,157,146,150,163,174],
[182,165,174,0,160,158,166,163,172],
[189,167,183,180,0,161,168,176,190],
[201,167,194,182,179,0,182,193,198],
[195,170,190,174,172,158,0,184,175],
[186,161,177,177,164,147,156,0,177],
[171,147,166,168,150,142,165,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,171,159,151,175,162,181,153],
[176,0,178,193,180,167,179,175,174],
[169,162,0,174,185,188,172,188,165],
[181,147,166,0,156,159,165,170,158],
[189,160,155,184,0,162,173,182,161],
[165,173,152,181,178,0,190,177,174],
[178,161,168,175,167,150,0,173,157],
[159,165,152,170,158,163,167,0,151],
[187,166,175,182,179,166,183,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,160,130,99,195,138,184,150],
[218,0,245,138,152,243,160,153,144],
[180,95,0,146,134,188,195,177,134],
[210,202,194,0,163,226,142,215,178],
[241,188,206,177,0,255,156,242,233],
[145,97,152,114,85,0,131,176,131],
[202,180,145,198,184,209,0,157,170],
[156,187,163,125,98,164,183,0,146],
[190,196,206,162,107,209,170,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,175,171,187,180,156,168,170],
[153,0,160,159,167,156,156,151,163],
[165,180,0,172,180,165,174,163,167],
[169,181,168,0,185,178,170,158,172],
[153,173,160,155,0,179,155,145,168],
[160,184,175,162,161,0,162,152,169],
[184,184,166,170,185,178,0,181,172],
[172,189,177,182,195,188,159,0,177],
[170,177,173,168,172,171,168,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,155,194,135,159,185,175,141],
[170,0,159,177,165,153,181,155,131],
[185,181,0,209,181,184,214,194,163],
[146,163,131,0,134,157,170,146,138],
[205,175,159,206,0,169,206,166,145],
[181,187,156,183,171,0,186,181,154],
[155,159,126,170,134,154,0,143,130],
[165,185,146,194,174,159,197,0,173],
[199,209,177,202,195,186,210,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,183,191,160,160,153,181],
[180,0,170,187,187,178,165,181,194],
[163,170,0,170,187,163,162,153,183],
[157,153,170,0,169,148,146,169,164],
[149,153,153,171,0,144,147,164,165],
[180,162,177,192,196,0,159,178,183],
[180,175,178,194,193,181,0,168,193],
[187,159,187,171,176,162,172,0,194],
[159,146,157,176,175,157,147,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,177,161,170,150,164,197],
[177,0,169,165,153,187,145,153,178],
[161,171,0,173,170,190,176,172,183],
[163,175,167,0,159,180,157,179,167],
[179,187,170,181,0,185,167,177,192],
[170,153,150,160,155,0,138,162,163],
[190,195,164,183,173,202,0,178,191],
[176,187,168,161,163,178,162,0,181],
[143,162,157,173,148,177,149,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,181,183,162,196,186,174,187],
[160,0,159,166,163,166,180,158,166],
[159,181,0,185,169,187,180,151,162],
[157,174,155,0,163,170,180,163,163],
[178,177,171,177,0,185,189,173,170],
[144,174,153,170,155,0,161,138,167],
[154,160,160,160,151,179,0,153,148],
[166,182,189,177,167,202,187,0,179],
[153,174,178,177,170,173,192,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,181,176,161,178,175,160],
[162,0,162,161,178,157,174,167,163],
[173,178,0,174,181,170,189,186,176],
[159,179,166,0,178,159,179,179,169],
[164,162,159,162,0,161,173,160,166],
[179,183,170,181,179,0,182,177,176],
[162,166,151,161,167,158,0,173,156],
[165,173,154,161,180,163,167,0,163],
[180,177,164,171,174,164,184,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,202,194,170,190,146,201,185],
[168,0,184,155,166,176,142,179,169],
[138,156,0,171,165,172,159,196,145],
[146,185,169,0,166,197,144,189,160],
[170,174,175,174,0,182,160,189,163],
[150,164,168,143,158,0,174,182,138],
[194,198,181,196,180,166,0,188,174],
[139,161,144,151,151,158,152,0,166],
[155,171,195,180,177,202,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,181,147,170,175,166,171,162],
[115,0,157,141,144,136,133,113,147],
[159,183,0,136,160,161,149,154,149],
[193,199,204,0,205,153,171,187,170],
[170,196,180,135,0,132,157,155,167],
[165,204,179,187,208,0,159,189,161],
[174,207,191,169,183,181,0,171,160],
[169,227,186,153,185,151,169,0,163],
[178,193,191,170,173,179,180,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,151,164,144,170,173,155],
[158,0,176,165,173,152,161,155,165],
[169,164,0,141,196,161,165,179,182],
[189,175,199,0,172,181,162,168,181],
[176,167,144,168,0,152,153,146,188],
[196,188,179,159,188,0,173,189,206],
[170,179,175,178,187,167,0,169,191],
[167,185,161,172,194,151,171,0,189],
[185,175,158,159,152,134,149,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,166,207,244,198,153,189,232],
[122,0,141,204,165,159,149,151,175],
[174,199,0,207,169,177,172,155,187],
[133,136,133,0,171,138,154,140,153],
[96,175,171,169,0,125,128,151,144],
[142,181,163,202,215,0,152,183,216],
[187,191,168,186,212,188,0,195,214],
[151,189,185,200,189,157,145,0,159],
[108,165,153,187,196,124,126,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,172,173,163,182,170,175,171],
[142,0,156,153,150,159,157,175,157],
[168,184,0,160,158,173,160,152,180],
[167,187,180,0,175,174,175,156,188],
[177,190,182,165,0,171,188,176,183],
[158,181,167,166,169,0,181,156,170],
[170,183,180,165,152,159,0,150,166],
[165,165,188,184,164,184,190,0,159],
[169,183,160,152,157,170,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,154,167,165,167,152,163,179],
[175,0,172,173,164,182,151,172,175],
[186,168,0,178,177,174,174,177,169],
[173,167,162,0,154,181,124,167,161],
[175,176,163,186,0,169,152,169,188],
[173,158,166,159,171,0,147,159,154],
[188,189,166,216,188,193,0,205,206],
[177,168,163,173,171,181,135,0,198],
[161,165,171,179,152,186,134,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,142,164,160,161,156,164,168],
[172,0,148,149,156,163,157,157,153],
[198,192,0,170,177,164,154,191,191],
[176,191,170,0,166,161,176,181,170],
[180,184,163,174,0,166,161,186,165],
[179,177,176,179,174,0,159,190,185],
[184,183,186,164,179,181,0,198,179],
[176,183,149,159,154,150,142,0,170],
[172,187,149,170,175,155,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,194,189,176,188,170,178],
[163,0,165,171,167,173,169,171,171],
[168,175,0,186,175,179,184,178,170],
[146,169,154,0,147,167,169,167,151],
[151,173,165,193,0,179,184,167,182],
[164,167,161,173,161,0,160,168,157],
[152,171,156,171,156,180,0,164,160],
[170,169,162,173,173,172,176,0,156],
[162,169,170,189,158,183,180,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,178,167,150,180,198,185,158],
[147,0,156,160,148,159,165,155,142],
[162,184,0,174,165,167,167,167,170],
[173,180,166,0,153,161,164,169,135],
[190,192,175,187,0,154,172,167,186],
[160,181,173,179,186,0,186,184,190],
[142,175,173,176,168,154,0,189,162],
[155,185,173,171,173,156,151,0,169],
[182,198,170,205,154,150,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,148,189,176,155,180,172,182],
[171,0,178,205,161,174,181,198,196],
[192,162,0,191,188,189,214,201,205],
[151,135,149,0,140,149,166,155,171],
[164,179,152,200,0,187,179,192,209],
[185,166,151,191,153,0,174,174,187],
[160,159,126,174,161,166,0,178,175],
[168,142,139,185,148,166,162,0,188],
[158,144,135,169,131,153,165,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,155,153,141,153,139,165,165],
[164,0,154,170,146,171,167,170,173],
[185,186,0,165,172,177,173,180,186],
[187,170,175,0,167,181,162,186,174],
[199,194,168,173,0,192,209,181,169],
[187,169,163,159,148,0,167,171,168],
[201,173,167,178,131,173,0,178,174],
[175,170,160,154,159,169,162,0,175],
[175,167,154,166,171,172,166,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,196,169,179,191,177,175,179],
[166,0,184,178,172,199,175,188,174],
[144,156,0,168,171,173,155,165,163],
[171,162,172,0,181,178,167,177,185],
[161,168,169,159,0,189,168,160,182],
[149,141,167,162,151,0,159,181,161],
[163,165,185,173,172,181,0,175,161],
[165,152,175,163,180,159,165,0,168],
[161,166,177,155,158,179,179,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,175,161,169,171,167,169],
[175,0,169,175,176,175,179,178,176],
[173,171,0,170,167,166,179,165,173],
[165,165,170,0,167,160,161,158,172],
[179,164,173,173,0,173,180,175,173],
[171,165,174,180,167,0,172,158,168],
[169,161,161,179,160,168,0,170,169],
[173,162,175,182,165,182,170,0,174],
[171,164,167,168,167,172,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,214,141,175,155,254,188,217],
[191,0,204,161,154,195,220,223,209],
[126,136,0,116,128,149,139,117,161],
[199,179,224,0,159,161,184,165,176],
[165,186,212,181,0,231,228,203,227],
[185,145,191,179,109,0,213,211,207],
[86,120,201,156,112,127,0,138,159],
[152,117,223,175,137,129,202,0,165],
[123,131,179,164,113,133,181,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,158,205,190,177,166,201,204],
[171,0,169,181,232,177,189,166,195],
[182,171,0,195,202,177,171,152,196],
[135,159,145,0,183,183,180,170,161],
[150,108,138,157,0,152,176,165,176],
[163,163,163,157,188,0,152,192,174],
[174,151,169,160,164,188,0,155,168],
[139,174,188,170,175,148,185,0,139],
[136,145,144,179,164,166,172,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,178,181,161,133,167,174,181],
[144,0,186,169,180,139,147,168,175],
[162,154,0,183,194,155,174,181,186],
[159,171,157,0,159,148,166,150,154],
[179,160,146,181,0,155,179,162,188],
[207,201,185,192,185,0,170,184,184],
[173,193,166,174,161,170,0,173,175],
[166,172,159,190,178,156,167,0,155],
[159,165,154,186,152,156,165,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,154,194,208,166,176,174,183],
[163,0,151,159,166,150,155,163,138],
[186,189,0,210,189,184,165,153,176],
[146,181,130,0,154,130,151,150,158],
[132,174,151,186,0,151,145,135,144],
[174,190,156,210,189,0,152,179,144],
[164,185,175,189,195,188,0,176,167],
[166,177,187,190,205,161,164,0,167],
[157,202,164,182,196,196,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,102,249,102,102,171,171],
[238,0,124,124,271,124,169,91,91],
[238,216,0,147,147,169,147,238,91],
[238,216,193,0,271,22,216,91,91],
[91,69,193,69,0,91,69,91,91],
[238,216,171,318,249,0,216,216,69],
[238,171,193,124,271,124,0,91,193],
[169,249,102,249,249,124,249,0,102],
[169,249,249,249,249,271,147,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,163,159,156,167,170,180],
[170,0,155,165,171,162,160,174,178],
[183,185,0,181,165,169,175,188,191],
[177,175,159,0,154,163,158,181,174],
[181,169,175,186,0,170,170,198,186],
[184,178,171,177,170,0,184,191,193],
[173,180,165,182,170,156,0,182,173],
[170,166,152,159,142,149,158,0,169],
[160,162,149,166,154,147,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,162,155,148,141,157,167,162],
[187,0,195,173,170,174,161,177,186],
[178,145,0,166,159,159,162,165,176],
[185,167,174,0,166,161,155,177,174],
[192,170,181,174,0,152,158,175,173],
[199,166,181,179,188,0,182,187,175],
[183,179,178,185,182,158,0,188,170],
[173,163,175,163,165,153,152,0,160],
[178,154,164,166,167,165,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,206,198,186,187,186,191,191],
[170,0,190,201,159,180,174,190,178],
[134,150,0,158,181,149,162,189,160],
[142,139,182,0,166,144,184,176,148],
[154,181,159,174,0,146,187,189,170],
[153,160,191,196,194,0,206,178,163],
[154,166,178,156,153,134,0,182,160],
[149,150,151,164,151,162,158,0,171],
[149,162,180,192,170,177,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,219,159,155,170,163,199,229],
[153,0,223,163,198,221,161,186,216],
[121,117,0,114,168,148,124,144,185],
[181,177,226,0,205,192,170,146,217],
[185,142,172,135,0,221,173,197,193],
[170,119,192,148,119,0,192,148,212],
[177,179,216,170,167,148,0,179,229],
[141,154,196,194,143,192,161,0,227],
[111,124,155,123,147,128,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,194,165,161,146,197,195,170],
[160,0,148,110,155,127,190,142,124],
[146,192,0,147,153,173,179,179,132],
[175,230,193,0,177,177,193,163,149],
[179,185,187,163,0,158,199,162,178],
[194,213,167,163,182,0,186,180,153],
[143,150,161,147,141,154,0,173,144],
[145,198,161,177,178,160,167,0,146],
[170,216,208,191,162,187,196,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,161,176,176,196,190,167,167],
[178,0,171,209,166,193,204,173,183],
[179,169,0,181,150,173,192,161,192],
[164,131,159,0,141,154,177,142,174],
[164,174,190,199,0,182,208,181,178],
[144,147,167,186,158,0,180,143,169],
[150,136,148,163,132,160,0,148,138],
[173,167,179,198,159,197,192,0,191],
[173,157,148,166,162,171,202,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,176,173,181,183,193,177],
[172,0,166,190,158,164,177,172,162],
[166,174,0,178,173,183,185,172,171],
[164,150,162,0,163,180,168,172,159],
[167,182,167,177,0,193,187,184,186],
[159,176,157,160,147,0,162,173,166],
[157,163,155,172,153,178,0,179,161],
[147,168,168,168,156,167,161,0,159],
[163,178,169,181,154,174,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,154,166,174,159,179,171],
[171,0,176,169,175,179,165,175,168],
[180,164,0,157,169,174,170,165,198],
[186,171,183,0,180,192,169,184,184],
[174,165,171,160,0,184,167,162,170],
[166,161,166,148,156,0,161,165,180],
[181,175,170,171,173,179,0,180,189],
[161,165,175,156,178,175,160,0,176],
[169,172,142,156,170,160,151,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,170,180,172,177,182,183],
[165,0,188,175,182,168,181,181,179],
[166,152,0,177,176,179,186,184,185],
[170,165,163,0,172,157,169,173,171],
[160,158,164,168,0,151,163,173,165],
[168,172,161,183,189,0,150,189,181],
[163,159,154,171,177,190,0,178,170],
[158,159,156,167,167,151,162,0,164],
[157,161,155,169,175,159,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,163,157,163,164,157,165,177],
[155,0,147,142,147,160,152,168,158],
[177,193,0,181,165,175,178,167,180],
[183,198,159,0,166,184,161,166,183],
[177,193,175,174,0,170,183,174,181],
[176,180,165,156,170,0,163,166,175],
[183,188,162,179,157,177,0,189,176],
[175,172,173,174,166,174,151,0,176],
[163,182,160,157,159,165,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,176,165,175,190,164,185],
[179,0,159,181,167,184,171,158,192],
[164,181,0,172,154,168,181,155,174],
[164,159,168,0,142,177,194,156,162],
[175,173,186,198,0,177,206,170,171],
[165,156,172,163,163,0,175,160,133],
[150,169,159,146,134,165,0,152,143],
[176,182,185,184,170,180,188,0,173],
[155,148,166,178,169,207,197,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,187,196,197,182,178,184,196],
[175,0,182,185,175,169,183,171,178],
[153,158,0,176,164,160,165,153,159],
[144,155,164,0,165,158,163,163,156],
[143,165,176,175,0,158,165,158,167],
[158,171,180,182,182,0,170,165,185],
[162,157,175,177,175,170,0,156,169],
[156,169,187,177,182,175,184,0,161],
[144,162,181,184,173,155,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,186,161,167,136,98,170,180],
[189,0,207,241,247,141,188,246,225],
[154,133,0,218,165,114,95,182,221],
[179,99,122,0,117,131,68,164,131],
[173,93,175,223,0,126,186,231,200],
[204,199,226,209,214,0,160,182,238],
[242,152,245,272,154,180,0,201,222],
[170,94,158,176,109,158,139,0,176],
[160,115,119,209,140,102,118,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,165,173,193,175,167,175],
[162,0,145,163,164,171,162,167,183],
[168,195,0,176,176,194,177,174,190],
[175,177,164,0,174,185,180,169,187],
[167,176,164,166,0,195,176,173,178],
[147,169,146,155,145,0,154,162,174],
[165,178,163,160,164,186,0,161,178],
[173,173,166,171,167,178,179,0,178],
[165,157,150,153,162,166,162,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,151,123,153,112,133,214,130],
[186,0,154,144,146,142,135,238,150],
[189,186,0,171,170,144,159,204,179],
[217,196,169,0,167,147,179,222,160],
[187,194,170,173,0,170,173,229,160],
[228,198,196,193,170,0,189,239,203],
[207,205,181,161,167,151,0,245,163],
[126,102,136,118,111,101,95,0,101],
[210,190,161,180,180,137,177,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,153,157,186,172,181,171,177],
[163,0,152,168,172,179,173,164,178],
[187,188,0,179,174,174,178,166,188],
[183,172,161,0,175,180,168,177,180],
[154,168,166,165,0,178,182,166,170],
[168,161,166,160,162,0,170,174,168],
[159,167,162,172,158,170,0,175,177],
[169,176,174,163,174,166,165,0,171],
[163,162,152,160,170,172,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,147,178,168,214,186,173,167],
[201,0,168,164,234,216,195,198,167],
[193,172,0,165,230,212,199,175,170],
[162,176,175,0,203,199,180,168,161],
[172,106,110,137,0,190,161,145,138],
[126,124,128,141,150,0,142,155,130],
[154,145,141,160,179,198,0,143,156],
[167,142,165,172,195,185,197,0,137],
[173,173,170,179,202,210,184,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,173,175,179,183,187,171],
[175,0,169,185,186,164,190,173,187],
[171,171,0,174,167,159,178,159,169],
[167,155,166,0,193,161,177,157,156],
[165,154,173,147,0,170,163,153,164],
[161,176,181,179,170,0,183,177,167],
[157,150,162,163,177,157,0,163,141],
[153,167,181,183,187,163,177,0,166],
[169,153,171,184,176,173,199,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,172,152,188,197,166,167,168],
[133,0,144,124,151,129,128,127,123],
[168,196,0,149,186,146,179,169,149],
[188,216,191,0,184,145,174,163,161],
[152,189,154,156,0,132,172,155,147],
[143,211,194,195,208,0,170,169,173],
[174,212,161,166,168,170,0,169,148],
[173,213,171,177,185,171,171,0,166],
[172,217,191,179,193,167,192,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,147,153,200,163,160,150],
[172,0,194,171,167,196,160,182,178],
[172,146,0,146,150,191,114,166,175],
[193,169,194,0,168,189,168,209,194],
[187,173,190,172,0,197,166,148,161],
[140,144,149,151,143,0,150,126,156],
[177,180,226,172,174,190,0,167,187],
[180,158,174,131,192,214,173,0,172],
[190,162,165,146,179,184,153,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,171,177,162,164,158,180,158],
[163,0,167,185,172,178,166,179,191],
[169,173,0,179,173,156,149,184,171],
[163,155,161,0,168,179,177,171,178],
[178,168,167,172,0,171,161,177,171],
[176,162,184,161,169,0,160,179,172],
[182,174,191,163,179,180,0,181,178],
[160,161,156,169,163,161,159,0,158],
[182,149,169,162,169,168,162,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,143,234,160,214,244,190,196],
[142,0,130,188,145,226,190,126,207],
[197,210,0,238,252,299,169,153,224],
[106,152,102,0,171,156,229,182,204],
[180,195,88,169,0,129,152,219,220],
[126,114,41,184,211,0,115,140,141],
[96,150,171,111,188,225,0,148,155],
[150,214,187,158,121,200,192,0,225],
[144,133,116,136,120,199,185,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,167,165,168,171,154,164],
[173,0,168,159,162,171,178,157,146],
[179,172,0,181,172,177,171,173,153],
[173,181,159,0,166,165,184,172,169],
[175,178,168,174,0,177,179,159,162],
[172,169,163,175,163,0,182,163,169],
[169,162,169,156,161,158,0,158,144],
[186,183,167,168,181,177,182,0,170],
[176,194,187,171,178,171,196,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,141,158,160,152,147,183,152],
[178,0,172,157,168,150,164,183,166],
[199,168,0,172,176,163,187,194,168],
[182,183,168,0,169,182,183,183,172],
[180,172,164,171,0,168,166,203,179],
[188,190,177,158,172,0,185,188,186],
[193,176,153,157,174,155,0,189,174],
[157,157,146,157,137,152,151,0,162],
[188,174,172,168,161,154,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,153,170,173,161,178,173,180],
[177,0,173,188,177,184,177,160,177],
[187,167,0,168,185,155,180,167,175],
[170,152,172,0,189,178,156,181,184],
[167,163,155,151,0,178,179,158,155],
[179,156,185,162,162,0,190,163,153],
[162,163,160,184,161,150,0,170,168],
[167,180,173,159,182,177,170,0,167],
[160,163,165,156,185,187,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,155,176,183,176,170,158],
[170,0,176,174,170,173,169,168,175],
[167,164,0,172,160,176,163,166,157],
[185,166,168,0,185,193,185,179,181],
[164,170,180,155,0,169,176,171,161],
[157,167,164,147,171,0,170,154,160],
[164,171,177,155,164,170,0,154,166],
[170,172,174,161,169,186,186,0,170],
[182,165,183,159,179,180,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,174,169,182,177,162,167,178],
[157,0,176,173,171,163,165,167,159],
[166,164,0,167,173,165,164,175,142],
[171,167,173,0,195,174,177,161,169],
[158,169,167,145,0,151,165,166,161],
[163,177,175,166,189,0,170,167,181],
[178,175,176,163,175,170,0,178,163],
[173,173,165,179,174,173,162,0,175],
[162,181,198,171,179,159,177,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,182,161,176,164,177,162,158],
[186,0,183,175,186,177,156,166,190],
[158,157,0,151,172,163,151,148,150],
[179,165,189,0,174,170,188,162,181],
[164,154,168,166,0,184,175,171,151],
[176,163,177,170,156,0,154,164,172],
[163,184,189,152,165,186,0,177,161],
[178,174,192,178,169,176,163,0,191],
[182,150,190,159,189,168,179,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,162,168,174,173,167,156],
[170,0,190,196,176,168,175,182,178],
[151,150,0,165,163,154,172,161,152],
[178,144,175,0,173,175,172,167,169],
[172,164,177,167,0,167,181,180,168],
[166,172,186,165,173,0,165,184,194],
[167,165,168,168,159,175,0,167,163],
[173,158,179,173,160,156,173,0,171],
[184,162,188,171,172,146,177,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,181,161,160,163,171,169,169],
[172,0,187,167,172,173,164,172,167],
[159,153,0,148,157,147,175,164,160],
[179,173,192,0,170,171,180,182,173],
[180,168,183,170,0,158,179,173,177],
[177,167,193,169,182,0,183,187,184],
[169,176,165,160,161,157,0,161,158],
[171,168,176,158,167,153,179,0,161],
[171,173,180,167,163,156,182,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,128,144,133,132,164,161,139],
[234,0,170,201,181,163,198,181,169],
[212,170,0,203,166,154,162,154,169],
[196,139,137,0,162,141,143,166,157],
[207,159,174,178,0,135,172,164,158],
[208,177,186,199,205,0,180,164,163],
[176,142,178,197,168,160,0,168,196],
[179,159,186,174,176,176,172,0,130],
[201,171,171,183,182,177,144,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,145,214,178,155,182,178,162],
[142,0,135,205,155,167,113,141,132],
[195,205,0,194,171,167,152,161,171],
[126,135,146,0,143,117,149,164,146],
[162,185,169,197,0,153,123,189,167],
[185,173,173,223,187,0,122,196,159],
[158,227,188,191,217,218,0,186,174],
[162,199,179,176,151,144,154,0,162],
[178,208,169,194,173,181,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,159,172,171,169,178,176],
[172,0,174,170,179,168,177,154,171],
[161,166,0,166,170,160,150,139,160],
[181,170,174,0,166,173,172,157,185],
[168,161,170,174,0,168,164,158,171],
[169,172,180,167,172,0,168,166,179],
[171,163,190,168,176,172,0,166,181],
[162,186,201,183,182,174,174,0,177],
[164,169,180,155,169,161,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,172,158,176,184,177,191,189],
[149,0,166,160,170,168,174,167,178],
[168,174,0,168,165,185,177,182,170],
[182,180,172,0,170,190,180,187,185],
[164,170,175,170,0,183,169,180,179],
[156,172,155,150,157,0,154,174,151],
[163,166,163,160,171,186,0,172,159],
[149,173,158,153,160,166,168,0,162],
[151,162,170,155,161,189,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,166,189,192,207,196,180,173],
[158,0,166,154,184,171,192,173,168],
[174,174,0,191,185,158,169,184,168],
[151,186,149,0,166,162,176,147,165],
[148,156,155,174,0,162,180,147,142],
[133,169,182,178,178,0,191,156,166],
[144,148,171,164,160,149,0,139,146],
[160,167,156,193,193,184,201,0,161],
[167,172,172,175,198,174,194,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,176,163,181,171,168,160,178],
[145,0,168,145,160,155,144,166,156],
[164,172,0,157,188,157,149,154,168],
[177,195,183,0,183,183,171,158,180],
[159,180,152,157,0,155,151,155,154],
[169,185,183,157,185,0,164,181,169],
[172,196,191,169,189,176,0,177,164],
[180,174,186,182,185,159,163,0,172],
[162,184,172,160,186,171,176,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,189,184,183,169,174,177,184],
[161,0,193,185,166,182,168,173,173],
[151,147,0,166,162,168,153,169,156],
[156,155,174,0,162,165,144,166,175],
[157,174,178,178,0,193,155,169,175],
[171,158,172,175,147,0,150,163,174],
[166,172,187,196,185,190,0,178,196],
[163,167,171,174,171,177,162,0,183],
[156,167,184,165,165,166,144,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,184,156,171,176,192,174],
[166,0,165,166,152,166,181,196,153],
[164,175,0,178,164,168,183,183,171],
[156,174,162,0,161,148,170,181,158],
[184,188,176,179,0,188,178,211,169],
[169,174,172,192,152,0,188,196,186],
[164,159,157,170,162,152,0,178,174],
[148,144,157,159,129,144,162,0,156],
[166,187,169,182,171,154,166,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,131,165,146,166,174,172,205],
[142,0,132,128,118,151,159,158,170],
[209,208,0,161,156,192,150,171,212],
[175,212,179,0,177,188,148,161,192],
[194,222,184,163,0,177,173,172,201],
[174,189,148,152,163,0,174,175,180],
[166,181,190,192,167,166,0,181,192],
[168,182,169,179,168,165,159,0,202],
[135,170,128,148,139,160,148,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,140,167,176,162,182,173],
[172,0,185,175,195,200,165,175,185],
[175,155,0,165,195,179,166,178,178],
[200,165,175,0,200,212,186,193,185],
[173,145,145,140,0,144,181,158,156],
[164,140,161,128,196,0,164,176,158],
[178,175,174,154,159,176,0,157,171],
[158,165,162,147,182,164,183,0,163],
[167,155,162,155,184,182,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,191,198,206,153,189,186],
[166,0,182,175,196,206,176,189,188],
[172,158,0,181,184,196,151,173,189],
[149,165,159,0,186,193,159,174,192],
[142,144,156,154,0,171,133,174,165],
[134,134,144,147,169,0,129,181,177],
[187,164,189,181,207,211,0,227,212],
[151,151,167,166,166,159,113,0,172],
[154,152,151,148,175,163,128,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,171,166,176,163,168,165],
[164,0,164,162,163,173,168,177,174],
[169,176,0,165,165,185,167,163,171],
[169,178,175,0,171,169,186,160,171],
[174,177,175,169,0,166,175,164,161],
[164,167,155,171,174,0,160,168,151],
[177,172,173,154,165,180,0,168,161],
[172,163,177,180,176,172,172,0,157],
[175,166,169,169,179,189,179,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,158,155,175,156,179,168],
[173,0,171,162,167,173,169,168,158],
[172,169,0,164,165,171,169,160,168],
[182,178,176,0,176,192,168,171,191],
[185,173,175,164,0,170,177,178,178],
[165,167,169,148,170,0,169,166,166],
[184,171,171,172,163,171,0,174,179],
[161,172,180,169,162,174,166,0,171],
[172,182,172,149,162,174,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,167,148,148,143,150,153,139],
[192,0,179,178,177,179,173,179,163],
[173,161,0,161,160,165,171,151,135],
[192,162,179,0,148,174,174,161,148],
[192,163,180,192,0,193,187,180,172],
[197,161,175,166,147,0,170,165,170],
[190,167,169,166,153,170,0,159,151],
[187,161,189,179,160,175,181,0,164],
[201,177,205,192,168,170,189,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,123,186,200,180,192,188,98],
[105,0,156,93,157,130,205,176,90],
[217,184,0,130,220,175,215,172,106],
[154,247,210,0,219,299,218,254,223],
[140,183,120,121,0,146,116,192,141],
[160,210,165,41,194,0,178,261,150],
[148,135,125,122,224,162,0,227,111],
[152,164,168,86,148,79,113,0,70],
[242,250,234,117,199,190,229,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,160,145,143,186,173,156],
[171,0,127,162,155,169,190,132,128],
[166,213,0,130,166,168,226,158,187],
[180,178,210,0,172,191,206,172,170],
[195,185,174,168,0,209,214,175,158],
[197,171,172,149,131,0,184,169,139],
[154,150,114,134,126,156,0,113,122],
[167,208,182,168,165,171,227,0,148],
[184,212,153,170,182,201,218,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,160,165,177,167,168,180,165],
[178,0,171,174,167,169,154,172,170],
[180,169,0,179,170,177,163,178,171],
[175,166,161,0,166,169,166,187,171],
[163,173,170,174,0,176,177,183,171],
[173,171,163,171,164,0,159,177,175],
[172,186,177,174,163,181,0,173,174],
[160,168,162,153,157,163,167,0,161],
[175,170,169,169,169,165,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,180,158,176,169,167,161,172],
[172,0,180,164,172,168,164,165,160],
[160,160,0,155,178,167,170,165,155],
[182,176,185,0,188,175,166,167,162],
[164,168,162,152,0,179,160,158,150],
[171,172,173,165,161,0,165,172,149],
[173,176,170,174,180,175,0,179,174],
[179,175,175,173,182,168,161,0,177],
[168,180,185,178,190,191,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,327,236,332,301,144,306,170],
[26,0,119,74,332,205,127,263,31],
[13,221,0,143,247,221,109,170,74],
[104,266,197,0,314,309,109,271,101],
[8,8,93,26,0,43,104,189,5],
[39,135,119,31,297,0,135,194,31],
[196,213,231,231,236,205,0,258,74],
[34,77,170,69,151,146,82,0,74],
[170,309,266,239,335,309,266,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,191,171,171,163,182,178,168],
[173,0,190,174,168,161,168,151,164],
[149,150,0,145,152,167,170,164,155],
[169,166,195,0,164,174,175,145,175],
[169,172,188,176,0,177,178,166,184],
[177,179,173,166,163,0,175,159,177],
[158,172,170,165,162,165,0,174,161],
[162,189,176,195,174,181,166,0,189],
[172,176,185,165,156,163,179,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,198,150,188,111,117,66,74],
[235,0,214,119,196,160,158,103,142],
[142,126,0,149,177,177,173,97,122],
[190,221,191,0,216,156,121,174,162],
[152,144,163,124,0,217,223,127,118],
[229,180,163,184,123,0,202,165,136],
[223,182,167,219,117,138,0,153,150],
[274,237,243,166,213,175,187,0,270],
[266,198,218,178,222,204,190,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,180,152,154,151,167,176,174],
[182,0,174,170,171,175,170,186,194],
[160,166,0,161,152,145,162,166,173],
[188,170,179,0,177,179,178,180,186],
[186,169,188,163,0,165,174,177,193],
[189,165,195,161,175,0,174,185,180],
[173,170,178,162,166,166,0,168,171],
[164,154,174,160,163,155,172,0,190],
[166,146,167,154,147,160,169,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,154,107,137,177,174,179,177],
[155,0,184,187,208,176,235,192,176],
[186,156,0,198,145,182,150,162,145],
[233,153,142,0,199,196,180,224,119],
[203,132,195,141,0,172,167,219,172],
[163,164,158,144,168,0,148,214,116],
[166,105,190,160,173,192,0,172,113],
[161,148,178,116,121,126,168,0,126],
[163,164,195,221,168,224,227,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,189,170,172,169,172,174,173],
[162,0,176,167,168,174,176,163,178],
[151,164,0,154,167,157,173,155,181],
[170,173,186,0,168,174,172,161,171],
[168,172,173,172,0,184,183,171,176],
[171,166,183,166,156,0,191,172,182],
[168,164,167,168,157,149,0,150,156],
[166,177,185,179,169,168,190,0,196],
[167,162,159,169,164,158,184,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,169,164,183,155,191,160],
[156,0,171,161,155,175,149,183,166],
[165,169,0,151,161,174,152,180,164],
[171,179,189,0,173,186,169,181,175],
[176,185,179,167,0,173,173,186,177],
[157,165,166,154,167,0,153,183,164],
[185,191,188,171,167,187,0,182,181],
[149,157,160,159,154,157,158,0,156],
[180,174,176,165,163,176,159,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,160,167,178,177,165,176,184],
[169,0,161,174,186,190,169,167,161],
[180,179,0,168,182,186,170,180,182],
[173,166,172,0,190,188,169,175,186],
[162,154,158,150,0,174,153,150,160],
[163,150,154,152,166,0,146,153,156],
[175,171,170,171,187,194,0,168,181],
[164,173,160,165,190,187,172,0,173],
[156,179,158,154,180,184,159,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,153,161,179,188,182,158,168],
[176,0,175,170,172,190,187,173,176],
[187,165,0,160,164,179,180,172,174],
[179,170,180,0,154,178,171,164,173],
[161,168,176,186,0,176,183,164,175],
[152,150,161,162,164,0,170,151,167],
[158,153,160,169,157,170,0,165,172],
[182,167,168,176,176,189,175,0,173],
[172,164,166,167,165,173,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,159,176,172,155,167,183,178],
[174,0,179,187,175,162,161,185,186],
[181,161,0,161,185,174,178,183,186],
[164,153,179,0,174,158,173,168,185],
[168,165,155,166,0,169,176,174,171],
[185,178,166,182,171,0,173,193,177],
[173,179,162,167,164,167,0,168,180],
[157,155,157,172,166,147,172,0,173],
[162,154,154,155,169,163,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,165,169,164,180,169,183,183],
[165,0,160,167,157,184,155,170,172],
[175,180,0,178,175,189,160,175,180],
[171,173,162,0,156,183,167,177,164],
[176,183,165,184,0,181,178,180,179],
[160,156,151,157,159,0,164,164,155],
[171,185,180,173,162,176,0,169,181],
[157,170,165,163,160,176,171,0,160],
[157,168,160,176,161,185,159,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,161,215,111,145,134,111,189],
[183,0,224,161,177,207,183,223,211],
[179,116,0,164,149,149,175,131,159],
[125,179,176,0,97,180,135,123,176],
[229,163,191,243,0,255,135,127,284],
[195,133,191,160,85,0,186,141,244],
[206,157,165,205,205,154,0,119,231],
[229,117,209,217,213,199,221,0,264],
[151,129,181,164,56,96,109,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,128,120,251,220,191,196,208],
[162,0,201,106,206,138,125,158,201],
[212,139,0,215,201,220,172,204,185],
[220,234,125,0,296,214,175,262,216],
[89,134,139,44,0,153,124,145,86],
[120,202,120,126,187,0,98,173,138],
[149,215,168,165,216,242,0,221,141],
[144,182,136,78,195,167,119,0,162],
[132,139,155,124,254,202,199,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,145,138,179,157,131,199,160],
[189,0,154,188,181,210,160,187,171],
[195,186,0,161,192,186,180,228,181],
[202,152,179,0,177,187,143,197,196],
[161,159,148,163,0,156,138,179,162],
[183,130,154,153,184,0,159,181,189],
[209,180,160,197,202,181,0,204,187],
[141,153,112,143,161,159,136,0,143],
[180,169,159,144,178,151,153,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,148,114,74,85,61,128,116],
[226,0,166,106,145,47,114,201,181],
[192,174,0,158,133,187,159,130,174],
[226,234,182,0,231,145,203,186,229],
[266,195,207,109,0,114,193,172,160],
[255,293,153,195,226,0,180,203,307],
[279,226,181,137,147,160,0,229,193],
[212,139,210,154,168,137,111,0,106],
[224,159,166,111,180,33,147,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,224,182,206,171,155,131],
[172,0,109,128,91,154,131,133,155],
[177,231,0,195,157,209,126,192,207],
[116,212,145,0,114,157,111,146,190],
[158,249,183,226,0,210,159,181,185],
[134,186,131,183,130,0,71,147,157],
[169,209,214,229,181,269,0,141,195],
[185,207,148,194,159,193,199,0,173],
[209,185,133,150,155,183,145,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,187,169,176,181,195,175,192],
[150,0,170,159,157,175,191,162,144],
[153,170,0,156,164,192,163,162,159],
[171,181,184,0,175,178,168,179,164],
[164,183,176,165,0,186,178,162,167],
[159,165,148,162,154,0,177,166,150],
[145,149,177,172,162,163,0,148,151],
[165,178,178,161,178,174,192,0,176],
[148,196,181,176,173,190,189,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,156,168,170,157,162,159,161],
[178,0,179,174,186,177,170,174,168],
[184,161,0,182,178,170,170,166,168],
[172,166,158,0,167,159,163,170,173],
[170,154,162,173,0,158,157,163,157],
[183,163,170,181,182,0,157,164,166],
[178,170,170,177,183,183,0,175,179],
[181,166,174,170,177,176,165,0,167],
[179,172,172,167,183,174,161,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,159,160,160,173,148,166],
[163,0,164,157,159,152,152,162,144],
[168,176,0,153,170,167,153,159,160],
[181,183,187,0,170,176,164,170,187],
[180,181,170,170,0,174,176,176,172],
[180,188,173,164,166,0,164,169,165],
[167,188,187,176,164,176,0,164,178],
[192,178,181,170,164,171,176,0,176],
[174,196,180,153,168,175,162,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,178,170,181,168,178,167],
[165,0,166,161,162,167,154,170,159],
[182,174,0,189,163,183,173,182,175],
[162,179,151,0,156,168,163,165,162],
[170,178,177,184,0,181,167,185,161],
[159,173,157,172,159,0,162,170,154],
[172,186,167,177,173,178,0,184,170],
[162,170,158,175,155,170,156,0,159],
[173,181,165,178,179,186,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,154,171,156,167,179,174,149],
[184,0,176,195,177,179,171,177,166],
[186,164,0,183,165,190,183,185,171],
[169,145,157,0,164,170,158,177,160],
[184,163,175,176,0,190,173,191,170],
[173,161,150,170,150,0,184,162,177],
[161,169,157,182,167,156,0,152,159],
[166,163,155,163,149,178,188,0,157],
[191,174,169,180,170,163,181,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,175,168,176,157,169,151,172],
[185,0,178,171,184,167,186,171,170],
[165,162,0,169,169,174,168,155,151],
[172,169,171,0,165,158,177,143,166],
[164,156,171,175,0,157,169,156,156],
[183,173,166,182,183,0,176,155,183],
[171,154,172,163,171,164,0,151,164],
[189,169,185,197,184,185,189,0,182],
[168,170,189,174,184,157,176,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,177,172,166,175,182,177,165],
[161,0,179,169,158,167,174,174,152],
[163,161,0,165,165,179,182,182,169],
[168,171,175,0,175,178,172,176,175],
[174,182,175,165,0,187,182,172,169],
[165,173,161,162,153,0,173,159,162],
[158,166,158,168,158,167,0,165,164],
[163,166,158,164,168,181,175,0,168],
[175,188,171,165,171,178,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,185,181,173,189,169,175,177],
[159,0,172,182,169,169,165,181,174],
[155,168,0,169,171,178,157,170,173],
[159,158,171,0,161,173,155,162,171],
[167,171,169,179,0,173,164,164,172],
[151,171,162,167,167,0,157,164,166],
[171,175,183,185,176,183,0,165,179],
[165,159,170,178,176,176,175,0,172],
[163,166,167,169,168,174,161,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,156,189,183,174,183,163,166],
[163,0,172,174,194,181,184,177,177],
[184,168,0,159,185,182,175,175,183],
[151,166,181,0,195,160,184,174,176],
[157,146,155,145,0,162,173,159,154],
[166,159,158,180,178,0,174,164,173],
[157,156,165,156,167,166,0,156,172],
[177,163,165,166,181,176,184,0,178],
[174,163,157,164,186,167,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,163,136,163,164,204,138],
[170,0,208,129,134,196,198,224,215],
[179,132,0,165,173,147,152,162,142],
[177,211,175,0,156,212,211,200,181],
[204,206,167,184,0,188,196,211,200],
[177,144,193,128,152,0,188,180,193],
[176,142,188,129,144,152,0,195,184],
[136,116,178,140,129,160,145,0,145],
[202,125,198,159,140,147,156,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,174,196,155,170,179,206,170],
[147,0,152,152,143,162,113,169,147],
[166,188,0,159,144,163,160,168,136],
[144,188,181,0,153,181,148,186,133],
[185,197,196,187,0,148,161,207,171],
[170,178,177,159,192,0,130,196,179],
[161,227,180,192,179,210,0,211,175],
[134,171,172,154,133,144,129,0,114],
[170,193,204,207,169,161,165,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,149,158,161,164,172,160,173],
[173,0,162,140,172,172,165,173,161],
[191,178,0,179,178,171,178,177,170],
[182,200,161,0,183,177,189,189,168],
[179,168,162,157,0,159,171,187,164],
[176,168,169,163,181,0,172,168,178],
[168,175,162,151,169,168,0,159,150],
[180,167,163,151,153,172,181,0,160],
[167,179,170,172,176,162,190,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,169,173,164,170,185,172],
[160,0,161,176,161,158,158,172,167],
[166,179,0,182,173,164,162,169,165],
[171,164,158,0,174,164,156,172,168],
[167,179,167,166,0,171,168,168,181],
[176,182,176,176,169,0,173,173,175],
[170,182,178,184,172,167,0,175,165],
[155,168,171,168,172,167,165,0,158],
[168,173,175,172,159,165,175,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,194,156,174,162,161,166,179],
[169,0,192,181,174,163,155,166,176],
[146,148,0,150,150,138,140,140,160],
[184,159,190,0,180,166,159,184,177],
[166,166,190,160,0,161,166,175,169],
[178,177,202,174,179,0,161,176,182],
[179,185,200,181,174,179,0,186,157],
[174,174,200,156,165,164,154,0,149],
[161,164,180,163,171,158,183,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,167,174,186,187,168,180,195],
[147,0,154,161,152,153,151,158,151],
[173,186,0,167,173,165,154,154,159],
[166,179,173,0,170,163,178,183,186],
[154,188,167,170,0,158,169,168,172],
[153,187,175,177,182,0,180,165,187],
[172,189,186,162,171,160,0,167,172],
[160,182,186,157,172,175,173,0,188],
[145,189,181,154,168,153,168,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,158,178,168,186,162,179,177],
[169,0,151,149,171,163,163,165,186],
[182,189,0,168,169,160,159,170,173],
[162,191,172,0,166,197,172,161,174],
[172,169,171,174,0,172,169,171,191],
[154,177,180,143,168,0,165,164,169],
[178,177,181,168,171,175,0,151,193],
[161,175,170,179,169,176,189,0,162],
[163,154,167,166,149,171,147,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,176,165,150,160,159,160],
[184,0,193,171,167,164,178,180,162],
[178,147,0,179,164,166,152,175,164],
[164,169,161,0,159,149,149,170,150],
[175,173,176,181,0,181,177,166,172],
[190,176,174,191,159,0,171,182,169],
[180,162,188,191,163,169,0,191,166],
[181,160,165,170,174,158,149,0,171],
[180,178,176,190,168,171,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,198,193,203,145,132,252,167],
[153,0,132,220,118,186,143,151,266],
[142,208,0,207,152,192,170,213,166],
[147,120,133,0,157,169,165,147,206],
[137,222,188,183,0,134,152,184,186],
[195,154,148,171,206,0,180,166,172],
[208,197,170,175,188,160,0,173,197],
[88,189,127,193,156,174,167,0,165],
[173,74,174,134,154,168,143,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,151,148,188,175,173,136,178],
[180,0,183,161,180,163,188,176,174],
[189,157,0,172,208,173,167,165,174],
[192,179,168,0,206,166,178,153,205],
[152,160,132,134,0,143,131,135,168],
[165,177,167,174,197,0,169,156,183],
[167,152,173,162,209,171,0,173,198],
[204,164,175,187,205,184,167,0,210],
[162,166,166,135,172,157,142,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,158,149,165,159,162,175],
[157,0,155,179,172,167,167,153,185],
[170,185,0,194,184,184,173,175,177],
[182,161,146,0,172,164,144,163,155],
[191,168,156,168,0,173,177,171,161],
[175,173,156,176,167,0,157,163,170],
[181,173,167,196,163,183,0,168,165],
[178,187,165,177,169,177,172,0,169],
[165,155,163,185,179,170,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,182,170,178,178,180,176],
[166,0,171,178,172,178,174,193,178],
[171,169,0,190,185,173,188,190,188],
[158,162,150,0,162,168,152,160,172],
[170,168,155,178,0,166,165,171,181],
[162,162,167,172,174,0,166,179,185],
[162,166,152,188,175,174,0,161,180],
[160,147,150,180,169,161,179,0,163],
[164,162,152,168,159,155,160,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,153,151,201,135,152,159,155],
[155,0,146,149,185,158,164,151,150],
[187,194,0,169,197,157,164,174,166],
[189,191,171,0,218,177,182,163,176],
[139,155,143,122,0,135,140,124,148],
[205,182,183,163,205,0,174,174,178],
[188,176,176,158,200,166,0,156,173],
[181,189,166,177,216,166,184,0,183],
[185,190,174,164,192,162,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,148,151,157,132,170,169,138],
[142,0,124,156,158,146,189,180,155],
[192,216,0,170,199,170,212,227,171],
[189,184,170,0,159,148,180,202,147],
[183,182,141,181,0,134,198,176,170],
[208,194,170,192,206,0,213,197,189],
[170,151,128,160,142,127,0,184,165],
[171,160,113,138,164,143,156,0,147],
[202,185,169,193,170,151,175,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,340,165,211,118,211,294,93],
[0,0,268,0,46,46,211,0,93],
[0,72,0,0,72,0,72,0,0],
[175,340,340,0,211,46,211,294,93],
[129,294,268,129,0,129,165,129,222],
[222,294,340,294,211,0,165,294,93],
[129,129,268,129,175,175,0,129,222],
[46,340,340,46,211,46,211,0,139],
[247,247,340,247,118,247,118,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,164,181,181,164,186,167,165],
[175,0,157,182,181,177,174,178,167],
[176,183,0,186,196,187,191,168,178],
[159,158,154,0,189,170,178,165,156],
[159,159,144,151,0,169,156,162,155],
[176,163,153,170,171,0,178,161,158],
[154,166,149,162,184,162,0,162,172],
[173,162,172,175,178,179,178,0,162],
[175,173,162,184,185,182,168,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,205,168,185,190,186,185,161],
[154,0,188,170,166,182,177,162,161],
[135,152,0,150,153,169,179,147,156],
[172,170,190,0,159,175,182,162,165],
[155,174,187,181,0,175,170,151,156],
[150,158,171,165,165,0,156,138,146],
[154,163,161,158,170,184,0,170,153],
[155,178,193,178,189,202,170,0,187],
[179,179,184,175,184,194,187,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,169,183,170,176,149,163],
[174,0,169,160,182,186,175,153,164],
[175,171,0,161,173,188,161,151,166],
[171,180,179,0,186,201,175,170,165],
[157,158,167,154,0,183,169,155,154],
[170,154,152,139,157,0,164,149,136],
[164,165,179,165,171,176,0,150,161],
[191,187,189,170,185,191,190,0,171],
[177,176,174,175,186,204,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,165,180,181,172,170,215,184],
[150,0,153,165,155,181,180,171,162],
[175,187,0,175,156,188,176,188,166],
[160,175,165,0,167,160,167,183,141],
[159,185,184,173,0,173,180,186,180],
[168,159,152,180,167,0,158,197,168],
[170,160,164,173,160,182,0,179,170],
[125,169,152,157,154,143,161,0,138],
[156,178,174,199,160,172,170,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,160,169,176,180,164,123,164],
[169,0,158,139,149,138,146,148,155],
[180,182,0,153,167,159,192,173,182],
[171,201,187,0,173,195,180,156,176],
[164,191,173,167,0,184,175,171,181],
[160,202,181,145,156,0,198,161,173],
[176,194,148,160,165,142,0,147,179],
[217,192,167,184,169,179,193,0,178],
[176,185,158,164,159,167,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,171,148,151,169,169,164],
[173,0,157,165,170,173,171,142,166],
[174,183,0,189,154,170,187,159,171],
[169,175,151,0,162,169,169,161,166],
[192,170,186,178,0,169,193,174,176],
[189,167,170,171,171,0,181,164,180],
[171,169,153,171,147,159,0,160,164],
[171,198,181,179,166,176,180,0,179],
[176,174,169,174,164,160,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,175,165,171,176,167,162],
[172,0,166,182,175,179,175,168,175],
[161,174,0,183,166,180,172,170,167],
[165,158,157,0,162,173,172,163,177],
[175,165,174,178,0,169,161,166,165],
[169,161,160,167,171,0,161,154,156],
[164,165,168,168,179,179,0,175,159],
[173,172,170,177,174,186,165,0,163],
[178,165,173,163,175,184,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,173,195,192,171,180,182],
[174,0,163,172,169,189,169,168,173],
[167,177,0,168,186,171,189,170,189],
[167,168,172,0,184,181,181,176,172],
[145,171,154,156,0,186,176,160,183],
[148,151,169,159,154,0,158,164,150],
[169,171,151,159,164,182,0,163,166],
[160,172,170,164,180,176,177,0,182],
[158,167,151,168,157,190,174,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,182,176,172,165,176,177],
[173,0,169,179,165,172,168,167,167],
[181,171,0,173,167,176,171,165,168],
[158,161,167,0,159,166,151,157,154],
[164,175,173,181,0,185,164,164,163],
[168,168,164,174,155,0,166,164,181],
[175,172,169,189,176,174,0,167,171],
[164,173,175,183,176,176,173,0,168],
[163,173,172,186,177,159,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,156,181,162,143,143,188,145],
[170,0,161,151,150,151,161,159,155],
[184,179,0,174,179,180,147,194,181],
[159,189,166,0,178,160,162,171,161],
[178,190,161,162,0,167,164,173,160],
[197,189,160,180,173,0,165,193,185],
[197,179,193,178,176,175,0,188,160],
[152,181,146,169,167,147,152,0,140],
[195,185,159,179,180,155,180,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,164,148,168,153,158,170],
[172,0,166,165,167,178,164,168,177],
[161,174,0,155,156,144,144,161,154],
[176,175,185,0,182,167,178,166,164],
[192,173,184,158,0,165,174,182,167],
[172,162,196,173,175,0,177,167,158],
[187,176,196,162,166,163,0,164,162],
[182,172,179,174,158,173,176,0,166],
[170,163,186,176,173,182,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,141,147,143,145,185,161],
[173,0,193,172,159,178,173,192,164],
[181,147,0,175,135,152,154,193,167],
[199,168,165,0,190,152,141,194,188],
[193,181,205,150,0,168,125,172,153],
[197,162,188,188,172,0,136,164,174],
[195,167,186,199,215,204,0,196,210],
[155,148,147,146,168,176,144,0,178],
[179,176,173,152,187,166,130,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,182,166,173,153,173,164],
[156,0,156,187,160,178,176,165,187],
[177,184,0,191,161,180,169,168,194],
[158,153,149,0,161,163,152,170,151],
[174,180,179,179,0,192,169,159,183],
[167,162,160,177,148,0,160,164,165],
[187,164,171,188,171,180,0,169,190],
[167,175,172,170,181,176,171,0,166],
[176,153,146,189,157,175,150,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,145,148,141,143,146,136,150],
[198,0,175,173,165,172,165,182,179],
[195,165,0,181,161,170,156,171,172],
[192,167,159,0,157,156,149,174,159],
[199,175,179,183,0,159,180,179,185],
[197,168,170,184,181,0,176,186,174],
[194,175,184,191,160,164,0,199,180],
[204,158,169,166,161,154,141,0,174],
[190,161,168,181,155,166,160,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,187,183,173,180,170,170,191],
[164,0,170,173,180,166,161,161,181],
[153,170,0,158,188,166,158,165,172],
[157,167,182,0,187,180,165,163,182],
[167,160,152,153,0,156,159,147,165],
[160,174,174,160,184,0,163,173,174],
[170,179,182,175,181,177,0,163,187],
[170,179,175,177,193,167,177,0,191],
[149,159,168,158,175,166,153,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,170,184,180,169,167,160,180],
[184,0,167,183,190,173,169,171,177],
[170,173,0,179,176,179,166,171,174],
[156,157,161,0,167,164,157,156,176],
[160,150,164,173,0,165,150,151,156],
[171,167,161,176,175,0,165,166,169],
[173,171,174,183,190,175,0,167,180],
[180,169,169,184,189,174,173,0,181],
[160,163,166,164,184,171,160,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,161,172,177,169,171,169,171],
[162,0,170,170,177,157,171,169,170],
[179,170,0,193,174,174,176,181,168],
[168,170,147,0,159,160,148,160,154],
[163,163,166,181,0,172,172,175,170],
[171,183,166,180,168,0,171,177,165],
[169,169,164,192,168,169,0,177,173],
[171,171,159,180,165,163,163,0,159],
[169,170,172,186,170,175,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,167,174,164,174,166,166],
[163,0,180,167,161,166,163,176,153],
[168,160,0,153,154,158,164,166,155],
[173,173,187,0,164,175,167,176,180],
[166,179,186,176,0,177,174,180,171],
[176,174,182,165,163,0,179,178,171],
[166,177,176,173,166,161,0,171,154],
[174,164,174,164,160,162,169,0,167],
[174,187,185,160,169,169,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,156,164,193,155,163,176],
[171,0,191,167,182,188,176,164,178],
[178,149,0,180,177,187,179,178,167],
[184,173,160,0,160,190,181,175,167],
[176,158,163,180,0,180,174,173,171],
[147,152,153,150,160,0,149,163,157],
[185,164,161,159,166,191,0,181,170],
[177,176,162,165,167,177,159,0,166],
[164,162,173,173,169,183,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,161,162,158,170,163,161],
[163,0,187,159,166,176,164,145,159],
[166,153,0,148,157,165,134,153,160],
[179,181,192,0,190,187,183,179,166],
[178,174,183,150,0,168,151,163,173],
[182,164,175,153,172,0,149,154,168],
[170,176,206,157,189,191,0,175,162],
[177,195,187,161,177,186,165,0,167],
[179,181,180,174,167,172,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,255,209,154,235,200,153,169],
[136,0,215,183,147,126,157,176,129],
[85,125,0,159,78,114,91,132,90],
[131,157,181,0,145,125,96,154,136],
[186,193,262,195,0,156,222,198,174],
[105,214,226,215,184,0,135,137,148],
[140,183,249,244,118,205,0,167,185],
[187,164,208,186,142,203,173,0,165],
[171,211,250,204,166,192,155,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,165,168,170,178,168,176],
[173,0,170,183,180,175,183,192,187],
[174,170,0,174,167,161,171,190,178],
[175,157,166,0,160,172,159,172,177],
[172,160,173,180,0,169,171,181,185],
[170,165,179,168,171,0,171,178,180],
[162,157,169,181,169,169,0,172,173],
[172,148,150,168,159,162,168,0,172],
[164,153,162,163,155,160,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,165,174,177,170,176,168,186],
[173,0,166,165,177,170,183,176,187],
[175,174,0,175,175,161,188,172,186],
[166,175,165,0,177,175,184,160,177],
[163,163,165,163,0,167,168,152,165],
[170,170,179,165,173,0,174,168,185],
[164,157,152,156,172,166,0,171,170],
[172,164,168,180,188,172,169,0,182],
[154,153,154,163,175,155,170,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,175,174,159,161,168,169],
[159,0,164,167,180,163,170,168,172],
[166,176,0,158,184,169,161,170,167],
[165,173,182,0,174,164,172,180,172],
[166,160,156,166,0,169,161,170,168],
[181,177,171,176,171,0,171,164,167],
[179,170,179,168,179,169,0,167,190],
[172,172,170,160,170,176,173,0,168],
[171,168,173,168,172,173,150,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,183,168,170,184,171,184,160],
[184,0,191,179,178,199,163,177,178],
[157,149,0,176,162,180,171,175,151],
[172,161,164,0,186,193,161,191,168],
[170,162,178,154,0,175,178,181,162],
[156,141,160,147,165,0,157,162,149],
[169,177,169,179,162,183,0,185,159],
[156,163,165,149,159,178,155,0,154],
[180,162,189,172,178,191,181,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,180,187,181,198,172,167,186],
[171,0,167,183,177,181,183,190,175],
[160,173,0,178,173,185,166,180,187],
[153,157,162,0,169,169,161,163,159],
[159,163,167,171,0,179,166,164,169],
[142,159,155,171,161,0,158,163,160],
[168,157,174,179,174,182,0,168,179],
[173,150,160,177,176,177,172,0,170],
[154,165,153,181,171,180,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,171,170,166,163,156,174,176],
[152,0,181,164,164,160,148,169,163],
[169,159,0,156,154,163,156,168,164],
[170,176,184,0,171,171,167,169,171],
[174,176,186,169,0,166,164,176,185],
[177,180,177,169,174,0,176,180,165],
[184,192,184,173,176,164,0,179,183],
[166,171,172,171,164,160,161,0,173],
[164,177,176,169,155,175,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,174,183,174,169,166,168],
[179,0,175,168,192,185,174,177,167],
[169,165,0,173,182,164,177,166,164],
[166,172,167,0,178,171,168,169,166],
[157,148,158,162,0,170,168,162,164],
[166,155,176,169,170,0,185,166,175],
[171,166,163,172,172,155,0,167,158],
[174,163,174,171,178,174,173,0,176],
[172,173,176,174,176,165,182,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,178,183,171,171,166,172],
[165,0,167,162,157,158,172,166,155],
[167,173,0,177,181,161,173,177,175],
[162,178,163,0,171,169,176,178,164],
[157,183,159,169,0,158,166,158,166],
[169,182,179,171,182,0,178,167,169],
[169,168,167,164,174,162,0,160,171],
[174,174,163,162,182,173,180,0,173],
[168,185,165,176,174,171,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,225,241,174,182,170,172,177],
[166,0,187,221,225,155,171,138,161],
[115,153,0,217,186,137,175,153,125],
[99,119,123,0,135,88,139,120,118],
[166,115,154,205,0,175,150,114,144],
[158,185,203,252,165,0,187,140,169],
[170,169,165,201,190,153,0,128,163],
[168,202,187,220,226,200,212,0,182],
[163,179,215,222,196,171,177,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,217,152,128,217,209,159,162],
[180,0,192,137,123,231,163,170,137],
[123,148,0,93,117,179,138,148,144],
[188,203,247,0,160,261,234,204,188],
[212,217,223,180,0,222,189,160,196],
[123,109,161,79,118,0,153,146,113],
[131,177,202,106,151,187,0,161,126],
[181,170,192,136,180,194,179,0,199],
[178,203,196,152,144,227,214,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,167,180,176,183,184,164,175],
[144,0,154,150,154,166,135,139,136],
[173,186,0,170,193,191,174,169,168],
[160,190,170,0,187,182,162,171,163],
[164,186,147,153,0,169,150,135,137],
[157,174,149,158,171,0,152,162,148],
[156,205,166,178,190,188,0,166,161],
[176,201,171,169,205,178,174,0,154],
[165,204,172,177,203,192,179,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,172,182,174,171,178,184],
[167,0,162,174,156,156,158,158,171],
[171,178,0,188,175,169,176,178,179],
[168,166,152,0,161,158,162,167,177],
[158,184,165,179,0,169,171,166,188],
[166,184,171,182,171,0,167,161,176],
[169,182,164,178,169,173,0,180,174],
[162,182,162,173,174,179,160,0,178],
[156,169,161,163,152,164,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,180,176,174,194,180,169,192],
[156,0,166,164,167,175,166,172,159],
[160,174,0,173,161,172,167,161,170],
[164,176,167,0,158,169,171,152,178],
[166,173,179,182,0,160,180,162,176],
[146,165,168,171,180,0,168,155,171],
[160,174,173,169,160,172,0,155,166],
[171,168,179,188,178,185,185,0,184],
[148,181,170,162,164,169,174,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,228,208,202,218,225,166,215],
[172,0,222,200,193,208,202,166,220],
[112,118,0,108,116,125,106,100,133],
[132,140,232,0,183,181,134,157,178],
[138,147,224,157,0,149,168,147,185],
[122,132,215,159,191,0,134,141,153],
[115,138,234,206,172,206,0,152,189],
[174,174,240,183,193,199,188,0,159],
[125,120,207,162,155,187,151,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,190,174,159,175,154,163],
[167,0,174,183,172,169,172,155,172],
[167,166,0,187,162,169,177,157,176],
[150,157,153,0,156,153,156,151,150],
[166,168,178,184,0,167,169,159,156],
[181,171,171,187,173,0,176,169,166],
[165,168,163,184,171,164,0,161,170],
[186,185,183,189,181,171,179,0,170],
[177,168,164,190,184,174,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,157,164,159,180,170,168],
[174,0,169,177,167,173,181,160,177],
[174,171,0,162,150,165,180,181,164],
[183,163,178,0,177,181,180,178,168],
[176,173,190,163,0,173,197,177,177],
[181,167,175,159,167,0,189,167,168],
[160,159,160,160,143,151,0,174,169],
[170,180,159,162,163,173,166,0,174],
[172,163,176,172,163,172,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,140,191,157,133,168,138,139],
[208,0,173,221,183,196,175,168,194],
[200,167,0,163,136,140,159,182,164],
[149,119,177,0,165,134,145,125,146],
[183,157,204,175,0,144,157,153,165],
[207,144,200,206,196,0,184,194,183],
[172,165,181,195,183,156,0,202,160],
[202,172,158,215,187,146,138,0,180],
[201,146,176,194,175,157,180,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,165,183,168,181,181,174,169],
[141,0,157,164,169,155,159,159,128],
[175,183,0,176,171,175,168,171,172],
[157,176,164,0,169,177,168,154,150],
[172,171,169,171,0,172,176,169,160],
[159,185,165,163,168,0,173,162,161],
[159,181,172,172,164,167,0,171,146],
[166,181,169,186,171,178,169,0,173],
[171,212,168,190,180,179,194,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,169,172,194,174,167,170,181],
[149,0,161,160,161,153,172,177,194],
[171,179,0,178,185,180,169,189,188],
[168,180,162,0,183,161,164,195,179],
[146,179,155,157,0,153,165,160,167],
[166,187,160,179,187,0,177,170,183],
[173,168,171,176,175,163,0,181,188],
[170,163,151,145,180,170,159,0,198],
[159,146,152,161,173,157,152,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,168,161,109,101,138,205,176],
[236,0,176,140,124,157,208,215,189],
[172,164,0,136,136,133,181,250,185],
[179,200,204,0,185,170,220,232,219],
[231,216,204,155,0,173,204,261,221],
[239,183,207,170,167,0,208,266,201],
[202,132,159,120,136,132,0,200,170],
[135,125,90,108,79,74,140,0,128],
[164,151,155,121,119,139,170,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,189,183,151,176,194,175,177],
[168,0,179,176,173,156,185,166,174],
[151,161,0,176,157,166,186,157,183],
[157,164,164,0,160,158,182,161,167],
[189,167,183,180,0,193,191,182,189],
[164,184,174,182,147,0,173,162,180],
[146,155,154,158,149,167,0,158,166],
[165,174,183,179,158,178,182,0,171],
[163,166,157,173,151,160,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,178,178,197,149,188,182,186],
[148,0,168,191,171,147,168,157,160],
[162,172,0,162,179,167,164,168,188],
[162,149,178,0,176,148,162,180,161],
[143,169,161,164,0,153,150,160,153],
[191,193,173,192,187,0,181,160,167],
[152,172,176,178,190,159,0,168,172],
[158,183,172,160,180,180,172,0,181],
[154,180,152,179,187,173,168,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,65,94,154,139,100,100,122],
[168,0,131,164,131,224,184,184,131],
[275,209,0,206,215,214,146,203,208],
[246,176,134,0,174,177,82,134,185],
[186,209,125,166,0,177,82,157,165],
[201,116,126,163,163,0,146,221,134],
[240,156,194,258,258,194,0,240,202],
[240,156,137,206,183,119,100,0,165],
[218,209,132,155,175,206,138,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,191,164,154,164,127,149,145],
[162,0,172,161,148,164,130,151,144],
[149,168,0,153,140,103,126,164,127],
[176,179,187,0,184,163,146,174,132],
[186,192,200,156,0,172,138,185,174],
[176,176,237,177,168,0,153,195,180],
[213,210,214,194,202,187,0,207,166],
[191,189,176,166,155,145,133,0,126],
[195,196,213,208,166,160,174,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,184,187,164,168,176,192,186],
[167,0,190,179,172,182,168,174,180],
[156,150,0,175,168,179,165,167,170],
[153,161,165,0,147,159,169,163,162],
[176,168,172,193,0,189,174,179,177],
[172,158,161,181,151,0,169,152,163],
[164,172,175,171,166,171,0,180,174],
[148,166,173,177,161,188,160,0,167],
[154,160,170,178,163,177,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,184,179,170,148,168,161,151],
[205,0,201,201,213,160,217,185,214],
[156,139,0,164,160,125,153,163,185],
[161,139,176,0,173,133,180,133,181],
[170,127,180,167,0,189,168,182,203],
[192,180,215,207,151,0,174,185,194],
[172,123,187,160,172,166,0,171,198],
[179,155,177,207,158,155,169,0,176],
[189,126,155,159,137,146,142,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,141,176,159,172,113,161,164],
[232,0,166,164,178,176,132,168,208],
[199,174,0,196,202,187,164,191,184],
[164,176,144,0,169,165,137,194,176],
[181,162,138,171,0,192,142,205,168],
[168,164,153,175,148,0,124,175,195],
[227,208,176,203,198,216,0,164,201],
[179,172,149,146,135,165,176,0,172],
[176,132,156,164,172,145,139,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,199,231,175,187,150,197,189],
[160,0,193,238,236,167,172,230,216],
[141,147,0,171,152,173,95,203,174],
[109,102,169,0,132,143,150,173,169],
[165,104,188,208,0,193,173,199,180],
[153,173,167,197,147,0,115,194,201],
[190,168,245,190,167,225,0,179,184],
[143,110,137,167,141,146,161,0,147],
[151,124,166,171,160,139,156,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,159,142,172,145,167,135,164],
[201,0,166,143,175,156,206,167,190],
[181,174,0,149,169,174,161,163,157],
[198,197,191,0,188,170,194,169,168],
[168,165,171,152,0,157,190,150,160],
[195,184,166,170,183,0,191,163,171],
[173,134,179,146,150,149,0,144,176],
[205,173,177,171,190,177,196,0,167],
[176,150,183,172,180,169,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,174,158,160,152,172,154,171],
[179,0,189,184,173,161,166,166,168],
[166,151,0,159,168,157,145,146,154],
[182,156,181,0,186,154,163,162,177],
[180,167,172,154,0,163,170,175,189],
[188,179,183,186,177,0,180,168,176],
[168,174,195,177,170,160,0,178,181],
[186,174,194,178,165,172,162,0,177],
[169,172,186,163,151,164,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,166,167,179,195,179,190],
[160,0,153,159,159,163,190,175,167],
[163,187,0,163,175,184,192,181,199],
[174,181,177,0,162,192,197,191,193],
[173,181,165,178,0,187,183,181,180],
[161,177,156,148,153,0,193,164,176],
[145,150,148,143,157,147,0,148,154],
[161,165,159,149,159,176,192,0,167],
[150,173,141,147,160,164,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,178,193,180,179,178,167,179],
[153,0,195,207,166,192,172,166,181],
[162,145,0,176,143,137,181,132,180],
[147,133,164,0,153,143,148,131,162],
[160,174,197,187,0,182,164,172,182],
[161,148,203,197,158,0,180,171,177],
[162,168,159,192,176,160,0,154,139],
[173,174,208,209,168,169,186,0,179],
[161,159,160,178,158,163,201,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,166,181,205,153,163,164],
[169,0,179,168,173,194,173,192,155],
[179,161,0,114,166,209,168,160,134],
[174,172,226,0,147,197,162,158,159],
[159,167,174,193,0,201,141,165,144],
[135,146,131,143,139,0,115,165,127],
[187,167,172,178,199,225,0,177,177],
[177,148,180,182,175,175,163,0,136],
[176,185,206,181,196,213,163,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,160,151,183,182,166,152,165],
[159,0,162,157,184,159,158,156,160],
[180,178,0,155,187,169,184,180,171],
[189,183,185,0,200,176,167,167,171],
[157,156,153,140,0,167,171,143,149],
[158,181,171,164,173,0,173,161,158],
[174,182,156,173,169,167,0,171,164],
[188,184,160,173,197,179,169,0,174],
[175,180,169,169,191,182,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,175,161,183,158,172,181,175],
[151,0,166,148,156,138,157,159,167],
[165,174,0,158,180,162,195,205,205],
[179,192,182,0,185,163,184,222,180],
[157,184,160,155,0,136,162,175,164],
[182,202,178,177,204,0,167,188,195],
[168,183,145,156,178,173,0,172,179],
[159,181,135,118,165,152,168,0,158],
[165,173,135,160,176,145,161,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,140,188,158,164,213,175,179],
[191,0,170,210,197,183,227,203,209],
[200,170,0,205,172,189,192,182,188],
[152,130,135,0,165,180,149,184,178],
[182,143,168,175,0,189,180,187,172],
[176,157,151,160,151,0,172,174,152],
[127,113,148,191,160,168,0,178,159],
[165,137,158,156,153,166,162,0,162],
[161,131,152,162,168,188,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,175,186,155,163,183,181,164],
[185,0,179,201,177,170,191,172,189],
[165,161,0,190,156,160,181,161,173],
[154,139,150,0,150,133,163,168,167],
[185,163,184,190,0,185,182,183,192],
[177,170,180,207,155,0,179,180,164],
[157,149,159,177,158,161,0,185,163],
[159,168,179,172,157,160,155,0,170],
[176,151,167,173,148,176,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,170,168,168,168,177,180],
[162,0,162,164,172,171,158,172,170],
[170,178,0,177,165,175,165,176,180],
[170,176,163,0,160,168,171,165,159],
[172,168,175,180,0,175,177,192,172],
[172,169,165,172,165,0,158,182,182],
[172,182,175,169,163,182,0,186,177],
[163,168,164,175,148,158,154,0,164],
[160,170,160,181,168,158,163,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,170,175,177,194,171,180,174],
[155,0,150,165,163,161,163,176,156],
[170,190,0,181,173,191,179,173,182],
[165,175,159,0,155,178,181,173,167],
[163,177,167,185,0,181,175,176,161],
[146,179,149,162,159,0,165,174,164],
[169,177,161,159,165,175,0,180,167],
[160,164,167,167,164,166,160,0,171],
[166,184,158,173,179,176,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,174,180,183,179,165,174,180],
[152,0,165,166,176,165,163,158,163],
[166,175,0,169,187,160,169,167,174],
[160,174,171,0,184,166,166,170,171],
[157,164,153,156,0,173,158,158,160],
[161,175,180,174,167,0,181,167,173],
[175,177,171,174,182,159,0,156,170],
[166,182,173,170,182,173,184,0,164],
[160,177,166,169,180,167,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,185,202,175,153,172,176,179],
[154,0,158,166,147,149,152,162,167],
[155,182,0,175,140,122,176,153,178],
[138,174,165,0,159,133,150,154,141],
[165,193,200,181,0,186,160,192,182],
[187,191,218,207,154,0,207,187,223],
[168,188,164,190,180,133,0,179,166],
[164,178,187,186,148,153,161,0,184],
[161,173,162,199,158,117,174,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,173,149,159,179,172,215,181],
[183,0,142,148,153,152,171,210,176],
[167,198,0,163,175,151,178,209,186],
[191,192,177,0,157,175,198,209,164],
[181,187,165,183,0,154,185,225,193],
[161,188,189,165,186,0,168,204,169],
[168,169,162,142,155,172,0,176,162],
[125,130,131,131,115,136,164,0,153],
[159,164,154,176,147,171,178,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,152,171,152,162,161,147],
[168,0,163,163,169,147,171,172,153],
[180,177,0,168,174,176,170,175,175],
[188,177,172,0,167,175,172,170,170],
[169,171,166,173,0,172,163,172,169],
[188,193,164,165,168,0,162,173,156],
[178,169,170,168,177,178,0,165,163],
[179,168,165,170,168,167,175,0,169],
[193,187,165,170,171,184,177,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,187,153,170,171,130,171],
[171,0,167,186,183,148,169,146,171],
[174,173,0,130,163,155,188,188,177],
[153,154,210,0,179,157,169,142,169],
[187,157,177,161,0,139,179,173,201],
[170,192,185,183,201,0,187,167,215],
[169,171,152,171,161,153,0,129,182],
[210,194,152,198,167,173,211,0,227],
[169,169,163,171,139,125,158,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,179,180,181,165,173,185],
[168,0,172,179,176,178,169,178,173],
[172,168,0,172,174,168,168,165,166],
[161,161,168,0,165,160,151,162,178],
[160,164,166,175,0,165,163,166,171],
[159,162,172,180,175,0,174,165,172],
[175,171,172,189,177,166,0,171,180],
[167,162,175,178,174,175,169,0,173],
[155,167,174,162,169,168,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,155,154,174,167,142,162,152],
[163,0,126,161,134,144,136,172,146],
[185,214,0,174,183,174,150,185,154],
[186,179,166,0,168,184,158,182,166],
[166,206,157,172,0,204,168,171,177],
[173,196,166,156,136,0,158,149,145],
[198,204,190,182,172,182,0,152,182],
[178,168,155,158,169,191,188,0,161],
[188,194,186,174,163,195,158,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,169,176,154,153,152,154],
[171,0,157,138,147,153,144,140,144],
[174,183,0,187,176,164,171,163,163],
[171,202,153,0,159,180,181,155,156],
[164,193,164,181,0,167,172,167,163],
[186,187,176,160,173,0,170,173,183],
[187,196,169,159,168,170,0,162,167],
[188,200,177,185,173,167,178,0,170],
[186,196,177,184,177,157,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,136,134,160,165,176,206,155],
[145,0,121,139,143,162,172,176,143],
[204,219,0,170,200,185,206,236,201],
[206,201,170,0,192,192,203,225,181],
[180,197,140,148,0,173,175,165,158],
[175,178,155,148,167,0,198,161,153],
[164,168,134,137,165,142,0,169,147],
[134,164,104,115,175,179,171,0,140],
[185,197,139,159,182,187,193,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,133,156,165,162,144,176,154],
[178,0,158,169,179,157,175,174,159],
[207,182,0,173,184,166,174,204,169],
[184,171,167,0,180,166,163,187,180],
[175,161,156,160,0,155,166,169,162],
[178,183,174,174,185,0,179,185,156],
[196,165,166,177,174,161,0,172,166],
[164,166,136,153,171,155,168,0,158],
[186,181,171,160,178,184,174,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,179,171,173,167,181,161,173],
[158,0,189,164,182,167,168,165,160],
[161,151,0,155,165,151,163,158,166],
[169,176,185,0,179,177,181,164,180],
[167,158,175,161,0,158,170,175,176],
[173,173,189,163,182,0,174,163,181],
[159,172,177,159,170,166,0,167,178],
[179,175,182,176,165,177,173,0,170],
[167,180,174,160,164,159,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,161,173,175,176,159,172],
[161,0,155,163,164,156,156,162,164],
[170,185,0,164,167,168,161,157,165],
[179,177,176,0,182,162,166,155,163],
[167,176,173,158,0,166,168,168,168],
[165,184,172,178,174,0,163,155,159],
[164,184,179,174,172,177,0,166,169],
[181,178,183,185,172,185,174,0,168],
[168,176,175,177,172,181,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,161,152,174,157,177,171,170],
[160,0,165,149,164,158,160,174,153],
[179,175,0,163,172,177,168,173,173],
[188,191,177,0,168,172,165,180,172],
[166,176,168,172,0,168,175,181,175],
[183,182,163,168,172,0,177,178,163],
[163,180,172,175,165,163,0,170,170],
[169,166,167,160,159,162,170,0,160],
[170,187,167,168,165,177,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,163,147,153,168,160,162,172],
[185,0,176,170,171,189,178,172,186],
[177,164,0,167,164,171,181,162,178],
[193,170,173,0,178,183,174,182,196],
[187,169,176,162,0,178,174,173,180],
[172,151,169,157,162,0,171,166,170],
[180,162,159,166,166,169,0,173,185],
[178,168,178,158,167,174,167,0,175],
[168,154,162,144,160,170,155,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,194,172,174,195,164,170,193],
[155,0,177,160,178,173,174,173,180],
[146,163,0,166,170,168,144,152,185],
[168,180,174,0,169,186,162,177,177],
[166,162,170,171,0,188,169,170,188],
[145,167,172,154,152,0,152,166,179],
[176,166,196,178,171,188,0,159,181],
[170,167,188,163,170,174,181,0,182],
[147,160,155,163,152,161,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,172,166,171,179,166,181,182],
[173,0,167,180,183,186,173,176,177],
[168,173,0,176,181,170,172,164,184],
[174,160,164,0,176,165,158,153,160],
[169,157,159,164,0,170,174,162,163],
[161,154,170,175,170,0,161,143,172],
[174,167,168,182,166,179,0,158,168],
[159,164,176,187,178,197,182,0,168],
[158,163,156,180,177,168,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,189,195,179,172,177,177,165],
[171,0,186,186,189,168,191,180,183],
[151,154,0,185,189,166,177,156,144],
[145,154,155,0,161,145,146,151,141],
[161,151,151,179,0,151,157,162,151],
[168,172,174,195,189,0,189,177,177],
[163,149,163,194,183,151,0,174,168],
[163,160,184,189,178,163,166,0,176],
[175,157,196,199,189,163,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,167,148,170,171,160,149,141],
[186,0,166,172,190,157,169,178,185],
[173,174,0,189,183,177,179,170,182],
[192,168,151,0,171,180,174,187,181],
[170,150,157,169,0,178,169,169,152],
[169,183,163,160,162,0,158,154,162],
[180,171,161,166,171,182,0,178,178],
[191,162,170,153,171,186,162,0,166],
[199,155,158,159,188,178,162,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,168,176,199,203,173,167],
[170,0,181,172,175,191,180,155,184],
[171,159,0,159,211,188,188,162,175],
[172,168,181,0,201,191,192,178,175],
[164,165,129,139,0,161,183,151,159],
[141,149,152,149,179,0,183,156,167],
[137,160,152,148,157,157,0,159,171],
[167,185,178,162,189,184,181,0,197],
[173,156,165,165,181,173,169,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,156,164,100,126,153,221,133],
[184,0,286,167,177,253,260,271,213],
[184,54,0,164,89,182,194,286,168],
[176,173,176,0,153,205,188,221,164],
[240,163,251,187,0,214,244,274,205],
[214,87,158,135,126,0,123,188,198],
[187,80,146,152,96,217,0,223,146],
[119,69,54,119,66,152,117,0,139],
[207,127,172,176,135,142,194,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,174,161,147,169,165,174],
[166,0,163,169,159,168,168,166,172],
[161,177,0,182,164,173,169,178,165],
[166,171,158,0,153,165,164,168,168],
[179,181,176,187,0,181,171,169,175],
[193,172,167,175,159,0,176,167,184],
[171,172,171,176,169,164,0,184,179],
[175,174,162,172,171,173,156,0,164],
[166,168,175,172,165,156,161,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,171,165,189,158,188,166],
[169,0,173,161,160,186,166,190,179],
[171,167,0,159,168,185,170,178,173],
[169,179,181,0,179,182,163,187,173],
[175,180,172,161,0,186,168,185,176],
[151,154,155,158,154,0,143,166,159],
[182,174,170,177,172,197,0,188,168],
[152,150,162,153,155,174,152,0,172],
[174,161,167,167,164,181,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,179,169,179,168,174,180,168],
[169,0,172,161,170,159,175,171,156],
[161,168,0,155,159,160,158,169,165],
[171,179,185,0,181,165,180,164,178],
[161,170,181,159,0,156,168,174,167],
[172,181,180,175,184,0,172,169,174],
[166,165,182,160,172,168,0,169,166],
[160,169,171,176,166,171,171,0,165],
[172,184,175,162,173,166,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,147,115,202,150,170,179,164],
[160,0,198,167,189,200,184,178,225],
[193,142,0,168,200,197,143,176,179],
[225,173,172,0,209,170,195,185,232],
[138,151,140,131,0,149,141,158,145],
[190,140,143,170,191,0,189,177,217],
[170,156,197,145,199,151,0,174,190],
[161,162,164,155,182,163,166,0,169],
[176,115,161,108,195,123,150,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,179,166,160,177,154,178],
[164,0,165,184,180,189,168,175,165],
[170,175,0,188,169,169,180,160,197],
[161,156,152,0,151,162,166,150,160],
[174,160,171,189,0,183,180,140,167],
[180,151,171,178,157,0,176,139,155],
[163,172,160,174,160,164,0,154,164],
[186,165,180,190,200,201,186,0,191],
[162,175,143,180,173,185,176,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,176,183,159,158,168,158],
[172,0,165,175,180,159,164,172,166],
[169,175,0,186,181,166,170,165,171],
[164,165,154,0,155,146,144,164,164],
[157,160,159,185,0,162,155,163,167],
[181,181,174,194,178,0,164,171,179],
[182,176,170,196,185,176,0,171,173],
[172,168,175,176,177,169,169,0,166],
[182,174,169,176,173,161,167,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,186,178,177,202,205,149,170],
[166,0,155,149,150,188,194,130,185],
[154,185,0,166,162,184,198,150,179],
[162,191,174,0,180,215,200,179,178],
[163,190,178,160,0,182,199,147,174],
[138,152,156,125,158,0,160,126,154],
[135,146,142,140,141,180,0,119,146],
[191,210,190,161,193,214,221,0,179],
[170,155,161,162,166,186,194,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,179,195,171,187,169,162],
[167,0,173,166,173,166,171,165,150],
[169,167,0,163,178,161,162,167,174],
[161,174,177,0,167,180,178,167,160],
[145,167,162,173,0,156,164,146,163],
[169,174,179,160,184,0,177,155,148],
[153,169,178,162,176,163,0,162,161],
[171,175,173,173,194,185,178,0,162],
[178,190,166,180,177,192,179,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,174,168,177,163,179,169],
[172,0,166,167,174,170,176,161,174],
[177,174,0,187,176,174,184,191,168],
[166,173,153,0,161,160,156,165,164],
[172,166,164,179,0,172,170,166,168],
[163,170,166,180,168,0,163,167,162],
[177,164,156,184,170,177,0,169,167],
[161,179,149,175,174,173,171,0,166],
[171,166,172,176,172,178,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,166,163,169,149,154,170],
[168,0,163,145,154,166,153,159,155],
[166,177,0,151,173,168,151,167,152],
[174,195,189,0,170,167,161,170,161],
[177,186,167,170,0,164,159,183,160],
[171,174,172,173,176,0,170,173,156],
[191,187,189,179,181,170,0,180,167],
[186,181,173,170,157,167,160,0,161],
[170,185,188,179,180,184,173,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,181,197,146,171,155,168,179],
[190,0,196,195,165,195,176,173,179],
[159,144,0,178,151,168,145,155,167],
[143,145,162,0,147,138,149,145,154],
[194,175,189,193,0,179,186,166,193],
[169,145,172,202,161,0,157,176,183],
[185,164,195,191,154,183,0,187,188],
[172,167,185,195,174,164,153,0,187],
[161,161,173,186,147,157,152,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,163,175,158,176,179,163],
[160,0,168,153,157,160,163,181,169],
[175,172,0,158,170,168,165,181,166],
[177,187,182,0,185,168,179,170,174],
[165,183,170,155,0,151,157,160,162],
[182,180,172,172,189,0,167,174,161],
[164,177,175,161,183,173,0,183,171],
[161,159,159,170,180,166,157,0,168],
[177,171,174,166,178,179,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,165,178,173,187,183,181,176],
[152,0,168,165,161,165,179,165,167],
[175,172,0,171,172,185,182,178,151],
[162,175,169,0,167,186,165,187,170],
[167,179,168,173,0,171,174,178,164],
[153,175,155,154,169,0,165,183,150],
[157,161,158,175,166,175,0,169,157],
[159,175,162,153,162,157,171,0,161],
[164,173,189,170,176,190,183,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,188,195,189,163,175,168,155],
[165,0,122,146,145,118,173,170,156],
[152,218,0,183,176,168,202,171,178],
[145,194,157,0,156,143,156,166,143],
[151,195,164,184,0,154,175,193,163],
[177,222,172,197,186,0,199,168,192],
[165,167,138,184,165,141,0,169,170],
[172,170,169,174,147,172,171,0,140],
[185,184,162,197,177,148,170,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,141,200,163,195,123,165,193],
[169,0,160,181,186,175,140,181,190],
[199,180,0,211,192,205,188,161,194],
[140,159,129,0,197,181,139,176,193],
[177,154,148,143,0,167,140,142,172],
[145,165,135,159,173,0,134,131,165],
[217,200,152,201,200,206,0,190,206],
[175,159,179,164,198,209,150,0,179],
[147,150,146,147,168,175,134,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,162,177,186,167,174,185,162],
[158,0,173,168,171,162,187,172,174],
[178,167,0,167,181,170,181,177,189],
[163,172,173,0,173,150,171,180,168],
[154,169,159,167,0,143,169,171,169],
[173,178,170,190,197,0,181,184,175],
[166,153,159,169,171,159,0,169,164],
[155,168,163,160,169,156,171,0,176],
[178,166,151,172,171,165,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,212,175,197,206,199,160,165],
[146,0,152,146,139,159,166,165,159],
[128,188,0,180,152,235,190,196,160],
[165,194,160,0,150,182,208,153,152],
[143,201,188,190,0,194,193,151,147],
[134,181,105,158,146,0,175,158,104],
[141,174,150,132,147,165,0,164,171],
[180,175,144,187,189,182,176,0,156],
[175,181,180,188,193,236,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,147,145,169,175,166,158,190],
[195,0,170,225,197,199,196,179,194],
[193,170,0,209,165,186,184,176,141],
[195,115,131,0,153,187,140,123,112],
[171,143,175,187,0,195,189,175,189],
[165,141,154,153,145,0,180,149,134],
[174,144,156,200,151,160,0,161,120],
[182,161,164,217,165,191,179,0,154],
[150,146,199,228,151,206,220,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,162,162,153,160,151,180],
[169,0,165,179,172,171,165,174,186],
[183,175,0,176,174,166,170,166,188],
[178,161,164,0,174,154,155,167,174],
[178,168,166,166,0,156,170,157,178],
[187,169,174,186,184,0,174,181,202],
[180,175,170,185,170,166,0,164,187],
[189,166,174,173,183,159,176,0,199],
[160,154,152,166,162,138,153,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,147,170,177,169,166,174,152],
[182,0,170,183,184,176,174,173,162],
[193,170,0,197,185,175,182,184,176],
[170,157,143,0,159,168,173,169,145],
[163,156,155,181,0,158,162,161,154],
[171,164,165,172,182,0,178,173,168],
[174,166,158,167,178,162,0,159,161],
[166,167,156,171,179,167,181,0,162],
[188,178,164,195,186,172,179,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,177,168,175,173,173,184],
[161,0,163,183,164,155,173,163,159],
[172,177,0,177,178,167,164,178,179],
[163,157,163,0,167,166,165,173,162],
[172,176,162,173,0,167,171,163,181],
[165,185,173,174,173,0,172,160,164],
[167,167,176,175,169,168,0,167,173],
[167,177,162,167,177,180,173,0,176],
[156,181,161,178,159,176,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,176,177,178,179,180,163],
[169,0,172,171,172,171,179,173,166],
[168,168,0,167,178,172,179,174,164],
[164,169,173,0,191,183,177,174,168],
[163,168,162,149,0,179,178,178,167],
[162,169,168,157,161,0,161,166,162],
[161,161,161,163,162,179,0,174,172],
[160,167,166,166,162,174,166,0,167],
[177,174,176,172,173,178,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,141,165,183,118,164,164,155],
[186,0,197,199,182,171,173,177,170],
[199,143,0,168,175,160,161,181,168],
[175,141,172,0,175,150,147,167,167],
[157,158,165,165,0,126,142,160,142],
[222,169,180,190,214,0,176,196,191],
[176,167,179,193,198,164,0,178,168],
[176,163,159,173,180,144,162,0,170],
[185,170,172,173,198,149,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,201,176,173,186,200,165,192],
[126,0,125,149,113,141,148,126,127],
[139,215,0,199,159,202,209,179,180],
[164,191,141,0,143,180,184,181,130],
[167,227,181,197,0,195,210,196,196],
[154,199,138,160,145,0,172,146,134],
[140,192,131,156,130,168,0,169,176],
[175,214,161,159,144,194,171,0,196],
[148,213,160,210,144,206,164,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,176,175,184,164,184,160],
[173,0,165,175,175,176,167,187,172],
[176,175,0,176,170,187,187,175,182],
[164,165,164,0,176,175,161,171,162],
[165,165,170,164,0,177,171,166,174],
[156,164,153,165,163,0,161,177,155],
[176,173,153,179,169,179,0,177,161],
[156,153,165,169,174,163,163,0,158],
[180,168,158,178,166,185,179,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,167,178,164,180,191,174],
[166,0,179,172,179,174,175,169,176],
[172,161,0,157,163,160,163,169,181],
[173,168,183,0,175,177,185,201,181],
[162,161,177,165,0,161,164,187,168],
[176,166,180,163,179,0,183,188,175],
[160,165,177,155,176,157,0,181,165],
[149,171,171,139,153,152,159,0,150],
[166,164,159,159,172,165,175,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,169,178,171,179,173,180,183],
[161,0,160,158,175,174,159,152,179],
[171,180,0,193,185,188,158,180,177],
[162,182,147,0,175,171,142,155,171],
[169,165,155,165,0,175,145,154,165],
[161,166,152,169,165,0,154,159,163],
[167,181,182,198,195,186,0,169,176],
[160,188,160,185,186,181,171,0,182],
[157,161,163,169,175,177,164,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,160,179,161,134,164,169,172],
[173,0,171,180,164,159,184,198,165],
[180,169,0,184,171,157,198,174,166],
[161,160,156,0,151,162,162,179,156],
[179,176,169,189,0,179,187,173,178],
[206,181,183,178,161,0,187,197,185],
[176,156,142,178,153,153,0,170,161],
[171,142,166,161,167,143,170,0,146],
[168,175,174,184,162,155,179,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,174,175,171,178,167,174,178],
[151,0,168,166,154,139,157,156,163],
[166,172,0,166,161,165,170,170,161],
[165,174,174,0,179,161,174,157,177],
[169,186,179,161,0,163,166,164,172],
[162,201,175,179,177,0,179,182,175],
[173,183,170,166,174,161,0,175,174],
[166,184,170,183,176,158,165,0,164],
[162,177,179,163,168,165,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,184,166,154,176,156,173,177],
[176,0,179,157,173,170,169,177,170],
[156,161,0,170,148,165,157,158,174],
[174,183,170,0,177,173,159,172,174],
[186,167,192,163,0,189,171,187,191],
[164,170,175,167,151,0,152,167,165],
[184,171,183,181,169,188,0,172,178],
[167,163,182,168,153,173,168,0,179],
[163,170,166,166,149,175,162,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,157,156,161,178,152,175],
[180,0,190,172,169,170,193,156,151],
[170,150,0,156,146,147,182,151,165],
[183,168,184,0,165,169,171,167,163],
[184,171,194,175,0,163,188,170,174],
[179,170,193,171,177,0,189,171,173],
[162,147,158,169,152,151,0,150,160],
[188,184,189,173,170,169,190,0,174],
[165,189,175,177,166,167,180,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,160,170,159,176,142,122,177],
[201,0,188,183,163,173,186,186,168],
[180,152,0,144,140,184,153,167,171],
[170,157,196,0,164,184,159,144,183],
[181,177,200,176,0,190,150,160,175],
[164,167,156,156,150,0,150,123,174],
[198,154,187,181,190,190,0,182,181],
[218,154,173,196,180,217,158,0,210],
[163,172,169,157,165,166,159,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,178,167,202,152,160,172,198],
[143,0,167,171,177,157,157,171,181],
[162,173,0,174,183,174,164,158,175],
[173,169,166,0,203,151,180,169,195],
[138,163,157,137,0,153,124,146,179],
[188,183,166,189,187,0,185,173,195],
[180,183,176,160,216,155,0,169,173],
[168,169,182,171,194,167,171,0,199],
[142,159,165,145,161,145,167,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,76,152,173,112,111,130,192],
[193,0,75,93,73,115,159,116,161],
[264,265,0,154,201,199,179,178,264],
[188,247,186,0,188,133,128,166,220],
[167,267,139,152,0,97,108,155,205],
[228,225,141,207,243,0,181,264,224],
[229,181,161,212,232,159,0,225,222],
[210,224,162,174,185,76,115,0,221],
[148,179,76,120,135,116,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,191,167,168,191,161,187,158],
[149,0,182,108,166,165,179,172,171],
[149,158,0,173,161,179,168,123,131],
[173,232,167,0,193,194,197,206,153],
[172,174,179,147,0,171,141,167,176],
[149,175,161,146,169,0,165,177,145],
[179,161,172,143,199,175,0,171,144],
[153,168,217,134,173,163,169,0,156],
[182,169,209,187,164,195,196,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,165,154,209,182,179,159,155],
[149,0,157,126,172,183,154,129,146],
[175,183,0,172,191,173,203,194,162],
[186,214,168,0,216,194,220,168,199],
[131,168,149,124,0,171,153,137,135],
[158,157,167,146,169,0,181,153,164],
[161,186,137,120,187,159,0,139,128],
[181,211,146,172,203,187,201,0,188],
[185,194,178,141,205,176,212,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,169,171,169,175,171,172],
[166,0,175,172,160,158,159,172,156],
[160,165,0,154,175,169,164,165,162],
[171,168,186,0,160,167,166,176,166],
[169,180,165,180,0,161,171,175,160],
[171,182,171,173,179,0,171,181,166],
[165,181,176,174,169,169,0,181,159],
[169,168,175,164,165,159,159,0,146],
[168,184,178,174,180,174,181,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,180,172,165,161,179,175],
[166,0,173,172,174,160,176,176,160],
[173,167,0,182,163,166,165,171,159],
[160,168,158,0,168,159,153,173,167],
[168,166,177,172,0,174,167,170,180],
[175,180,174,181,166,0,174,183,171],
[179,164,175,187,173,166,0,174,173],
[161,164,169,167,170,157,166,0,163],
[165,180,181,173,160,169,167,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,194,187,170,169,178,174,170],
[145,0,160,168,145,160,155,171,170],
[146,180,0,161,151,158,170,161,171],
[153,172,179,0,167,165,181,171,183],
[170,195,189,173,0,164,173,174,189],
[171,180,182,175,176,0,180,161,176],
[162,185,170,159,167,160,0,163,177],
[166,169,179,169,166,179,177,0,171],
[170,170,169,157,151,164,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,171,157,164,148,155,155],
[164,0,157,145,151,176,164,154,166],
[174,183,0,155,151,160,154,164,151],
[169,195,185,0,164,170,163,159,166],
[183,189,189,176,0,167,166,182,177],
[176,164,180,170,173,0,150,151,152],
[192,176,186,177,174,190,0,152,180],
[185,186,176,181,158,189,188,0,163],
[185,174,189,174,163,188,160,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,155,171,149,159,159,161,163],
[186,0,158,174,174,159,172,178,167],
[185,182,0,181,183,164,182,190,174],
[169,166,159,0,174,158,157,174,158],
[191,166,157,166,0,143,175,169,166],
[181,181,176,182,197,0,178,180,169],
[181,168,158,183,165,162,0,166,143],
[179,162,150,166,171,160,174,0,156],
[177,173,166,182,174,171,197,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,189,174,173,148,166,177,178],
[160,0,172,173,156,191,219,177,177],
[151,168,0,150,141,155,164,168,165],
[166,167,190,0,144,177,164,176,141],
[167,184,199,196,0,200,189,190,193],
[192,149,185,163,140,0,139,137,162],
[174,121,176,176,151,201,0,181,187],
[163,163,172,164,150,203,159,0,168],
[162,163,175,199,147,178,153,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,129,126,151,148,123,156,145],
[184,0,162,158,165,154,138,194,162],
[211,178,0,144,185,177,170,168,161],
[214,182,196,0,197,159,177,199,166],
[189,175,155,143,0,179,158,170,142],
[192,186,163,181,161,0,149,183,163],
[217,202,170,163,182,191,0,172,173],
[184,146,172,141,170,157,168,0,143],
[195,178,179,174,198,177,167,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,177,187,168,170,186,198],
[165,0,183,180,176,187,174,194,191],
[171,157,0,176,181,179,172,170,172],
[163,160,164,0,172,169,159,157,176],
[153,164,159,168,0,192,183,180,170],
[172,153,161,171,148,0,161,170,167],
[170,166,168,181,157,179,0,168,183],
[154,146,170,183,160,170,172,0,172],
[142,149,168,164,170,173,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,255,175,191,172,112,137,157],
[107,0,266,121,197,178,176,149,147],
[85,74,0,90,111,66,97,113,142],
[165,219,250,0,156,157,163,87,192],
[149,143,229,184,0,156,109,159,162],
[168,162,274,183,184,0,174,151,226],
[228,164,243,177,231,166,0,188,199],
[203,191,227,253,181,189,152,0,219],
[183,193,198,148,178,114,141,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,207,197,165,153,159,162,122],
[146,0,198,175,136,146,140,166,134],
[133,142,0,154,110,132,109,143,103],
[143,165,186,0,126,149,123,160,147],
[175,204,230,214,0,191,151,187,149],
[187,194,208,191,149,0,146,160,182],
[181,200,231,217,189,194,0,192,166],
[178,174,197,180,153,180,148,0,151],
[218,206,237,193,191,158,174,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,157,169,165,184,176,173,174],
[178,0,177,168,185,191,181,192,183],
[183,163,0,175,161,170,180,195,177],
[171,172,165,0,162,183,185,181,178],
[175,155,179,178,0,187,184,187,161],
[156,149,170,157,153,0,175,184,174],
[164,159,160,155,156,165,0,191,176],
[167,148,145,159,153,156,149,0,159],
[166,157,163,162,179,166,164,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,142,166,179,167,155,154],
[177,0,182,160,181,189,168,165,166],
[174,158,0,156,158,161,166,157,148],
[198,180,184,0,168,197,179,165,172],
[174,159,182,172,0,170,171,166,151],
[161,151,179,143,170,0,161,157,158],
[173,172,174,161,169,179,0,174,164],
[185,175,183,175,174,183,166,0,160],
[186,174,192,168,189,182,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,155,166,163,161,170,167,163],
[170,0,166,164,170,166,171,181,168],
[185,174,0,154,166,174,171,162,164],
[174,176,186,0,175,165,180,183,172],
[177,170,174,165,0,164,178,184,182],
[179,174,166,175,176,0,192,175,170],
[170,169,169,160,162,148,0,159,159],
[173,159,178,157,156,165,181,0,168],
[177,172,176,168,158,170,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,152,162,156,156,148,174,149],
[186,0,182,194,149,185,161,182,188],
[188,158,0,158,176,196,169,184,183],
[178,146,182,0,160,177,178,190,188],
[184,191,164,180,0,195,162,180,180],
[184,155,144,163,145,0,130,165,148],
[192,179,171,162,178,210,0,191,201],
[166,158,156,150,160,175,149,0,172],
[191,152,157,152,160,192,139,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,176,160,165,175,172,157,173],
[159,0,165,161,160,169,149,157,153],
[164,175,0,153,164,171,162,163,160],
[180,179,187,0,179,185,164,171,173],
[175,180,176,161,0,176,158,175,164],
[165,171,169,155,164,0,152,156,150],
[168,191,178,176,182,188,0,182,179],
[183,183,177,169,165,184,158,0,167],
[167,187,180,167,176,190,161,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,199,201,145,183,165,195,189],
[156,0,185,174,167,164,159,153,191],
[141,155,0,198,147,141,141,147,184],
[139,166,142,0,134,148,132,150,161],
[195,173,193,206,0,173,169,201,188],
[157,176,199,192,167,0,172,182,183],
[175,181,199,208,171,168,0,181,194],
[145,187,193,190,139,158,159,0,175],
[151,149,156,179,152,157,146,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,164,165,166,154,157,165],
[162,0,155,156,154,157,155,139,154],
[182,185,0,174,164,183,167,164,172],
[176,184,166,0,157,166,153,159,162],
[175,186,176,183,0,176,172,158,168],
[174,183,157,174,164,0,165,172,161],
[186,185,173,187,168,175,0,157,173],
[183,201,176,181,182,168,183,0,176],
[175,186,168,178,172,179,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,154,199,146,159,185,164],
[156,0,175,151,181,157,139,169,190],
[173,165,0,171,184,149,167,167,181],
[186,189,169,0,191,174,147,214,200],
[141,159,156,149,0,124,150,156,176],
[194,183,191,166,216,0,167,203,191],
[181,201,173,193,190,173,0,159,210],
[155,171,173,126,184,137,181,0,175],
[176,150,159,140,164,149,130,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,185,167,193,183,167,175],
[167,0,166,185,172,181,168,162,175],
[166,174,0,176,168,181,174,163,167],
[155,155,164,0,159,168,165,157,163],
[173,168,172,181,0,175,172,173,171],
[147,159,159,172,165,0,157,164,148],
[157,172,166,175,168,183,0,167,176],
[173,178,177,183,167,176,173,0,170],
[165,165,173,177,169,192,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,173,179,177,155,182,166,179],
[182,0,162,159,169,155,185,181,188],
[167,178,0,165,180,171,194,176,177],
[161,181,175,0,164,169,182,171,177],
[163,171,160,176,0,166,162,175,180],
[185,185,169,171,174,0,172,163,193],
[158,155,146,158,178,168,0,167,184],
[174,159,164,169,165,177,173,0,175],
[161,152,163,163,160,147,156,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,164,163,168,188,182,157,149],
[179,0,173,175,173,180,181,152,164],
[176,167,0,179,166,192,185,164,152],
[177,165,161,0,169,182,161,149,149],
[172,167,174,171,0,174,164,171,160],
[152,160,148,158,166,0,161,151,154],
[158,159,155,179,176,179,0,170,171],
[183,188,176,191,169,189,170,0,160],
[191,176,188,191,180,186,169,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,134,149,140,138,150,169,179],
[205,0,176,202,171,165,173,180,184],
[206,164,0,181,151,153,149,151,156],
[191,138,159,0,153,163,149,158,161],
[200,169,189,187,0,137,152,154,167],
[202,175,187,177,203,0,145,180,171],
[190,167,191,191,188,195,0,183,202],
[171,160,189,182,186,160,157,0,213],
[161,156,184,179,173,169,138,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,189,167,183,171,175,174,161],
[162,0,169,156,172,175,179,173,162],
[151,171,0,167,183,164,163,171,163],
[173,184,173,0,171,157,170,167,159],
[157,168,157,169,0,148,171,150,166],
[169,165,176,183,192,0,170,165,164],
[165,161,177,170,169,170,0,167,170],
[166,167,169,173,190,175,173,0,163],
[179,178,177,181,174,176,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,181,170,164,183,189,163,171],
[173,0,167,178,172,182,175,154,172],
[159,173,0,171,162,168,174,163,168],
[170,162,169,0,161,164,184,160,187],
[176,168,178,179,0,172,172,173,183],
[157,158,172,176,168,0,168,159,163],
[151,165,166,156,168,172,0,161,183],
[177,186,177,180,167,181,179,0,191],
[169,168,172,153,157,177,157,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,219,112,117,64,139,110,87],
[253,0,191,229,210,181,169,219,221],
[121,149,0,81,108,110,130,174,117],
[228,111,259,0,185,100,169,210,152],
[223,130,232,155,0,137,171,155,127],
[276,159,230,240,203,0,204,187,127],
[201,171,210,171,169,136,0,195,135],
[230,121,166,130,185,153,145,0,194],
[253,119,223,188,213,213,205,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,164,194,172,171,169,185,172],
[169,0,162,168,163,170,164,175,163],
[176,178,0,188,182,179,169,191,177],
[146,172,152,0,153,170,154,174,177],
[168,177,158,187,0,177,174,172,171],
[169,170,161,170,163,0,153,175,159],
[171,176,171,186,166,187,0,181,174],
[155,165,149,166,168,165,159,0,162],
[168,177,163,163,169,181,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,178,147,242,216,178,228,169],
[161,0,108,139,149,176,179,144,152],
[162,232,0,178,244,171,190,163,152],
[193,201,162,0,203,215,237,182,215],
[98,191,96,137,0,196,159,122,164],
[124,164,169,125,144,0,155,150,181],
[162,161,150,103,181,185,0,164,143],
[112,196,177,158,218,190,176,0,185],
[171,188,188,125,176,159,197,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,176,175,169,161,190,162,162],
[154,0,181,163,183,170,199,172,149],
[164,159,0,176,172,162,203,157,168],
[165,177,164,0,178,172,193,172,165],
[171,157,168,162,0,153,184,164,158],
[179,170,178,168,187,0,181,164,158],
[150,141,137,147,156,159,0,142,142],
[178,168,183,168,176,176,198,0,174],
[178,191,172,175,182,182,198,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,171,192,182,194,196,188],
[161,0,172,199,176,201,162,209,161],
[174,168,0,154,210,175,171,206,176],
[169,141,186,0,163,171,198,168,181],
[148,164,130,177,0,158,151,165,191],
[158,139,165,169,182,0,191,184,185],
[146,178,169,142,189,149,0,168,197],
[144,131,134,172,175,156,172,0,185],
[152,179,164,159,149,155,143,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,198,193,143,177,197,187,191],
[149,0,184,174,190,183,211,139,172],
[142,156,0,207,143,171,145,163,152],
[147,166,133,0,164,219,127,149,115],
[197,150,197,176,0,200,167,163,180],
[163,157,169,121,140,0,129,152,141],
[143,129,195,213,173,211,0,165,166],
[153,201,177,191,177,188,175,0,169],
[149,168,188,225,160,199,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,154,177,167,150,170,165,165],
[185,0,175,197,177,181,180,169,163],
[186,165,0,199,160,170,191,172,173],
[163,143,141,0,145,152,154,153,158],
[173,163,180,195,0,168,180,173,181],
[190,159,170,188,172,0,170,170,175],
[170,160,149,186,160,170,0,171,154],
[175,171,168,187,167,170,169,0,173],
[175,177,167,182,159,165,186,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,201,179,180,184,187,180,158],
[162,0,175,155,171,154,168,171,150],
[139,165,0,157,158,167,170,171,145],
[161,185,183,0,179,176,203,150,161],
[160,169,182,161,0,172,187,161,161],
[156,186,173,164,168,0,191,175,170],
[153,172,170,137,153,149,0,161,150],
[160,169,169,190,179,165,179,0,146],
[182,190,195,179,179,170,190,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,170,178,181,186,181,172,179],
[175,0,182,184,177,183,165,160,175],
[170,158,0,168,170,172,178,140,156],
[162,156,172,0,164,172,166,153,171],
[159,163,170,176,0,167,168,152,177],
[154,157,168,168,173,0,163,152,167],
[159,175,162,174,172,177,0,158,168],
[168,180,200,187,188,188,182,0,179],
[161,165,184,169,163,173,172,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,104,162,139,116,123,141,162],
[199,0,184,176,171,144,152,163,157],
[236,156,0,197,201,183,141,177,181],
[178,164,143,0,158,130,119,148,165],
[201,169,139,182,0,141,148,167,200],
[224,196,157,210,199,0,194,180,163],
[217,188,199,221,192,146,0,223,189],
[199,177,163,192,173,160,117,0,198],
[178,183,159,175,140,177,151,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,116,275,286,162,162,95,248],
[207,0,116,245,191,67,78,205,153],
[224,224,0,224,170,84,237,138,237],
[65,95,116,0,49,78,162,149,78],
[54,149,170,291,0,205,162,138,205],
[178,273,256,262,135,0,286,187,153],
[178,262,103,178,178,54,0,138,207],
[245,135,202,191,202,153,202,0,153],
[92,187,103,262,135,187,133,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,171,173,183,163,171,166],
[167,0,180,166,166,181,170,172,184],
[169,160,0,182,167,186,162,173,166],
[169,174,158,0,163,185,152,166,172],
[167,174,173,177,0,175,154,163,167],
[157,159,154,155,165,0,154,160,153],
[177,170,178,188,186,186,0,179,194],
[169,168,167,174,177,180,161,0,171],
[174,156,174,168,173,187,146,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,190,192,166,136,144,144,189],
[188,0,182,191,171,180,157,150,205],
[150,158,0,175,163,146,147,146,161],
[148,149,165,0,155,152,137,135,188],
[174,169,177,185,0,170,151,158,193],
[204,160,194,188,170,0,171,165,209],
[196,183,193,203,189,169,0,185,214],
[196,190,194,205,182,175,155,0,213],
[151,135,179,152,147,131,126,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,163,172,166,166,163,161,178],
[173,0,163,183,167,162,173,179,177],
[177,177,0,179,168,178,175,169,174],
[168,157,161,0,156,161,167,161,169],
[174,173,172,184,0,170,175,163,174],
[174,178,162,179,170,0,179,165,172],
[177,167,165,173,165,161,0,164,178],
[179,161,171,179,177,175,176,0,176],
[162,163,166,171,166,168,162,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,168,197,210,182,197,171,167],
[148,0,140,170,178,199,145,141,165],
[172,200,0,162,181,186,196,153,191],
[143,170,178,0,176,212,187,157,169],
[130,162,159,164,0,199,157,142,130],
[158,141,154,128,141,0,163,146,144],
[143,195,144,153,183,177,0,169,166],
[169,199,187,183,198,194,171,0,194],
[173,175,149,171,210,196,174,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,181,181,183,169,170,192],
[165,0,168,151,172,160,158,160,180],
[162,172,0,162,182,173,174,149,175],
[159,189,178,0,173,190,175,174,189],
[159,168,158,167,0,167,160,165,166],
[157,180,167,150,173,0,158,148,185],
[171,182,166,165,180,182,0,160,182],
[170,180,191,166,175,192,180,0,187],
[148,160,165,151,174,155,158,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,156,153,174,155,185,166,172],
[160,0,166,142,187,172,185,170,164],
[184,174,0,154,168,180,174,191,165],
[187,198,186,0,198,164,200,200,183],
[166,153,172,142,0,157,169,165,155],
[185,168,160,176,183,0,189,192,171],
[155,155,166,140,171,151,0,171,176],
[174,170,149,140,175,148,169,0,156],
[168,176,175,157,185,169,164,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,171,172,159,170,188,200,175],
[155,0,154,161,159,159,163,178,170],
[169,186,0,158,173,175,179,195,166],
[168,179,182,0,173,189,170,191,184],
[181,181,167,167,0,170,184,205,175],
[170,181,165,151,170,0,158,201,180],
[152,177,161,170,156,182,0,184,175],
[140,162,145,149,135,139,156,0,164],
[165,170,174,156,165,160,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,172,168,167,165,170,163],
[171,0,164,185,184,174,176,180,173],
[176,176,0,183,173,177,165,180,179],
[168,155,157,0,184,172,164,181,169],
[172,156,167,156,0,166,162,180,159],
[173,166,163,168,174,0,158,177,161],
[175,164,175,176,178,182,0,184,172],
[170,160,160,159,160,163,156,0,162],
[177,167,161,171,181,179,168,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,183,162,162,176,160,174,168],
[177,0,179,160,165,181,159,192,166],
[157,161,0,150,147,173,138,167,151],
[178,180,190,0,154,169,178,184,164],
[178,175,193,186,0,184,168,191,173],
[164,159,167,171,156,0,171,178,152],
[180,181,202,162,172,169,0,179,181],
[166,148,173,156,149,162,161,0,166],
[172,174,189,176,167,188,159,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,172,189,188,197,152,180,173],
[156,0,173,158,155,183,159,163,171],
[168,167,0,171,156,187,151,164,171],
[151,182,169,0,166,170,163,172,176],
[152,185,184,174,0,182,171,166,165],
[143,157,153,170,158,0,165,166,172],
[188,181,189,177,169,175,0,179,169],
[160,177,176,168,174,174,161,0,162],
[167,169,169,164,175,168,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,150,139,157,158,158,146,202],
[155,0,155,151,150,154,176,144,163],
[190,185,0,177,196,184,168,147,210],
[201,189,163,0,194,189,178,199,218],
[183,190,144,146,0,194,156,181,170],
[182,186,156,151,146,0,170,152,175],
[182,164,172,162,184,170,0,142,181],
[194,196,193,141,159,188,198,0,192],
[138,177,130,122,170,165,159,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,171,164,188,162,172,180,182],
[155,0,181,174,180,177,175,179,175],
[169,159,0,164,167,161,165,175,188],
[176,166,176,0,184,169,180,166,182],
[152,160,173,156,0,164,171,175,167],
[178,163,179,171,176,0,166,174,186],
[168,165,175,160,169,174,0,154,174],
[160,161,165,174,165,166,186,0,180],
[158,165,152,158,173,154,166,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,174,172,162,179,188,168,171],
[180,0,184,172,151,181,187,156,153],
[166,156,0,146,146,165,174,168,177],
[168,168,194,0,172,169,184,192,166],
[178,189,194,168,0,171,190,186,168],
[161,159,175,171,169,0,181,168,160],
[152,153,166,156,150,159,0,176,161],
[172,184,172,148,154,172,164,0,150],
[169,187,163,174,172,180,179,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,157,153,170,157,176,154,157],
[167,0,188,164,188,154,157,169,144],
[183,152,0,155,167,159,128,150,149],
[187,176,185,0,186,183,173,160,182],
[170,152,173,154,0,169,139,147,145],
[183,186,181,157,171,0,158,171,177],
[164,183,212,167,201,182,0,161,173],
[186,171,190,180,193,169,179,0,172],
[183,196,191,158,195,163,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,33,18,136,168,33,205,136],
[135,0,135,0,121,153,135,18,150],
[307,205,0,69,205,222,219,190,205],
[322,340,271,0,340,168,168,340,271],
[204,219,135,0,0,135,135,69,150],
[172,187,118,172,205,0,15,172,187],
[307,205,121,172,205,325,0,190,205],
[135,322,150,0,271,168,150,0,253],
[204,190,135,69,190,153,135,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,164,187,133,155,152,161,140],
[207,0,192,184,165,180,202,174,176],
[176,148,0,207,154,175,176,163,166],
[153,156,133,0,124,160,149,155,129],
[207,175,186,216,0,191,181,189,165],
[185,160,165,180,149,0,148,180,176],
[188,138,164,191,159,192,0,197,156],
[179,166,177,185,151,160,143,0,157],
[200,164,174,211,175,164,184,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,175,185,180,175,178,174,180],
[172,0,191,200,166,186,178,161,189],
[165,149,0,186,156,169,166,162,177],
[155,140,154,0,163,167,153,155,184],
[160,174,184,177,0,185,174,150,177],
[165,154,171,173,155,0,175,176,184],
[162,162,174,187,166,165,0,155,161],
[166,179,178,185,190,164,185,0,189],
[160,151,163,156,163,156,179,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,168,181,181,172,179,184,182],
[158,0,155,174,168,155,169,167,152],
[172,185,0,167,194,170,175,156,157],
[159,166,173,0,171,155,159,183,156],
[159,172,146,169,0,162,158,162,163],
[168,185,170,185,178,0,179,179,168],
[161,171,165,181,182,161,0,161,169],
[156,173,184,157,178,161,179,0,174],
[158,188,183,184,177,172,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,159,171,178,164,150,177,163],
[174,0,159,177,169,170,174,170,163],
[181,181,0,186,176,175,171,183,168],
[169,163,154,0,161,160,155,169,147],
[162,171,164,179,0,165,174,174,166],
[176,170,165,180,175,0,175,183,163],
[190,166,169,185,166,165,0,187,170],
[163,170,157,171,166,157,153,0,162],
[177,177,172,193,174,177,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,163,180,169,172,179,173,167],
[167,0,171,186,157,159,196,157,166],
[177,169,0,168,156,168,159,136,175],
[160,154,172,0,171,162,183,156,167],
[171,183,184,169,0,178,203,178,190],
[168,181,172,178,162,0,151,165,164],
[161,144,181,157,137,189,0,150,161],
[167,183,204,184,162,175,190,0,164],
[173,174,165,173,150,176,179,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,231,201,249,204,169,211,165],
[143,0,247,211,208,189,179,182,198],
[109,93,0,210,150,203,141,157,115],
[139,129,130,0,158,151,181,158,125],
[91,132,190,182,0,134,104,133,125],
[136,151,137,189,206,0,169,165,175],
[171,161,199,159,236,171,0,200,144],
[129,158,183,182,207,175,140,0,138],
[175,142,225,215,215,165,196,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,179,190,179,165,177,191,188],
[152,0,165,157,162,160,157,164,156],
[161,175,0,154,183,147,163,171,173],
[150,183,186,0,161,162,189,190,168],
[161,178,157,179,0,167,172,195,171],
[175,180,193,178,173,0,169,185,171],
[163,183,177,151,168,171,0,169,195],
[149,176,169,150,145,155,171,0,167],
[152,184,167,172,169,169,145,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,157,156,183,186,152,135,183],
[180,0,152,173,214,180,168,166,181],
[183,188,0,182,204,189,164,182,190],
[184,167,158,0,175,169,169,166,168],
[157,126,136,165,0,154,150,144,160],
[154,160,151,171,186,0,153,139,163],
[188,172,176,171,190,187,0,155,166],
[205,174,158,174,196,201,185,0,206],
[157,159,150,172,180,177,174,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,186,171,183,136,173,194,175],
[150,0,177,162,164,150,174,184,158],
[154,163,0,165,168,153,156,159,163],
[169,178,175,0,181,147,187,182,148],
[157,176,172,159,0,132,159,173,142],
[204,190,187,193,208,0,166,158,191],
[167,166,184,153,181,174,0,185,180],
[146,156,181,158,167,182,155,0,149],
[165,182,177,192,198,149,160,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,165,171,161,194,152,162,161],
[195,0,177,160,182,189,175,182,176],
[175,163,0,155,169,165,149,155,157],
[169,180,185,0,160,178,166,162,160],
[179,158,171,180,0,176,154,153,166],
[146,151,175,162,164,0,158,163,165],
[188,165,191,174,186,182,0,175,170],
[178,158,185,178,187,177,165,0,172],
[179,164,183,180,174,175,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,164,174,183,155,203,162,166],
[152,0,156,158,163,150,174,162,155],
[176,184,0,182,180,181,184,166,181],
[166,182,158,0,173,170,177,166,155],
[157,177,160,167,0,175,191,173,173],
[185,190,159,170,165,0,187,164,149],
[137,166,156,163,149,153,0,158,140],
[178,178,174,174,167,176,182,0,168],
[174,185,159,185,167,191,200,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,170,157,161,162,148,154],
[179,0,172,166,171,179,167,168,172],
[177,168,0,172,160,187,165,175,154],
[170,174,168,0,158,156,164,165,157],
[183,169,180,182,0,181,166,176,154],
[179,161,153,184,159,0,180,160,164],
[178,173,175,176,174,160,0,176,166],
[192,172,165,175,164,180,164,0,156],
[186,168,186,183,186,176,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,159,153,149,160,157,182,164],
[172,0,161,169,163,163,168,170,161],
[181,179,0,160,157,166,169,184,183],
[187,171,180,0,170,185,174,192,173],
[191,177,183,170,0,179,179,190,180],
[180,177,174,155,161,0,162,185,156],
[183,172,171,166,161,178,0,178,172],
[158,170,156,148,150,155,162,0,154],
[176,179,157,167,160,184,168,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,153,133,144,156,163,178,164],
[236,0,172,182,144,201,207,234,191],
[187,168,0,172,195,176,172,207,186],
[207,158,168,0,151,183,203,188,217],
[196,196,145,189,0,168,195,205,180],
[184,139,164,157,172,0,208,183,181],
[177,133,168,137,145,132,0,195,152],
[162,106,133,152,135,157,145,0,152],
[176,149,154,123,160,159,188,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,169,170,187,204,185,176,177],
[148,0,164,156,150,149,167,152,134],
[171,176,0,180,164,185,165,158,159],
[170,184,160,0,135,158,186,169,134],
[153,190,176,205,0,184,168,159,164],
[136,191,155,182,156,0,172,160,152],
[155,173,175,154,172,168,0,171,163],
[164,188,182,171,181,180,169,0,179],
[163,206,181,206,176,188,177,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,166,157,159,171,170,147,149],
[195,0,182,173,175,187,170,171,174],
[174,158,0,150,170,185,170,170,177],
[183,167,190,0,179,180,179,173,170],
[181,165,170,161,0,183,172,169,164],
[169,153,155,160,157,0,166,143,150],
[170,170,170,161,168,174,0,159,149],
[193,169,170,167,171,197,181,0,174],
[191,166,163,170,176,190,191,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,180,166,183,180,216,221,210],
[145,0,143,129,141,124,192,205,164],
[160,197,0,168,174,179,198,230,203],
[174,211,172,0,169,183,182,208,212],
[157,199,166,171,0,176,210,213,177],
[160,216,161,157,164,0,173,217,185],
[124,148,142,158,130,167,0,184,156],
[119,135,110,132,127,123,156,0,176],
[130,176,137,128,163,155,184,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,180,167,169,165,170,180],
[164,0,176,170,163,156,157,174,177],
[167,164,0,161,159,163,153,171,166],
[160,170,179,0,160,170,156,180,179],
[173,177,181,180,0,169,161,184,172],
[171,184,177,170,171,0,179,183,180],
[175,183,187,184,179,161,0,176,189],
[170,166,169,160,156,157,164,0,175],
[160,163,174,161,168,160,151,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,134,112,140,108,148,105,103],
[216,0,214,194,188,194,230,175,148],
[206,126,0,185,214,178,214,169,174],
[228,146,155,0,133,149,167,169,138],
[200,152,126,207,0,159,190,167,196],
[232,146,162,191,181,0,170,150,145],
[192,110,126,173,150,170,0,142,135],
[235,165,171,171,173,190,198,0,175],
[237,192,166,202,144,195,205,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,146,171,340,122,97,243,130],
[0,0,49,74,162,25,0,155,49],
[194,291,0,106,291,291,291,194,194],
[169,266,234,0,315,185,185,194,169],
[0,178,49,25,0,122,0,106,0],
[218,315,49,155,218,0,130,243,130],
[243,340,49,155,340,210,0,243,243],
[97,185,146,146,234,97,97,0,146],
[210,291,146,171,340,210,97,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,161,161,162,166,163,156],
[169,0,162,151,165,164,153,174,158],
[166,178,0,174,164,175,169,176,146],
[179,189,166,0,176,179,175,185,176],
[179,175,176,164,0,178,171,173,154],
[178,176,165,161,162,0,174,176,157],
[174,187,171,165,169,166,0,172,152],
[177,166,164,155,167,164,168,0,148],
[184,182,194,164,186,183,188,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,171,180,161,177,192,179,178],
[142,0,192,171,156,152,166,163,122],
[169,148,0,166,127,186,192,132,133],
[160,169,174,0,181,160,194,189,139],
[179,184,213,159,0,173,184,179,144],
[163,188,154,180,167,0,192,137,132],
[148,174,148,146,156,148,0,136,138],
[161,177,208,151,161,203,204,0,142],
[162,218,207,201,196,208,202,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,158,172,157,161,161,157,169],
[198,0,190,180,178,176,163,172,180],
[182,150,0,194,148,168,158,165,173],
[168,160,146,0,158,168,163,185,178],
[183,162,192,182,0,174,176,173,177],
[179,164,172,172,166,0,151,183,158],
[179,177,182,177,164,189,0,194,174],
[183,168,175,155,167,157,146,0,164],
[171,160,167,162,163,182,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,175,175,183,168,176,180],
[167,0,171,166,163,169,162,170,171],
[159,169,0,153,156,162,166,168,148],
[165,174,187,0,169,160,166,168,168],
[165,177,184,171,0,170,165,168,183],
[157,171,178,180,170,0,174,179,174],
[172,178,174,174,175,166,0,180,172],
[164,170,172,172,172,161,160,0,165],
[160,169,192,172,157,166,168,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,178,180,165,163,172,193],
[163,0,168,158,160,145,141,174,201],
[164,172,0,192,174,181,156,181,192],
[162,182,148,0,158,158,179,164,204],
[160,180,166,182,0,166,164,179,182],
[175,195,159,182,174,0,173,171,193],
[177,199,184,161,176,167,0,188,193],
[168,166,159,176,161,169,152,0,170],
[147,139,148,136,158,147,147,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,127,170,148,129,172,74,162],
[188,0,245,252,165,196,238,179,138],
[213,95,0,174,80,102,182,87,135],
[170,88,166,0,135,130,148,112,157],
[192,175,260,205,0,187,239,170,152],
[211,144,238,210,153,0,149,117,184],
[168,102,158,192,101,191,0,117,147],
[266,161,253,228,170,223,223,0,204],
[178,202,205,183,188,156,193,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,186,182,178,184,184,161,183],
[157,0,169,165,172,181,168,171,166],
[154,171,0,178,168,175,177,168,159],
[158,175,162,0,168,166,173,168,154],
[162,168,172,172,0,187,176,155,167],
[156,159,165,174,153,0,157,156,151],
[156,172,163,167,164,183,0,162,158],
[179,169,172,172,185,184,178,0,169],
[157,174,181,186,173,189,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,151,166,170,174,148,166],
[165,0,157,141,153,167,156,148,170],
[168,183,0,146,165,169,165,157,165],
[189,199,194,0,169,188,185,167,197],
[174,187,175,171,0,164,171,178,179],
[170,173,171,152,176,0,171,167,169],
[166,184,175,155,169,169,0,158,153],
[192,192,183,173,162,173,182,0,170],
[174,170,175,143,161,171,187,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,171,148,168,192,152,176,184],
[146,0,141,138,158,163,173,158,168],
[169,199,0,172,191,189,184,179,201],
[192,202,168,0,174,190,177,169,205],
[172,182,149,166,0,189,162,159,186],
[148,177,151,150,151,0,178,152,167],
[188,167,156,163,178,162,0,172,183],
[164,182,161,171,181,188,168,0,195],
[156,172,139,135,154,173,157,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,156,164,155,155,152,173,146],
[183,0,176,189,186,170,183,174,162],
[184,164,0,164,172,155,159,173,149],
[176,151,176,0,169,163,150,186,148],
[185,154,168,171,0,158,160,179,163],
[185,170,185,177,182,0,167,182,162],
[188,157,181,190,180,173,0,176,171],
[167,166,167,154,161,158,164,0,143],
[194,178,191,192,177,178,169,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,180,158,182,167,175,161,170],
[179,0,169,168,181,164,174,164,170],
[160,171,0,174,183,176,174,160,167],
[182,172,166,0,182,162,174,165,165],
[158,159,157,158,0,158,157,156,149],
[173,176,164,178,182,0,179,167,159],
[165,166,166,166,183,161,0,172,161],
[179,176,180,175,184,173,168,0,174],
[170,170,173,175,191,181,179,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,172,170,197,164,170,194,184],
[149,0,180,164,158,169,163,181,180],
[168,160,0,165,175,145,146,182,192],
[170,176,175,0,179,172,175,183,182],
[143,182,165,161,0,167,161,187,195],
[176,171,195,168,173,0,190,180,185],
[170,177,194,165,179,150,0,173,179],
[146,159,158,157,153,160,167,0,187],
[156,160,148,158,145,155,161,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,183,143,161,165,144,176,159],
[186,0,196,171,175,186,169,162,158],
[157,144,0,135,161,172,133,175,152],
[197,169,205,0,211,195,214,199,172],
[179,165,179,129,0,174,170,186,161],
[175,154,168,145,166,0,168,159,159],
[196,171,207,126,170,172,0,168,166],
[164,178,165,141,154,181,172,0,173],
[181,182,188,168,179,181,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,173,162,163,160,161,179,154],
[168,0,180,181,167,167,159,177,169],
[167,160,0,170,165,160,167,180,164],
[178,159,170,0,175,159,160,170,165],
[177,173,175,165,0,158,158,182,156],
[180,173,180,181,182,0,170,193,175],
[179,181,173,180,182,170,0,187,178],
[161,163,160,170,158,147,153,0,159],
[186,171,176,175,184,165,162,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,155,199,149,172,162,216,157],
[209,0,184,192,169,178,229,218,160],
[185,156,0,176,151,200,163,223,158],
[141,148,164,0,145,174,187,206,167],
[191,171,189,195,0,207,187,210,162],
[168,162,140,166,133,0,173,225,179],
[178,111,177,153,153,167,0,225,150],
[124,122,117,134,130,115,115,0,122],
[183,180,182,173,178,161,190,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,178,191,170,181,174,171,181],
[160,0,153,178,161,176,169,164,189],
[162,187,0,184,172,183,166,168,167],
[149,162,156,0,159,153,150,146,161],
[170,179,168,181,0,175,160,170,182],
[159,164,157,187,165,0,150,156,178],
[166,171,174,190,180,190,0,180,176],
[169,176,172,194,170,184,160,0,176],
[159,151,173,179,158,162,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,196,171,183,180,167,164,181],
[164,0,191,180,188,182,185,192,161],
[144,149,0,174,169,165,160,156,162],
[169,160,166,0,183,172,168,176,162],
[157,152,171,157,0,165,167,163,164],
[160,158,175,168,175,0,180,165,168],
[173,155,180,172,173,160,0,158,174],
[176,148,184,164,177,175,182,0,177],
[159,179,178,178,176,172,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,156,173,170,206,215,181,170],
[164,0,165,147,125,195,136,206,160],
[184,175,0,164,193,208,165,171,193],
[167,193,176,0,167,190,173,182,174],
[170,215,147,173,0,202,214,158,190],
[134,145,132,150,138,0,164,135,180],
[125,204,175,167,126,176,0,170,155],
[159,134,169,158,182,205,170,0,164],
[170,180,147,166,150,160,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,164,173,165,174,166,173],
[159,0,164,156,160,160,168,171,168],
[172,176,0,170,173,164,184,173,168],
[176,184,170,0,169,168,189,159,171],
[167,180,167,171,0,152,167,176,171],
[175,180,176,172,188,0,177,170,174],
[166,172,156,151,173,163,0,162,168],
[174,169,167,181,164,170,178,0,165],
[167,172,172,169,169,166,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,187,162,157,167,174,167,166],
[163,0,173,158,149,153,173,172,169],
[153,167,0,148,154,144,163,151,160],
[178,182,192,0,153,157,192,172,179],
[183,191,186,187,0,171,195,170,180],
[173,187,196,183,169,0,183,159,191],
[166,167,177,148,145,157,0,168,161],
[173,168,189,168,170,181,172,0,181],
[174,171,180,161,160,149,179,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,179,167,169,148,138,168,162],
[180,0,161,181,141,166,142,151,148],
[161,179,0,179,154,170,147,150,159],
[173,159,161,0,160,151,134,178,145],
[171,199,186,180,0,161,172,210,173],
[192,174,170,189,179,0,152,186,175],
[202,198,193,206,168,188,0,203,218],
[172,189,190,162,130,154,137,0,138],
[178,192,181,195,167,165,122,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,187,176,183,171,170,166],
[165,0,135,185,160,155,166,161,158],
[182,205,0,195,167,178,173,180,177],
[153,155,145,0,156,164,157,172,159],
[164,180,173,184,0,178,179,190,170],
[157,185,162,176,162,0,146,160,160],
[169,174,167,183,161,194,0,181,175],
[170,179,160,168,150,180,159,0,176],
[174,182,163,181,170,180,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,142,168,166,173,170,176],
[168,0,170,166,184,191,182,198,182],
[180,170,0,181,180,165,167,185,176],
[198,174,159,0,172,151,176,174,156],
[172,156,160,168,0,156,170,176,193],
[174,149,175,189,184,0,159,195,196],
[167,158,173,164,170,181,0,181,172],
[170,142,155,166,164,145,159,0,190],
[164,158,164,184,147,144,168,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,185,174,173,214,200,160,162],
[145,0,167,150,175,177,163,150,138],
[155,173,0,175,171,197,183,154,172],
[166,190,165,0,169,215,192,170,130],
[167,165,169,171,0,208,190,151,145],
[126,163,143,125,132,0,134,121,129],
[140,177,157,148,150,206,0,157,135],
[180,190,186,170,189,219,183,0,181],
[178,202,168,210,195,211,205,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,174,180,162,172,184,171],
[159,0,168,185,165,168,165,170,165],
[163,172,0,168,176,162,162,171,163],
[166,155,172,0,176,167,157,182,158],
[160,175,164,164,0,160,153,176,163],
[178,172,178,173,180,0,170,169,175],
[168,175,178,183,187,170,0,180,168],
[156,170,169,158,164,171,160,0,155],
[169,175,177,182,177,165,172,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,192,182,159,153,167,163,163],
[192,0,200,186,195,161,187,182,172],
[148,140,0,149,160,160,153,151,154],
[158,154,191,0,180,171,177,173,160],
[181,145,180,160,0,156,163,161,153],
[187,179,180,169,184,0,172,163,163],
[173,153,187,163,177,168,0,169,164],
[177,158,189,167,179,177,171,0,165],
[177,168,186,180,187,177,176,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,189,185,180,162,181,174,198],
[123,0,162,148,173,151,167,156,151],
[151,178,0,174,155,137,164,164,165],
[155,192,166,0,172,145,183,163,165],
[160,167,185,168,0,153,168,164,167],
[178,189,203,195,187,0,180,196,168],
[159,173,176,157,172,160,0,160,151],
[166,184,176,177,176,144,180,0,171],
[142,189,175,175,173,172,189,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,155,160,150,177,146,160,172],
[188,0,155,202,182,164,166,189,180],
[185,185,0,178,151,196,166,184,171],
[180,138,162,0,142,190,154,147,164],
[190,158,189,198,0,184,195,189,189],
[163,176,144,150,156,0,157,170,193],
[194,174,174,186,145,183,0,204,202],
[180,151,156,193,151,170,136,0,164],
[168,160,169,176,151,147,138,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,162,170,174,158,186,170],
[177,0,182,168,172,155,159,182,165],
[173,158,0,160,168,160,146,183,171],
[178,172,180,0,175,148,171,184,179],
[170,168,172,165,0,157,149,190,167],
[166,185,180,192,183,0,165,190,176],
[182,181,194,169,191,175,0,192,176],
[154,158,157,156,150,150,148,0,164],
[170,175,169,161,173,164,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,155,164,173,162,155,159],
[174,0,174,159,170,176,167,174,173],
[174,166,0,181,169,173,177,174,156],
[185,181,159,0,168,177,178,176,159],
[176,170,171,172,0,179,169,178,169],
[167,164,167,163,161,0,178,164,172],
[178,173,163,162,171,162,0,171,171],
[185,166,166,164,162,176,169,0,165],
[181,167,184,181,171,168,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,136,187,151,185,188,156,195],
[166,0,168,183,176,175,197,151,171],
[204,172,0,182,169,169,167,177,178],
[153,157,158,0,131,179,190,162,180],
[189,164,171,209,0,194,178,158,170],
[155,165,171,161,146,0,179,131,161],
[152,143,173,150,162,161,0,146,160],
[184,189,163,178,182,209,194,0,170],
[145,169,162,160,170,179,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,82,260,172,212,143,128,199],
[173,0,129,234,173,188,129,175,242],
[258,211,0,257,247,190,246,221,166],
[80,106,83,0,124,49,96,127,150],
[168,167,93,216,0,103,70,192,168],
[128,152,150,291,237,0,196,213,266],
[197,211,94,244,270,144,0,176,147],
[212,165,119,213,148,127,164,0,122],
[141,98,174,190,172,74,193,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,194,178,187,171,186,169],
[163,0,160,160,162,169,152,163,163],
[165,180,0,170,164,171,166,174,166],
[146,180,170,0,169,166,170,169,166],
[162,178,176,171,0,183,166,161,166],
[153,171,169,174,157,0,159,188,162],
[169,188,174,170,174,181,0,185,170],
[154,177,166,171,179,152,155,0,169],
[171,177,174,174,174,178,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,160,193,171,185,174,194,179],
[162,0,172,157,172,170,177,180,155],
[180,168,0,170,156,174,173,180,135],
[147,183,170,0,182,170,162,177,142],
[169,168,184,158,0,160,181,179,141],
[155,170,166,170,180,0,178,185,153],
[166,163,167,178,159,162,0,167,154],
[146,160,160,163,161,155,173,0,155],
[161,185,205,198,199,187,186,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,195,186,169,182,187,171,184],
[155,0,179,159,191,194,200,180,179],
[145,161,0,151,149,160,165,151,154],
[154,181,189,0,174,192,181,179,178],
[171,149,191,166,0,181,190,160,170],
[158,146,180,148,159,0,161,154,163],
[153,140,175,159,150,179,0,159,158],
[169,160,189,161,180,186,181,0,188],
[156,161,186,162,170,177,182,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,175,139,160,133,140,165,166],
[190,0,185,160,177,175,171,177,190],
[165,155,0,157,181,148,153,160,159],
[201,180,183,0,199,176,161,181,181],
[180,163,159,141,0,146,146,166,167],
[207,165,192,164,194,0,170,180,186],
[200,169,187,179,194,170,0,184,196],
[175,163,180,159,174,160,156,0,187],
[174,150,181,159,173,154,144,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,192,184,188,181,195,181,179],
[173,0,178,196,168,170,191,175,182],
[148,162,0,166,161,173,188,165,162],
[156,144,174,0,158,152,178,158,178],
[152,172,179,182,0,172,183,185,182],
[159,170,167,188,168,0,170,175,186],
[145,149,152,162,157,170,0,150,149],
[159,165,175,182,155,165,190,0,165],
[161,158,178,162,158,154,191,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,163,175,204,180,173,201,167],
[152,0,152,166,182,156,158,171,163],
[177,188,0,192,205,177,170,187,162],
[165,174,148,0,169,186,176,160,161],
[136,158,135,171,0,148,164,162,132],
[160,184,163,154,192,0,161,172,171],
[167,182,170,164,176,179,0,174,146],
[139,169,153,180,178,168,166,0,143],
[173,177,178,179,208,169,194,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,156,171,174,155,157,167,169],
[188,0,177,169,183,166,176,183,177],
[184,163,0,175,191,175,179,183,179],
[169,171,165,0,180,164,168,181,182],
[166,157,149,160,0,159,179,164,171],
[185,174,165,176,181,0,172,192,183],
[183,164,161,172,161,168,0,179,170],
[173,157,157,159,176,148,161,0,161],
[171,163,161,158,169,157,170,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,167,165,187,193,152,174,116],
[136,0,177,120,169,124,142,160,156],
[173,163,0,117,212,116,158,155,132],
[175,220,223,0,184,184,164,198,170],
[153,171,128,156,0,156,189,138,139],
[147,216,224,156,184,0,209,161,196],
[188,198,182,176,151,131,0,160,130],
[166,180,185,142,202,179,180,0,134],
[224,184,208,170,201,144,210,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,164,166,171,162,167,147,170],
[192,0,156,185,169,174,179,146,178],
[176,184,0,178,174,192,175,169,182],
[174,155,162,0,188,152,156,157,175],
[169,171,166,152,0,171,168,175,167],
[178,166,148,188,169,0,181,164,177],
[173,161,165,184,172,159,0,154,201],
[193,194,171,183,165,176,186,0,193],
[170,162,158,165,173,163,139,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,154,144,167,155,158,145,133],
[173,0,165,164,157,157,148,149,145],
[186,175,0,141,171,156,150,150,135],
[196,176,199,0,195,187,170,148,163],
[173,183,169,145,0,142,169,151,153],
[185,183,184,153,198,0,167,182,169],
[182,192,190,170,171,173,0,150,170],
[195,191,190,192,189,158,190,0,154],
[207,195,205,177,187,171,170,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,155,156,176,180,168,176,171],
[156,0,178,166,168,154,172,169,171],
[185,162,0,161,171,160,184,181,170],
[184,174,179,0,161,173,181,178,183],
[164,172,169,179,0,149,191,166,168],
[160,186,180,167,191,0,184,177,171],
[172,168,156,159,149,156,0,155,147],
[164,171,159,162,174,163,185,0,160],
[169,169,170,157,172,169,193,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,226,238,157,204,218,217,186],
[137,0,213,188,148,147,174,196,179],
[114,127,0,139,133,144,162,162,133],
[102,152,201,0,162,124,163,170,144],
[183,192,207,178,0,182,175,189,149],
[136,193,196,216,158,0,196,178,150],
[122,166,178,177,165,144,0,178,164],
[123,144,178,170,151,162,162,0,147],
[154,161,207,196,191,190,176,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,171,152,162,145,137,153,171],
[185,0,166,165,178,159,140,162,179],
[169,174,0,162,168,143,161,170,177],
[188,175,178,0,162,141,152,161,185],
[178,162,172,178,0,163,167,163,179],
[195,181,197,199,177,0,180,170,193],
[203,200,179,188,173,160,0,186,187],
[187,178,170,179,177,170,154,0,196],
[169,161,163,155,161,147,153,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,190,154,162,180,173,164,177],
[157,0,199,177,166,217,177,178,174],
[150,141,0,148,163,157,146,165,138],
[186,163,192,0,183,192,176,164,166],
[178,174,177,157,0,186,174,177,160],
[160,123,183,148,154,0,173,173,157],
[167,163,194,164,166,167,0,166,168],
[176,162,175,176,163,167,174,0,147],
[163,166,202,174,180,183,172,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,175,180,162,185,166,189,184],
[172,0,169,187,174,175,170,175,184],
[165,171,0,178,147,169,158,185,183],
[160,153,162,0,165,164,154,175,174],
[178,166,193,175,0,173,169,182,184],
[155,165,171,176,167,0,164,188,177],
[174,170,182,186,171,176,0,191,197],
[151,165,155,165,158,152,149,0,150],
[156,156,157,166,156,163,143,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,221,212,166,190,200,196,198],
[131,0,135,167,149,156,170,181,123],
[119,205,0,165,132,184,163,167,130],
[128,173,175,0,144,152,195,168,115],
[174,191,208,196,0,205,185,175,168],
[150,184,156,188,135,0,182,144,140],
[140,170,177,145,155,158,0,175,138],
[144,159,173,172,165,196,165,0,132],
[142,217,210,225,172,200,202,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,179,167,161,180,169,159,152],
[155,0,174,148,140,167,158,146,134],
[161,166,0,144,156,167,169,162,141],
[173,192,196,0,179,184,172,181,140],
[179,200,184,161,0,168,175,165,151],
[160,173,173,156,172,0,155,153,141],
[171,182,171,168,165,185,0,170,147],
[181,194,178,159,175,187,170,0,174],
[188,206,199,200,189,199,193,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,162,172,167,160,171,175,178],
[182,0,172,171,167,177,171,178,168],
[178,168,0,183,172,167,173,185,180],
[168,169,157,0,161,168,162,175,164],
[173,173,168,179,0,165,183,179,173],
[180,163,173,172,175,0,169,185,172],
[169,169,167,178,157,171,0,174,170],
[165,162,155,165,161,155,166,0,167],
[162,172,160,176,167,168,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,233,240,234,236,245,253,231],
[176,0,190,225,206,181,204,233,168],
[107,150,0,171,137,174,168,217,155],
[100,115,169,0,171,127,174,205,122],
[106,134,203,169,0,218,206,247,162],
[104,159,166,213,122,0,123,220,148],
[95,136,172,166,134,217,0,198,148],
[87,107,123,135,93,120,142,0,101],
[109,172,185,218,178,192,192,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,163,153,179,173,160,159,171],
[174,0,187,163,172,166,169,178,185],
[177,153,0,149,145,170,154,156,160],
[187,177,191,0,162,173,174,181,174],
[161,168,195,178,0,163,167,171,181],
[167,174,170,167,177,0,168,176,178],
[180,171,186,166,173,172,0,175,165],
[181,162,184,159,169,164,165,0,166],
[169,155,180,166,159,162,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,182,155,144,164,173,140,174],
[156,0,169,137,154,155,150,135,173],
[158,171,0,132,135,165,152,138,157],
[185,203,208,0,176,184,197,157,216],
[196,186,205,164,0,184,192,187,189],
[176,185,175,156,156,0,181,144,177],
[167,190,188,143,148,159,0,157,165],
[200,205,202,183,153,196,183,0,195],
[166,167,183,124,151,163,175,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,167,168,151,183,177,150,145],
[159,0,149,144,145,192,176,160,166],
[173,191,0,170,167,179,187,163,186],
[172,196,170,0,143,186,176,158,149],
[189,195,173,197,0,223,188,179,168],
[157,148,161,154,117,0,141,168,147],
[163,164,153,164,152,199,0,141,157],
[190,180,177,182,161,172,199,0,153],
[195,174,154,191,172,193,183,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,159,178,172,150,136,170],
[166,0,171,162,175,179,164,140,166],
[179,169,0,172,167,182,192,173,173],
[181,178,168,0,184,198,163,138,160],
[162,165,173,156,0,165,143,139,155],
[168,161,158,142,175,0,128,148,128],
[190,176,148,177,197,212,0,176,152],
[204,200,167,202,201,192,164,0,177],
[170,174,167,180,185,212,188,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,162,151,158,162,153,170],
[171,0,161,161,154,164,174,143,168],
[173,179,0,160,174,174,171,164,172],
[178,179,180,0,173,166,176,178,180],
[189,186,166,167,0,177,184,167,164],
[182,176,166,174,163,0,191,171,177],
[178,166,169,164,156,149,0,164,164],
[187,197,176,162,173,169,176,0,176],
[170,172,168,160,176,163,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,171,154,160,161,163,166,163],
[186,0,178,171,180,189,180,178,170],
[169,162,0,163,167,165,161,162,155],
[186,169,177,0,172,193,170,176,182],
[180,160,173,168,0,179,168,166,164],
[179,151,175,147,161,0,168,156,157],
[177,160,179,170,172,172,0,169,172],
[174,162,178,164,174,184,171,0,155],
[177,170,185,158,176,183,168,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,141,146,140,138,153,144,150],
[175,0,164,142,153,141,172,167,151],
[199,176,0,170,176,171,178,170,170],
[194,198,170,0,167,177,201,185,171],
[200,187,164,173,0,156,181,160,156],
[202,199,169,163,184,0,184,188,177],
[187,168,162,139,159,156,0,168,175],
[196,173,170,155,180,152,172,0,153],
[190,189,170,169,184,163,165,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,178,181,178,173,190,189],
[163,0,158,150,168,160,152,174,179],
[172,182,0,168,188,175,176,182,176],
[162,190,172,0,190,178,170,194,183],
[159,172,152,150,0,153,157,167,167],
[162,180,165,162,187,0,174,189,162],
[167,188,164,170,183,166,0,181,177],
[150,166,158,146,173,151,159,0,159],
[151,161,164,157,173,178,163,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,176,181,179,199,189,189,167],
[136,0,144,125,151,181,127,177,147],
[164,196,0,151,178,199,164,168,162],
[159,215,189,0,175,188,186,188,175],
[161,189,162,165,0,198,181,186,173],
[141,159,141,152,142,0,160,170,151],
[151,213,176,154,159,180,0,211,156],
[151,163,172,152,154,170,129,0,139],
[173,193,178,165,167,189,184,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,200,210,158,220,191,204,182],
[177,0,218,178,191,195,174,215,168],
[140,122,0,164,166,157,160,196,131],
[130,162,176,0,149,154,155,184,135],
[182,149,174,191,0,181,179,197,152],
[120,145,183,186,159,0,168,168,138],
[149,166,180,185,161,172,0,166,148],
[136,125,144,156,143,172,174,0,144],
[158,172,209,205,188,202,192,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,199,102,175,172,174,153,143],
[148,0,135,94,186,141,124,173,158],
[141,205,0,109,200,144,80,139,129],
[238,246,231,0,235,167,195,176,200],
[165,154,140,105,0,164,119,134,126],
[168,199,196,173,176,0,185,149,155],
[166,216,260,145,221,155,0,142,173],
[187,167,201,164,206,191,198,0,205],
[197,182,211,140,214,185,167,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,173,174,180,178,161,152],
[167,0,182,184,171,177,179,170,173],
[159,158,0,163,161,183,165,162,154],
[167,156,177,0,159,163,157,146,153],
[166,169,179,181,0,173,177,157,171],
[160,163,157,177,167,0,164,149,159],
[162,161,175,183,163,176,0,147,149],
[179,170,178,194,183,191,193,0,164],
[188,167,186,187,169,181,191,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,207,207,181,218,148,195,99],
[148,0,228,193,183,236,118,225,90],
[133,112,0,179,160,160,174,189,120],
[133,147,161,0,174,228,162,171,109],
[159,157,180,166,0,205,118,194,113],
[122,104,180,112,135,0,132,182,82],
[192,222,166,178,222,208,0,188,187],
[145,115,151,169,146,158,152,0,109],
[241,250,220,231,227,258,153,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,177,186,180,179,159,173],
[167,0,167,175,179,184,180,168,179],
[174,173,0,204,193,181,172,168,157],
[163,165,136,0,164,162,161,152,157],
[154,161,147,176,0,168,165,154,161],
[160,156,159,178,172,0,172,170,149],
[161,160,168,179,175,168,0,170,163],
[181,172,172,188,186,170,170,0,174],
[167,161,183,183,179,191,177,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,165,173,160,160,175,150,151],
[187,0,183,184,177,188,172,184,162],
[175,157,0,183,163,165,166,175,167],
[167,156,157,0,158,160,164,137,158],
[180,163,177,182,0,167,171,173,165],
[180,152,175,180,173,0,163,166,161],
[165,168,174,176,169,177,0,185,172],
[190,156,165,203,167,174,155,0,159],
[189,178,173,182,175,179,168,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,173,150,166,165,178,179,152],
[148,0,148,140,155,150,156,159,151],
[167,192,0,177,167,167,166,175,162],
[190,200,163,0,179,179,171,197,170],
[174,185,173,161,0,166,186,174,170],
[175,190,173,161,174,0,175,185,161],
[162,184,174,169,154,165,0,170,151],
[161,181,165,143,166,155,170,0,160],
[188,189,178,170,170,179,189,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,141,134,161,155,176,157,163],
[186,0,170,210,201,192,198,188,204],
[199,170,0,190,198,194,193,181,188],
[206,130,150,0,201,188,180,186,184],
[179,139,142,139,0,152,175,183,186],
[185,148,146,152,188,0,158,180,181],
[164,142,147,160,165,182,0,169,184],
[183,152,159,154,157,160,171,0,161],
[177,136,152,156,154,159,156,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,187,164,186,183,185,168],
[172,0,163,162,154,178,170,174,164],
[170,177,0,172,166,176,180,178,173],
[153,178,168,0,164,171,173,176,155],
[176,186,174,176,0,187,170,183,176],
[154,162,164,169,153,0,165,172,154],
[157,170,160,167,170,175,0,174,162],
[155,166,162,164,157,168,166,0,158],
[172,176,167,185,164,186,178,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,183,177,173,173,147,198],
[175,0,175,170,183,174,162,164,205],
[165,165,0,186,201,170,156,183,206],
[157,170,154,0,158,171,163,133,199],
[163,157,139,182,0,165,159,147,186],
[167,166,170,169,175,0,170,156,203],
[167,178,184,177,181,170,0,177,212],
[193,176,157,207,193,184,163,0,233],
[142,135,134,141,154,137,128,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,133,205,205,61,118,149,130],
[152,0,114,91,129,139,128,82,100],
[207,226,0,199,141,177,166,154,204],
[135,249,141,0,154,98,127,163,165],
[135,211,199,186,0,170,154,167,234],
[279,201,163,242,170,0,180,193,219],
[222,212,174,213,186,160,0,205,261],
[191,258,186,177,173,147,135,0,229],
[210,240,136,175,106,121,79,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,185,195,184,165,180,180],
[165,0,168,180,184,168,172,164,167],
[156,172,0,176,171,169,174,175,171],
[155,160,164,0,182,166,177,175,172],
[145,156,169,158,0,164,153,164,164],
[156,172,171,174,176,0,175,169,168],
[175,168,166,163,187,165,0,172,185],
[160,176,165,165,176,171,168,0,175],
[160,173,169,168,176,172,155,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,151,166,177,134,161,184,148],
[193,0,176,182,177,157,188,192,176],
[189,164,0,178,165,168,185,178,188],
[174,158,162,0,145,153,161,159,141],
[163,163,175,195,0,179,153,175,169],
[206,183,172,187,161,0,170,183,170],
[179,152,155,179,187,170,0,160,170],
[156,148,162,181,165,157,180,0,170],
[192,164,152,199,171,170,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,163,155,161,172,156,166,168],
[178,0,173,183,167,171,172,169,173],
[177,167,0,183,156,183,176,180,175],
[185,157,157,0,150,167,149,150,155],
[179,173,184,190,0,187,169,181,182],
[168,169,157,173,153,0,157,157,165],
[184,168,164,191,171,183,0,182,181],
[174,171,160,190,159,183,158,0,183],
[172,167,165,185,158,175,159,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,174,186,180,164,178,200],
[176,0,175,192,186,195,169,177,203],
[173,165,0,174,187,186,174,168,210],
[166,148,166,0,183,172,155,170,178],
[154,154,153,157,0,175,158,159,200],
[160,145,154,168,165,0,165,157,181],
[176,171,166,185,182,175,0,171,203],
[162,163,172,170,181,183,169,0,195],
[140,137,130,162,140,159,137,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,154,164,165,159,152,173,161],
[165,0,160,178,155,182,160,179,169],
[186,180,0,176,180,180,157,174,157],
[176,162,164,0,175,156,163,180,176],
[175,185,160,165,0,167,165,168,168],
[181,158,160,184,173,0,180,169,164],
[188,180,183,177,175,160,0,180,163],
[167,161,166,160,172,171,160,0,150],
[179,171,183,164,172,176,177,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,222,175,157,205,182,166,196],
[170,0,205,184,174,180,201,171,177],
[118,135,0,124,108,157,159,143,111],
[165,156,216,0,153,173,197,154,187],
[183,166,232,187,0,169,188,151,174],
[135,160,183,167,171,0,190,150,167],
[158,139,181,143,152,150,0,151,144],
[174,169,197,186,189,190,189,0,167],
[144,163,229,153,166,173,196,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,180,166,180,181,174,166,182],
[191,0,209,180,181,187,177,170,171],
[160,131,0,184,172,170,161,172,175],
[174,160,156,0,169,176,170,171,149],
[160,159,168,171,0,180,155,150,152],
[159,153,170,164,160,0,155,132,177],
[166,163,179,170,185,185,0,146,164],
[174,170,168,169,190,208,194,0,187],
[158,169,165,191,188,163,176,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,128,149,181,156,152,171,152],
[187,0,141,182,182,160,143,187,166],
[212,199,0,175,193,182,194,184,169],
[191,158,165,0,185,160,171,163,158],
[159,158,147,155,0,143,154,170,148],
[184,180,158,180,197,0,158,171,175],
[188,197,146,169,186,182,0,160,142],
[169,153,156,177,170,169,180,0,168],
[188,174,171,182,192,165,198,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,184,182,174,186,154,176,155],
[166,0,148,164,155,173,163,151,157],
[156,192,0,192,173,206,165,179,149],
[158,176,148,0,155,188,156,141,144],
[166,185,167,185,0,182,185,163,169],
[154,167,134,152,158,0,144,156,139],
[186,177,175,184,155,196,0,173,159],
[164,189,161,199,177,184,167,0,189],
[185,183,191,196,171,201,181,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,68,160,152,175,152,136,184],
[172,0,166,179,163,174,179,70,137],
[272,174,0,252,230,187,230,156,275],
[180,161,88,0,181,168,216,161,212],
[188,177,110,159,0,179,215,184,262],
[165,166,153,172,161,0,241,146,199],
[188,161,110,124,125,99,0,78,183],
[204,270,184,179,156,194,262,0,250],
[156,203,65,128,78,141,157,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,193,169,170,174,181,173,173],
[160,0,179,164,158,163,167,169,164],
[147,161,0,165,152,144,173,145,158],
[171,176,175,0,172,163,182,172,168],
[170,182,188,168,0,173,179,194,175],
[166,177,196,177,167,0,193,180,175],
[159,173,167,158,161,147,0,170,157],
[167,171,195,168,146,160,170,0,174],
[167,176,182,172,165,165,183,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,153,167,167,161,170,169,160],
[176,0,167,198,174,182,189,164,166],
[187,173,0,197,170,193,187,176,172],
[173,142,143,0,143,166,161,154,147],
[173,166,170,197,0,179,183,174,173],
[179,158,147,174,161,0,172,168,157],
[170,151,153,179,157,168,0,169,150],
[171,176,164,186,166,172,171,0,178],
[180,174,168,193,167,183,190,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,211,195,177,161,168,179,211],
[136,0,179,137,172,128,150,174,172],
[129,161,0,135,161,142,133,159,144],
[145,203,205,0,180,172,180,182,184],
[163,168,179,160,0,143,178,183,179],
[179,212,198,168,197,0,187,182,189],
[172,190,207,160,162,153,0,174,198],
[161,166,181,158,157,158,166,0,172],
[129,168,196,156,161,151,142,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,159,166,171,170,162,171,179],
[168,0,171,169,178,169,161,183,175],
[181,169,0,170,173,161,155,166,165],
[174,171,170,0,181,174,152,171,164],
[169,162,167,159,0,164,153,171,150],
[170,171,179,166,176,0,154,177,160],
[178,179,185,188,187,186,0,186,165],
[169,157,174,169,169,163,154,0,145],
[161,165,175,176,190,180,175,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,199,191,195,186,170,177,184],
[156,0,163,171,178,161,175,158,165],
[141,177,0,166,162,137,152,150,162],
[149,169,174,0,166,170,166,160,168],
[145,162,178,174,0,153,149,154,170],
[154,179,203,170,187,0,170,172,171],
[170,165,188,174,191,170,0,159,182],
[163,182,190,180,186,168,181,0,195],
[156,175,178,172,170,169,158,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,203,181,171,166,172,167,173],
[170,0,186,174,178,191,185,177,178],
[137,154,0,155,153,148,154,158,153],
[159,166,185,0,172,176,175,173,166],
[169,162,187,168,0,169,160,162,169],
[174,149,192,164,171,0,184,178,168],
[168,155,186,165,180,156,0,180,172],
[173,163,182,167,178,162,160,0,169],
[167,162,187,174,171,172,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,184,185,174,185,183,176],
[163,0,159,171,173,163,176,176,146],
[173,181,0,169,194,195,198,164,170],
[156,169,171,0,179,175,168,163,176],
[155,167,146,161,0,155,158,164,151],
[166,177,145,165,185,0,163,153,167],
[155,164,142,172,182,177,0,160,153],
[157,164,176,177,176,187,180,0,192],
[164,194,170,164,189,173,187,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,165,197,206,191,201,200,200],
[154,0,133,170,185,164,152,176,200],
[175,207,0,178,196,194,169,194,210],
[143,170,162,0,153,144,145,173,166],
[134,155,144,187,0,167,141,156,164],
[149,176,146,196,173,0,150,177,209],
[139,188,171,195,199,190,0,181,185],
[140,164,146,167,184,163,159,0,171],
[140,140,130,174,176,131,155,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,149,164,177,165,142,168,164],
[170,0,166,153,153,140,147,146,141],
[191,174,0,190,189,167,158,160,179],
[176,187,150,0,176,168,141,147,168],
[163,187,151,164,0,153,139,155,151],
[175,200,173,172,187,0,158,177,162],
[198,193,182,199,201,182,0,160,192],
[172,194,180,193,185,163,180,0,163],
[176,199,161,172,189,178,148,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,171,179,165,203,159,154],
[167,0,190,166,166,162,174,177,162],
[175,150,0,153,176,162,182,177,142],
[169,174,187,0,157,170,199,174,170],
[161,174,164,183,0,163,174,163,170],
[175,178,178,170,177,0,193,170,156],
[137,166,158,141,166,147,0,153,139],
[181,163,163,166,177,170,187,0,167],
[186,178,198,170,170,184,201,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,191,161,189,192,181,195,172],
[154,0,161,149,144,180,162,146,153],
[149,179,0,139,153,167,164,131,145],
[179,191,201,0,186,191,159,180,146],
[151,196,187,154,0,182,179,182,150],
[148,160,173,149,158,0,165,148,146],
[159,178,176,181,161,175,0,156,145],
[145,194,209,160,158,192,184,0,174],
[168,187,195,194,190,194,195,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,168,169,180,161,161,171,163],
[154,0,164,164,164,153,154,164,154],
[172,176,0,159,174,165,161,157,163],
[171,176,181,0,170,181,154,162,165],
[160,176,166,170,0,170,150,173,164],
[179,187,175,159,170,0,162,169,158],
[179,186,179,186,190,178,0,169,176],
[169,176,183,178,167,171,171,0,162],
[177,186,177,175,176,182,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,149,180,209,203,165,167,198],
[193,0,171,175,192,191,170,178,190],
[191,169,0,165,191,184,167,180,214],
[160,165,175,0,176,185,182,163,196],
[131,148,149,164,0,163,150,154,176],
[137,149,156,155,177,0,153,181,177],
[175,170,173,158,190,187,0,174,187],
[173,162,160,177,186,159,166,0,199],
[142,150,126,144,164,163,153,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,186,163,157,167,162,178],
[177,0,169,183,166,170,182,170,188],
[168,171,0,186,173,160,176,178,177],
[154,157,154,0,163,159,169,157,165],
[177,174,167,177,0,163,170,178,178],
[183,170,180,181,177,0,175,171,177],
[173,158,164,171,170,165,0,159,180],
[178,170,162,183,162,169,181,0,171],
[162,152,163,175,162,163,160,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,166,174,170,166,145,154,153],
[168,0,177,167,171,158,161,164,179],
[174,163,0,160,156,169,149,152,165],
[166,173,180,0,177,163,158,147,165],
[170,169,184,163,0,166,156,161,160],
[174,182,171,177,174,0,158,160,159],
[195,179,191,182,184,182,0,170,175],
[186,176,188,193,179,180,170,0,161],
[187,161,175,175,180,181,165,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,173,184,162,163,176,175,192],
[182,0,171,176,173,160,179,192,191],
[167,169,0,164,163,168,168,199,180],
[156,164,176,0,173,165,172,177,179],
[178,167,177,167,0,166,168,193,187],
[177,180,172,175,174,0,176,179,163],
[164,161,172,168,172,164,0,179,186],
[165,148,141,163,147,161,161,0,165],
[148,149,160,161,153,177,154,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,145,181,150,162,179,184,167],
[143,0,139,179,146,161,153,179,145],
[195,201,0,196,183,191,184,199,170],
[159,161,144,0,133,142,154,171,153],
[190,194,157,207,0,173,183,208,151],
[178,179,149,198,167,0,159,167,153],
[161,187,156,186,157,181,0,165,159],
[156,161,141,169,132,173,175,0,163],
[173,195,170,187,189,187,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,158,137,161,164,177,149,146],
[158,0,154,142,146,129,145,137,128],
[182,186,0,155,140,157,164,148,156],
[203,198,185,0,163,199,195,166,183],
[179,194,200,177,0,177,184,173,142],
[176,211,183,141,163,0,183,173,161],
[163,195,176,145,156,157,0,166,150],
[191,203,192,174,167,167,174,0,159],
[194,212,184,157,198,179,190,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,177,178,182,208,177,170,184],
[147,0,166,158,171,180,161,153,170],
[163,174,0,162,172,173,160,150,169],
[162,182,178,0,163,177,178,157,165],
[158,169,168,177,0,185,188,169,178],
[132,160,167,163,155,0,163,140,185],
[163,179,180,162,152,177,0,164,176],
[170,187,190,183,171,200,176,0,182],
[156,170,171,175,162,155,164,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,164,183,170,179,164,174,178],
[196,0,165,201,189,189,164,191,160],
[176,175,0,202,190,168,183,180,170],
[157,139,138,0,180,144,169,162,134],
[170,151,150,160,0,172,131,162,146],
[161,151,172,196,168,0,190,201,165],
[176,176,157,171,209,150,0,170,176],
[166,149,160,178,178,139,170,0,147],
[162,180,170,206,194,175,164,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,161,164,157,145,165,164,171],
[180,0,170,160,173,161,171,173,170],
[179,170,0,168,170,168,162,173,163],
[176,180,172,0,169,165,160,165,173],
[183,167,170,171,0,179,168,178,168],
[195,179,172,175,161,0,166,178,178],
[175,169,178,180,172,174,0,173,175],
[176,167,167,175,162,162,167,0,168],
[169,170,177,167,172,162,165,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,133,163,132,187,177,151,147],
[170,0,148,139,153,146,145,176,165],
[207,192,0,147,156,142,157,161,163],
[177,201,193,0,148,161,174,173,169],
[208,187,184,192,0,161,159,196,184],
[153,194,198,179,179,0,175,157,159],
[163,195,183,166,181,165,0,195,143],
[189,164,179,167,144,183,145,0,163],
[193,175,177,171,156,181,197,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,185,171,172,177,169,169,183],
[158,0,168,174,165,166,155,153,175],
[155,172,0,167,154,165,167,162,176],
[169,166,173,0,168,174,174,156,174],
[168,175,186,172,0,166,173,175,179],
[163,174,175,166,174,0,169,172,188],
[171,185,173,166,167,171,0,176,188],
[171,187,178,184,165,168,164,0,184],
[157,165,164,166,161,152,152,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,225,200,247,220,164,232,198],
[146,0,227,188,226,226,174,178,194],
[115,113,0,192,203,150,118,193,175],
[140,152,148,0,177,186,143,203,182],
[93,114,137,163,0,161,145,178,149],
[120,114,190,154,179,0,146,179,179],
[176,166,222,197,195,194,0,211,202],
[108,162,147,137,162,161,129,0,141],
[142,146,165,158,191,161,138,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,160,162,171,183,176,177,179],
[173,0,166,174,186,195,175,174,178],
[180,174,0,169,178,179,168,182,199],
[178,166,171,0,171,181,168,176,175],
[169,154,162,169,0,181,170,175,170],
[157,145,161,159,159,0,166,160,167],
[164,165,172,172,170,174,0,172,166],
[163,166,158,164,165,180,168,0,180],
[161,162,141,165,170,173,174,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,181,201,161,164,191,162,179],
[150,0,158,171,173,158,185,156,187],
[159,182,0,188,171,174,166,149,193],
[139,169,152,0,151,149,172,163,185],
[179,167,169,189,0,182,181,185,186],
[176,182,166,191,158,0,180,170,185],
[149,155,174,168,159,160,0,160,189],
[178,184,191,177,155,170,180,0,195],
[161,153,147,155,154,155,151,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,178,161,162,168,170,175,174],
[174,0,155,180,165,145,180,145,163],
[162,185,0,178,202,152,181,157,160],
[179,160,162,0,158,149,178,156,147],
[178,175,138,182,0,167,185,146,161],
[172,195,188,191,173,0,198,157,163],
[170,160,159,162,155,142,0,163,144],
[165,195,183,184,194,183,177,0,197],
[166,177,180,193,179,177,196,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,192,165,165,167,205,173],
[166,0,195,197,166,161,190,183,166],
[177,145,0,170,141,160,180,215,149],
[148,143,170,0,183,204,175,199,189],
[175,174,199,157,0,147,186,192,179],
[175,179,180,136,193,0,210,201,185],
[173,150,160,165,154,130,0,166,175],
[135,157,125,141,148,139,174,0,126],
[167,174,191,151,161,155,165,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,172,168,160,155,155,158],
[167,0,161,161,175,167,158,155,147],
[173,179,0,176,182,173,170,171,172],
[168,179,164,0,163,162,147,158,173],
[172,165,158,177,0,164,161,163,166],
[180,173,167,178,176,0,167,158,151],
[185,182,170,193,179,173,0,176,169],
[185,185,169,182,177,182,164,0,177],
[182,193,168,167,174,189,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,186,173,162,174,151,167,184],
[168,0,190,187,150,174,170,160,181],
[154,150,0,183,146,162,157,182,188],
[167,153,157,0,146,149,152,155,165],
[178,190,194,194,0,157,177,175,193],
[166,166,178,191,183,0,172,183,191],
[189,170,183,188,163,168,0,166,187],
[173,180,158,185,165,157,174,0,174],
[156,159,152,175,147,149,153,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,180,180,189,177,168,186],
[178,0,170,177,174,162,181,180,178],
[169,170,0,177,172,165,180,166,183],
[160,163,163,0,180,170,175,181,177],
[160,166,168,160,0,178,171,179,193],
[151,178,175,170,162,0,186,182,193],
[163,159,160,165,169,154,0,165,177],
[172,160,174,159,161,158,175,0,160],
[154,162,157,163,147,147,163,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,170,187,200,173,163,204,179],
[148,0,153,153,163,168,166,193,161],
[170,187,0,188,208,185,166,224,169],
[153,187,152,0,195,183,197,193,146],
[140,177,132,145,0,165,153,174,138],
[167,172,155,157,175,0,166,171,153],
[177,174,174,143,187,174,0,187,168],
[136,147,116,147,166,169,153,0,128],
[161,179,171,194,202,187,172,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,193,167,177,202,166,134,156],
[170,0,181,160,183,176,154,155,161],
[147,159,0,170,173,185,152,135,152],
[173,180,170,0,191,176,151,187,158],
[163,157,167,149,0,198,174,150,159],
[138,164,155,164,142,0,155,147,139],
[174,186,188,189,166,185,0,160,170],
[206,185,205,153,190,193,180,0,167],
[184,179,188,182,181,201,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,208,169,162,175,194,148,221],
[105,0,213,147,135,153,164,166,190],
[132,127,0,140,101,122,133,140,129],
[171,193,200,0,171,174,174,153,235],
[178,205,239,169,0,156,188,164,215],
[165,187,218,166,184,0,168,154,203],
[146,176,207,166,152,172,0,179,218],
[192,174,200,187,176,186,161,0,214],
[119,150,211,105,125,137,122,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,180,186,171,167,174,194,178],
[150,0,179,166,180,161,184,179,177],
[160,161,0,156,162,163,166,181,171],
[154,174,184,0,178,167,187,175,170],
[169,160,178,162,0,174,176,181,170],
[173,179,177,173,166,0,182,179,183],
[166,156,174,153,164,158,0,172,167],
[146,161,159,165,159,161,168,0,167],
[162,163,169,170,170,157,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,197,187,196,179,157,194,183],
[177,0,177,202,173,193,190,202,165],
[143,163,0,168,190,128,163,168,162],
[153,138,172,0,179,148,145,180,168],
[144,167,150,161,0,145,136,151,167],
[161,147,212,192,195,0,175,185,176],
[183,150,177,195,204,165,0,205,187],
[146,138,172,160,189,155,135,0,130],
[157,175,178,172,173,164,153,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,159,172,147,162,183,158,140],
[208,0,172,186,152,208,209,187,170],
[181,168,0,203,159,181,190,171,160],
[168,154,137,0,168,176,175,165,157],
[193,188,181,172,0,175,192,173,149],
[178,132,159,164,165,0,192,166,151],
[157,131,150,165,148,148,0,151,143],
[182,153,169,175,167,174,189,0,165],
[200,170,180,183,191,189,197,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,154,139,163,158,143,195,154],
[188,0,171,163,202,152,175,196,145],
[186,169,0,186,176,179,172,212,181],
[201,177,154,0,178,134,177,223,149],
[177,138,164,162,0,166,160,188,139],
[182,188,161,206,174,0,180,213,183],
[197,165,168,163,180,160,0,228,153],
[145,144,128,117,152,127,112,0,116],
[186,195,159,191,201,157,187,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,188,184,169,186,182,191,179],
[155,0,181,151,142,172,166,171,170],
[152,159,0,153,153,164,163,164,168],
[156,189,187,0,170,174,166,180,184],
[171,198,187,170,0,180,179,181,183],
[154,168,176,166,160,0,165,170,171],
[158,174,177,174,161,175,0,182,191],
[149,169,176,160,159,170,158,0,167],
[161,170,172,156,157,169,149,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,175,154,182,166,173,186,170],
[176,0,186,177,169,161,174,181,159],
[165,154,0,161,166,167,169,187,164],
[186,163,179,0,176,171,169,203,173],
[158,171,174,164,0,174,159,171,177],
[174,179,173,169,166,0,170,189,169],
[167,166,171,171,181,170,0,198,163],
[154,159,153,137,169,151,142,0,161],
[170,181,176,167,163,171,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,176,173,174,160,160,162],
[164,0,165,170,169,159,170,159,154],
[175,175,0,187,175,190,188,168,177],
[164,170,153,0,169,175,169,156,163],
[167,171,165,171,0,187,171,172,171],
[166,181,150,165,153,0,159,152,150],
[180,170,152,171,169,181,0,148,169],
[180,181,172,184,168,188,192,0,190],
[178,186,163,177,169,190,171,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,162,174,198,184,187,189,201],
[159,0,170,171,191,173,175,183,195],
[178,170,0,172,189,183,199,194,197],
[166,169,168,0,187,190,190,192,184],
[142,149,151,153,0,157,185,178,172],
[156,167,157,150,183,0,169,172,183],
[153,165,141,150,155,171,0,172,171],
[151,157,146,148,162,168,168,0,201],
[139,145,143,156,168,157,169,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,147,158,174,172,167,148,164],
[165,0,150,153,170,158,158,159,159],
[193,190,0,189,182,177,163,170,169],
[182,187,151,0,181,180,171,183,173],
[166,170,158,159,0,180,165,166,174],
[168,182,163,160,160,0,168,153,174],
[173,182,177,169,175,172,0,168,180],
[192,181,170,157,174,187,172,0,166],
[176,181,171,167,166,166,160,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,190,182,164,197,183,183,170],
[151,0,172,167,156,192,158,170,153],
[150,168,0,172,173,198,154,167,154],
[158,173,168,0,171,195,146,175,140],
[176,184,167,169,0,175,165,173,139],
[143,148,142,145,165,0,142,157,165],
[157,182,186,194,175,198,0,170,158],
[157,170,173,165,167,183,170,0,158],
[170,187,186,200,201,175,182,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,179,163,182,161,175,170],
[166,0,170,184,158,182,165,172,176],
[163,170,0,179,159,173,166,163,171],
[161,156,161,0,153,175,156,162,166],
[177,182,181,187,0,194,177,167,183],
[158,158,167,165,146,0,141,164,156],
[179,175,174,184,163,199,0,176,185],
[165,168,177,178,173,176,164,0,168],
[170,164,169,174,157,184,155,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,179,218,189,150,205,181,189],
[154,0,171,189,160,150,140,129,163],
[161,169,0,182,187,123,165,103,166],
[122,151,158,0,164,77,164,137,145],
[151,180,153,176,0,137,167,89,158],
[190,190,217,263,203,0,212,140,202],
[135,200,175,176,173,128,0,79,168],
[159,211,237,203,251,200,261,0,233],
[151,177,174,195,182,138,172,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,155,166,163,148,145,176,165],
[201,0,162,193,202,181,170,198,177],
[185,178,0,193,172,175,180,197,163],
[174,147,147,0,163,147,141,180,163],
[177,138,168,177,0,151,140,170,155],
[192,159,165,193,189,0,169,187,179],
[195,170,160,199,200,171,0,208,192],
[164,142,143,160,170,153,132,0,147],
[175,163,177,177,185,161,148,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,163,156,175,112,192,155,154],
[215,0,149,149,217,128,239,176,171],
[177,191,0,207,184,137,222,206,145],
[184,191,133,0,209,146,154,198,178],
[165,123,156,131,0,119,172,200,179],
[228,212,203,194,221,0,212,165,163],
[148,101,118,186,168,128,0,131,205],
[185,164,134,142,140,175,209,0,150],
[186,169,195,162,161,177,135,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,185,149,205,166,146,157,155],
[156,0,209,149,210,183,165,195,175],
[155,131,0,162,195,170,132,141,162],
[191,191,178,0,200,159,185,194,183],
[135,130,145,140,0,96,146,161,171],
[174,157,170,181,244,0,155,180,148],
[194,175,208,155,194,185,0,208,220],
[183,145,199,146,179,160,132,0,141],
[185,165,178,157,169,192,120,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,169,156,162,177,172,167],
[179,0,177,167,160,169,177,168,186],
[164,163,0,167,157,175,174,163,178],
[171,173,173,0,171,167,168,168,165],
[184,180,183,169,0,184,178,177,174],
[178,171,165,173,156,0,172,166,173],
[163,163,166,172,162,168,0,172,178],
[168,172,177,172,163,174,168,0,167],
[173,154,162,175,166,167,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,142,145,165,132,189,166,184],
[192,0,132,169,168,156,202,185,141],
[198,208,0,187,143,192,183,195,175],
[195,171,153,0,180,201,167,236,162],
[175,172,197,160,0,168,164,198,163],
[208,184,148,139,172,0,189,191,197],
[151,138,157,173,176,151,0,179,165],
[174,155,145,104,142,149,161,0,167],
[156,199,165,178,177,143,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,159,154,155,143,148,157,160],
[193,0,186,188,169,180,177,188,188],
[181,154,0,170,159,158,149,177,188],
[186,152,170,0,171,173,156,188,183],
[185,171,181,169,0,158,161,162,171],
[197,160,182,167,182,0,171,178,181],
[192,163,191,184,179,169,0,180,193],
[183,152,163,152,178,162,160,0,172],
[180,152,152,157,169,159,147,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,188,173,185,175,177,173,154],
[177,0,191,160,183,184,181,192,175],
[152,149,0,162,189,154,168,162,158],
[167,180,178,0,180,181,169,197,167],
[155,157,151,160,0,169,171,161,169],
[165,156,186,159,171,0,151,163,156],
[163,159,172,171,169,189,0,176,169],
[167,148,178,143,179,177,164,0,156],
[186,165,182,173,171,184,171,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,154,173,171,137,157,181],
[169,0,185,155,170,180,147,157,179],
[169,155,0,162,172,181,158,154,173],
[186,185,178,0,186,190,173,168,192],
[167,170,168,154,0,183,155,156,167],
[169,160,159,150,157,0,143,161,183],
[203,193,182,167,185,197,0,171,194],
[183,183,186,172,184,179,169,0,197],
[159,161,167,148,173,157,146,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,208,184,167,158,173,178,199],
[147,0,182,151,162,170,179,173,190],
[132,158,0,140,148,152,152,158,176],
[156,189,200,0,157,189,175,177,196],
[173,178,192,183,0,162,189,178,189],
[182,170,188,151,178,0,147,165,165],
[167,161,188,165,151,193,0,193,187],
[162,167,182,163,162,175,147,0,165],
[141,150,164,144,151,175,153,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,157,160,167,178,150,162,156],
[162,0,171,178,168,175,158,167,145],
[183,169,0,166,178,187,160,183,172],
[180,162,174,0,170,198,166,180,165],
[173,172,162,170,0,186,171,178,169],
[162,165,153,142,154,0,152,154,168],
[190,182,180,174,169,188,0,158,191],
[178,173,157,160,162,186,182,0,165],
[184,195,168,175,171,172,149,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,200,223,172,149,187,174,181],
[148,0,202,206,121,150,195,136,128],
[140,138,0,145,125,147,163,126,118],
[117,134,195,0,127,142,180,140,137],
[168,219,215,213,0,185,201,172,183],
[191,190,193,198,155,0,172,127,153],
[153,145,177,160,139,168,0,128,202],
[166,204,214,200,168,213,212,0,185],
[159,212,222,203,157,187,138,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,207,207,215,114,152,215,214],
[135,0,179,101,199,182,179,242,241],
[133,161,0,228,199,72,234,234,234],
[133,239,112,0,234,115,249,181,249],
[125,141,141,106,0,178,277,118,243],
[226,158,268,225,162,0,270,205,261],
[188,161,106,91,63,70,0,63,98],
[125,98,106,159,222,135,277,0,228],
[126,99,106,91,97,79,242,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,186,172,178,180,167,174,183],
[178,0,194,190,188,180,167,174,186],
[154,146,0,167,151,157,163,151,178],
[168,150,173,0,157,152,164,165,170],
[162,152,189,183,0,165,168,163,158],
[160,160,183,188,175,0,179,174,187],
[173,173,177,176,172,161,0,167,188],
[166,166,189,175,177,166,173,0,191],
[157,154,162,170,182,153,152,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,206,148,194,183,191,186,204],
[139,0,152,152,126,149,145,133,179],
[134,188,0,160,160,126,163,143,148],
[192,188,180,0,208,200,192,172,160],
[146,214,180,132,0,168,193,190,203],
[157,191,214,140,172,0,153,147,175],
[149,195,177,148,147,187,0,164,191],
[154,207,197,168,150,193,176,0,189],
[136,161,192,180,137,165,149,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,145,172,149,201,206,188,156],
[158,0,162,151,134,194,167,173,141],
[195,178,0,158,171,187,195,226,182],
[168,189,182,0,174,196,181,184,159],
[191,206,169,166,0,205,200,210,169],
[139,146,153,144,135,0,168,195,153],
[134,173,145,159,140,172,0,182,137],
[152,167,114,156,130,145,158,0,125],
[184,199,158,181,171,187,203,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,170,175,185,167,146,156],
[167,0,176,178,174,187,202,141,165],
[173,164,0,155,152,142,171,150,160],
[170,162,185,0,166,159,174,155,154],
[165,166,188,174,0,145,181,173,180],
[155,153,198,181,195,0,169,158,159],
[173,138,169,166,159,171,0,129,147],
[194,199,190,185,167,182,211,0,193],
[184,175,180,186,160,181,193,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,189,238,125,207,228,224,224],
[134,0,184,187,164,189,189,208,223],
[151,156,0,174,171,192,175,217,172],
[102,153,166,0,147,142,180,181,194],
[215,176,169,193,0,154,173,216,184],
[133,151,148,198,186,0,187,194,184],
[112,151,165,160,167,153,0,190,191],
[116,132,123,159,124,146,150,0,155],
[116,117,168,146,156,156,149,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,185,167,172,185,169,167,154],
[164,0,170,160,152,163,155,159,152],
[155,170,0,159,160,171,173,169,153],
[173,180,181,0,175,174,185,169,175],
[168,188,180,165,0,174,184,170,175],
[155,177,169,166,166,0,171,169,153],
[171,185,167,155,156,169,0,171,153],
[173,181,171,171,170,171,169,0,169],
[186,188,187,165,165,187,187,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,174,159,172,197,162,170],
[161,0,161,165,172,167,182,177,162],
[172,179,0,189,187,164,183,185,185],
[166,175,151,0,168,155,169,162,154],
[181,168,153,172,0,169,184,173,171],
[168,173,176,185,171,0,196,173,173],
[143,158,157,171,156,144,0,154,167],
[178,163,155,178,167,167,186,0,150],
[170,178,155,186,169,167,173,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,152,130,190,130,147,196,87],
[193,0,213,149,169,174,210,219,191],
[188,127,0,175,189,171,211,174,151],
[210,191,165,0,208,125,167,215,211],
[150,171,151,132,0,154,214,175,150],
[210,166,169,215,186,0,209,213,169],
[193,130,129,173,126,131,0,176,152],
[144,121,166,125,165,127,164,0,167],
[253,149,189,129,190,171,188,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,189,185,166,197,177,173,195],
[173,0,171,185,154,172,181,158,187],
[151,169,0,172,158,188,176,137,191],
[155,155,168,0,180,177,150,138,162],
[174,186,182,160,0,176,180,170,177],
[143,168,152,163,164,0,152,136,146],
[163,159,164,190,160,188,0,151,171],
[167,182,203,202,170,204,189,0,204],
[145,153,149,178,163,194,169,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,143,155,179,162,154,178,164],
[185,0,173,173,179,162,185,185,183],
[197,167,0,174,191,179,185,180,167],
[185,167,166,0,185,163,153,187,162],
[161,161,149,155,0,161,151,158,147],
[178,178,161,177,179,0,169,185,174],
[186,155,155,187,189,171,0,172,164],
[162,155,160,153,182,155,168,0,166],
[176,157,173,178,193,166,176,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,159,177,164,167,150,156],
[162,0,187,154,185,191,141,162,163],
[166,153,0,159,176,148,153,168,154],
[181,186,181,0,193,179,183,195,157],
[163,155,164,147,0,175,149,149,146],
[176,149,192,161,165,0,157,178,153],
[173,199,187,157,191,183,0,156,175],
[190,178,172,145,191,162,184,0,185],
[184,177,186,183,194,187,165,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,156,138,184,133,155,155,165],
[170,0,155,166,191,181,185,191,185],
[184,185,0,156,179,140,155,163,150],
[202,174,184,0,195,131,183,163,177],
[156,149,161,145,0,136,178,156,187],
[207,159,200,209,204,0,206,198,209],
[185,155,185,157,162,134,0,154,173],
[185,149,177,177,184,142,186,0,179],
[175,155,190,163,153,131,167,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,176,184,178,164,175,179,161],
[186,0,160,171,182,157,179,193,187],
[164,180,0,191,167,182,162,184,161],
[156,169,149,0,164,164,160,173,152],
[162,158,173,176,0,159,155,170,156],
[176,183,158,176,181,0,166,191,175],
[165,161,178,180,185,174,0,187,152],
[161,147,156,167,170,149,153,0,148],
[179,153,179,188,184,165,188,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,161,180,177,172,160,169],
[168,0,159,161,164,172,152,148,162],
[158,181,0,157,166,167,176,157,167],
[179,179,183,0,180,171,170,189,173],
[160,176,174,160,0,162,163,156,150],
[163,168,173,169,178,0,165,158,176],
[168,188,164,170,177,175,0,167,168],
[180,192,183,151,184,182,173,0,177],
[171,178,173,167,190,164,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,156,148,167,167,167,168,170],
[176,0,166,164,174,173,176,168,175],
[184,174,0,162,160,174,173,184,168],
[192,176,178,0,175,188,192,169,174],
[173,166,180,165,0,183,181,175,177],
[173,167,166,152,157,0,174,166,161],
[173,164,167,148,159,166,0,164,158],
[172,172,156,171,165,174,176,0,174],
[170,165,172,166,163,179,182,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,170,187,181,179,161,182],
[169,0,177,167,171,181,162,167,181],
[165,163,0,167,184,166,169,154,173],
[170,173,173,0,186,177,172,169,189],
[153,169,156,154,0,164,159,159,174],
[159,159,174,163,176,0,171,162,168],
[161,178,171,168,181,169,0,172,183],
[179,173,186,171,181,178,168,0,182],
[158,159,167,151,166,172,157,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,185,184,166,175,165,175],
[162,0,168,160,168,145,158,158,160],
[161,172,0,169,186,161,166,158,161],
[155,180,171,0,171,157,168,157,164],
[156,172,154,169,0,160,159,152,157],
[174,195,179,183,180,0,169,164,166],
[165,182,174,172,181,171,0,180,176],
[175,182,182,183,188,176,160,0,175],
[165,180,179,176,183,174,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,172,179,175,160,155,160,142],
[179,0,160,186,165,167,178,157,163],
[168,180,0,184,182,167,150,152,166],
[161,154,156,0,174,165,149,165,145],
[165,175,158,166,0,155,145,134,130],
[180,173,173,175,185,0,165,168,171],
[185,162,190,191,195,175,0,183,172],
[180,183,188,175,206,172,157,0,156],
[198,177,174,195,210,169,168,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,173,143,189,154,153,155,169],
[147,0,162,164,187,122,164,159,173],
[167,178,0,161,198,161,158,157,197],
[197,176,179,0,204,164,184,172,199],
[151,153,142,136,0,115,144,123,165],
[186,218,179,176,225,0,164,188,205],
[187,176,182,156,196,176,0,182,223],
[185,181,183,168,217,152,158,0,157],
[171,167,143,141,175,135,117,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,191,176,178,200,171,175,169],
[171,0,180,168,168,188,179,181,174],
[149,160,0,153,145,159,169,173,163],
[164,172,187,0,167,179,174,172,163],
[162,172,195,173,0,183,182,185,175],
[140,152,181,161,157,0,151,160,146],
[169,161,171,166,158,189,0,182,165],
[165,159,167,168,155,180,158,0,157],
[171,166,177,177,165,194,175,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,151,143,153,150,209,162,212],
[165,0,144,112,128,147,168,124,189],
[189,196,0,173,187,157,157,172,200],
[197,228,167,0,148,144,209,147,174],
[187,212,153,192,0,180,208,134,199],
[190,193,183,196,160,0,219,141,186],
[131,172,183,131,132,121,0,125,220],
[178,216,168,193,206,199,215,0,240],
[128,151,140,166,141,154,120,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,151,169,165,161,185,174,176],
[164,0,166,182,177,146,196,171,155],
[189,174,0,183,169,170,195,178,183],
[171,158,157,0,155,150,160,161,155],
[175,163,171,185,0,159,201,186,177],
[179,194,170,190,181,0,191,188,194],
[155,144,145,180,139,149,0,160,137],
[166,169,162,179,154,152,180,0,155],
[164,185,157,185,163,146,203,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,157,174,155,169,164,184,177],
[154,0,147,155,142,159,142,157,145],
[183,193,0,181,171,162,173,193,164],
[166,185,159,0,155,159,148,186,162],
[185,198,169,185,0,166,169,189,178],
[171,181,178,181,174,0,169,183,171],
[176,198,167,192,171,171,0,194,168],
[156,183,147,154,151,157,146,0,150],
[163,195,176,178,162,169,172,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,164,135,165,164,151,152,171],
[178,0,157,170,177,192,171,182,169],
[176,183,0,161,179,180,169,184,174],
[205,170,179,0,184,179,176,183,180],
[175,163,161,156,0,174,150,155,167],
[176,148,160,161,166,0,148,166,171],
[189,169,171,164,190,192,0,180,172],
[188,158,156,157,185,174,160,0,191],
[169,171,166,160,173,169,168,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,159,165,153,164,165,147],
[176,0,163,165,178,187,152,171,172],
[167,177,0,173,180,169,160,176,171],
[181,175,167,0,175,189,168,177,156],
[175,162,160,165,0,160,179,180,155],
[187,153,171,151,180,0,159,165,159],
[176,188,180,172,161,181,0,175,171],
[175,169,164,163,160,175,165,0,156],
[193,168,169,184,185,181,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,167,190,205,148,158,185,187],
[153,0,188,200,193,176,162,177,159],
[173,152,0,182,187,176,157,185,166],
[150,140,158,0,180,156,136,158,144],
[135,147,153,160,0,152,147,155,149],
[192,164,164,184,188,0,176,167,172],
[182,178,183,204,193,164,0,203,180],
[155,163,155,182,185,173,137,0,144],
[153,181,174,196,191,168,160,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,180,178,161,192,179,183,165],
[175,0,181,180,179,192,169,180,175],
[160,159,0,170,158,181,160,175,162],
[162,160,170,0,161,166,148,166,155],
[179,161,182,179,0,190,178,183,154],
[148,148,159,174,150,0,155,167,145],
[161,171,180,192,162,185,0,174,168],
[157,160,165,174,157,173,166,0,162],
[175,165,178,185,186,195,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,123,120,136,233,205,133,96],
[216,0,208,176,137,189,164,164,167],
[217,132,0,200,177,243,174,188,189],
[220,164,140,0,182,221,167,163,126],
[204,203,163,158,0,178,190,145,188],
[107,151,97,119,162,0,166,121,121],
[135,176,166,173,150,174,0,135,163],
[207,176,152,177,195,219,205,0,153],
[244,173,151,214,152,219,177,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,183,197,169,201,184,177,193],
[156,0,177,187,147,172,154,157,187],
[157,163,0,205,184,191,174,201,201],
[143,153,135,0,145,166,163,159,146],
[171,193,156,195,0,187,155,201,180],
[139,168,149,174,153,0,151,170,182],
[156,186,166,177,185,189,0,166,196],
[163,183,139,181,139,170,174,0,177],
[147,153,139,194,160,158,144,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,169,176,197,175,156,187,178],
[157,0,162,201,176,159,174,165,189],
[171,178,0,188,182,174,159,182,185],
[164,139,152,0,198,167,162,183,172],
[143,164,158,142,0,157,153,192,179],
[165,181,166,173,183,0,161,175,172],
[184,166,181,178,187,179,0,175,192],
[153,175,158,157,148,165,165,0,164],
[162,151,155,168,161,168,148,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,115,168,168,170,170,57,226],
[169,0,171,226,224,284,226,168,282],
[225,169,0,282,282,226,113,224,282],
[172,114,58,0,169,58,113,0,169],
[172,116,58,171,0,173,116,114,284],
[170,56,114,282,167,0,169,112,225],
[170,114,227,227,224,171,0,169,224],
[283,172,116,340,226,228,171,0,284],
[114,58,58,171,56,115,116,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,149,152,184,185,163,150,170],
[186,0,175,185,178,189,166,180,161],
[191,165,0,159,189,182,160,174,161],
[188,155,181,0,187,179,165,169,170],
[156,162,151,153,0,153,156,153,139],
[155,151,158,161,187,0,169,165,159],
[177,174,180,175,184,171,0,170,152],
[190,160,166,171,187,175,170,0,161],
[170,179,179,170,201,181,188,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,159,175,178,174,157,169],
[178,0,160,165,170,165,169,158,167],
[170,180,0,163,177,177,174,178,172],
[181,175,177,0,194,169,168,173,184],
[165,170,163,146,0,165,164,156,158],
[162,175,163,171,175,0,164,164,166],
[166,171,166,172,176,176,0,166,170],
[183,182,162,167,184,176,174,0,180],
[171,173,168,156,182,174,170,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,162,184,161,148,173,167],
[166,0,182,166,175,198,177,178,175],
[174,158,0,173,131,162,162,128,128],
[178,174,167,0,157,173,155,183,146],
[156,165,209,183,0,192,180,179,178],
[179,142,178,167,148,0,175,181,154],
[192,163,178,185,160,165,0,181,154],
[167,162,212,157,161,159,159,0,165],
[173,165,212,194,162,186,186,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,170,171,174,183,164,168],
[168,0,171,165,155,176,169,167,153],
[156,169,0,164,161,157,171,165,169],
[170,175,176,0,161,169,160,153,166],
[169,185,179,179,0,184,175,182,177],
[166,164,183,171,156,0,173,170,172],
[157,171,169,180,165,167,0,168,165],
[176,173,175,187,158,170,172,0,167],
[172,187,171,174,163,168,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,165,149,177,149,165,181,174],
[173,0,176,148,184,162,186,193,179],
[175,164,0,149,178,161,166,183,177],
[191,192,191,0,189,170,173,187,201],
[163,156,162,151,0,147,151,164,169],
[191,178,179,170,193,0,180,196,174],
[175,154,174,167,189,160,0,178,178],
[159,147,157,153,176,144,162,0,172],
[166,161,163,139,171,166,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,194,172,176,176,162,171,173],
[151,0,160,160,158,164,162,161,161],
[146,180,0,152,161,167,159,163,153],
[168,180,188,0,178,176,167,166,159],
[164,182,179,162,0,174,161,170,157],
[164,176,173,164,166,0,169,159,170],
[178,178,181,173,179,171,0,173,168],
[169,179,177,174,170,181,167,0,169],
[167,179,187,181,183,170,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,181,181,198,165,159,183,163],
[153,0,158,165,174,160,173,165,155],
[159,182,0,172,179,148,150,168,172],
[159,175,168,0,176,172,166,176,176],
[142,166,161,164,0,149,154,153,153],
[175,180,192,168,191,0,157,174,162],
[181,167,190,174,186,183,0,174,165],
[157,175,172,164,187,166,166,0,166],
[177,185,168,164,187,178,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,189,181,172,196,175,160],
[168,0,174,174,195,184,190,183,175],
[163,166,0,158,196,149,185,175,165],
[151,166,182,0,176,172,200,185,154],
[159,145,144,164,0,155,157,152,158],
[168,156,191,168,185,0,165,139,166],
[144,150,155,140,183,175,0,160,154],
[165,157,165,155,188,201,180,0,190],
[180,165,175,186,182,174,186,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,174,168,179,179,170,177],
[166,0,167,160,172,174,168,163,167],
[168,173,0,175,163,181,170,156,186],
[166,180,165,0,175,185,167,157,180],
[172,168,177,165,0,167,170,167,181],
[161,166,159,155,173,0,170,172,170],
[161,172,170,173,170,170,0,157,173],
[170,177,184,183,173,168,183,0,185],
[163,173,154,160,159,170,167,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,175,163,171,146,161,155,167],
[178,0,171,187,165,158,160,157,158],
[165,169,0,169,170,164,164,163,156],
[177,153,171,0,180,174,181,165,174],
[169,175,170,160,0,165,171,167,164],
[194,182,176,166,175,0,170,173,170],
[179,180,176,159,169,170,0,160,166],
[185,183,177,175,173,167,180,0,176],
[173,182,184,166,176,170,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,168,163,168,166,160,166,162],
[184,0,160,162,169,174,165,180,162],
[172,180,0,158,162,168,165,168,160],
[177,178,182,0,176,171,180,171,165],
[172,171,178,164,0,181,171,162,153],
[174,166,172,169,159,0,174,170,163],
[180,175,175,160,169,166,0,161,159],
[174,160,172,169,178,170,179,0,180],
[178,178,180,175,187,177,181,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,153,156,160,167,155,153],
[179,0,160,156,167,156,169,160,169],
[178,180,0,176,161,184,183,175,168],
[187,184,164,0,169,169,184,172,173],
[184,173,179,171,0,186,181,156,195],
[180,184,156,171,154,0,161,159,159],
[173,171,157,156,159,179,0,176,183],
[185,180,165,168,184,181,164,0,173],
[187,171,172,167,145,181,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,175,177,158,175,162,166,165],
[185,0,167,168,165,180,176,169,176],
[165,173,0,176,162,156,166,180,173],
[163,172,164,0,157,162,168,163,167],
[182,175,178,183,0,167,175,189,177],
[165,160,184,178,173,0,162,171,168],
[178,164,174,172,165,178,0,175,188],
[174,171,160,177,151,169,165,0,166],
[175,164,167,173,163,172,152,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,145,162,190,155,176,172,158],
[148,0,146,156,162,155,155,146,151],
[195,194,0,181,193,164,201,175,179],
[178,184,159,0,168,148,189,152,174],
[150,178,147,172,0,165,175,173,151],
[185,185,176,192,175,0,182,202,162],
[164,185,139,151,165,158,0,162,163],
[168,194,165,188,167,138,178,0,177],
[182,189,161,166,189,178,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,178,183,175,186,170,176],
[167,0,186,181,175,169,185,168,178],
[172,154,0,169,178,164,190,168,192],
[162,159,171,0,174,152,178,156,178],
[157,165,162,166,0,163,173,161,180],
[165,171,176,188,177,0,178,171,178],
[154,155,150,162,167,162,0,157,165],
[170,172,172,184,179,169,183,0,179],
[164,162,148,162,160,162,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,138,149,155,181,173,170,165],
[180,0,153,149,155,156,173,161,181],
[202,187,0,172,188,170,181,183,192],
[191,191,168,0,166,175,185,171,183],
[185,185,152,174,0,185,168,164,179],
[159,184,170,165,155,0,167,176,163],
[167,167,159,155,172,173,0,158,174],
[170,179,157,169,176,164,182,0,179],
[175,159,148,157,161,177,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,181,169,169,170,184,174,177],
[155,0,178,160,160,158,151,158,170],
[159,162,0,170,164,162,165,154,161],
[171,180,170,0,156,170,165,169,162],
[171,180,176,184,0,170,181,191,179],
[170,182,178,170,170,0,169,168,172],
[156,189,175,175,159,171,0,167,177],
[166,182,186,171,149,172,173,0,181],
[163,170,179,178,161,168,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,166,168,205,189,178,174,164],
[163,0,195,227,219,190,155,211,194],
[174,145,0,194,195,185,159,166,172],
[172,113,146,0,191,159,156,145,157],
[135,121,145,149,0,121,125,147,109],
[151,150,155,181,219,0,180,164,195],
[162,185,181,184,215,160,0,164,182],
[166,129,174,195,193,176,176,0,181],
[176,146,168,183,231,145,158,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,172,172,178,171,172,181],
[155,0,169,163,170,172,160,163,173],
[173,171,0,170,167,171,173,169,177],
[168,177,170,0,165,174,152,160,181],
[168,170,173,175,0,173,175,182,188],
[162,168,169,166,167,0,158,174,169],
[169,180,167,188,165,182,0,178,180],
[168,177,171,180,158,166,162,0,184],
[159,167,163,159,152,171,160,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,178,182,168,178,176,181,174],
[180,0,149,169,170,178,180,177,175],
[162,191,0,170,176,182,180,187,181],
[158,171,170,0,169,168,185,169,176],
[172,170,164,171,0,187,180,184,190],
[162,162,158,172,153,0,171,179,173],
[164,160,160,155,160,169,0,164,169],
[159,163,153,171,156,161,176,0,166],
[166,165,159,164,150,167,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,196,182,176,188,175,174,170],
[157,0,202,171,183,180,176,184,166],
[144,138,0,155,140,171,148,134,146],
[158,169,185,0,157,172,164,162,170],
[164,157,200,183,0,190,174,184,183],
[152,160,169,168,150,0,166,157,160],
[165,164,192,176,166,174,0,167,182],
[166,156,206,178,156,183,173,0,166],
[170,174,194,170,157,180,158,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,164,153,175,159,156,168,169],
[181,0,163,188,195,173,175,191,150],
[176,177,0,192,186,168,170,161,168],
[187,152,148,0,168,145,161,149,154],
[165,145,154,172,0,166,154,169,144],
[181,167,172,195,174,0,167,181,157],
[184,165,170,179,186,173,0,175,173],
[172,149,179,191,171,159,165,0,158],
[171,190,172,186,196,183,167,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,166,167,165,196,183,167,168],
[156,0,152,122,121,168,138,120,120],
[174,188,0,123,138,156,173,186,122],
[173,218,217,0,167,152,140,219,186],
[175,219,202,173,0,156,187,173,169],
[144,172,184,188,184,0,158,200,215],
[157,202,167,200,153,182,0,229,168],
[173,220,154,121,167,140,111,0,151],
[172,220,218,154,171,125,172,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,153,161,192,175,163,167,173],
[162,0,174,181,168,178,167,175,179],
[187,166,0,174,181,175,173,168,174],
[179,159,166,0,162,182,155,160,178],
[148,172,159,178,0,165,133,150,171],
[165,162,165,158,175,0,149,177,168],
[177,173,167,185,207,191,0,193,193],
[173,165,172,180,190,163,147,0,177],
[167,161,166,162,169,172,147,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,184,188,171,166,181,182,179],
[172,0,190,174,169,172,164,184,169],
[156,150,0,159,169,170,165,165,154],
[152,166,181,0,168,171,161,165,161],
[169,171,171,172,0,168,162,169,172],
[174,168,170,169,172,0,165,165,159],
[159,176,175,179,178,175,0,186,200],
[158,156,175,175,171,175,154,0,169],
[161,171,186,179,168,181,140,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,164,178,182,161,167,183,179],
[172,0,152,193,175,166,166,170,177],
[176,188,0,181,157,183,161,173,181],
[162,147,159,0,150,144,149,164,165],
[158,165,183,190,0,185,175,184,183],
[179,174,157,196,155,0,157,166,181],
[173,174,179,191,165,183,0,191,175],
[157,170,167,176,156,174,149,0,169],
[161,163,159,175,157,159,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,157,165,171,163,156,176,164],
[179,0,163,176,171,167,171,167,161],
[183,177,0,179,179,179,171,170,176],
[175,164,161,0,172,175,174,172,171],
[169,169,161,168,0,173,177,169,163],
[177,173,161,165,167,0,174,177,180],
[184,169,169,166,163,166,0,179,165],
[164,173,170,168,171,163,161,0,156],
[176,179,164,169,177,160,175,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,160,168,169,148,162,146,167],
[183,0,184,190,179,173,195,170,170],
[180,156,0,176,167,178,189,166,168],
[172,150,164,0,146,166,169,160,162],
[171,161,173,194,0,180,183,178,183],
[192,167,162,174,160,0,169,148,175],
[178,145,151,171,157,171,0,141,178],
[194,170,174,180,162,192,199,0,188],
[173,170,172,178,157,165,162,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,171,150,180,201,180,193,171],
[189,0,192,187,191,240,178,168,211],
[169,148,0,161,172,162,147,132,159],
[190,153,179,0,161,130,131,144,157],
[160,149,168,179,0,172,167,149,179],
[139,100,178,210,168,0,170,141,180],
[160,162,193,209,173,170,0,193,188],
[147,172,208,196,191,199,147,0,199],
[169,129,181,183,161,160,152,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,166,153,173,176,161,142],
[166,0,165,165,169,176,191,167,182],
[171,175,0,159,173,187,184,174,170],
[174,175,181,0,176,181,169,171,168],
[187,171,167,164,0,168,186,169,177],
[167,164,153,159,172,0,175,155,170],
[164,149,156,171,154,165,0,157,156],
[179,173,166,169,171,185,183,0,180],
[198,158,170,172,163,170,184,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,150,172,158,163,178,160,160],
[184,0,184,187,143,170,177,177,147],
[190,156,0,168,164,162,161,202,146],
[168,153,172,0,139,158,159,172,154],
[182,197,176,201,0,171,190,198,157],
[177,170,178,182,169,0,186,201,160],
[162,163,179,181,150,154,0,165,178],
[180,163,138,168,142,139,175,0,136],
[180,193,194,186,183,180,162,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,196,178,170,181,181,174,197],
[152,0,173,175,149,176,165,166,173],
[144,167,0,170,158,172,148,163,172],
[162,165,170,0,152,172,170,156,171],
[170,191,182,188,0,165,169,174,201],
[159,164,168,168,175,0,163,170,182],
[159,175,192,170,171,177,0,171,187],
[166,174,177,184,166,170,169,0,187],
[143,167,168,169,139,158,153,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,167,142,149,142,150,149],
[169,0,179,162,123,140,160,159,148],
[181,161,0,182,137,151,152,154,165],
[173,178,158,0,152,162,166,166,172],
[198,217,203,188,0,177,155,166,192],
[191,200,189,178,163,0,171,176,183],
[198,180,188,174,185,169,0,200,189],
[190,181,186,174,174,164,140,0,177],
[191,192,175,168,148,157,151,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,158,176,172,163,169,187,157],
[181,0,173,168,166,170,173,180,162],
[182,167,0,176,167,177,186,186,162],
[164,172,164,0,175,169,172,176,166],
[168,174,173,165,0,165,171,180,178],
[177,170,163,171,175,0,164,165,159],
[171,167,154,168,169,176,0,170,160],
[153,160,154,164,160,175,170,0,154],
[183,178,178,174,162,181,180,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,162,171,184,176,166,175],
[165,0,157,164,176,169,174,164,173],
[178,183,0,178,170,195,180,175,185],
[178,176,162,0,165,180,178,175,181],
[169,164,170,175,0,177,170,172,165],
[156,171,145,160,163,0,167,157,180],
[164,166,160,162,170,173,0,163,180],
[174,176,165,165,168,183,177,0,176],
[165,167,155,159,175,160,160,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,169,166,182,172,162,183,176],
[200,0,189,183,159,187,163,196,186],
[171,151,0,155,135,175,168,182,171],
[174,157,185,0,170,168,179,195,154],
[158,181,205,170,0,190,189,192,170],
[168,153,165,172,150,0,160,174,163],
[178,177,172,161,151,180,0,170,152],
[157,144,158,145,148,166,170,0,168],
[164,154,169,186,170,177,188,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,173,161,180,191,162,165],
[170,0,153,150,137,162,169,132,173],
[183,187,0,188,167,185,172,160,179],
[167,190,152,0,164,180,218,175,186],
[179,203,173,176,0,167,179,151,194],
[160,178,155,160,173,0,181,157,176],
[149,171,168,122,161,159,0,155,148],
[178,208,180,165,189,183,185,0,186],
[175,167,161,154,146,164,192,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,151,174,195,165,172,159,167],
[178,0,145,177,187,186,172,161,163],
[189,195,0,174,201,197,183,184,169],
[166,163,166,0,186,188,170,150,157],
[145,153,139,154,0,143,146,148,138],
[175,154,143,152,197,0,151,157,151],
[168,168,157,170,194,189,0,186,162],
[181,179,156,190,192,183,154,0,170],
[173,177,171,183,202,189,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,201,187,186,162,182,196],
[174,0,156,192,171,182,176,180,202],
[167,184,0,199,178,177,180,167,220],
[139,148,141,0,173,175,153,146,185],
[153,169,162,167,0,197,168,155,184],
[154,158,163,165,143,0,156,162,177],
[178,164,160,187,172,184,0,172,200],
[158,160,173,194,185,178,168,0,167],
[144,138,120,155,156,163,140,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,162,165,161,169,161,174],
[165,0,139,134,157,154,197,138,150],
[182,201,0,174,178,177,194,168,170],
[178,206,166,0,171,176,197,185,189],
[175,183,162,169,0,179,194,159,170],
[179,186,163,164,161,0,201,167,165],
[171,143,146,143,146,139,0,140,144],
[179,202,172,155,181,173,200,0,172],
[166,190,170,151,170,175,196,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,182,175,184,175,167,171,172],
[165,0,186,182,169,166,189,184,177],
[158,154,0,175,168,161,166,174,174],
[165,158,165,0,173,160,169,181,171],
[156,171,172,167,0,170,176,171,159],
[165,174,179,180,170,0,171,171,176],
[173,151,174,171,164,169,0,183,152],
[169,156,166,159,169,169,157,0,149],
[168,163,166,169,181,164,188,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,250,214,202,162,174,173,237],
[78,0,180,127,132,111,124,140,140],
[90,160,0,114,151,125,91,151,142],
[126,213,226,0,158,158,138,165,181],
[138,208,189,182,0,152,132,206,182],
[178,229,215,182,188,0,150,197,202],
[166,216,249,202,208,190,0,205,188],
[167,200,189,175,134,143,135,0,162],
[103,200,198,159,158,138,152,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,154,166,173,154,188,187,188],
[169,0,164,181,147,149,156,168,156],
[186,176,0,187,187,179,137,170,197],
[174,159,153,0,162,178,163,177,150],
[167,193,153,178,0,177,140,176,173],
[186,191,161,162,163,0,187,186,187],
[152,184,203,177,200,153,0,177,160],
[153,172,170,163,164,154,163,0,168],
[152,184,143,190,167,153,180,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,145,171,165,151,153,173,165],
[178,0,157,170,159,163,163,179,163],
[195,183,0,177,165,161,174,184,171],
[169,170,163,0,162,155,166,171,166],
[175,181,175,178,0,181,167,186,173],
[189,177,179,185,159,0,168,171,184],
[187,177,166,174,173,172,0,183,170],
[167,161,156,169,154,169,157,0,164],
[175,177,169,174,167,156,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,159,149,160,155,169,154,174],
[200,0,180,178,174,158,190,177,178],
[181,160,0,156,162,155,170,148,168],
[191,162,184,0,169,181,182,180,193],
[180,166,178,171,0,185,185,189,192],
[185,182,185,159,155,0,171,185,189],
[171,150,170,158,155,169,0,161,174],
[186,163,192,160,151,155,179,0,174],
[166,162,172,147,148,151,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,185,213,158,208,183,201],
[162,0,184,192,185,166,203,171,169],
[174,156,0,155,170,173,168,180,173],
[155,148,185,0,156,147,184,177,175],
[127,155,170,184,0,177,190,142,167],
[182,174,167,193,163,0,175,182,175],
[132,137,172,156,150,165,0,165,145],
[157,169,160,163,198,158,175,0,169],
[139,171,167,165,173,165,195,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,196,157,151,187,157,171,181],
[197,0,194,185,187,205,186,170,197],
[144,146,0,143,172,176,127,152,155],
[183,155,197,0,170,187,167,156,173],
[189,153,168,170,0,176,157,156,192],
[153,135,164,153,164,0,149,162,177],
[183,154,213,173,183,191,0,176,203],
[169,170,188,184,184,178,164,0,177],
[159,143,185,167,148,163,137,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,186,197,179,188,196,170,188],
[136,0,147,174,157,160,158,152,153],
[154,193,0,181,183,171,176,154,177],
[143,166,159,0,163,151,163,148,148],
[161,183,157,177,0,163,166,171,159],
[152,180,169,189,177,0,168,172,176],
[144,182,164,177,174,172,0,169,168],
[170,188,186,192,169,168,171,0,171],
[152,187,163,192,181,164,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,180,162,176,152,164,160,159],
[175,0,176,159,172,153,182,164,166],
[160,164,0,169,160,160,160,166,146],
[178,181,171,0,164,168,174,185,167],
[164,168,180,176,0,158,168,167,148],
[188,187,180,172,182,0,179,188,161],
[176,158,180,166,172,161,0,172,171],
[180,176,174,155,173,152,168,0,159],
[181,174,194,173,192,179,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,181,168,171,170,172,179],
[169,0,172,183,181,181,178,179,180],
[169,168,0,168,163,168,173,167,170],
[159,157,172,0,174,173,163,171,164],
[172,159,177,166,0,167,169,158,163],
[169,159,172,167,173,0,166,179,169],
[170,162,167,177,171,174,0,172,158],
[168,161,173,169,182,161,168,0,173],
[161,160,170,176,177,171,182,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,179,179,173,174,164,166],
[168,0,172,176,183,188,182,163,185],
[162,168,0,158,166,171,166,164,160],
[161,164,182,0,167,166,170,161,164],
[161,157,174,173,0,173,175,160,170],
[167,152,169,174,167,0,164,154,156],
[166,158,174,170,165,176,0,162,166],
[176,177,176,179,180,186,178,0,167],
[174,155,180,176,170,184,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,166,172,172,164,178,157],
[173,0,160,168,163,186,172,187,177],
[176,180,0,160,157,173,173,168,166],
[174,172,180,0,156,178,185,184,173],
[168,177,183,184,0,172,175,192,170],
[168,154,167,162,168,0,174,163,163],
[176,168,167,155,165,166,0,174,173],
[162,153,172,156,148,177,166,0,168],
[183,163,174,167,170,177,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,165,183,185,167,174,149,162],
[193,0,191,206,194,188,188,158,169],
[175,149,0,199,190,175,184,168,170],
[157,134,141,0,160,133,169,134,160],
[155,146,150,180,0,166,181,168,164],
[173,152,165,207,174,0,194,177,162],
[166,152,156,171,159,146,0,141,157],
[191,182,172,206,172,163,199,0,177],
[178,171,170,180,176,178,183,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,169,161,151,166,199,169],
[184,0,198,179,211,164,175,195,202],
[177,142,0,151,182,172,173,200,173],
[171,161,189,0,167,161,172,167,171],
[179,129,158,173,0,156,147,172,150],
[189,176,168,179,184,0,189,204,169],
[174,165,167,168,193,151,0,175,177],
[141,145,140,173,168,136,165,0,157],
[171,138,167,169,190,171,163,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,167,157,182,170,167,204],
[170,0,171,161,165,180,160,155,185],
[179,169,0,176,151,184,194,184,215],
[173,179,164,0,176,176,173,175,183],
[183,175,189,164,0,207,200,175,198],
[158,160,156,164,133,0,163,166,172],
[170,180,146,167,140,177,0,161,195],
[173,185,156,165,165,174,179,0,179],
[136,155,125,157,142,168,145,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,176,183,191,173,178,191,159],
[154,0,201,190,190,155,186,187,168],
[164,139,0,168,168,144,156,164,139],
[157,150,172,0,169,167,165,194,144],
[149,150,172,171,0,142,186,175,150],
[167,185,196,173,198,0,181,172,173],
[162,154,184,175,154,159,0,180,173],
[149,153,176,146,165,168,160,0,152],
[181,172,201,196,190,167,167,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,182,198,175,194,167,178,186],
[163,0,178,178,162,195,170,171,175],
[158,162,0,169,158,181,161,164,176],
[142,162,171,0,155,179,159,163,173],
[165,178,182,185,0,185,179,175,182],
[146,145,159,161,155,0,163,160,160],
[173,170,179,181,161,177,0,169,173],
[162,169,176,177,165,180,171,0,166],
[154,165,164,167,158,180,167,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,140,157,130,118,123,161,158],
[209,0,156,145,154,146,159,214,143],
[200,184,0,169,147,184,163,186,162],
[183,195,171,0,134,159,163,195,206],
[210,186,193,206,0,164,180,200,193],
[222,194,156,181,176,0,166,193,210],
[217,181,177,177,160,174,0,162,167],
[179,126,154,145,140,147,178,0,168],
[182,197,178,134,147,130,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,181,158,179,178,165,166],
[171,0,165,168,172,162,173,160,166],
[170,175,0,172,167,178,172,172,176],
[159,172,168,0,152,163,161,155,155],
[182,168,173,188,0,173,182,176,184],
[161,178,162,177,167,0,169,153,174],
[162,167,168,179,158,171,0,156,173],
[175,180,168,185,164,187,184,0,190],
[174,174,164,185,156,166,167,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,138,148,166,149,152,174,154],
[182,0,142,170,178,164,152,154,165],
[202,198,0,164,207,188,193,186,176],
[192,170,176,0,184,174,170,191,172],
[174,162,133,156,0,169,163,155,156],
[191,176,152,166,171,0,157,169,173],
[188,188,147,170,177,183,0,167,175],
[166,186,154,149,185,171,173,0,179],
[186,175,164,168,184,167,165,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,206,206,151,154,184,161,176],
[160,0,195,185,158,161,160,165,177],
[134,145,0,179,145,164,139,127,143],
[134,155,161,0,172,173,165,153,128],
[189,182,195,168,0,158,164,164,179],
[186,179,176,167,182,0,162,167,163],
[156,180,201,175,176,178,0,174,182],
[179,175,213,187,176,173,166,0,164],
[164,163,197,212,161,177,158,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,185,172,177,180,182,195,201],
[174,0,173,176,169,173,189,163,192],
[155,167,0,159,184,171,172,179,192],
[168,164,181,0,170,182,173,199,198],
[163,171,156,170,0,159,154,177,187],
[160,167,169,158,181,0,161,184,195],
[158,151,168,167,186,179,0,175,183],
[145,177,161,141,163,156,165,0,184],
[139,148,148,142,153,145,157,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,193,169,179,169,193,190,181],
[156,0,173,185,153,155,189,168,180],
[147,167,0,169,162,175,190,189,163],
[171,155,171,0,162,170,174,182,164],
[161,187,178,178,0,180,162,181,194],
[171,185,165,170,160,0,202,167,179],
[147,151,150,166,178,138,0,141,165],
[150,172,151,158,159,173,199,0,171],
[159,160,177,176,146,161,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,165,172,178,171,184,190,174],
[144,0,128,165,149,163,150,164,146],
[175,212,0,188,178,177,164,196,171],
[168,175,152,0,183,163,162,178,184],
[162,191,162,157,0,162,159,172,166],
[169,177,163,177,178,0,184,166,167],
[156,190,176,178,181,156,0,168,180],
[150,176,144,162,168,174,172,0,173],
[166,194,169,156,174,173,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,155,162,190,163,173,182],
[174,0,161,179,179,176,170,161,156],
[180,179,0,164,173,174,170,176,163],
[185,161,176,0,165,184,174,167,180],
[178,161,167,175,0,188,171,169,162],
[150,164,166,156,152,0,146,151,153],
[177,170,170,166,169,194,0,180,163],
[167,179,164,173,171,189,160,0,170],
[158,184,177,160,178,187,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,157,169,162,147,166,152,158],
[187,0,168,180,177,162,182,156,166],
[183,172,0,194,187,166,186,166,164],
[171,160,146,0,174,155,163,155,165],
[178,163,153,166,0,153,185,148,160],
[193,178,174,185,187,0,186,170,174],
[174,158,154,177,155,154,0,145,164],
[188,184,174,185,192,170,195,0,175],
[182,174,176,175,180,166,176,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,138,153,167,121,170,138,137],
[209,0,162,183,185,173,180,181,196],
[202,178,0,183,194,154,176,159,144],
[187,157,157,0,162,128,141,160,163],
[173,155,146,178,0,145,162,158,178],
[219,167,186,212,195,0,196,201,207],
[170,160,164,199,178,144,0,156,159],
[202,159,181,180,182,139,184,0,170],
[203,144,196,177,162,133,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,181,187,168,172,171,177,178],
[173,0,168,176,186,183,165,162,180],
[159,172,0,173,159,162,141,146,162],
[153,164,167,0,153,166,158,145,159],
[172,154,181,187,0,179,156,170,186],
[168,157,178,174,161,0,157,158,176],
[169,175,199,182,184,183,0,174,193],
[163,178,194,195,170,182,166,0,183],
[162,160,178,181,154,164,147,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,171,162,188,166,193,179],
[161,0,181,164,166,181,171,185,173],
[166,159,0,170,159,173,160,173,164],
[169,176,170,0,162,175,176,179,174],
[178,174,181,178,0,188,160,173,171],
[152,159,167,165,152,0,150,175,161],
[174,169,180,164,180,190,0,180,171],
[147,155,167,161,167,165,160,0,167],
[161,167,176,166,169,179,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,158,160,159,157,160,168,158],
[178,0,170,161,154,160,173,174,171],
[182,170,0,163,156,168,187,179,170],
[180,179,177,0,164,167,190,177,173],
[181,186,184,176,0,183,188,166,168],
[183,180,172,173,157,0,179,172,175],
[180,167,153,150,152,161,0,166,164],
[172,166,161,163,174,168,174,0,162],
[182,169,170,167,172,165,176,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,174,170,193,200,176,169,189],
[151,0,158,157,174,175,168,166,171],
[166,182,0,161,197,199,179,177,184],
[170,183,179,0,188,182,179,167,186],
[147,166,143,152,0,163,150,141,172],
[140,165,141,158,177,0,160,144,168],
[164,172,161,161,190,180,0,169,175],
[171,174,163,173,199,196,171,0,190],
[151,169,156,154,168,172,165,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,163,175,174,166,176,178],
[171,0,185,166,174,181,162,163,171],
[173,155,0,157,168,177,167,162,176],
[177,174,183,0,186,179,175,176,166],
[165,166,172,154,0,175,158,174,178],
[166,159,163,161,165,0,169,171,176],
[174,178,173,165,182,171,0,176,160],
[164,177,178,164,166,169,164,0,157],
[162,169,164,174,162,164,180,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,184,175,173,170,193,172,171],
[182,0,171,169,177,188,187,178,180],
[156,169,0,172,165,188,185,173,167],
[165,171,168,0,170,163,180,167,174],
[167,163,175,170,0,175,178,178,171],
[170,152,152,177,165,0,180,167,167],
[147,153,155,160,162,160,0,161,161],
[168,162,167,173,162,173,179,0,174],
[169,160,173,166,169,173,179,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,166,175,184,194,163,213,211],
[144,0,185,141,134,162,156,182,171],
[174,155,0,150,150,161,161,170,182],
[165,199,190,0,175,185,189,207,206],
[156,206,190,165,0,175,156,179,205],
[146,178,179,155,165,0,151,168,177],
[177,184,179,151,184,189,0,199,202],
[127,158,170,133,161,172,141,0,172],
[129,169,158,134,135,163,138,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,200,201,156,176,163,166,184],
[134,0,166,179,147,160,137,151,165],
[140,174,0,185,133,158,158,162,152],
[139,161,155,0,166,164,155,144,160],
[184,193,207,174,0,180,174,166,183],
[164,180,182,176,160,0,162,166,185],
[177,203,182,185,166,178,0,178,182],
[174,189,178,196,174,174,162,0,187],
[156,175,188,180,157,155,158,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,150,165,152,158,155,150],
[174,0,161,177,169,164,163,158,167],
[182,179,0,172,170,170,182,173,168],
[190,163,168,0,165,174,180,158,171],
[175,171,170,175,0,173,182,163,175],
[188,176,170,166,167,0,179,160,164],
[182,177,158,160,158,161,0,164,158],
[185,182,167,182,177,180,176,0,170],
[190,173,172,169,165,176,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,157,179,162,175,175,167,162],
[162,0,165,176,162,178,161,181,180],
[183,175,0,183,179,181,176,169,181],
[161,164,157,0,168,163,155,167,165],
[178,178,161,172,0,171,172,176,181],
[165,162,159,177,169,0,171,167,173],
[165,179,164,185,168,169,0,171,174],
[173,159,171,173,164,173,169,0,160],
[178,160,159,175,159,167,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,166,167,177,184,173,175],
[179,0,186,169,171,181,179,170,166],
[170,154,0,162,145,157,154,140,160],
[174,171,178,0,172,181,193,153,178],
[173,169,195,168,0,185,183,167,176],
[163,159,183,159,155,0,171,156,175],
[156,161,186,147,157,169,0,165,160],
[167,170,200,187,173,184,175,0,188],
[165,174,180,162,164,165,180,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,155,177,169,171,166,174],
[161,0,179,157,171,160,157,161,147],
[159,161,0,142,150,155,156,156,156],
[185,183,198,0,184,189,179,168,179],
[163,169,190,156,0,173,172,154,157],
[171,180,185,151,167,0,161,171,173],
[169,183,184,161,168,179,0,164,171],
[174,179,184,172,186,169,176,0,178],
[166,193,184,161,183,167,169,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,148,128,141,165,165,158,136],
[182,0,161,153,172,176,175,178,147],
[192,179,0,175,160,187,178,208,153],
[212,187,165,0,170,188,203,193,175],
[199,168,180,170,0,204,181,197,159],
[175,164,153,152,136,0,159,193,139],
[175,165,162,137,159,181,0,187,143],
[182,162,132,147,143,147,153,0,132],
[204,193,187,165,181,201,197,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,166,202,159,169,174,133],
[178,0,174,171,187,165,159,155,135],
[170,166,0,159,157,157,151,161,145],
[174,169,181,0,187,176,159,148,119],
[138,153,183,153,0,152,176,126,142],
[181,175,183,164,188,0,151,165,148],
[171,181,189,181,164,189,0,181,137],
[166,185,179,192,214,175,159,0,185],
[207,205,195,221,198,192,203,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,168,186,182,172,165,180,154],
[156,0,180,158,169,174,158,165,161],
[172,160,0,169,166,162,154,167,143],
[154,182,171,0,181,189,171,180,166],
[158,171,174,159,0,166,162,160,149],
[168,166,178,151,174,0,170,161,147],
[175,182,186,169,178,170,0,171,173],
[160,175,173,160,180,179,169,0,146],
[186,179,197,174,191,193,167,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,173,164,173,165,158,170],
[167,0,170,162,152,173,171,162,174],
[174,170,0,162,170,182,159,160,156],
[167,178,178,0,167,164,170,162,188],
[176,188,170,173,0,184,181,157,177],
[167,167,158,176,156,0,170,160,162],
[175,169,181,170,159,170,0,170,183],
[182,178,180,178,183,180,170,0,186],
[170,166,184,152,163,178,157,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,159,169,172,179,180,185],
[170,0,171,189,183,186,191,191,192],
[167,169,0,167,171,166,162,177,177],
[181,151,173,0,163,171,167,169,165],
[171,157,169,177,0,179,173,177,188],
[168,154,174,169,161,0,173,164,165],
[161,149,178,173,167,167,0,171,178],
[160,149,163,171,163,176,169,0,180],
[155,148,163,175,152,175,162,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,188,208,148,183,174,167,208],
[140,0,174,162,132,152,130,138,151],
[152,166,0,190,127,151,128,126,189],
[132,178,150,0,87,92,135,117,134],
[192,208,213,253,0,174,160,187,203],
[157,188,189,248,166,0,163,179,194],
[166,210,212,205,180,177,0,176,217],
[173,202,214,223,153,161,164,0,176],
[132,189,151,206,137,146,123,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,173,163,177,155,166,179],
[161,0,168,172,168,163,150,161,171],
[174,172,0,191,169,162,159,172,184],
[167,168,149,0,162,169,159,162,177],
[177,172,171,178,0,159,169,163,183],
[163,177,178,171,181,0,156,156,175],
[185,190,181,181,171,184,0,169,196],
[174,179,168,178,177,184,171,0,185],
[161,169,156,163,157,165,144,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,159,160,174,174,178,169,152],
[166,0,175,164,164,172,171,170,146],
[181,165,0,173,167,174,195,165,166],
[180,176,167,0,184,182,175,176,175],
[166,176,173,156,0,188,180,171,167],
[166,168,166,158,152,0,149,161,168],
[162,169,145,165,160,191,0,160,158],
[171,170,175,164,169,179,180,0,170],
[188,194,174,165,173,172,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,169,146,168,137,168,167,155],
[185,0,191,186,183,166,186,174,166],
[171,149,0,158,171,157,163,172,170],
[194,154,182,0,175,165,177,178,174],
[172,157,169,165,0,171,179,168,163],
[203,174,183,175,169,0,175,171,171],
[172,154,177,163,161,165,0,162,168],
[173,166,168,162,172,169,178,0,154],
[185,174,170,166,177,169,172,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,172,165,182,190,190,186],
[160,0,176,179,160,164,176,180,175],
[156,164,0,157,171,172,166,185,163],
[168,161,183,0,169,171,156,187,171],
[175,180,169,171,0,186,177,170,182],
[158,176,168,169,154,0,168,179,178],
[150,164,174,184,163,172,0,175,157],
[150,160,155,153,170,161,165,0,179],
[154,165,177,169,158,162,183,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,166,173,183,165,167,192],
[169,0,177,183,169,179,183,174,184],
[162,163,0,161,172,171,168,169,188],
[174,157,179,0,172,182,162,167,181],
[167,171,168,168,0,188,167,175,187],
[157,161,169,158,152,0,153,176,179],
[175,157,172,178,173,187,0,177,196],
[173,166,171,173,165,164,163,0,177],
[148,156,152,159,153,161,144,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,185,181,198,183,189,165,177],
[156,0,170,164,168,166,160,154,166],
[155,170,0,164,162,174,165,152,175],
[159,176,176,0,173,165,169,172,172],
[142,172,178,167,0,169,162,151,173],
[157,174,166,175,171,0,171,159,170],
[151,180,175,171,178,169,0,168,175],
[175,186,188,168,189,181,172,0,187],
[163,174,165,168,167,170,165,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,167,167,163,170,170,180],
[155,0,159,158,148,157,163,175,176],
[173,181,0,178,164,160,182,183,173],
[173,182,162,0,164,174,164,187,164],
[173,192,176,176,0,167,169,187,180],
[177,183,180,166,173,0,192,186,181],
[170,177,158,176,171,148,0,177,164],
[170,165,157,153,153,154,163,0,161],
[160,164,167,176,160,159,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,175,172,162,190,166,182],
[173,0,171,166,168,156,184,160,182],
[167,169,0,174,163,170,178,161,190],
[165,174,166,0,149,160,180,163,172],
[168,172,177,191,0,160,198,164,179],
[178,184,170,180,180,0,183,172,180],
[150,156,162,160,142,157,0,158,170],
[174,180,179,177,176,168,182,0,181],
[158,158,150,168,161,160,170,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,147,176,151,165,167,162,178],
[194,0,163,201,174,151,191,169,184],
[193,177,0,193,168,191,175,174,179],
[164,139,147,0,138,173,178,155,175],
[189,166,172,202,0,184,201,182,201],
[175,189,149,167,156,0,176,169,178],
[173,149,165,162,139,164,0,142,176],
[178,171,166,185,158,171,198,0,183],
[162,156,161,165,139,162,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,176,188,166,178,149,158,166],
[177,0,187,183,184,187,170,182,179],
[164,153,0,163,153,151,146,159,155],
[152,157,177,0,157,174,153,180,172],
[174,156,187,183,0,184,175,175,170],
[162,153,189,166,156,0,150,157,173],
[191,170,194,187,165,190,0,179,165],
[182,158,181,160,165,183,161,0,163],
[174,161,185,168,170,167,175,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,159,167,162,166,154,164,168],
[181,0,176,181,177,177,175,184,170],
[181,164,0,187,184,171,171,168,181],
[173,159,153,0,165,165,159,163,173],
[178,163,156,175,0,176,158,152,168],
[174,163,169,175,164,0,148,165,176],
[186,165,169,181,182,192,0,190,170],
[176,156,172,177,188,175,150,0,170],
[172,170,159,167,172,164,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,181,168,188,181,191,184,198],
[156,0,160,135,151,178,157,167,174],
[159,180,0,152,182,193,168,189,191],
[172,205,188,0,152,195,169,199,198],
[152,189,158,188,0,176,165,192,191],
[159,162,147,145,164,0,162,165,179],
[149,183,172,171,175,178,0,197,194],
[156,173,151,141,148,175,143,0,173],
[142,166,149,142,149,161,146,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,185,171,172,188,195,194,189],
[176,0,172,169,175,151,173,175,185],
[155,168,0,148,152,157,165,164,189],
[169,171,192,0,183,170,196,174,199],
[168,165,188,157,0,159,196,172,187],
[152,189,183,170,181,0,176,168,191],
[145,167,175,144,144,164,0,168,176],
[146,165,176,166,168,172,172,0,180],
[151,155,151,141,153,149,164,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,156,149,153,147,174,183,140],
[197,0,183,173,157,164,186,183,152],
[184,157,0,157,161,169,164,178,179],
[191,167,183,0,168,178,202,169,185],
[187,183,179,172,0,156,178,181,177],
[193,176,171,162,184,0,157,164,162],
[166,154,176,138,162,183,0,161,175],
[157,157,162,171,159,176,179,0,171],
[200,188,161,155,163,178,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,173,183,161,163,173,172],
[167,0,177,182,190,163,181,181,184],
[174,163,0,159,167,167,164,184,165],
[167,158,181,0,172,153,155,190,180],
[157,150,173,168,0,161,171,173,161],
[179,177,173,187,179,0,170,195,184],
[177,159,176,185,169,170,0,194,183],
[167,159,156,150,167,145,146,0,172],
[168,156,175,160,179,156,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,154,158,164,174,158,164],
[161,0,152,142,138,146,159,157,172],
[173,188,0,166,152,161,170,146,178],
[186,198,174,0,172,169,179,170,191],
[182,202,188,168,0,175,183,170,214],
[176,194,179,171,165,0,181,171,171],
[166,181,170,161,157,159,0,157,170],
[182,183,194,170,170,169,183,0,187],
[176,168,162,149,126,169,170,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,179,170,171,164,159,179,166],
[171,0,174,165,168,170,179,171,180],
[161,166,0,167,175,153,171,168,166],
[170,175,173,0,179,165,163,187,171],
[169,172,165,161,0,175,166,180,178],
[176,170,187,175,165,0,181,194,173],
[181,161,169,177,174,159,0,175,167],
[161,169,172,153,160,146,165,0,166],
[174,160,174,169,162,167,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,153,164,135,163,159,147],
[164,0,171,149,169,137,143,164,127],
[170,169,0,175,166,146,154,155,155],
[187,191,165,0,172,155,172,177,160],
[176,171,174,168,0,165,158,175,157],
[205,203,194,185,175,0,150,175,179],
[177,197,186,168,182,190,0,180,162],
[181,176,185,163,165,165,160,0,164],
[193,213,185,180,183,161,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,160,159,173,147,173,164,156],
[185,0,191,179,178,185,183,198,158],
[180,149,0,160,180,166,183,180,174],
[181,161,180,0,193,158,178,170,173],
[167,162,160,147,0,157,156,166,164],
[193,155,174,182,183,0,185,170,173],
[167,157,157,162,184,155,0,159,161],
[176,142,160,170,174,170,181,0,170],
[184,182,166,167,176,167,179,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,205,219,159,205,219,218,197],
[124,0,170,183,137,160,172,184,151],
[135,170,0,195,127,126,194,158,148],
[121,157,145,0,144,136,143,134,157],
[181,203,213,196,0,169,191,160,163],
[135,180,214,204,171,0,192,194,195],
[121,168,146,197,149,148,0,206,171],
[122,156,182,206,180,146,134,0,162],
[143,189,192,183,177,145,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,161,169,182,171,175,187],
[171,0,163,176,162,177,176,170,188],
[180,177,0,165,184,194,188,176,179],
[179,164,175,0,175,174,173,178,177],
[171,178,156,165,0,177,173,167,177],
[158,163,146,166,163,0,154,160,165],
[169,164,152,167,167,186,0,165,176],
[165,170,164,162,173,180,175,0,181],
[153,152,161,163,163,175,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,156,184,179,168,166,151,187],
[154,0,167,170,157,184,171,173,174],
[184,173,0,184,187,194,160,203,173],
[156,170,156,0,177,167,171,174,169],
[161,183,153,163,0,154,158,180,184],
[172,156,146,173,186,0,174,169,169],
[174,169,180,169,182,166,0,186,194],
[189,167,137,166,160,171,154,0,170],
[153,166,167,171,156,171,146,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,193,165,206,179,209,180,160],
[158,0,164,131,152,150,152,163,145],
[147,176,0,139,165,179,168,166,178],
[175,209,201,0,187,173,168,167,156],
[134,188,175,153,0,174,164,153,145],
[161,190,161,167,166,0,167,168,167],
[131,188,172,172,176,173,0,161,141],
[160,177,174,173,187,172,179,0,156],
[180,195,162,184,195,173,199,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,189,167,180,167,169,197],
[158,0,161,178,170,171,179,160,178],
[171,179,0,182,152,175,162,162,196],
[151,162,158,0,148,153,173,168,176],
[173,170,188,192,0,180,177,180,188],
[160,169,165,187,160,0,162,179,181],
[173,161,178,167,163,178,0,174,184],
[171,180,178,172,160,161,166,0,178],
[143,162,144,164,152,159,156,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,185,165,181,171,175,183,181],
[181,0,197,159,170,189,164,176,201],
[155,143,0,151,155,169,149,141,170],
[175,181,189,0,154,198,183,161,180],
[159,170,185,186,0,202,159,170,168],
[169,151,171,142,138,0,154,162,166],
[165,176,191,157,181,186,0,179,196],
[157,164,199,179,170,178,161,0,181],
[159,139,170,160,172,174,144,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,185,152,175,154,186,163,171],
[141,0,182,181,181,165,164,165,166],
[155,158,0,138,161,148,138,156,135],
[188,159,202,0,180,185,222,175,172],
[165,159,179,160,0,188,183,125,129],
[186,175,192,155,152,0,204,155,178],
[154,176,202,118,157,136,0,155,162],
[177,175,184,165,215,185,185,0,180],
[169,174,205,168,211,162,178,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,153,165,159,172,168,149,163],
[182,0,162,180,164,171,176,162,158],
[187,178,0,181,160,189,182,175,163],
[175,160,159,0,175,179,179,167,164],
[181,176,180,165,0,182,173,171,172],
[168,169,151,161,158,0,150,156,144],
[172,164,158,161,167,190,0,172,157],
[191,178,165,173,169,184,168,0,177],
[177,182,177,176,168,196,183,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,171,166,175,165,180,154,156],
[171,0,181,168,167,186,203,166,173],
[169,159,0,161,161,167,166,145,167],
[174,172,179,0,170,169,185,167,157],
[165,173,179,170,0,174,187,167,177],
[175,154,173,171,166,0,172,153,159],
[160,137,174,155,153,168,0,139,159],
[186,174,195,173,173,187,201,0,164],
[184,167,173,183,163,181,181,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,175,162,174,165,174,168],
[159,0,179,178,159,172,160,173,156],
[172,161,0,173,172,153,142,157,165],
[165,162,167,0,150,147,145,145,165],
[178,181,168,190,0,177,165,153,153],
[166,168,187,193,163,0,168,172,175],
[175,180,198,195,175,172,0,167,178],
[166,167,183,195,187,168,173,0,174],
[172,184,175,175,187,165,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,151,193,187,145,185,163,176],
[169,0,157,174,206,145,135,141,174],
[189,183,0,201,217,175,165,175,187],
[147,166,139,0,146,105,124,136,151],
[153,134,123,194,0,132,136,124,159],
[195,195,165,235,208,0,155,167,165],
[155,205,175,216,204,185,0,211,157],
[177,199,165,204,216,173,129,0,188],
[164,166,153,189,181,175,183,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,176,179,157,168,174,170],
[161,0,154,155,151,151,153,166,169],
[158,186,0,161,171,165,165,163,184],
[164,185,179,0,175,170,167,179,179],
[161,189,169,165,0,158,164,161,170],
[183,189,175,170,182,0,175,171,187],
[172,187,175,173,176,165,0,169,187],
[166,174,177,161,179,169,171,0,181],
[170,171,156,161,170,153,153,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,171,163,162,170,168,166],
[168,0,179,173,193,183,182,170,184],
[179,161,0,167,176,165,166,169,187],
[169,167,173,0,172,177,168,166,181],
[177,147,164,168,0,168,157,169,172],
[178,157,175,163,172,0,187,161,186],
[170,158,174,172,183,153,0,154,189],
[172,170,171,174,171,179,186,0,181],
[174,156,153,159,168,154,151,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,151,183,156,174,168,176,173],
[159,0,170,189,162,166,168,164,174],
[189,170,0,180,151,154,170,166,182],
[157,151,160,0,158,139,165,148,159],
[184,178,189,182,0,160,173,185,173],
[166,174,186,201,180,0,196,172,182],
[172,172,170,175,167,144,0,169,169],
[164,176,174,192,155,168,171,0,188],
[167,166,158,181,167,158,171,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,156,175,181,143,160,158,180],
[186,0,172,166,159,186,161,162,176],
[184,168,0,158,193,159,164,161,179],
[165,174,182,0,175,180,178,185,194],
[159,181,147,165,0,144,153,169,173],
[197,154,181,160,196,0,174,161,192],
[180,179,176,162,187,166,0,166,176],
[182,178,179,155,171,179,174,0,193],
[160,164,161,146,167,148,164,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,155,160,177,173,165,149,166],
[185,0,155,176,191,189,174,171,169],
[185,185,0,190,189,199,177,170,176],
[180,164,150,0,179,184,165,166,168],
[163,149,151,161,0,165,158,156,160],
[167,151,141,156,175,0,161,159,162],
[175,166,163,175,182,179,0,163,159],
[191,169,170,174,184,181,177,0,177],
[174,171,164,172,180,178,181,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,151,170,170,177,171,155],
[174,0,172,171,176,174,172,166,159],
[170,168,0,157,178,163,171,161,157],
[189,169,183,0,180,167,188,174,180],
[170,164,162,160,0,158,167,169,167],
[170,166,177,173,182,0,153,174,158],
[163,168,169,152,173,187,0,163,161],
[169,174,179,166,171,166,177,0,168],
[185,181,183,160,173,182,179,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,157,137,177,168,148,160,135],
[176,0,163,173,184,184,164,154,171],
[183,177,0,176,199,194,168,176,171],
[203,167,164,0,202,181,166,177,159],
[163,156,141,138,0,185,152,150,148],
[172,156,146,159,155,0,160,134,146],
[192,176,172,174,188,180,0,182,162],
[180,186,164,163,190,206,158,0,151],
[205,169,169,181,192,194,178,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,142,128,130,187,130,153,155],
[188,0,165,198,189,187,186,189,212],
[198,175,0,163,233,254,154,219,183],
[212,142,177,0,199,198,144,189,177],
[210,151,107,141,0,154,153,163,151],
[153,153,86,142,186,0,131,142,131],
[210,154,186,196,187,209,0,198,177],
[187,151,121,151,177,198,142,0,140],
[185,128,157,163,189,209,163,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,157,174,173,165,171,160,178],
[181,0,183,173,171,168,184,173,184],
[183,157,0,161,167,176,172,171,175],
[166,167,179,0,152,151,167,160,169],
[167,169,173,188,0,164,171,161,200],
[175,172,164,189,176,0,181,166,180],
[169,156,168,173,169,159,0,169,182],
[180,167,169,180,179,174,171,0,188],
[162,156,165,171,140,160,158,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,168,156,187,161,173,197],
[166,0,169,146,168,177,151,180,181],
[170,171,0,150,169,163,139,156,173],
[172,194,190,0,168,185,171,198,192],
[184,172,171,172,0,167,152,169,177],
[153,163,177,155,173,0,153,163,182],
[179,189,201,169,188,187,0,185,201],
[167,160,184,142,171,177,155,0,190],
[143,159,167,148,163,158,139,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,170,178,166,164,159,152],
[164,0,167,184,175,175,168,174,169],
[171,173,0,171,164,164,182,163,177],
[170,156,169,0,178,158,173,174,153],
[162,165,176,162,0,174,169,163,154],
[174,165,176,182,166,0,175,184,160],
[176,172,158,167,171,165,0,194,155],
[181,166,177,166,177,156,146,0,166],
[188,171,163,187,186,180,185,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,182,187,177,181,172,170,178],
[157,0,196,177,170,151,165,152,165],
[158,144,0,172,149,142,155,147,149],
[153,163,168,0,155,157,153,149,165],
[163,170,191,185,0,195,176,170,181],
[159,189,198,183,145,0,180,154,159],
[168,175,185,187,164,160,0,163,177],
[170,188,193,191,170,186,177,0,198],
[162,175,191,175,159,181,163,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,164,158,163,169,172,176,180],
[193,0,193,168,182,186,186,179,183],
[176,147,0,172,168,175,177,180,169],
[182,172,168,0,166,174,174,187,189],
[177,158,172,174,0,166,156,185,185],
[171,154,165,166,174,0,152,173,169],
[168,154,163,166,184,188,0,174,172],
[164,161,160,153,155,167,166,0,175],
[160,157,171,151,155,171,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,172,177,176,165,178,181],
[172,0,176,182,174,166,156,171,172],
[175,164,0,177,168,182,172,167,168],
[168,158,163,0,172,176,171,193,160],
[163,166,172,168,0,176,178,178,148],
[164,174,158,164,164,0,164,160,146],
[175,184,168,169,162,176,0,173,177],
[162,169,173,147,162,180,167,0,147],
[159,168,172,180,192,194,163,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,174,171,163,175,168,162,189],
[202,0,168,174,166,177,169,174,196],
[166,172,0,175,160,161,166,156,163],
[169,166,165,0,161,175,159,175,194],
[177,174,180,179,0,181,173,167,190],
[165,163,179,165,159,0,160,177,161],
[172,171,174,181,167,180,0,168,173],
[178,166,184,165,173,163,172,0,188],
[151,144,177,146,150,179,167,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,156,162,180,189,167,185],
[173,0,178,149,170,163,179,179,194],
[179,162,0,157,177,200,156,196,187],
[184,191,183,0,167,181,183,197,203],
[178,170,163,173,0,183,167,165,190],
[160,177,140,159,157,0,158,171,184],
[151,161,184,157,173,182,0,183,176],
[173,161,144,143,175,169,157,0,169],
[155,146,153,137,150,156,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,187,168,164,183,169,190,163],
[145,0,154,160,160,158,158,162,168],
[153,186,0,169,157,158,161,167,150],
[172,180,171,0,149,175,176,175,174],
[176,180,183,191,0,158,171,177,185],
[157,182,182,165,182,0,178,172,169],
[171,182,179,164,169,162,0,178,167],
[150,178,173,165,163,168,162,0,167],
[177,172,190,166,155,171,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,155,154,188,165,159,164],
[169,0,167,171,156,166,161,167,163],
[183,173,0,173,168,178,156,180,182],
[185,169,167,0,162,175,171,171,165],
[186,184,172,178,0,193,164,176,181],
[152,174,162,165,147,0,148,164,153],
[175,179,184,169,176,192,0,180,168],
[181,173,160,169,164,176,160,0,176],
[176,177,158,175,159,187,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,157,158,156,172,174,156,170],
[164,0,162,147,146,162,166,153,177],
[183,178,0,173,176,175,168,169,176],
[182,193,167,0,177,180,175,160,177],
[184,194,164,163,0,181,176,175,179],
[168,178,165,160,159,0,169,166,171],
[166,174,172,165,164,171,0,156,158],
[184,187,171,180,165,174,184,0,179],
[170,163,164,163,161,169,182,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,187,151,184,168,180,191,176],
[169,0,183,174,176,158,183,179,177],
[153,157,0,151,156,136,156,168,153],
[189,166,189,0,168,163,182,194,162],
[156,164,184,172,0,155,168,193,175],
[172,182,204,177,185,0,181,202,169],
[160,157,184,158,172,159,0,178,169],
[149,161,172,146,147,138,162,0,132],
[164,163,187,178,165,171,171,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,186,173,161,165,186,186],
[164,0,167,186,174,157,166,187,159],
[170,173,0,192,169,175,187,186,163],
[154,154,148,0,168,168,165,185,173],
[167,166,171,172,0,169,161,185,174],
[179,183,165,172,171,0,171,191,172],
[175,174,153,175,179,169,0,175,164],
[154,153,154,155,155,149,165,0,157],
[154,181,177,167,166,168,176,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,146,135,114,170,142,157,200],
[204,0,155,153,116,157,146,151,187],
[194,185,0,152,149,168,182,197,188],
[205,187,188,0,195,181,182,156,197],
[226,224,191,145,0,204,194,167,202],
[170,183,172,159,136,0,190,160,188],
[198,194,158,158,146,150,0,181,170],
[183,189,143,184,173,180,159,0,213],
[140,153,152,143,138,152,170,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,165,176,175,162,160,171,173],
[180,0,159,182,169,164,164,172,169],
[175,181,0,190,176,173,170,186,181],
[164,158,150,0,163,153,156,166,159],
[165,171,164,177,0,162,146,166,163],
[178,176,167,187,178,0,171,176,185],
[180,176,170,184,194,169,0,172,176],
[169,168,154,174,174,164,168,0,165],
[167,171,159,181,177,155,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,148,195,152,162,167,168,163],
[163,0,155,181,180,165,162,180,177],
[192,185,0,190,163,189,174,178,185],
[145,159,150,0,167,155,161,176,168],
[188,160,177,173,0,182,173,166,170],
[178,175,151,185,158,0,172,171,186],
[173,178,166,179,167,168,0,155,173],
[172,160,162,164,174,169,185,0,187],
[177,163,155,172,170,154,167,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,181,172,204,190,180,204],
[170,0,170,175,169,181,172,178,181],
[172,170,0,165,184,176,167,170,190],
[159,165,175,0,170,179,190,169,191],
[168,171,156,170,0,164,171,160,162],
[136,159,164,161,176,0,169,169,155],
[150,168,173,150,169,171,0,165,160],
[160,162,170,171,180,171,175,0,184],
[136,159,150,149,178,185,180,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,217,186,155,124,186,155,247],
[184,0,216,153,154,185,184,153,215],
[123,124,0,61,125,61,154,92,155],
[154,187,279,0,186,123,155,124,217],
[185,186,215,154,0,123,153,154,154],
[216,155,279,217,217,0,186,186,278],
[154,156,186,185,187,154,0,123,279],
[185,187,248,216,186,154,217,0,217],
[93,125,185,123,186,62,61,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,169,169,174,172,163,183],
[167,0,165,171,171,159,156,161,166],
[166,175,0,163,160,164,172,145,159],
[171,169,177,0,163,172,176,156,173],
[171,169,180,177,0,171,171,170,177],
[166,181,176,168,169,0,165,157,181],
[168,184,168,164,169,175,0,163,171],
[177,179,195,184,170,183,177,0,187],
[157,174,181,167,163,159,169,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,168,162,164,171,170,177],
[168,0,183,177,176,158,162,170,176],
[169,157,0,169,178,166,168,149,168],
[172,163,171,0,176,173,181,152,165],
[178,164,162,164,0,168,173,161,170],
[176,182,174,167,172,0,180,163,165],
[169,178,172,159,167,160,0,152,167],
[170,170,191,188,179,177,188,0,178],
[163,164,172,175,170,175,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,157,205,168,168,210,166,186],
[173,0,169,217,215,184,197,185,185],
[183,171,0,181,184,159,170,188,164],
[135,123,159,0,160,153,156,149,158],
[172,125,156,180,0,156,204,165,155],
[172,156,181,187,184,0,208,175,180],
[130,143,170,184,136,132,0,139,153],
[174,155,152,191,175,165,201,0,161],
[154,155,176,182,185,160,187,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,178,178,171,158,174,176],
[165,0,174,158,169,161,173,162,163],
[162,166,0,171,162,160,169,158,166],
[162,182,169,0,175,174,169,175,173],
[162,171,178,165,0,171,169,162,174],
[169,179,180,166,169,0,186,174,178],
[182,167,171,171,171,154,0,161,169],
[166,178,182,165,178,166,179,0,179],
[164,177,174,167,166,162,171,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,168,161,151,136,165,186],
[179,0,181,160,176,155,157,169,177],
[169,159,0,168,141,151,136,159,184],
[172,180,172,0,163,177,172,159,192],
[179,164,199,177,0,154,158,186,192],
[189,185,189,163,186,0,154,185,198],
[204,183,204,168,182,186,0,190,202],
[175,171,181,181,154,155,150,0,173],
[154,163,156,148,148,142,138,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,160,175,161,160,159,156,149],
[176,0,168,183,170,163,163,148,168],
[180,172,0,171,164,163,170,158,160],
[165,157,169,0,156,160,166,150,154],
[179,170,176,184,0,162,178,170,173],
[180,177,177,180,178,0,160,153,157],
[181,177,170,174,162,180,0,152,156],
[184,192,182,190,170,187,188,0,172],
[191,172,180,186,167,183,184,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,164,158,167,167,151,163],
[175,0,182,170,161,203,170,164,168],
[175,158,0,154,174,184,172,137,168],
[176,170,186,0,191,185,191,176,187],
[182,179,166,149,0,186,172,166,178],
[173,137,156,155,154,0,161,152,166],
[173,170,168,149,168,179,0,162,174],
[189,176,203,164,174,188,178,0,182],
[177,172,172,153,162,174,166,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,167,181,165,186,171,181],
[160,0,165,156,172,151,185,167,160],
[160,175,0,151,174,157,166,166,163],
[173,184,189,0,182,183,193,165,197],
[159,168,166,158,0,159,179,167,186],
[175,189,183,157,181,0,192,168,174],
[154,155,174,147,161,148,0,148,167],
[169,173,174,175,173,172,192,0,199],
[159,180,177,143,154,166,173,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,170,171,182,182,168,176],
[162,0,187,170,171,174,190,167,190],
[178,153,0,174,188,177,187,166,172],
[170,170,166,0,169,177,184,176,181],
[169,169,152,171,0,175,185,177,180],
[158,166,163,163,165,0,172,148,167],
[158,150,153,156,155,168,0,160,161],
[172,173,174,164,163,192,180,0,194],
[164,150,168,159,160,173,179,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,168,163,168,167,170,171],
[176,0,173,181,175,179,174,166,180],
[175,167,0,184,164,187,147,165,172],
[172,159,156,0,170,170,147,161,166],
[177,165,176,170,0,189,162,161,175],
[172,161,153,170,151,0,154,150,163],
[173,166,193,193,178,186,0,166,173],
[170,174,175,179,179,190,174,0,175],
[169,160,168,174,165,177,167,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,150,160,176,169,186,188],
[172,0,163,176,169,180,178,193,162],
[164,177,0,185,170,157,152,171,167],
[190,164,155,0,188,156,179,212,191],
[180,171,170,152,0,142,161,174,158],
[164,160,183,184,198,0,170,211,201],
[171,162,188,161,179,170,0,199,197],
[154,147,169,128,166,129,141,0,157],
[152,178,173,149,182,139,143,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,168,172,169,176,164,160,163],
[178,0,164,167,177,183,178,169,166],
[172,176,0,167,175,179,179,162,175],
[168,173,173,0,181,177,166,165,169],
[171,163,165,159,0,182,168,162,163],
[164,157,161,163,158,0,166,156,154],
[176,162,161,174,172,174,0,176,160],
[180,171,178,175,178,184,164,0,165],
[177,174,165,171,177,186,180,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,147,155,159,181,154,167,157],
[158,0,135,139,150,154,149,162,139],
[193,205,0,168,197,188,182,190,175],
[185,201,172,0,172,186,184,186,170],
[181,190,143,168,0,174,168,174,170],
[159,186,152,154,166,0,144,167,151],
[186,191,158,156,172,196,0,168,177],
[173,178,150,154,166,173,172,0,165],
[183,201,165,170,170,189,163,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,161,159,181,176,165,168,170],
[158,0,162,161,176,174,163,157,169],
[179,178,0,175,171,185,173,167,163],
[181,179,165,0,172,173,159,168,176],
[159,164,169,168,0,171,167,162,159],
[164,166,155,167,169,0,149,164,156],
[175,177,167,181,173,191,0,177,181],
[172,183,173,172,178,176,163,0,161],
[170,171,177,164,181,184,159,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,181,169,154,166,186,152,183],
[166,0,155,164,155,155,170,151,176],
[159,185,0,178,173,176,178,172,189],
[171,176,162,0,156,183,166,156,176],
[186,185,167,184,0,176,179,173,182],
[174,185,164,157,164,0,156,156,171],
[154,170,162,174,161,184,0,172,174],
[188,189,168,184,167,184,168,0,192],
[157,164,151,164,158,169,166,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,174,174,199,167,187,191,192],
[154,0,174,154,161,155,143,170,158],
[166,166,0,155,180,162,157,182,163],
[166,186,185,0,183,177,167,176,163],
[141,179,160,157,0,166,143,177,164],
[173,185,178,163,174,0,155,201,154],
[153,197,183,173,197,185,0,200,170],
[149,170,158,164,163,139,140,0,137],
[148,182,177,177,176,186,170,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,182,192,177,150,172,153,180],
[178,0,190,172,169,177,188,179,165],
[158,150,0,170,167,150,184,166,152],
[148,168,170,0,165,144,169,168,185],
[163,171,173,175,0,164,190,182,177],
[190,163,190,196,176,0,193,193,182],
[168,152,156,171,150,147,0,174,166],
[187,161,174,172,158,147,166,0,165],
[160,175,188,155,163,158,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,159,152,156,161,176,174],
[175,0,177,160,171,182,165,185,193],
[163,163,0,176,174,165,182,178,188],
[181,180,164,0,150,157,161,175,173],
[188,169,166,190,0,171,182,189,193],
[184,158,175,183,169,0,167,190,180],
[179,175,158,179,158,173,0,180,171],
[164,155,162,165,151,150,160,0,174],
[166,147,152,167,147,160,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,184,175,177,181,180,165,177],
[158,0,163,180,166,166,172,174,173],
[156,177,0,183,167,167,186,172,170],
[165,160,157,0,173,159,177,169,171],
[163,174,173,167,0,160,185,175,167],
[159,174,173,181,180,0,179,180,162],
[160,168,154,163,155,161,0,154,159],
[175,166,168,171,165,160,186,0,163],
[163,167,170,169,173,178,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,167,181,181,163,162,167,168],
[188,0,173,166,183,170,163,141,180],
[173,167,0,166,165,153,164,141,162],
[159,174,174,0,152,169,153,134,185],
[159,157,175,188,0,181,173,171,196],
[177,170,187,171,159,0,183,146,199],
[178,177,176,187,167,157,0,147,185],
[173,199,199,206,169,194,193,0,203],
[172,160,178,155,144,141,155,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,196,173,185,169,184,166,179],
[154,0,188,163,193,178,180,171,175],
[144,152,0,158,161,149,147,168,153],
[167,177,182,0,199,176,178,199,157],
[155,147,179,141,0,172,155,175,155],
[171,162,191,164,168,0,166,177,145],
[156,160,193,162,185,174,0,168,152],
[174,169,172,141,165,163,172,0,166],
[161,165,187,183,185,195,188,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,164,173,152,175,155,199],
[173,0,171,150,174,148,165,158,183],
[165,169,0,153,159,134,163,163,179],
[176,190,187,0,178,174,192,167,184],
[167,166,181,162,0,141,169,154,182],
[188,192,206,166,199,0,197,177,202],
[165,175,177,148,171,143,0,163,188],
[185,182,177,173,186,163,177,0,186],
[141,157,161,156,158,138,152,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,194,178,176,155,194,143,171],
[187,0,198,180,171,181,200,150,151],
[146,142,0,166,157,121,151,148,132],
[162,160,174,0,153,164,202,133,158],
[164,169,183,187,0,190,176,133,167],
[185,159,219,176,150,0,192,181,150],
[146,140,189,138,164,148,0,142,106],
[197,190,192,207,207,159,198,0,165],
[169,189,208,182,173,190,234,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,176,176,179,175,171,172,167],
[160,0,154,178,165,171,166,166,158],
[164,186,0,176,166,189,176,181,181],
[164,162,164,0,168,183,174,180,163],
[161,175,174,172,0,174,176,180,160],
[165,169,151,157,166,0,174,176,167],
[169,174,164,166,164,166,0,178,170],
[168,174,159,160,160,164,162,0,152],
[173,182,159,177,180,173,170,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,174,187,175,164,189,180],
[167,0,157,152,169,153,165,182,188],
[167,183,0,187,192,183,178,189,186],
[166,188,153,0,178,158,167,174,181],
[153,171,148,162,0,162,166,201,190],
[165,187,157,182,178,0,165,194,185],
[176,175,162,173,174,175,0,200,196],
[151,158,151,166,139,146,140,0,166],
[160,152,154,159,150,155,144,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,164,166,150,160,175,162,151],
[156,0,144,145,133,140,167,129,152],
[176,196,0,177,161,168,185,155,176],
[174,195,163,0,157,166,183,171,193],
[190,207,179,183,0,170,197,174,183],
[180,200,172,174,170,0,182,160,174],
[165,173,155,157,143,158,0,151,156],
[178,211,185,169,166,180,189,0,179],
[189,188,164,147,157,166,184,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,192,180,173,172,166,163,174],
[181,0,188,178,171,184,175,169,185],
[148,152,0,176,170,171,155,141,153],
[160,162,164,0,169,181,171,164,171],
[167,169,170,171,0,174,160,167,154],
[168,156,169,159,166,0,181,174,173],
[174,165,185,169,180,159,0,164,170],
[177,171,199,176,173,166,176,0,182],
[166,155,187,169,186,167,170,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,152,161,143,146,145,150,148],
[192,0,158,189,157,155,153,160,153],
[188,182,0,178,172,154,159,172,165],
[179,151,162,0,149,162,166,158,156],
[197,183,168,191,0,181,165,161,157],
[194,185,186,178,159,0,171,160,165],
[195,187,181,174,175,169,0,166,173],
[190,180,168,182,179,180,174,0,159],
[192,187,175,184,183,175,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,164,156,185,174,161,177],
[158,0,150,162,149,158,160,144,152],
[163,190,0,164,156,160,150,154,155],
[176,178,176,0,183,169,190,172,185],
[184,191,184,157,0,184,172,158,193],
[155,182,180,171,156,0,170,156,155],
[166,180,190,150,168,170,0,148,160],
[179,196,186,168,182,184,192,0,179],
[163,188,185,155,147,185,180,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,157,171,154,170,156,177,161],
[167,0,172,179,164,166,163,165,162],
[183,168,0,175,163,187,159,175,182],
[169,161,165,0,167,169,154,169,164],
[186,176,177,173,0,179,169,181,169],
[170,174,153,171,161,0,171,167,171],
[184,177,181,186,171,169,0,173,184],
[163,175,165,171,159,173,167,0,183],
[179,178,158,176,171,169,156,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,181,134,131,141,141,170],
[174,0,186,178,155,151,180,169,184],
[182,154,0,197,145,141,160,149,173],
[159,162,143,0,146,153,143,145,183],
[206,185,195,194,0,161,176,176,186],
[209,189,199,187,179,0,165,185,192],
[199,160,180,197,164,175,0,180,194],
[199,171,191,195,164,155,160,0,192],
[170,156,167,157,154,148,146,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,206,182,194,198,180,168,183],
[142,0,153,158,161,161,131,134,155],
[134,187,0,166,159,164,143,132,161],
[158,182,174,0,181,156,132,146,184],
[146,179,181,159,0,164,163,158,178],
[142,179,176,184,176,0,136,162,163],
[160,209,197,208,177,204,0,174,197],
[172,206,208,194,182,178,166,0,200],
[157,185,179,156,162,177,143,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,188,181,166,161,160,163,167],
[178,0,196,186,176,159,177,165,191],
[152,144,0,160,156,154,149,164,152],
[159,154,180,0,159,159,162,161,172],
[174,164,184,181,0,161,167,174,172],
[179,181,186,181,179,0,164,169,181],
[180,163,191,178,173,176,0,173,169],
[177,175,176,179,166,171,167,0,174],
[173,149,188,168,168,159,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,156,162,173,171,180,166,177],
[174,0,157,170,157,161,190,171,185],
[184,183,0,167,173,174,184,182,177],
[178,170,173,0,184,173,188,163,180],
[167,183,167,156,0,181,191,172,180],
[169,179,166,167,159,0,188,171,185],
[160,150,156,152,149,152,0,158,155],
[174,169,158,177,168,169,182,0,164],
[163,155,163,160,160,155,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,163,162,213,180,211,129,113],
[194,0,226,211,211,211,147,194,131],
[177,114,0,162,196,130,131,145,115],
[178,129,178,0,211,180,146,147,146],
[127,129,144,129,0,145,113,128,128],
[160,129,210,160,195,0,145,161,128],
[129,193,209,194,227,195,0,160,176],
[211,146,195,193,212,179,180,0,146],
[227,209,225,194,212,212,164,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,180,159,164,161,164,139,145],
[175,0,176,163,168,150,163,174,184],
[160,164,0,162,157,151,144,158,170],
[181,177,178,0,165,171,169,168,178],
[176,172,183,175,0,171,171,164,176],
[179,190,189,169,169,0,164,163,190],
[176,177,196,171,169,176,0,165,150],
[201,166,182,172,176,177,175,0,182],
[195,156,170,162,164,150,190,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,173,184,186,168,195,187,181],
[159,0,155,163,172,144,169,159,153],
[167,185,0,179,175,177,172,177,183],
[156,177,161,0,166,154,178,157,162],
[154,168,165,174,0,134,162,164,174],
[172,196,163,186,206,0,189,191,169],
[145,171,168,162,178,151,0,164,164],
[153,181,163,183,176,149,176,0,157],
[159,187,157,178,166,171,176,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,180,183,173,182,181,186,171],
[180,0,163,161,173,180,167,179,167],
[160,177,0,176,167,178,181,177,170],
[157,179,164,0,165,175,160,176,171],
[167,167,173,175,0,170,168,184,172],
[158,160,162,165,170,0,162,166,167],
[159,173,159,180,172,178,0,168,177],
[154,161,163,164,156,174,172,0,158],
[169,173,170,169,168,173,163,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,167,160,165,173,156,166],
[166,0,168,184,171,160,168,163,166],
[175,172,0,170,155,160,163,157,171],
[173,156,170,0,162,162,162,164,160],
[180,169,185,178,0,168,173,167,173],
[175,180,180,178,172,0,170,181,174],
[167,172,177,178,167,170,0,175,179],
[184,177,183,176,173,159,165,0,177],
[174,174,169,180,167,166,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,159,167,180,158,186,179,177],
[150,0,161,159,172,161,169,172,152],
[181,179,0,167,171,165,182,190,168],
[173,181,173,0,177,172,180,190,168],
[160,168,169,163,0,157,159,170,177],
[182,179,175,168,183,0,169,169,169],
[154,171,158,160,181,171,0,171,170],
[161,168,150,150,170,171,169,0,153],
[163,188,172,172,163,171,170,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,175,181,170,168,175,181],
[170,0,184,192,186,159,161,172,175],
[173,156,0,170,169,180,161,180,170],
[165,148,170,0,166,164,144,175,176],
[159,154,171,174,0,151,147,168,158],
[170,181,160,176,189,0,170,169,181],
[172,179,179,196,193,170,0,173,174],
[165,168,160,165,172,171,167,0,164],
[159,165,170,164,182,159,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,180,168,173,180,172,162,199],
[162,0,167,163,164,164,173,168,196],
[160,173,0,166,172,176,169,167,185],
[172,177,174,0,175,181,188,170,195],
[167,176,168,165,0,186,172,172,205],
[160,176,164,159,154,0,162,163,185],
[168,167,171,152,168,178,0,175,192],
[178,172,173,170,168,177,165,0,192],
[141,144,155,145,135,155,148,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,156,171,158,180,163,177,147],
[179,0,166,174,160,169,173,165,166],
[184,174,0,176,164,172,174,182,174],
[169,166,164,0,161,158,177,165,159],
[182,180,176,179,0,189,183,167,175],
[160,171,168,182,151,0,165,171,161],
[177,167,166,163,157,175,0,174,160],
[163,175,158,175,173,169,166,0,168],
[193,174,166,181,165,179,180,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,178,178,174,172,174,181,172],
[174,0,182,186,186,171,173,174,169],
[162,158,0,163,164,165,171,171,166],
[162,154,177,0,172,162,156,182,177],
[166,154,176,168,0,149,158,164,177],
[168,169,175,178,191,0,181,175,190],
[166,167,169,184,182,159,0,180,178],
[159,166,169,158,176,165,160,0,162],
[168,171,174,163,163,150,162,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,169,175,164,174,173,176],
[162,0,169,159,161,170,156,170,160],
[161,171,0,171,185,180,172,170,180],
[171,181,169,0,166,175,168,170,172],
[165,179,155,174,0,186,182,168,174],
[176,170,160,165,154,0,166,161,172],
[166,184,168,172,158,174,0,162,174],
[167,170,170,170,172,179,178,0,171],
[164,180,160,168,166,168,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,163,156,174,172,175,160],
[170,0,172,170,160,163,160,178,184],
[173,168,0,173,157,168,175,185,186],
[177,170,167,0,171,180,177,190,182],
[184,180,183,169,0,175,188,196,182],
[166,177,172,160,165,0,169,181,180],
[168,180,165,163,152,171,0,192,168],
[165,162,155,150,144,159,148,0,162],
[180,156,154,158,158,160,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,181,165,151,171,156,184],
[156,0,157,172,179,157,155,146,180],
[177,183,0,186,183,158,163,163,196],
[159,168,154,0,181,165,163,165,187],
[175,161,157,159,0,176,154,151,184],
[189,183,182,175,164,0,168,170,195],
[169,185,177,177,186,172,0,173,186],
[184,194,177,175,189,170,167,0,187],
[156,160,144,153,156,145,154,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,189,179,179,178,164,196,158],
[144,0,157,154,153,152,153,180,160],
[151,183,0,170,167,169,147,193,177],
[161,186,170,0,148,175,172,176,169],
[161,187,173,192,0,156,168,183,164],
[162,188,171,165,184,0,151,174,156],
[176,187,193,168,172,189,0,191,160],
[144,160,147,164,157,166,149,0,137],
[182,180,163,171,176,184,180,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,153,176,184,172,173,186],
[167,0,162,151,171,163,151,170,167],
[162,178,0,171,178,166,162,170,166],
[187,189,169,0,190,185,169,189,188],
[164,169,162,150,0,168,165,172,164],
[156,177,174,155,172,0,159,162,161],
[168,189,178,171,175,181,0,176,175],
[167,170,170,151,168,178,164,0,158],
[154,173,174,152,176,179,165,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,340,227,340,226,284,225,227],
[170,0,284,171,226,170,228,169,228],
[0,56,0,114,225,112,171,112,170],
[113,169,226,0,226,169,284,225,284],
[0,114,115,114,0,56,171,112,114],
[114,170,228,171,284,0,228,170,227],
[56,112,169,56,169,112,0,112,226],
[115,171,228,115,228,170,228,0,228],
[113,112,170,56,226,113,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,178,168,192,170,166,168,183],
[161,0,162,170,186,178,169,177,168],
[162,178,0,161,177,175,181,172,161],
[172,170,179,0,180,164,180,184,177],
[148,154,163,160,0,165,168,161,165],
[170,162,165,176,175,0,186,169,165],
[174,171,159,160,172,154,0,178,170],
[172,163,168,156,179,171,162,0,170],
[157,172,179,163,175,175,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,175,137,185,181,166,170,160],
[147,0,147,103,128,128,148,146,127],
[165,193,0,94,139,147,136,124,119],
[203,237,246,0,188,205,216,224,161],
[155,212,201,152,0,165,146,184,145],
[159,212,193,135,175,0,168,180,173],
[174,192,204,124,194,172,0,202,160],
[170,194,216,116,156,160,138,0,142],
[180,213,221,179,195,167,180,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,192,184,186,165,175,178,173],
[160,0,176,172,187,174,180,170,176],
[148,164,0,178,176,151,174,158,152],
[156,168,162,0,178,139,164,159,155],
[154,153,164,162,0,162,168,158,159],
[175,166,189,201,178,0,180,180,167],
[165,160,166,176,172,160,0,152,170],
[162,170,182,181,182,160,188,0,168],
[167,164,188,185,181,173,170,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,162,136,147,195,110,136,172],
[200,0,118,159,150,154,139,135,146],
[178,222,0,205,163,174,180,175,168],
[204,181,135,0,162,152,157,141,189],
[193,190,177,178,0,181,142,149,191],
[145,186,166,188,159,0,149,149,184],
[230,201,160,183,198,191,0,154,197],
[204,205,165,199,191,191,186,0,199],
[168,194,172,151,149,156,143,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,46,147,144,94,95,98,144],
[197,0,98,198,144,48,143,146,146],
[294,242,0,246,146,96,97,194,242],
[193,142,94,0,143,48,191,194,242],
[196,196,194,197,0,144,243,145,245],
[246,292,244,292,196,0,244,146,292],
[245,197,243,149,97,96,0,145,245],
[242,194,146,146,195,194,195,0,243],
[196,194,98,98,95,48,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,165,139,160,155,159,163],
[165,0,152,179,157,161,165,170,178],
[165,188,0,178,155,164,175,161,162],
[175,161,162,0,153,160,171,156,170],
[201,183,185,187,0,175,192,162,197],
[180,179,176,180,165,0,170,161,169],
[185,175,165,169,148,170,0,161,179],
[181,170,179,184,178,179,179,0,185],
[177,162,178,170,143,171,161,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,168,174,159,184,183,191,173],
[146,0,137,145,191,138,178,178,159],
[172,203,0,170,184,184,191,169,193],
[166,195,170,0,163,182,116,178,150],
[181,149,156,177,0,161,172,127,181],
[156,202,156,158,179,0,166,158,146],
[157,162,149,224,168,174,0,162,160],
[149,162,171,162,213,182,178,0,150],
[167,181,147,190,159,194,180,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,172,181,170,152,185,172],
[168,0,178,180,199,175,172,185,193],
[156,162,0,165,174,162,166,172,165],
[168,160,175,0,162,152,165,172,179],
[159,141,166,178,0,157,166,174,166],
[170,165,178,188,183,0,175,187,189],
[188,168,174,175,174,165,0,177,184],
[155,155,168,168,166,153,163,0,177],
[168,147,175,161,174,151,156,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,182,168,190,177,189,177],
[159,0,151,148,161,164,176,170,183],
[166,189,0,167,163,185,190,171,178],
[158,192,173,0,193,180,179,165,183],
[172,179,177,147,0,196,197,178,178],
[150,176,155,160,144,0,160,166,168],
[163,164,150,161,143,180,0,164,171],
[151,170,169,175,162,174,176,0,176],
[163,157,162,157,162,172,169,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,169,167,185,142,173,173,175],
[186,0,155,169,178,184,178,148,177],
[171,185,0,163,174,157,148,130,153],
[173,171,177,0,166,170,162,153,144],
[155,162,166,174,0,162,140,142,143],
[198,156,183,170,178,0,176,172,158],
[167,162,192,178,200,164,0,172,182],
[167,192,210,187,198,168,168,0,188],
[165,163,187,196,197,182,158,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,165,174,179,171,175,170,167],
[180,0,171,174,174,167,165,170,173],
[175,169,0,178,174,175,162,164,167],
[166,166,162,0,174,162,158,170,173],
[161,166,166,166,0,161,169,174,161],
[169,173,165,178,179,0,167,165,172],
[165,175,178,182,171,173,0,177,181],
[170,170,176,170,166,175,163,0,175],
[173,167,173,167,179,168,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,113,151,225,189,189,263,113],
[190,0,150,113,225,189,151,225,114],
[227,190,0,189,264,189,228,264,151],
[189,227,151,0,264,189,151,226,189],
[115,115,76,76,0,114,113,76,76],
[151,151,151,151,226,0,189,151,152],
[151,189,112,189,227,151,0,265,150],
[77,115,76,114,264,189,75,0,114],
[227,226,189,151,264,188,190,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,174,172,168,170,174,177,168],
[195,0,178,166,169,179,177,178,175],
[166,162,0,164,180,181,177,167,166],
[168,174,176,0,166,176,167,164,155],
[172,171,160,174,0,179,179,168,177],
[170,161,159,164,161,0,156,155,160],
[166,163,163,173,161,184,0,155,162],
[163,162,173,176,172,185,185,0,172],
[172,165,174,185,163,180,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,191,187,191,178,169,186,182],
[153,0,160,160,167,167,157,173,163],
[149,180,0,163,171,163,154,156,146],
[153,180,177,0,186,182,171,173,187],
[149,173,169,154,0,154,163,172,172],
[162,173,177,158,186,0,165,196,174],
[171,183,186,169,177,175,0,185,159],
[154,167,184,167,168,144,155,0,163],
[158,177,194,153,168,166,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,178,180,186,183,159,190,187],
[179,0,166,174,179,171,175,183,190],
[162,174,0,174,175,174,159,184,183],
[160,166,166,0,172,184,164,172,172],
[154,161,165,168,0,159,156,182,165],
[157,169,166,156,181,0,157,188,193],
[181,165,181,176,184,183,0,188,189],
[150,157,156,168,158,152,152,0,171],
[153,150,157,168,175,147,151,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,177,146,176,181,163,166,169],
[176,0,178,165,157,177,163,153,205],
[163,162,0,156,159,153,166,167,174],
[194,175,184,0,176,178,169,179,192],
[164,183,181,164,0,184,184,176,178],
[159,163,187,162,156,0,163,177,170],
[177,177,174,171,156,177,0,156,197],
[174,187,173,161,164,163,184,0,173],
[171,135,166,148,162,170,143,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,152,164,158,156,152,179,165],
[176,0,144,163,164,189,161,205,166],
[188,196,0,178,181,169,184,178,195],
[176,177,162,0,174,199,191,204,186],
[182,176,159,166,0,178,175,208,168],
[184,151,171,141,162,0,163,184,163],
[188,179,156,149,165,177,0,201,174],
[161,135,162,136,132,156,139,0,147],
[175,174,145,154,172,177,166,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,157,164,151,172,172,160,160],
[171,0,160,169,158,162,165,160,164],
[183,180,0,160,164,172,174,165,165],
[176,171,180,0,174,176,176,166,177],
[189,182,176,166,0,166,181,172,167],
[168,178,168,164,174,0,162,168,164],
[168,175,166,164,159,178,0,155,174],
[180,180,175,174,168,172,185,0,175],
[180,176,175,163,173,176,166,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,161,170,178,172,163,173],
[169,0,159,160,168,168,174,162,156],
[166,181,0,180,159,183,176,172,161],
[179,180,160,0,169,172,177,161,162],
[170,172,181,171,0,165,179,172,166],
[162,172,157,168,175,0,169,154,164],
[168,166,164,163,161,171,0,166,160],
[177,178,168,179,168,186,174,0,172],
[167,184,179,178,174,176,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,152,167,167,161,168,153,164],
[168,0,155,161,168,170,175,163,162],
[188,185,0,173,160,187,186,183,172],
[173,179,167,0,178,187,177,166,173],
[173,172,180,162,0,178,171,166,153],
[179,170,153,153,162,0,167,156,175],
[172,165,154,163,169,173,0,152,158],
[187,177,157,174,174,184,188,0,169],
[176,178,168,167,187,165,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,152,165,154,156,171,146,139],
[198,0,175,179,169,170,173,179,162],
[188,165,0,186,173,169,166,175,150],
[175,161,154,0,139,154,166,177,169],
[186,171,167,201,0,180,164,171,178],
[184,170,171,186,160,0,190,178,175],
[169,167,174,174,176,150,0,181,164],
[194,161,165,163,169,162,159,0,159],
[201,178,190,171,162,165,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,183,175,171,169,179,163,173],
[170,0,162,166,165,153,150,169,155],
[157,178,0,159,164,158,174,168,158],
[165,174,181,0,174,161,162,164,174],
[169,175,176,166,0,162,165,168,176],
[171,187,182,179,178,0,181,170,177],
[161,190,166,178,175,159,0,178,171],
[177,171,172,176,172,170,162,0,178],
[167,185,182,166,164,163,169,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,182,177,183,175,168,176,170],
[165,0,182,151,161,165,142,159,173],
[158,158,0,159,181,169,170,176,193],
[163,189,181,0,172,156,168,185,188],
[157,179,159,168,0,166,172,174,188],
[165,175,171,184,174,0,164,182,189],
[172,198,170,172,168,176,0,190,188],
[164,181,164,155,166,158,150,0,177],
[170,167,147,152,152,151,152,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,181,157,171,154,169,166,177],
[170,0,176,166,170,157,161,165,177],
[159,164,0,159,164,156,170,164,169],
[183,174,181,0,177,171,156,154,171],
[169,170,176,163,0,167,170,182,168],
[186,183,184,169,173,0,168,172,183],
[171,179,170,184,170,172,0,173,175],
[174,175,176,186,158,168,167,0,166],
[163,163,171,169,172,157,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,187,184,173,178,186,173,197],
[170,0,179,183,185,174,167,172,186],
[153,161,0,167,175,165,170,167,178],
[156,157,173,0,174,174,157,157,177],
[167,155,165,166,0,166,163,163,175],
[162,166,175,166,174,0,176,170,182],
[154,173,170,183,177,164,0,169,180],
[167,168,173,183,177,170,171,0,185],
[143,154,162,163,165,158,160,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,179,168,153,163,158,165,160],
[179,0,206,197,167,169,183,172,156],
[161,134,0,161,143,152,135,157,123],
[172,143,179,0,153,176,152,186,153],
[187,173,197,187,0,170,177,178,170],
[177,171,188,164,170,0,154,165,158],
[182,157,205,188,163,186,0,175,155],
[175,168,183,154,162,175,165,0,162],
[180,184,217,187,170,182,185,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,170,190,195,168,166,182,197],
[147,0,141,183,177,171,155,147,168],
[170,199,0,189,175,165,168,169,181],
[150,157,151,0,167,154,149,155,151],
[145,163,165,173,0,152,160,153,177],
[172,169,175,186,188,0,167,166,168],
[174,185,172,191,180,173,0,163,182],
[158,193,171,185,187,174,177,0,193],
[143,172,159,189,163,172,158,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,158,150,159,150,180,156],
[157,0,135,119,139,135,149,150,164],
[172,205,0,154,182,153,175,150,180],
[182,221,186,0,167,170,180,164,183],
[190,201,158,173,0,173,184,168,163],
[181,205,187,170,167,0,188,183,172],
[190,191,165,160,156,152,0,157,195],
[160,190,190,176,172,157,183,0,205],
[184,176,160,157,177,168,145,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,148,161,163,130,166,191,124],
[186,0,179,156,166,171,177,180,161],
[192,161,0,195,195,166,203,196,155],
[179,184,145,0,168,159,191,193,168],
[177,174,145,172,0,161,187,179,175],
[210,169,174,181,179,0,194,195,169],
[174,163,137,149,153,146,0,191,159],
[149,160,144,147,161,145,149,0,138],
[216,179,185,172,165,171,181,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,151,186,149,151,172,163,158],
[187,0,179,181,167,176,172,184,173],
[189,161,0,160,165,164,165,174,171],
[154,159,180,0,162,151,165,182,169],
[191,173,175,178,0,164,177,189,151],
[189,164,176,189,176,0,170,186,177],
[168,168,175,175,163,170,0,186,178],
[177,156,166,158,151,154,154,0,167],
[182,167,169,171,189,163,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,170,184,185,177,185,181,178],
[167,0,154,162,170,183,159,176,181],
[170,186,0,181,186,181,179,188,199],
[156,178,159,0,173,173,179,179,193],
[155,170,154,167,0,174,184,174,178],
[163,157,159,167,166,0,177,173,189],
[155,181,161,161,156,163,0,169,178],
[159,164,152,161,166,167,171,0,179],
[162,159,141,147,162,151,162,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,156,162,171,153,162,166,174],
[163,0,153,158,168,156,168,158,169],
[184,187,0,170,178,170,171,185,176],
[178,182,170,0,182,168,176,180,177],
[169,172,162,158,0,162,172,168,168],
[187,184,170,172,178,0,173,192,181],
[178,172,169,164,168,167,0,171,170],
[174,182,155,160,172,148,169,0,173],
[166,171,164,163,172,159,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,182,183,164,158,164,171],
[166,0,169,182,172,154,175,160,177],
[171,171,0,166,186,151,173,184,184],
[158,158,174,0,154,155,177,155,167],
[157,168,154,186,0,152,161,146,161],
[176,186,189,185,188,0,170,175,180],
[182,165,167,163,179,170,0,165,178],
[176,180,156,185,194,165,175,0,169],
[169,163,156,173,179,160,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,185,169,178,202,178,164,167],
[170,0,165,155,188,186,173,177,174],
[155,175,0,148,179,170,168,169,167],
[171,185,192,0,192,185,183,190,169],
[162,152,161,148,0,163,158,175,168],
[138,154,170,155,177,0,159,160,161],
[162,167,172,157,182,181,0,178,175],
[176,163,171,150,165,180,162,0,146],
[173,166,173,171,172,179,165,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,152,155,164,166,168,161,154],
[163,0,164,153,149,148,158,156,151],
[188,176,0,168,159,164,176,172,172],
[185,187,172,0,179,186,181,168,177],
[176,191,181,161,0,167,186,162,177],
[174,192,176,154,173,0,169,171,177],
[172,182,164,159,154,171,0,165,169],
[179,184,168,172,178,169,175,0,175],
[186,189,168,163,163,163,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,168,142,231,204,188,227,242],
[197,0,178,163,248,194,196,220,179],
[172,162,0,177,251,182,166,175,234],
[198,177,163,0,224,224,182,206,193],
[109,92,89,116,0,192,148,174,173],
[136,146,158,116,148,0,161,184,186],
[152,144,174,158,192,179,0,204,227],
[113,120,165,134,166,156,136,0,176],
[98,161,106,147,167,154,113,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,181,148,155,163,157,166],
[169,0,158,187,168,169,160,179,166],
[169,182,0,169,153,143,160,158,155],
[159,153,171,0,143,151,158,147,147],
[192,172,187,197,0,174,180,178,159],
[185,171,197,189,166,0,170,161,175],
[177,180,180,182,160,170,0,166,165],
[183,161,182,193,162,179,174,0,149],
[174,174,185,193,181,165,175,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,169,171,180,150,175,152],
[169,0,150,170,147,171,147,176,154],
[171,190,0,170,165,169,169,180,172],
[171,170,170,0,158,177,162,177,155],
[169,193,175,182,0,190,175,188,155],
[160,169,171,163,150,0,171,178,152],
[190,193,171,178,165,169,0,195,164],
[165,164,160,163,152,162,145,0,148],
[188,186,168,185,185,188,176,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,190,196,169,190,180,181,180],
[142,0,158,141,143,167,154,164,154],
[150,182,0,166,155,176,167,165,172],
[144,199,174,0,181,170,170,176,164],
[171,197,185,159,0,192,177,185,168],
[150,173,164,170,148,0,178,169,160],
[160,186,173,170,163,162,0,177,177],
[159,176,175,164,155,171,163,0,145],
[160,186,168,176,172,180,163,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,151,182,165,167,174,157,152],
[166,0,185,182,182,169,180,164,172],
[189,155,0,181,190,189,177,163,176],
[158,158,159,0,157,171,170,150,162],
[175,158,150,183,0,164,164,167,169],
[173,171,151,169,176,0,171,168,158],
[166,160,163,170,176,169,0,177,171],
[183,176,177,190,173,172,163,0,159],
[188,168,164,178,171,182,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,165,161,160,161,169,156,165],
[189,0,165,168,183,172,182,171,169],
[175,175,0,173,180,160,164,162,168],
[179,172,167,0,162,169,181,160,178],
[180,157,160,178,0,166,173,170,170],
[179,168,180,171,174,0,180,157,182],
[171,158,176,159,167,160,0,168,168],
[184,169,178,180,170,183,172,0,181],
[175,171,172,162,170,158,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,174,195,178,166,174,194],
[164,0,147,166,173,158,157,152,170],
[176,193,0,173,176,163,178,160,185],
[166,174,167,0,162,170,169,182,175],
[145,167,164,178,0,177,165,180,172],
[162,182,177,170,163,0,167,164,176],
[174,183,162,171,175,173,0,174,172],
[166,188,180,158,160,176,166,0,182],
[146,170,155,165,168,164,168,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,171,173,172,173,171,163,177],
[146,0,164,173,156,152,158,162,165],
[169,176,0,181,175,176,157,186,185],
[167,167,159,0,159,160,151,172,163],
[168,184,165,181,0,170,164,183,175],
[167,188,164,180,170,0,175,173,188],
[169,182,183,189,176,165,0,184,183],
[177,178,154,168,157,167,156,0,164],
[163,175,155,177,165,152,157,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,246,171,188,213,189,164,195],
[170,0,202,169,187,196,162,147,198],
[94,138,0,125,125,154,136,127,162],
[169,171,215,0,155,221,181,180,195],
[152,153,215,185,0,165,153,154,180],
[127,144,186,119,175,0,156,145,168],
[151,178,204,159,187,184,0,218,162],
[176,193,213,160,186,195,122,0,186],
[145,142,178,145,160,172,178,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,144,193,193,122,155,128,185],
[126,0,114,163,114,74,167,116,165],
[196,226,0,183,215,154,197,180,196],
[147,177,157,0,198,159,146,180,159],
[147,226,125,142,0,91,156,128,162],
[218,266,186,181,249,0,156,180,228],
[185,173,143,194,184,184,0,197,183],
[212,224,160,160,212,160,143,0,194],
[155,175,144,181,178,112,157,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,149,189,154,171,160,167,172],
[193,0,149,188,169,171,176,186,182],
[191,191,0,206,181,180,162,182,185],
[151,152,134,0,143,166,151,150,173],
[186,171,159,197,0,177,181,193,193],
[169,169,160,174,163,0,148,173,151],
[180,164,178,189,159,192,0,181,183],
[173,154,158,190,147,167,159,0,166],
[168,158,155,167,147,189,157,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,160,193,192,170,175,178,175],
[191,0,176,189,193,170,184,175,180],
[180,164,0,187,188,168,189,194,187],
[147,151,153,0,150,139,160,172,148],
[148,147,152,190,0,160,160,186,174],
[170,170,172,201,180,0,183,180,190],
[165,156,151,180,180,157,0,171,167],
[162,165,146,168,154,160,169,0,167],
[165,160,153,192,166,150,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,154,152,171,168,160,174,169],
[178,0,186,175,174,188,169,181,182],
[186,154,0,152,160,176,149,175,167],
[188,165,188,0,167,198,172,162,172],
[169,166,180,173,0,184,167,172,188],
[172,152,164,142,156,0,157,156,159],
[180,171,191,168,173,183,0,182,183],
[166,159,165,178,168,184,158,0,166],
[171,158,173,168,152,181,157,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,177,153,174,154,160,165],
[168,0,175,171,151,159,179,183,161],
[172,165,0,163,150,169,158,166,154],
[163,169,177,0,151,173,173,181,167],
[187,189,190,189,0,170,173,191,186],
[166,181,171,167,170,0,190,168,164],
[186,161,182,167,167,150,0,161,163],
[180,157,174,159,149,172,179,0,148],
[175,179,186,173,154,176,177,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,165,170,165,170,156,166],
[170,0,163,178,191,181,159,167,185],
[163,177,0,169,169,159,159,163,179],
[175,162,171,0,164,170,166,171,167],
[170,149,171,176,0,174,157,166,178],
[175,159,181,170,166,0,146,157,163],
[170,181,181,174,183,194,0,180,187],
[184,173,177,169,174,183,160,0,182],
[174,155,161,173,162,177,153,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,161,162,169,176,176,153,165],
[178,0,176,171,170,165,173,168,166],
[179,164,0,169,175,168,186,171,175],
[178,169,171,0,168,173,170,175,178],
[171,170,165,172,0,175,177,158,164],
[164,175,172,167,165,0,184,168,170],
[164,167,154,170,163,156,0,159,173],
[187,172,169,165,182,172,181,0,169],
[175,174,165,162,176,170,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,154,164,172,149,158,183],
[164,0,170,155,170,185,163,172,156],
[164,170,0,145,180,159,141,153,158],
[186,185,195,0,211,194,181,170,177],
[176,170,160,129,0,184,154,148,139],
[168,155,181,146,156,0,139,131,168],
[191,177,199,159,186,201,0,163,169],
[182,168,187,170,192,209,177,0,163],
[157,184,182,163,201,172,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,189,158,175,168,183,177,183],
[182,0,197,177,174,183,174,169,184],
[151,143,0,158,162,157,153,153,160],
[182,163,182,0,191,175,178,173,167],
[165,166,178,149,0,165,172,173,156],
[172,157,183,165,175,0,179,168,187],
[157,166,187,162,168,161,0,163,179],
[163,171,187,167,167,172,177,0,171],
[157,156,180,173,184,153,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,170,169,155,144,160,152,179],
[196,0,193,194,174,170,192,176,198],
[170,147,0,165,157,161,167,145,166],
[171,146,175,0,170,178,171,142,161],
[185,166,183,170,0,166,181,158,165],
[196,170,179,162,174,0,177,151,198],
[180,148,173,169,159,163,0,143,173],
[188,164,195,198,182,189,197,0,177],
[161,142,174,179,175,142,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,168,163,155,175,160,166],
[173,0,164,160,164,164,180,157,168],
[174,176,0,163,177,183,177,166,168],
[172,180,177,0,173,175,170,163,173],
[177,176,163,167,0,180,181,164,180],
[185,176,157,165,160,0,181,172,154],
[165,160,163,170,159,159,0,161,163],
[180,183,174,177,176,168,179,0,178],
[174,172,172,167,160,186,177,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,150,154,164,151,154,154,146],
[176,0,182,176,181,162,168,177,161],
[190,158,0,158,167,153,179,159,156],
[186,164,182,0,185,161,177,180,160],
[176,159,173,155,0,177,169,169,166],
[189,178,187,179,163,0,173,178,170],
[186,172,161,163,171,167,0,174,169],
[186,163,181,160,171,162,166,0,189],
[194,179,184,180,174,170,171,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,143,177,161,162,165,170,166],
[168,0,159,177,159,150,165,166,169],
[197,181,0,194,161,168,187,171,167],
[163,163,146,0,145,155,166,166,163],
[179,181,179,195,0,169,181,161,168],
[178,190,172,185,171,0,173,168,177],
[175,175,153,174,159,167,0,173,156],
[170,174,169,174,179,172,167,0,169],
[174,171,173,177,172,163,184,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,146,155,171,174,186,165,151],
[190,0,180,188,194,195,195,173,167],
[194,160,0,159,184,166,168,152,168],
[185,152,181,0,188,188,183,194,167],
[169,146,156,152,0,142,158,126,128],
[166,145,174,152,198,0,180,157,150],
[154,145,172,157,182,160,0,160,154],
[175,167,188,146,214,183,180,0,180],
[189,173,172,173,212,190,186,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,166,159,166,179,157,183],
[165,0,186,181,188,177,193,182,194],
[168,154,0,166,173,157,153,150,178],
[174,159,174,0,175,159,184,161,181],
[181,152,167,165,0,160,176,170,169],
[174,163,183,181,180,0,176,168,202],
[161,147,187,156,164,164,0,154,182],
[183,158,190,179,170,172,186,0,198],
[157,146,162,159,171,138,158,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,164,159,167,163,161,152,151],
[169,0,167,174,164,166,160,143,153],
[176,173,0,177,181,177,165,165,161],
[181,166,163,0,163,173,169,160,168],
[173,176,159,177,0,168,173,157,155],
[177,174,163,167,172,0,157,159,169],
[179,180,175,171,167,183,0,166,179],
[188,197,175,180,183,181,174,0,169],
[189,187,179,172,185,171,161,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,130,166,181,154,203,139,198],
[166,0,169,186,150,181,174,160,207],
[210,171,0,182,163,173,193,157,190],
[174,154,158,0,161,159,166,172,189],
[159,190,177,179,0,180,192,149,209],
[186,159,167,181,160,0,200,156,185],
[137,166,147,174,148,140,0,149,195],
[201,180,183,168,191,184,191,0,190],
[142,133,150,151,131,155,145,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,190,171,166,162,168,173,171],
[156,0,185,179,149,159,166,167,169],
[150,155,0,150,157,156,150,150,159],
[169,161,190,0,148,165,160,160,170],
[174,191,183,192,0,175,167,177,167],
[178,181,184,175,165,0,163,158,168],
[172,174,190,180,173,177,0,168,169],
[167,173,190,180,163,182,172,0,177],
[169,171,181,170,173,172,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,148,155,172,162,156,145,154],
[198,0,183,183,194,184,170,175,171],
[192,157,0,162,188,161,171,167,183],
[185,157,178,0,191,179,168,171,192],
[168,146,152,149,0,155,164,146,171],
[178,156,179,161,185,0,163,179,162],
[184,170,169,172,176,177,0,160,161],
[195,165,173,169,194,161,180,0,178],
[186,169,157,148,169,178,179,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,179,153,163,161,169,154],
[164,0,171,198,166,177,161,176,173],
[176,169,0,197,185,183,170,192,169],
[161,142,143,0,158,163,169,161,130],
[187,174,155,182,0,202,168,177,165],
[177,163,157,177,138,0,149,171,160],
[179,179,170,171,172,191,0,177,180],
[171,164,148,179,163,169,163,0,170],
[186,167,171,210,175,180,160,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,172,177,170,181,177,162],
[161,0,163,164,169,156,169,172,166],
[176,177,0,179,183,166,161,170,169],
[168,176,161,0,179,176,156,159,165],
[163,171,157,161,0,163,159,164,160],
[170,184,174,164,177,0,156,183,161],
[159,171,179,184,181,184,0,156,170],
[163,168,170,181,176,157,184,0,165],
[178,174,171,175,180,179,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,172,254,254,256,256,170,84],
[84,0,84,84,168,168,254,168,84],
[168,256,0,254,254,84,256,170,84],
[86,256,86,0,170,170,256,170,84],
[86,172,86,170,0,170,256,170,170],
[84,172,256,170,170,0,256,170,84],
[84,86,84,84,84,84,0,84,84],
[170,172,170,170,170,170,256,0,170],
[256,256,256,256,170,256,256,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,177,183,174,163,192,195],
[175,0,187,168,172,174,166,191,185],
[162,153,0,193,170,174,172,183,172],
[163,172,147,0,185,176,176,176,188],
[157,168,170,155,0,154,149,182,163],
[166,166,166,164,186,0,170,167,182],
[177,174,168,164,191,170,0,170,191],
[148,149,157,164,158,173,170,0,172],
[145,155,168,152,177,158,149,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,160,184,170,177,187,169,180],
[155,0,153,167,145,168,175,148,169],
[180,187,0,153,168,153,172,138,168],
[156,173,187,0,191,191,189,170,190],
[170,195,172,149,0,187,179,178,192],
[163,172,187,149,153,0,187,153,170],
[153,165,168,151,161,153,0,141,165],
[171,192,202,170,162,187,199,0,166],
[160,171,172,150,148,170,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,149,170,177,155,167,152,156],
[190,0,172,177,191,175,180,170,166],
[191,168,0,178,194,166,182,191,172],
[170,163,162,0,181,153,186,167,156],
[163,149,146,159,0,140,166,144,151],
[185,165,174,187,200,0,172,184,165],
[173,160,158,154,174,168,0,158,161],
[188,170,149,173,196,156,182,0,177],
[184,174,168,184,189,175,179,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,193,158,158,161,170,172,177],
[186,0,175,164,158,184,179,172,174],
[147,165,0,167,165,154,184,155,175],
[182,176,173,0,171,160,182,188,186],
[182,182,175,169,0,174,194,187,179],
[179,156,186,180,166,0,186,169,184],
[170,161,156,158,146,154,0,163,157],
[168,168,185,152,153,171,177,0,157],
[163,166,165,154,161,156,183,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,172,178,164,158,189,175],
[164,0,172,170,161,170,159,172,187],
[167,168,0,170,179,190,174,181,167],
[168,170,170,0,165,179,167,182,169],
[162,179,161,175,0,174,177,193,165],
[176,170,150,161,166,0,161,181,164],
[182,181,166,173,163,179,0,178,175],
[151,168,159,158,147,159,162,0,160],
[165,153,173,171,175,176,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,154,152,171,168,143,176,141],
[178,0,174,168,176,173,142,171,151],
[186,166,0,169,173,178,178,186,173],
[188,172,171,0,191,170,166,198,168],
[169,164,167,149,0,160,167,180,156],
[172,167,162,170,180,0,158,183,151],
[197,198,162,174,173,182,0,195,168],
[164,169,154,142,160,157,145,0,152],
[199,189,167,172,184,189,172,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,123,170,157,139,170,135,177],
[207,0,170,173,186,182,205,168,218],
[217,170,0,182,182,161,181,155,184],
[170,167,158,0,189,167,174,180,162],
[183,154,158,151,0,160,188,144,177],
[201,158,179,173,180,0,208,185,201],
[170,135,159,166,152,132,0,144,168],
[205,172,185,160,196,155,196,0,201],
[163,122,156,178,163,139,172,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,204,170,175,165,172,154],
[169,0,161,182,138,165,167,161,154],
[171,179,0,176,155,174,166,178,162],
[136,158,164,0,127,150,148,153,150],
[170,202,185,213,0,210,201,187,185],
[165,175,166,190,130,0,166,193,151],
[175,173,174,192,139,174,0,189,179],
[168,179,162,187,153,147,151,0,154],
[186,186,178,190,155,189,161,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,194,155,198,188,205,203,190],
[125,0,142,150,174,174,147,154,154],
[146,198,0,151,189,187,161,178,176],
[185,190,189,0,195,191,192,164,205],
[142,166,151,145,0,154,147,159,178],
[152,166,153,149,186,0,152,150,148],
[135,193,179,148,193,188,0,170,154],
[137,186,162,176,181,190,170,0,169],
[150,186,164,135,162,192,186,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,170,192,179,169,177,181,184],
[144,0,174,157,168,170,179,166,185],
[170,166,0,168,163,174,167,173,167],
[148,183,172,0,173,171,178,173,173],
[161,172,177,167,0,159,188,186,178],
[171,170,166,169,181,0,186,180,176],
[163,161,173,162,152,154,0,158,162],
[159,174,167,167,154,160,182,0,173],
[156,155,173,167,162,164,178,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,165,186,179,171,177,187,175],
[147,0,156,154,159,173,164,159,158],
[175,184,0,172,186,187,166,197,194],
[154,186,168,0,170,173,174,177,175],
[161,181,154,170,0,170,180,178,173],
[169,167,153,167,170,0,162,186,177],
[163,176,174,166,160,178,0,175,166],
[153,181,143,163,162,154,165,0,173],
[165,182,146,165,167,163,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,170,155,191,146,191,178],
[173,0,194,192,158,188,191,170,174],
[167,146,0,171,163,187,178,203,160],
[170,148,169,0,165,189,186,175,165],
[185,182,177,175,0,200,165,178,176],
[149,152,153,151,140,0,165,149,150],
[194,149,162,154,175,175,0,202,160],
[149,170,137,165,162,191,138,0,141],
[162,166,180,175,164,190,180,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,166,162,170,176,158,165,165],
[185,0,178,171,166,176,176,181,181],
[174,162,0,169,166,183,175,184,178],
[178,169,171,0,173,188,167,186,194],
[170,174,174,167,0,175,175,174,174],
[164,164,157,152,165,0,182,179,167],
[182,164,165,173,165,158,0,179,184],
[175,159,156,154,166,161,161,0,170],
[175,159,162,146,166,173,156,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,185,196,193,192,184,188],
[170,0,151,167,167,161,157,167,147],
[167,189,0,174,183,172,188,195,169],
[155,173,166,0,199,184,169,166,159],
[144,173,157,141,0,160,171,171,156],
[147,179,168,156,180,0,185,174,163],
[148,183,152,171,169,155,0,166,160],
[156,173,145,174,169,166,174,0,170],
[152,193,171,181,184,177,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,194,142,193,185,167,185,148],
[164,0,155,148,167,177,177,180,160],
[146,185,0,148,168,164,150,159,164],
[198,192,192,0,195,190,175,197,161],
[147,173,172,145,0,171,178,190,183],
[155,163,176,150,169,0,159,187,158],
[173,163,190,165,162,181,0,196,183],
[155,160,181,143,150,153,144,0,168],
[192,180,176,179,157,182,157,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,166,172,179,179,175,158],
[158,0,161,156,159,170,164,161,154],
[163,179,0,159,162,166,173,167,164],
[174,184,181,0,174,169,175,171,160],
[168,181,178,166,0,173,186,171,173],
[161,170,174,171,167,0,175,186,164],
[161,176,167,165,154,165,0,170,157],
[165,179,173,169,169,154,170,0,153],
[182,186,176,180,167,176,183,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,226,142,197,199,225,200,202],
[142,0,169,141,197,198,169,143,142],
[114,171,0,170,228,172,227,172,146],
[198,199,170,0,202,174,201,199,174],
[143,143,112,138,0,115,170,170,115],
[141,142,168,166,225,0,225,170,116],
[115,171,113,139,170,115,0,170,116],
[140,197,168,141,170,170,170,0,170],
[138,198,194,166,225,224,224,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,145,133,193,173,148,121,152],
[188,0,183,147,190,152,157,177,189],
[195,157,0,144,164,126,133,111,162],
[207,193,196,0,161,149,158,158,199],
[147,150,176,179,0,138,154,127,178],
[167,188,214,191,202,0,179,158,189],
[192,183,207,182,186,161,0,151,173],
[219,163,229,182,213,182,189,0,198],
[188,151,178,141,162,151,167,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,172,168,187,181,167,171],
[181,0,171,159,174,156,158,189,169],
[177,169,0,171,182,177,149,187,155],
[168,181,169,0,160,170,166,181,171],
[172,166,158,180,0,190,140,195,176],
[153,184,163,170,150,0,158,168,163],
[159,182,191,174,200,182,0,197,197],
[173,151,153,159,145,172,143,0,161],
[169,171,185,169,164,177,143,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,175,164,168,195,174,168,184],
[177,0,174,144,165,178,163,159,164],
[165,166,0,164,173,177,147,188,194],
[176,196,176,0,152,183,184,157,178],
[172,175,167,188,0,177,176,182,189],
[145,162,163,157,163,0,153,165,161],
[166,177,193,156,164,187,0,178,179],
[172,181,152,183,158,175,162,0,175],
[156,176,146,162,151,179,161,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,152,163,185,179,180,187,182],
[196,0,163,164,184,152,168,178,179],
[188,177,0,200,188,163,178,194,182],
[177,176,140,0,182,173,157,194,179],
[155,156,152,158,0,173,149,150,178],
[161,188,177,167,167,0,181,187,195],
[160,172,162,183,191,159,0,208,178],
[153,162,146,146,190,153,132,0,157],
[158,161,158,161,162,145,162,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,177,178,174,169,170,164],
[162,0,176,166,168,178,161,168,155],
[164,164,0,170,152,164,153,153,158],
[163,174,170,0,161,172,174,178,174],
[162,172,188,179,0,169,167,173,172],
[166,162,176,168,171,0,157,162,166],
[171,179,187,166,173,183,0,181,177],
[170,172,187,162,167,178,159,0,166],
[176,185,182,166,168,174,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,165,168,162,177,173,171,170],
[179,0,182,160,173,167,176,183,162],
[175,158,0,142,143,168,149,157,158],
[172,180,198,0,173,182,180,168,171],
[178,167,197,167,0,163,186,163,171],
[163,173,172,158,177,0,161,160,157],
[167,164,191,160,154,179,0,167,163],
[169,157,183,172,177,180,173,0,173],
[170,178,182,169,169,183,177,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,174,189,163,169,166,174],
[172,0,173,174,187,168,173,161,159],
[175,167,0,172,189,159,167,168,165],
[166,166,168,0,175,160,165,170,164],
[151,153,151,165,0,144,158,155,155],
[177,172,181,180,196,0,190,169,173],
[171,167,173,175,182,150,0,167,171],
[174,179,172,170,185,171,173,0,168],
[166,181,175,176,185,167,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,183,170,166,196,177,183,175],
[166,0,184,167,169,181,169,191,165],
[157,156,0,165,160,161,148,165,144],
[170,173,175,0,162,190,169,181,173],
[174,171,180,178,0,184,175,169,175],
[144,159,179,150,156,0,167,174,148],
[163,171,192,171,165,173,0,165,171],
[157,149,175,159,171,166,175,0,179],
[165,175,196,167,165,192,169,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,159,172,151,136,163,170],
[179,0,172,180,189,162,179,190,165],
[177,168,0,169,162,156,151,146,141],
[181,160,171,0,173,172,166,166,163],
[168,151,178,167,0,167,165,165,161],
[189,178,184,168,173,0,166,186,168],
[204,161,189,174,175,174,0,188,164],
[177,150,194,174,175,154,152,0,173],
[170,175,199,177,179,172,176,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,220,199,200,182,203,138,180],
[182,0,163,199,201,185,244,140,222],
[120,177,0,182,182,223,201,181,221],
[141,141,158,0,159,122,185,119,179],
[140,139,158,181,0,142,164,140,197],
[158,155,117,218,198,0,201,136,178],
[137,96,139,155,176,139,0,116,156],
[202,200,159,221,200,204,224,0,219],
[160,118,119,161,143,162,184,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,154,168,185,185,194,165,123],
[165,0,127,176,149,141,151,163,129],
[186,213,0,183,170,193,163,204,165],
[172,164,157,0,194,197,177,171,148],
[155,191,170,146,0,142,139,166,116],
[155,199,147,143,198,0,182,197,180],
[146,189,177,163,201,158,0,179,145],
[175,177,136,169,174,143,161,0,114],
[217,211,175,192,224,160,195,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,181,173,161,179,188,174],
[165,0,168,172,180,157,162,191,167],
[159,172,0,183,176,172,160,194,162],
[159,168,157,0,169,156,153,187,162],
[167,160,164,171,0,169,168,184,161],
[179,183,168,184,171,0,164,182,170],
[161,178,180,187,172,176,0,192,171],
[152,149,146,153,156,158,148,0,150],
[166,173,178,178,179,170,169,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,188,171,177,175,175,164,176],
[168,0,176,170,176,173,187,182,177],
[152,164,0,183,167,169,166,163,152],
[169,170,157,0,174,157,168,163,163],
[163,164,173,166,0,177,169,158,181],
[165,167,171,183,163,0,170,165,167],
[165,153,174,172,171,170,0,166,173],
[176,158,177,177,182,175,174,0,182],
[164,163,188,177,159,173,167,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,187,167,174,181,175,190,170],
[162,0,176,155,163,156,168,158,150],
[153,164,0,166,163,160,169,163,156],
[173,185,174,0,179,168,185,170,156],
[166,177,177,161,0,169,171,170,155],
[159,184,180,172,171,0,170,171,171],
[165,172,171,155,169,170,0,165,159],
[150,182,177,170,170,169,175,0,158],
[170,190,184,184,185,169,181,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,169,147,175,184,177,161],
[169,0,185,186,171,177,190,179,163],
[166,155,0,171,159,146,172,171,147],
[171,154,169,0,163,166,174,157,151],
[193,169,181,177,0,175,183,177,190],
[165,163,194,174,165,0,172,167,162],
[156,150,168,166,157,168,0,170,143],
[163,161,169,183,163,173,170,0,161],
[179,177,193,189,150,178,197,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,161,199,158,170,153,163],
[181,0,155,181,180,191,166,177,196],
[169,185,0,185,207,173,154,160,172],
[179,159,155,0,154,184,183,168,153],
[141,160,133,186,0,172,158,151,149],
[182,149,167,156,168,0,157,160,172],
[170,174,186,157,182,183,0,189,181],
[187,163,180,172,189,180,151,0,196],
[177,144,168,187,191,168,159,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,172,191,183,167,160,160,163],
[201,0,188,208,215,168,185,201,194],
[168,152,0,165,186,176,170,173,183],
[149,132,175,0,172,187,145,160,160],
[157,125,154,168,0,162,157,159,172],
[173,172,164,153,178,0,163,167,177],
[180,155,170,195,183,177,0,193,186],
[180,139,167,180,181,173,147,0,160],
[177,146,157,180,168,163,154,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,174,179,199,179,193,162],
[163,0,169,169,172,212,186,183,167],
[162,171,0,180,185,187,166,177,164],
[166,171,160,0,186,182,183,181,167],
[161,168,155,154,0,169,156,184,165],
[141,128,153,158,171,0,141,181,137],
[161,154,174,157,184,199,0,210,170],
[147,157,163,159,156,159,130,0,146],
[178,173,176,173,175,203,170,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,136,150,147,152,142,139,141],
[188,0,169,172,168,175,174,159,167],
[204,171,0,158,178,172,180,173,170],
[190,168,182,0,175,169,169,164,160],
[193,172,162,165,0,170,174,141,162],
[188,165,168,171,170,0,170,170,160],
[198,166,160,171,166,170,0,159,156],
[201,181,167,176,199,170,181,0,173],
[199,173,170,180,178,180,184,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,184,186,188,196,188,160,148],
[150,0,162,173,161,197,183,159,173],
[156,178,0,172,165,188,179,154,160],
[154,167,168,0,146,180,165,145,162],
[152,179,175,194,0,207,195,191,166],
[144,143,152,160,133,0,143,146,142],
[152,157,161,175,145,197,0,141,156],
[180,181,186,195,149,194,199,0,176],
[192,167,180,178,174,198,184,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,195,208,167,181,198,175,184],
[161,0,187,184,160,169,178,165,167],
[145,153,0,194,144,153,175,155,152],
[132,156,146,0,133,135,167,143,147],
[173,180,196,207,0,172,195,160,185],
[159,171,187,205,168,0,166,171,172],
[142,162,165,173,145,174,0,150,165],
[165,175,185,197,180,169,190,0,188],
[156,173,188,193,155,168,175,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,148,165,172,191,163,162,181],
[175,0,162,162,177,195,180,194,182],
[192,178,0,167,185,194,164,178,191],
[175,178,173,0,179,182,162,171,163],
[168,163,155,161,0,172,147,141,165],
[149,145,146,158,168,0,150,166,157],
[177,160,176,178,193,190,0,177,175],
[178,146,162,169,199,174,163,0,184],
[159,158,149,177,175,183,165,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,181,164,164,153,155,163],
[158,0,152,183,155,153,156,161,155],
[171,188,0,178,165,168,167,176,159],
[159,157,162,0,135,147,151,139,163],
[176,185,175,205,0,158,174,158,172],
[176,187,172,193,182,0,166,160,171],
[187,184,173,189,166,174,0,151,175],
[185,179,164,201,182,180,189,0,185],
[177,185,181,177,168,169,165,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,181,186,181,176,170,182],
[169,0,182,180,158,179,172,173,180],
[162,158,0,172,164,154,174,149,157],
[159,160,168,0,166,175,171,178,184],
[154,182,176,174,0,180,180,187,177],
[159,161,186,165,160,0,161,164,150],
[164,168,166,169,160,179,0,170,170],
[170,167,191,162,153,176,170,0,165],
[158,160,183,156,163,190,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,158,151,133,125,144,163,135],
[179,0,173,151,166,145,151,173,134],
[182,167,0,193,186,146,155,171,164],
[189,189,147,0,170,152,145,186,132],
[207,174,154,170,0,172,161,184,168],
[215,195,194,188,168,0,171,200,175],
[196,189,185,195,179,169,0,190,209],
[177,167,169,154,156,140,150,0,143],
[205,206,176,208,172,165,131,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,197,208,215,187,158,195],
[168,0,179,177,186,181,149,171,160],
[157,161,0,163,168,177,176,175,161],
[143,163,177,0,166,185,186,142,148],
[132,154,172,174,0,189,184,153,186],
[125,159,163,155,151,0,175,127,158],
[153,191,164,154,156,165,0,134,158],
[182,169,165,198,187,213,206,0,185],
[145,180,179,192,154,182,182,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,165,168,159,153,171,140,157],
[211,0,161,188,163,166,162,166,155],
[175,179,0,203,172,174,210,149,176],
[172,152,137,0,155,151,145,134,160],
[181,177,168,185,0,178,192,156,148],
[187,174,166,189,162,0,170,152,176],
[169,178,130,195,148,170,0,200,153],
[200,174,191,206,184,188,140,0,226],
[183,185,164,180,192,164,187,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,183,166,174,187,157,166,159],
[180,0,169,162,174,166,162,165,159],
[157,171,0,170,168,174,163,145,170],
[174,178,170,0,175,184,172,177,154],
[166,166,172,165,0,158,148,165,161],
[153,174,166,156,182,0,159,160,148],
[183,178,177,168,192,181,0,178,166],
[174,175,195,163,175,180,162,0,152],
[181,181,170,186,179,192,174,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,184,167,187,169,180,181,186],
[175,0,175,176,170,173,176,162,164],
[156,165,0,162,172,158,165,156,170],
[173,164,178,0,175,159,167,176,179],
[153,170,168,165,0,151,155,158,173],
[171,167,182,181,189,0,179,164,188],
[160,164,175,173,185,161,0,167,180],
[159,178,184,164,182,176,173,0,177],
[154,176,170,161,167,152,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,151,162,150,148,154,153],
[180,0,171,173,168,166,172,159,159],
[181,169,0,172,165,155,159,167,160],
[189,167,168,0,174,174,174,170,168],
[178,172,175,166,0,155,162,173,177],
[190,174,185,166,185,0,163,167,168],
[192,168,181,166,178,177,0,173,178],
[186,181,173,170,167,173,167,0,170],
[187,181,180,172,163,172,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,117,156,149,156,148,109,122],
[175,0,152,159,191,172,193,123,178],
[223,188,0,176,208,188,177,147,194],
[184,181,164,0,147,177,189,149,151],
[191,149,132,193,0,189,154,131,142],
[184,168,152,163,151,0,205,165,161],
[192,147,163,151,186,135,0,138,146],
[231,217,193,191,209,175,202,0,162],
[218,162,146,189,198,179,194,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,166,194,197,178,165,160],
[167,0,198,156,162,162,146,154,137],
[171,142,0,160,152,176,145,144,150],
[174,184,180,0,173,186,177,179,148],
[146,178,188,167,0,186,151,163,151],
[143,178,164,154,154,0,135,151,155],
[162,194,195,163,189,205,0,164,172],
[175,186,196,161,177,189,176,0,163],
[180,203,190,192,189,185,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,168,129,135,142,186,166],
[171,0,178,192,164,163,158,203,202],
[179,162,0,194,176,158,138,189,198],
[172,148,146,0,135,172,132,188,175],
[211,176,164,205,0,169,149,195,210],
[205,177,182,168,171,0,187,215,200],
[198,182,202,208,191,153,0,189,202],
[154,137,151,152,145,125,151,0,159],
[174,138,142,165,130,140,138,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,173,182,168,173,172,181,171],
[163,0,176,171,166,154,166,173,156],
[167,164,0,198,161,169,186,186,181],
[158,169,142,0,159,150,165,170,153],
[172,174,179,181,0,161,178,173,164],
[167,186,171,190,179,0,189,196,168],
[168,174,154,175,162,151,0,165,148],
[159,167,154,170,167,144,175,0,155],
[169,184,159,187,176,172,192,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,195,146,195,49,146,98,49],
[146,0,146,147,194,146,147,146,49],
[145,194,0,97,145,49,195,146,97],
[194,193,243,0,194,146,195,97,97],
[145,146,195,146,0,146,146,145,97],
[291,194,291,194,194,0,146,242,194],
[194,193,145,145,194,194,0,194,97],
[242,194,194,243,195,98,146,0,145],
[291,291,243,243,243,146,243,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,153,169,159,158,162,206,162],
[179,0,168,171,151,152,152,185,161],
[187,172,0,169,162,164,194,213,179],
[171,169,171,0,167,163,181,199,161],
[181,189,178,173,0,137,160,185,169],
[182,188,176,177,203,0,162,208,203],
[178,188,146,159,180,178,0,188,179],
[134,155,127,141,155,132,152,0,154],
[178,179,161,179,171,137,161,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,171,172,169,201,187,182,181],
[136,0,133,148,152,167,153,154,151],
[169,207,0,168,179,199,191,182,176],
[168,192,172,0,180,179,189,163,181],
[171,188,161,160,0,175,177,171,162],
[139,173,141,161,165,0,170,167,156],
[153,187,149,151,163,170,0,159,160],
[158,186,158,177,169,173,181,0,176],
[159,189,164,159,178,184,180,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,178,162,136,167,154,167,166],
[179,0,180,163,153,158,173,165,158],
[162,160,0,161,140,170,168,163,130],
[178,177,179,0,172,179,179,172,162],
[204,187,200,168,0,175,188,192,170],
[173,182,170,161,165,0,183,171,156],
[186,167,172,161,152,157,0,177,161],
[173,175,177,168,148,169,163,0,149],
[174,182,210,178,170,184,179,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,179,140,174,151,156,160,181],
[175,0,202,169,194,168,179,174,173],
[161,138,0,140,171,155,150,154,154],
[200,171,200,0,174,182,156,175,187],
[166,146,169,166,0,142,137,159,161],
[189,172,185,158,198,0,170,167,186],
[184,161,190,184,203,170,0,190,198],
[180,166,186,165,181,173,150,0,181],
[159,167,186,153,179,154,142,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,162,159,193,165,179,188],
[172,0,164,173,173,179,157,158,164],
[175,176,0,172,187,188,165,180,180],
[178,167,168,0,187,182,172,182,181],
[181,167,153,153,0,179,146,175,172],
[147,161,152,158,161,0,147,170,169],
[175,183,175,168,194,193,0,180,179],
[161,182,160,158,165,170,160,0,163],
[152,176,160,159,168,171,161,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,163,165,173,166,172,167,155],
[173,0,162,177,176,145,159,159,156],
[177,178,0,144,166,166,170,182,157],
[175,163,196,0,204,173,173,169,160],
[167,164,174,136,0,152,157,160,165],
[174,195,174,167,188,0,174,157,159],
[168,181,170,167,183,166,0,178,171],
[173,181,158,171,180,183,162,0,182],
[185,184,183,180,175,181,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,176,144,175,139,138,172,165],
[149,0,155,161,181,138,175,142,139],
[164,185,0,160,184,164,164,172,175],
[196,179,180,0,163,176,189,187,176],
[165,159,156,177,0,152,170,161,172],
[201,202,176,164,188,0,181,213,182],
[202,165,176,151,170,159,0,183,192],
[168,198,168,153,179,127,157,0,179],
[175,201,165,164,168,158,148,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,170,188,166,186,160,153,177],
[155,0,165,189,153,174,160,149,171],
[170,175,0,200,150,170,159,159,179],
[152,151,140,0,140,141,142,137,140],
[174,187,190,200,0,183,169,171,188],
[154,166,170,199,157,0,155,153,176],
[180,180,181,198,171,185,0,166,180],
[187,191,181,203,169,187,174,0,190],
[163,169,161,200,152,164,160,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,144,166,162,162,167,164,168],
[192,0,173,174,160,181,177,177,185],
[196,167,0,177,170,181,197,183,190],
[174,166,163,0,168,156,177,183,175],
[178,180,170,172,0,182,186,180,179],
[178,159,159,184,158,0,178,177,171],
[173,163,143,163,154,162,0,169,171],
[176,163,157,157,160,163,171,0,164],
[172,155,150,165,161,169,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,178,163,177,165,191,164],
[161,0,171,178,160,160,170,184,167],
[160,169,0,180,155,164,170,185,171],
[162,162,160,0,159,171,165,177,148],
[177,180,185,181,0,175,160,203,174],
[163,180,176,169,165,0,161,170,170],
[175,170,170,175,180,179,0,190,156],
[149,156,155,163,137,170,150,0,148],
[176,173,169,192,166,170,184,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,177,147,166,191,166,162,206],
[207,0,163,221,165,234,208,177,222],
[163,177,0,177,163,177,163,177,239],
[193,119,163,0,194,175,180,179,196],
[174,175,177,146,0,204,192,162,206],
[149,106,163,165,136,0,181,179,180],
[174,132,177,160,148,159,0,160,177],
[178,163,163,161,178,161,180,0,180],
[134,118,101,144,134,160,163,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,155,184,171,141,168,152,158],
[178,0,153,183,169,137,193,148,178],
[185,187,0,173,176,169,195,174,195],
[156,157,167,0,175,149,148,134,189],
[169,171,164,165,0,161,174,177,186],
[199,203,171,191,179,0,180,168,188],
[172,147,145,192,166,160,0,168,195],
[188,192,166,206,163,172,172,0,191],
[182,162,145,151,154,152,145,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,167,169,177,159,155,190],
[170,0,149,145,142,162,137,169,176],
[167,191,0,165,161,203,173,164,192],
[173,195,175,0,161,173,159,165,188],
[171,198,179,179,0,193,168,174,205],
[163,178,137,167,147,0,164,165,172],
[181,203,167,181,172,176,0,177,185],
[185,171,176,175,166,175,163,0,190],
[150,164,148,152,135,168,155,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,146,167,156,169,161,164,169],
[187,0,180,191,178,209,179,177,169],
[194,160,0,180,180,187,176,149,168],
[173,149,160,0,165,181,171,172,174],
[184,162,160,175,0,195,167,170,158],
[171,131,153,159,145,0,137,142,156],
[179,161,164,169,173,203,0,157,169],
[176,163,191,168,170,198,183,0,186],
[171,171,172,166,182,184,171,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,172,172,182,177,184,167],
[172,0,177,164,170,186,167,183,161],
[172,163,0,159,163,180,172,174,175],
[168,176,181,0,170,172,165,179,166],
[168,170,177,170,0,180,178,181,169],
[158,154,160,168,160,0,168,165,151],
[163,173,168,175,162,172,0,170,177],
[156,157,166,161,159,175,170,0,165],
[173,179,165,174,171,189,163,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,156,163,188,179,169,158,171],
[164,0,169,157,175,173,168,160,158],
[184,171,0,178,192,191,173,169,171],
[177,183,162,0,180,180,171,172,172],
[152,165,148,160,0,159,157,140,155],
[161,167,149,160,181,0,159,153,151],
[171,172,167,169,183,181,0,156,163],
[182,180,171,168,200,187,184,0,176],
[169,182,169,168,185,189,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,166,189,168,177,172,181,158],
[183,0,186,182,170,179,161,173,151],
[174,154,0,196,154,177,170,180,168],
[151,158,144,0,136,154,170,159,157],
[172,170,186,204,0,186,167,174,173],
[163,161,163,186,154,0,163,162,154],
[168,179,170,170,173,177,0,193,174],
[159,167,160,181,166,178,147,0,156],
[182,189,172,183,167,186,166,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,185,166,167,174,171,166,165],
[172,0,186,167,183,172,174,180,165],
[155,154,0,155,161,166,164,158,162],
[174,173,185,0,182,175,165,174,155],
[173,157,179,158,0,168,158,167,171],
[166,168,174,165,172,0,157,170,164],
[169,166,176,175,182,183,0,167,166],
[174,160,182,166,173,170,173,0,169],
[175,175,178,185,169,176,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,150,156,154,163,162,170,162],
[175,0,180,151,173,173,181,187,175],
[190,160,0,166,188,195,182,181,172],
[184,189,174,0,159,183,190,185,157],
[186,167,152,181,0,181,173,189,173],
[177,167,145,157,159,0,174,175,152],
[178,159,158,150,167,166,0,185,161],
[170,153,159,155,151,165,155,0,143],
[178,165,168,183,167,188,179,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,171,212,84,128,213,214,215],
[255,0,129,213,169,128,170,172,255],
[169,211,0,211,126,128,170,169,255],
[128,127,129,0,85,85,170,130,214],
[256,171,214,255,0,170,257,257,299],
[212,212,212,255,170,0,255,255,299],
[127,170,170,170,83,85,0,170,255],
[126,168,171,210,83,85,170,0,255],
[125,85,85,126,41,41,85,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,176,186,173,156,152,156],
[173,0,177,165,174,161,165,157,166],
[173,163,0,184,178,169,180,170,161],
[164,175,156,0,179,171,164,155,154],
[154,166,162,161,0,163,156,168,158],
[167,179,171,169,177,0,171,176,178],
[184,175,160,176,184,169,0,169,163],
[188,183,170,185,172,164,171,0,173],
[184,174,179,186,182,162,177,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,173,154,171,181,162,178,184],
[149,0,181,183,223,184,201,204,205],
[167,159,0,180,197,195,187,196,185],
[186,157,160,0,222,194,187,217,211],
[169,117,143,118,0,138,175,148,135],
[159,156,145,146,202,0,169,192,192],
[178,139,153,153,165,171,0,179,187],
[162,136,144,123,192,148,161,0,178],
[156,135,155,129,205,148,153,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,173,172,173,176,168,168],
[164,0,163,147,155,165,171,152,158],
[176,177,0,167,172,174,183,176,168],
[167,193,173,0,181,174,180,171,167],
[168,185,168,159,0,170,181,164,176],
[167,175,166,166,170,0,186,180,176],
[164,169,157,160,159,154,0,172,160],
[172,188,164,169,176,160,168,0,155],
[172,182,172,173,164,164,180,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,148,157,169,152,164,169],
[170,0,174,164,158,173,159,166,169],
[165,166,0,166,153,177,153,169,161],
[192,176,174,0,166,185,172,180,166],
[183,182,187,174,0,180,167,171,168],
[171,167,163,155,160,0,144,163,169],
[188,181,187,168,173,196,0,183,192],
[176,174,171,160,169,177,157,0,168],
[171,171,179,174,172,171,148,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,175,164,167,162,163,174],
[167,0,174,170,169,155,171,161,171],
[167,166,0,160,151,154,159,167,172],
[165,170,180,0,177,165,168,168,168],
[176,171,189,163,0,173,176,185,177],
[173,185,186,175,167,0,183,179,175],
[178,169,181,172,164,157,0,176,175],
[177,179,173,172,155,161,164,0,169],
[166,169,168,172,163,165,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,199,171,178,175,176,161,170],
[169,0,180,167,170,166,166,183,155],
[141,160,0,149,158,142,131,135,135],
[169,173,191,0,166,184,165,168,161],
[162,170,182,174,0,166,156,160,148],
[165,174,198,156,174,0,163,168,147],
[164,174,209,175,184,177,0,170,166],
[179,157,205,172,180,172,170,0,164],
[170,185,205,179,192,193,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,202,187,173,188,181,176,166],
[177,0,171,182,195,177,204,198,168],
[138,169,0,159,177,194,167,179,178],
[153,158,181,0,176,173,205,181,171],
[167,145,163,164,0,168,178,160,143],
[152,163,146,167,172,0,177,165,172],
[159,136,173,135,162,163,0,155,147],
[164,142,161,159,180,175,185,0,175],
[174,172,162,169,197,168,193,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,177,157,184,167,159,154,170],
[145,0,160,152,174,152,155,139,158],
[163,180,0,163,162,167,158,168,152],
[183,188,177,0,160,184,177,173,162],
[156,166,178,180,0,173,175,163,159],
[173,188,173,156,167,0,187,165,158],
[181,185,182,163,165,153,0,178,159],
[186,201,172,167,177,175,162,0,163],
[170,182,188,178,181,182,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,175,175,181,176,165,167,171],
[150,0,165,187,159,185,179,162,152],
[165,175,0,161,149,164,168,161,161],
[165,153,179,0,152,175,166,174,165],
[159,181,191,188,0,171,179,181,179],
[164,155,176,165,169,0,159,170,167],
[175,161,172,174,161,181,0,185,176],
[173,178,179,166,159,170,155,0,157],
[169,188,179,175,161,173,164,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,154,94,217,124,93,124,127],
[125,0,32,62,124,32,30,62,95],
[186,308,0,61,216,93,92,154,156],
[246,278,279,0,187,156,184,185,250],
[123,216,124,153,0,122,92,216,155],
[216,308,247,184,218,0,247,278,156],
[247,310,248,156,248,93,0,186,187],
[216,278,186,155,124,62,154,0,125],
[213,245,184,90,185,184,153,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,154,151,171,159,160,153],
[165,0,159,143,147,170,144,164,180],
[167,181,0,156,160,159,172,159,188],
[186,197,184,0,178,184,171,164,197],
[189,193,180,162,0,173,181,179,202],
[169,170,181,156,167,0,168,153,182],
[181,196,168,169,159,172,0,156,177],
[180,176,181,176,161,187,184,0,194],
[187,160,152,143,138,158,163,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,154,145,135,162,178,159,167],
[204,0,173,138,173,181,179,195,201],
[186,167,0,135,146,180,169,193,157],
[195,202,205,0,166,187,210,185,224],
[205,167,194,174,0,189,218,190,197],
[178,159,160,153,151,0,212,182,161],
[162,161,171,130,122,128,0,157,173],
[181,145,147,155,150,158,183,0,183],
[173,139,183,116,143,179,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,176,160,176,168,165,173],
[170,0,177,172,182,172,180,170,167],
[173,163,0,165,171,166,165,174,155],
[164,168,175,0,170,161,178,173,170],
[180,158,169,170,0,184,180,176,168],
[164,168,174,179,156,0,170,160,165],
[172,160,175,162,160,170,0,174,167],
[175,170,166,167,164,180,166,0,169],
[167,173,185,170,172,175,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,159,170,170,158,188,178],
[174,0,178,166,193,184,172,189,190],
[163,162,0,149,173,162,164,183,165],
[181,174,191,0,179,177,167,189,175],
[170,147,167,161,0,169,176,189,192],
[170,156,178,163,171,0,180,182,163],
[182,168,176,173,164,160,0,181,173],
[152,151,157,151,151,158,159,0,155],
[162,150,175,165,148,177,167,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,177,172,142,144,151,141,152],
[178,0,191,184,152,168,175,164,163],
[163,149,0,167,136,140,146,141,123],
[168,156,173,0,136,163,187,137,135],
[198,188,204,204,0,188,178,166,177],
[196,172,200,177,152,0,197,148,172],
[189,165,194,153,162,143,0,180,156],
[199,176,199,203,174,192,160,0,178],
[188,177,217,205,163,168,184,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,166,176,175,179,169,155],
[175,0,182,187,160,179,191,177,186],
[165,158,0,177,170,172,178,176,175],
[174,153,163,0,170,165,185,167,158],
[164,180,170,170,0,181,197,181,183],
[165,161,168,175,159,0,179,185,174],
[161,149,162,155,143,161,0,156,172],
[171,163,164,173,159,155,184,0,178],
[185,154,165,182,157,166,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,170,175,187,173,176,176,179],
[150,0,170,174,169,165,168,174,167],
[170,170,0,176,186,167,167,162,160],
[165,166,164,0,185,161,159,174,162],
[153,171,154,155,0,157,164,162,150],
[167,175,173,179,183,0,177,172,169],
[164,172,173,181,176,163,0,159,173],
[164,166,178,166,178,168,181,0,183],
[161,173,180,178,190,171,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,141,186,150,181,144,171,146],
[190,0,158,185,170,170,161,168,161],
[199,182,0,201,167,209,181,181,157],
[154,155,139,0,143,160,156,163,116],
[190,170,173,197,0,186,198,191,177],
[159,170,131,180,154,0,160,171,156],
[196,179,159,184,142,180,0,172,152],
[169,172,159,177,149,169,168,0,154],
[194,179,183,224,163,184,188,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,168,182,153,173,196,180],
[168,0,183,148,175,173,168,182,187],
[163,157,0,158,152,157,136,162,170],
[172,192,182,0,170,190,184,214,188],
[158,165,188,170,0,159,153,175,187],
[187,167,183,150,181,0,174,182,187],
[167,172,204,156,187,166,0,172,184],
[144,158,178,126,165,158,168,0,181],
[160,153,170,152,153,153,156,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,183,176,166,171,169,181],
[161,0,165,161,167,163,175,168,165],
[167,175,0,161,154,172,161,174,165],
[157,179,179,0,175,179,168,160,181],
[164,173,186,165,0,177,172,166,183],
[174,177,168,161,163,0,173,171,169],
[169,165,179,172,168,167,0,182,180],
[171,172,166,180,174,169,158,0,173],
[159,175,175,159,157,171,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,153,194,164,174,167,166],
[162,0,174,160,185,159,185,182,211],
[174,166,0,164,198,159,173,146,182],
[187,180,176,0,193,165,193,178,171],
[146,155,142,147,0,129,149,140,146],
[176,181,181,175,211,0,193,158,187],
[166,155,167,147,191,147,0,178,166],
[173,158,194,162,200,182,162,0,182],
[174,129,158,169,194,153,174,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,195,178,204,175,220,144,172],
[156,0,169,151,219,153,167,148,164],
[145,171,0,153,170,152,188,110,147],
[162,189,187,0,207,181,194,157,163],
[136,121,170,133,0,154,160,119,125],
[165,187,188,159,186,0,173,147,137],
[120,173,152,146,180,167,0,152,161],
[196,192,230,183,221,193,188,0,153],
[168,176,193,177,215,203,179,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,175,170,167,168,167,167,190],
[183,0,177,187,177,166,163,175,195],
[165,163,0,183,181,172,173,190,189],
[170,153,157,0,169,172,158,164,188],
[173,163,159,171,0,171,154,170,188],
[172,174,168,168,169,0,150,168,181],
[173,177,167,182,186,190,0,171,187],
[173,165,150,176,170,172,169,0,188],
[150,145,151,152,152,159,153,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,172,180,162,203,176,180,181],
[145,0,166,160,150,171,168,169,160],
[168,174,0,169,172,182,182,167,160],
[160,180,171,0,168,174,173,168,162],
[178,190,168,172,0,179,173,165,170],
[137,169,158,166,161,0,162,151,134],
[164,172,158,167,167,178,0,171,164],
[160,171,173,172,175,189,169,0,172],
[159,180,180,178,170,206,176,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,159,179,186,166,173,179],
[178,0,167,184,169,216,176,161,171],
[168,173,0,189,185,199,191,178,184],
[181,156,151,0,173,180,166,154,147],
[161,171,155,167,0,182,175,173,157],
[154,124,141,160,158,0,151,163,149],
[174,164,149,174,165,189,0,167,157],
[167,179,162,186,167,177,173,0,157],
[161,169,156,193,183,191,183,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,177,174,156,173,169,165],
[171,0,188,163,196,164,162,198,178],
[176,152,0,163,166,148,161,176,137],
[163,177,177,0,178,163,172,190,178],
[166,144,174,162,0,176,152,160,147],
[184,176,192,177,164,0,168,170,166],
[167,178,179,168,188,172,0,187,169],
[171,142,164,150,180,170,153,0,163],
[175,162,203,162,193,174,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,161,161,160,174,151,183,161],
[193,0,184,171,196,195,170,189,204],
[179,156,0,166,160,171,166,170,192],
[179,169,174,0,174,162,180,181,185],
[180,144,180,166,0,172,172,173,173],
[166,145,169,178,168,0,174,168,172],
[189,170,174,160,168,166,0,180,169],
[157,151,170,159,167,172,160,0,169],
[179,136,148,155,167,168,171,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,170,175,197,169,212,242,227],
[138,0,139,145,110,169,153,169,182],
[170,201,0,192,211,182,157,213,246],
[165,195,148,0,191,180,223,223,240],
[143,230,129,149,0,185,200,203,219],
[171,171,158,160,155,0,156,198,211],
[128,187,183,117,140,184,0,154,187],
[98,171,127,117,137,142,186,0,201],
[113,158,94,100,121,129,153,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,209,160,193,183,175,186,178],
[147,0,169,141,128,165,161,165,155],
[131,171,0,149,161,157,188,135,133],
[180,199,191,0,168,200,183,186,211],
[147,212,179,172,0,163,182,174,202],
[157,175,183,140,177,0,177,166,163],
[165,179,152,157,158,163,0,143,144],
[154,175,205,154,166,174,197,0,207],
[162,185,207,129,138,177,196,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,171,198,203,155,141,186,174],
[140,0,144,143,157,140,156,144,159],
[169,196,0,171,167,141,160,144,186],
[142,197,169,0,145,155,156,171,205],
[137,183,173,195,0,152,170,189,187],
[185,200,199,185,188,0,147,185,160],
[199,184,180,184,170,193,0,167,187],
[154,196,196,169,151,155,173,0,198],
[166,181,154,135,153,180,153,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,170,188,179,165,199,177],
[176,0,178,166,178,184,164,175,174],
[161,162,0,162,187,177,166,171,168],
[170,174,178,0,184,165,169,157,179],
[152,162,153,156,0,155,151,162,155],
[161,156,163,175,185,0,179,174,167],
[175,176,174,171,189,161,0,160,177],
[141,165,169,183,178,166,180,0,174],
[163,166,172,161,185,173,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,181,183,159,165,131,168,154],
[190,0,183,149,146,157,154,173,155],
[159,157,0,156,156,158,140,166,172],
[157,191,184,0,164,156,139,175,169],
[181,194,184,176,0,173,170,172,176],
[175,183,182,184,167,0,160,183,159],
[209,186,200,201,170,180,0,195,193],
[172,167,174,165,168,157,145,0,171],
[186,185,168,171,164,181,147,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,171,178,164,177,161,160,166],
[161,0,164,165,166,167,145,158,158],
[169,176,0,181,181,169,177,161,164],
[162,175,159,0,179,167,151,165,162],
[176,174,159,161,0,163,160,158,152],
[163,173,171,173,177,0,161,152,167],
[179,195,163,189,180,179,0,165,172],
[180,182,179,175,182,188,175,0,169],
[174,182,176,178,188,173,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,160,164,166,155,161,170],
[181,0,176,176,171,173,168,174,183],
[169,164,0,160,162,163,164,154,175],
[180,164,180,0,174,169,159,168,174],
[176,169,178,166,0,171,164,178,175],
[174,167,177,171,169,0,173,172,182],
[185,172,176,181,176,167,0,172,183],
[179,166,186,172,162,168,168,0,179],
[170,157,165,166,165,158,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,255,170,170,170,85,85,85],
[255,0,255,85,85,170,85,170,85],
[85,85,0,0,85,170,85,85,85],
[170,255,340,0,85,340,170,255,255],
[170,255,255,255,0,340,255,170,255],
[170,170,170,0,0,0,0,85,170],
[255,255,255,170,85,340,0,170,340],
[255,170,255,85,170,255,170,0,170],
[255,255,255,85,85,170,0,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,178,163,159,166,175,160,172],
[180,0,173,177,159,157,186,173,183],
[162,167,0,167,154,167,173,155,174],
[177,163,173,0,166,157,173,172,162],
[181,181,186,174,0,165,177,163,182],
[174,183,173,183,175,0,179,175,169],
[165,154,167,167,163,161,0,154,153],
[180,167,185,168,177,165,186,0,198],
[168,157,166,178,158,171,187,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,204,157,183,171,175,169,141],
[177,0,224,162,161,182,170,168,138],
[136,116,0,134,148,158,126,161,130],
[183,178,206,0,182,143,186,183,153],
[157,179,192,158,0,158,166,160,150],
[169,158,182,197,182,0,155,139,173],
[165,170,214,154,174,185,0,173,169],
[171,172,179,157,180,201,167,0,182],
[199,202,210,187,190,167,171,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,151,140,175,159,170,161,156],
[174,0,165,167,181,156,174,169,165],
[189,175,0,175,207,171,191,180,169],
[200,173,165,0,201,164,184,175,160],
[165,159,133,139,0,157,160,153,154],
[181,184,169,176,183,0,184,185,177],
[170,166,149,156,180,156,0,169,149],
[179,171,160,165,187,155,171,0,164],
[184,175,171,180,186,163,191,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,151,179,166,175,147,163,170],
[178,0,181,185,167,179,165,156,176],
[189,159,0,170,164,165,157,146,172],
[161,155,170,0,144,169,154,145,165],
[174,173,176,196,0,173,157,157,180],
[165,161,175,171,167,0,156,170,168],
[193,175,183,186,183,184,0,162,191],
[177,184,194,195,183,170,178,0,176],
[170,164,168,175,160,172,149,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,148,193,207,165,181,170],
[166,0,154,151,178,196,175,179,178],
[167,186,0,175,182,180,182,199,173],
[192,189,165,0,177,201,181,173,186],
[147,162,158,163,0,178,162,176,175],
[133,144,160,139,162,0,160,169,147],
[175,165,158,159,178,180,0,185,160],
[159,161,141,167,164,171,155,0,166],
[170,162,167,154,165,193,180,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,151,164,135,154,140,124,163],
[176,0,156,165,139,141,151,143,176],
[189,184,0,172,142,172,157,155,170],
[176,175,168,0,159,188,165,165,179],
[205,201,198,181,0,199,169,180,187],
[186,199,168,152,141,0,171,151,177],
[200,189,183,175,171,169,0,170,185],
[216,197,185,175,160,189,170,0,182],
[177,164,170,161,153,163,155,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,175,162,196,175,171,170],
[162,0,181,155,167,164,162,167,158],
[155,159,0,159,148,183,168,158,163],
[165,185,181,0,180,191,169,189,167],
[178,173,192,160,0,172,174,181,163],
[144,176,157,149,168,0,166,168,152],
[165,178,172,171,166,174,0,173,161],
[169,173,182,151,159,172,167,0,169],
[170,182,177,173,177,188,179,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,194,192,186,181,173,163,190],
[147,0,144,200,162,163,170,167,173],
[146,196,0,187,162,166,163,171,146],
[148,140,153,0,153,141,166,161,155],
[154,178,178,187,0,167,166,164,171],
[159,177,174,199,173,0,177,161,167],
[167,170,177,174,174,163,0,171,164],
[177,173,169,179,176,179,169,0,179],
[150,167,194,185,169,173,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,142,174,162,150,162,168,147],
[185,0,183,178,182,170,187,170,177],
[198,157,0,178,177,162,166,172,157],
[166,162,162,0,164,169,170,156,172],
[178,158,163,176,0,164,175,177,160],
[190,170,178,171,176,0,181,176,165],
[178,153,174,170,165,159,0,175,153],
[172,170,168,184,163,164,165,0,170],
[193,163,183,168,180,175,187,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,142,158,161,158,148,148,172],
[195,0,166,175,172,189,164,170,164],
[198,174,0,179,181,191,170,171,165],
[182,165,161,0,157,169,144,135,148],
[179,168,159,183,0,175,147,163,181],
[182,151,149,171,165,0,151,165,161],
[192,176,170,196,193,189,0,190,163],
[192,170,169,205,177,175,150,0,149],
[168,176,175,192,159,179,177,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,185,175,178,191,196,182,176],
[182,0,169,158,190,187,186,202,165],
[155,171,0,150,161,179,189,179,169],
[165,182,190,0,197,181,189,178,182],
[162,150,179,143,0,177,173,173,156],
[149,153,161,159,163,0,175,168,172],
[144,154,151,151,167,165,0,175,178],
[158,138,161,162,167,172,165,0,163],
[164,175,171,158,184,168,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,140,155,148,122,165,145],
[163,0,175,160,153,165,157,146,143],
[162,165,0,136,140,141,135,149,134],
[200,180,204,0,163,168,153,180,147],
[185,187,200,177,0,166,185,180,176],
[192,175,199,172,174,0,196,162,159],
[218,183,205,187,155,144,0,174,188],
[175,194,191,160,160,178,166,0,165],
[195,197,206,193,164,181,152,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,174,164,166,165,163,162,168],
[195,0,183,160,162,163,174,173,165],
[166,157,0,172,165,152,174,181,169],
[176,180,168,0,189,173,184,189,192],
[174,178,175,151,0,173,158,184,172],
[175,177,188,167,167,0,169,172,173],
[177,166,166,156,182,171,0,162,157],
[178,167,159,151,156,168,178,0,171],
[172,175,171,148,168,167,183,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,161,179,177,176,198,164,170],
[203,0,197,178,189,188,193,164,189],
[179,143,0,167,156,161,180,138,138],
[161,162,173,0,191,156,176,180,157],
[163,151,184,149,0,163,182,160,157],
[164,152,179,184,177,0,162,171,160],
[142,147,160,164,158,178,0,150,162],
[176,176,202,160,180,169,190,0,152],
[170,151,202,183,183,180,178,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,180,167,177,186,180,193,182],
[141,0,149,182,178,197,152,185,180],
[160,191,0,179,176,188,178,187,167],
[173,158,161,0,157,184,189,175,171],
[163,162,164,183,0,195,177,179,185],
[154,143,152,156,145,0,158,161,160],
[160,188,162,151,163,182,0,178,182],
[147,155,153,165,161,179,162,0,157],
[158,160,173,169,155,180,158,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,180,160,180,166,176,169,172],
[164,0,174,155,168,158,153,167,161],
[160,166,0,152,159,163,158,166,165],
[180,185,188,0,170,181,177,168,172],
[160,172,181,170,0,158,170,164,183],
[174,182,177,159,182,0,170,164,180],
[164,187,182,163,170,170,0,170,173],
[171,173,174,172,176,176,170,0,165],
[168,179,175,168,157,160,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,183,163,179,164,180,152,167],
[175,0,176,160,164,165,168,159,170],
[157,164,0,141,151,156,160,160,142],
[177,180,199,0,177,174,184,170,166],
[161,176,189,163,0,162,175,159,163],
[176,175,184,166,178,0,169,159,163],
[160,172,180,156,165,171,0,164,167],
[188,181,180,170,181,181,176,0,175],
[173,170,198,174,177,177,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,141,144,162,180,137,169,162],
[186,0,161,140,183,176,147,154,179],
[199,179,0,178,173,192,155,180,184],
[196,200,162,0,187,179,156,155,177],
[178,157,167,153,0,167,145,165,153],
[160,164,148,161,173,0,158,179,160],
[203,193,185,184,195,182,0,180,168],
[171,186,160,185,175,161,160,0,167],
[178,161,156,163,187,180,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,204,177,157,153,153,129,155],
[168,0,160,173,146,164,143,143,142],
[136,180,0,162,166,146,149,141,154],
[163,167,178,0,157,155,151,168,150],
[183,194,174,183,0,182,159,168,163],
[187,176,194,185,158,0,170,181,169],
[187,197,191,189,181,170,0,164,172],
[211,197,199,172,172,159,176,0,156],
[185,198,186,190,177,171,168,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,177,153,150,170,166,187,157],
[192,0,176,186,159,185,173,162,165],
[163,164,0,156,150,170,156,159,156],
[187,154,184,0,154,195,174,186,172],
[190,181,190,186,0,185,166,182,163],
[170,155,170,145,155,0,154,174,164],
[174,167,184,166,174,186,0,179,176],
[153,178,181,154,158,166,161,0,176],
[183,175,184,168,177,176,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,146,187,175,175,184,192,162],
[152,0,150,168,154,155,171,200,166],
[194,190,0,178,180,170,186,202,189],
[153,172,162,0,154,150,169,182,162],
[165,186,160,186,0,175,175,184,174],
[165,185,170,190,165,0,176,189,165],
[156,169,154,171,165,164,0,183,144],
[148,140,138,158,156,151,157,0,145],
[178,174,151,178,166,175,196,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,157,185,160,198,179,174,180],
[146,0,162,172,164,181,174,174,167],
[183,178,0,163,173,199,188,195,167],
[155,168,177,0,156,196,175,179,171],
[180,176,167,184,0,193,174,189,178],
[142,159,141,144,147,0,156,149,166],
[161,166,152,165,166,184,0,164,162],
[166,166,145,161,151,191,176,0,180],
[160,173,173,169,162,174,178,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,162,203,235,117,178,175,217],
[135,0,177,158,224,71,135,133,161],
[178,163,0,189,236,104,149,221,204],
[137,182,151,0,195,151,79,194,197],
[105,116,104,145,0,85,118,118,119],
[223,269,236,189,255,0,163,223,236],
[162,205,191,261,222,177,0,221,233],
[165,207,119,146,222,117,119,0,176],
[123,179,136,143,221,104,107,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,156,172,159,182,172,164,184],
[158,0,160,168,166,163,176,150,170],
[184,180,0,145,167,193,194,164,161],
[168,172,195,0,189,175,192,185,174],
[181,174,173,151,0,187,180,172,170],
[158,177,147,165,153,0,168,152,159],
[168,164,146,148,160,172,0,144,164],
[176,190,176,155,168,188,196,0,170],
[156,170,179,166,170,181,176,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,185,187,177,163,167,176],
[172,0,182,185,195,179,170,167,181],
[168,158,0,176,186,167,162,171,171],
[155,155,164,0,186,167,164,161,169],
[153,145,154,154,0,153,149,158,143],
[163,161,173,173,187,0,161,177,157],
[177,170,178,176,191,179,0,179,170],
[173,173,169,179,182,163,161,0,159],
[164,159,169,171,197,183,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,187,174,163,168,158,178,180],
[160,0,153,168,148,155,154,169,166],
[153,187,0,174,159,165,166,171,168],
[166,172,166,0,165,160,163,177,157],
[177,192,181,175,0,172,156,179,180],
[172,185,175,180,168,0,172,185,178],
[182,186,174,177,184,168,0,186,172],
[162,171,169,163,161,155,154,0,169],
[160,174,172,183,160,162,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,184,169,181,208,180,169,165],
[180,0,189,192,185,218,182,199,157],
[156,151,0,145,159,175,159,144,155],
[171,148,195,0,166,204,190,163,161],
[159,155,181,174,0,193,168,149,170],
[132,122,165,136,147,0,150,138,149],
[160,158,181,150,172,190,0,169,156],
[171,141,196,177,191,202,171,0,170],
[175,183,185,179,170,191,184,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,166,174,174,173,163,175],
[172,0,179,178,183,177,179,170,188],
[168,161,0,175,170,177,168,159,175],
[174,162,165,0,172,162,171,169,185],
[166,157,170,168,0,153,166,170,171],
[166,163,163,178,187,0,177,166,182],
[167,161,172,169,174,163,0,164,179],
[177,170,181,171,170,174,176,0,181],
[165,152,165,155,169,158,161,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,143,167,188,164,157,145,161],
[157,0,155,176,169,155,159,142,149],
[197,185,0,181,180,177,171,162,180],
[173,164,159,0,176,174,148,151,166],
[152,171,160,164,0,157,151,144,149],
[176,185,163,166,183,0,161,166,178],
[183,181,169,192,189,179,0,155,185],
[195,198,178,189,196,174,185,0,165],
[179,191,160,174,191,162,155,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,179,159,172,177,168,167],
[159,0,171,163,163,173,164,173,164],
[172,169,0,169,174,179,171,169,170],
[161,177,171,0,170,170,174,174,169],
[181,177,166,170,0,174,163,179,155],
[168,167,161,170,166,0,160,161,159],
[163,176,169,166,177,180,0,164,163],
[172,167,171,166,161,179,176,0,159],
[173,176,170,171,185,181,177,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,164,170,191,197,181,153,187],
[185,0,173,168,192,196,170,151,190],
[176,167,0,153,177,181,170,157,194],
[170,172,187,0,186,204,161,163,177],
[149,148,163,154,0,163,133,130,144],
[143,144,159,136,177,0,143,137,175],
[159,170,170,179,207,197,0,175,176],
[187,189,183,177,210,203,165,0,176],
[153,150,146,163,196,165,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,126,136,158,97,133,108,183],
[197,0,171,185,158,159,134,98,169],
[214,169,0,181,178,155,182,144,192],
[204,155,159,0,195,180,193,183,229],
[182,182,162,145,0,145,157,109,193],
[243,181,185,160,195,0,206,198,206],
[207,206,158,147,183,134,0,160,183],
[232,242,196,157,231,142,180,0,216],
[157,171,148,111,147,134,157,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,167,151,149,165,172,167,160],
[184,0,183,159,162,172,168,169,163],
[173,157,0,152,169,156,165,163,172],
[189,181,188,0,149,184,184,165,170],
[191,178,171,191,0,186,178,170,168],
[175,168,184,156,154,0,176,174,142],
[168,172,175,156,162,164,0,158,182],
[173,171,177,175,170,166,182,0,179],
[180,177,168,170,172,198,158,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,183,164,172,175,163,187],
[165,0,163,180,170,167,182,160,170],
[166,177,0,184,173,170,176,179,194],
[157,160,156,0,149,159,158,145,147],
[176,170,167,191,0,171,175,177,171],
[168,173,170,181,169,0,184,172,177],
[165,158,164,182,165,156,0,158,179],
[177,180,161,195,163,168,182,0,165],
[153,170,146,193,169,163,161,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,150,167,187,155,151,191,178],
[172,0,151,163,165,181,182,181,154],
[190,189,0,167,178,182,194,173,183],
[173,177,173,0,186,165,179,182,169],
[153,175,162,154,0,144,167,174,161],
[185,159,158,175,196,0,169,188,173],
[189,158,146,161,173,171,0,169,171],
[149,159,167,158,166,152,171,0,165],
[162,186,157,171,179,167,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,156,171,179,173,183,159,163],
[164,0,159,134,167,154,163,146,144],
[184,181,0,174,181,179,197,151,168],
[169,206,166,0,197,175,188,181,170],
[161,173,159,143,0,156,173,149,142],
[167,186,161,165,184,0,177,155,172],
[157,177,143,152,167,163,0,149,151],
[181,194,189,159,191,185,191,0,171],
[177,196,172,170,198,168,189,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,166,182,186,177,161,130,161],
[191,0,188,188,200,185,192,167,181],
[174,152,0,199,197,194,170,176,177],
[158,152,141,0,195,178,150,147,170],
[154,140,143,145,0,170,152,133,150],
[163,155,146,162,170,0,152,136,183],
[179,148,170,190,188,188,0,153,170],
[210,173,164,193,207,204,187,0,185],
[179,159,163,170,190,157,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,163,171,171,180,167,183],
[162,0,175,170,174,173,177,177,182],
[166,165,0,155,186,173,181,166,160],
[177,170,185,0,177,185,176,170,184],
[169,166,154,163,0,176,163,169,162],
[169,167,167,155,164,0,178,170,186],
[160,163,159,164,177,162,0,158,174],
[173,163,174,170,171,170,182,0,182],
[157,158,180,156,178,154,166,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,160,168,158,179,151,174,175],
[187,0,191,185,178,202,152,168,168],
[180,149,0,159,164,187,162,183,162],
[172,155,181,0,174,195,150,181,184],
[182,162,176,166,0,194,148,182,154],
[161,138,153,145,146,0,138,149,144],
[189,188,178,190,192,202,0,179,170],
[166,172,157,159,158,191,161,0,170],
[165,172,178,156,186,196,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,225,158,199,184,192,174,210],
[130,0,198,125,157,164,171,144,180],
[115,142,0,101,172,143,159,144,170],
[182,215,239,0,197,170,188,196,200],
[141,183,168,143,0,153,180,140,177],
[156,176,197,170,187,0,177,170,177],
[148,169,181,152,160,163,0,173,188],
[166,196,196,144,200,170,167,0,205],
[130,160,170,140,163,163,152,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,174,166,162,158,160,162,158],
[174,0,189,163,156,171,175,180,165],
[166,151,0,165,147,161,158,167,158],
[174,177,175,0,144,175,159,169,165],
[178,184,193,196,0,181,186,168,175],
[182,169,179,165,159,0,172,164,166],
[180,165,182,181,154,168,0,167,168],
[178,160,173,171,172,176,173,0,185],
[182,175,182,175,165,174,172,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,159,169,178,174,176,179,176],
[168,0,165,172,167,183,164,173,173],
[181,175,0,177,181,181,172,169,180],
[171,168,163,0,169,179,158,174,180],
[162,173,159,171,0,176,167,164,169],
[166,157,159,161,164,0,168,161,159],
[164,176,168,182,173,172,0,170,163],
[161,167,171,166,176,179,170,0,178],
[164,167,160,160,171,181,177,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,165,187,150,179,174,154,156],
[173,0,174,177,169,185,198,182,152],
[175,166,0,187,168,175,192,177,173],
[153,163,153,0,150,163,159,139,137],
[190,171,172,190,0,184,182,180,169],
[161,155,165,177,156,0,186,168,162],
[166,142,148,181,158,154,0,148,140],
[186,158,163,201,160,172,192,0,157],
[184,188,167,203,171,178,200,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,177,192,176,173,186,171],
[172,0,183,167,182,189,178,170,180],
[166,157,0,151,188,188,181,166,167],
[163,173,189,0,181,177,174,174,174],
[148,158,152,159,0,162,169,143,156],
[164,151,152,163,178,0,156,144,155],
[167,162,159,166,171,184,0,176,152],
[154,170,174,166,197,196,164,0,171],
[169,160,173,166,184,185,188,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,159,193,185,181,165,178,176],
[168,0,172,194,184,163,166,177,184],
[181,168,0,158,182,167,187,177,198],
[147,146,182,0,159,150,143,142,153],
[155,156,158,181,0,158,166,151,143],
[159,177,173,190,182,0,150,158,182],
[175,174,153,197,174,190,0,146,187],
[162,163,163,198,189,182,194,0,160],
[164,156,142,187,197,158,153,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,198,173,206,206,160,149,183],
[132,0,123,173,156,209,157,135,153],
[142,217,0,183,167,203,205,194,205],
[167,167,157,0,153,129,157,158,144],
[134,184,173,187,0,196,160,149,182],
[134,131,137,211,144,0,145,123,131],
[180,183,135,183,180,195,0,182,166],
[191,205,146,182,191,217,158,0,181],
[157,187,135,196,158,209,174,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,183,180,172,170,180,176,184],
[138,0,176,153,144,152,166,174,159],
[157,164,0,141,149,156,164,165,152],
[160,187,199,0,163,161,175,182,164],
[168,196,191,177,0,166,182,179,171],
[170,188,184,179,174,0,171,185,176],
[160,174,176,165,158,169,0,166,165],
[164,166,175,158,161,155,174,0,164],
[156,181,188,176,169,164,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,170,186,156,170,149,151,168],
[185,0,160,170,212,181,201,158,190],
[170,180,0,184,189,193,208,184,214],
[154,170,156,0,156,170,141,101,182],
[184,128,151,184,0,152,174,133,193],
[170,159,147,170,188,0,166,137,195],
[191,139,132,199,166,174,0,133,184],
[189,182,156,239,207,203,207,0,214],
[172,150,126,158,147,145,156,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,139,170,163,161,159,169,147],
[181,0,172,180,174,190,169,169,183],
[201,168,0,174,198,206,182,188,175],
[170,160,166,0,166,183,155,165,159],
[177,166,142,174,0,167,149,153,140],
[179,150,134,157,173,0,157,158,142],
[181,171,158,185,191,183,0,179,159],
[171,171,152,175,187,182,161,0,152],
[193,157,165,181,200,198,181,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,193,169,167,165,181,166],
[173,0,177,169,179,179,176,181,182],
[173,163,0,177,165,178,166,172,171],
[147,171,163,0,171,179,160,159,167],
[171,161,175,169,0,168,177,186,173],
[173,161,162,161,172,0,181,168,154],
[175,164,174,180,163,159,0,173,161],
[159,159,168,181,154,172,167,0,167],
[174,158,169,173,167,186,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,183,180,165,170,176,190,179],
[157,0,176,169,158,154,180,183,182],
[157,164,0,164,161,148,174,173,181],
[160,171,176,0,150,155,170,170,164],
[175,182,179,190,0,167,180,190,194],
[170,186,192,185,173,0,171,177,197],
[164,160,166,170,160,169,0,173,174],
[150,157,167,170,150,163,167,0,179],
[161,158,159,176,146,143,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,162,188,198,193,190,196],
[171,0,161,179,187,187,188,201,193],
[178,179,0,167,180,176,207,175,183],
[178,161,173,0,175,179,181,175,189],
[152,153,160,165,0,151,187,187,167],
[142,153,164,161,189,0,191,186,180],
[147,152,133,159,153,149,0,168,159],
[150,139,165,165,153,154,172,0,161],
[144,147,157,151,173,160,181,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,165,176,174,173,176,159],
[160,0,170,164,176,177,151,165,168],
[172,170,0,179,156,168,172,156,161],
[175,176,161,0,176,171,164,183,175],
[164,164,184,164,0,173,178,172,173],
[166,163,172,169,167,0,166,168,168],
[167,189,168,176,162,174,0,176,182],
[164,175,184,157,168,172,164,0,168],
[181,172,179,165,167,172,158,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,181,172,170,191,165,174],
[158,0,168,187,178,165,181,168,200],
[169,172,0,189,179,162,179,182,181],
[159,153,151,0,179,155,166,161,164],
[168,162,161,161,0,151,164,164,162],
[170,175,178,185,189,0,184,187,181],
[149,159,161,174,176,156,0,170,170],
[175,172,158,179,176,153,170,0,183],
[166,140,159,176,178,159,170,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,162,174,182,167,139,177,170],
[198,0,187,207,192,209,174,168,198],
[178,153,0,171,195,175,180,172,169],
[166,133,169,0,191,184,180,178,189],
[158,148,145,149,0,166,157,169,160],
[173,131,165,156,174,0,182,143,164],
[201,166,160,160,183,158,0,138,192],
[163,172,168,162,171,197,202,0,179],
[170,142,171,151,180,176,148,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,177,162,176,181,190,166],
[180,0,162,168,158,159,187,188,170],
[173,178,0,168,174,163,178,186,170],
[163,172,172,0,182,180,181,167,176],
[178,182,166,158,0,182,185,187,177],
[164,181,177,160,158,0,176,187,173],
[159,153,162,159,155,164,0,177,176],
[150,152,154,173,153,153,163,0,173],
[174,170,170,164,163,167,164,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,174,176,183,169,183,176,194],
[152,0,147,168,180,159,172,176,163],
[166,193,0,183,178,182,176,166,186],
[164,172,157,0,160,181,164,174,175],
[157,160,162,180,0,171,175,159,176],
[171,181,158,159,169,0,164,157,173],
[157,168,164,176,165,176,0,178,172],
[164,164,174,166,181,183,162,0,164],
[146,177,154,165,164,167,168,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,151,178,157,181,172,176,164],
[195,0,148,179,169,188,193,195,164],
[189,192,0,166,186,213,182,201,161],
[162,161,174,0,161,181,174,196,170],
[183,171,154,179,0,191,197,189,154],
[159,152,127,159,149,0,156,174,139],
[168,147,158,166,143,184,0,166,162],
[164,145,139,144,151,166,174,0,145],
[176,176,179,170,186,201,178,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,128,166,165,158,183,145],
[166,0,163,160,176,167,162,155,165],
[169,177,0,156,156,160,125,175,133],
[212,180,184,0,175,176,135,185,146],
[174,164,184,165,0,180,170,167,148],
[175,173,180,164,160,0,143,168,150],
[182,178,215,205,170,197,0,195,184],
[157,185,165,155,173,172,145,0,140],
[195,175,207,194,192,190,156,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,138,128,158,150,157,180,194],
[161,0,140,160,165,122,167,150,176],
[202,200,0,166,172,162,190,197,212],
[212,180,174,0,217,160,188,201,207],
[182,175,168,123,0,123,194,210,211],
[190,218,178,180,217,0,164,222,238],
[183,173,150,152,146,176,0,165,194],
[160,190,143,139,130,118,175,0,165],
[146,164,128,133,129,102,146,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,188,185,182,190,189,170,174],
[156,0,194,173,184,179,182,184,181],
[152,146,0,148,163,164,163,155,146],
[155,167,192,0,185,177,189,179,170],
[158,156,177,155,0,170,166,189,175],
[150,161,176,163,170,0,162,169,157],
[151,158,177,151,174,178,0,163,154],
[170,156,185,161,151,171,177,0,162],
[166,159,194,170,165,183,186,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,175,174,195,172,171,186,158],
[155,0,189,176,194,175,189,171,152],
[165,151,0,160,203,154,171,174,172],
[166,164,180,0,179,181,185,174,160],
[145,146,137,161,0,153,161,142,137],
[168,165,186,159,187,0,187,166,157],
[169,151,169,155,179,153,0,155,160],
[154,169,166,166,198,174,185,0,167],
[182,188,168,180,203,183,180,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,247,175,182,172,159,167,187],
[170,0,224,185,160,194,170,182,176],
[93,116,0,160,131,152,198,155,170],
[165,155,180,0,169,164,179,175,142],
[158,180,209,171,0,199,165,175,199],
[168,146,188,176,141,0,144,184,177],
[181,170,142,161,175,196,0,165,157],
[173,158,185,165,165,156,175,0,166],
[153,164,170,198,141,163,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,179,167,191,193,176,152,175],
[154,0,165,163,187,165,172,174,176],
[161,175,0,154,178,179,161,165,182],
[173,177,186,0,197,180,173,168,165],
[149,153,162,143,0,168,155,151,168],
[147,175,161,160,172,0,169,168,169],
[164,168,179,167,185,171,0,185,171],
[188,166,175,172,189,172,155,0,173],
[165,164,158,175,172,171,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,170,168,168,168,165,170],
[166,0,168,172,167,176,178,160,171],
[173,172,0,164,167,171,162,160,166],
[170,168,176,0,165,176,172,174,168],
[172,173,173,175,0,172,183,167,158],
[172,164,169,164,168,0,178,169,157],
[172,162,178,168,157,162,0,158,163],
[175,180,180,166,173,171,182,0,175],
[170,169,174,172,182,183,177,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,176,166,176,179,158,155,156],
[190,0,174,192,191,195,182,178,168],
[164,166,0,182,180,196,175,165,177],
[174,148,158,0,177,174,169,143,157],
[164,149,160,163,0,172,135,149,142],
[161,145,144,166,168,0,148,136,162],
[182,158,165,171,205,192,0,157,171],
[185,162,175,197,191,204,183,0,177],
[184,172,163,183,198,178,169,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,177,170,183,168,161,176],
[169,0,175,164,182,165,157,168,148],
[164,165,0,187,190,191,168,170,187],
[163,176,153,0,176,161,167,154,153],
[170,158,150,164,0,169,172,170,145],
[157,175,149,179,171,0,158,161,162],
[172,183,172,173,168,182,0,162,170],
[179,172,170,186,170,179,178,0,160],
[164,192,153,187,195,178,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,148,167,197,165,170,176,172],
[174,0,148,170,170,166,172,169,175],
[192,192,0,187,181,195,181,191,170],
[173,170,153,0,171,162,160,165,164],
[143,170,159,169,0,169,165,155,149],
[175,174,145,178,171,0,173,173,195],
[170,168,159,180,175,167,0,166,170],
[164,171,149,175,185,167,174,0,178],
[168,165,170,176,191,145,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,175,178,162,166,176,167,156],
[179,0,185,172,178,173,181,164,170],
[165,155,0,168,172,170,183,162,164],
[162,168,172,0,161,170,176,157,162],
[178,162,168,179,0,178,180,162,152],
[174,167,170,170,162,0,165,169,157],
[164,159,157,164,160,175,0,162,155],
[173,176,178,183,178,171,178,0,167],
[184,170,176,178,188,183,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,164,159,162,151,183,148,185],
[151,0,143,135,146,151,159,142,164],
[176,197,0,157,163,169,182,174,193],
[181,205,183,0,165,181,178,159,189],
[178,194,177,175,0,182,184,165,187],
[189,189,171,159,158,0,185,170,193],
[157,181,158,162,156,155,0,143,184],
[192,198,166,181,175,170,197,0,205],
[155,176,147,151,153,147,156,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,169,151,172,177,169,160,175],
[160,0,146,155,167,161,148,160,167],
[171,194,0,151,168,165,153,162,188],
[189,185,189,0,193,170,177,188,191],
[168,173,172,147,0,173,158,171,164],
[163,179,175,170,167,0,165,167,183],
[171,192,187,163,182,175,0,180,184],
[180,180,178,152,169,173,160,0,185],
[165,173,152,149,176,157,156,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,178,157,172,158,162,173,160],
[176,0,176,162,178,166,197,184,180],
[162,164,0,165,159,170,172,176,164],
[183,178,175,0,175,158,193,178,173],
[168,162,181,165,0,158,171,174,182],
[182,174,170,182,182,0,178,177,171],
[178,143,168,147,169,162,0,185,186],
[167,156,164,162,166,163,155,0,163],
[180,160,176,167,158,169,154,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,177,192,172,180,180,182,169],
[152,0,162,189,169,166,148,159,148],
[163,178,0,198,179,168,166,157,162],
[148,151,142,0,161,156,145,149,144],
[168,171,161,179,0,190,149,166,168],
[160,174,172,184,150,0,178,176,180],
[160,192,174,195,191,162,0,173,172],
[158,181,183,191,174,164,167,0,173],
[171,192,178,196,172,160,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,177,166,159,178,183,165],
[171,0,163,190,182,176,172,165,161],
[173,177,0,172,190,158,154,165,142],
[163,150,168,0,153,149,154,153,156],
[174,158,150,187,0,156,167,167,155],
[181,164,182,191,184,0,170,182,179],
[162,168,186,186,173,170,0,187,179],
[157,175,175,187,173,158,153,0,149],
[175,179,198,184,185,161,161,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,198,156,178,200,212,192,204],
[151,0,166,145,149,179,179,148,159],
[142,174,0,147,145,157,152,155,154],
[184,195,193,0,177,204,190,165,190],
[162,191,195,163,0,195,171,169,175],
[140,161,183,136,145,0,155,148,170],
[128,161,188,150,169,185,0,148,157],
[148,192,185,175,171,192,192,0,185],
[136,181,186,150,165,170,183,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,173,157,153,162,180,148,166],
[188,0,190,164,171,177,182,173,176],
[167,150,0,158,148,162,179,160,162],
[183,176,182,0,160,169,181,162,166],
[187,169,192,180,0,189,189,182,196],
[178,163,178,171,151,0,182,152,175],
[160,158,161,159,151,158,0,151,153],
[192,167,180,178,158,188,189,0,180],
[174,164,178,174,144,165,187,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,143,163,160,165,159,159,154],
[179,0,161,180,175,175,166,163,160],
[197,179,0,165,169,152,174,157,144],
[177,160,175,0,168,174,175,173,167],
[180,165,171,172,0,174,184,178,171],
[175,165,188,166,166,0,174,169,183],
[181,174,166,165,156,166,0,174,151],
[181,177,183,167,162,171,166,0,161],
[186,180,196,173,169,157,189,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,161,184,155,188,177,168,175],
[191,0,174,183,155,170,196,185,185],
[179,166,0,179,154,156,172,172,165],
[156,157,161,0,155,177,162,156,163],
[185,185,186,185,0,180,179,159,182],
[152,170,184,163,160,0,189,164,182],
[163,144,168,178,161,151,0,156,171],
[172,155,168,184,181,176,184,0,166],
[165,155,175,177,158,158,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,169,156,134,134,150,154,158],
[182,0,175,169,171,170,166,194,181],
[171,165,0,136,156,158,171,155,174],
[184,171,204,0,166,156,172,191,167],
[206,169,184,174,0,179,167,191,174],
[206,170,182,184,161,0,180,172,168],
[190,174,169,168,173,160,0,185,173],
[186,146,185,149,149,168,155,0,173],
[182,159,166,173,166,172,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,175,175,172,169,182,166],
[177,0,185,189,172,176,175,187,170],
[173,155,0,176,171,161,169,185,175],
[165,151,164,0,151,180,152,173,159],
[165,168,169,189,0,163,180,181,172],
[168,164,179,160,177,0,177,185,173],
[171,165,171,188,160,163,0,183,175],
[158,153,155,167,159,155,157,0,156],
[174,170,165,181,168,167,165,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,179,170,170,153,183,184,186],
[180,0,188,160,209,185,188,199,200],
[161,152,0,164,195,160,193,175,190],
[170,180,176,0,170,181,198,199,187],
[170,131,145,170,0,157,175,194,193],
[187,155,180,159,183,0,184,191,174],
[157,152,147,142,165,156,0,167,167],
[156,141,165,141,146,149,173,0,170],
[154,140,150,153,147,166,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,169,184,169,185,163,185],
[176,0,165,181,191,171,167,171,183],
[177,175,0,183,183,175,174,167,190],
[171,159,157,0,191,157,182,166,172],
[156,149,157,149,0,164,157,143,172],
[171,169,165,183,176,0,160,168,172],
[155,173,166,158,183,180,0,164,163],
[177,169,173,174,197,172,176,0,188],
[155,157,150,168,168,168,177,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,177,178,181,173,155,173,172],
[163,0,171,154,166,162,170,170,156],
[163,169,0,181,167,172,170,169,167],
[162,186,159,0,171,161,149,173,171],
[159,174,173,169,0,164,167,166,159],
[167,178,168,179,176,0,161,167,163],
[185,170,170,191,173,179,0,184,166],
[167,170,171,167,174,173,156,0,159],
[168,184,173,169,181,177,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,154,149,163,168,167,146,161],
[187,0,172,160,161,171,166,180,187],
[186,168,0,161,172,174,172,159,190],
[191,180,179,0,178,170,173,164,182],
[177,179,168,162,0,166,172,162,179],
[172,169,166,170,174,0,172,159,176],
[173,174,168,167,168,168,0,159,180],
[194,160,181,176,178,181,181,0,170],
[179,153,150,158,161,164,160,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,174,161,178,178,190,183],
[160,0,165,177,171,182,162,177,174],
[167,175,0,189,168,176,168,180,186],
[166,163,151,0,154,168,168,171,167],
[179,169,172,186,0,185,171,181,175],
[162,158,164,172,155,0,165,179,171],
[162,178,172,172,169,175,0,185,179],
[150,163,160,169,159,161,155,0,161],
[157,166,154,173,165,169,161,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,168,178,177,172,182,179,182],
[194,0,173,196,191,155,181,177,186],
[172,167,0,166,169,177,170,179,181],
[162,144,174,0,164,174,170,161,171],
[163,149,171,176,0,156,177,183,182],
[168,185,163,166,184,0,178,187,190],
[158,159,170,170,163,162,0,179,184],
[161,163,161,179,157,153,161,0,170],
[158,154,159,169,158,150,156,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,171,170,174,192,185,175],
[155,0,166,172,160,182,171,163,178],
[166,174,0,176,162,165,173,179,188],
[169,168,164,0,161,168,170,173,166],
[170,180,178,179,0,171,191,186,173],
[166,158,175,172,169,0,178,166,172],
[148,169,167,170,149,162,0,163,164],
[155,177,161,167,154,174,177,0,171],
[165,162,152,174,167,168,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,244,269,269,195,170,217,219],
[97,0,174,245,198,195,195,196,168],
[96,166,0,195,218,193,166,190,144],
[71,95,145,0,194,122,70,168,143],
[71,142,122,146,0,120,122,169,143],
[145,145,147,218,220,0,100,192,169],
[170,145,174,270,218,240,0,242,120],
[123,144,150,172,171,148,98,0,169],
[121,172,196,197,197,171,220,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,203,184,169,169,181,168,174],
[169,0,200,195,172,178,181,162,171],
[137,140,0,162,158,136,165,160,163],
[156,145,178,0,148,155,157,171,158],
[171,168,182,192,0,175,155,156,183],
[171,162,204,185,165,0,178,153,194],
[159,159,175,183,185,162,0,158,182],
[172,178,180,169,184,187,182,0,177],
[166,169,177,182,157,146,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,149,176,190,201,188,205],
[174,0,204,181,182,167,216,194,214],
[168,136,0,174,143,175,174,166,178],
[191,159,166,0,145,172,163,177,198],
[164,158,197,195,0,185,185,210,184],
[150,173,165,168,155,0,163,206,198],
[139,124,166,177,155,177,0,186,189],
[152,146,174,163,130,134,154,0,192],
[135,126,162,142,156,142,151,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,186,170,166,166,176,153],
[167,0,168,178,162,154,162,175,141],
[166,172,0,173,176,171,193,192,171],
[154,162,167,0,164,152,166,164,150],
[170,178,164,176,0,181,169,165,150],
[174,186,169,188,159,0,156,170,149],
[174,178,147,174,171,184,0,168,154],
[164,165,148,176,175,170,172,0,152],
[187,199,169,190,190,191,186,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,161,158,164,161,168,154,158],
[180,0,181,165,170,165,165,177,168],
[179,159,0,176,162,173,164,176,162],
[182,175,164,0,181,178,163,168,166],
[176,170,178,159,0,169,167,179,164],
[179,175,167,162,171,0,172,158,163],
[172,175,176,177,173,168,0,182,176],
[186,163,164,172,161,182,158,0,164],
[182,172,178,174,176,177,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,171,141,193,193,179,200,168],
[138,0,152,142,182,180,141,141,146],
[169,188,0,168,185,159,174,165,167],
[199,198,172,0,176,193,188,169,164],
[147,158,155,164,0,164,149,171,158],
[147,160,181,147,176,0,179,134,152],
[161,199,166,152,191,161,0,164,176],
[140,199,175,171,169,206,176,0,185],
[172,194,173,176,182,188,164,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,154,159,157,145,169,154,157],
[190,0,175,152,171,165,186,164,175],
[186,165,0,158,166,163,184,174,171],
[181,188,182,0,170,168,191,177,177],
[183,169,174,170,0,172,185,168,168],
[195,175,177,172,168,0,195,168,177],
[171,154,156,149,155,145,0,152,150],
[186,176,166,163,172,172,188,0,183],
[183,165,169,163,172,163,190,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,184,172,166,194,180,176,177],
[147,0,176,170,169,178,166,176,164],
[156,164,0,180,161,162,158,165,166],
[168,170,160,0,157,177,155,169,151],
[174,171,179,183,0,176,169,173,176],
[146,162,178,163,164,0,154,174,155],
[160,174,182,185,171,186,0,177,171],
[164,164,175,171,167,166,163,0,159],
[163,176,174,189,164,185,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,169,172,187,158,182,173,161],
[177,0,176,175,180,164,204,192,185],
[171,164,0,164,181,184,198,162,187],
[168,165,176,0,179,178,195,166,169],
[153,160,159,161,0,160,176,155,151],
[182,176,156,162,180,0,201,185,170],
[158,136,142,145,164,139,0,150,143],
[167,148,178,174,185,155,190,0,167],
[179,155,153,171,189,170,197,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,155,180,177,158,168,175,175],
[163,0,155,156,189,156,168,140,170],
[185,185,0,168,170,168,190,165,180],
[160,184,172,0,175,169,164,148,175],
[163,151,170,165,0,147,165,149,172],
[182,184,172,171,193,0,191,156,171],
[172,172,150,176,175,149,0,149,167],
[165,200,175,192,191,184,191,0,185],
[165,170,160,165,168,169,173,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,169,203,175,172,165,172],
[157,0,180,171,184,166,150,174,169],
[167,160,0,167,181,172,166,166,157],
[171,169,173,0,198,173,158,179,168],
[137,156,159,142,0,158,135,152,143],
[165,174,168,167,182,0,162,173,161],
[168,190,174,182,205,178,0,170,172],
[175,166,174,161,188,167,170,0,168],
[168,171,183,172,197,179,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,165,148,140,161,163,152,165],
[188,0,195,164,170,159,169,162,172],
[175,145,0,130,157,154,154,156,168],
[192,176,210,0,170,174,192,179,200],
[200,170,183,170,0,162,182,182,184],
[179,181,186,166,178,0,172,175,194],
[177,171,186,148,158,168,0,162,177],
[188,178,184,161,158,165,178,0,171],
[175,168,172,140,156,146,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,153,197,183,145,129,146,154],
[221,0,157,229,213,192,177,191,185],
[187,183,0,213,197,169,136,170,188],
[143,111,127,0,135,165,124,142,136],
[157,127,143,205,0,152,106,153,156],
[195,148,171,175,188,0,132,178,157],
[211,163,204,216,234,208,0,227,211],
[194,149,170,198,187,162,113,0,182],
[186,155,152,204,184,183,129,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,149,194,173,179,161,156,184],
[159,0,147,164,169,195,154,152,148],
[191,193,0,202,197,221,181,158,190],
[146,176,138,0,160,178,153,119,158],
[167,171,143,180,0,184,137,164,143],
[161,145,119,162,156,0,158,145,166],
[179,186,159,187,203,182,0,163,168],
[184,188,182,221,176,195,177,0,155],
[156,192,150,182,197,174,172,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,185,160,166,166,161,181,148],
[169,0,157,147,160,144,169,139,146],
[155,183,0,152,148,161,172,163,152],
[180,193,188,0,183,153,173,169,162],
[174,180,192,157,0,166,166,170,171],
[174,196,179,187,174,0,168,169,171],
[179,171,168,167,174,172,0,174,174],
[159,201,177,171,170,171,166,0,162],
[192,194,188,178,169,169,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,168,170,169,169,272,136,203],
[101,0,134,69,102,101,205,170,67],
[172,206,0,171,171,241,272,170,139],
[170,271,169,0,202,169,305,201,169],
[171,238,169,138,0,136,240,170,206],
[171,239,99,171,204,0,238,102,171],
[68,135,68,35,100,102,0,67,34],
[204,170,170,139,170,238,273,0,169],
[137,273,201,171,134,169,306,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,172,172,178,182,178,174],
[176,0,171,178,177,170,182,168,162],
[179,169,0,169,182,168,180,172,183],
[168,162,171,0,160,164,170,173,167],
[168,163,158,180,0,169,171,174,164],
[162,170,172,176,171,0,165,174,157],
[158,158,160,170,169,175,0,178,156],
[162,172,168,167,166,166,162,0,170],
[166,178,157,173,176,183,184,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,155,175,195,177,178,185,190],
[170,0,163,178,166,178,169,161,188],
[185,177,0,171,164,191,194,194,193],
[165,162,169,0,173,177,187,163,208],
[145,174,176,167,0,181,168,171,195],
[163,162,149,163,159,0,191,153,179],
[162,171,146,153,172,149,0,144,187],
[155,179,146,177,169,187,196,0,194],
[150,152,147,132,145,161,153,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,170,169,162,163,131,165,164],
[182,0,187,162,171,169,162,167,179],
[170,153,0,145,162,151,132,144,143],
[171,178,195,0,178,153,143,143,160],
[178,169,178,162,0,135,154,156,153],
[177,171,189,187,205,0,183,166,185],
[209,178,208,197,186,157,0,164,178],
[175,173,196,197,184,174,176,0,169],
[176,161,197,180,187,155,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,175,186,186,203,187,196,195],
[180,0,186,192,169,198,171,188,177],
[165,154,0,157,169,195,181,181,175],
[154,148,183,0,147,191,174,182,174],
[154,171,171,193,0,195,190,177,175],
[137,142,145,149,145,0,133,140,155],
[153,169,159,166,150,207,0,160,167],
[144,152,159,158,163,200,180,0,180],
[145,163,165,166,165,185,173,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,142,151,156,173,156,167,132],
[184,0,164,176,169,168,191,185,173],
[198,176,0,171,153,200,166,213,164],
[189,164,169,0,178,195,168,195,152],
[184,171,187,162,0,175,172,190,163],
[167,172,140,145,165,0,156,171,144],
[184,149,174,172,168,184,0,187,162],
[173,155,127,145,150,169,153,0,153],
[208,167,176,188,177,196,178,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,159,184,172,188,183,182,169],
[157,0,156,166,156,174,166,191,159],
[181,184,0,162,182,183,174,188,172],
[156,174,178,0,176,188,172,197,187],
[168,184,158,164,0,179,186,190,192],
[152,166,157,152,161,0,164,173,167],
[157,174,166,168,154,176,0,191,188],
[158,149,152,143,150,167,149,0,162],
[171,181,168,153,148,173,152,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,181,230,200,162,215,215,254],
[141,0,192,230,179,178,270,212,250],
[159,148,0,214,183,142,200,158,218],
[110,110,126,0,129,108,181,127,200],
[140,161,157,211,0,158,233,158,233],
[178,162,198,232,182,0,200,177,236],
[125,70,140,159,107,140,0,177,162],
[125,128,182,213,182,163,163,0,217],
[86,90,122,140,107,104,178,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,168,189,186,201,183,215,178],
[142,0,163,172,176,181,156,202,182],
[172,177,0,178,165,179,162,197,181],
[151,168,162,0,158,176,160,178,179],
[154,164,175,182,0,177,164,179,177],
[139,159,161,164,163,0,152,184,176],
[157,184,178,180,176,188,0,196,175],
[125,138,143,162,161,156,144,0,166],
[162,158,159,161,163,164,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,174,159,168,188,163,188,144],
[151,0,170,153,139,153,166,166,138],
[166,170,0,168,140,157,161,184,178],
[181,187,172,0,154,200,192,194,169],
[172,201,200,186,0,194,191,210,154],
[152,187,183,140,146,0,187,173,136],
[177,174,179,148,149,153,0,159,143],
[152,174,156,146,130,167,181,0,140],
[196,202,162,171,186,204,197,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,157,170,178,162,173,165,172],
[181,0,158,168,180,174,172,184,161],
[183,182,0,169,167,177,192,188,170],
[170,172,171,0,175,162,181,184,169],
[162,160,173,165,0,159,168,181,166],
[178,166,163,178,181,0,163,170,175],
[167,168,148,159,172,177,0,187,170],
[175,156,152,156,159,170,153,0,163],
[168,179,170,171,174,165,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,168,160,164,157,182,157],
[179,0,181,174,166,161,179,183,168],
[170,159,0,167,157,166,166,186,159],
[172,166,173,0,172,157,173,192,164],
[180,174,183,168,0,179,172,189,178],
[176,179,174,183,161,0,153,196,174],
[183,161,174,167,168,187,0,184,157],
[158,157,154,148,151,144,156,0,156],
[183,172,181,176,162,166,183,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,157,167,168,162,161,177,188],
[166,0,170,172,182,152,167,186,180],
[183,170,0,162,177,166,164,165,170],
[173,168,178,0,160,171,178,174,177],
[172,158,163,180,0,178,175,184,190],
[178,188,174,169,162,0,181,177,177],
[179,173,176,162,165,159,0,169,180],
[163,154,175,166,156,163,171,0,181],
[152,160,170,163,150,163,160,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,175,166,182,171,195,180,177],
[164,0,162,165,165,171,180,178,179],
[165,178,0,169,182,161,187,171,182],
[174,175,171,0,165,154,171,169,179],
[158,175,158,175,0,156,177,163,156],
[169,169,179,186,184,0,199,183,169],
[145,160,153,169,163,141,0,164,164],
[160,162,169,171,177,157,176,0,173],
[163,161,158,161,184,171,176,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,177,165,174,177,169,170],
[169,0,184,167,169,184,173,168,177],
[164,156,0,161,181,179,186,170,176],
[163,173,179,0,173,182,179,173,174],
[175,171,159,167,0,173,179,167,164],
[166,156,161,158,167,0,170,162,165],
[163,167,154,161,161,170,0,162,160],
[171,172,170,167,173,178,178,0,175],
[170,163,164,166,176,175,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,173,199,177,185,205,150,184],
[146,0,145,161,172,162,187,157,164],
[167,195,0,186,180,178,186,176,187],
[141,179,154,0,169,178,176,144,145],
[163,168,160,171,0,176,190,153,187],
[155,178,162,162,164,0,201,154,167],
[135,153,154,164,150,139,0,150,158],
[190,183,164,196,187,186,190,0,186],
[156,176,153,195,153,173,182,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,198,219,173,163,151,174,185],
[144,0,166,184,175,131,155,174,152],
[142,174,0,180,172,143,154,196,130],
[121,156,160,0,157,177,146,165,122],
[167,165,168,183,0,165,168,141,153],
[177,209,197,163,175,0,200,174,184],
[189,185,186,194,172,140,0,163,172],
[166,166,144,175,199,166,177,0,173],
[155,188,210,218,187,156,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,170,181,168,153,185,172],
[168,0,176,176,176,163,160,184,182],
[170,164,0,173,167,157,150,167,163],
[170,164,167,0,169,168,171,180,169],
[159,164,173,171,0,159,173,174,178],
[172,177,183,172,181,0,159,183,186],
[187,180,190,169,167,181,0,185,177],
[155,156,173,160,166,157,155,0,157],
[168,158,177,171,162,154,163,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,147,162,180,168,184,138],
[177,0,169,151,141,193,181,184,172],
[176,171,0,151,155,168,161,160,168],
[193,189,189,0,180,202,186,210,165],
[178,199,185,160,0,196,187,189,180],
[160,147,172,138,144,0,171,157,160],
[172,159,179,154,153,169,0,173,154],
[156,156,180,130,151,183,167,0,159],
[202,168,172,175,160,180,186,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,166,198,178,189,194,171,165],
[139,0,164,135,139,151,136,161,148],
[174,176,0,166,176,169,198,159,164],
[142,205,174,0,182,180,186,153,153],
[162,201,164,158,0,156,154,162,175],
[151,189,171,160,184,0,175,179,155],
[146,204,142,154,186,165,0,165,175],
[169,179,181,187,178,161,175,0,157],
[175,192,176,187,165,185,165,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,158,143,181,179,156,174],
[177,0,176,166,163,176,186,167,168],
[167,164,0,151,161,165,182,158,167],
[182,174,189,0,164,192,182,175,187],
[197,177,179,176,0,187,192,170,176],
[159,164,175,148,153,0,170,161,162],
[161,154,158,158,148,170,0,159,164],
[184,173,182,165,170,179,181,0,167],
[166,172,173,153,164,178,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,168,150,183,173,167,168],
[169,0,167,170,170,178,163,168,177],
[177,173,0,169,160,193,180,166,168],
[172,170,171,0,159,182,162,160,165],
[190,170,180,181,0,175,172,171,175],
[157,162,147,158,165,0,164,153,145],
[167,177,160,178,168,176,0,163,184],
[173,172,174,180,169,187,177,0,173],
[172,163,172,175,165,195,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,177,176,173,197,180,153,161],
[186,0,177,173,189,202,168,176,181],
[163,163,0,165,185,192,176,172,173],
[164,167,175,0,177,196,172,179,161],
[167,151,155,163,0,185,171,167,159],
[143,138,148,144,155,0,138,142,139],
[160,172,164,168,169,202,0,165,173],
[187,164,168,161,173,198,175,0,176],
[179,159,167,179,181,201,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,168,170,171,175,168,167],
[162,0,162,166,168,158,174,169,160],
[167,178,0,159,165,178,167,162,176],
[172,174,181,0,170,175,175,163,177],
[170,172,175,170,0,167,174,155,172],
[169,182,162,165,173,0,171,159,162],
[165,166,173,165,166,169,0,171,154],
[172,171,178,177,185,181,169,0,181],
[173,180,164,163,168,178,186,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,111,137,169,165,170,109,137],
[87,0,57,82,87,85,28,28,85],
[229,283,0,110,170,138,142,168,167],
[203,258,230,0,173,229,144,114,172],
[171,253,170,167,0,167,143,141,141],
[175,255,202,111,173,0,117,114,170],
[170,312,198,196,197,223,0,195,167],
[231,312,172,226,199,226,145,0,226],
[203,255,173,168,199,170,173,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,186,178,171,176,175,175,168],
[156,0,177,165,181,177,150,168,150],
[154,163,0,164,167,157,166,171,166],
[162,175,176,0,168,186,171,164,156],
[169,159,173,172,0,175,175,170,172],
[164,163,183,154,165,0,164,164,158],
[165,190,174,169,165,176,0,179,174],
[165,172,169,176,170,176,161,0,168],
[172,190,174,184,168,182,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,154,153,186,169,169,167,145],
[169,0,174,169,181,162,163,189,162],
[186,166,0,179,186,197,189,198,181],
[187,171,161,0,173,179,174,167,177],
[154,159,154,167,0,180,152,178,160],
[171,178,143,161,160,0,173,184,162],
[171,177,151,166,188,167,0,186,156],
[173,151,142,173,162,156,154,0,155],
[195,178,159,163,180,178,184,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,177,170,179,176,179,173],
[160,0,196,153,153,163,161,154,190],
[165,144,0,145,152,156,151,177,168],
[163,187,195,0,167,180,177,172,178],
[170,187,188,173,0,198,165,175,183],
[161,177,184,160,142,0,170,166,179],
[164,179,189,163,175,170,0,188,172],
[161,186,163,168,165,174,152,0,188],
[167,150,172,162,157,161,168,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,173,171,166,171,178,140,169],
[198,0,169,186,184,190,195,183,193],
[167,171,0,175,172,183,178,159,170],
[169,154,165,0,149,154,170,150,169],
[174,156,168,191,0,178,167,166,168],
[169,150,157,186,162,0,171,163,175],
[162,145,162,170,173,169,0,153,161],
[200,157,181,190,174,177,187,0,181],
[171,147,170,171,172,165,179,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,217,165,176,182,143,131,159],
[191,0,179,166,187,200,131,141,131],
[123,161,0,128,155,159,105,120,130],
[175,174,212,0,181,173,153,191,132],
[164,153,185,159,0,173,145,173,153],
[158,140,181,167,167,0,172,158,140],
[197,209,235,187,195,168,0,186,177],
[209,199,220,149,167,182,154,0,133],
[181,209,210,208,187,200,163,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,199,185,189,179,166,171,189],
[159,0,185,171,162,178,167,170,182],
[141,155,0,173,171,160,157,168,170],
[155,169,167,0,168,160,172,157,153],
[151,178,169,172,0,152,157,162,155],
[161,162,180,180,188,0,167,177,195],
[174,173,183,168,183,173,0,161,171],
[169,170,172,183,178,163,179,0,171],
[151,158,170,187,185,145,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,183,166,171,158,160,172,162],
[176,0,170,164,163,148,158,165,170],
[157,170,0,169,163,172,166,162,175],
[174,176,171,0,165,153,181,176,178],
[169,177,177,175,0,161,176,171,166],
[182,192,168,187,179,0,165,189,184],
[180,182,174,159,164,175,0,173,150],
[168,175,178,164,169,151,167,0,160],
[178,170,165,162,174,156,190,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,183,156,174,181,149,143,184],
[185,0,173,171,165,172,184,175,177],
[157,167,0,155,154,164,157,153,174],
[184,169,185,0,180,167,178,173,200],
[166,175,186,160,0,167,176,179,180],
[159,168,176,173,173,0,170,174,206],
[191,156,183,162,164,170,0,180,190],
[197,165,187,167,161,166,160,0,193],
[156,163,166,140,160,134,150,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,171,226,197,226,115,199,172],
[198,0,199,226,227,169,228,256,226],
[169,141,0,197,225,167,113,142,143],
[114,114,143,0,169,170,114,171,114],
[143,113,115,171,0,142,114,170,143],
[114,171,173,170,198,0,114,227,172],
[225,112,227,226,226,226,0,199,171],
[141,84,198,169,170,113,141,0,140],
[168,114,197,226,197,168,169,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,186,159,147,153,180,156,171],
[202,0,171,162,161,198,194,182,186],
[154,169,0,165,148,170,181,169,188],
[181,178,175,0,145,171,183,168,188],
[193,179,192,195,0,185,210,166,212],
[187,142,170,169,155,0,181,172,176],
[160,146,159,157,130,159,0,153,175],
[184,158,171,172,174,168,187,0,208],
[169,154,152,152,128,164,165,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,200,156,180,161,175,185,201],
[152,0,143,142,162,141,139,172,172],
[140,197,0,172,196,173,162,167,170],
[184,198,168,0,180,160,171,167,196],
[160,178,144,160,0,157,143,162,191],
[179,199,167,180,183,0,172,172,196],
[165,201,178,169,197,168,0,157,192],
[155,168,173,173,178,168,183,0,194],
[139,168,170,144,149,144,148,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,194,161,163,175,169,174,201],
[189,0,217,195,165,200,185,189,198],
[146,123,0,150,140,176,142,171,171],
[179,145,190,0,144,190,155,177,199],
[177,175,200,196,0,184,168,187,188],
[165,140,164,150,156,0,134,160,182],
[171,155,198,185,172,206,0,181,203],
[166,151,169,163,153,180,159,0,179],
[139,142,169,141,152,158,137,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,157,164,154,161,159,170,153],
[189,0,186,164,175,181,164,190,167],
[183,154,0,159,161,163,165,174,166],
[176,176,181,0,164,176,168,181,180],
[186,165,179,176,0,173,181,180,178],
[179,159,177,164,167,0,175,179,188],
[181,176,175,172,159,165,0,184,170],
[170,150,166,159,160,161,156,0,165],
[187,173,174,160,162,152,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,135,207,212,204,133,187,171],
[154,0,159,214,162,169,169,158,184],
[205,181,0,178,206,165,189,204,179],
[133,126,162,0,200,137,121,187,187],
[128,178,134,140,0,156,118,140,165],
[136,171,175,203,184,0,160,183,212],
[207,171,151,219,222,180,0,245,170],
[153,182,136,153,200,157,95,0,182],
[169,156,161,153,175,128,170,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,191,163,167,176,163,171,162],
[166,0,187,175,165,172,174,170,165],
[149,153,0,165,154,160,160,158,159],
[177,165,175,0,160,171,162,161,163],
[173,175,186,180,0,166,170,162,172],
[164,168,180,169,174,0,170,163,168],
[177,166,180,178,170,170,0,165,171],
[169,170,182,179,178,177,175,0,171],
[178,175,181,177,168,172,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,169,169,84,169,84,169],
[171,0,169,85,169,86,171,0,171],
[171,171,0,171,84,86,171,86,256],
[171,255,169,0,169,171,171,171,171],
[171,171,256,171,0,86,171,86,256],
[256,254,254,169,254,0,340,0,340],
[171,169,169,169,169,0,0,0,169],
[256,340,254,169,254,340,340,0,340],
[171,169,84,169,84,0,171,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,186,174,171,185,167,177,174],
[164,0,180,154,152,139,161,166,142],
[154,160,0,168,172,156,149,179,149],
[166,186,172,0,172,184,175,193,161],
[169,188,168,168,0,183,190,204,179],
[155,201,184,156,157,0,170,188,157],
[173,179,191,165,150,170,0,181,188],
[163,174,161,147,136,152,159,0,156],
[166,198,191,179,161,183,152,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,186,167,170,185,178,179],
[164,0,175,176,176,177,178,175,177],
[159,165,0,178,177,188,188,171,181],
[154,164,162,0,161,166,181,161,157],
[173,164,163,179,0,165,186,169,170],
[170,163,152,174,175,0,172,181,172],
[155,162,152,159,154,168,0,150,163],
[162,165,169,179,171,159,190,0,170],
[161,163,159,183,170,168,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,200,170,177,190,177,196,180],
[145,0,165,157,153,165,163,173,176],
[140,175,0,161,152,166,152,159,152],
[170,183,179,0,172,177,152,166,176],
[163,187,188,168,0,170,155,174,178],
[150,175,174,163,170,0,147,165,181],
[163,177,188,188,185,193,0,181,190],
[144,167,181,174,166,175,159,0,163],
[160,164,188,164,162,159,150,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,155,170,162,162,158,166,192],
[145,0,121,170,121,187,120,180,155],
[185,219,0,178,183,215,163,172,205],
[170,170,162,0,156,190,166,179,177],
[178,219,157,184,0,187,156,186,198],
[178,153,125,150,153,0,127,159,167],
[182,220,177,174,184,213,0,168,219],
[174,160,168,161,154,181,172,0,187],
[148,185,135,163,142,173,121,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,168,165,178,179,175,182],
[169,0,176,171,159,170,168,176,154],
[156,164,0,164,154,165,167,174,156],
[172,169,176,0,162,160,172,179,155],
[175,181,186,178,0,187,168,183,170],
[162,170,175,180,153,0,171,173,155],
[161,172,173,168,172,169,0,180,169],
[165,164,166,161,157,167,160,0,158],
[158,186,184,185,170,185,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,160,172,166,175,171,194,176],
[154,0,172,173,166,171,170,193,172],
[180,168,0,174,178,179,183,181,175],
[168,167,166,0,177,161,167,185,171],
[174,174,162,163,0,165,170,181,180],
[165,169,161,179,175,0,168,192,166],
[169,170,157,173,170,172,0,165,166],
[146,147,159,155,159,148,175,0,183],
[164,168,165,169,160,174,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,189,155,182,188,184,168],
[182,0,174,169,176,168,186,190,169],
[173,166,0,192,162,174,182,188,172],
[151,171,148,0,145,154,180,173,174],
[185,164,178,195,0,187,199,189,194],
[158,172,166,186,153,0,184,179,158],
[152,154,158,160,141,156,0,170,151],
[156,150,152,167,151,161,170,0,170],
[172,171,168,166,146,182,189,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,193,184,197,172,171,190,190],
[172,0,188,173,202,163,188,192,177],
[147,152,0,162,191,164,159,164,163],
[156,167,178,0,189,162,174,174,170],
[143,138,149,151,0,136,140,153,150],
[168,177,176,178,204,0,163,194,194],
[169,152,181,166,200,177,0,189,185],
[150,148,176,166,187,146,151,0,169],
[150,163,177,170,190,146,155,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,153,171,183,152,197,177,177],
[161,0,163,169,165,151,181,156,158],
[187,177,0,165,175,199,203,159,164],
[169,171,175,0,172,168,203,171,177],
[157,175,165,168,0,158,189,171,176],
[188,189,141,172,182,0,182,158,173],
[143,159,137,137,151,158,0,149,155],
[163,184,181,169,169,182,191,0,176],
[163,182,176,163,164,167,185,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,185,161,176,166,186,162,175],
[168,0,174,157,171,176,166,169,171],
[155,166,0,172,154,153,175,167,166],
[179,183,168,0,189,173,174,173,172],
[164,169,186,151,0,163,181,177,164],
[174,164,187,167,177,0,168,175,174],
[154,174,165,166,159,172,0,170,163],
[178,171,173,167,163,165,170,0,161],
[165,169,174,168,176,166,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,168,165,159,166,160,161,161],
[181,0,152,181,149,167,159,163,161],
[172,188,0,171,157,151,151,160,172],
[175,159,169,0,152,149,156,152,165],
[181,191,183,188,0,162,176,183,178],
[174,173,189,191,178,0,163,181,175],
[180,181,189,184,164,177,0,168,183],
[179,177,180,188,157,159,172,0,165],
[179,179,168,175,162,165,157,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,182,151,186,171,163,163,173],
[171,0,182,159,168,186,163,182,163],
[158,158,0,154,167,180,160,156,152],
[189,181,186,0,184,192,176,168,178],
[154,172,173,156,0,167,169,161,154],
[169,154,160,148,173,0,163,155,154],
[177,177,180,164,171,177,0,171,160],
[177,158,184,172,179,185,169,0,160],
[167,177,188,162,186,186,180,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,189,156,169,164,179,168,160],
[190,0,187,185,174,152,178,179,174],
[151,153,0,161,185,173,192,194,184],
[184,155,179,0,163,134,148,152,168],
[171,166,155,177,0,148,184,176,161],
[176,188,167,206,192,0,165,205,176],
[161,162,148,192,156,175,0,174,176],
[172,161,146,188,164,135,166,0,165],
[180,166,156,172,179,164,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,194,189,181,207,175,168],
[170,0,155,190,193,207,208,179,174],
[160,185,0,178,200,179,194,195,174],
[146,150,162,0,153,166,188,152,147],
[151,147,140,187,0,167,172,157,168],
[159,133,161,174,173,0,180,161,145],
[133,132,146,152,168,160,0,146,135],
[165,161,145,188,183,179,194,0,144],
[172,166,166,193,172,195,205,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,190,189,185,193,192,169,171],
[154,0,188,150,182,168,185,144,152],
[150,152,0,143,159,144,173,158,136],
[151,190,197,0,182,167,188,178,167],
[155,158,181,158,0,155,165,159,145],
[147,172,196,173,185,0,207,174,160],
[148,155,167,152,175,133,0,136,152],
[171,196,182,162,181,166,204,0,155],
[169,188,204,173,195,180,188,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,158,170,184,181,169,181,172],
[155,0,165,162,174,164,157,172,163],
[182,175,0,163,173,191,166,172,165],
[170,178,177,0,170,192,175,178,166],
[156,166,167,170,0,184,160,165,177],
[159,176,149,148,156,0,166,162,163],
[171,183,174,165,180,174,0,168,173],
[159,168,168,162,175,178,172,0,184],
[168,177,175,174,163,177,167,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,136,186,156,170,175,209,165],
[171,0,154,195,201,136,153,184,171],
[204,186,0,205,171,164,154,206,160],
[154,145,135,0,161,128,116,184,133],
[184,139,169,179,0,129,153,164,150],
[170,204,176,212,211,0,183,237,172],
[165,187,186,224,187,157,0,184,161],
[131,156,134,156,176,103,156,0,135],
[175,169,180,207,190,168,179,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,188,154,178,167,172,191],
[160,0,161,188,156,178,166,165,155],
[175,179,0,194,177,187,189,167,191],
[152,152,146,0,163,174,178,158,166],
[186,184,163,177,0,202,192,169,170],
[162,162,153,166,138,0,173,174,163],
[173,174,151,162,148,167,0,154,195],
[168,175,173,182,171,166,186,0,185],
[149,185,149,174,170,177,145,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,158,190,155,189,157,170,194],
[136,0,136,134,148,139,153,148,135],
[182,204,0,196,191,193,184,178,167],
[150,206,144,0,166,174,165,171,161],
[185,192,149,174,0,183,175,169,162],
[151,201,147,166,157,0,163,165,153],
[183,187,156,175,165,177,0,167,173],
[170,192,162,169,171,175,173,0,171],
[146,205,173,179,178,187,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,178,171,158,177,188,171],
[163,0,160,162,153,143,174,171,161],
[164,180,0,178,165,158,181,163,159],
[162,178,162,0,160,154,186,177,152],
[169,187,175,180,0,172,165,180,153],
[182,197,182,186,168,0,190,181,178],
[163,166,159,154,175,150,0,158,157],
[152,169,177,163,160,159,182,0,161],
[169,179,181,188,187,162,183,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,176,169,164,161,153,160,167],
[176,0,184,172,182,176,166,167,162],
[164,156,0,172,171,154,170,164,161],
[171,168,168,0,166,151,160,155,163],
[176,158,169,174,0,164,170,160,159],
[179,164,186,189,176,0,179,165,181],
[187,174,170,180,170,161,0,173,154],
[180,173,176,185,180,175,167,0,170],
[173,178,179,177,181,159,186,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,206,168,171,185,200,186,179],
[144,0,185,167,160,156,194,136,172],
[134,155,0,149,144,148,174,156,140],
[172,173,191,0,160,158,167,180,152],
[169,180,196,180,0,179,206,177,171],
[155,184,192,182,161,0,175,177,147],
[140,146,166,173,134,165,0,150,153],
[154,204,184,160,163,163,190,0,164],
[161,168,200,188,169,193,187,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,148,153,184,164,175,176],
[170,0,168,176,192,180,172,198,184],
[182,172,0,160,176,160,165,190,185],
[192,164,180,0,181,185,185,191,189],
[187,148,164,159,0,179,159,184,172],
[156,160,180,155,161,0,167,182,182],
[176,168,175,155,181,173,0,168,178],
[165,142,150,149,156,158,172,0,168],
[164,156,155,151,168,158,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,178,152,146,161,124,143,168],
[194,0,199,177,151,226,140,178,171],
[162,141,0,144,154,155,137,172,160],
[188,163,196,0,168,199,172,197,203],
[194,189,186,172,0,208,155,187,172],
[179,114,185,141,132,0,138,160,163],
[216,200,203,168,185,202,0,191,202],
[197,162,168,143,153,180,149,0,155],
[172,169,180,137,168,177,138,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,144,141,166,162,168,172],
[157,0,153,142,170,169,167,170,171],
[170,187,0,157,135,159,180,157,174],
[196,198,183,0,173,169,186,175,187],
[199,170,205,167,0,181,164,164,185],
[174,171,181,171,159,0,163,162,179],
[178,173,160,154,176,177,0,156,180],
[172,170,183,165,176,178,184,0,178],
[168,169,166,153,155,161,160,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,156,169,163,173,168,161,161],
[178,0,165,174,161,168,166,161,167],
[184,175,0,183,160,169,160,161,176],
[171,166,157,0,157,162,175,152,161],
[177,179,180,183,0,173,161,173,179],
[167,172,171,178,167,0,169,161,172],
[172,174,180,165,179,171,0,176,170],
[179,179,179,188,167,179,164,0,178],
[179,173,164,179,161,168,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,162,157,166,169,165,159,171],
[176,0,177,171,166,182,170,175,174],
[178,163,0,166,170,179,166,160,158],
[183,169,174,0,158,182,148,169,173],
[174,174,170,182,0,169,163,173,172],
[171,158,161,158,171,0,158,158,171],
[175,170,174,192,177,182,0,172,179],
[181,165,180,171,167,182,168,0,179],
[169,166,182,167,168,169,161,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,169,168,169,198,199,112,171],
[142,0,114,197,255,141,142,227,171],
[171,226,0,195,199,225,168,196,227],
[172,143,145,0,143,171,200,170,172],
[171,85,141,197,0,169,198,197,199],
[142,199,115,169,171,0,200,141,172],
[141,198,172,140,142,140,0,169,169],
[228,113,144,170,143,199,171,0,115],
[169,169,113,168,141,168,171,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,145,147,134,171,172,161,166],
[205,0,182,183,192,196,169,187,194],
[195,158,0,226,182,176,170,186,195],
[193,157,114,0,143,163,175,171,183],
[206,148,158,197,0,179,165,183,192],
[169,144,164,177,161,0,163,182,172],
[168,171,170,165,175,177,0,187,174],
[179,153,154,169,157,158,153,0,176],
[174,146,145,157,148,168,166,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,187,93,61,156,126,155,93],
[186,0,249,124,187,188,217,93,125],
[153,91,0,92,121,123,153,154,62],
[247,216,248,0,154,187,217,93,124],
[279,153,219,186,0,249,279,155,187],
[184,152,217,153,91,0,216,124,93],
[214,123,187,123,61,124,0,155,124],
[185,247,186,247,185,216,185,0,156],
[247,215,278,216,153,247,216,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,166,157,188,200,199,177,202],
[155,0,171,147,177,184,154,147,175],
[174,169,0,147,173,207,169,176,188],
[183,193,193,0,210,229,167,179,205],
[152,163,167,130,0,195,144,176,177],
[140,156,133,111,145,0,130,130,149],
[141,186,171,173,196,210,0,177,189],
[163,193,164,161,164,210,163,0,194],
[138,165,152,135,163,191,151,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,180,165,191,168,177,181,167],
[167,0,162,152,181,172,160,162,173],
[160,178,0,165,185,157,172,170,154],
[175,188,175,0,184,167,176,177,168],
[149,159,155,156,0,160,163,164,150],
[172,168,183,173,180,0,173,174,174],
[163,180,168,164,177,167,0,185,168],
[159,178,170,163,176,166,155,0,174],
[173,167,186,172,190,166,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,184,172,210,172,182,164,157],
[163,0,191,178,191,163,178,165,162],
[156,149,0,166,171,167,173,170,153],
[168,162,174,0,170,174,170,157,140],
[130,149,169,170,0,150,167,151,150],
[168,177,173,166,190,0,171,175,170],
[158,162,167,170,173,169,0,154,154],
[176,175,170,183,189,165,186,0,167],
[183,178,187,200,190,170,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,167,169,167,171,174,178],
[177,0,169,175,174,182,183,180,185],
[176,171,0,177,167,187,166,159,181],
[173,165,163,0,171,187,177,162,194],
[171,166,173,169,0,179,189,153,183],
[173,158,153,153,161,0,159,155,166],
[169,157,174,163,151,181,0,151,176],
[166,160,181,178,187,185,189,0,180],
[162,155,159,146,157,174,164,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,182,169,181,168,176,171],
[170,0,165,171,167,179,161,172,165],
[168,175,0,173,168,183,163,173,160],
[158,169,167,0,178,172,157,169,180],
[171,173,172,162,0,173,169,177,169],
[159,161,157,168,167,0,165,175,168],
[172,179,177,183,171,175,0,170,174],
[164,168,167,171,163,165,170,0,178],
[169,175,180,160,171,172,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,180,186,162,181,170,165,184],
[171,0,158,160,135,162,174,184,202],
[160,182,0,186,165,157,163,176,175],
[154,180,154,0,168,173,150,170,164],
[178,205,175,172,0,188,167,189,170],
[159,178,183,167,152,0,163,179,203],
[170,166,177,190,173,177,0,166,163],
[175,156,164,170,151,161,174,0,177],
[156,138,165,176,170,137,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,181,191,180,195,170,166,177],
[177,0,194,198,185,177,162,158,195],
[159,146,0,162,174,149,138,140,161],
[149,142,178,0,150,174,163,161,160],
[160,155,166,190,0,168,176,176,166],
[145,163,191,166,172,0,156,180,179],
[170,178,202,177,164,184,0,160,178],
[174,182,200,179,164,160,180,0,182],
[163,145,179,180,174,161,162,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,170,197,185,179,183,191],
[169,0,165,173,174,178,177,165,186],
[173,175,0,181,203,187,194,169,180],
[170,167,159,0,173,166,174,154,170],
[143,166,137,167,0,165,166,168,180],
[155,162,153,174,175,0,174,168,178],
[161,163,146,166,174,166,0,156,168],
[157,175,171,186,172,172,184,0,189],
[149,154,160,170,160,162,172,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,179,164,184,176,169,168],
[161,0,167,170,172,168,173,170,169],
[173,173,0,174,177,169,168,173,162],
[161,170,166,0,177,170,167,165,170],
[176,168,163,163,0,175,171,171,163],
[156,172,171,170,165,0,168,181,176],
[164,167,172,173,169,172,0,170,165],
[171,170,167,175,169,159,170,0,158],
[172,171,178,170,177,164,175,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,184,139,165,168,162,157],
[165,0,185,195,172,170,179,173,168],
[170,155,0,159,167,160,174,150,161],
[156,145,181,0,167,161,168,156,151],
[201,168,173,173,0,173,191,176,172],
[175,170,180,179,167,0,190,179,159],
[172,161,166,172,149,150,0,153,157],
[178,167,190,184,164,161,187,0,166],
[183,172,179,189,168,181,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,186,181,184,183,172,177,159],
[169,0,188,168,198,183,159,170,174],
[154,152,0,165,187,180,144,138,164],
[159,172,175,0,165,174,166,147,157],
[156,142,153,175,0,188,153,157,179],
[157,157,160,166,152,0,118,134,157],
[168,181,196,174,187,222,0,190,174],
[163,170,202,193,183,206,150,0,195],
[181,166,176,183,161,183,166,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,163,196,171,175,160,159,173],
[149,0,149,170,156,150,154,156,152],
[177,191,0,204,182,178,170,183,198],
[144,170,136,0,144,158,146,144,169],
[169,184,158,196,0,163,162,174,168],
[165,190,162,182,177,0,171,154,163],
[180,186,170,194,178,169,0,159,174],
[181,184,157,196,166,186,181,0,182],
[167,188,142,171,172,177,166,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,150,177,179,188,191,140,204],
[135,0,109,162,166,173,203,124,149],
[190,231,0,177,191,188,228,167,218],
[163,178,163,0,136,161,188,149,204],
[161,174,149,204,0,187,204,180,187],
[152,167,152,179,153,0,191,142,163],
[149,137,112,152,136,149,0,126,162],
[200,216,173,191,160,198,214,0,243],
[136,191,122,136,153,177,178,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,175,172,157,168,173,174],
[175,0,183,162,172,177,175,173,180],
[173,157,0,159,172,160,164,170,172],
[165,178,181,0,175,161,177,172,172],
[168,168,168,165,0,156,169,179,167],
[183,163,180,179,184,0,185,179,176],
[172,165,176,163,171,155,0,174,169],
[167,167,170,168,161,161,166,0,173],
[166,160,168,168,173,164,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,191,195,180,177,175,178],
[170,0,165,183,188,177,187,191,184],
[181,175,0,175,192,157,178,166,177],
[149,157,165,0,181,179,164,158,167],
[145,152,148,159,0,160,166,164,167],
[160,163,183,161,180,0,156,155,174],
[163,153,162,176,174,184,0,172,162],
[165,149,174,182,176,185,168,0,178],
[162,156,163,173,173,166,178,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,189,192,188,195,190,160,186],
[136,0,168,162,155,168,161,156,149],
[151,172,0,165,183,206,186,177,156],
[148,178,175,0,182,196,175,169,161],
[152,185,157,158,0,178,167,165,166],
[145,172,134,144,162,0,152,143,144],
[150,179,154,165,173,188,0,184,169],
[180,184,163,171,175,197,156,0,161],
[154,191,184,179,174,196,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,183,178,172,187,203,175,165],
[165,0,162,174,162,192,153,162,158],
[157,178,0,164,168,184,173,185,180],
[162,166,176,0,192,172,175,173,166],
[168,178,172,148,0,179,170,154,157],
[153,148,156,168,161,0,166,171,147],
[137,187,167,165,170,174,0,157,164],
[165,178,155,167,186,169,183,0,175],
[175,182,160,174,183,193,176,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,155,157,151,162,143,166,149],
[194,0,177,181,181,176,164,183,179],
[185,163,0,189,181,170,186,182,168],
[183,159,151,0,160,167,152,168,147],
[189,159,159,180,0,184,163,191,154],
[178,164,170,173,156,0,170,171,149],
[197,176,154,188,177,170,0,172,164],
[174,157,158,172,149,169,168,0,162],
[191,161,172,193,186,191,176,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,140,172,146,178,157,171,168],
[178,0,172,172,152,184,163,187,188],
[200,168,0,182,164,175,183,191,183],
[168,168,158,0,173,162,156,174,166],
[194,188,176,167,0,181,183,186,193],
[162,156,165,178,159,0,175,180,181],
[183,177,157,184,157,165,0,163,192],
[169,153,149,166,154,160,177,0,166],
[172,152,157,174,147,159,148,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,168,169,177,165,179,179],
[169,0,167,166,172,179,156,165,176],
[171,173,0,182,177,178,168,174,175],
[172,174,158,0,160,175,161,168,178],
[171,168,163,180,0,174,172,166,183],
[163,161,162,165,166,0,163,166,165],
[175,184,172,179,168,177,0,167,176],
[161,175,166,172,174,174,173,0,175],
[161,164,165,162,157,175,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,157,179,153,163,160,168,157],
[165,0,166,177,155,160,148,156,167],
[183,174,0,192,175,173,168,167,167],
[161,163,148,0,133,150,138,146,148],
[187,185,165,207,0,164,160,169,177],
[177,180,167,190,176,0,176,169,166],
[180,192,172,202,180,164,0,174,178],
[172,184,173,194,171,171,166,0,174],
[183,173,173,192,163,174,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,175,169,188,159,178,180,172],
[164,0,176,164,178,164,169,174,170],
[165,164,0,173,174,171,174,158,167],
[171,176,167,0,178,159,160,166,182],
[152,162,166,162,0,155,169,160,171],
[181,176,169,181,185,0,173,176,176],
[162,171,166,180,171,167,0,170,162],
[160,166,182,174,180,164,170,0,171],
[168,170,173,158,169,164,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,179,194,203,193,161,183,181],
[134,0,170,170,153,167,170,180,136],
[161,170,0,179,159,177,147,180,176],
[146,170,161,0,152,162,129,157,146],
[137,187,181,188,0,179,160,176,167],
[147,173,163,178,161,0,140,176,152],
[179,170,193,211,180,200,0,180,192],
[157,160,160,183,164,164,160,0,151],
[159,204,164,194,173,188,148,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,174,150,176,156,180,153,173],
[156,0,149,166,142,186,161,147,154],
[166,191,0,177,173,173,178,159,181],
[190,174,163,0,167,166,179,169,181],
[164,198,167,173,0,187,179,169,163],
[184,154,167,174,153,0,165,166,173],
[160,179,162,161,161,175,0,172,159],
[187,193,181,171,171,174,168,0,173],
[167,186,159,159,177,167,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,165,165,141,167,163,154],
[170,0,190,184,164,169,160,154,166],
[166,150,0,167,145,154,152,163,168],
[175,156,173,0,140,145,143,160,149],
[175,176,195,200,0,157,162,170,179],
[199,171,186,195,183,0,177,188,170],
[173,180,188,197,178,163,0,160,159],
[177,186,177,180,170,152,180,0,163],
[186,174,172,191,161,170,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,160,157,160,157,146,163,155],
[180,0,155,166,155,163,170,176,164],
[180,185,0,179,167,169,160,170,153],
[183,174,161,0,171,176,157,179,151],
[180,185,173,169,0,179,155,175,167],
[183,177,171,164,161,0,160,172,152],
[194,170,180,183,185,180,0,181,173],
[177,164,170,161,165,168,159,0,167],
[185,176,187,189,173,188,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,175,178,171,181,153,180,171],
[164,0,162,159,160,168,161,158,168],
[165,178,0,178,166,202,169,178,165],
[162,181,162,0,168,193,149,174,182],
[169,180,174,172,0,189,178,185,180],
[159,172,138,147,151,0,155,157,158],
[187,179,171,191,162,185,0,184,176],
[160,182,162,166,155,183,156,0,160],
[169,172,175,158,160,182,164,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,171,184,158,163,182,166],
[163,0,196,143,183,188,175,171,172],
[166,144,0,153,155,166,175,178,172],
[169,197,187,0,182,187,187,194,178],
[156,157,185,158,0,161,149,181,160],
[182,152,174,153,179,0,166,176,167],
[177,165,165,153,191,174,0,185,185],
[158,169,162,146,159,164,155,0,149],
[174,168,168,162,180,173,155,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,187,161,173,182,187,165,171],
[150,0,171,166,170,154,168,173,162],
[153,169,0,166,159,169,188,168,173],
[179,174,174,0,188,186,175,185,162],
[167,170,181,152,0,186,178,183,165],
[158,186,171,154,154,0,172,150,198],
[153,172,152,165,162,168,0,181,158],
[175,167,172,155,157,190,159,0,172],
[169,178,167,178,175,142,182,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,160,168,175,192,195,197],
[169,0,187,168,180,174,154,187,191],
[171,153,0,150,178,170,191,195,182],
[180,172,190,0,187,149,171,179,179],
[172,160,162,153,0,170,197,178,192],
[165,166,170,191,170,0,185,179,196],
[148,186,149,169,143,155,0,181,174],
[145,153,145,161,162,161,159,0,157],
[143,149,158,161,148,144,166,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,166,189,171,152,134,179,140],
[149,0,183,180,191,184,139,174,136],
[174,157,0,196,186,182,162,184,170],
[151,160,144,0,158,170,162,173,169],
[169,149,154,182,0,172,156,183,138],
[188,156,158,170,168,0,181,197,144],
[206,201,178,178,184,159,0,184,178],
[161,166,156,167,157,143,156,0,142],
[200,204,170,171,202,196,162,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,164,167,179,170,144,176,154],
[152,0,181,166,173,179,163,188,174],
[176,159,0,166,171,168,159,156,164],
[173,174,174,0,192,168,159,175,161],
[161,167,169,148,0,147,158,158,160],
[170,161,172,172,193,0,155,187,145],
[196,177,181,181,182,185,0,176,160],
[164,152,184,165,182,153,164,0,169],
[186,166,176,179,180,195,180,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,207,159,178,168,189,183,163],
[161,0,194,156,181,172,185,174,167],
[133,146,0,126,127,110,115,153,155],
[181,184,214,0,170,143,165,191,173],
[162,159,213,170,0,136,176,171,186],
[172,168,230,197,204,0,192,176,198],
[151,155,225,175,164,148,0,175,178],
[157,166,187,149,169,164,165,0,176],
[177,173,185,167,154,142,162,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,176,169,162,176,170,166],
[170,0,173,181,157,180,159,155,168],
[171,167,0,167,161,184,169,157,167],
[164,159,173,0,157,174,171,152,168],
[171,183,179,183,0,189,166,173,172],
[178,160,156,166,151,0,165,155,149],
[164,181,171,169,174,175,0,161,166],
[170,185,183,188,167,185,179,0,166],
[174,172,173,172,168,191,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,179,135,165,195,163,206,150],
[187,0,154,175,194,159,194,208,159],
[161,186,0,157,178,183,188,193,163],
[205,165,183,0,162,153,196,224,174],
[175,146,162,178,0,182,159,187,134],
[145,181,157,187,158,0,162,177,154],
[177,146,152,144,181,178,0,198,176],
[134,132,147,116,153,163,142,0,127],
[190,181,177,166,206,186,164,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,172,188,174,168,179,174,178],
[160,0,178,181,176,159,164,168,164],
[168,162,0,167,159,173,159,163,174],
[152,159,173,0,159,164,148,158,162],
[166,164,181,181,0,184,164,180,179],
[172,181,167,176,156,0,176,174,186],
[161,176,181,192,176,164,0,169,172],
[166,172,177,182,160,166,171,0,174],
[162,176,166,178,161,154,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,187,185,180,163,175,197],
[165,0,166,175,170,168,155,155,173],
[159,174,0,184,194,190,162,163,170],
[153,165,156,0,163,157,149,159,178],
[155,170,146,177,0,184,161,170,171],
[160,172,150,183,156,0,164,153,159],
[177,185,178,191,179,176,0,161,190],
[165,185,177,181,170,187,179,0,178],
[143,167,170,162,169,181,150,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,177,179,178,183,172,162],
[164,0,168,168,154,161,179,159,166],
[175,172,0,171,167,173,177,169,179],
[163,172,169,0,175,189,180,176,180],
[161,186,173,165,0,173,168,170,158],
[162,179,167,151,167,0,192,156,163],
[157,161,163,160,172,148,0,154,165],
[168,181,171,164,170,184,186,0,171],
[178,174,161,160,182,177,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,172,176,169,180,168,173],
[159,0,167,171,169,168,158,154,170],
[159,173,0,170,181,165,168,171,171],
[168,169,170,0,171,173,171,165,173],
[164,171,159,169,0,162,159,157,165],
[171,172,175,167,178,0,171,158,177],
[160,182,172,169,181,169,0,165,166],
[172,186,169,175,183,182,175,0,172],
[167,170,169,167,175,163,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,107,201,151,204,221,146,155],
[95,0,94,122,124,137,111,107,140],
[233,246,0,230,233,192,222,185,169],
[139,218,110,0,138,195,167,124,182],
[189,216,107,202,0,163,181,147,151],
[136,203,148,145,177,0,176,158,180],
[119,229,118,173,159,164,0,119,138],
[194,233,155,216,193,182,221,0,169],
[185,200,171,158,189,160,202,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,176,173,171,177,169,169],
[163,0,173,172,172,164,170,168,153],
[162,167,0,181,189,164,179,169,177],
[164,168,159,0,169,163,159,149,165],
[167,168,151,171,0,152,159,151,164],
[169,176,176,177,188,0,184,178,170],
[163,170,161,181,181,156,0,162,157],
[171,172,171,191,189,162,178,0,175],
[171,187,163,175,176,170,183,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,163,174,166,153,161,180,178],
[152,0,160,164,165,153,157,166,149],
[177,180,0,178,163,158,171,187,173],
[166,176,162,0,175,139,149,175,170],
[174,175,177,165,0,175,177,167,183],
[187,187,182,201,165,0,197,196,191],
[179,183,169,191,163,143,0,183,192],
[160,174,153,165,173,144,157,0,153],
[162,191,167,170,157,149,148,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,164,160,159,151,179,170],
[166,0,172,173,159,155,160,184,176],
[177,168,0,166,158,154,170,177,188],
[176,167,174,0,162,167,166,167,187],
[180,181,182,178,0,160,162,181,178],
[181,185,186,173,180,0,169,183,186],
[189,180,170,174,178,171,0,170,177],
[161,156,163,173,159,157,170,0,170],
[170,164,152,153,162,154,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,165,148,183,157,168,172],
[175,0,139,166,150,166,162,164,160],
[166,201,0,167,151,166,162,171,153],
[175,174,173,0,169,166,157,175,153],
[192,190,189,171,0,173,155,160,177],
[157,174,174,174,167,0,162,171,156],
[183,178,178,183,185,178,0,186,168],
[172,176,169,165,180,169,154,0,184],
[168,180,187,187,163,184,172,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,170,179,199,178,180,160,177],
[177,0,166,176,202,179,167,179,182],
[170,174,0,184,191,176,165,167,173],
[161,164,156,0,185,168,156,165,171],
[141,138,149,155,0,152,149,149,164],
[162,161,164,172,188,0,177,176,177],
[160,173,175,184,191,163,0,172,195],
[180,161,173,175,191,164,168,0,172],
[163,158,167,169,176,163,145,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,163,167,157,171,153,176,191],
[188,0,175,178,192,201,165,186,216],
[177,165,0,153,173,206,155,178,188],
[173,162,187,0,192,211,181,195,195],
[183,148,167,148,0,181,136,176,166],
[169,139,134,129,159,0,119,150,177],
[187,175,185,159,204,221,0,177,195],
[164,154,162,145,164,190,163,0,185],
[149,124,152,145,174,163,145,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,178,174,160,166,167,159,181],
[170,0,164,170,176,174,170,178,177],
[162,176,0,174,164,177,170,169,178],
[166,170,166,0,174,171,170,165,168],
[180,164,176,166,0,171,173,179,173],
[174,166,163,169,169,0,151,171,178],
[173,170,170,170,167,189,0,176,186],
[181,162,171,175,161,169,164,0,172],
[159,163,162,172,167,162,154,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,178,182,180,169,173,169],
[170,0,167,170,178,185,168,168,173],
[169,173,0,176,185,182,179,162,172],
[162,170,164,0,167,175,167,157,174],
[158,162,155,173,0,170,174,166,168],
[160,155,158,165,170,0,164,152,165],
[171,172,161,173,166,176,0,169,173],
[167,172,178,183,174,188,171,0,176],
[171,167,168,166,172,175,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,172,176,172,178,179,167,188],
[161,0,160,158,145,149,175,167,161],
[168,180,0,168,176,158,168,177,188],
[164,182,172,0,170,162,193,167,159],
[168,195,164,170,0,165,176,167,194],
[162,191,182,178,175,0,180,170,180],
[161,165,172,147,164,160,0,173,166],
[173,173,163,173,173,170,167,0,173],
[152,179,152,181,146,160,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,174,168,170,170,176,164,161],
[184,0,189,185,174,162,177,162,151],
[166,151,0,177,165,165,159,155,156],
[172,155,163,0,179,162,176,166,160],
[170,166,175,161,0,153,166,157,159],
[170,178,175,178,187,0,184,165,170],
[164,163,181,164,174,156,0,168,161],
[176,178,185,174,183,175,172,0,159],
[179,189,184,180,181,170,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,176,184,164,151,172,165],
[169,0,173,175,180,168,172,173,150],
[177,167,0,169,195,186,168,175,181],
[164,165,171,0,175,166,165,174,179],
[156,160,145,165,0,164,150,154,157],
[176,172,154,174,176,0,161,172,170],
[189,168,172,175,190,179,0,168,183],
[168,167,165,166,186,168,172,0,171],
[175,190,159,161,183,170,157,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,180,154,194,174,152,187,199],
[148,0,176,171,186,173,176,156,191],
[160,164,0,156,176,156,146,178,185],
[186,169,184,0,200,171,184,182,217],
[146,154,164,140,0,130,133,161,159],
[166,167,184,169,210,0,149,147,173],
[188,164,194,156,207,191,0,186,164],
[153,184,162,158,179,193,154,0,169],
[141,149,155,123,181,167,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,162,152,154,148,167,179,163],
[159,0,154,159,158,145,165,174,151],
[178,186,0,169,159,175,171,183,174],
[188,181,171,0,179,169,175,187,173],
[186,182,181,161,0,174,172,196,174],
[192,195,165,171,166,0,182,185,179],
[173,175,169,165,168,158,0,186,176],
[161,166,157,153,144,155,154,0,165],
[177,189,166,167,166,161,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,162,189,168,200,190,168],
[170,0,157,163,185,170,185,179,174],
[175,183,0,170,193,176,190,185,200],
[178,177,170,0,183,171,193,193,177],
[151,155,147,157,0,149,174,157,162],
[172,170,164,169,191,0,184,173,173],
[140,155,150,147,166,156,0,160,145],
[150,161,155,147,183,167,180,0,173],
[172,166,140,163,178,167,195,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,149,163,163,163,174,196,180],
[177,0,187,174,170,180,194,187,187],
[191,153,0,160,198,174,173,185,176],
[177,166,180,0,165,187,179,182,196],
[177,170,142,175,0,170,175,180,181],
[177,160,166,153,170,0,197,182,181],
[166,146,167,161,165,143,0,176,166],
[144,153,155,158,160,158,164,0,170],
[160,153,164,144,159,159,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,220,181,157,159,187,178,187],
[177,0,178,178,149,152,170,146,194],
[120,162,0,159,148,154,156,115,177],
[159,162,181,0,127,124,159,125,178],
[183,191,192,213,0,164,187,186,192],
[181,188,186,216,176,0,204,160,195],
[153,170,184,181,153,136,0,146,203],
[162,194,225,215,154,180,194,0,193],
[153,146,163,162,148,145,137,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,177,171,165,164,175,155,167],
[177,0,174,171,156,162,158,162,166],
[163,166,0,158,162,155,158,161,157],
[169,169,182,0,153,156,169,156,162],
[175,184,178,187,0,165,176,164,166],
[176,178,185,184,175,0,170,169,176],
[165,182,182,171,164,170,0,159,163],
[185,178,179,184,176,171,181,0,170],
[173,174,183,178,174,164,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,191,172,167,184,184,199,183],
[164,0,183,190,172,176,168,183,174],
[149,157,0,151,141,141,151,156,132],
[168,150,189,0,180,175,180,185,178],
[173,168,199,160,0,192,179,192,169],
[156,164,199,165,148,0,151,176,153],
[156,172,189,160,161,189,0,180,163],
[141,157,184,155,148,164,160,0,178],
[157,166,208,162,171,187,177,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,176,173,189,166,154,152],
[171,0,180,188,151,197,166,163,154],
[166,160,0,183,159,178,163,151,162],
[164,152,157,0,161,183,167,157,150],
[167,189,181,179,0,186,175,172,168],
[151,143,162,157,154,0,170,153,142],
[174,174,177,173,165,170,0,172,161],
[186,177,189,183,168,187,168,0,178],
[188,186,178,190,172,198,179,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,173,160,171,169,177,173,191],
[148,0,149,152,149,154,154,161,179],
[167,191,0,152,153,171,147,171,195],
[180,188,188,0,166,174,169,187,195],
[169,191,187,174,0,181,171,178,180],
[171,186,169,166,159,0,160,171,181],
[163,186,193,171,169,180,0,182,189],
[167,179,169,153,162,169,158,0,172],
[149,161,145,145,160,159,151,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,171,170,234,147,195,147,147],
[149,0,189,193,209,164,234,123,213],
[169,151,0,235,192,208,192,168,191],
[170,147,105,0,167,144,129,146,145],
[106,131,148,173,0,147,131,103,173],
[193,176,132,196,193,0,155,150,176],
[145,106,148,211,209,185,0,146,146],
[193,217,172,194,237,190,194,0,152],
[193,127,149,195,167,164,194,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,170,175,161,168,165,162,157],
[185,0,174,180,170,183,173,174,178],
[170,166,0,177,166,164,158,164,173],
[165,160,163,0,154,163,176,159,154],
[179,170,174,186,0,173,165,181,166],
[172,157,176,177,167,0,152,163,156],
[175,167,182,164,175,188,0,160,172],
[178,166,176,181,159,177,180,0,183],
[183,162,167,186,174,184,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,177,161,175,180,177,141,150],
[156,0,153,160,133,182,168,137,151],
[163,187,0,164,171,186,187,165,151],
[179,180,176,0,147,184,182,155,153],
[165,207,169,193,0,198,184,163,172],
[160,158,154,156,142,0,166,140,143],
[163,172,153,158,156,174,0,134,140],
[199,203,175,185,177,200,206,0,151],
[190,189,189,187,168,197,200,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,160,142,150,154,158,140,136],
[179,0,203,164,167,206,146,188,172],
[180,137,0,168,160,166,166,169,137],
[198,176,172,0,157,165,173,174,152],
[190,173,180,183,0,186,186,166,161],
[186,134,174,175,154,0,172,171,170],
[182,194,174,167,154,168,0,134,159],
[200,152,171,166,174,169,206,0,158],
[204,168,203,188,179,170,181,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,158,169,142,145,166,157,166],
[172,0,166,170,181,171,165,172,196],
[182,174,0,169,165,165,183,151,179],
[171,170,171,0,167,132,162,156,170],
[198,159,175,173,0,183,164,175,191],
[195,169,175,208,157,0,170,153,196],
[174,175,157,178,176,170,0,179,176],
[183,168,189,184,165,187,161,0,188],
[174,144,161,170,149,144,164,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,160,165,154,155,150,150,137],
[203,0,186,194,178,186,184,188,156],
[180,154,0,167,160,161,156,154,150],
[175,146,173,0,170,174,167,167,159],
[186,162,180,170,0,184,157,161,158],
[185,154,179,166,156,0,163,168,162],
[190,156,184,173,183,177,0,171,148],
[190,152,186,173,179,172,169,0,173],
[203,184,190,181,182,178,192,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,161,163,178,178,167,166],
[173,0,141,176,153,159,158,163,160],
[184,199,0,182,160,191,191,181,170],
[179,164,158,0,174,163,165,171,159],
[177,187,180,166,0,171,173,192,173],
[162,181,149,177,169,0,175,158,166],
[162,182,149,175,167,165,0,174,174],
[173,177,159,169,148,182,166,0,180],
[174,180,170,181,167,174,166,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,164,172,188,174,169,188,160],
[168,0,176,181,173,175,170,187,164],
[176,164,0,182,183,181,174,182,159],
[168,159,158,0,164,185,158,186,152],
[152,167,157,176,0,170,163,169,146],
[166,165,159,155,170,0,170,162,159],
[171,170,166,182,177,170,0,184,174],
[152,153,158,154,171,178,156,0,148],
[180,176,181,188,194,181,166,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,173,178,177,179,161,184,174],
[144,0,159,165,165,167,138,190,165],
[167,181,0,178,169,185,157,183,169],
[162,175,162,0,179,164,170,184,155],
[163,175,171,161,0,181,163,185,163],
[161,173,155,176,159,0,146,184,167],
[179,202,183,170,177,194,0,187,174],
[156,150,157,156,155,156,153,0,140],
[166,175,171,185,177,173,166,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,188,164,178,175,149,200,154],
[163,0,196,174,205,172,205,211,180],
[152,144,0,141,176,153,153,167,143],
[176,166,199,0,187,189,192,200,187],
[162,135,164,153,0,158,175,152,177],
[165,168,187,151,182,0,146,193,146],
[191,135,187,148,165,194,0,171,161],
[140,129,173,140,188,147,169,0,142],
[186,160,197,153,163,194,179,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,183,182,157,166,176,173,198],
[179,0,171,192,183,170,187,167,190],
[157,169,0,173,156,158,160,164,194],
[158,148,167,0,161,165,162,168,182],
[183,157,184,179,0,167,175,155,180],
[174,170,182,175,173,0,187,173,184],
[164,153,180,178,165,153,0,170,184],
[167,173,176,172,185,167,170,0,180],
[142,150,146,158,160,156,156,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,229,226,226,173,112,115],
[167,0,170,223,167,169,114,111,173],
[172,170,0,170,223,225,114,114,229],
[111,117,170,0,170,111,231,170,173],
[114,173,117,170,0,167,173,173,229],
[114,171,115,229,173,0,173,117,173],
[167,226,226,109,167,167,0,111,173],
[228,229,226,170,167,223,229,0,229],
[225,167,111,167,111,167,167,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,165,182,164,148,164,172],
[164,0,169,161,168,168,152,166,178],
[174,171,0,171,172,149,166,158,175],
[175,179,169,0,172,156,164,167,178],
[158,172,168,168,0,169,163,157,176],
[176,172,191,184,171,0,170,158,185],
[192,188,174,176,177,170,0,176,175],
[176,174,182,173,183,182,164,0,204],
[168,162,165,162,164,155,165,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,168,174,167,165,176,179,167],
[158,0,144,178,164,178,166,181,170],
[172,196,0,189,167,187,186,194,180],
[166,162,151,0,155,164,169,170,155],
[173,176,173,185,0,181,174,170,164],
[175,162,153,176,159,0,173,182,156],
[164,174,154,171,166,167,0,171,155],
[161,159,146,170,170,158,169,0,148],
[173,170,160,185,176,184,185,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,148,161,154,161,151,159,133],
[176,0,160,140,154,157,179,158,173],
[192,180,0,171,186,180,169,173,175],
[179,200,169,0,175,179,197,169,169],
[186,186,154,165,0,160,173,166,167],
[179,183,160,161,180,0,187,165,160],
[189,161,171,143,167,153,0,164,158],
[181,182,167,171,174,175,176,0,168],
[207,167,165,171,173,180,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,184,192,185,176,188,175,207],
[176,0,178,198,184,165,199,172,188],
[156,162,0,175,173,160,170,162,170],
[148,142,165,0,169,142,168,156,158],
[155,156,167,171,0,155,174,169,182],
[164,175,180,198,185,0,177,167,173],
[152,141,170,172,166,163,0,155,163],
[165,168,178,184,171,173,185,0,190],
[133,152,170,182,158,167,177,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,171,178,176,193,183,167],
[170,0,198,161,163,170,180,166,180],
[151,142,0,143,145,155,164,153,164],
[169,179,197,0,171,177,186,186,183],
[162,177,195,169,0,178,179,173,165],
[164,170,185,163,162,0,171,166,172],
[147,160,176,154,161,169,0,158,174],
[157,174,187,154,167,174,182,0,176],
[173,160,176,157,175,168,166,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,147,156,158,171,159,176,150],
[188,0,180,181,175,189,187,193,166],
[193,160,0,188,188,176,181,192,182],
[184,159,152,0,174,167,186,178,168],
[182,165,152,166,0,173,174,177,163],
[169,151,164,173,167,0,176,181,160],
[181,153,159,154,166,164,0,164,159],
[164,147,148,162,163,159,176,0,163],
[190,174,158,172,177,180,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,214,177,163,169,160,172,178],
[179,0,196,182,155,163,182,156,164],
[126,144,0,163,149,125,149,139,145],
[163,158,177,0,169,169,166,147,167],
[177,185,191,171,0,165,199,144,172],
[171,177,215,171,175,0,195,158,208],
[180,158,191,174,141,145,0,168,169],
[168,184,201,193,196,182,172,0,189],
[162,176,195,173,168,132,171,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,182,161,170,174,152,183],
[177,0,185,188,177,169,172,176,159],
[174,155,0,185,164,173,184,153,164],
[158,152,155,0,169,163,165,151,156],
[179,163,176,171,0,181,169,166,173],
[170,171,167,177,159,0,171,156,168],
[166,168,156,175,171,169,0,159,169],
[188,164,187,189,174,184,181,0,181],
[157,181,176,184,167,172,171,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,164,156,168,179,176,160,161],
[137,0,156,135,151,158,144,161,144],
[176,184,0,163,180,164,163,178,169],
[184,205,177,0,189,182,180,181,164],
[172,189,160,151,0,173,174,164,161],
[161,182,176,158,167,0,160,155,155],
[164,196,177,160,166,180,0,173,162],
[180,179,162,159,176,185,167,0,170],
[179,196,171,176,179,185,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,183,176,189,201,187,170,203],
[143,0,146,132,177,163,147,177,208],
[157,194,0,186,201,217,180,209,208],
[164,208,154,0,173,188,200,205,192],
[151,163,139,167,0,177,189,172,186],
[139,177,123,152,163,0,149,157,141],
[153,193,160,140,151,191,0,143,188],
[170,163,131,135,168,183,197,0,187],
[137,132,132,148,154,199,152,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,183,158,174,172,191,148,170],
[175,0,159,169,186,151,193,158,179],
[157,181,0,148,171,141,176,149,158],
[182,171,192,0,183,164,212,154,191],
[166,154,169,157,0,158,196,167,162],
[168,189,199,176,182,0,213,174,173],
[149,147,164,128,144,127,0,136,148],
[192,182,191,186,173,166,204,0,172],
[170,161,182,149,178,167,192,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,175,180,171,178,191,146,157],
[189,0,186,187,165,184,187,169,192],
[165,154,0,152,164,165,181,158,161],
[160,153,188,0,177,177,203,180,178],
[169,175,176,163,0,167,182,168,148],
[162,156,175,163,173,0,170,166,143],
[149,153,159,137,158,170,0,133,154],
[194,171,182,160,172,174,207,0,162],
[183,148,179,162,192,197,186,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,161,155,177,162,152,167,170],
[164,0,168,151,166,161,160,156,161],
[179,172,0,170,173,168,158,178,172],
[185,189,170,0,179,184,174,171,172],
[163,174,167,161,0,168,176,162,173],
[178,179,172,156,172,0,165,177,171],
[188,180,182,166,164,175,0,182,167],
[173,184,162,169,178,163,158,0,170],
[170,179,168,168,167,169,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,196,197,169,167,185,179,187],
[175,0,203,177,164,174,172,167,187],
[144,137,0,143,152,136,160,160,146],
[143,163,197,0,179,165,175,193,158],
[171,176,188,161,0,163,162,164,173],
[173,166,204,175,177,0,171,195,165],
[155,168,180,165,178,169,0,176,171],
[161,173,180,147,176,145,164,0,152],
[153,153,194,182,167,175,169,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,200,184,175,146,187,165,178],
[133,0,176,191,164,141,165,172,159],
[140,164,0,152,185,146,162,162,187],
[156,149,188,0,139,141,180,143,156],
[165,176,155,201,0,142,184,157,153],
[194,199,194,199,198,0,195,169,185],
[153,175,178,160,156,145,0,149,179],
[175,168,178,197,183,171,191,0,168],
[162,181,153,184,187,155,161,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,175,189,183,171,167,208,167],
[177,0,170,177,183,176,184,195,168],
[165,170,0,170,169,159,178,201,180],
[151,163,170,0,184,160,160,185,158],
[157,157,171,156,0,158,175,192,161],
[169,164,181,180,182,0,180,199,178],
[173,156,162,180,165,160,0,188,180],
[132,145,139,155,148,141,152,0,153],
[173,172,160,182,179,162,160,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,82,126,173,82,168,212,82],
[214,0,210,254,215,168,215,298,168],
[258,130,0,213,215,254,173,173,215],
[214,86,127,0,257,171,171,173,171],
[167,125,125,83,0,210,168,256,124],
[258,172,86,169,130,0,217,173,173],
[172,125,167,169,172,123,0,169,125],
[128,42,167,167,84,167,171,0,85],
[258,172,125,169,216,167,215,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,166,166,165,182,169,171],
[162,0,170,172,171,163,173,148,166],
[162,170,0,160,165,167,175,159,168],
[174,168,180,0,181,180,182,176,169],
[174,169,175,159,0,186,180,171,155],
[175,177,173,160,154,0,187,155,178],
[158,167,165,158,160,153,0,139,155],
[171,192,181,164,169,185,201,0,168],
[169,174,172,171,185,162,185,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,163,150,142,169,142,147,157],
[187,0,197,180,179,182,169,165,187],
[177,143,0,152,131,147,160,148,155],
[190,160,188,0,151,200,175,177,204],
[198,161,209,189,0,179,169,170,176],
[171,158,193,140,161,0,167,142,191],
[198,171,180,165,171,173,0,156,177],
[193,175,192,163,170,198,184,0,177],
[183,153,185,136,164,149,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,213,211,174,210,160,186,217],
[122,0,175,176,147,179,152,148,171],
[127,165,0,183,166,155,133,155,160],
[129,164,157,0,154,164,158,145,143],
[166,193,174,186,0,175,171,164,179],
[130,161,185,176,165,0,155,169,186],
[180,188,207,182,169,185,0,174,201],
[154,192,185,195,176,171,166,0,180],
[123,169,180,197,161,154,139,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,181,192,184,180,176,170],
[161,0,173,184,170,164,175,171,176],
[167,167,0,184,170,170,181,170,175],
[159,156,156,0,143,154,155,166,161],
[148,170,170,197,0,171,168,176,188],
[156,176,170,186,169,0,164,171,165],
[160,165,159,185,172,176,0,169,155],
[164,169,170,174,164,169,171,0,170],
[170,164,165,179,152,175,185,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,154,165,171,157,169,159,169],
[155,0,156,162,165,149,153,163,142],
[186,184,0,201,193,165,187,187,194],
[175,178,139,0,162,174,161,154,167],
[169,175,147,178,0,162,166,157,180],
[183,191,175,166,178,0,165,189,171],
[171,187,153,179,174,175,0,178,179],
[181,177,153,186,183,151,162,0,185],
[171,198,146,173,160,169,161,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,168,176,153,175,163,167,169],
[188,0,187,174,175,176,153,156,176],
[172,153,0,157,163,160,186,143,179],
[164,166,183,0,193,174,151,152,180],
[187,165,177,147,0,160,143,173,170],
[165,164,180,166,180,0,123,173,196],
[177,187,154,189,197,217,0,171,184],
[173,184,197,188,167,167,169,0,189],
[171,164,161,160,170,144,156,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,176,163,166,156,161,179,167],
[177,0,183,169,166,184,173,181,178],
[164,157,0,178,177,184,169,188,162],
[177,171,162,0,192,188,177,192,181],
[174,174,163,148,0,158,165,172,162],
[184,156,156,152,182,0,176,178,170],
[179,167,171,163,175,164,0,156,181],
[161,159,152,148,168,162,184,0,162],
[173,162,178,159,178,170,159,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,156,175,174,161,168,157],
[175,0,199,164,172,176,159,185,171],
[164,141,0,152,155,152,148,160,156],
[184,176,188,0,171,173,166,182,188],
[165,168,185,169,0,171,182,181,146],
[166,164,188,167,169,0,173,168,169],
[179,181,192,174,158,167,0,187,174],
[172,155,180,158,159,172,153,0,159],
[183,169,184,152,194,171,166,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,169,177,192,183,174,193,165],
[144,0,147,148,178,180,164,161,155],
[171,193,0,169,196,179,158,182,170],
[163,192,171,0,196,176,145,189,170],
[148,162,144,144,0,160,154,150,147],
[157,160,161,164,180,0,157,166,157],
[166,176,182,195,186,183,0,179,164],
[147,179,158,151,190,174,161,0,151],
[175,185,170,170,193,183,176,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,171,175,157,167,160,153,174],
[171,0,167,164,165,161,165,163,169],
[169,173,0,168,172,170,173,162,175],
[165,176,172,0,165,171,173,164,176],
[183,175,168,175,0,177,182,174,171],
[173,179,170,169,163,0,167,173,176],
[180,175,167,167,158,173,0,160,173],
[187,177,178,176,166,167,180,0,177],
[166,171,165,164,169,164,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,181,174,191,170,180,176,183],
[152,0,170,161,180,168,161,168,157],
[159,170,0,174,166,172,167,169,157],
[166,179,166,0,170,165,162,163,175],
[149,160,174,170,0,167,169,159,163],
[170,172,168,175,173,0,183,181,174],
[160,179,173,178,171,157,0,173,158],
[164,172,171,177,181,159,167,0,169],
[157,183,183,165,177,166,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,195,144,167,173,176,164],
[168,0,171,170,164,162,173,184,171],
[169,169,0,167,138,156,186,179,166],
[145,170,173,0,148,156,165,179,154],
[196,176,202,192,0,170,184,190,178],
[173,178,184,184,170,0,166,198,177],
[167,167,154,175,156,174,0,178,183],
[164,156,161,161,150,142,162,0,163],
[176,169,174,186,162,163,157,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,177,167,164,167,196,176,178],
[179,0,186,186,177,182,175,160,196],
[163,154,0,170,167,172,179,153,156],
[173,154,170,0,164,157,160,180,167],
[176,163,173,176,0,161,191,153,188],
[173,158,168,183,179,0,190,163,154],
[144,165,161,180,149,150,0,158,138],
[164,180,187,160,187,177,182,0,152],
[162,144,184,173,152,186,202,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,190,173,159,168,181,194],
[162,0,183,190,155,155,177,150,184],
[170,157,0,177,161,180,149,154,176],
[150,150,163,0,170,185,175,151,159],
[167,185,179,170,0,189,176,167,194],
[181,185,160,155,151,0,169,159,185],
[172,163,191,165,164,171,0,182,186],
[159,190,186,189,173,181,158,0,181],
[146,156,164,181,146,155,154,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,184,176,173,174,177,175],
[158,0,165,171,169,152,179,163,152],
[171,175,0,177,165,169,172,174,173],
[156,169,163,0,165,169,171,163,170],
[164,171,175,175,0,177,164,171,169],
[167,188,171,171,163,0,178,183,172],
[166,161,168,169,176,162,0,163,157],
[163,177,166,177,169,157,177,0,177],
[165,188,167,170,171,168,183,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,125,199,138,127,198,182,187],
[158,0,186,184,157,147,144,243,178],
[215,154,0,184,155,188,199,228,204],
[141,156,156,0,141,129,141,183,176],
[202,183,185,199,0,157,186,213,190],
[213,193,152,211,183,0,211,225,202],
[142,196,141,199,154,129,0,210,190],
[158,97,112,157,127,115,130,0,191],
[153,162,136,164,150,138,150,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,177,180,170,186,181,179,187],
[153,0,173,158,167,182,163,166,174],
[163,167,0,171,162,184,171,164,181],
[160,182,169,0,160,173,177,169,186],
[170,173,178,180,0,186,188,171,184],
[154,158,156,167,154,0,152,170,173],
[159,177,169,163,152,188,0,170,179],
[161,174,176,171,169,170,170,0,179],
[153,166,159,154,156,167,161,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,183,189,187,180,179,168,201],
[165,0,177,189,182,171,174,161,194],
[157,163,0,184,165,165,172,175,162],
[151,151,156,0,172,163,147,154,166],
[153,158,175,168,0,168,167,170,167],
[160,169,175,177,172,0,169,182,183],
[161,166,168,193,173,171,0,174,190],
[172,179,165,186,170,158,166,0,176],
[139,146,178,174,173,157,150,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,196,157,189,181,190,167,182],
[171,0,182,167,160,168,178,162,185],
[144,158,0,160,156,150,189,160,168],
[183,173,180,0,165,171,195,171,182],
[151,180,184,175,0,166,196,171,179],
[159,172,190,169,174,0,197,169,181],
[150,162,151,145,144,143,0,152,162],
[173,178,180,169,169,171,188,0,179],
[158,155,172,158,161,159,178,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,151,173,178,171,172,163],
[179,0,178,171,191,184,167,170,174],
[170,162,0,152,168,172,149,157,157],
[189,169,188,0,181,180,171,172,174],
[167,149,172,159,0,168,164,165,164],
[162,156,168,160,172,0,155,150,166],
[169,173,191,169,176,185,0,180,170],
[168,170,183,168,175,190,160,0,180],
[177,166,183,166,176,174,170,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,187,193,189,183,182,177],
[172,0,151,185,204,195,211,188,170],
[167,189,0,197,206,179,184,173,161],
[153,155,143,0,172,153,180,154,122],
[147,136,134,168,0,155,161,143,137],
[151,145,161,187,185,0,187,145,154],
[157,129,156,160,179,153,0,152,159],
[158,152,167,186,197,195,188,0,167],
[163,170,179,218,203,186,181,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,164,182,157,164,157,189,187],
[131,0,157,167,137,156,140,174,198],
[176,183,0,183,165,165,190,172,165],
[158,173,157,0,161,200,188,198,175],
[183,203,175,179,0,193,148,181,212],
[176,184,175,140,147,0,149,144,179],
[183,200,150,152,192,191,0,204,210],
[151,166,168,142,159,196,136,0,176],
[153,142,175,165,128,161,130,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,139,178,165,156,156,160,165],
[186,0,168,185,192,173,174,180,179],
[201,172,0,184,158,186,182,191,173],
[162,155,156,0,169,174,154,176,173],
[175,148,182,171,0,162,167,170,179],
[184,167,154,166,178,0,171,171,175],
[184,166,158,186,173,169,0,178,170],
[180,160,149,164,170,169,162,0,173],
[175,161,167,167,161,165,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,121,202,177,164,188,179,164],
[164,0,107,150,150,137,146,153,172],
[219,233,0,187,189,162,160,178,175],
[138,190,153,0,137,177,136,143,175],
[163,190,151,203,0,194,157,166,184],
[176,203,178,163,146,0,172,139,159],
[152,194,180,204,183,168,0,169,165],
[161,187,162,197,174,201,171,0,187],
[176,168,165,165,156,181,175,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,148,160,186,167,148,168],
[180,0,164,144,173,162,156,166,186],
[182,176,0,176,175,170,186,171,179],
[192,196,164,0,202,178,204,194,178],
[180,167,165,138,0,177,150,153,169],
[154,178,170,162,163,0,165,165,175],
[173,184,154,136,190,175,0,152,169],
[192,174,169,146,187,175,188,0,183],
[172,154,161,162,171,165,171,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,168,172,185,187,171,174],
[170,0,181,182,171,179,189,169,167],
[167,159,0,175,165,170,172,176,167],
[172,158,165,0,152,161,192,165,172],
[168,169,175,188,0,181,192,155,171],
[155,161,170,179,159,0,180,172,171],
[153,151,168,148,148,160,0,171,174],
[169,171,164,175,185,168,169,0,177],
[166,173,173,168,169,169,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,185,184,173,183,180,168,165],
[158,0,172,155,152,166,152,154,174],
[155,168,0,180,187,175,181,159,171],
[156,185,160,0,163,158,160,170,178],
[167,188,153,177,0,170,163,161,170],
[157,174,165,182,170,0,169,180,179],
[160,188,159,180,177,171,0,181,185],
[172,186,181,170,179,160,159,0,171],
[175,166,169,162,170,161,155,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,170,114,198,169,142,170,171],
[199,0,170,171,171,197,142,169,199],
[170,170,0,113,226,169,170,169,228],
[226,169,227,0,255,226,171,254,256],
[142,169,114,85,0,140,142,198,199],
[171,143,171,114,200,0,86,141,143],
[198,198,170,169,198,254,0,226,199],
[170,171,171,86,142,199,114,0,171],
[169,141,112,84,141,197,141,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,163,173,162,177,168,171,175],
[171,0,169,171,165,167,162,155,170],
[177,171,0,167,163,169,154,157,162],
[167,169,173,0,166,170,168,167,162],
[178,175,177,174,0,164,170,181,173],
[163,173,171,170,176,0,171,168,164],
[172,178,186,172,170,169,0,168,167],
[169,185,183,173,159,172,172,0,167],
[165,170,178,178,167,176,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,157,163,169,154,177,144],
[180,0,156,161,152,163,165,185,158],
[173,184,0,167,162,160,149,167,164],
[183,179,173,0,164,159,163,179,154],
[177,188,178,176,0,172,166,178,174],
[171,177,180,181,168,0,181,166,168],
[186,175,191,177,174,159,0,182,162],
[163,155,173,161,162,174,158,0,156],
[196,182,176,186,166,172,178,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,150,152,158,167,154,180],
[180,0,176,174,169,182,176,195,178],
[181,164,0,168,144,155,177,187,153],
[190,166,172,0,173,184,165,195,178],
[188,171,196,167,0,161,182,175,166],
[182,158,185,156,179,0,166,175,163],
[173,164,163,175,158,174,0,182,174],
[186,145,153,145,165,165,158,0,153],
[160,162,187,162,174,177,166,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,198,184,208,208,201,170,166],
[181,0,183,165,178,180,187,177,176],
[142,157,0,165,143,183,170,162,127],
[156,175,175,0,176,189,195,174,159],
[132,162,197,164,0,170,185,165,158],
[132,160,157,151,170,0,173,147,134],
[139,153,170,145,155,167,0,170,157],
[170,163,178,166,175,193,170,0,157],
[174,164,213,181,182,206,183,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,173,178,182,172,186,183,182],
[181,0,163,175,163,171,172,171,177],
[167,177,0,175,171,156,176,170,182],
[162,165,165,0,172,172,180,173,174],
[158,177,169,168,0,160,173,169,175],
[168,169,184,168,180,0,173,183,180],
[154,168,164,160,167,167,0,175,170],
[157,169,170,167,171,157,165,0,160],
[158,163,158,166,165,160,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,155,173,182,176,173,167,165],
[163,0,147,162,159,152,161,152,151],
[185,193,0,172,190,183,184,174,169],
[167,178,168,0,171,170,182,169,164],
[158,181,150,169,0,169,182,159,167],
[164,188,157,170,171,0,173,156,159],
[167,179,156,158,158,167,0,164,159],
[173,188,166,171,181,184,176,0,177],
[175,189,171,176,173,181,181,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,163,182,179,182,168,173,183],
[168,0,166,168,188,184,165,167,173],
[177,174,0,163,192,175,164,169,167],
[158,172,177,0,172,171,179,171,165],
[161,152,148,168,0,164,152,156,169],
[158,156,165,169,176,0,161,179,169],
[172,175,176,161,188,179,0,172,189],
[167,173,171,169,184,161,168,0,187],
[157,167,173,175,171,171,151,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,174,189,189,205,190,173],
[165,0,166,169,163,174,180,170,156],
[173,174,0,150,160,173,173,161,163],
[166,171,190,0,175,176,204,177,173],
[151,177,180,165,0,156,186,183,173],
[151,166,167,164,184,0,173,179,171],
[135,160,167,136,154,167,0,139,165],
[150,170,179,163,157,161,201,0,161],
[167,184,177,167,167,169,175,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,185,158,133,171,210,158,194],
[209,0,195,171,169,185,210,183,248],
[155,145,0,196,169,210,209,196,182],
[182,169,144,0,158,183,142,221,168],
[207,171,171,182,0,184,168,183,155],
[169,155,130,157,156,0,157,194,194],
[130,130,131,198,172,183,0,157,156],
[182,157,144,119,157,146,183,0,181],
[146,92,158,172,185,146,184,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,162,150,154,150,151,153],
[181,0,162,167,177,176,179,164,164],
[170,178,0,169,157,154,149,164,172],
[178,173,171,0,178,160,153,167,169],
[190,163,183,162,0,173,164,165,173],
[186,164,186,180,167,0,171,177,177],
[190,161,191,187,176,169,0,180,170],
[189,176,176,173,175,163,160,0,165],
[187,176,168,171,167,163,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,152,147,174,179,144,169,183],
[190,0,174,186,188,185,156,187,208],
[188,166,0,152,183,191,171,186,204],
[193,154,188,0,175,167,158,179,183],
[166,152,157,165,0,168,153,186,178],
[161,155,149,173,172,0,119,171,160],
[196,184,169,182,187,221,0,202,215],
[171,153,154,161,154,169,138,0,174],
[157,132,136,157,162,180,125,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,171,185,173,175,171,167,180],
[163,0,172,167,171,174,171,170,173],
[169,168,0,168,183,161,170,157,171],
[155,173,172,0,165,177,174,150,173],
[167,169,157,175,0,176,173,159,173],
[165,166,179,163,164,0,170,149,185],
[169,169,170,166,167,170,0,166,174],
[173,170,183,190,181,191,174,0,181],
[160,167,169,167,167,155,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,174,175,178,179,175,160,184],
[177,0,161,183,169,177,184,155,172],
[166,179,0,188,181,191,187,183,192],
[165,157,152,0,169,175,166,170,168],
[162,171,159,171,0,181,164,156,169],
[161,163,149,165,159,0,158,160,180],
[165,156,153,174,176,182,0,160,172],
[180,185,157,170,184,180,180,0,185],
[156,168,148,172,171,160,168,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,183,191,169,156,178,174,182],
[172,0,189,171,162,172,164,167,166],
[157,151,0,143,161,148,151,163,163],
[149,169,197,0,170,154,163,161,170],
[171,178,179,170,0,154,181,159,165],
[184,168,192,186,186,0,178,175,179],
[162,176,189,177,159,162,0,166,176],
[166,173,177,179,181,165,174,0,171],
[158,174,177,170,175,161,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,180,187,187,161,172,192,169],
[145,0,144,158,166,136,151,165,157],
[160,196,0,175,175,179,184,192,183],
[153,182,165,0,167,161,168,178,164],
[153,174,165,173,0,145,155,174,175],
[179,204,161,179,195,0,182,193,173],
[168,189,156,172,185,158,0,188,181],
[148,175,148,162,166,147,152,0,146],
[171,183,157,176,165,167,159,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,159,185,166,166,171,148,164],
[178,0,176,187,164,162,182,164,172],
[181,164,0,191,177,182,186,166,172],
[155,153,149,0,150,167,152,143,156],
[174,176,163,190,0,189,173,167,168],
[174,178,158,173,151,0,162,152,146],
[169,158,154,188,167,178,0,163,172],
[192,176,174,197,173,188,177,0,166],
[176,168,168,184,172,194,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,161,172,176,173,179,176],
[172,0,176,162,173,180,170,182,177],
[177,164,0,164,173,180,163,175,181],
[179,178,176,0,163,183,163,188,166],
[168,167,167,177,0,182,164,180,181],
[164,160,160,157,158,0,168,175,171],
[167,170,177,177,176,172,0,174,176],
[161,158,165,152,160,165,166,0,161],
[164,163,159,174,159,169,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,191,174,179,176,180,179,169],
[171,0,158,173,166,177,186,179,151],
[149,182,0,170,187,166,184,174,159],
[166,167,170,0,181,166,172,181,156],
[161,174,153,159,0,145,181,165,146],
[164,163,174,174,195,0,186,179,172],
[160,154,156,168,159,154,0,161,172],
[161,161,166,159,175,161,179,0,149],
[171,189,181,184,194,168,168,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,176,140,144,145,154,183,132],
[149,0,135,145,136,139,125,147,127],
[164,205,0,160,150,161,156,190,157],
[200,195,180,0,164,189,178,189,173],
[196,204,190,176,0,191,162,195,161],
[195,201,179,151,149,0,156,165,138],
[186,215,184,162,178,184,0,188,152],
[157,193,150,151,145,175,152,0,136],
[208,213,183,167,179,202,188,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,170,164,183,181,154,156,182],
[175,0,168,170,182,168,164,172,168],
[170,172,0,172,166,170,164,182,179],
[176,170,168,0,172,183,181,178,179],
[157,158,174,168,0,154,165,169,173],
[159,172,170,157,186,0,166,172,165],
[186,176,176,159,175,174,0,167,184],
[184,168,158,162,171,168,173,0,174],
[158,172,161,161,167,175,156,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,139,195,179,176,187,187,184],
[181,0,145,160,156,156,146,173,155],
[201,195,0,199,172,178,168,198,187],
[145,180,141,0,167,141,151,156,174],
[161,184,168,173,0,173,171,179,165],
[164,184,162,199,167,0,191,182,151],
[153,194,172,189,169,149,0,170,178],
[153,167,142,184,161,158,170,0,151],
[156,185,153,166,175,189,162,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,177,200,175,202,195,157,199],
[145,0,147,159,172,143,155,126,155],
[163,193,0,170,166,186,162,139,172],
[140,181,170,0,163,174,149,176,150],
[165,168,174,177,0,184,172,151,156],
[138,197,154,166,156,0,150,140,158],
[145,185,178,191,168,190,0,164,190],
[183,214,201,164,189,200,176,0,202],
[141,185,168,190,184,182,150,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,178,178,177,181,182,170,168],
[155,0,159,163,162,157,154,172,167],
[162,181,0,171,167,161,176,158,167],
[162,177,169,0,179,162,171,167,170],
[163,178,173,161,0,163,169,165,167],
[159,183,179,178,177,0,179,162,171],
[158,186,164,169,171,161,0,165,165],
[170,168,182,173,175,178,175,0,174],
[172,173,173,170,173,169,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,139,152,176,184,188,176,195],
[165,0,137,163,178,139,187,140,100],
[201,203,0,174,202,200,223,152,196],
[188,177,166,0,165,176,188,153,129],
[164,162,138,175,0,162,175,164,134],
[156,201,140,164,178,0,199,164,200],
[152,153,117,152,165,141,0,155,154],
[164,200,188,187,176,176,185,0,175],
[145,240,144,211,206,140,186,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,171,189,165,171,168,181,189],
[171,0,180,178,167,160,181,187,193],
[169,160,0,185,169,170,176,178,187],
[151,162,155,0,174,160,172,184,169],
[175,173,171,166,0,181,181,182,185],
[169,180,170,180,159,0,183,185,179],
[172,159,164,168,159,157,0,188,172],
[159,153,162,156,158,155,152,0,171],
[151,147,153,171,155,161,168,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,180,163,172,189,152,183],
[170,0,166,185,140,179,190,166,166],
[172,174,0,177,140,162,183,159,173],
[160,155,163,0,135,144,164,144,170],
[177,200,200,205,0,191,200,144,172],
[168,161,178,196,149,0,180,152,184],
[151,150,157,176,140,160,0,140,150],
[188,174,181,196,196,188,200,0,164],
[157,174,167,170,168,156,190,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,178,179,174,164,174,175,155],
[187,0,192,184,191,179,193,169,167],
[162,148,0,166,174,164,157,162,154],
[161,156,174,0,166,165,164,157,156],
[166,149,166,174,0,159,160,165,157],
[176,161,176,175,181,0,172,164,159],
[166,147,183,176,180,168,0,165,172],
[165,171,178,183,175,176,175,0,172],
[185,173,186,184,183,181,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,193,164,167,178,186,188,182],
[162,0,181,150,164,164,172,193,175],
[147,159,0,155,179,163,173,183,154],
[176,190,185,0,167,170,182,199,176],
[173,176,161,173,0,163,171,176,162],
[162,176,177,170,177,0,179,186,179],
[154,168,167,158,169,161,0,169,152],
[152,147,157,141,164,154,171,0,162],
[158,165,186,164,178,161,188,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,176,189,176,159,175,160],
[172,0,178,177,170,171,166,171,160],
[161,162,0,158,169,183,160,165,147],
[164,163,182,0,169,169,163,170,171],
[151,170,171,171,0,165,156,169,161],
[164,169,157,171,175,0,154,173,155],
[181,174,180,177,184,186,0,195,151],
[165,169,175,170,171,167,145,0,175],
[180,180,193,169,179,185,189,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,176,163,183,170,172,181,194],
[171,0,170,177,195,160,181,181,177],
[164,170,0,178,177,174,184,171,185],
[177,163,162,0,188,172,171,179,178],
[157,145,163,152,0,160,158,166,171],
[170,180,166,168,180,0,164,179,181],
[168,159,156,169,182,176,0,192,184],
[159,159,169,161,174,161,148,0,163],
[146,163,155,162,169,159,156,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,258,222,163,159,198,212,216],
[133,0,197,143,127,114,182,172,183],
[82,143,0,169,143,139,161,191,131],
[118,197,171,0,171,171,196,169,205],
[177,213,197,169,0,147,194,207,193],
[181,226,201,169,193,0,190,151,192],
[142,158,179,144,146,150,0,163,165],
[128,168,149,171,133,189,177,0,180],
[124,157,209,135,147,148,175,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,165,190,174,186,194,176,166],
[148,0,143,163,145,161,167,150,176],
[175,197,0,184,169,187,175,157,172],
[150,177,156,0,150,150,155,138,157],
[166,195,171,190,0,176,181,161,179],
[154,179,153,190,164,0,169,149,162],
[146,173,165,185,159,171,0,138,199],
[164,190,183,202,179,191,202,0,165],
[174,164,168,183,161,178,141,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,150,161,168,149,147,145,148],
[207,0,177,174,183,160,210,196,190],
[190,163,0,195,173,147,199,180,172],
[179,166,145,0,184,154,202,177,154],
[172,157,167,156,0,139,180,174,168],
[191,180,193,186,201,0,175,184,162],
[193,130,141,138,160,165,0,165,168],
[195,144,160,163,166,156,175,0,150],
[192,150,168,186,172,178,172,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,177,191,174,177,173,167],
[169,0,176,172,173,168,170,168,180],
[179,164,0,178,160,163,180,162,165],
[163,168,162,0,172,171,175,164,157],
[149,167,180,168,0,172,174,160,164],
[166,172,177,169,168,0,180,166,165],
[163,170,160,165,166,160,0,171,165],
[167,172,178,176,180,174,169,0,156],
[173,160,175,183,176,175,175,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,209,182,156,236,130,105,78],
[210,0,183,236,182,158,156,184,105],
[131,157,0,157,156,106,131,131,79],
[158,104,183,0,130,184,104,106,131],
[184,158,184,210,0,132,79,106,105],
[104,182,234,156,208,0,130,131,78],
[210,184,209,236,261,210,0,132,158],
[235,156,209,234,234,209,208,0,208],
[262,235,261,209,235,262,182,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,168,172,158,163,174,193,178],
[164,0,172,165,167,167,165,206,174],
[172,168,0,185,171,169,174,189,184],
[168,175,155,0,159,159,175,193,193],
[182,173,169,181,0,192,182,197,200],
[177,173,171,181,148,0,182,197,192],
[166,175,166,165,158,158,0,186,186],
[147,134,151,147,143,143,154,0,169],
[162,166,156,147,140,148,154,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,168,195,175,174,171,146,189],
[158,0,150,182,168,179,154,144,176],
[172,190,0,192,185,173,196,158,178],
[145,158,148,0,141,174,148,145,168],
[165,172,155,199,0,177,178,159,154],
[166,161,167,166,163,0,176,167,172],
[169,186,144,192,162,164,0,170,170],
[194,196,182,195,181,173,170,0,185],
[151,164,162,172,186,168,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,166,153,165,156,154,167,156],
[175,0,165,166,177,179,168,168,165],
[174,175,0,185,178,172,169,170,174],
[187,174,155,0,176,171,178,170,177],
[175,163,162,164,0,185,176,173,172],
[184,161,168,169,155,0,176,174,171],
[186,172,171,162,164,164,0,165,165],
[173,172,170,170,167,166,175,0,162],
[184,175,166,163,168,169,175,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,148,169,157,147,143,162,142],
[171,0,177,172,169,176,157,165,165],
[192,163,0,174,176,164,156,160,167],
[171,168,166,0,198,151,158,151,153],
[183,171,164,142,0,146,149,156,164],
[193,164,176,189,194,0,173,186,190],
[197,183,184,182,191,167,0,171,175],
[178,175,180,189,184,154,169,0,165],
[198,175,173,187,176,150,165,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,188,198,174,166,164,185,168],
[165,0,178,178,183,139,184,165,159],
[152,162,0,162,184,165,157,139,191],
[142,162,178,0,139,145,161,154,155],
[166,157,156,201,0,164,157,147,164],
[174,201,175,195,176,0,189,161,181],
[176,156,183,179,183,151,0,150,184],
[155,175,201,186,193,179,190,0,173],
[172,181,149,185,176,159,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,170,158,172,167,177,158,158],
[184,0,172,155,179,160,175,168,163],
[170,168,0,160,184,168,177,153,162],
[182,185,180,0,177,169,176,170,166],
[168,161,156,163,0,151,166,157,156],
[173,180,172,171,189,0,176,169,161],
[163,165,163,164,174,164,0,158,160],
[182,172,187,170,183,171,182,0,176],
[182,177,178,174,184,179,180,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,160,128,157,155,170,171],
[174,0,175,167,153,179,153,191,162],
[170,165,0,173,141,173,162,155,162],
[180,173,167,0,157,192,172,184,183],
[212,187,199,183,0,169,162,189,183],
[183,161,167,148,171,0,151,166,157],
[185,187,178,168,178,189,0,180,176],
[170,149,185,156,151,174,160,0,182],
[169,178,178,157,157,183,164,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,153,152,153,161,169,142],
[168,0,145,161,162,165,164,166,171],
[179,195,0,154,160,176,161,155,159],
[187,179,186,0,162,167,179,174,188],
[188,178,180,178,0,151,160,168,184],
[187,175,164,173,189,0,174,190,194],
[179,176,179,161,180,166,0,157,168],
[171,174,185,166,172,150,183,0,166],
[198,169,181,152,156,146,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,255,254,252,169,199,197,169],
[112,0,199,141,225,114,112,111,170],
[85,141,0,113,224,141,139,114,110],
[86,199,227,0,225,199,113,198,141],
[88,115,116,115,0,115,116,85,113],
[171,226,199,141,225,0,167,170,194],
[141,228,201,227,224,173,0,201,142],
[143,229,226,142,255,170,139,0,170],
[171,170,230,199,227,146,198,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,154,182,166,178,177,147],
[165,0,177,166,178,167,164,175,159],
[178,163,0,169,183,176,182,173,162],
[186,174,171,0,190,168,177,179,171],
[158,162,157,150,0,161,167,168,152],
[174,173,164,172,179,0,178,169,175],
[162,176,158,163,173,162,0,165,151],
[163,165,167,161,172,171,175,0,156],
[193,181,178,169,188,165,189,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,218,153,197,149,147,167,214],
[133,0,174,146,186,105,127,114,204],
[122,166,0,127,143,143,113,113,190],
[187,194,213,0,194,168,169,139,224],
[143,154,197,146,0,144,181,153,180],
[191,235,197,172,196,0,174,143,194],
[193,213,227,171,159,166,0,174,208],
[173,226,227,201,187,197,166,0,245],
[126,136,150,116,160,146,132,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,167,148,177,205,148,186,184],
[200,0,181,154,185,175,197,210,204],
[173,159,0,172,202,203,189,224,195],
[192,186,168,0,207,197,183,197,190],
[163,155,138,133,0,174,176,164,166],
[135,165,137,143,166,0,160,184,186],
[192,143,151,157,164,180,0,161,199],
[154,130,116,143,176,156,179,0,164],
[156,136,145,150,174,154,141,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,191,184,190,171,202,181,185],
[171,0,209,193,180,159,180,182,179],
[149,131,0,182,185,137,181,139,184],
[156,147,158,0,179,132,178,152,162],
[150,160,155,161,0,122,163,146,156],
[169,181,203,208,218,0,230,187,186],
[138,160,159,162,177,110,0,145,135],
[159,158,201,188,194,153,195,0,188],
[155,161,156,178,184,154,205,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,188,165,173,169,137,174,178],
[161,0,177,142,171,164,145,151,192],
[152,163,0,138,153,142,119,141,148],
[175,198,202,0,165,165,141,172,179],
[167,169,187,175,0,158,145,181,175],
[171,176,198,175,182,0,157,152,179],
[203,195,221,199,195,183,0,180,170],
[166,189,199,168,159,188,160,0,178],
[162,148,192,161,165,161,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,144,165,221,131,222,154,186],
[146,0,167,144,167,169,210,202,182],
[196,173,0,186,207,164,243,165,208],
[175,196,154,0,207,175,240,198,210],
[119,173,133,133,0,65,189,144,135],
[209,171,176,165,275,0,266,201,235],
[118,130,97,100,151,74,0,134,122],
[186,138,175,142,196,139,206,0,206],
[154,158,132,130,205,105,218,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,157,150,166,148,158,164,168],
[178,0,171,162,169,162,163,176,168],
[183,169,0,170,170,157,156,168,172],
[190,178,170,0,183,182,179,171,179],
[174,171,170,157,0,162,164,168,163],
[192,178,183,158,178,0,177,174,180],
[182,177,184,161,176,163,0,176,171],
[176,164,172,169,172,166,164,0,164],
[172,172,168,161,177,160,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,178,192,168,187,190,174],
[160,0,172,164,163,162,175,172,171],
[157,168,0,168,173,161,160,171,171],
[162,176,172,0,167,163,168,178,171],
[148,177,167,173,0,175,169,175,170],
[172,178,179,177,165,0,171,179,165],
[153,165,180,172,171,169,0,176,170],
[150,168,169,162,165,161,164,0,172],
[166,169,169,169,170,175,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,218,142,171,186,186,186,190],
[183,0,204,187,185,199,183,168,204],
[122,136,0,135,149,181,163,167,200],
[198,153,205,0,138,167,157,186,171],
[169,155,191,202,0,230,171,199,204],
[154,141,159,173,110,0,188,189,191],
[154,157,177,183,169,152,0,172,205],
[154,172,173,154,141,151,168,0,250],
[150,136,140,169,136,149,135,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,182,188,175,172,161,166],
[170,0,170,178,178,170,177,156,159],
[173,170,0,184,185,198,176,173,166],
[158,162,156,0,179,174,167,155,161],
[152,162,155,161,0,167,163,155,174],
[165,170,142,166,173,0,164,167,154],
[168,163,164,173,177,176,0,161,165],
[179,184,167,185,185,173,179,0,180],
[174,181,174,179,166,186,175,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,163,173,161,162,167,184,168],
[159,0,171,170,160,140,150,150,162],
[177,169,0,143,149,165,140,158,164],
[167,170,197,0,156,175,179,184,170],
[179,180,191,184,0,165,172,193,175],
[178,200,175,165,175,0,163,203,180],
[173,190,200,161,168,177,0,187,167],
[156,190,182,156,147,137,153,0,164],
[172,178,176,170,165,160,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,164,171,181,178,166,146],
[169,0,165,160,161,173,185,170,128],
[170,175,0,166,170,187,178,184,151],
[176,180,174,0,160,182,183,174,172],
[169,179,170,180,0,185,200,180,166],
[159,167,153,158,155,0,176,158,145],
[162,155,162,157,140,164,0,158,151],
[174,170,156,166,160,182,182,0,156],
[194,212,189,168,174,195,189,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,168,170,173,191,173,188],
[163,0,157,171,171,168,188,169,186],
[172,183,0,170,178,178,183,168,183],
[172,169,170,0,172,174,171,168,195],
[170,169,162,168,0,166,171,165,185],
[167,172,162,166,174,0,183,169,182],
[149,152,157,169,169,157,0,174,178],
[167,171,172,172,175,171,166,0,184],
[152,154,157,145,155,158,162,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,186,185,181,168,183,181,184],
[199,0,193,188,166,183,177,193,185],
[154,147,0,160,143,140,159,165,177],
[155,152,180,0,165,171,160,177,168],
[159,174,197,175,0,169,172,177,185],
[172,157,200,169,171,0,159,175,175],
[157,163,181,180,168,181,0,174,188],
[159,147,175,163,163,165,166,0,174],
[156,155,163,172,155,165,152,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,150,189,134,157,166,150,182],
[227,0,158,197,175,194,191,192,216],
[190,182,0,225,167,192,185,174,185],
[151,143,115,0,160,176,160,140,144],
[206,165,173,180,0,212,175,166,136],
[183,146,148,164,128,0,167,174,157],
[174,149,155,180,165,173,0,163,140],
[190,148,166,200,174,166,177,0,166],
[158,124,155,196,204,183,200,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,193,166,153,192,154,165,177],
[175,0,220,194,213,206,168,222,184],
[147,120,0,133,107,165,95,95,121],
[174,146,207,0,167,153,137,136,150],
[187,127,233,173,0,176,171,145,160],
[148,134,175,187,164,0,122,133,163],
[186,172,245,203,169,218,0,178,206],
[175,118,245,204,195,207,162,0,161],
[163,156,219,190,180,177,134,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,142,177,132,176,133,165,147],
[169,0,154,146,157,174,166,182,177],
[198,186,0,171,191,172,166,164,186],
[163,194,169,0,131,171,129,155,167],
[208,183,149,209,0,185,186,193,193],
[164,166,168,169,155,0,147,146,173],
[207,174,174,211,154,193,0,184,236],
[175,158,176,185,147,194,156,0,173],
[193,163,154,173,147,167,104,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,178,171,169,166,165,173,174],
[174,0,176,168,177,169,174,174,174],
[162,164,0,165,165,160,158,151,162],
[169,172,175,0,167,161,171,170,171],
[171,163,175,173,0,168,169,165,171],
[174,171,180,179,172,0,160,177,178],
[175,166,182,169,171,180,0,172,182],
[167,166,189,170,175,163,168,0,169],
[166,166,178,169,169,162,158,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,183,163,194,188,194,164,200],
[170,0,181,157,194,179,205,186,187],
[157,159,0,161,170,155,187,167,175],
[177,183,179,0,179,170,188,175,186],
[146,146,170,161,0,169,184,172,185],
[152,161,185,170,171,0,189,184,180],
[146,135,153,152,156,151,0,157,147],
[176,154,173,165,168,156,183,0,160],
[140,153,165,154,155,160,193,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,177,165,155,162,162,162,163],
[188,0,190,182,184,164,169,187,167],
[163,150,0,168,160,147,165,162,152],
[175,158,172,0,164,155,157,158,164],
[185,156,180,176,0,165,180,168,164],
[178,176,193,185,175,0,164,164,170],
[178,171,175,183,160,176,0,178,163],
[178,153,178,182,172,176,162,0,175],
[177,173,188,176,176,170,177,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,161,195,174,168,178,176,191],
[160,0,147,174,164,156,150,134,155],
[179,193,0,191,189,174,175,159,190],
[145,166,149,0,172,157,163,144,165],
[166,176,151,168,0,172,151,152,182],
[172,184,166,183,168,0,161,170,183],
[162,190,165,177,189,179,0,170,198],
[164,206,181,196,188,170,170,0,184],
[149,185,150,175,158,157,142,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,178,168,176,152,181,185],
[168,0,182,166,172,170,156,171,170],
[170,158,0,181,172,181,159,181,193],
[162,174,159,0,162,179,168,181,184],
[172,168,168,178,0,202,173,195,191],
[164,170,159,161,138,0,152,173,178],
[188,184,181,172,167,188,0,189,186],
[159,169,159,159,145,167,151,0,177],
[155,170,147,156,149,162,154,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,161,193,179,158,179,159,174],
[162,0,151,154,161,162,164,164,152],
[179,189,0,171,189,184,190,157,174],
[147,186,169,0,181,176,175,161,168],
[161,179,151,159,0,158,168,157,153],
[182,178,156,164,182,0,174,164,179],
[161,176,150,165,172,166,0,168,140],
[181,176,183,179,183,176,172,0,159],
[166,188,166,172,187,161,200,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,172,168,160,166,160,169],
[170,0,162,188,163,175,176,161,179],
[172,178,0,186,181,172,188,168,180],
[168,152,154,0,155,139,175,163,166],
[172,177,159,185,0,177,172,168,170],
[180,165,168,201,163,0,180,173,181],
[174,164,152,165,168,160,0,163,170],
[180,179,172,177,172,167,177,0,185],
[171,161,160,174,170,159,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,168,157,154,168,180,156],
[164,0,167,161,146,159,170,181,159],
[169,173,0,165,162,153,149,169,150],
[172,179,175,0,158,169,182,182,170],
[183,194,178,182,0,174,165,207,165],
[186,181,187,171,166,0,163,183,151],
[172,170,191,158,175,177,0,195,153],
[160,159,171,158,133,157,145,0,144],
[184,181,190,170,175,189,187,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,144,156,142,190,133,173],
[177,0,174,154,167,177,160,166,164],
[167,166,0,171,123,149,148,193,150],
[196,186,169,0,153,153,195,175,161],
[184,173,217,187,0,149,201,181,159],
[198,163,191,187,191,0,204,170,161],
[150,180,192,145,139,136,0,150,165],
[207,174,147,165,159,170,190,0,164],
[167,176,190,179,181,179,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,179,169,176,171,171,160],
[158,0,178,175,180,163,150,166,172],
[164,162,0,175,183,167,169,177,166],
[161,165,165,0,181,171,155,157,164],
[171,160,157,159,0,163,146,163,156],
[164,177,173,169,177,0,164,173,170],
[169,190,171,185,194,176,0,174,181],
[169,174,163,183,177,167,166,0,166],
[180,168,174,176,184,170,159,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,152,176,160,176,171,166,212],
[154,0,144,163,151,144,169,153,190],
[188,196,0,170,161,177,183,180,201],
[164,177,170,0,155,173,171,162,193],
[180,189,179,185,0,169,188,188,220],
[164,196,163,167,171,0,177,186,195],
[169,171,157,169,152,163,0,177,200],
[174,187,160,178,152,154,163,0,202],
[128,150,139,147,120,145,140,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,128,182,150,147,152,158,143],
[202,0,154,185,166,192,165,168,171],
[212,186,0,182,186,192,172,164,162],
[158,155,158,0,161,171,160,154,160],
[190,174,154,179,0,179,164,158,163],
[193,148,148,169,161,0,151,157,148],
[188,175,168,180,176,189,0,180,175],
[182,172,176,186,182,183,160,0,160],
[197,169,178,180,177,192,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,167,188,175,165,173,175,166],
[164,0,165,184,182,167,159,157,164],
[173,175,0,185,173,164,163,145,157],
[152,156,155,0,153,153,151,151,156],
[165,158,167,187,0,163,158,162,172],
[175,173,176,187,177,0,163,179,179],
[167,181,177,189,182,177,0,183,181],
[165,183,195,189,178,161,157,0,174],
[174,176,183,184,168,161,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,172,169,162,137,156,177],
[170,0,156,188,182,182,183,177,209],
[171,184,0,171,181,179,154,186,183],
[168,152,169,0,159,180,140,165,213],
[171,158,159,181,0,187,120,158,170],
[178,158,161,160,153,0,147,149,168],
[203,157,186,200,220,193,0,203,206],
[184,163,154,175,182,191,137,0,165],
[163,131,157,127,170,172,134,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,140,145,153,160,149,164],
[180,0,180,158,173,175,175,183,194],
[167,160,0,166,147,176,184,175,171],
[200,182,174,0,200,162,177,186,192],
[195,167,193,140,0,181,167,179,175],
[187,165,164,178,159,0,174,180,186],
[180,165,156,163,173,166,0,183,166],
[191,157,165,154,161,160,157,0,160],
[176,146,169,148,165,154,174,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,163,165,163,164,171,163,170],
[167,0,168,170,164,158,162,164,169],
[177,172,0,183,160,168,173,172,166],
[175,170,157,0,168,157,171,170,162],
[177,176,180,172,0,152,169,166,171],
[176,182,172,183,188,0,186,169,171],
[169,178,167,169,171,154,0,158,165],
[177,176,168,170,174,171,182,0,179],
[170,171,174,178,169,169,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,162,171,178,154,167,148],
[170,0,183,172,184,168,155,177,163],
[178,157,0,160,181,175,160,157,166],
[178,168,180,0,183,190,164,160,170],
[169,156,159,157,0,164,160,156,171],
[162,172,165,150,176,0,150,150,152],
[186,185,180,176,180,190,0,160,177],
[173,163,183,180,184,190,180,0,190],
[192,177,174,170,169,188,163,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,170,0,0,170,170,0],
[340,0,170,170,0,170,170,340,170],
[340,170,0,170,170,170,170,340,170],
[170,170,170,0,170,0,0,170,170],
[340,340,170,170,0,170,170,340,170],
[340,170,170,340,170,0,170,340,340],
[170,170,170,340,170,170,0,170,170],
[170,0,0,170,0,0,170,0,0],
[340,170,170,170,170,0,170,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,167,183,178,173,160,172,177],
[186,0,158,186,169,177,165,172,176],
[173,182,0,183,167,178,161,174,175],
[157,154,157,0,154,169,158,172,178],
[162,171,173,186,0,164,171,172,161],
[167,163,162,171,176,0,165,175,173],
[180,175,179,182,169,175,0,178,195],
[168,168,166,168,168,165,162,0,180],
[163,164,165,162,179,167,145,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,149,169,172,159,178,164,151],
[180,0,172,183,172,192,192,166,169],
[191,168,0,197,166,177,194,153,173],
[171,157,143,0,161,167,162,146,143],
[168,168,174,179,0,191,184,169,173],
[181,148,163,173,149,0,172,169,143],
[162,148,146,178,156,168,0,150,146],
[176,174,187,194,171,171,190,0,165],
[189,171,167,197,167,197,194,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,148,150,155,167,122,169,149],
[209,0,195,179,171,180,175,190,164],
[192,145,0,169,169,177,159,170,177],
[190,161,171,0,157,174,137,184,178],
[185,169,171,183,0,179,156,193,172],
[173,160,163,166,161,0,164,173,165],
[218,165,181,203,184,176,0,182,195],
[171,150,170,156,147,167,158,0,170],
[191,176,163,162,168,175,145,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,164,161,161,172,171,174,167],
[156,0,151,145,132,154,141,157,149],
[176,189,0,175,161,161,172,171,170],
[179,195,165,0,179,175,163,180,160],
[179,208,179,161,0,177,158,176,179],
[168,186,179,165,163,0,169,175,167],
[169,199,168,177,182,171,0,175,179],
[166,183,169,160,164,165,165,0,154],
[173,191,170,180,161,173,161,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,170,172,182,182,180,171,203],
[146,0,148,148,165,169,171,185,179],
[170,192,0,164,169,193,184,181,202],
[168,192,176,0,180,190,184,198,197],
[158,175,171,160,0,182,169,160,201],
[158,171,147,150,158,0,173,149,187],
[160,169,156,156,171,167,0,175,172],
[169,155,159,142,180,191,165,0,193],
[137,161,138,143,139,153,168,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,148,154,166,163,161,175,142],
[185,0,169,177,174,165,161,176,160],
[192,171,0,176,191,178,167,184,189],
[186,163,164,0,166,181,170,159,164],
[174,166,149,174,0,167,152,172,164],
[177,175,162,159,173,0,173,171,169],
[179,179,173,170,188,167,0,176,171],
[165,164,156,181,168,169,164,0,163],
[198,180,151,176,176,171,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,156,172,151,177,155,157,152],
[170,0,173,180,165,186,180,169,170],
[184,167,0,175,167,188,162,162,173],
[168,160,165,0,149,167,164,161,169],
[189,175,173,191,0,192,162,182,165],
[163,154,152,173,148,0,165,171,161],
[185,160,178,176,178,175,0,188,165],
[183,171,178,179,158,169,152,0,165],
[188,170,167,171,175,179,175,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,159,143,198,167,169,167],
[169,0,166,169,176,178,169,154,184],
[183,174,0,156,180,200,155,180,200],
[181,171,184,0,171,187,151,175,167],
[197,164,160,169,0,183,162,168,161],
[142,162,140,153,157,0,138,118,151],
[173,171,185,189,178,202,0,154,182],
[171,186,160,165,172,222,186,0,182],
[173,156,140,173,179,189,158,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,179,179,165,169,166,185,173],
[169,0,176,185,169,187,186,193,174],
[161,164,0,176,168,171,176,199,170],
[161,155,164,0,167,178,174,173,165],
[175,171,172,173,0,201,177,182,170],
[171,153,169,162,139,0,176,162,159],
[174,154,164,166,163,164,0,171,155],
[155,147,141,167,158,178,169,0,163],
[167,166,170,175,170,181,185,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,188,202,146,163,149,186,176],
[172,0,174,152,160,153,168,156,166],
[152,166,0,145,165,198,178,154,185],
[138,188,195,0,145,201,193,184,215],
[194,180,175,195,0,197,150,186,205],
[177,187,142,139,143,0,131,154,168],
[191,172,162,147,190,209,0,204,183],
[154,184,186,156,154,186,136,0,136],
[164,174,155,125,135,172,157,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,169,167,173,186,168,170],
[168,0,170,176,168,162,166,170,177],
[164,170,0,166,164,167,164,168,170],
[171,164,174,0,167,167,153,166,166],
[173,172,176,173,0,170,171,176,168],
[167,178,173,173,170,0,167,169,156],
[154,174,176,187,169,173,0,171,167],
[172,170,172,174,164,171,169,0,161],
[170,163,170,174,172,184,173,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,169,165,170,167,162,160,155],
[179,0,169,164,179,169,165,159,169],
[171,171,0,160,169,166,161,160,173],
[175,176,180,0,180,166,176,174,178],
[170,161,171,160,0,158,174,160,176],
[173,171,174,174,182,0,176,165,179],
[178,175,179,164,166,164,0,168,167],
[180,181,180,166,180,175,172,0,176],
[185,171,167,162,164,161,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,173,181,171,177,174,163],
[167,0,164,164,166,172,179,172,159],
[167,176,0,175,168,182,183,165,174],
[167,176,165,0,173,175,181,164,158],
[159,174,172,167,0,181,180,166,158],
[169,168,158,165,159,0,168,168,153],
[163,161,157,159,160,172,0,159,157],
[166,168,175,176,174,172,181,0,172],
[177,181,166,182,182,187,183,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,163,180,163,188,171,160,169],
[164,0,183,180,190,189,184,174,164],
[177,157,0,186,176,181,173,165,176],
[160,160,154,0,166,163,173,164,162],
[177,150,164,174,0,169,172,170,169],
[152,151,159,177,171,0,167,161,155],
[169,156,167,167,168,173,0,161,176],
[180,166,175,176,170,179,179,0,188],
[171,176,164,178,171,185,164,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,177,162,187,144,181,162,157],
[171,0,174,181,191,159,183,189,166],
[163,166,0,188,190,164,168,153,170],
[178,159,152,0,175,130,176,166,153],
[153,149,150,165,0,146,170,167,155],
[196,181,176,210,194,0,169,172,175],
[159,157,172,164,170,171,0,171,166],
[178,151,187,174,173,168,169,0,169],
[183,174,170,187,185,165,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,184,159,200,192,188,150,180],
[167,0,189,182,194,192,182,167,186],
[156,151,0,158,164,156,152,151,161],
[181,158,182,0,212,192,172,191,180],
[140,146,176,128,0,155,168,155,159],
[148,148,184,148,185,0,180,162,165],
[152,158,188,168,172,160,0,155,178],
[190,173,189,149,185,178,185,0,177],
[160,154,179,160,181,175,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,168,166,160,160,165,157],
[177,0,173,162,179,149,163,185,150],
[174,167,0,157,176,169,157,183,156],
[172,178,183,0,188,165,177,173,168],
[174,161,164,152,0,164,154,166,157],
[180,191,171,175,176,0,168,182,152],
[180,177,183,163,186,172,0,183,173],
[175,155,157,167,174,158,157,0,151],
[183,190,184,172,183,188,167,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,151,162,172,137,167,175,178],
[181,0,147,138,176,145,156,181,190],
[189,193,0,172,205,181,159,194,192],
[178,202,168,0,171,175,174,183,191],
[168,164,135,169,0,158,166,158,178],
[203,195,159,165,182,0,162,180,173],
[173,184,181,166,174,178,0,191,178],
[165,159,146,157,182,160,149,0,168],
[162,150,148,149,162,167,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,162,191,179,163,176,181,170],
[138,0,135,177,148,160,159,153,154],
[178,205,0,192,144,185,167,171,190],
[149,163,148,0,169,158,157,147,170],
[161,192,196,171,0,152,149,159,169],
[177,180,155,182,188,0,157,170,172],
[164,181,173,183,191,183,0,157,179],
[159,187,169,193,181,170,183,0,178],
[170,186,150,170,171,168,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,193,189,169,182,199,189,179],
[155,0,157,161,159,149,181,166,166],
[147,183,0,163,177,177,165,162,166],
[151,179,177,0,160,163,175,154,188],
[171,181,163,180,0,164,206,164,177],
[158,191,163,177,176,0,196,168,171],
[141,159,175,165,134,144,0,164,151],
[151,174,178,186,176,172,176,0,174],
[161,174,174,152,163,169,189,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,165,151,165,156,163,156],
[170,0,164,180,170,178,183,181,166],
[179,176,0,175,168,177,168,171,174],
[175,160,165,0,154,167,156,158,164],
[189,170,172,186,0,173,177,181,176],
[175,162,163,173,167,0,169,172,169],
[184,157,172,184,163,171,0,170,169],
[177,159,169,182,159,168,170,0,170],
[184,174,166,176,164,171,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,165,195,175,183,196,223,190],
[157,0,158,215,158,183,194,192,191],
[175,182,0,188,146,180,202,179,184],
[145,125,152,0,137,158,171,178,183],
[165,182,194,203,0,204,200,187,197],
[157,157,160,182,136,0,193,200,183],
[144,146,138,169,140,147,0,169,153],
[117,148,161,162,153,140,171,0,145],
[150,149,156,157,143,157,187,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,153,172,155,170,171,219,174],
[171,0,138,190,184,186,186,201,127],
[187,202,0,173,183,188,219,232,154],
[168,150,167,0,152,218,186,245,183],
[185,156,157,188,0,155,175,246,109],
[170,154,152,122,185,0,143,231,126],
[169,154,121,154,165,197,0,199,184],
[121,139,108,95,94,109,141,0,95],
[166,213,186,157,231,214,156,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,156,148,171,165,181,176,158],
[188,0,186,177,182,178,182,193,163],
[184,154,0,142,163,156,147,169,158],
[192,163,198,0,180,185,186,196,175],
[169,158,177,160,0,191,152,171,149],
[175,162,184,155,149,0,181,182,159],
[159,158,193,154,188,159,0,185,140],
[164,147,171,144,169,158,155,0,153],
[182,177,182,165,191,181,200,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,178,170,158,164,157,187],
[166,0,175,169,164,161,173,147,181],
[161,165,0,155,182,151,158,161,173],
[162,171,185,0,187,146,173,150,163],
[170,176,158,153,0,153,162,148,186],
[182,179,189,194,187,0,193,169,192],
[176,167,182,167,178,147,0,172,195],
[183,193,179,190,192,171,168,0,193],
[153,159,167,177,154,148,145,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,153,149,140,188,163,161,172],
[193,0,167,177,166,179,196,170,172],
[187,173,0,201,181,200,163,182,186],
[191,163,139,0,159,165,147,171,133],
[200,174,159,181,0,199,179,184,187],
[152,161,140,175,141,0,150,152,158],
[177,144,177,193,161,190,0,179,175],
[179,170,158,169,156,188,161,0,163],
[168,168,154,207,153,182,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,189,204,223,171,189,143,171],
[156,0,173,160,145,168,155,142,138],
[151,167,0,233,153,195,137,155,136],
[136,180,107,0,168,147,170,185,135],
[117,195,187,172,0,150,167,136,135],
[169,172,145,193,190,0,171,143,169],
[151,185,203,170,173,169,0,140,90],
[197,198,185,155,204,197,200,0,104],
[169,202,204,205,205,171,250,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,158,149,162,150,157,173,172],
[185,0,179,151,188,178,149,171,187],
[182,161,0,179,180,181,172,167,164],
[191,189,161,0,194,175,166,185,177],
[178,152,160,146,0,169,149,165,165],
[190,162,159,165,171,0,159,159,176],
[183,191,168,174,191,181,0,176,186],
[167,169,173,155,175,181,164,0,191],
[168,153,176,163,175,164,154,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,176,162,179,199,200,199,192],
[154,0,131,136,147,173,166,168,183],
[164,209,0,176,175,202,188,203,175],
[178,204,164,0,187,188,193,180,191],
[161,193,165,153,0,195,160,188,188],
[141,167,138,152,145,0,165,172,167],
[140,174,152,147,180,175,0,171,179],
[141,172,137,160,152,168,169,0,163],
[148,157,165,149,152,173,161,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,159,174,164,170,169,181,168],
[164,0,171,169,169,177,168,184,170],
[181,169,0,169,174,169,175,192,169],
[166,171,171,0,164,163,170,168,155],
[176,171,166,176,0,167,176,170,178],
[170,163,171,177,173,0,172,192,172],
[171,172,165,170,164,168,0,171,169],
[159,156,148,172,170,148,169,0,160],
[172,170,171,185,162,168,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,171,167,173,173,169,189],
[160,0,157,172,169,167,171,174,165],
[170,183,0,184,180,187,184,170,178],
[169,168,156,0,177,168,176,166,170],
[173,171,160,163,0,157,170,160,170],
[167,173,153,172,183,0,176,166,172],
[167,169,156,164,170,164,0,168,164],
[171,166,170,174,180,174,172,0,182],
[151,175,162,170,170,168,176,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,177,174,181,167,172,164,160],
[162,0,164,169,173,163,167,159,154],
[163,176,0,168,195,168,176,153,160],
[166,171,172,0,162,157,176,165,154],
[159,167,145,178,0,147,176,156,148],
[173,177,172,183,193,0,185,163,165],
[168,173,164,164,164,155,0,161,166],
[176,181,187,175,184,177,179,0,170],
[180,186,180,186,192,175,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,169,161,174,175,171,177],
[168,0,186,173,175,166,176,166,171],
[173,154,0,152,159,158,153,158,151],
[171,167,188,0,165,174,173,175,162],
[179,165,181,175,0,176,177,169,173],
[166,174,182,166,164,0,154,174,162],
[165,164,187,167,163,186,0,183,163],
[169,174,182,165,171,166,157,0,159],
[163,169,189,178,167,178,177,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,189,206,211,203,204,170,193],
[163,0,170,190,174,167,154,174,163],
[151,170,0,180,178,171,173,165,167],
[134,150,160,0,152,150,155,159,148],
[129,166,162,188,0,164,169,165,164],
[137,173,169,190,176,0,166,153,158],
[136,186,167,185,171,174,0,148,155],
[170,166,175,181,175,187,192,0,172],
[147,177,173,192,176,182,185,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,191,155,197,163,176,173,173],
[172,0,177,164,183,182,178,191,169],
[149,163,0,133,167,167,156,200,173],
[185,176,207,0,185,164,175,183,179],
[143,157,173,155,0,161,152,169,152],
[177,158,173,176,179,0,168,180,169],
[164,162,184,165,188,172,0,195,162],
[167,149,140,157,171,160,145,0,158],
[167,171,167,161,188,171,178,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,155,176,196,150,176,178,175],
[168,0,172,184,183,172,178,182,170],
[185,168,0,184,180,170,188,177,174],
[164,156,156,0,176,172,160,167,162],
[144,157,160,164,0,166,161,174,152],
[190,168,170,168,174,0,168,172,166],
[164,162,152,180,179,172,0,183,169],
[162,158,163,173,166,168,157,0,164],
[165,170,166,178,188,174,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,187,187,184,170,177,161,174],
[156,0,168,182,173,160,170,172,167],
[153,172,0,172,156,162,169,152,157],
[153,158,168,0,158,159,164,157,158],
[156,167,184,182,0,170,177,168,160],
[170,180,178,181,170,0,180,165,169],
[163,170,171,176,163,160,0,157,148],
[179,168,188,183,172,175,183,0,173],
[166,173,183,182,180,171,192,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,160,143,163,149,147,183,142],
[170,0,199,158,190,188,155,211,148],
[180,141,0,152,146,143,154,170,171],
[197,182,188,0,170,184,172,185,175],
[177,150,194,170,0,178,168,166,161],
[191,152,197,156,162,0,170,184,144],
[193,185,186,168,172,170,0,172,170],
[157,129,170,155,174,156,168,0,165],
[198,192,169,165,179,196,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,209,184,185,190,160,196,166],
[172,0,181,191,183,168,156,170,183],
[131,159,0,137,117,159,167,176,128],
[156,149,203,0,158,170,139,211,184],
[155,157,223,182,0,158,193,182,198],
[150,172,181,170,182,0,161,202,163],
[180,184,173,201,147,179,0,201,166],
[144,170,164,129,158,138,139,0,129],
[174,157,212,156,142,177,174,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,169,158,157,160,157,156],
[172,0,164,163,166,159,155,165,163],
[169,176,0,161,159,164,167,167,167],
[171,177,179,0,169,157,166,172,156],
[182,174,181,171,0,169,169,172,182],
[183,181,176,183,171,0,162,172,178],
[180,185,173,174,171,178,0,161,164],
[183,175,173,168,168,168,179,0,185],
[184,177,173,184,158,162,176,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,198,193,188,176,173,169,174],
[160,0,175,191,188,176,171,180,178],
[142,165,0,161,172,155,148,149,152],
[147,149,179,0,165,174,171,160,153],
[152,152,168,175,0,175,161,176,180],
[164,164,185,166,165,0,160,156,158],
[167,169,192,169,179,180,0,169,173],
[171,160,191,180,164,184,171,0,166],
[166,162,188,187,160,182,167,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,170,171,172,173,179,181,166],
[185,0,180,169,184,200,187,174,189],
[170,160,0,166,163,172,173,167,160],
[169,171,174,0,161,178,165,156,175],
[168,156,177,179,0,178,183,179,187],
[167,140,168,162,162,0,163,157,169],
[161,153,167,175,157,177,0,164,159],
[159,166,173,184,161,183,176,0,181],
[174,151,180,165,153,171,181,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,161,174,177,173,178,162],
[175,0,160,154,165,200,147,179,171],
[168,180,0,176,173,202,176,193,171],
[179,186,164,0,184,196,191,193,178],
[166,175,167,156,0,197,185,187,187],
[163,140,138,144,143,0,165,170,160],
[167,193,164,149,155,175,0,187,147],
[162,161,147,147,153,170,153,0,157],
[178,169,169,162,153,180,193,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,193,179,179,175,190,184],
[170,0,182,199,171,178,178,176,180],
[169,158,0,182,158,176,178,170,167],
[147,141,158,0,152,159,179,153,179],
[161,169,182,188,0,154,186,165,184],
[161,162,164,181,186,0,184,158,172],
[165,162,162,161,154,156,0,148,173],
[150,164,170,187,175,182,192,0,171],
[156,160,173,161,156,168,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,175,148,163,156,192,158,133],
[134,0,158,128,120,151,158,158,140],
[165,182,0,145,170,155,178,146,154],
[192,212,195,0,184,156,193,169,186],
[177,220,170,156,0,170,189,162,144],
[184,189,185,184,170,0,206,179,189],
[148,182,162,147,151,134,0,164,151],
[182,182,194,171,178,161,176,0,154],
[207,200,186,154,196,151,189,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,170,174,180,174,160,171,167],
[183,0,159,166,170,164,174,163,163],
[170,181,0,193,182,164,184,174,186],
[166,174,147,0,173,176,153,153,173],
[160,170,158,167,0,174,154,178,169],
[166,176,176,164,166,0,151,174,151],
[180,166,156,187,186,189,0,193,172],
[169,177,166,187,162,166,147,0,166],
[173,177,154,167,171,189,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,160,187,192,150,201,177,184],
[162,0,170,189,177,177,202,186,195],
[180,170,0,196,163,164,193,175,182],
[153,151,144,0,177,156,172,165,179],
[148,163,177,163,0,159,191,175,168],
[190,163,176,184,181,0,207,176,171],
[139,138,147,168,149,133,0,141,153],
[163,154,165,175,165,164,199,0,165],
[156,145,158,161,172,169,187,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,148,172,177,173,171,173,168],
[161,0,167,140,155,154,131,187,157],
[192,173,0,163,171,130,148,177,122],
[168,200,177,0,145,168,161,188,170],
[163,185,169,195,0,184,171,199,182],
[167,186,210,172,156,0,140,182,162],
[169,209,192,179,169,200,0,179,160],
[167,153,163,152,141,158,161,0,150],
[172,183,218,170,158,178,180,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,180,188,193,174,156,174,164],
[198,0,161,185,176,197,177,180,191],
[160,179,0,165,167,189,170,145,158],
[152,155,175,0,148,176,137,139,134],
[147,164,173,192,0,169,148,151,163],
[166,143,151,164,171,0,151,158,143],
[184,163,170,203,192,189,0,176,185],
[166,160,195,201,189,182,164,0,175],
[176,149,182,206,177,197,155,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,162,156,153,157,170,159,165],
[180,0,171,170,154,170,166,167,173],
[178,169,0,176,177,169,181,174,172],
[184,170,164,0,150,174,179,164,174],
[187,186,163,190,0,169,189,176,190],
[183,170,171,166,171,0,187,170,178],
[170,174,159,161,151,153,0,165,168],
[181,173,166,176,164,170,175,0,180],
[175,167,168,166,150,162,172,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,157,148,151,153,177,177],
[164,0,187,173,165,164,150,178,168],
[174,153,0,171,167,161,171,175,171],
[183,167,169,0,155,167,160,187,176],
[192,175,173,185,0,166,185,188,167],
[189,176,179,173,174,0,156,187,178],
[187,190,169,180,155,184,0,184,182],
[163,162,165,153,152,153,156,0,177],
[163,172,169,164,173,162,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,193,203,178,172,175,169],
[159,0,180,200,180,190,174,189,181],
[163,160,0,229,191,187,166,203,156],
[147,140,111,0,134,140,142,146,126],
[137,160,149,206,0,156,161,174,161],
[162,150,153,200,184,0,181,205,158],
[168,166,174,198,179,159,0,178,144],
[165,151,137,194,166,135,162,0,134],
[171,159,184,214,179,182,196,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,142,142,147,125,141,179,168],
[190,0,155,196,207,168,200,155,188],
[198,185,0,164,150,138,123,140,159],
[198,144,176,0,185,188,160,167,157],
[193,133,190,155,0,172,163,153,170],
[215,172,202,152,168,0,184,172,180],
[199,140,217,180,177,156,0,178,143],
[161,185,200,173,187,168,162,0,144],
[172,152,181,183,170,160,197,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,174,150,182,161,176,162,157],
[184,0,181,173,174,192,177,168,170],
[166,159,0,165,179,178,186,169,169],
[190,167,175,0,181,188,192,175,179],
[158,166,161,159,0,175,175,164,169],
[179,148,162,152,165,0,163,157,166],
[164,163,154,148,165,177,0,159,161],
[178,172,171,165,176,183,181,0,166],
[183,170,171,161,171,174,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,169,168,191,207,169,173,191],
[182,0,190,197,159,219,222,174,179],
[171,150,0,161,141,175,168,158,148],
[172,143,179,0,138,174,168,149,133],
[149,181,199,202,0,223,188,195,182],
[133,121,165,166,117,0,165,140,150],
[171,118,172,172,152,175,0,170,159],
[167,166,182,191,145,200,170,0,157],
[149,161,192,207,158,190,181,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,187,176,169,177,178,178,174],
[173,0,192,180,180,175,181,169,156],
[153,148,0,164,154,174,158,151,147],
[164,160,176,0,168,163,188,164,160],
[171,160,186,172,0,186,187,173,160],
[163,165,166,177,154,0,173,156,145],
[162,159,182,152,153,167,0,144,158],
[162,171,189,176,167,184,196,0,165],
[166,184,193,180,180,195,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,172,170,172,177,166,198,174],
[183,0,157,182,188,186,164,200,178],
[168,183,0,187,178,179,175,209,178],
[170,158,153,0,169,173,158,184,169],
[168,152,162,171,0,171,166,188,171],
[163,154,161,167,169,0,150,169,169],
[174,176,165,182,174,190,0,198,188],
[142,140,131,156,152,171,142,0,147],
[166,162,162,171,169,171,152,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,127,183,150,201,154,191,191],
[171,0,125,164,136,145,131,156,171],
[213,215,0,205,182,245,164,210,207],
[157,176,135,0,135,176,157,187,186],
[190,204,158,205,0,213,179,208,177],
[139,195,95,164,127,0,130,120,142],
[186,209,176,183,161,210,0,200,191],
[149,184,130,153,132,220,140,0,151],
[149,169,133,154,163,198,149,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,143,162,169,169,156,147,142],
[217,0,172,202,203,197,188,192,161],
[197,168,0,182,184,183,170,183,200],
[178,138,158,0,184,167,150,165,164],
[171,137,156,156,0,168,130,149,142],
[171,143,157,173,172,0,143,147,158],
[184,152,170,190,210,197,0,194,188],
[193,148,157,175,191,193,146,0,173],
[198,179,140,176,198,182,152,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,180,185,184,189,186,194,169],
[131,0,153,163,169,175,157,159,169],
[160,187,0,167,167,175,165,159,163],
[155,177,173,0,170,178,182,161,166],
[156,171,173,170,0,168,170,175,165],
[151,165,165,162,172,0,160,169,168],
[154,183,175,158,170,180,0,166,168],
[146,181,181,179,165,171,174,0,178],
[171,171,177,174,175,172,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,200,174,198,165,192,212,199],
[129,0,150,133,149,148,152,177,137],
[140,190,0,142,176,149,200,168,140],
[166,207,198,0,187,167,199,201,155],
[142,191,164,153,0,160,167,194,166],
[175,192,191,173,180,0,176,187,154],
[148,188,140,141,173,164,0,175,147],
[128,163,172,139,146,153,165,0,123],
[141,203,200,185,174,186,193,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,188,156,166,160,229,177,171],
[141,0,128,133,128,142,170,136,151],
[152,212,0,143,164,189,200,199,151],
[184,207,197,0,183,189,216,213,165],
[174,212,176,157,0,164,217,194,187],
[180,198,151,151,176,0,188,172,178],
[111,170,140,124,123,152,0,152,152],
[163,204,141,127,146,168,188,0,175],
[169,189,189,175,153,162,188,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,231,204,115,180,179,114,162],
[137,0,187,184,109,114,178,141,163],
[109,153,0,133,133,131,178,21,115],
[136,156,207,0,159,201,200,24,159],
[225,231,207,181,0,159,249,184,230],
[160,226,209,139,181,0,228,139,141],
[161,162,162,140,91,112,0,72,140],
[226,199,319,316,156,201,268,0,205],
[178,177,225,181,110,199,200,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,161,157,170,160,168,161,165],
[162,0,159,173,187,182,177,165,178],
[179,181,0,160,174,167,175,183,171],
[183,167,180,0,164,163,159,178,160],
[170,153,166,176,0,179,153,168,161],
[180,158,173,177,161,0,157,159,174],
[172,163,165,181,187,183,0,184,173],
[179,175,157,162,172,181,156,0,168],
[175,162,169,180,179,166,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,159,184,144,176,159,154,168],
[166,0,164,175,169,185,168,173,179],
[181,176,0,182,180,197,175,170,198],
[156,165,158,0,139,179,145,146,161],
[196,171,160,201,0,191,173,175,184],
[164,155,143,161,149,0,147,132,162],
[181,172,165,195,167,193,0,159,190],
[186,167,170,194,165,208,181,0,186],
[172,161,142,179,156,178,150,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,179,175,164,171,175,174],
[165,0,167,170,185,178,156,166,179],
[177,173,0,172,187,162,168,170,164],
[161,170,168,0,194,173,154,185,179],
[165,155,153,146,0,155,148,150,161],
[176,162,178,167,185,0,161,163,175],
[169,184,172,186,192,179,0,171,171],
[165,174,170,155,190,177,169,0,175],
[166,161,176,161,179,165,169,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,164,172,182,166,166,164],
[160,0,160,167,177,170,169,175,169],
[165,180,0,172,188,168,162,167,171],
[176,173,168,0,169,174,176,178,165],
[168,163,152,171,0,159,174,166,175],
[158,170,172,166,181,0,166,173,162],
[174,171,178,164,166,174,0,172,168],
[174,165,173,162,174,167,168,0,165],
[176,171,169,175,165,178,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,173,176,180,175,161,193],
[165,0,174,165,161,182,182,151,170],
[166,166,0,171,162,156,177,159,172],
[167,175,169,0,158,176,171,153,188],
[164,179,178,182,0,209,196,170,201],
[160,158,184,164,131,0,180,159,162],
[165,158,163,169,144,160,0,157,210],
[179,189,181,187,170,181,183,0,158],
[147,170,168,152,139,178,130,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,182,168,166,167,176,168,165],
[176,0,180,171,160,175,183,169,160],
[158,160,0,167,154,156,155,144,149],
[172,169,173,0,166,163,170,174,164],
[174,180,186,174,0,170,173,174,162],
[173,165,184,177,170,0,178,175,171],
[164,157,185,170,167,162,0,178,172],
[172,171,196,166,166,165,162,0,161],
[175,180,191,176,178,169,168,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,109,174,214,196,128,148,215],
[143,0,86,103,190,169,168,105,165],
[231,254,0,169,232,214,191,171,252],
[166,237,171,0,191,216,190,169,213],
[126,150,108,149,0,151,190,128,148],
[144,171,126,124,189,0,145,127,146],
[212,172,149,150,150,195,0,130,213],
[192,235,169,171,212,213,210,0,235],
[125,175,88,127,192,194,127,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,163,164,157,157,156,154],
[171,0,172,170,170,158,167,166,168],
[178,168,0,170,176,180,184,174,177],
[177,170,170,0,167,172,173,172,158],
[176,170,164,173,0,161,162,162,163],
[183,182,160,168,179,0,177,166,170],
[183,173,156,167,178,163,0,161,154],
[184,174,166,168,178,174,179,0,163],
[186,172,163,182,177,170,186,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,174,172,159,160,165,152],
[177,0,182,174,161,167,164,174,164],
[173,158,0,171,166,161,158,175,156],
[166,166,169,0,159,159,150,167,155],
[168,179,174,181,0,170,146,185,170],
[181,173,179,181,170,0,157,179,163],
[180,176,182,190,194,183,0,170,161],
[175,166,165,173,155,161,170,0,156],
[188,176,184,185,170,177,179,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,162,167,185,173,173,171,178],
[177,0,191,181,174,169,168,189,179],
[178,149,0,171,174,187,188,178,166],
[173,159,169,0,176,163,163,188,197],
[155,166,166,164,0,177,150,175,174],
[167,171,153,177,163,0,160,165,161],
[167,172,152,177,190,180,0,171,179],
[169,151,162,152,165,175,169,0,178],
[162,161,174,143,166,179,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,171,178,161,152,179,161],
[173,0,167,183,177,152,170,175,158],
[176,173,0,186,179,169,176,194,172],
[169,157,154,0,174,173,173,185,149],
[162,163,161,166,0,149,158,166,145],
[179,188,171,167,191,0,172,186,178],
[188,170,164,167,182,168,0,193,163],
[161,165,146,155,174,154,147,0,145],
[179,182,168,191,195,162,177,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,156,179,165,164,153,163],
[175,0,172,159,170,169,174,168,156],
[166,168,0,173,154,156,178,155,154],
[184,181,167,0,173,169,182,166,169],
[161,170,186,167,0,173,175,158,163],
[175,171,184,171,167,0,171,169,183],
[176,166,162,158,165,169,0,162,155],
[187,172,185,174,182,171,178,0,162],
[177,184,186,171,177,157,185,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,170,149,126,85,168,149],
[171,0,151,128,107,191,127,105,128],
[168,189,0,146,104,167,168,146,166],
[170,212,194,0,171,211,128,146,148],
[191,233,236,169,0,169,170,168,189],
[214,149,173,129,171,0,151,126,192],
[255,213,172,212,170,189,0,189,170],
[172,235,194,194,172,214,151,0,151],
[191,212,174,192,151,148,170,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,180,157,173,157,195,160,171],
[154,0,158,160,160,142,163,139,170],
[160,182,0,162,170,160,163,177,204],
[183,180,178,0,177,194,180,166,182],
[167,180,170,163,0,153,183,177,176],
[183,198,180,146,187,0,183,183,165],
[145,177,177,160,157,157,0,157,182],
[180,201,163,174,163,157,183,0,163],
[169,170,136,158,164,175,158,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,194,186,190,192,178,193,174],
[184,0,185,170,185,185,180,197,172],
[146,155,0,141,171,170,170,183,163],
[154,170,199,0,165,197,171,185,158],
[150,155,169,175,0,169,163,183,153],
[148,155,170,143,171,0,161,168,165],
[162,160,170,169,177,179,0,169,174],
[147,143,157,155,157,172,171,0,167],
[166,168,177,182,187,175,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,135,181,155,165,156,156,173],
[166,0,178,167,185,184,186,182,191],
[205,162,0,182,187,186,150,195,186],
[159,173,158,0,155,171,162,179,163],
[185,155,153,185,0,192,170,177,182],
[175,156,154,169,148,0,171,162,194],
[184,154,190,178,170,169,0,173,168],
[184,158,145,161,163,178,167,0,153],
[167,149,154,177,158,146,172,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,177,155,165,184,175,164],
[166,0,163,170,159,165,170,174,166],
[176,177,0,179,177,172,180,178,166],
[163,170,161,0,155,159,166,167,172],
[185,181,163,185,0,177,194,187,175],
[175,175,168,181,163,0,181,171,170],
[156,170,160,174,146,159,0,160,158],
[165,166,162,173,153,169,180,0,168],
[176,174,174,168,165,170,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,142,85,85,140,140,84,141],
[256,0,229,171,170,254,226,227,254],
[198,111,0,114,112,197,196,142,197],
[255,169,226,0,197,226,197,197,197],
[255,170,228,143,0,228,198,256,199],
[200,86,143,114,112,0,170,141,171],
[200,114,144,143,142,170,0,172,170],
[256,113,198,143,84,199,168,0,170],
[199,86,143,143,141,169,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,163,177,161,170,171,170],
[168,0,167,168,175,164,182,174,178],
[164,173,0,166,180,152,178,174,166],
[177,172,174,0,182,178,172,175,166],
[163,165,160,158,0,156,172,180,163],
[179,176,188,162,184,0,184,180,180],
[170,158,162,168,168,156,0,166,167],
[169,166,166,165,160,160,174,0,165],
[170,162,174,174,177,160,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,201,150,194,164,146,180,185],
[172,0,181,152,157,155,155,177,165],
[139,159,0,146,157,155,148,194,164],
[190,188,194,0,182,179,175,195,163],
[146,183,183,158,0,153,162,182,193],
[176,185,185,161,187,0,156,186,178],
[194,185,192,165,178,184,0,213,177],
[160,163,146,145,158,154,127,0,163],
[155,175,176,177,147,162,163,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,169,194,167,183,176,170],
[168,0,158,174,181,178,162,162,168],
[166,182,0,167,169,164,167,180,159],
[171,166,173,0,177,175,171,165,172],
[146,159,171,163,0,171,149,157,161],
[173,162,176,165,169,0,174,168,171],
[157,178,173,169,191,166,0,162,155],
[164,178,160,175,183,172,178,0,172],
[170,172,181,168,179,169,185,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,178,178,160,175,177,173,172],
[174,0,183,177,165,179,183,168,177],
[162,157,0,168,167,183,178,168,161],
[162,163,172,0,169,159,152,169,171],
[180,175,173,171,0,166,161,178,176],
[165,161,157,181,174,0,161,175,180],
[163,157,162,188,179,179,0,165,169],
[167,172,172,171,162,165,175,0,176],
[168,163,179,169,164,160,171,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,188,150,144,216,130,161,194],
[173,0,202,139,151,208,187,155,192],
[152,138,0,137,148,186,148,118,155],
[190,201,203,0,159,239,226,172,189],
[196,189,192,181,0,241,178,170,204],
[124,132,154,101,99,0,130,104,154],
[210,153,192,114,162,210,0,145,164],
[179,185,222,168,170,236,195,0,212],
[146,148,185,151,136,186,176,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,162,157,157,138,155,132],
[165,0,176,172,150,157,159,180,143],
[169,164,0,182,157,157,134,139,153],
[178,168,158,0,158,172,174,164,162],
[183,190,183,182,0,192,181,177,167],
[183,183,183,168,148,0,146,166,141],
[202,181,206,166,159,194,0,171,179],
[185,160,201,176,163,174,169,0,170],
[208,197,187,178,173,199,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,144,191,164,177,191,161,174],
[182,0,148,183,130,170,194,165,184],
[196,192,0,208,196,194,198,164,186],
[149,157,132,0,149,170,162,127,143],
[176,210,144,191,0,174,180,170,186],
[163,170,146,170,166,0,190,151,165],
[149,146,142,178,160,150,0,146,156],
[179,175,176,213,170,189,194,0,179],
[166,156,154,197,154,175,184,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,142,163,155,180,146,165],
[173,0,162,138,152,165,149,144,167],
[179,178,0,162,171,169,180,148,190],
[198,202,178,0,182,195,185,170,196],
[177,188,169,158,0,171,171,166,180],
[185,175,171,145,169,0,163,153,173],
[160,191,160,155,169,177,0,149,177],
[194,196,192,170,174,187,191,0,196],
[175,173,150,144,160,167,163,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,172,170,178,194,184,185,205],
[157,0,164,157,163,182,185,163,174],
[168,176,0,166,189,177,177,178,186],
[170,183,174,0,193,175,199,195,203],
[162,177,151,147,0,161,180,187,173],
[146,158,163,165,179,0,157,181,168],
[156,155,163,141,160,183,0,168,165],
[155,177,162,145,153,159,172,0,170],
[135,166,154,137,167,172,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,144,169,165,181,172,166,163],
[130,0,139,155,133,132,150,154,155],
[196,201,0,181,166,176,182,200,188],
[171,185,159,0,162,152,141,182,191],
[175,207,174,178,0,165,180,179,180],
[159,208,164,188,175,0,163,198,175],
[168,190,158,199,160,177,0,187,172],
[174,186,140,158,161,142,153,0,177],
[177,185,152,149,160,165,168,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,156,129,181,164,172,165,181],
[182,0,135,158,170,169,153,157,157],
[184,205,0,186,190,192,167,179,201],
[211,182,154,0,184,177,190,173,174],
[159,170,150,156,0,166,149,176,181],
[176,171,148,163,174,0,153,181,186],
[168,187,173,150,191,187,0,153,184],
[175,183,161,167,164,159,187,0,181],
[159,183,139,166,159,154,156,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,171,172,158,165,161,161,170],
[184,0,171,179,174,176,176,163,189],
[169,169,0,174,165,175,150,163,171],
[168,161,166,0,175,173,172,164,178],
[182,166,175,165,0,178,169,175,181],
[175,164,165,167,162,0,164,159,161],
[179,164,190,168,171,176,0,167,173],
[179,177,177,176,165,181,173,0,186],
[170,151,169,162,159,179,167,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,182,179,184,178,191,166,178],
[194,0,181,162,197,187,182,173,187],
[158,159,0,161,170,167,168,163,159],
[161,178,179,0,195,188,183,159,199],
[156,143,170,145,0,165,175,131,157],
[162,153,173,152,175,0,195,162,176],
[149,158,172,157,165,145,0,146,173],
[174,167,177,181,209,178,194,0,170],
[162,153,181,141,183,164,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,156,156,136,156,155,156,155],
[185,0,159,163,163,176,168,170,150],
[184,181,0,167,169,159,159,157,155],
[184,177,173,0,166,172,166,171,166],
[204,177,171,174,0,167,171,173,174],
[184,164,181,168,173,0,162,169,174],
[185,172,181,174,169,178,0,168,166],
[184,170,183,169,167,171,172,0,156],
[185,190,185,174,166,166,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,179,158,167,153,164,184],
[165,0,170,180,169,164,164,162,176],
[168,170,0,178,174,152,165,170,172],
[161,160,162,0,165,161,165,172,173],
[182,171,166,175,0,174,179,176,179],
[173,176,188,179,166,0,162,177,175],
[187,176,175,175,161,178,0,169,169],
[176,178,170,168,164,163,171,0,177],
[156,164,168,167,161,165,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,172,157,167,177,194,150],
[166,0,161,144,177,172,157,209,153],
[167,179,0,177,182,197,193,206,174],
[168,196,163,0,175,198,164,207,176],
[183,163,158,165,0,194,183,197,163],
[173,168,143,142,146,0,176,209,158],
[163,183,147,176,157,164,0,206,155],
[146,131,134,133,143,131,134,0,114],
[190,187,166,164,177,182,185,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,183,135,68,116,135,134,137],
[205,0,205,157,158,139,158,202,182],
[157,135,0,135,68,228,158,179,158],
[205,183,205,0,160,162,178,205,185],
[272,182,272,180,0,204,156,228,249],
[224,201,112,178,136,0,134,157,159],
[205,182,182,162,184,206,0,160,184],
[206,138,161,135,112,183,180,0,160],
[203,158,182,155,91,181,156,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,151,153,189,176,207,181,159],
[178,0,175,170,181,177,189,183,161],
[189,165,0,205,212,212,177,196,201],
[187,170,135,0,170,156,186,172,155],
[151,159,128,170,0,193,163,177,138],
[164,163,128,184,147,0,194,186,145],
[133,151,163,154,177,146,0,158,158],
[159,157,144,168,163,154,182,0,180],
[181,179,139,185,202,195,182,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,142,187,165,155,166,183,165],
[172,0,166,148,184,159,193,186,169],
[198,174,0,186,180,170,184,180,166],
[153,192,154,0,168,159,184,183,149],
[175,156,160,172,0,127,168,171,151],
[185,181,170,181,213,0,178,201,174],
[174,147,156,156,172,162,0,172,151],
[157,154,160,157,169,139,168,0,143],
[175,171,174,191,189,166,189,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,181,178,172,186,174,169,169],
[171,0,180,179,179,187,175,176,159],
[159,160,0,161,165,172,156,166,153],
[162,161,179,0,170,180,174,176,171],
[168,161,175,170,0,185,177,180,179],
[154,153,168,160,155,0,163,167,160],
[166,165,184,166,163,177,0,178,167],
[171,164,174,164,160,173,162,0,156],
[171,181,187,169,161,180,173,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,164,177,167,150,177,162,190],
[162,0,156,155,154,163,150,140,162],
[176,184,0,183,176,171,164,180,197],
[163,185,157,0,166,160,161,164,179],
[173,186,164,174,0,168,170,175,183],
[190,177,169,180,172,0,163,176,172],
[163,190,176,179,170,177,0,168,203],
[178,200,160,176,165,164,172,0,200],
[150,178,143,161,157,168,137,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,183,137,177,140,159,156,167],
[154,0,172,160,134,183,155,156,164],
[157,168,0,176,130,157,174,140,138],
[203,180,164,0,160,176,162,165,172],
[163,206,210,180,0,187,180,173,160],
[200,157,183,164,153,0,191,162,156],
[181,185,166,178,160,149,0,181,166],
[184,184,200,175,167,178,159,0,195],
[173,176,202,168,180,184,174,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,179,165,175,159,192,183,171],
[131,0,147,164,150,152,166,166,148],
[161,193,0,176,169,156,190,185,159],
[175,176,164,0,172,166,175,185,181],
[165,190,171,168,0,161,174,182,163],
[181,188,184,174,179,0,186,171,168],
[148,174,150,165,166,154,0,169,163],
[157,174,155,155,158,169,171,0,148],
[169,192,181,159,177,172,177,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,188,177,189,176,157,188,199],
[140,0,169,176,183,170,182,178,177],
[152,171,0,141,166,171,167,164,193],
[163,164,199,0,178,188,193,173,175],
[151,157,174,162,0,161,174,140,185],
[164,170,169,152,179,0,205,148,182],
[183,158,173,147,166,135,0,162,171],
[152,162,176,167,200,192,178,0,196],
[141,163,147,165,155,158,169,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,145,175,159,141,188,191,160],
[172,0,151,191,181,168,206,206,176],
[195,189,0,165,187,177,213,219,176],
[165,149,175,0,149,147,198,183,164],
[181,159,153,191,0,152,178,174,151],
[199,172,163,193,188,0,188,203,177],
[152,134,127,142,162,152,0,168,141],
[149,134,121,157,166,137,172,0,139],
[180,164,164,176,189,163,199,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,168,177,171,172,167,174],
[169,0,171,171,178,165,178,177,164],
[179,169,0,167,186,170,178,176,162],
[172,169,173,0,182,163,176,179,164],
[163,162,154,158,0,160,155,168,155],
[169,175,170,177,180,0,170,159,167],
[168,162,162,164,185,170,0,165,153],
[173,163,164,161,172,181,175,0,168],
[166,176,178,176,185,173,187,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,193,177,197,191,194,157,206],
[136,0,168,173,181,196,185,141,206],
[147,172,0,165,170,181,177,185,162],
[163,167,175,0,174,156,193,169,178],
[143,159,170,166,0,151,173,175,168],
[149,144,159,184,189,0,156,153,161],
[146,155,163,147,167,184,0,163,162],
[183,199,155,171,165,187,177,0,187],
[134,134,178,162,172,179,178,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,175,175,168,168,165,172],
[163,0,177,154,168,173,162,149,158],
[166,163,0,154,175,171,171,153,168],
[165,186,186,0,182,172,165,164,174],
[165,172,165,158,0,163,161,176,163],
[172,167,169,168,177,0,171,162,174],
[172,178,169,175,179,169,0,163,171],
[175,191,187,176,164,178,177,0,175],
[168,182,172,166,177,166,169,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,162,149,194,184,206,172,170],
[161,0,175,165,194,171,181,172,176],
[178,165,0,149,190,180,192,162,159],
[191,175,191,0,192,186,194,169,189],
[146,146,150,148,0,149,166,140,154],
[156,169,160,154,191,0,193,146,151],
[134,159,148,146,174,147,0,128,132],
[168,168,178,171,200,194,212,0,179],
[170,164,181,151,186,189,208,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,177,178,170,193,174,187],
[166,0,173,163,161,155,190,174,190],
[161,167,0,160,163,151,185,167,177],
[163,177,180,0,156,166,180,172,187],
[162,179,177,184,0,166,188,175,186],
[170,185,189,174,174,0,183,169,190],
[147,150,155,160,152,157,0,163,171],
[166,166,173,168,165,171,177,0,182],
[153,150,163,153,154,150,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,162,156,165,171,173,178],
[180,0,166,152,157,161,169,168,168],
[182,174,0,179,169,158,180,180,168],
[178,188,161,0,174,179,169,180,173],
[184,183,171,166,0,170,175,169,170],
[175,179,182,161,170,0,180,179,187],
[169,171,160,171,165,160,0,176,165],
[167,172,160,160,171,161,164,0,169],
[162,172,172,167,170,153,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,181,157,173,173,184,170,181],
[172,0,201,174,187,166,191,171,185],
[159,139,0,154,146,153,147,151,165],
[183,166,186,0,161,179,179,168,170],
[167,153,194,179,0,173,177,176,177],
[167,174,187,161,167,0,181,174,180],
[156,149,193,161,163,159,0,160,175],
[170,169,189,172,164,166,180,0,174],
[159,155,175,170,163,160,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,182,178,158,154,175,174],
[162,0,181,176,172,178,169,192,184],
[162,159,0,174,187,170,169,179,187],
[158,164,166,0,170,183,166,190,185],
[162,168,153,170,0,177,173,180,201],
[182,162,170,157,163,0,174,178,188],
[186,171,171,174,167,166,0,166,216],
[165,148,161,150,160,162,174,0,176],
[166,156,153,155,139,152,124,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,170,167,169,173,163,178],
[161,0,175,178,166,182,166,178,170],
[175,165,0,187,167,179,171,172,168],
[170,162,153,0,164,171,165,155,169],
[173,174,173,176,0,171,171,166,156],
[171,158,161,169,169,0,159,163,171],
[167,174,169,175,169,181,0,182,164],
[177,162,168,185,174,177,158,0,179],
[162,170,172,171,184,169,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,183,167,195,178,192,163,180],
[153,0,171,158,187,154,197,189,165],
[157,169,0,152,192,174,210,179,173],
[173,182,188,0,200,168,206,178,179],
[145,153,148,140,0,158,190,155,148],
[162,186,166,172,182,0,199,170,177],
[148,143,130,134,150,141,0,149,130],
[177,151,161,162,185,170,191,0,156],
[160,175,167,161,192,163,210,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,159,155,171,172,168,190],
[177,0,176,171,167,173,161,172,203],
[176,164,0,154,147,151,153,158,199],
[181,169,186,0,157,163,179,178,182],
[185,173,193,183,0,168,175,179,206],
[169,167,189,177,172,0,157,172,199],
[168,179,187,161,165,183,0,163,192],
[172,168,182,162,161,168,177,0,180],
[150,137,141,158,134,141,148,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,146,148,131,134,188,144,145],
[192,0,199,178,194,156,209,199,173],
[194,141,0,164,163,163,166,173,179],
[192,162,176,0,130,163,196,168,170],
[209,146,177,210,0,188,211,202,187],
[206,184,177,177,152,0,165,177,169],
[152,131,174,144,129,175,0,174,152],
[196,141,167,172,138,163,166,0,172],
[195,167,161,170,153,171,188,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,174,167,159,166,160,162],
[178,0,172,184,177,166,175,167,162],
[169,168,0,168,178,150,172,156,148],
[166,156,172,0,175,170,171,159,160],
[173,163,162,165,0,167,162,164,158],
[181,174,190,170,173,0,176,173,171],
[174,165,168,169,178,164,0,157,159],
[180,173,184,181,176,167,183,0,160],
[178,178,192,180,182,169,181,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,163,160,173,173,167,154,156],
[185,0,151,170,177,163,177,163,165],
[177,189,0,173,161,160,161,169,166],
[180,170,167,0,177,169,172,173,161],
[167,163,179,163,0,170,176,172,175],
[167,177,180,171,170,0,172,178,157],
[173,163,179,168,164,168,0,166,165],
[186,177,171,167,168,162,174,0,178],
[184,175,174,179,165,183,175,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,161,179,165,152,175,165],
[168,0,159,166,175,172,158,173,164],
[168,181,0,160,159,164,157,160,154],
[179,174,180,0,167,182,169,178,169],
[161,165,181,173,0,166,145,175,184],
[175,168,176,158,174,0,155,165,167],
[188,182,183,171,195,185,0,177,163],
[165,167,180,162,165,175,163,0,149],
[175,176,186,171,156,173,177,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,164,166,143,176,159,160,154],
[175,0,180,166,164,185,179,167,175],
[176,160,0,163,163,173,168,170,164],
[174,174,177,0,156,185,165,165,157],
[197,176,177,184,0,181,173,166,175],
[164,155,167,155,159,0,156,152,159],
[181,161,172,175,167,184,0,176,174],
[180,173,170,175,174,188,164,0,174],
[186,165,176,183,165,181,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,152,188,169,139,154,190],
[162,0,166,163,180,156,152,155,185],
[164,174,0,175,185,169,159,168,174],
[188,177,165,0,190,188,165,174,199],
[152,160,155,150,0,155,141,143,176],
[171,184,171,152,185,0,184,160,196],
[201,188,181,175,199,156,0,181,173],
[186,185,172,166,197,180,159,0,192],
[150,155,166,141,164,144,167,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,165,179,147,153,149,156,189],
[195,0,163,179,185,172,186,172,201],
[175,177,0,183,144,168,159,168,196],
[161,161,157,0,158,162,159,173,183],
[193,155,196,182,0,180,186,175,185],
[187,168,172,178,160,0,177,175,185],
[191,154,181,181,154,163,0,167,192],
[184,168,172,167,165,165,173,0,189],
[151,139,144,157,155,155,148,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,170,171,181,159,162,169],
[172,0,171,161,177,168,159,170,162],
[174,169,0,169,164,181,165,164,186],
[170,179,171,0,176,172,154,172,167],
[169,163,176,164,0,169,156,166,167],
[159,172,159,168,171,0,146,169,156],
[181,181,175,186,184,194,0,169,189],
[178,170,176,168,174,171,171,0,172],
[171,178,154,173,173,184,151,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,146,168,173,175,166,166,168],
[187,0,159,170,175,177,170,163,169],
[194,181,0,183,186,185,178,165,174],
[172,170,157,0,166,168,157,158,161],
[167,165,154,174,0,167,175,157,156],
[165,163,155,172,173,0,156,166,163],
[174,170,162,183,165,184,0,176,166],
[174,177,175,182,183,174,164,0,167],
[172,171,166,179,184,177,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,183,175,185,177,191,158],
[155,0,154,162,153,178,169,149,141],
[166,186,0,171,180,178,181,165,149],
[157,178,169,0,169,179,180,168,154],
[165,187,160,171,0,189,177,169,175],
[155,162,162,161,151,0,159,148,140],
[163,171,159,160,163,181,0,166,148],
[149,191,175,172,171,192,174,0,154],
[182,199,191,186,165,200,192,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,214,205,203,169,229,179,198],
[129,0,179,194,140,158,201,174,168],
[126,161,0,148,148,149,190,148,126],
[135,146,192,0,183,183,190,183,175],
[137,200,192,157,0,142,180,160,127],
[171,182,191,157,198,0,162,183,168],
[111,139,150,150,160,178,0,150,152],
[161,166,192,157,180,157,190,0,164],
[142,172,214,165,213,172,188,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,145,163,169,143,165,174,132],
[177,0,132,154,156,126,155,161,150],
[195,208,0,175,178,171,163,193,188],
[177,186,165,0,152,147,173,188,167],
[171,184,162,188,0,153,154,177,147],
[197,214,169,193,187,0,184,212,186],
[175,185,177,167,186,156,0,186,171],
[166,179,147,152,163,128,154,0,144],
[208,190,152,173,193,154,169,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,164,168,167,174,174,174,177],
[155,0,164,168,168,168,149,172,167],
[176,176,0,174,172,176,164,169,178],
[172,172,166,0,156,172,159,166,176],
[173,172,168,184,0,171,168,165,174],
[166,172,164,168,169,0,162,181,169],
[166,191,176,181,172,178,0,176,183],
[166,168,171,174,175,159,164,0,173],
[163,173,162,164,166,171,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,174,164,160,186,163,182,169],
[182,0,186,163,179,179,177,182,172],
[166,154,0,151,181,166,158,183,155],
[176,177,189,0,166,186,169,178,160],
[180,161,159,174,0,174,150,182,161],
[154,161,174,154,166,0,150,167,160],
[177,163,182,171,190,190,0,181,176],
[158,158,157,162,158,173,159,0,153],
[171,168,185,180,179,180,164,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,159,169,168,163,175,170],
[176,0,186,164,185,167,181,193,174],
[173,154,0,166,168,171,171,182,174],
[181,176,174,0,174,166,166,186,177],
[171,155,172,166,0,170,168,174,165],
[172,173,169,174,170,0,184,167,182],
[177,159,169,174,172,156,0,183,176],
[165,147,158,154,166,173,157,0,167],
[170,166,166,163,175,158,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,179,174,188,170,180,179,179],
[178,0,164,188,194,168,190,181,168],
[161,176,0,179,178,156,168,162,171],
[166,152,161,0,171,157,180,144,154],
[152,146,162,169,0,160,160,157,181],
[170,172,184,183,180,0,186,186,181],
[160,150,172,160,180,154,0,144,176],
[161,159,178,196,183,154,196,0,170],
[161,172,169,186,159,159,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,140,176,177,157,151,178,172],
[176,0,160,188,217,207,204,165,185],
[200,180,0,153,204,178,197,177,188],
[164,152,187,0,181,181,183,165,172],
[163,123,136,159,0,159,175,155,171],
[183,133,162,159,181,0,164,171,189],
[189,136,143,157,165,176,0,169,186],
[162,175,163,175,185,169,171,0,172],
[168,155,152,168,169,151,154,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,180,176,174,167,167,168],
[172,0,189,182,175,173,175,160,192],
[171,151,0,172,173,158,165,160,170],
[160,158,168,0,162,152,161,165,164],
[164,165,167,178,0,155,164,163,180],
[166,167,182,188,185,0,166,158,181],
[173,165,175,179,176,174,0,173,174],
[173,180,180,175,177,182,167,0,177],
[172,148,170,176,160,159,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,184,184,178,177,188,178,179],
[172,0,166,171,181,181,183,187,169],
[156,174,0,188,180,179,183,190,202],
[156,169,152,0,170,159,156,163,183],
[162,159,160,170,0,180,166,187,167],
[163,159,161,181,160,0,155,177,167],
[152,157,157,184,174,185,0,182,173],
[162,153,150,177,153,163,158,0,177],
[161,171,138,157,173,173,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,156,154,152,151,173,169,152],
[171,0,167,159,164,144,174,164,163],
[184,173,0,172,171,148,163,181,174],
[186,181,168,0,164,150,164,180,156],
[188,176,169,176,0,150,172,167,163],
[189,196,192,190,190,0,187,199,170],
[167,166,177,176,168,153,0,175,175],
[171,176,159,160,173,141,165,0,152],
[188,177,166,184,177,170,165,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,189,188,195,169,174,204,197],
[146,0,165,155,159,169,146,175,187],
[151,175,0,170,170,154,154,174,203],
[152,185,170,0,157,163,176,176,188],
[145,181,170,183,0,175,158,200,208],
[171,171,186,177,165,0,157,192,182],
[166,194,186,164,182,183,0,192,188],
[136,165,166,164,140,148,148,0,162],
[143,153,137,152,132,158,152,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,177,170,177,165,169,188],
[166,0,173,179,171,158,161,168,170],
[164,167,0,168,161,186,169,179,175],
[163,161,172,0,150,166,155,165,170],
[170,169,179,190,0,196,187,174,194],
[163,182,154,174,144,0,171,173,163],
[175,179,171,185,153,169,0,158,168],
[171,172,161,175,166,167,182,0,180],
[152,170,165,170,146,177,172,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,150,176,175,181,166,175,160],
[155,0,167,166,167,179,156,160,166],
[190,173,0,181,190,190,182,192,170],
[164,174,159,0,185,190,164,160,164],
[165,173,150,155,0,184,164,156,164],
[159,161,150,150,156,0,150,145,150],
[174,184,158,176,176,190,0,170,174],
[165,180,148,180,184,195,170,0,173],
[180,174,170,176,176,190,166,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,193,197,159,169,170,194,169],
[140,0,163,183,151,148,160,184,137],
[147,177,0,190,175,163,172,170,144],
[143,157,150,0,164,148,111,173,155],
[181,189,165,176,0,176,169,205,181],
[171,192,177,192,164,0,174,214,156],
[170,180,168,229,171,166,0,187,159],
[146,156,170,167,135,126,153,0,137],
[171,203,196,185,159,184,181,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,215,185,140,169,192,159,165],
[157,0,190,158,175,187,170,182,174],
[125,150,0,142,131,128,159,140,121],
[155,182,198,0,171,156,197,151,127],
[200,165,209,169,0,182,204,170,175],
[171,153,212,184,158,0,186,167,173],
[148,170,181,143,136,154,0,164,122],
[181,158,200,189,170,173,176,0,162],
[175,166,219,213,165,167,218,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,169,170,177,160,150,170],
[179,0,180,174,178,166,172,185,161],
[170,160,0,172,161,166,158,160,171],
[171,166,168,0,164,170,151,171,183],
[170,162,179,176,0,169,153,169,160],
[163,174,174,170,171,0,163,167,155],
[180,168,182,189,187,177,0,179,183],
[190,155,180,169,171,173,161,0,157],
[170,179,169,157,180,185,157,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,174,164,182,205,183,176,156],
[149,0,167,161,159,191,189,163,174],
[166,173,0,171,182,194,181,155,168],
[176,179,169,0,179,187,198,170,165],
[158,181,158,161,0,177,170,161,177],
[135,149,146,153,163,0,170,140,125],
[157,151,159,142,170,170,0,169,157],
[164,177,185,170,179,200,171,0,151],
[184,166,172,175,163,215,183,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,169,146,166,165,131,185],
[177,0,186,192,173,184,173,164,197],
[174,154,0,167,160,167,151,168,191],
[171,148,173,0,150,171,158,151,179],
[194,167,180,190,0,178,185,185,206],
[174,156,173,169,162,0,167,140,182],
[175,167,189,182,155,173,0,159,187],
[209,176,172,189,155,200,181,0,199],
[155,143,149,161,134,158,153,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,181,184,180,182,170,170],
[176,0,176,177,186,170,191,176,176],
[167,164,0,191,193,173,176,173,178],
[159,163,149,0,181,157,175,170,161],
[156,154,147,159,0,166,164,164,158],
[160,170,167,183,174,0,176,158,168],
[158,149,164,165,176,164,0,166,156],
[170,164,167,170,176,182,174,0,175],
[170,164,162,179,182,172,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,168,173,188,169,164,171],
[175,0,176,151,162,177,163,168,158],
[173,164,0,169,176,180,165,175,163],
[172,189,171,0,183,194,167,171,181],
[167,178,164,157,0,177,168,182,160],
[152,163,160,146,163,0,158,158,144],
[171,177,175,173,172,182,0,168,155],
[176,172,165,169,158,182,172,0,171],
[169,182,177,159,180,196,185,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,161,182,175,147,158,148,184],
[183,0,161,177,181,164,187,160,163],
[179,179,0,184,195,184,192,179,169],
[158,163,156,0,159,164,167,145,161],
[165,159,145,181,0,165,163,149,166],
[193,176,156,176,175,0,171,195,167],
[182,153,148,173,177,169,0,154,159],
[192,180,161,195,191,145,186,0,182],
[156,177,171,179,174,173,181,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,151,157,146,155,183,155,189],
[167,0,162,181,128,167,199,138,167],
[189,178,0,180,179,168,193,157,172],
[183,159,160,0,168,172,197,170,170],
[194,212,161,172,0,190,201,166,176],
[185,173,172,168,150,0,203,178,201],
[157,141,147,143,139,137,0,137,166],
[185,202,183,170,174,162,203,0,193],
[151,173,168,170,164,139,174,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,188,182,173,172,160,172],
[166,0,181,173,168,160,173,156,169],
[163,159,0,166,158,167,175,157,159],
[152,167,174,0,175,183,160,167,164],
[158,172,182,165,0,178,173,158,169],
[167,180,173,157,162,0,157,156,168],
[168,167,165,180,167,183,0,174,172],
[180,184,183,173,182,184,166,0,178],
[168,171,181,176,171,172,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,146,165,155,171,169,148],
[173,0,148,158,181,155,137,163,164],
[184,192,0,161,184,181,179,180,158],
[194,182,179,0,183,190,166,193,176],
[175,159,156,157,0,168,159,176,154],
[185,185,159,150,172,0,172,183,166],
[169,203,161,174,181,168,0,188,152],
[171,177,160,147,164,157,152,0,152],
[192,176,182,164,186,174,188,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,170,170,183,173,188,171,173],
[154,0,170,155,172,181,175,169,172],
[170,170,0,174,194,170,170,179,172],
[170,185,166,0,195,171,198,164,176],
[157,168,146,145,0,155,177,167,162],
[167,159,170,169,185,0,195,171,174],
[152,165,170,142,163,145,0,172,157],
[169,171,161,176,173,169,168,0,178],
[167,168,168,164,178,166,183,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,167,178,155,156,174,175],
[172,0,166,178,180,165,170,179,182],
[170,174,0,171,186,161,167,175,183],
[173,162,169,0,173,167,166,169,183],
[162,160,154,167,0,173,156,166,165],
[185,175,179,173,167,0,186,182,186],
[184,170,173,174,184,154,0,183,178],
[166,161,165,171,174,158,157,0,175],
[165,158,157,157,175,154,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,161,158,162,141,151,161,148],
[180,0,168,180,167,152,180,185,162],
[179,172,0,169,168,160,172,165,151],
[182,160,171,0,170,156,166,169,151],
[178,173,172,170,0,155,171,168,166],
[199,188,180,184,185,0,190,201,170],
[189,160,168,174,169,150,0,168,160],
[179,155,175,171,172,139,172,0,143],
[192,178,189,189,174,170,180,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,166,187,162,162,162,174],
[166,0,173,169,175,178,171,168,164],
[176,167,0,170,197,190,154,187,185],
[174,171,170,0,166,165,163,172,154],
[153,165,143,174,0,166,161,169,143],
[178,162,150,175,174,0,179,159,171],
[178,169,186,177,179,161,0,154,168],
[178,172,153,168,171,181,186,0,192],
[166,176,155,186,197,169,172,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,157,158,157,172,169,160],
[166,0,169,191,176,188,182,183,182],
[175,171,0,168,160,174,177,165,151],
[183,149,172,0,155,164,167,165,170],
[182,164,180,185,0,189,171,169,185],
[183,152,166,176,151,0,147,154,170],
[168,158,163,173,169,193,0,172,179],
[171,157,175,175,171,186,168,0,164],
[180,158,189,170,155,170,161,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,189,170,166,176,168,166],
[179,0,165,183,188,189,191,173,162],
[167,175,0,174,170,164,177,169,163],
[151,157,166,0,156,173,164,162,162],
[170,152,170,184,0,166,173,157,172],
[174,151,176,167,174,0,171,151,168],
[164,149,163,176,167,169,0,171,169],
[172,167,171,178,183,189,169,0,163],
[174,178,177,178,168,172,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,200,198,195,217,163,176,216],
[142,0,178,163,140,158,198,105,173],
[140,162,0,197,161,182,166,106,104],
[142,177,143,0,193,128,90,124,158],
[145,200,179,147,0,144,183,145,141],
[123,182,158,212,196,0,144,160,138],
[177,142,174,250,157,196,0,139,191],
[164,235,234,216,195,180,201,0,197],
[124,167,236,182,199,202,149,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,161,155,160,132,137,158,162],
[203,0,187,181,190,177,172,168,186],
[179,153,0,153,182,143,145,144,172],
[185,159,187,0,165,156,140,158,162],
[180,150,158,175,0,143,141,162,186],
[208,163,197,184,197,0,154,167,187],
[203,168,195,200,199,186,0,176,196],
[182,172,196,182,178,173,164,0,195],
[178,154,168,178,154,153,144,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,174,177,167,176,183,169,182],
[164,0,167,170,164,172,180,174,162],
[166,173,0,170,159,163,176,168,175],
[163,170,170,0,154,164,169,160,167],
[173,176,181,186,0,166,188,171,174],
[164,168,177,176,174,0,182,169,168],
[157,160,164,171,152,158,0,164,162],
[171,166,172,180,169,171,176,0,168],
[158,178,165,173,166,172,178,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,181,165,170,164,170,167],
[168,0,188,195,201,176,202,184,187],
[166,152,0,163,178,165,192,155,193],
[159,145,177,0,183,176,168,174,172],
[175,139,162,157,0,162,170,169,183],
[170,164,175,164,178,0,186,176,206],
[176,138,148,172,170,154,0,165,188],
[170,156,185,166,171,164,175,0,181],
[173,153,147,168,157,134,152,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,154,172,173,170,170,170],
[172,0,178,167,161,169,165,176,153],
[177,162,0,161,154,165,170,162,158],
[186,173,179,0,179,169,170,171,172],
[168,179,186,161,0,176,161,169,164],
[167,171,175,171,164,0,179,173,174],
[170,175,170,170,179,161,0,173,166],
[170,164,178,169,171,167,167,0,159],
[170,187,182,168,176,166,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,164,173,162,163,164,157],
[177,0,184,163,166,174,168,165,167],
[175,156,0,166,161,171,175,162,155],
[176,177,174,0,170,164,180,169,173],
[167,174,179,170,0,163,169,169,169],
[178,166,169,176,177,0,181,175,174],
[177,172,165,160,171,159,0,159,157],
[176,175,178,171,171,165,181,0,171],
[183,173,185,167,171,166,183,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,181,181,171,168,173,163],
[161,0,140,160,150,162,158,157,166],
[167,200,0,177,153,174,190,196,151],
[159,180,163,0,155,174,169,162,176],
[159,190,187,185,0,189,194,171,180],
[169,178,166,166,151,0,170,169,168],
[172,182,150,171,146,170,0,171,161],
[167,183,144,178,169,171,169,0,159],
[177,174,189,164,160,172,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,173,169,167,171,173,171],
[167,0,172,166,165,166,163,170,158],
[181,168,0,174,163,170,166,169,161],
[167,174,166,0,155,159,161,166,165],
[171,175,177,185,0,166,161,184,171],
[173,174,170,181,174,0,166,172,163],
[169,177,174,179,179,174,0,179,165],
[167,170,171,174,156,168,161,0,168],
[169,182,179,175,169,177,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,190,179,167,192,190,183,150],
[162,0,191,166,163,166,172,172,165],
[150,149,0,149,168,161,156,147,110],
[161,174,191,0,174,184,193,175,178],
[173,177,172,166,0,166,171,170,150],
[148,174,179,156,174,0,163,159,137],
[150,168,184,147,169,177,0,166,145],
[157,168,193,165,170,181,174,0,163],
[190,175,230,162,190,203,195,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,155,114,150,139,153,162,153],
[162,0,133,108,143,127,142,147,151],
[185,207,0,167,167,166,158,143,182],
[226,232,173,0,186,182,180,169,166],
[190,197,173,154,0,164,155,187,167],
[201,213,174,158,176,0,192,197,154],
[187,198,182,160,185,148,0,187,186],
[178,193,197,171,153,143,153,0,170],
[187,189,158,174,173,186,154,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,183,129,148,157,145,138,136],
[184,0,193,164,169,163,145,139,173],
[157,147,0,139,169,163,158,133,171],
[211,176,201,0,170,173,149,137,187],
[192,171,171,170,0,148,155,138,152],
[183,177,177,167,192,0,143,145,186],
[195,195,182,191,185,197,0,170,202],
[202,201,207,203,202,195,170,0,213],
[204,167,169,153,188,154,138,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,145,155,162,148,148,152,151],
[187,0,150,164,176,142,179,150,148],
[195,190,0,189,191,168,177,160,161],
[185,176,151,0,176,161,169,154,166],
[178,164,149,164,0,156,170,136,145],
[192,198,172,179,184,0,175,152,171],
[192,161,163,171,170,165,0,164,156],
[188,190,180,186,204,188,176,0,163],
[189,192,179,174,195,169,184,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,189,166,172,192,186,155,169],
[157,0,169,165,139,161,178,140,148],
[151,171,0,172,161,189,189,164,151],
[174,175,168,0,175,163,176,166,175],
[168,201,179,165,0,180,186,167,175],
[148,179,151,177,160,0,191,163,168],
[154,162,151,164,154,149,0,157,147],
[185,200,176,174,173,177,183,0,169],
[171,192,189,165,165,172,193,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,170,171,170,236,129,193,170],
[149,0,235,193,192,172,130,171,215],
[170,105,0,172,170,150,107,171,171],
[169,147,168,0,213,169,169,151,148],
[170,148,170,127,0,193,128,149,172],
[104,168,190,171,147,0,169,129,169],
[211,210,233,171,212,171,0,171,169],
[147,169,169,189,191,211,169,0,170],
[170,125,169,192,168,171,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,147,163,157,162,149,163,149],
[199,0,167,170,176,177,177,183,173],
[193,173,0,175,177,192,162,181,180],
[177,170,165,0,160,172,159,174,161],
[183,164,163,180,0,175,176,172,169],
[178,163,148,168,165,0,161,164,159],
[191,163,178,181,164,179,0,172,172],
[177,157,159,166,168,176,168,0,163],
[191,167,160,179,171,181,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,153,165,173,176,173,158,180],
[149,0,132,154,147,160,156,146,151],
[187,208,0,170,198,196,177,168,178],
[175,186,170,0,183,192,163,184,163],
[167,193,142,157,0,173,155,160,168],
[164,180,144,148,167,0,150,153,172],
[167,184,163,177,185,190,0,172,176],
[182,194,172,156,180,187,168,0,180],
[160,189,162,177,172,168,164,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,166,155,193,172,162,180,163],
[155,0,163,152,178,157,155,146,147],
[174,177,0,169,185,153,162,171,192],
[185,188,171,0,191,167,165,161,174],
[147,162,155,149,0,148,155,161,162],
[168,183,187,173,192,0,171,184,184],
[178,185,178,175,185,169,0,159,180],
[160,194,169,179,179,156,181,0,154],
[177,193,148,166,178,156,160,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,175,176,179,162,174,170],
[175,0,161,172,170,162,173,165,171],
[166,179,0,186,181,169,168,174,172],
[165,168,154,0,165,172,156,158,178],
[164,170,159,175,0,175,164,165,172],
[161,178,171,168,165,0,154,160,164],
[178,167,172,184,176,186,0,171,170],
[166,175,166,182,175,180,169,0,181],
[170,169,168,162,168,176,170,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,98,172,148,147,148,173,147],
[143,0,97,144,144,120,96,144,147],
[242,243,0,192,221,147,172,197,245],
[168,196,148,0,195,122,170,221,172],
[192,196,119,145,0,145,146,172,171],
[193,220,193,218,195,0,169,243,220],
[192,244,168,170,194,171,0,195,218],
[167,196,143,119,168,97,145,0,146],
[193,193,95,168,169,120,122,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,161,182,165,174,174,189,157],
[178,0,188,186,166,183,170,178,154],
[179,152,0,162,159,170,164,188,154],
[158,154,178,0,175,174,160,165,166],
[175,174,181,165,0,185,164,167,168],
[166,157,170,166,155,0,161,174,153],
[166,170,176,180,176,179,0,183,174],
[151,162,152,175,173,166,157,0,142],
[183,186,186,174,172,187,166,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,155,171,180,166,167,179,163],
[182,0,174,173,176,174,190,191,162],
[185,166,0,173,192,179,183,185,180],
[169,167,167,0,180,176,160,177,158],
[160,164,148,160,0,179,145,165,161],
[174,166,161,164,161,0,163,153,166],
[173,150,157,180,195,177,0,163,135],
[161,149,155,163,175,187,177,0,168],
[177,178,160,182,179,174,205,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,191,172,149,165,173,195,152],
[155,0,198,170,135,170,154,197,148],
[149,142,0,167,124,154,142,162,132],
[168,170,173,0,134,188,148,210,146],
[191,205,216,206,0,201,168,218,190],
[175,170,186,152,139,0,169,186,155],
[167,186,198,192,172,171,0,192,162],
[145,143,178,130,122,154,148,0,143],
[188,192,208,194,150,185,178,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,194,194,160,177,193,197],
[161,0,165,181,178,173,187,169,192],
[160,175,0,186,175,175,175,191,195],
[146,159,154,0,162,156,164,167,172],
[146,162,165,178,0,156,154,175,179],
[180,167,165,184,184,0,166,161,176],
[163,153,165,176,186,174,0,164,183],
[147,171,149,173,165,179,176,0,180],
[143,148,145,168,161,164,157,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,159,187,175,180,170,177],
[175,0,175,178,178,153,179,170,165],
[178,165,0,181,179,171,178,170,181],
[181,162,159,0,167,159,178,160,179],
[153,162,161,173,0,154,165,158,152],
[165,187,169,181,186,0,161,172,181],
[160,161,162,162,175,179,0,162,189],
[170,170,170,180,182,168,178,0,173],
[163,175,159,161,188,159,151,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,128,151,147,147,174,165,182],
[173,0,172,145,157,175,206,161,178],
[212,168,0,188,181,180,171,185,173],
[189,195,152,0,174,177,202,216,176],
[193,183,159,166,0,171,177,183,159],
[193,165,160,163,169,0,185,163,164],
[166,134,169,138,163,155,0,158,141],
[175,179,155,124,157,177,182,0,169],
[158,162,167,164,181,176,199,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,159,200,170,153,179,178,184],
[155,0,156,187,111,147,158,165,154],
[181,184,0,181,154,154,184,190,153],
[140,153,159,0,162,157,164,139,152],
[170,229,186,178,0,172,193,185,169],
[187,193,186,183,168,0,175,168,161],
[161,182,156,176,147,165,0,162,166],
[162,175,150,201,155,172,178,0,175],
[156,186,187,188,171,179,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,159,167,172,164,165,186,175],
[165,0,165,160,162,168,166,173,178],
[181,175,0,167,177,174,169,193,167],
[173,180,173,0,170,155,158,175,161],
[168,178,163,170,0,167,161,190,174],
[176,172,166,185,173,0,159,184,171],
[175,174,171,182,179,181,0,199,169],
[154,167,147,165,150,156,141,0,163],
[165,162,173,179,166,169,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,159,162,171,171,181,177],
[163,0,173,144,149,172,155,178,169],
[165,167,0,169,170,172,167,179,172],
[181,196,171,0,169,187,183,179,176],
[178,191,170,171,0,182,169,186,182],
[169,168,168,153,158,0,165,183,167],
[169,185,173,157,171,175,0,190,190],
[159,162,161,161,154,157,150,0,160],
[163,171,168,164,158,173,150,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,157,175,152,183,140,130,170],
[189,0,156,149,155,190,156,159,161],
[183,184,0,154,166,193,147,174,159],
[165,191,186,0,166,188,154,155,176],
[188,185,174,174,0,185,171,157,149],
[157,150,147,152,155,0,135,164,142],
[200,184,193,186,169,205,0,172,164],
[210,181,166,185,183,176,168,0,169],
[170,179,181,164,191,198,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,165,185,193,157,172,165,167],
[181,0,162,210,202,188,180,175,189],
[175,178,0,203,203,178,161,177,164],
[155,130,137,0,178,162,157,158,169],
[147,138,137,162,0,150,141,151,161],
[183,152,162,178,190,0,154,155,171],
[168,160,179,183,199,186,0,186,178],
[175,165,163,182,189,185,154,0,197],
[173,151,176,171,179,169,162,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,161,194,174,171,212,180,190],
[145,0,131,180,199,140,187,142,184],
[179,209,0,201,187,174,208,168,209],
[146,160,139,0,167,148,164,172,156],
[166,141,153,173,0,149,186,141,139],
[169,200,166,192,191,0,183,138,176],
[128,153,132,176,154,157,0,172,141],
[160,198,172,168,199,202,168,0,184],
[150,156,131,184,201,164,199,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,149,112,149,152,75,188,225],
[151,0,151,150,189,152,152,228,226],
[191,189,0,113,150,115,152,189,226],
[228,190,227,0,226,152,191,191,340],
[191,151,190,114,0,189,191,152,114],
[188,188,225,188,151,0,189,226,188],
[265,188,188,149,149,151,0,226,188],
[152,112,151,149,188,114,114,0,224],
[115,114,114,0,226,152,152,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,169,165,161,171,169,164],
[180,0,175,179,179,165,176,172,166],
[173,165,0,160,174,171,180,174,166],
[171,161,180,0,177,163,178,173,164],
[175,161,166,163,0,165,171,175,155],
[179,175,169,177,175,0,179,175,173],
[169,164,160,162,169,161,0,163,166],
[171,168,166,167,165,165,177,0,160],
[176,174,174,176,185,167,174,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,174,161,151,167,162,151,161],
[166,0,171,154,155,160,181,150,168],
[166,169,0,165,151,150,167,154,165],
[179,186,175,0,159,168,160,151,171],
[189,185,189,181,0,175,180,162,178],
[173,180,190,172,165,0,185,173,183],
[178,159,173,180,160,155,0,153,173],
[189,190,186,189,178,167,187,0,183],
[179,172,175,169,162,157,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,170,168,191,177,158,203],
[162,0,156,172,168,166,163,148,183],
[171,184,0,185,159,187,186,176,181],
[170,168,155,0,178,181,176,152,177],
[172,172,181,162,0,171,177,153,172],
[149,174,153,159,169,0,177,170,176],
[163,177,154,164,163,163,0,154,188],
[182,192,164,188,187,170,186,0,189],
[137,157,159,163,168,164,152,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,177,174,151,171,193,165],
[162,0,159,186,153,153,170,179,170],
[171,181,0,176,157,174,174,184,173],
[163,154,164,0,148,177,184,180,177],
[166,187,183,192,0,158,183,172,180],
[189,187,166,163,182,0,186,170,172],
[169,170,166,156,157,154,0,165,165],
[147,161,156,160,168,170,175,0,164],
[175,170,167,163,160,168,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,160,174,170,180,173,170,178],
[167,0,144,155,165,182,156,157,173],
[180,196,0,170,182,185,158,172,199],
[166,185,170,0,170,178,168,157,176],
[170,175,158,170,0,174,160,169,176],
[160,158,155,162,166,0,159,162,166],
[167,184,182,172,180,181,0,166,201],
[170,183,168,183,171,178,174,0,201],
[162,167,141,164,164,174,139,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,171,188,176,164,178,172,177],
[159,0,155,157,170,173,180,156,160],
[169,185,0,167,182,174,180,179,164],
[152,183,173,0,183,174,201,181,176],
[164,170,158,157,0,162,179,177,174],
[176,167,166,166,178,0,178,167,140],
[162,160,160,139,161,162,0,157,138],
[168,184,161,159,163,173,183,0,179],
[163,180,176,164,166,200,202,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,180,164,181,157,167,179],
[177,0,187,177,162,178,169,173,173],
[162,153,0,162,165,180,170,164,178],
[160,163,178,0,168,181,177,172,176],
[176,178,175,172,0,182,174,172,165],
[159,162,160,159,158,0,162,168,179],
[183,171,170,163,166,178,0,164,186],
[173,167,176,168,168,172,176,0,177],
[161,167,162,164,175,161,154,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,255,255,255,170,170,170,255],
[170,0,340,170,85,170,85,170,170],
[85,0,0,170,85,0,85,85,85],
[85,170,170,0,85,85,0,85,170],
[85,255,255,255,0,170,85,85,255],
[170,170,340,255,170,0,170,255,255],
[170,255,255,340,255,170,0,85,340],
[170,170,255,255,255,85,255,0,255],
[85,170,255,170,85,85,0,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,146,146,195,195,243,147,194],
[243,0,193,195,194,292,242,147,97],
[194,147,0,146,146,243,194,98,97],
[194,145,194,0,194,292,145,147,145],
[145,146,194,146,0,243,242,98,97],
[145,48,97,48,97,0,97,49,48],
[97,98,146,195,98,243,0,147,97],
[193,193,242,193,242,291,193,0,145],
[146,243,243,195,243,292,243,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,183,171,158,178,170,164,178],
[170,0,172,179,171,175,172,158,168],
[157,168,0,179,174,174,171,164,176],
[169,161,161,0,155,173,178,163,172],
[182,169,166,185,0,180,188,178,184],
[162,165,166,167,160,0,168,149,156],
[170,168,169,162,152,172,0,156,158],
[176,182,176,177,162,191,184,0,169],
[162,172,164,168,156,184,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,143,154,172,168,162,166,165],
[174,0,167,175,177,184,177,191,175],
[197,173,0,178,165,193,153,183,166],
[186,165,162,0,172,183,144,176,175],
[168,163,175,168,0,185,146,183,168],
[172,156,147,157,155,0,154,164,163],
[178,163,187,196,194,186,0,189,171],
[174,149,157,164,157,176,151,0,156],
[175,165,174,165,172,177,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,185,173,178,165,182,171],
[158,0,172,175,171,165,180,179,156],
[170,168,0,186,166,182,175,174,176],
[155,165,154,0,175,163,163,171,177],
[167,169,174,165,0,169,163,170,173],
[162,175,158,177,171,0,163,173,174],
[175,160,165,177,177,177,0,179,164],
[158,161,166,169,170,167,161,0,174],
[169,184,164,163,167,166,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,150,150,178,161,179,182],
[178,0,181,164,154,195,177,188,172],
[166,159,0,168,164,178,163,175,184],
[190,176,172,0,166,179,165,198,181],
[190,186,176,174,0,195,162,179,179],
[162,145,162,161,145,0,172,164,139],
[179,163,177,175,178,168,0,191,184],
[161,152,165,142,161,176,149,0,169],
[158,168,156,159,161,201,156,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,181,171,177,166,159,182,173],
[169,0,175,183,165,189,178,193,186],
[159,165,0,165,164,172,169,185,171],
[169,157,175,0,162,169,174,180,180],
[163,175,176,178,0,175,167,193,169],
[174,151,168,171,165,0,173,181,170],
[181,162,171,166,173,167,0,177,176],
[158,147,155,160,147,159,163,0,149],
[167,154,169,160,171,170,164,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,166,176,175,171,176,169],
[167,0,166,167,168,176,175,167,173],
[164,174,0,171,183,181,174,171,168],
[174,173,169,0,178,173,183,170,179],
[164,172,157,162,0,184,163,171,171],
[165,164,159,167,156,0,164,162,172],
[169,165,166,157,177,176,0,169,172],
[164,173,169,170,169,178,171,0,165],
[171,167,172,161,169,168,168,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,142,119,155,157,144,138,160],
[171,0,189,156,121,182,171,122,139],
[198,151,0,185,162,157,137,153,138],
[221,184,155,0,180,158,150,173,123],
[185,219,178,160,0,195,174,176,170],
[183,158,183,182,145,0,184,139,163],
[196,169,203,190,166,156,0,162,137],
[202,218,187,167,164,201,178,0,145],
[180,201,202,217,170,177,203,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,174,166,165,162,146,172],
[170,0,179,165,177,180,159,178,174],
[178,161,0,173,165,160,165,159,161],
[166,175,167,0,161,172,164,143,162],
[174,163,175,179,0,175,178,154,174],
[175,160,180,168,165,0,170,153,177],
[178,181,175,176,162,170,0,164,187],
[194,162,181,197,186,187,176,0,193],
[168,166,179,178,166,163,153,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,174,183,173,187,178,171,174],
[177,0,175,173,159,165,159,159,182],
[166,165,0,168,165,157,158,154,168],
[157,167,172,0,163,164,159,164,173],
[167,181,175,177,0,173,174,159,186],
[153,175,183,176,167,0,176,165,170],
[162,181,182,181,166,164,0,159,169],
[169,181,186,176,181,175,181,0,185],
[166,158,172,167,154,170,171,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,166,172,174,165,160,168,174],
[159,0,155,157,169,167,154,172,160],
[174,185,0,177,194,166,159,178,166],
[168,183,163,0,183,176,178,173,171],
[166,171,146,157,0,152,151,148,160],
[175,173,174,164,188,0,168,169,177],
[180,186,181,162,189,172,0,171,166],
[172,168,162,167,192,171,169,0,170],
[166,180,174,169,180,163,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,176,176,164,165,170,157],
[169,0,157,171,164,158,157,162,173],
[171,183,0,176,174,177,168,175,166],
[164,169,164,0,183,160,171,166,158],
[164,176,166,157,0,160,155,155,161],
[176,182,163,180,180,0,169,164,166],
[175,183,172,169,185,171,0,174,188],
[170,178,165,174,185,176,166,0,167],
[183,167,174,182,179,174,152,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,154,166,188,165,170,144,156],
[164,0,154,157,185,168,145,144,147],
[186,186,0,185,178,159,167,165,175],
[174,183,155,0,173,146,151,172,160],
[152,155,162,167,0,145,145,147,156],
[175,172,181,194,195,0,180,180,159],
[170,195,173,189,195,160,0,167,165],
[196,196,175,168,193,160,173,0,167],
[184,193,165,180,184,181,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,159,191,178,162,154,172,177],
[178,0,179,183,162,173,163,173,175],
[181,161,0,183,181,172,183,169,183],
[149,157,157,0,142,150,139,155,171],
[162,178,159,198,0,167,151,162,164],
[178,167,168,190,173,0,164,172,180],
[186,177,157,201,189,176,0,191,184],
[168,167,171,185,178,168,149,0,177],
[163,165,157,169,176,160,156,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,154,162,176,163,172,176],
[175,0,187,171,181,174,171,175,163],
[172,153,0,150,147,190,159,144,160],
[186,169,190,0,150,182,169,174,183],
[178,159,193,190,0,207,168,194,168],
[164,166,150,158,133,0,140,148,154],
[177,169,181,171,172,200,0,182,181],
[168,165,196,166,146,192,158,0,180],
[164,177,180,157,172,186,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,180,185,173,167,178,175,177],
[157,0,153,179,156,135,165,150,138],
[160,187,0,172,172,160,174,163,160],
[155,161,168,0,151,153,163,166,149],
[167,184,168,189,0,167,199,175,167],
[173,205,180,187,173,0,180,176,168],
[162,175,166,177,141,160,0,148,153],
[165,190,177,174,165,164,192,0,169],
[163,202,180,191,173,172,187,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,176,176,171,156,169,173],
[166,0,178,161,170,164,169,159,169],
[161,162,0,156,164,162,150,147,151],
[164,179,184,0,175,166,158,164,165],
[164,170,176,165,0,168,161,162,163],
[169,176,178,174,172,0,160,154,164],
[184,171,190,182,179,180,0,175,166],
[171,181,193,176,178,186,165,0,180],
[167,171,189,175,177,176,174,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,167,148,163,183,145,147],
[180,0,164,170,164,176,189,155,163],
[170,176,0,185,160,181,185,170,160],
[173,170,155,0,156,172,169,153,164],
[192,176,180,184,0,184,189,157,177],
[177,164,159,168,156,0,170,144,165],
[157,151,155,171,151,170,0,156,153],
[195,185,170,187,183,196,184,0,177],
[193,177,180,176,163,175,187,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,169,191,177,183,176,171,174],
[155,0,143,153,150,148,139,149,159],
[171,197,0,182,168,176,177,159,200],
[149,187,158,0,163,168,151,163,178],
[163,190,172,177,0,160,161,166,187],
[157,192,164,172,180,0,185,170,176],
[164,201,163,189,179,155,0,166,179],
[169,191,181,177,174,170,174,0,189],
[166,181,140,162,153,164,161,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,160,178,166,159,156,177,190],
[177,0,161,186,177,173,176,168,199],
[180,179,0,195,165,175,186,168,176],
[162,154,145,0,161,153,144,150,169],
[174,163,175,179,0,151,164,176,174],
[181,167,165,187,189,0,169,160,177],
[184,164,154,196,176,171,0,183,198],
[163,172,172,190,164,180,157,0,187],
[150,141,164,171,166,163,142,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,163,160,166,171,168,148,186],
[164,0,165,176,163,187,172,160,188],
[177,175,0,165,170,185,186,196,178],
[180,164,175,0,170,182,178,160,186],
[174,177,170,170,0,180,190,172,200],
[169,153,155,158,160,0,170,154,175],
[172,168,154,162,150,170,0,172,171],
[192,180,144,180,168,186,168,0,194],
[154,152,162,154,140,165,169,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,166,159,163,178,152,148,175],
[181,0,177,156,177,179,157,176,174],
[174,163,0,175,183,169,161,171,181],
[181,184,165,0,175,178,181,179,197],
[177,163,157,165,0,163,150,155,179],
[162,161,171,162,177,0,157,152,192],
[188,183,179,159,190,183,0,179,179],
[192,164,169,161,185,188,161,0,173],
[165,166,159,143,161,148,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,158,162,177,205,161,177,166],
[196,0,169,181,180,201,164,186,158],
[182,171,0,178,173,188,164,179,162],
[178,159,162,0,168,179,156,169,157],
[163,160,167,172,0,179,161,182,134],
[135,139,152,161,161,0,143,145,141],
[179,176,176,184,179,197,0,195,170],
[163,154,161,171,158,195,145,0,154],
[174,182,178,183,206,199,170,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,180,164,146,187,145,157,161],
[159,0,170,144,144,136,174,175,184],
[160,170,0,162,189,138,165,191,182],
[176,196,178,0,151,166,166,194,141],
[194,196,151,189,0,171,211,200,173],
[153,204,202,174,169,0,151,185,200],
[195,166,175,174,129,189,0,162,168],
[183,165,149,146,140,155,178,0,173],
[179,156,158,199,167,140,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,215,198,181,184,199,205,190],
[179,0,177,190,212,166,192,222,221],
[125,163,0,167,172,147,168,166,172],
[142,150,173,0,180,124,204,156,150],
[159,128,168,160,0,151,168,182,150],
[156,174,193,216,189,0,198,194,191],
[141,148,172,136,172,142,0,168,142],
[135,118,174,184,158,146,172,0,166],
[150,119,168,190,190,149,198,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,174,170,159,169,163,170],
[179,0,166,164,175,162,161,171,174],
[169,174,0,171,174,171,175,171,171],
[166,176,169,0,165,183,173,166,155],
[170,165,166,175,0,172,153,160,156],
[181,178,169,157,168,0,181,173,173],
[171,179,165,167,187,159,0,163,169],
[177,169,169,174,180,167,177,0,180],
[170,166,169,185,184,167,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,154,171,171,172,182,180,152],
[172,0,163,158,162,172,170,174,151],
[186,177,0,160,157,159,164,187,167],
[169,182,180,0,172,169,161,174,171],
[169,178,183,168,0,194,174,187,175],
[168,168,181,171,146,0,149,176,171],
[158,170,176,179,166,191,0,195,169],
[160,166,153,166,153,164,145,0,167],
[188,189,173,169,165,169,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,155,136,144,135,158,158,134],
[203,0,178,149,160,167,164,184,162],
[185,162,0,177,184,173,157,192,162],
[204,191,163,0,183,165,183,210,165],
[196,180,156,157,0,174,150,170,134],
[205,173,167,175,166,0,175,192,155],
[182,176,183,157,190,165,0,189,170],
[182,156,148,130,170,148,151,0,126],
[206,178,178,175,206,185,170,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,178,166,190,174,155,174,165],
[176,0,183,172,180,186,170,185,170],
[162,157,0,159,171,181,161,165,169],
[174,168,181,0,177,174,166,175,172],
[150,160,169,163,0,173,151,173,159],
[166,154,159,166,167,0,162,174,156],
[185,170,179,174,189,178,0,184,169],
[166,155,175,165,167,166,156,0,158],
[175,170,171,168,181,184,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,160,185,172,158,159,181],
[182,0,179,191,169,193,170,188,169],
[174,161,0,196,199,184,187,160,165],
[180,149,144,0,183,178,174,167,155],
[155,171,141,157,0,176,165,157,160],
[168,147,156,162,164,0,165,159,154],
[182,170,153,166,175,175,0,151,176],
[181,152,180,173,183,181,189,0,170],
[159,171,175,185,180,186,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,158,164,174,158,164,171],
[177,0,161,173,171,181,163,172,172],
[177,179,0,163,174,170,169,173,172],
[182,167,177,0,171,185,168,162,180],
[176,169,166,169,0,182,179,177,186],
[166,159,170,155,158,0,169,162,169],
[182,177,171,172,161,171,0,162,175],
[176,168,167,178,163,178,178,0,179],
[169,168,168,160,154,171,165,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,179,157,159,149,173,145,139],
[195,0,204,175,175,169,187,177,154],
[161,136,0,159,147,137,152,139,147],
[183,165,181,0,194,162,169,174,174],
[181,165,193,146,0,143,171,168,153],
[191,171,203,178,197,0,193,173,164],
[167,153,188,171,169,147,0,159,149],
[195,163,201,166,172,167,181,0,166],
[201,186,193,166,187,176,191,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,175,172,178,158,176,166,168],
[164,0,168,164,161,163,158,164,149],
[165,172,0,176,172,175,174,173,169],
[168,176,164,0,178,158,167,175,168],
[162,179,168,162,0,169,162,156,167],
[182,177,165,182,171,0,170,185,178],
[164,182,166,173,178,170,0,169,167],
[174,176,167,165,184,155,171,0,177],
[172,191,171,172,173,162,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,178,172,172,151,178,177],
[166,0,151,164,156,167,174,180,160],
[179,189,0,152,175,175,179,194,205],
[162,176,188,0,186,194,166,195,199],
[168,184,165,154,0,171,160,183,174],
[168,173,165,146,169,0,181,171,182],
[189,166,161,174,180,159,0,181,192],
[162,160,146,145,157,169,159,0,177],
[163,180,135,141,166,158,148,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,172,142,167,159,154,150,165],
[159,0,132,138,152,147,152,148,133],
[168,208,0,150,177,171,161,154,169],
[198,202,190,0,177,177,157,180,168],
[173,188,163,163,0,149,158,154,155],
[181,193,169,163,191,0,160,182,167],
[186,188,179,183,182,180,0,165,179],
[190,192,186,160,186,158,175,0,182],
[175,207,171,172,185,173,161,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,153,172,171,155,168,164,160],
[169,0,166,152,179,168,174,166,167],
[187,174,0,172,187,172,180,173,164],
[168,188,168,0,169,163,182,181,174],
[169,161,153,171,0,150,169,172,172],
[185,172,168,177,190,0,173,173,179],
[172,166,160,158,171,167,0,182,159],
[176,174,167,159,168,167,158,0,178],
[180,173,176,166,168,161,181,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,187,144,158,164,155,183,134],
[205,0,192,179,191,197,127,184,169],
[153,148,0,151,128,150,153,168,101],
[196,161,189,0,184,147,132,127,130],
[182,149,212,156,0,219,148,187,179],
[176,143,190,193,121,0,175,171,118],
[185,213,187,208,192,165,0,197,156],
[157,156,172,213,153,169,143,0,140],
[206,171,239,210,161,222,184,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,161,169,149,138,176,124,134],
[206,0,173,174,177,183,177,141,151],
[179,167,0,163,145,156,187,142,146],
[171,166,177,0,158,163,181,137,151],
[191,163,195,182,0,185,169,169,174],
[202,157,184,177,155,0,193,134,154],
[164,163,153,159,171,147,0,138,157],
[216,199,198,203,171,206,202,0,170],
[206,189,194,189,166,186,183,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,184,163,168,156,165,167,164],
[187,0,194,165,187,187,172,186,174],
[156,146,0,153,170,159,166,170,152],
[177,175,187,0,190,182,170,193,157],
[172,153,170,150,0,163,164,172,147],
[184,153,181,158,177,0,173,181,172],
[175,168,174,170,176,167,0,182,162],
[173,154,170,147,168,159,158,0,150],
[176,166,188,183,193,168,178,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,174,172,169,182,171,183],
[160,0,169,166,164,179,189,180,162],
[163,171,0,168,164,174,184,184,170],
[166,174,172,0,165,180,185,183,163],
[168,176,176,175,0,188,188,191,178],
[171,161,166,160,152,0,181,167,170],
[158,151,156,155,152,159,0,169,155],
[169,160,156,157,149,173,171,0,153],
[157,178,170,177,162,170,185,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,152,149,147,153,155,148,161],
[193,0,176,179,180,168,170,168,181],
[188,164,0,170,176,176,162,167,171],
[191,161,170,0,162,180,161,166,171],
[193,160,164,178,0,184,171,176,173],
[187,172,164,160,156,0,167,166,165],
[185,170,178,179,169,173,0,180,166],
[192,172,173,174,164,174,160,0,179],
[179,159,169,169,167,175,174,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,170,164,172,184,155,174],
[178,0,169,164,163,169,171,180,170],
[169,171,0,167,155,157,175,169,161],
[170,176,173,0,156,167,184,160,164],
[176,177,185,184,0,174,185,159,181],
[168,171,183,173,166,0,180,160,173],
[156,169,165,156,155,160,0,151,160],
[185,160,171,180,181,180,189,0,173],
[166,170,179,176,159,167,180,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,173,150,154,134,154,162,156],
[184,0,182,174,177,163,183,177,166],
[167,158,0,157,148,143,159,162,159],
[190,166,183,0,178,177,169,193,193],
[186,163,192,162,0,164,168,195,170],
[206,177,197,163,176,0,171,200,190],
[186,157,181,171,172,169,0,187,172],
[178,163,178,147,145,140,153,0,160],
[184,174,181,147,170,150,168,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 340, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_340.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,343,254,317,331,286,307,286,267],
[208,0,237,272,287,247,295,272,251],
[297,314,0,320,328,311,269,296,274],
[234,279,231,0,238,249,223,249,272],
[220,264,223,313,0,228,240,249,248],
[265,304,240,302,323,0,261,313,245],
[244,256,282,328,311,290,0,286,310],
[265,279,255,302,302,238,265,0,240],
[284,300,277,279,303,306,241,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,290,283,262,267,288,293,267],
[260,0,267,254,269,248,263,258,238],
[261,284,0,280,256,278,289,284,264],
[268,297,271,0,277,267,278,263,254],
[289,282,295,274,0,261,295,288,275],
[284,303,273,284,290,0,292,285,284],
[263,288,262,273,256,259,0,278,272],
[258,293,267,288,263,266,273,0,261],
[284,313,287,297,276,267,279,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,266,283,278,271,266,277,270],
[274,0,269,274,274,248,263,256,276],
[285,282,0,276,260,278,270,275,268],
[268,277,275,0,270,262,271,266,273],
[273,277,291,281,0,281,259,272,277],
[280,303,273,289,270,0,276,274,276],
[285,288,281,280,292,275,0,279,283],
[274,295,276,285,279,277,272,0,281],
[281,275,283,278,274,275,268,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,224,273,278,273,297,229],
[281,0,330,280,294,271,288,293,292],
[265,221,0,242,287,274,265,319,261],
[327,271,309,0,293,249,285,298,288],
[278,257,264,258,0,269,248,292,266],
[273,280,277,302,282,0,253,313,281],
[278,263,286,266,303,298,0,307,273],
[254,258,232,253,259,238,244,0,284],
[322,259,290,263,285,270,278,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,288,270,254,293,292,279,267],
[270,0,290,266,282,279,261,312,282],
[263,261,0,248,266,275,262,290,249],
[281,285,303,0,273,303,286,301,249],
[297,269,285,278,0,262,277,278,243],
[258,272,276,248,289,0,253,273,258],
[259,290,289,265,274,298,0,292,283],
[272,239,261,250,273,278,259,0,261],
[284,269,302,302,308,293,268,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,265,300,280,260,283,249,248],
[299,0,283,305,293,274,301,269,269],
[286,268,0,308,289,267,273,254,280],
[251,246,243,0,274,257,255,245,239],
[271,258,262,277,0,263,262,227,223],
[291,277,284,294,288,0,279,271,251],
[268,250,278,296,289,272,0,248,230],
[302,282,297,306,324,280,303,0,261],
[303,282,271,312,328,300,321,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,274,297,282,271,266,292,295],
[258,0,261,263,257,271,265,269,271],
[277,290,0,265,288,277,271,270,263],
[254,288,286,0,284,276,265,274,278],
[269,294,263,267,0,274,260,267,267],
[280,280,274,275,277,0,262,270,274],
[285,286,280,286,291,289,0,289,275],
[259,282,281,277,284,281,262,0,274],
[256,280,288,273,284,277,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,295,191,249,279,252,239,166],
[303,0,337,140,278,246,350,268,258],
[256,214,0,207,291,271,156,156,228],
[360,411,344,0,331,392,357,270,367],
[302,273,260,220,0,342,305,217,315],
[272,305,280,159,209,0,260,284,210],
[299,201,395,194,246,291,0,253,276],
[312,283,395,281,334,267,298,0,273],
[385,293,323,184,236,341,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,272,267,258,254,265,272,272],
[293,0,279,289,267,262,288,274,292],
[279,272,0,287,262,282,260,276,265],
[284,262,264,0,265,264,264,292,275],
[293,284,289,286,0,273,279,292,273],
[297,289,269,287,278,0,275,285,279],
[286,263,291,287,272,276,0,289,287],
[279,277,275,259,259,266,262,0,276],
[279,259,286,276,278,272,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,288,287,313,311,308,270,298],
[244,0,245,262,252,264,279,256,295],
[263,306,0,296,290,299,303,298,314],
[264,289,255,0,267,283,279,247,308],
[238,299,261,284,0,267,283,251,276],
[240,287,252,268,284,0,269,250,275],
[243,272,248,272,268,282,0,274,284],
[281,295,253,304,300,301,277,0,301],
[253,256,237,243,275,276,267,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,273,266,266,263,247,193,277],
[289,0,263,275,287,279,278,267,289],
[278,288,0,312,281,263,286,276,307],
[285,276,239,0,285,266,288,186,265],
[285,264,270,266,0,247,281,238,307],
[288,272,288,285,304,0,306,258,278],
[304,273,265,263,270,245,0,229,275],
[358,284,275,365,313,293,322,0,345],
[274,262,244,286,244,273,276,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,294,272,280,266,283,265,265],
[260,0,264,261,284,277,263,253,264],
[257,287,0,273,263,275,266,263,266],
[279,290,278,0,284,281,272,265,259],
[271,267,288,267,0,266,269,279,260],
[285,274,276,270,285,0,249,263,280],
[268,288,285,279,282,302,0,264,269],
[286,298,288,286,272,288,287,0,268],
[286,287,285,292,291,271,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,296,251,298,281,244,266,295],
[248,0,253,266,268,250,232,250,262],
[255,298,0,250,287,221,257,244,269],
[300,285,301,0,260,285,268,289,331],
[253,283,264,291,0,246,277,258,266],
[270,301,330,266,305,0,250,267,312],
[307,319,294,283,274,301,0,280,277],
[285,301,307,262,293,284,271,0,258],
[256,289,282,220,285,239,274,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,277,299,246,268,255,239,297],
[283,0,245,296,278,302,258,258,249],
[274,306,0,265,322,276,288,276,279],
[252,255,286,0,274,282,218,278,307],
[305,273,229,277,0,296,251,251,282],
[283,249,275,269,255,0,291,292,245],
[296,293,263,333,300,260,0,252,290],
[312,293,275,273,300,259,299,0,296],
[254,302,272,244,269,306,261,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,278,295,310,293,286,276,264],
[250,0,265,290,274,277,268,280,278],
[273,286,0,286,264,281,281,268,271],
[256,261,265,0,281,278,285,297,268],
[241,277,287,270,0,289,282,270,289],
[258,274,270,273,262,0,272,273,281],
[265,283,270,266,269,279,0,267,261],
[275,271,283,254,281,278,284,0,274],
[287,273,280,283,262,270,290,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,272,256,278,288,247,281,264],
[290,0,260,271,268,307,269,251,254],
[279,291,0,269,274,277,268,271,248],
[295,280,282,0,292,291,280,294,257],
[273,283,277,259,0,288,251,272,253],
[263,244,274,260,263,0,255,265,258],
[304,282,283,271,300,296,0,294,284],
[270,300,280,257,279,286,257,0,264],
[287,297,303,294,298,293,267,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,274,284,301,302,285,283,305],
[252,0,265,261,259,265,273,258,294],
[277,286,0,274,274,270,281,272,283],
[267,290,277,0,305,286,279,283,290],
[250,292,277,246,0,272,277,251,286],
[249,286,281,265,279,0,261,268,271],
[266,278,270,272,274,290,0,259,277],
[268,293,279,268,300,283,292,0,281],
[246,257,268,261,265,280,274,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,242,285,282,252,229,283,253],
[292,0,295,314,268,302,236,278,276],
[309,256,0,314,309,278,259,272,298],
[266,237,237,0,264,256,244,246,293],
[269,283,242,287,0,259,228,219,249],
[299,249,273,295,292,0,269,246,287],
[322,315,292,307,323,282,0,243,289],
[268,273,279,305,332,305,308,0,259],
[298,275,253,258,302,264,262,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,276,268,319,316,296,283,337],
[261,0,248,287,298,290,291,265,287],
[275,303,0,298,298,292,277,272,297],
[283,264,253,0,314,273,289,293,313],
[232,253,253,237,0,249,260,290,278],
[235,261,259,278,302,0,309,290,298],
[255,260,274,262,291,242,0,285,290],
[268,286,279,258,261,261,266,0,309],
[214,264,254,238,273,253,261,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,251,251,264,241,296,293,245],
[298,0,294,290,283,278,320,288,253],
[300,257,0,286,293,321,285,311,277],
[300,261,265,0,286,263,306,293,267],
[287,268,258,265,0,276,298,273,270],
[310,273,230,288,275,0,295,275,255],
[255,231,266,245,253,256,0,267,235],
[258,263,240,258,278,276,284,0,240],
[306,298,274,284,281,296,316,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,299,272,284,272,261,273,300],
[277,0,270,260,279,264,271,272,300],
[252,281,0,265,275,272,263,269,275],
[279,291,286,0,279,287,270,289,295],
[267,272,276,272,0,267,266,280,292],
[279,287,279,264,284,0,276,274,300],
[290,280,288,281,285,275,0,278,279],
[278,279,282,262,271,277,273,0,270],
[251,251,276,256,259,251,272,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,339,266,298,235,339,301,315,301],
[212,0,270,304,270,273,256,292,290],
[285,281,0,304,290,353,271,340,286],
[253,247,247,0,276,311,265,302,282],
[316,281,261,275,0,305,296,319,266],
[212,278,198,240,246,0,223,306,207],
[250,295,280,286,255,328,0,341,340],
[236,259,211,249,232,245,210,0,240],
[250,261,265,269,285,344,211,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,262,282,267,278,259,255,265],
[313,0,310,300,286,302,274,303,309],
[289,241,0,284,254,275,283,285,291],
[269,251,267,0,269,247,260,255,272],
[284,265,297,282,0,268,252,284,286],
[273,249,276,304,283,0,249,257,267],
[292,277,268,291,299,302,0,286,301],
[296,248,266,296,267,294,265,0,300],
[286,242,260,279,265,284,250,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,307,217,252,255,282,250,246],
[272,0,245,222,262,274,224,248,246],
[244,306,0,282,322,263,269,267,312],
[334,329,269,0,309,325,278,280,274],
[299,289,229,242,0,279,219,271,268],
[296,277,288,226,272,0,296,271,270],
[269,327,282,273,332,255,0,313,244],
[301,303,284,271,280,280,238,0,241],
[305,305,239,277,283,281,307,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,293,338,334,328,337,310,275],
[274,0,231,333,336,273,311,290,327],
[258,320,0,304,326,297,305,304,307],
[213,218,247,0,315,274,286,263,273],
[217,215,225,236,0,217,243,246,300],
[223,278,254,277,334,0,333,352,256],
[214,240,246,265,308,218,0,270,264],
[241,261,247,288,305,199,281,0,306],
[276,224,244,278,251,295,287,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,267,268,274,287,294,264,273],
[291,0,277,267,285,291,305,285,288],
[284,274,0,284,268,287,292,268,283],
[283,284,267,0,270,307,299,272,264],
[277,266,283,281,0,303,280,279,290],
[264,260,264,244,248,0,277,265,265],
[257,246,259,252,271,274,0,269,280],
[287,266,283,279,272,286,282,0,275],
[278,263,268,287,261,286,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,280,299,279,271,272,289,294],
[244,0,266,259,262,256,238,269,267],
[271,285,0,275,255,287,282,271,294],
[252,292,276,0,260,250,260,262,284],
[272,289,296,291,0,290,285,287,296],
[280,295,264,301,261,0,271,269,309],
[279,313,269,291,266,280,0,275,305],
[262,282,280,289,264,282,276,0,291],
[257,284,257,267,255,242,246,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,257,270,266,264,259,248],
[283,0,272,295,269,268,258,274,265],
[283,279,0,274,279,247,256,277,261],
[294,256,277,0,272,269,268,257,248],
[281,282,272,279,0,270,276,283,272],
[285,283,304,282,281,0,274,290,284],
[287,293,295,283,275,277,0,280,270],
[292,277,274,294,268,261,271,0,256],
[303,286,290,303,279,267,281,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,310,263,244,266,209,245,257],
[299,0,324,261,280,299,284,290,284],
[241,227,0,244,233,251,261,231,231],
[288,290,307,0,264,307,246,277,255],
[307,271,318,287,0,328,264,285,277],
[285,252,300,244,223,0,259,263,243],
[342,267,290,305,287,292,0,291,291],
[306,261,320,274,266,288,260,0,266],
[294,267,320,296,274,308,260,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,356,231,338,344,545,350,314,442],
[195,0,170,279,216,411,269,86,268],
[320,381,0,483,380,471,362,230,471],
[213,272,68,0,220,414,221,179,273],
[207,335,171,331,0,364,169,236,330],
[6,140,80,137,187,0,71,143,180],
[201,282,189,330,382,480,0,298,314],
[237,465,321,372,315,408,253,0,362],
[109,283,80,278,221,371,237,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,226,234,237,261,251,281,262],
[326,0,272,318,306,299,288,295,287],
[325,279,0,281,274,309,280,291,306],
[317,233,270,0,282,278,266,292,263],
[314,245,277,269,0,301,304,271,292],
[290,252,242,273,250,0,283,281,267],
[300,263,271,285,247,268,0,293,302],
[270,256,260,259,280,270,258,0,269],
[289,264,245,288,259,284,249,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,292,288,275,285,273,296,268],
[261,0,282,277,278,280,274,265,265],
[259,269,0,275,263,274,272,267,264],
[263,274,276,0,290,273,272,281,281],
[276,273,288,261,0,302,280,280,278],
[266,271,277,278,249,0,284,272,273],
[278,277,279,279,271,267,0,277,281],
[255,286,284,270,271,279,274,0,264],
[283,286,287,270,273,278,270,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,265,261,236,240,267,260,283],
[319,0,266,277,258,262,299,306,299],
[286,285,0,258,283,255,297,283,292],
[290,274,293,0,323,289,321,317,374],
[315,293,268,228,0,248,269,299,293],
[311,289,296,262,303,0,318,291,332],
[284,252,254,230,282,233,0,258,282],
[291,245,268,234,252,260,293,0,299],
[268,252,259,177,258,219,269,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,277,273,288,277,292,270],
[260,0,288,289,292,275,269,300,262],
[272,263,0,283,254,256,281,256,248],
[274,262,268,0,257,265,275,272,265],
[278,259,297,294,0,266,285,289,270],
[263,276,295,286,285,0,301,289,285],
[274,282,270,276,266,250,0,296,275],
[259,251,295,279,262,262,255,0,250],
[281,289,303,286,281,266,276,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,262,275,270,273,274,261,255],
[261,0,279,264,288,269,291,274,279],
[289,272,0,261,287,257,268,277,262],
[276,287,290,0,292,281,276,268,282],
[281,263,264,259,0,265,279,271,266],
[278,282,294,270,286,0,275,275,267],
[277,260,283,275,272,276,0,262,270],
[290,277,274,283,280,276,289,0,274],
[296,272,289,269,285,284,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,260,258,281,281,264,280],
[283,0,272,259,272,272,274,275,266],
[297,279,0,271,276,289,295,276,292],
[291,292,280,0,264,275,287,259,278],
[293,279,275,287,0,286,284,274,280],
[270,279,262,276,265,0,300,270,271],
[270,277,256,264,267,251,0,277,275],
[287,276,275,292,277,281,274,0,281],
[271,285,259,273,271,280,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,297,315,308,289,295,278,269],
[264,0,281,313,283,287,274,297,297],
[254,270,0,303,279,295,276,274,286],
[236,238,248,0,263,257,260,248,234],
[243,268,272,288,0,282,263,270,273],
[262,264,256,294,269,0,271,264,249],
[256,277,275,291,288,280,0,265,286],
[273,254,277,303,281,287,286,0,269],
[282,254,265,317,278,302,265,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,276,245,286,332,291,294,308],
[240,0,218,275,295,307,285,272,299],
[275,333,0,277,323,319,304,299,280],
[306,276,274,0,321,346,273,327,278],
[265,256,228,230,0,337,300,262,305],
[219,244,232,205,214,0,232,217,256],
[260,266,247,278,251,319,0,273,294],
[257,279,252,224,289,334,278,0,290],
[243,252,271,273,246,295,257,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,273,275,253,264,260,275,270],
[294,0,271,287,268,283,270,284,285],
[278,280,0,281,256,264,262,289,277],
[276,264,270,0,252,258,262,277,274],
[298,283,295,299,0,272,280,285,277],
[287,268,287,293,279,0,286,291,271],
[291,281,289,289,271,265,0,285,280],
[276,267,262,274,266,260,266,0,270],
[281,266,274,277,274,280,271,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,261,275,274,298,217,283,231],
[277,0,275,289,274,305,279,310,292],
[290,276,0,329,264,302,304,258,261],
[276,262,222,0,297,273,242,301,279],
[277,277,287,254,0,269,241,249,264],
[253,246,249,278,282,0,301,269,234],
[334,272,247,309,310,250,0,341,290],
[268,241,293,250,302,282,210,0,232],
[320,259,290,272,287,317,261,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,319,296,274,283,264,284,272],
[303,0,286,285,309,305,258,295,287],
[232,265,0,269,281,265,276,268,284],
[255,266,282,0,270,245,243,260,277],
[277,242,270,281,0,268,259,275,249],
[268,246,286,306,283,0,232,289,271],
[287,293,275,308,292,319,0,287,302],
[267,256,283,291,276,262,264,0,284],
[279,264,267,274,302,280,249,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,362,253,191,273,315,253,273],
[327,0,296,250,203,237,282,308,183],
[189,255,0,273,139,148,137,221,121],
[298,301,278,0,237,245,273,359,169],
[360,348,412,314,0,356,310,377,250],
[278,314,403,306,195,0,267,225,313],
[236,269,414,278,241,284,0,223,298],
[298,243,330,192,174,326,328,0,231],
[278,368,430,382,301,238,253,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,238,278,266,265,281,284,266],
[260,0,262,295,265,260,283,272,283],
[313,289,0,273,278,280,289,278,282],
[273,256,278,0,263,285,274,268,259],
[285,286,273,288,0,282,293,297,281],
[286,291,271,266,269,0,287,294,284],
[270,268,262,277,258,264,0,268,260],
[267,279,273,283,254,257,283,0,266],
[285,268,269,292,270,267,291,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,272,297,285,261,275,304,273],
[272,0,262,285,275,235,286,287,259],
[279,289,0,301,298,279,274,296,275],
[254,266,250,0,253,252,269,278,270],
[266,276,253,298,0,241,273,272,238],
[290,316,272,299,310,0,293,314,284],
[276,265,277,282,278,258,0,302,258],
[247,264,255,273,279,237,249,0,242],
[278,292,276,281,313,267,293,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,284,303,276,277,282,271],
[285,0,265,282,288,269,278,283,296],
[281,286,0,282,299,289,281,308,271],
[267,269,269,0,299,254,263,266,276],
[248,263,252,252,0,255,248,271,267],
[275,282,262,297,296,0,286,295,300],
[274,273,270,288,303,265,0,282,274],
[269,268,243,285,280,256,269,0,281],
[280,255,280,275,284,251,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,270,273,289,294,280,290,279],
[275,0,276,290,267,290,271,258,282],
[281,275,0,288,268,288,262,266,262],
[278,261,263,0,261,283,275,284,253],
[262,284,283,290,0,299,276,275,282],
[257,261,263,268,252,0,250,235,246],
[271,280,289,276,275,301,0,263,286],
[261,293,285,267,276,316,288,0,275],
[272,269,289,298,269,305,265,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,282,300,287,286,294,292,272],
[276,0,268,285,299,286,275,291,290],
[269,283,0,304,293,293,263,284,280],
[251,266,247,0,287,280,269,285,268],
[264,252,258,264,0,264,252,281,267],
[265,265,258,271,287,0,276,272,256],
[257,276,288,282,299,275,0,297,283],
[259,260,267,266,270,279,254,0,264],
[279,261,271,283,284,295,268,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,290,280,377,253,260,343,373],
[275,0,132,194,308,172,220,141,321],
[261,419,0,293,330,277,363,375,403],
[271,357,258,0,399,308,307,285,397],
[174,243,221,152,0,260,229,266,266],
[298,379,274,243,291,0,307,185,372],
[291,331,188,244,322,244,0,209,290],
[208,410,176,266,285,366,342,0,380],
[178,230,148,154,285,179,261,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,287,305,224,293,208,282,255],
[289,0,251,308,212,322,173,312,272],
[264,300,0,299,237,316,220,265,266],
[246,243,252,0,211,256,217,220,200],
[327,339,314,340,0,303,271,345,283],
[258,229,235,295,248,0,246,275,242],
[343,378,331,334,280,305,0,334,256],
[269,239,286,331,206,276,217,0,267],
[296,279,285,351,268,309,295,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,259,222,255,231,187,231,258],
[327,0,305,286,247,247,244,242,284],
[292,246,0,236,234,221,253,218,244],
[329,265,315,0,287,281,269,270,291],
[296,304,317,264,0,221,269,253,274],
[320,304,330,270,330,0,278,248,296],
[364,307,298,282,282,273,0,292,318],
[320,309,333,281,298,303,259,0,295],
[293,267,307,260,277,255,233,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,264,245,280,271,291,284,265],
[272,0,281,258,295,317,289,274,289],
[287,270,0,275,294,298,310,328,266],
[306,293,276,0,286,310,311,349,265],
[271,256,257,265,0,283,306,306,276],
[280,234,253,241,268,0,321,288,248],
[260,262,241,240,245,230,0,296,261],
[267,277,223,202,245,263,255,0,265],
[286,262,285,286,275,303,290,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,301,292,292,269,283,294],
[262,0,281,294,306,290,278,268,290],
[277,270,0,291,271,266,252,272,273],
[250,257,260,0,297,285,250,266,278],
[259,245,280,254,0,283,260,270,273],
[259,261,285,266,268,0,261,283,268],
[282,273,299,301,291,290,0,293,288],
[268,283,279,285,281,268,258,0,275],
[257,261,278,273,278,283,263,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,295,272,292,274,277,285],
[271,0,292,268,270,307,280,281,296],
[274,259,0,303,247,287,276,278,283],
[256,283,248,0,253,290,261,246,271],
[279,281,304,298,0,302,263,261,292],
[259,244,264,261,249,0,266,257,262],
[277,271,275,290,288,285,0,276,300],
[274,270,273,305,290,294,275,0,293],
[266,255,268,280,259,289,251,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,265,282,263,286,288,255,261],
[293,0,287,294,281,293,292,281,272],
[286,264,0,276,278,290,303,283,249],
[269,257,275,0,253,272,284,227,262],
[288,270,273,298,0,256,267,256,254],
[265,258,261,279,295,0,306,239,269],
[263,259,248,267,284,245,0,248,259],
[296,270,268,324,295,312,303,0,278],
[290,279,302,289,297,282,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,296,260,286,290,307,305,309],
[280,0,260,262,288,277,272,278,311],
[255,291,0,279,299,270,289,298,305],
[291,289,272,0,296,284,269,276,288],
[265,263,252,255,0,266,283,291,267],
[261,274,281,267,285,0,278,283,308],
[244,279,262,282,268,273,0,271,276],
[246,273,253,275,260,268,280,0,298],
[242,240,246,263,284,243,275,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,277,270,262,272,264,280],
[271,0,273,270,271,262,275,278,265],
[274,278,0,267,276,266,270,264,281],
[274,281,284,0,265,258,286,276,264],
[281,280,275,286,0,270,282,289,278],
[289,289,285,293,281,0,288,268,280],
[279,276,281,265,269,263,0,270,271],
[287,273,287,275,262,283,281,0,280],
[271,286,270,287,273,271,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,281,264,274,281,251,269],
[273,0,286,258,285,270,281,254,278],
[288,265,0,265,282,277,292,254,276],
[270,293,286,0,286,254,295,245,260],
[287,266,269,265,0,272,283,241,279],
[277,281,274,297,279,0,289,272,272],
[270,270,259,256,268,262,0,247,276],
[300,297,297,306,310,279,304,0,264],
[282,273,275,291,272,279,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,287,266,276,264,276,303],
[274,0,299,285,275,297,297,295,317],
[273,252,0,284,276,295,291,290,269],
[264,266,267,0,293,249,285,289,281],
[285,276,275,258,0,258,295,284,291],
[275,254,256,302,293,0,274,287,297],
[287,254,260,266,256,277,0,273,278],
[275,256,261,262,267,264,278,0,239],
[248,234,282,270,260,254,273,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,308,257,259,309,275,264,303],
[282,0,256,289,302,305,303,284,315],
[243,295,0,239,296,294,267,279,275],
[294,262,312,0,300,282,285,258,292],
[292,249,255,251,0,274,267,269,279],
[242,246,257,269,277,0,279,270,277],
[276,248,284,266,284,272,0,248,275],
[287,267,272,293,282,281,303,0,280],
[248,236,276,259,272,274,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,263,258,281,248,254,263,267],
[295,0,275,270,276,265,255,267,274],
[288,276,0,289,291,277,270,275,268],
[293,281,262,0,290,275,257,268,270],
[270,275,260,261,0,268,247,276,268],
[303,286,274,276,283,0,255,272,294],
[297,296,281,294,304,296,0,279,273],
[288,284,276,283,275,279,272,0,298],
[284,277,283,281,283,257,278,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,279,277,262,300,301,269,291],
[273,0,285,259,274,305,279,278,267],
[272,266,0,264,264,297,262,267,289],
[274,292,287,0,281,302,294,276,291],
[289,277,287,270,0,309,300,273,302],
[251,246,254,249,242,0,266,236,271],
[250,272,289,257,251,285,0,256,277],
[282,273,284,275,278,315,295,0,299],
[260,284,262,260,249,280,274,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,250,268,291,332,331,265,244],
[266,0,284,252,248,294,273,246,237],
[301,267,0,254,249,305,278,256,231],
[283,299,297,0,301,325,299,266,235],
[260,303,302,250,0,326,298,257,289],
[219,257,246,226,225,0,326,221,228],
[220,278,273,252,253,225,0,231,225],
[286,305,295,285,294,330,320,0,252],
[307,314,320,316,262,323,326,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,276,273,267,266,266,277,274],
[300,0,283,279,279,284,279,279,267],
[275,268,0,280,287,281,267,279,270],
[278,272,271,0,274,277,286,275,264],
[284,272,264,277,0,286,262,278,271],
[285,267,270,274,265,0,280,295,281],
[285,272,284,265,289,271,0,281,276],
[274,272,272,276,273,256,270,0,267],
[277,284,281,287,280,270,275,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,312,352,347,224,382,285,287],
[346,0,316,240,359,310,415,284,273],
[239,235,0,287,292,258,348,292,216],
[199,311,264,0,269,253,329,283,313],
[204,192,259,282,0,265,273,269,221],
[327,241,293,298,286,0,301,273,271],
[169,136,203,222,278,250,0,306,220],
[266,267,259,268,282,278,245,0,209],
[264,278,335,238,330,280,331,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,288,267,300,313,294,291,271],
[256,0,286,278,284,288,282,295,279],
[263,265,0,262,272,289,294,286,299],
[284,273,289,0,277,297,292,288,283],
[251,267,279,274,0,310,299,297,278],
[238,263,262,254,241,0,255,279,255],
[257,269,257,259,252,296,0,265,276],
[260,256,265,263,254,272,286,0,273],
[280,272,252,268,273,296,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,315,278,277,274,291,303,279],
[257,0,246,249,245,223,261,265,218],
[236,305,0,243,255,263,279,277,269],
[273,302,308,0,275,270,270,301,263],
[274,306,296,276,0,273,300,301,257],
[277,328,288,281,278,0,306,317,273],
[260,290,272,281,251,245,0,275,256],
[248,286,274,250,250,234,276,0,231],
[272,333,282,288,294,278,295,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,196,202,236,262,246,240,238],
[371,0,273,281,305,302,345,385,347],
[355,278,0,294,259,253,335,337,280],
[349,270,257,0,283,315,321,385,281],
[315,246,292,268,0,326,333,388,270],
[289,249,298,236,225,0,329,340,243],
[305,206,216,230,218,222,0,271,189],
[311,166,214,166,163,211,280,0,206],
[313,204,271,270,281,308,362,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,258,290,296,273,280,251,260],
[270,0,253,262,265,265,284,277,259],
[293,298,0,297,276,284,294,272,270],
[261,289,254,0,258,254,274,271,269],
[255,286,275,293,0,265,276,280,276],
[278,286,267,297,286,0,286,285,262],
[271,267,257,277,275,265,0,258,246],
[300,274,279,280,271,266,293,0,286],
[291,292,281,282,275,289,305,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,294,304,269,292,300,278,285],
[238,0,284,283,237,299,264,261,245],
[257,267,0,292,240,298,267,276,252],
[247,268,259,0,272,273,277,287,289],
[282,314,311,279,0,286,304,290,261],
[259,252,253,278,265,0,265,280,282],
[251,287,284,274,247,286,0,270,265],
[273,290,275,264,261,271,281,0,256],
[266,306,299,262,290,269,286,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,265,258,263,265,241,279,247],
[296,0,273,287,275,269,264,286,253],
[286,278,0,281,253,271,267,272,270],
[293,264,270,0,278,279,248,267,253],
[288,276,298,273,0,274,281,302,280],
[286,282,280,272,277,0,270,272,241],
[310,287,284,303,270,281,0,290,251],
[272,265,279,284,249,279,261,0,249],
[304,298,281,298,271,310,300,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,289,270,291,283,321,292,310],
[284,0,268,261,252,274,266,268,288],
[262,283,0,285,306,265,297,274,304],
[281,290,266,0,298,280,286,269,326],
[260,299,245,253,0,261,279,272,273],
[268,277,286,271,290,0,304,260,298],
[230,285,254,265,272,247,0,232,272],
[259,283,277,282,279,291,319,0,287],
[241,263,247,225,278,253,279,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,252,258,265,257,268,266],
[288,0,260,272,274,260,278,264,273],
[280,291,0,273,277,263,254,264,282],
[299,279,278,0,283,273,294,292,281],
[293,277,274,268,0,281,275,292,295],
[286,291,288,278,270,0,267,284,287],
[294,273,297,257,276,284,0,281,273],
[283,287,287,259,259,267,270,0,264],
[285,278,269,270,256,264,278,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,278,284,287,280,305,278,272],
[300,0,286,280,288,272,316,292,285],
[273,265,0,249,280,265,325,273,280],
[267,271,302,0,285,278,321,283,307],
[264,263,271,266,0,267,301,269,269],
[271,279,286,273,284,0,304,290,294],
[246,235,226,230,250,247,0,255,258],
[273,259,278,268,282,261,296,0,271],
[279,266,271,244,282,257,293,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,281,262,253,267,254,272,241],
[243,0,280,286,237,281,255,308,301],
[270,271,0,273,280,285,253,292,260],
[289,265,278,0,234,277,283,277,275],
[298,314,271,317,0,298,311,311,285],
[284,270,266,274,253,0,239,258,264],
[297,296,298,268,240,312,0,299,300],
[279,243,259,274,240,293,252,0,268],
[310,250,291,276,266,287,251,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,283,272,257,266,282,276,271],
[273,0,276,272,273,267,270,268,267],
[268,275,0,279,277,268,275,273,271],
[279,279,272,0,271,261,260,275,269],
[294,278,274,280,0,280,265,276,272],
[285,284,283,290,271,0,284,280,263],
[269,281,276,291,286,267,0,269,281],
[275,283,278,276,275,271,282,0,282],
[280,284,280,282,279,288,270,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,265,283,237,276,269,281,273],
[268,0,278,276,245,268,258,285,289],
[286,273,0,282,256,294,266,289,281],
[268,275,269,0,255,277,236,279,263],
[314,306,295,296,0,289,269,298,274],
[275,283,257,274,262,0,250,273,272],
[282,293,285,315,282,301,0,304,272],
[270,266,262,272,253,278,247,0,285],
[278,262,270,288,277,279,279,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,297,282,283,272,261,275],
[280,0,259,300,275,295,258,263,279],
[280,292,0,303,291,270,265,287,271],
[254,251,248,0,262,242,250,252,269],
[269,276,260,289,0,263,262,261,290],
[268,256,281,309,288,0,266,270,272],
[279,293,286,301,289,285,0,282,272],
[290,288,264,299,290,281,269,0,292],
[276,272,280,282,261,279,279,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,279,281,268,269,284,269,288],
[232,0,256,256,243,256,244,272,283],
[272,295,0,277,286,279,278,279,278],
[270,295,274,0,282,266,313,257,296],
[283,308,265,269,0,274,270,273,289],
[282,295,272,285,277,0,296,277,278],
[267,307,273,238,281,255,0,282,280],
[282,279,272,294,278,274,269,0,283],
[263,268,273,255,262,273,271,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,254,266,282,271,278,273,265],
[287,0,280,270,282,291,296,289,272],
[297,271,0,289,299,310,297,299,289],
[285,281,262,0,288,290,269,278,268],
[269,269,252,263,0,272,268,280,268],
[280,260,241,261,279,0,276,283,285],
[273,255,254,282,283,275,0,269,271],
[278,262,252,273,271,268,282,0,272],
[286,279,262,283,283,266,280,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,287,250,242,234,254,291,215],
[282,0,329,315,276,271,279,310,293],
[264,222,0,275,275,255,282,323,279],
[301,236,276,0,284,296,274,297,235],
[309,275,276,267,0,262,240,310,270],
[317,280,296,255,289,0,320,300,290],
[297,272,269,277,311,231,0,302,246],
[260,241,228,254,241,251,249,0,239],
[336,258,272,316,281,261,305,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,305,310,264,301,270,290,287],
[261,0,306,297,290,282,267,277,269],
[246,245,0,283,271,270,261,258,263],
[241,254,268,0,266,276,263,246,248],
[287,261,280,285,0,270,282,257,268],
[250,269,281,275,281,0,270,273,263],
[281,284,290,288,269,281,0,276,265],
[261,274,293,305,294,278,275,0,270],
[264,282,288,303,283,288,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,272,258,257,258,258,260,261],
[291,0,283,283,272,261,279,258,284],
[279,268,0,264,276,267,269,279,268],
[293,268,287,0,278,278,277,288,294],
[294,279,275,273,0,260,267,270,268],
[293,290,284,273,291,0,273,286,292],
[293,272,282,274,284,278,0,273,284],
[291,293,272,263,281,265,278,0,276],
[290,267,283,257,283,259,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,287,275,284,309,269,283,290],
[276,0,279,264,252,287,283,249,295],
[264,272,0,269,270,282,286,259,252],
[276,287,282,0,263,294,289,283,305],
[267,299,281,288,0,322,297,273,297],
[242,264,269,257,229,0,253,248,250],
[282,268,265,262,254,298,0,239,267],
[268,302,292,268,278,303,312,0,260],
[261,256,299,246,254,301,284,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,263,277,291,270,271,266,283],
[301,0,294,304,283,259,285,283,302],
[288,257,0,295,281,281,262,268,271],
[274,247,256,0,265,264,218,247,244],
[260,268,270,286,0,246,239,271,278],
[281,292,270,287,305,0,276,299,300],
[280,266,289,333,312,275,0,284,299],
[285,268,283,304,280,252,267,0,289],
[268,249,280,307,273,251,252,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,272,272,261,278,286,289,287],
[278,0,239,285,264,276,289,265,263],
[279,312,0,292,299,290,259,256,258],
[279,266,259,0,243,268,258,254,246],
[290,287,252,308,0,288,280,234,277],
[273,275,261,283,263,0,264,281,268],
[265,262,292,293,271,287,0,277,257],
[262,286,295,297,317,270,274,0,273],
[264,288,293,305,274,283,294,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,270,273,264,254,285,268,284],
[271,0,278,280,264,272,280,288,280],
[281,273,0,284,278,279,274,263,300],
[278,271,267,0,278,272,276,290,298],
[287,287,273,273,0,282,281,293,299],
[297,279,272,279,269,0,284,291,287],
[266,271,277,275,270,267,0,279,277],
[283,263,288,261,258,260,272,0,306],
[267,271,251,253,252,264,274,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,262,280,271,280,282,283,262],
[271,0,259,270,276,290,278,284,251],
[289,292,0,279,285,296,297,303,269],
[271,281,272,0,285,294,295,297,277],
[280,275,266,266,0,292,300,300,258],
[271,261,255,257,259,0,289,279,240],
[269,273,254,256,251,262,0,254,258],
[268,267,248,254,251,272,297,0,256],
[289,300,282,274,293,311,293,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,292,267,291,303,291,313,293],
[257,0,309,277,265,280,279,299,282],
[259,242,0,276,262,272,252,269,248],
[284,274,275,0,284,282,281,289,275],
[260,286,289,267,0,277,263,304,285],
[248,271,279,269,274,0,269,291,269],
[260,272,299,270,288,282,0,321,284],
[238,252,282,262,247,260,230,0,255],
[258,269,303,276,266,282,267,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,266,270,231,305,250,293],
[284,0,268,270,305,281,313,279,251],
[277,283,0,283,299,273,308,265,287],
[285,281,268,0,282,277,298,280,282],
[281,246,252,269,0,240,288,247,287],
[320,270,278,274,311,0,332,297,303],
[246,238,243,253,263,219,0,243,258],
[301,272,286,271,304,254,308,0,289],
[258,300,264,269,264,248,293,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,305,271,302,301,302,337,305],
[249,0,284,264,291,267,271,288,271],
[246,267,0,269,259,279,246,296,269],
[280,287,282,0,293,285,258,314,289],
[249,260,292,258,0,257,244,284,280],
[250,284,272,266,294,0,253,292,273],
[249,280,305,293,307,298,0,300,290],
[214,263,255,237,267,259,251,0,259],
[246,280,282,262,271,278,261,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,264,289,274,271,267,266,288],
[252,0,258,293,274,270,279,264,272],
[287,293,0,302,290,290,278,280,254],
[262,258,249,0,259,254,283,269,259],
[277,277,261,292,0,266,268,269,254],
[280,281,261,297,285,0,267,265,268],
[284,272,273,268,283,284,0,272,268],
[285,287,271,282,282,286,279,0,269],
[263,279,297,292,297,283,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,246,273,246,235,251,241,237],
[272,0,288,290,252,258,311,261,269],
[305,263,0,291,255,264,288,284,298],
[278,261,260,0,213,229,268,237,281],
[305,299,296,338,0,315,345,260,325],
[316,293,287,322,236,0,305,297,313],
[300,240,263,283,206,246,0,267,247],
[310,290,267,314,291,254,284,0,317],
[314,282,253,270,226,238,304,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,259,267,255,276,291,267],
[281,0,295,290,283,268,284,284,304],
[265,256,0,271,282,261,254,266,275],
[292,261,280,0,289,275,276,271,303],
[284,268,269,262,0,274,279,265,289],
[296,283,290,276,277,0,286,272,295],
[275,267,297,275,272,265,0,283,296],
[260,267,285,280,286,279,268,0,291],
[284,247,276,248,262,256,255,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,266,232,207,227,395,201,272],
[322,0,252,313,298,211,254,211,233],
[285,299,0,347,262,159,246,227,242],
[319,238,204,0,240,201,243,237,194],
[344,253,289,311,0,226,321,240,267],
[324,340,392,350,325,0,266,333,300],
[156,297,305,308,230,285,0,241,241],
[350,340,324,314,311,218,310,0,301],
[279,318,309,357,284,251,310,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,310,296,290,286,275,281,311],
[263,0,269,282,260,258,256,257,275],
[241,282,0,291,282,259,277,248,288],
[255,269,260,0,265,256,263,259,281],
[261,291,269,286,0,284,268,257,287],
[265,293,292,295,267,0,261,282,293],
[276,295,274,288,283,290,0,280,303],
[270,294,303,292,294,269,271,0,279],
[240,276,263,270,264,258,248,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,282,260,289,273,299,288,285],
[280,0,269,276,286,279,271,293,281],
[269,282,0,250,276,272,282,251,278],
[291,275,301,0,294,298,306,301,298],
[262,265,275,257,0,269,276,272,278],
[278,272,279,253,282,0,291,284,284],
[252,280,269,245,275,260,0,271,271],
[263,258,300,250,279,267,280,0,259],
[266,270,273,253,273,267,280,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,260,261,243,275,265,262,248],
[294,0,283,274,280,296,279,275,275],
[291,268,0,294,286,281,286,293,276],
[290,277,257,0,266,275,282,291,269],
[308,271,265,285,0,286,292,292,275],
[276,255,270,276,265,0,279,262,260],
[286,272,265,269,259,272,0,276,261],
[289,276,258,260,259,289,275,0,281],
[303,276,275,282,276,291,290,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,300,310,252,301,324,383,259],
[184,0,235,216,192,252,255,292,214],
[251,316,0,288,229,287,288,335,274],
[241,335,263,0,279,250,292,339,248],
[299,359,322,272,0,306,301,349,293],
[250,299,264,301,245,0,270,313,241],
[227,296,263,259,250,281,0,337,234],
[168,259,216,212,202,238,214,0,231],
[292,337,277,303,258,310,317,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,279,277,297,286,290,287,270],
[261,0,272,265,283,285,303,247,303],
[272,279,0,264,287,288,285,292,277],
[274,286,287,0,305,298,304,285,275],
[254,268,264,246,0,248,260,258,264],
[265,266,263,253,303,0,276,276,269],
[261,248,266,247,291,275,0,234,262],
[264,304,259,266,293,275,317,0,291],
[281,248,274,276,287,282,289,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,278,268,251,318,319,316,321],
[260,0,289,265,327,373,334,243,329],
[273,262,0,301,300,315,367,256,295],
[283,286,250,0,280,307,341,290,319],
[300,224,251,271,0,270,304,259,292],
[233,178,236,244,281,0,327,238,287],
[232,217,184,210,247,224,0,228,253],
[235,308,295,261,292,313,323,0,287],
[230,222,256,232,259,264,298,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,236,254,253,291,252,251,254],
[302,0,289,269,280,292,267,260,283],
[315,262,0,292,290,300,300,296,310],
[297,282,259,0,306,322,261,245,310],
[298,271,261,245,0,287,255,284,274],
[260,259,251,229,264,0,256,224,228],
[299,284,251,290,296,295,0,269,268],
[300,291,255,306,267,327,282,0,295],
[297,268,241,241,277,323,283,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,245,290,275,261,271,282],
[272,0,275,258,281,273,262,275,267],
[271,276,0,263,278,279,263,275,271],
[306,293,288,0,297,273,279,298,290],
[261,270,273,254,0,271,266,273,263],
[276,278,272,278,280,0,269,260,272],
[290,289,288,272,285,282,0,267,256],
[280,276,276,253,278,291,284,0,282],
[269,284,280,261,288,279,295,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,287,308,273,288,291,303,287],
[275,0,281,294,275,278,290,279,272],
[264,270,0,295,264,269,284,286,277],
[243,257,256,0,253,258,290,282,264],
[278,276,287,298,0,253,304,304,279],
[263,273,282,293,298,0,297,287,281],
[260,261,267,261,247,254,0,286,265],
[248,272,265,269,247,264,265,0,279],
[264,279,274,287,272,270,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,257,266,260,251,266,260],
[278,0,269,265,288,291,279,294,287],
[274,282,0,284,281,277,259,265,240],
[294,286,267,0,295,304,280,277,279],
[285,263,270,256,0,267,277,248,245],
[291,260,274,247,284,0,281,293,250],
[300,272,292,271,274,270,0,267,278],
[285,257,286,274,303,258,284,0,273],
[291,264,311,272,306,301,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,162,193,136,231,245,169],
[285,0,304,131,122,100,162,176,272],
[283,247,0,235,131,160,142,171,190],
[389,420,316,0,341,287,193,183,267],
[358,429,420,210,0,307,215,258,261],
[415,451,391,264,244,0,199,286,368],
[320,389,409,358,336,352,0,230,321],
[306,375,380,368,293,265,321,0,366],
[382,279,361,284,290,183,230,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,274,275,274,273,252,252],
[280,0,257,238,265,261,264,240,256],
[276,294,0,266,271,282,296,273,273],
[277,313,285,0,306,304,300,289,269],
[276,286,280,245,0,283,270,248,251],
[277,290,269,247,268,0,275,269,272],
[278,287,255,251,281,276,0,265,254],
[299,311,278,262,303,282,286,0,276],
[299,295,278,282,300,279,297,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,294,291,281,283,267,275,288],
[288,0,272,305,258,280,273,267,270],
[257,279,0,291,255,259,258,244,269],
[260,246,260,0,248,257,255,248,260],
[270,293,296,303,0,285,283,287,296],
[268,271,292,294,266,0,258,258,287],
[284,278,293,296,268,293,0,267,304],
[276,284,307,303,264,293,284,0,308],
[263,281,282,291,255,264,247,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,237,230,226,260,288,233,233],
[269,0,234,256,232,281,292,254,273],
[314,317,0,289,263,298,288,272,288],
[321,295,262,0,279,318,296,294,264],
[325,319,288,272,0,318,314,296,295],
[291,270,253,233,233,0,269,252,271],
[263,259,263,255,237,282,0,255,222],
[318,297,279,257,255,299,296,0,276],
[318,278,263,287,256,280,329,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,257,301,237,263,265,258,286],
[255,0,267,272,235,257,268,263,254],
[294,284,0,294,253,301,285,248,279],
[250,279,257,0,220,255,256,220,239],
[314,316,298,331,0,271,303,297,313],
[288,294,250,296,280,0,270,264,302],
[286,283,266,295,248,281,0,261,249],
[293,288,303,331,254,287,290,0,271],
[265,297,272,312,238,249,302,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,361,293,278,333,307,249,282],
[273,0,321,257,285,254,320,270,323],
[190,230,0,222,265,210,318,221,218],
[258,294,329,0,367,299,368,231,262],
[273,266,286,184,0,388,353,271,167],
[218,297,341,252,163,0,373,245,246],
[244,231,233,183,198,178,0,252,245],
[302,281,330,320,280,306,299,0,227],
[269,228,333,289,384,305,306,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,271,297,274,288,258,273,286],
[302,0,281,280,268,293,263,268,300],
[280,270,0,265,276,282,266,275,276],
[254,271,286,0,271,280,246,254,276],
[277,283,275,280,0,284,273,259,262],
[263,258,269,271,267,0,272,282,252],
[293,288,285,305,278,279,0,256,265],
[278,283,276,297,292,269,295,0,293],
[265,251,275,275,289,299,286,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,252,266,259,284,293,291,259],
[283,0,275,292,304,298,306,308,283],
[299,276,0,300,262,296,280,297,253],
[285,259,251,0,259,277,261,285,284],
[292,247,289,292,0,300,290,308,256],
[267,253,255,274,251,0,265,274,258],
[258,245,271,290,261,286,0,294,258],
[260,243,254,266,243,277,257,0,246],
[292,268,298,267,295,293,293,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,286,361,271,287,250,338,357],
[244,0,247,186,320,232,197,333,300],
[265,304,0,297,219,256,276,355,347],
[190,365,254,0,248,210,279,269,276],
[280,231,332,303,0,326,304,342,279],
[264,319,295,341,225,0,287,316,313],
[301,354,275,272,247,264,0,279,319],
[213,218,196,282,209,235,272,0,241],
[194,251,204,275,272,238,232,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,236,256,275,229,234,245,260],
[311,0,276,268,301,258,311,264,306],
[315,275,0,278,322,258,288,261,300],
[295,283,273,0,313,291,257,280,303],
[276,250,229,238,0,272,256,225,272],
[322,293,293,260,279,0,273,285,338],
[317,240,263,294,295,278,0,263,308],
[306,287,290,271,326,266,288,0,318],
[291,245,251,248,279,213,243,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,294,297,245,297,283,302,264],
[262,0,288,302,252,292,283,280,265],
[257,263,0,302,277,309,295,290,263],
[254,249,249,0,254,284,262,269,251],
[306,299,274,297,0,300,324,330,285],
[254,259,242,267,251,0,258,301,257],
[268,268,256,289,227,293,0,291,260],
[249,271,261,282,221,250,260,0,230],
[287,286,288,300,266,294,291,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,280,278,270,284,276,294,285],
[279,0,274,255,265,266,242,258,272],
[271,277,0,271,275,279,261,277,272],
[273,296,280,0,255,306,284,284,285],
[281,286,276,296,0,291,264,283,287],
[267,285,272,245,260,0,249,277,255],
[275,309,290,267,287,302,0,293,288],
[257,293,274,267,268,274,258,0,265],
[266,279,279,266,264,296,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,271,291,277,285,282,273,287],
[252,0,268,278,254,281,263,251,249],
[280,283,0,285,268,271,266,272,269],
[260,273,266,0,273,265,266,277,274],
[274,297,283,278,0,307,284,271,287],
[266,270,280,286,244,0,271,264,274],
[269,288,285,285,267,280,0,276,268],
[278,300,279,274,280,287,275,0,276],
[264,302,282,277,264,277,283,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,281,274,268,273,269,249,268],
[285,0,301,304,272,288,287,279,266],
[270,250,0,286,282,269,248,266,267],
[277,247,265,0,267,287,265,276,254],
[283,279,269,284,0,272,268,262,244],
[278,263,282,264,279,0,270,262,268],
[282,264,303,286,283,281,0,270,287],
[302,272,285,275,289,289,281,0,264],
[283,285,284,297,307,283,264,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,281,288,283,283,303,274,274],
[279,0,290,303,294,274,295,284,290],
[270,261,0,288,259,251,278,264,264],
[263,248,263,0,268,247,270,259,247],
[268,257,292,283,0,262,285,267,277],
[268,277,300,304,289,0,273,262,266],
[248,256,273,281,266,278,0,264,269],
[277,267,287,292,284,289,287,0,289],
[277,261,287,304,274,285,282,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,258,245,285,290,254,261,270],
[299,0,239,267,270,281,242,271,249],
[293,312,0,292,283,275,276,283,285],
[306,284,259,0,298,314,248,255,288],
[266,281,268,253,0,260,224,276,263],
[261,270,276,237,291,0,253,291,255],
[297,309,275,303,327,298,0,286,254],
[290,280,268,296,275,260,265,0,265],
[281,302,266,263,288,296,297,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,286,270,266,282,282,306,267],
[285,0,287,279,288,287,276,292,266],
[265,264,0,258,272,273,261,298,269],
[281,272,293,0,279,288,276,309,294],
[285,263,279,272,0,302,271,307,293],
[269,264,278,263,249,0,256,285,275],
[269,275,290,275,280,295,0,296,290],
[245,259,253,242,244,266,255,0,254],
[284,285,282,257,258,276,261,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,250,302,284,252,335,304,320],
[265,0,307,335,274,293,305,321,260],
[301,244,0,321,310,306,401,353,295],
[249,216,230,0,262,254,317,293,222],
[267,277,241,289,0,273,296,303,258],
[299,258,245,297,278,0,261,294,292],
[216,246,150,234,255,290,0,232,229],
[247,230,198,258,248,257,319,0,256],
[231,291,256,329,293,259,322,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,264,272,280,282,274,283],
[273,0,293,279,285,285,284,276,278],
[257,258,0,264,266,273,266,255,268],
[287,272,287,0,275,300,288,273,282],
[279,266,285,276,0,284,267,288,279],
[271,266,278,251,267,0,265,266,263],
[269,267,285,263,284,286,0,286,279],
[277,275,296,278,263,285,265,0,263],
[268,273,283,269,272,288,272,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,288,265,254,303,283,292],
[274,0,277,266,256,276,270,258,273],
[266,274,0,258,253,248,284,292,256],
[263,285,293,0,274,248,302,269,242],
[286,295,298,277,0,272,288,283,260],
[297,275,303,303,279,0,286,273,263],
[248,281,267,249,263,265,0,272,239],
[268,293,259,282,268,278,279,0,279],
[259,278,295,309,291,288,312,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,339,260,264,267,259,357,296,288],
[212,0,255,249,290,275,289,240,310],
[291,296,0,305,264,297,364,301,305],
[287,302,246,0,257,321,328,267,260],
[284,261,287,294,0,318,383,304,276],
[292,276,254,230,233,0,344,253,304],
[194,262,187,223,168,207,0,204,188],
[255,311,250,284,247,298,347,0,347],
[263,241,246,291,275,247,363,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,267,310,255,275,279,306,264],
[293,0,322,284,276,299,265,293,265],
[284,229,0,286,257,278,296,306,260],
[241,267,265,0,219,226,297,292,224],
[296,275,294,332,0,290,307,338,271],
[276,252,273,325,261,0,291,330,285],
[272,286,255,254,244,260,0,328,254],
[245,258,245,259,213,221,223,0,255],
[287,286,291,327,280,266,297,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,257,266,270,260,275,233,266],
[298,0,282,265,271,286,300,260,264],
[294,269,0,272,293,308,326,279,269],
[285,286,279,0,278,305,307,291,275],
[281,280,258,273,0,275,295,280,283],
[291,265,243,246,276,0,316,263,266],
[276,251,225,244,256,235,0,260,251],
[318,291,272,260,271,288,291,0,271],
[285,287,282,276,268,285,300,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,324,262,404,404,238,368,290],
[227,0,241,198,423,355,281,211,269],
[227,310,0,236,423,395,321,133,207],
[289,353,315,0,383,457,237,265,191],
[147,128,128,168,0,380,246,103,74],
[147,196,156,94,171,0,107,171,131],
[313,270,230,314,305,444,0,343,220],
[183,340,418,286,448,380,208,0,94],
[261,282,344,360,477,420,331,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,278,280,273,292,295,298,294],
[245,0,262,281,259,281,280,281,282],
[273,289,0,292,277,286,295,274,305],
[271,270,259,0,262,277,252,272,278],
[278,292,274,289,0,293,293,283,286],
[259,270,265,274,258,0,258,279,273],
[256,271,256,299,258,293,0,283,282],
[253,270,277,279,268,272,268,0,279],
[257,269,246,273,265,278,269,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,266,276,270,279,271,283,267],
[290,0,265,273,287,270,283,282,283],
[285,286,0,285,264,289,272,278,275],
[275,278,266,0,276,273,282,284,289],
[281,264,287,275,0,267,274,274,286],
[272,281,262,278,284,0,274,281,266],
[280,268,279,269,277,277,0,273,260],
[268,269,273,267,277,270,278,0,300],
[284,268,276,262,265,285,291,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,305,284,264,292,346,299],
[275,0,318,292,294,311,286,353,307],
[269,233,0,280,277,237,290,317,290],
[246,259,271,0,240,235,253,317,270],
[267,257,274,311,0,286,280,284,276],
[287,240,314,316,265,0,299,280,264],
[259,265,261,298,271,252,0,297,278],
[205,198,234,234,267,271,254,0,239],
[252,244,261,281,275,287,273,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,293,280,272,268,279,286,271],
[265,0,267,278,256,267,275,278,280],
[258,284,0,285,257,279,282,266,280],
[271,273,266,0,273,270,265,265,272],
[279,295,294,278,0,287,286,263,277],
[283,284,272,281,264,0,285,269,288],
[272,276,269,286,265,266,0,258,271],
[265,273,285,286,288,282,293,0,286],
[280,271,271,279,274,263,280,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,301,292,277,293,331,262],
[273,0,266,282,270,270,290,305,262],
[276,285,0,309,256,275,308,316,302],
[250,269,242,0,263,252,261,315,270],
[259,281,295,288,0,282,301,305,295],
[274,281,276,299,269,0,301,320,287],
[258,261,243,290,250,250,0,315,283],
[220,246,235,236,246,231,236,0,248],
[289,289,249,281,256,264,268,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,257,261,284,285,278,282,274],
[285,0,295,247,288,273,287,280,277],
[294,256,0,277,293,284,294,301,286],
[290,304,274,0,300,284,297,297,278],
[267,263,258,251,0,253,266,274,264],
[266,278,267,267,298,0,292,275,288],
[273,264,257,254,285,259,0,288,264],
[269,271,250,254,277,276,263,0,281],
[277,274,265,273,287,263,287,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,257,270,262,269,267,272,267],
[285,0,258,254,269,278,287,291,285],
[294,293,0,276,306,290,283,266,280],
[281,297,275,0,280,273,275,272,268],
[289,282,245,271,0,254,305,273,278],
[282,273,261,278,297,0,280,280,306],
[284,264,268,276,246,271,0,259,270],
[279,260,285,279,278,271,292,0,280],
[284,266,271,283,273,245,281,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,298,273,270,282,284,287,279],
[273,0,260,269,278,282,277,282,282],
[253,291,0,264,270,258,282,271,270],
[278,282,287,0,270,283,285,284,294],
[281,273,281,281,0,286,286,275,284],
[269,269,293,268,265,0,273,274,286],
[267,274,269,266,265,278,0,260,275],
[264,269,280,267,276,277,291,0,282],
[272,269,281,257,267,265,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,266,276,296,263,282,258,285],
[269,0,299,292,269,281,282,266,275],
[285,252,0,266,288,295,294,261,269],
[275,259,285,0,298,286,271,255,263],
[255,282,263,253,0,249,277,247,257],
[288,270,256,265,302,0,278,283,259],
[269,269,257,280,274,273,0,273,291],
[293,285,290,296,304,268,278,0,289],
[266,276,282,288,294,292,260,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,266,315,311,283,326,318,307],
[217,0,229,304,235,260,276,218,314],
[285,322,0,302,310,257,281,272,312],
[236,247,249,0,273,268,245,251,265],
[240,316,241,278,0,264,301,235,301],
[268,291,294,283,287,0,300,275,303],
[225,275,270,306,250,251,0,224,278],
[233,333,279,300,316,276,327,0,299],
[244,237,239,286,250,248,273,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,283,252,270,274,265,261,254],
[282,0,273,261,304,285,302,279,268],
[268,278,0,242,263,257,258,284,248],
[299,290,309,0,307,274,279,295,301],
[281,247,288,244,0,270,266,264,265],
[277,266,294,277,281,0,291,304,247],
[286,249,293,272,285,260,0,318,276],
[290,272,267,256,287,247,233,0,267],
[297,283,303,250,286,304,275,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,292,197,214,219,245,204,307],
[284,0,243,220,216,242,152,282,241],
[259,308,0,366,301,244,194,266,348],
[354,331,185,0,245,262,225,282,281],
[337,335,250,306,0,309,282,293,407],
[332,309,307,289,242,0,196,210,327],
[306,399,357,326,269,355,0,301,340],
[347,269,285,269,258,341,250,0,314],
[244,310,203,270,144,224,211,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,289,253,342,284,294,285,319],
[239,0,234,231,292,244,233,257,312],
[262,317,0,259,300,235,286,275,291],
[298,320,292,0,382,263,321,318,317],
[209,259,251,169,0,201,209,256,298],
[267,307,316,288,350,0,283,304,307],
[257,318,265,230,342,268,0,270,357],
[266,294,276,233,295,247,281,0,316],
[232,239,260,234,253,244,194,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,299,268,265,259,278,293,281],
[274,0,301,276,274,277,278,283,279],
[252,250,0,257,249,257,250,259,276],
[283,275,294,0,289,257,272,283,281],
[286,277,302,262,0,260,268,295,278],
[292,274,294,294,291,0,274,290,286],
[273,273,301,279,283,277,0,290,278],
[258,268,292,268,256,261,261,0,264],
[270,272,275,270,273,265,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,289,283,272,272,282,273,276],
[282,0,283,286,271,273,286,269,290],
[262,268,0,278,288,278,285,279,258],
[268,265,273,0,278,268,269,281,258],
[279,280,263,273,0,258,264,269,267],
[279,278,273,283,293,0,280,279,296],
[269,265,266,282,287,271,0,285,278],
[278,282,272,270,282,272,266,0,269],
[275,261,293,293,284,255,273,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,282,265,260,273,279,255,286],
[280,0,295,272,268,276,279,271,286],
[269,256,0,243,280,254,272,253,271],
[286,279,308,0,275,273,286,283,279],
[291,283,271,276,0,281,261,272,275],
[278,275,297,278,270,0,268,255,294],
[272,272,279,265,290,283,0,261,286],
[296,280,298,268,279,296,290,0,285],
[265,265,280,272,276,257,265,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,265,265,257,312,252,334,267],
[295,0,309,278,249,289,212,328,259],
[286,242,0,251,239,201,243,296,260],
[286,273,300,0,271,246,270,299,328],
[294,302,312,280,0,298,219,324,250],
[239,262,350,305,253,0,283,318,302],
[299,339,308,281,332,268,0,349,329],
[217,223,255,252,227,233,202,0,216],
[284,292,291,223,301,249,222,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,347,248,383,299,306,338,277],
[272,0,367,216,349,287,275,264,286],
[204,184,0,215,189,214,275,224,221],
[303,335,336,0,311,342,303,333,260],
[168,202,362,240,0,251,253,293,274],
[252,264,337,209,300,0,269,293,263],
[245,276,276,248,298,282,0,282,302],
[213,287,327,218,258,258,269,0,265],
[274,265,330,291,277,288,249,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,289,304,290,247,290,278,269],
[292,0,263,290,290,261,268,246,250],
[262,288,0,294,244,241,291,256,247],
[247,261,257,0,248,247,287,251,236],
[261,261,307,303,0,282,290,285,279],
[304,290,310,304,269,0,307,272,281],
[261,283,260,264,261,244,0,285,225],
[273,305,295,300,266,279,266,0,271],
[282,301,304,315,272,270,326,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,305,261,242,270,227,231,206],
[306,0,320,284,279,285,287,268,271],
[246,231,0,267,261,236,206,253,231],
[290,267,284,0,275,281,240,252,263],
[309,272,290,276,0,305,277,249,285],
[281,266,315,270,246,0,239,279,256],
[324,264,345,311,274,312,0,278,279],
[320,283,298,299,302,272,273,0,285],
[345,280,320,288,266,295,272,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,298,268,265,267,265,293],
[270,0,292,336,296,293,290,304,288],
[281,259,0,303,302,255,260,273,270],
[253,215,248,0,241,258,238,247,260],
[283,255,249,310,0,251,304,282,284],
[286,258,296,293,300,0,282,266,280],
[284,261,291,313,247,269,0,275,276],
[286,247,278,304,269,285,276,0,275],
[258,263,281,291,267,271,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,279,248,263,297,282,273,274],
[285,0,275,248,256,276,265,261,258],
[272,276,0,250,241,278,265,275,254],
[303,303,301,0,271,291,280,281,301],
[288,295,310,280,0,320,295,273,267],
[254,275,273,260,231,0,249,292,276],
[269,286,286,271,256,302,0,285,289],
[278,290,276,270,278,259,266,0,271],
[277,293,297,250,284,275,262,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,283,286,270,264,283,287,283],
[262,0,270,272,259,262,276,277,280],
[268,281,0,290,260,262,258,272,267],
[265,279,261,0,266,284,275,270,270],
[281,292,291,285,0,287,276,292,275],
[287,289,289,267,264,0,281,287,283],
[268,275,293,276,275,270,0,292,279],
[264,274,279,281,259,264,259,0,291],
[268,271,284,281,276,268,272,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,280,253,252,268,273,280,271],
[280,0,277,257,257,269,254,266,252],
[271,274,0,257,245,251,266,235,251],
[298,294,294,0,272,300,286,286,278],
[299,294,306,279,0,273,288,279,277],
[283,282,300,251,278,0,293,266,265],
[278,297,285,265,263,258,0,271,257],
[271,285,316,265,272,285,280,0,277],
[280,299,300,273,274,286,294,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,268,258,277,256,253,286,235],
[268,0,280,270,266,294,264,274,243],
[283,271,0,287,291,288,263,275,281],
[293,281,264,0,267,288,263,258,261],
[274,285,260,284,0,274,269,290,289],
[295,257,263,263,277,0,276,270,265],
[298,287,288,288,282,275,0,260,261],
[265,277,276,293,261,281,291,0,271],
[316,308,270,290,262,286,290,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,292,282,320,269,290,275,271],
[267,0,294,294,305,255,278,272,271],
[259,257,0,294,283,260,266,251,271],
[269,257,257,0,286,257,270,260,258],
[231,246,268,265,0,243,255,239,265],
[282,296,291,294,308,0,288,278,275],
[261,273,285,281,296,263,0,267,259],
[276,279,300,291,312,273,284,0,285],
[280,280,280,293,286,276,292,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,271,273,268,272,273,285,278],
[286,0,278,280,267,276,282,291,273],
[280,273,0,284,269,272,267,270,271],
[278,271,267,0,281,281,276,272,270],
[283,284,282,270,0,280,266,281,279],
[279,275,279,270,271,0,276,269,277],
[278,269,284,275,285,275,0,284,274],
[266,260,281,279,270,282,267,0,281],
[273,278,280,281,272,274,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,316,287,291,274,292,270,281],
[265,0,291,275,277,277,251,268,269],
[235,260,0,269,263,258,242,248,274],
[264,276,282,0,253,269,266,272,274],
[260,274,288,298,0,282,281,280,290],
[277,274,293,282,269,0,292,272,289],
[259,300,309,285,270,259,0,274,285],
[281,283,303,279,271,279,277,0,294],
[270,282,277,277,261,262,266,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,265,240,262,257,282,275,274],
[265,0,289,276,288,288,276,299,244],
[286,262,0,230,235,218,300,281,255],
[311,275,321,0,310,260,337,324,281],
[289,263,316,241,0,227,311,318,236],
[294,263,333,291,324,0,334,307,286],
[269,275,251,214,240,217,0,292,242],
[276,252,270,227,233,244,259,0,227],
[277,307,296,270,315,265,309,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,255,311,284,252,266,291,266],
[297,0,269,310,294,265,299,293,283],
[296,282,0,266,276,254,304,274,265],
[240,241,285,0,261,258,258,286,231],
[267,257,275,290,0,266,306,286,279],
[299,286,297,293,285,0,270,298,272],
[285,252,247,293,245,281,0,292,261],
[260,258,277,265,265,253,259,0,272],
[285,268,286,320,272,279,290,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,330,282,267,267,301,290,279],
[258,0,320,297,289,275,295,283,285],
[221,231,0,269,230,243,238,241,246],
[269,254,282,0,304,270,299,242,282],
[284,262,321,247,0,279,303,277,283],
[284,276,308,281,272,0,272,317,261],
[250,256,313,252,248,279,0,236,257],
[261,268,310,309,274,234,315,0,279],
[272,266,305,269,268,290,294,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,204,234,322,280,253,253,290],
[318,0,105,274,206,223,216,185,310],
[347,446,0,306,300,359,337,261,419],
[317,277,245,0,314,352,224,245,391],
[229,345,251,237,0,277,277,280,400],
[271,328,192,199,274,0,260,214,308],
[298,335,214,327,274,291,0,270,361],
[298,366,290,306,271,337,281,0,318],
[261,241,132,160,151,243,190,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,255,233,245,266,262,263,266],
[309,0,297,297,254,286,318,287,297],
[296,254,0,221,249,271,258,271,265],
[318,254,330,0,265,273,312,292,298],
[306,297,302,286,0,306,284,281,272],
[285,265,280,278,245,0,276,248,285],
[289,233,293,239,267,275,0,264,260],
[288,264,280,259,270,303,287,0,281],
[285,254,286,253,279,266,291,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,285,282,272,264,259,255,268],
[276,0,271,262,269,241,264,269,270],
[266,280,0,248,280,253,280,254,258],
[269,289,303,0,263,262,282,264,267],
[279,282,271,288,0,281,269,283,277],
[287,310,298,289,270,0,278,270,275],
[292,287,271,269,282,273,0,278,272],
[296,282,297,287,268,281,273,0,280],
[283,281,293,284,274,276,279,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,274,281,271,308,256,279,292],
[299,0,292,287,280,279,264,285,286],
[277,259,0,269,258,235,261,277,271],
[270,264,282,0,259,251,235,259,253],
[280,271,293,292,0,283,254,286,286],
[243,272,316,300,268,0,277,286,276],
[295,287,290,316,297,274,0,307,293],
[272,266,274,292,265,265,244,0,260],
[259,265,280,298,265,275,258,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,251,270,265,277,282,269,273],
[290,0,277,299,286,282,301,288,271],
[300,274,0,283,276,281,304,284,281],
[281,252,268,0,279,298,300,276,277],
[286,265,275,272,0,274,286,283,276],
[274,269,270,253,277,0,288,282,268],
[269,250,247,251,265,263,0,270,250],
[282,263,267,275,268,269,281,0,253],
[278,280,270,274,275,283,301,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,288,296,305,274,312,271,301],
[246,0,264,277,304,240,302,252,275],
[263,287,0,273,321,297,313,256,305],
[255,274,278,0,294,274,319,271,296],
[246,247,230,257,0,229,274,232,250],
[277,311,254,277,322,0,309,283,281],
[239,249,238,232,277,242,0,265,246],
[280,299,295,280,319,268,286,0,286],
[250,276,246,255,301,270,305,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,283,295,290,291,299,273,312],
[246,0,245,248,231,288,274,267,264],
[268,306,0,320,316,328,307,307,286],
[256,303,231,0,267,247,266,270,264],
[261,320,235,284,0,309,263,259,259],
[260,263,223,304,242,0,265,279,244],
[252,277,244,285,288,286,0,283,281],
[278,284,244,281,292,272,268,0,283],
[239,287,265,287,292,307,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,268,284,281,276,270,264,265],
[281,0,277,296,263,287,276,297,272],
[283,274,0,282,263,262,265,278,266],
[267,255,269,0,274,276,263,256,274],
[270,288,288,277,0,299,279,285,283],
[275,264,289,275,252,0,286,287,264],
[281,275,286,288,272,265,0,267,273],
[287,254,273,295,266,264,284,0,273],
[286,279,285,277,268,287,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,270,295,275,275,280,288,281],
[275,0,263,298,275,285,287,275,296],
[281,288,0,291,280,287,279,275,295],
[256,253,260,0,265,257,274,266,282],
[276,276,271,286,0,266,278,276,279],
[276,266,264,294,285,0,280,275,299],
[271,264,272,277,273,271,0,266,287],
[263,276,276,285,275,276,285,0,291],
[270,255,256,269,272,252,264,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,277,292,277,288,298,275,280],
[285,0,271,284,277,296,300,283,287],
[274,280,0,297,275,271,303,278,275],
[259,267,254,0,267,280,271,267,285],
[274,274,276,284,0,300,290,273,301],
[263,255,280,271,251,0,272,275,273],
[253,251,248,280,261,279,0,257,264],
[276,268,273,284,278,276,294,0,274],
[271,264,276,266,250,278,287,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,255,293,261,286,281,316,313],
[264,0,260,251,263,279,292,287,314],
[296,291,0,308,276,292,248,341,288],
[258,300,243,0,275,307,254,299,285],
[290,288,275,276,0,302,247,308,325],
[265,272,259,244,249,0,267,279,267],
[270,259,303,297,304,284,0,283,291],
[235,264,210,252,243,272,268,0,276],
[238,237,263,266,226,284,260,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,260,271,289,284,289,274,292],
[254,0,249,273,268,270,264,267,275],
[291,302,0,285,288,322,273,284,314],
[280,278,266,0,286,277,278,285,288],
[262,283,263,265,0,295,273,289,293],
[267,281,229,274,256,0,253,274,257],
[262,287,278,273,278,298,0,274,280],
[277,284,267,266,262,277,277,0,272],
[259,276,237,263,258,294,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,290,278,262,255,265,253,251],
[289,0,263,280,262,277,274,274,255],
[261,288,0,258,269,258,288,277,268],
[273,271,293,0,273,274,273,286,297],
[289,289,282,278,0,281,287,289,264],
[296,274,293,277,270,0,288,294,276],
[286,277,263,278,264,263,0,275,272],
[298,277,274,265,262,257,276,0,267],
[300,296,283,254,287,275,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,243,280,276,280,293,302,284],
[267,0,242,269,266,299,291,297,284],
[308,309,0,285,263,296,321,309,295],
[271,282,266,0,254,263,273,296,264],
[275,285,288,297,0,253,261,311,286],
[271,252,255,288,298,0,257,278,241],
[258,260,230,278,290,294,0,287,285],
[249,254,242,255,240,273,264,0,254],
[267,267,256,287,265,310,266,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,286,259,279,291,290,275],
[278,0,259,280,272,276,279,292,283],
[281,292,0,292,290,273,289,299,287],
[265,271,259,0,263,273,277,291,272],
[292,279,261,288,0,287,305,315,270],
[272,275,278,278,264,0,289,303,269],
[260,272,262,274,246,262,0,294,268],
[261,259,252,260,236,248,257,0,242],
[276,268,264,279,281,282,283,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,250,274,266,243,229,263,228],
[285,0,236,276,268,300,255,274,233],
[301,315,0,304,311,341,269,328,328],
[277,275,247,0,249,237,282,272,228],
[285,283,240,302,0,274,278,306,286],
[308,251,210,314,277,0,246,286,309],
[322,296,282,269,273,305,0,279,286],
[288,277,223,279,245,265,272,0,247],
[323,318,223,323,265,242,265,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,253,268,267,265,273,257,283],
[263,0,241,251,255,273,244,257,259],
[298,310,0,270,269,291,267,282,296],
[283,300,281,0,265,296,290,284,309],
[284,296,282,286,0,278,263,282,307],
[286,278,260,255,273,0,270,256,294],
[278,307,284,261,288,281,0,280,289],
[294,294,269,267,269,295,271,0,274],
[268,292,255,242,244,257,262,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,283,292,274,295,291,287,295],
[270,0,277,278,294,270,281,289,277],
[268,274,0,274,280,267,282,276,282],
[259,273,277,0,266,272,283,269,284],
[277,257,271,285,0,275,279,273,283],
[256,281,284,279,276,0,291,291,299],
[260,270,269,268,272,260,0,274,286],
[264,262,275,282,278,260,277,0,277],
[256,274,269,267,268,252,265,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,257,250,250,256,257,254,256],
[289,0,283,262,272,275,286,267,264],
[294,268,0,276,288,278,263,271,266],
[301,289,275,0,266,270,265,284,270],
[301,279,263,285,0,280,271,287,280],
[295,276,273,281,271,0,252,248,267],
[294,265,288,286,280,299,0,274,276],
[297,284,280,267,264,303,277,0,265],
[295,287,285,281,271,284,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,271,277,275,293,264,266,265],
[271,0,261,259,273,251,255,261,252],
[280,290,0,287,286,282,284,291,272],
[274,292,264,0,292,294,280,271,281],
[276,278,265,259,0,272,272,268,276],
[258,300,269,257,279,0,263,272,265],
[287,296,267,271,279,288,0,276,273],
[285,290,260,280,283,279,275,0,258],
[286,299,279,270,275,286,278,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,302,330,269,297,340,308,244],
[233,0,310,269,283,308,253,304,206],
[249,241,0,256,225,240,277,223,237],
[221,282,295,0,289,254,260,298,239],
[282,268,326,262,0,222,355,305,275],
[254,243,311,297,329,0,337,297,321],
[211,298,274,291,196,214,0,322,272],
[243,247,328,253,246,254,229,0,248],
[307,345,314,312,276,230,279,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,284,254,276,284,273,275,301],
[262,0,253,259,285,291,287,264,301],
[267,298,0,282,296,307,282,258,293],
[297,292,269,0,296,315,277,288,296],
[275,266,255,255,0,266,265,254,276],
[267,260,244,236,285,0,250,240,269],
[278,264,269,274,286,301,0,267,298],
[276,287,293,263,297,311,284,0,299],
[250,250,258,255,275,282,253,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,279,281,290,279,282,277,269],
[281,0,269,271,265,278,275,292,254],
[272,282,0,292,271,267,270,295,275],
[270,280,259,0,266,289,278,298,275],
[261,286,280,285,0,280,277,285,253],
[272,273,284,262,271,0,278,288,275],
[269,276,281,273,274,273,0,288,274],
[274,259,256,253,266,263,263,0,286],
[282,297,276,276,298,276,277,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,272,278,284,269,275,279,268],
[275,0,271,268,275,258,277,260,247],
[279,280,0,277,288,277,287,289,264],
[273,283,274,0,273,279,295,279,271],
[267,276,263,278,0,273,286,274,262],
[282,293,274,272,278,0,292,293,276],
[276,274,264,256,265,259,0,275,259],
[272,291,262,272,277,258,276,0,269],
[283,304,287,280,289,275,292,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,290,258,240,249,218,252,243],
[304,0,286,243,243,246,245,234,280],
[261,265,0,273,249,228,285,270,272],
[293,308,278,0,291,275,260,240,316],
[311,308,302,260,0,265,307,317,340],
[302,305,323,276,286,0,267,242,306],
[333,306,266,291,244,284,0,251,257],
[299,317,281,311,234,309,300,0,313],
[308,271,279,235,211,245,294,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,373,355,278,295,312,291,260,345],
[178,0,277,226,229,230,234,204,276],
[196,274,0,181,243,220,208,180,254],
[273,325,370,0,325,293,250,290,316],
[256,322,308,226,0,196,234,245,272],
[239,321,331,258,355,0,230,224,333],
[260,317,343,301,317,321,0,294,333],
[291,347,371,261,306,327,257,0,350],
[206,275,297,235,279,218,218,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,242,285,329,337,247,282,291],
[222,0,252,214,266,273,236,228,267],
[309,299,0,280,295,331,300,241,305],
[266,337,271,0,331,292,290,259,289],
[222,285,256,220,0,271,211,223,240],
[214,278,220,259,280,0,243,258,288],
[304,315,251,261,340,308,0,267,290],
[269,323,310,292,328,293,284,0,279],
[260,284,246,262,311,263,261,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,289,240,199,222,305,220,314],
[342,0,307,278,229,260,322,348,287],
[262,244,0,200,268,218,246,315,286],
[311,273,351,0,221,317,320,232,277],
[352,322,283,330,0,288,274,295,280],
[329,291,333,234,263,0,324,302,353],
[246,229,305,231,277,227,0,259,269],
[331,203,236,319,256,249,292,0,306],
[237,264,265,274,271,198,282,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,259,328,297,267,292,277,269],
[270,0,268,284,334,278,298,289,310],
[292,283,0,275,285,281,297,302,275],
[223,267,276,0,292,268,327,293,299],
[254,217,266,259,0,232,287,273,278],
[284,273,270,283,319,0,314,310,272],
[259,253,254,224,264,237,0,228,273],
[274,262,249,258,278,241,323,0,286],
[282,241,276,252,273,279,278,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,255,255,266,251,241,263,231],
[283,0,285,254,264,280,246,249,240],
[296,266,0,260,237,300,270,262,263],
[296,297,291,0,265,276,265,302,246],
[285,287,314,286,0,306,265,275,289],
[300,271,251,275,245,0,251,260,228],
[310,305,281,286,286,300,0,261,262],
[288,302,289,249,276,291,290,0,284],
[320,311,288,305,262,323,289,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,277,281,292,310,290,286,274],
[244,0,259,265,262,277,291,281,268],
[274,292,0,263,269,293,292,293,287],
[270,286,288,0,305,292,292,290,280],
[259,289,282,246,0,274,259,268,271],
[241,274,258,259,277,0,259,268,248],
[261,260,259,259,292,292,0,269,277],
[265,270,258,261,283,283,282,0,254],
[277,283,264,271,280,303,274,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,184,280,339,240,241,236,160],
[366,0,283,315,334,205,208,277,125],
[367,268,0,244,312,187,286,270,177],
[271,236,307,0,346,202,281,209,204],
[212,217,239,205,0,137,164,180,135],
[311,346,364,349,414,0,349,194,272],
[310,343,265,270,387,202,0,247,282],
[315,274,281,342,371,357,304,0,275],
[391,426,374,347,416,279,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,285,269,270,256,261,275,258],
[277,0,280,261,250,256,264,274,273],
[266,271,0,258,247,249,271,266,259],
[282,290,293,0,269,280,289,279,289],
[281,301,304,282,0,274,286,296,290],
[295,295,302,271,277,0,288,288,290],
[290,287,280,262,265,263,0,282,259],
[276,277,285,272,255,263,269,0,280],
[293,278,292,262,261,261,292,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,282,281,283,259,275,265,266],
[276,0,285,282,276,264,288,258,283],
[269,266,0,282,270,262,287,275,267],
[270,269,269,0,276,264,284,258,262],
[268,275,281,275,0,272,281,265,261],
[292,287,289,287,279,0,290,276,268],
[276,263,264,267,270,261,0,250,266],
[286,293,276,293,286,275,301,0,289],
[285,268,284,289,290,283,285,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,302,298,284,295,273,289,284],
[250,0,279,271,213,285,273,270,270],
[249,272,0,235,273,271,259,266,266],
[253,280,316,0,270,280,288,306,255],
[267,338,278,281,0,300,262,291,308],
[256,266,280,271,251,0,250,254,270],
[278,278,292,263,289,301,0,292,290],
[262,281,285,245,260,297,259,0,248],
[267,281,285,296,243,281,261,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,343,307,297,361,337,405,297,269],
[208,0,268,246,214,226,303,279,165],
[244,283,0,235,232,275,357,280,239],
[254,305,316,0,277,279,351,259,284],
[190,337,319,274,0,217,344,250,215],
[214,325,276,272,334,0,387,294,277],
[146,248,194,200,207,164,0,192,204],
[254,272,271,292,301,257,359,0,198],
[282,386,312,267,336,274,347,353,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,286,281,267,273,287,288,279],
[259,0,293,281,248,268,285,279,266],
[265,258,0,265,236,258,273,267,257],
[270,270,286,0,252,273,286,272,277],
[284,303,315,299,0,276,291,275,282],
[278,283,293,278,275,0,275,276,274],
[264,266,278,265,260,276,0,272,269],
[263,272,284,279,276,275,279,0,285],
[272,285,294,274,269,277,282,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,288,276,277,252,262,307,267],
[283,0,309,295,292,272,279,290,283],
[263,242,0,258,257,223,262,269,244],
[275,256,293,0,280,263,277,285,257],
[274,259,294,271,0,256,260,293,270],
[299,279,328,288,295,0,273,310,278],
[289,272,289,274,291,278,0,269,278],
[244,261,282,266,258,241,282,0,241],
[284,268,307,294,281,273,273,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,285,278,277,277,276,259],
[274,0,286,277,281,278,259,292,281],
[262,265,0,254,252,273,241,269,268],
[266,274,297,0,282,283,264,281,268],
[273,270,299,269,0,282,284,285,280],
[274,273,278,268,269,0,263,276,280],
[274,292,310,287,267,288,0,279,282],
[275,259,282,270,266,275,272,0,273],
[292,270,283,283,271,271,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,293,276,272,299,297,290,287],
[242,0,269,265,240,278,274,234,283],
[258,282,0,261,240,292,268,254,271],
[275,286,290,0,278,296,274,269,299],
[279,311,311,273,0,292,278,280,299],
[252,273,259,255,259,0,276,264,271],
[254,277,283,277,273,275,0,247,276],
[261,317,297,282,271,287,304,0,296],
[264,268,280,252,252,280,275,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,244,287,278,215,206,285,294],
[339,0,267,278,295,307,252,242,311],
[307,284,0,339,284,276,201,289,324],
[264,273,212,0,305,305,226,216,343],
[273,256,267,246,0,198,201,247,309],
[336,244,275,246,353,0,276,272,329],
[345,299,350,325,350,275,0,355,345],
[266,309,262,335,304,279,196,0,294],
[257,240,227,208,242,222,206,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,297,280,292,290,271,287,289],
[285,0,276,301,257,265,266,273,268],
[254,275,0,284,286,268,271,272,283],
[271,250,267,0,276,270,251,269,282],
[259,294,265,275,0,263,275,266,274],
[261,286,283,281,288,0,280,267,280],
[280,285,280,300,276,271,0,289,287],
[264,278,279,282,285,284,262,0,281],
[262,283,268,269,277,271,264,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,275,265,286,297,283,271,280],
[309,0,282,261,290,314,299,267,290],
[276,269,0,243,293,324,291,269,257],
[286,290,308,0,306,333,275,291,305],
[265,261,258,245,0,307,274,246,265],
[254,237,227,218,244,0,257,233,235],
[268,252,260,276,277,294,0,248,253],
[280,284,282,260,305,318,303,0,293],
[271,261,294,246,286,316,298,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,280,259,276,291,281,269,279],
[301,0,297,267,290,293,296,287,278],
[271,254,0,272,300,304,292,277,287],
[292,284,279,0,290,312,300,272,274],
[275,261,251,261,0,296,285,271,263],
[260,258,247,239,255,0,264,256,264],
[270,255,259,251,266,287,0,260,259],
[282,264,274,279,280,295,291,0,277],
[272,273,264,277,288,287,292,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,300,337,272,245,280,279,277],
[278,0,317,280,267,242,295,300,248],
[251,234,0,237,299,258,240,230,198],
[214,271,314,0,237,220,267,237,230],
[279,284,252,314,0,273,321,252,245],
[306,309,293,331,278,0,288,252,311],
[271,256,311,284,230,263,0,300,277],
[272,251,321,314,299,299,251,0,280],
[274,303,353,321,306,240,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,301,289,272,291,293,273,293],
[267,0,272,271,270,274,277,271,287],
[250,279,0,273,272,261,279,267,292],
[262,280,278,0,288,268,278,277,294],
[279,281,279,263,0,257,261,264,290],
[260,277,290,283,294,0,277,292,294],
[258,274,272,273,290,274,0,279,276],
[278,280,284,274,287,259,272,0,306],
[258,264,259,257,261,257,275,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,289,271,262,285,267,288,263],
[289,0,296,287,281,284,283,269,278],
[262,255,0,276,288,277,262,278,265],
[280,264,275,0,271,298,275,293,284],
[289,270,263,280,0,298,276,281,279],
[266,267,274,253,253,0,258,263,273],
[284,268,289,276,275,293,0,282,283],
[263,282,273,258,270,288,269,0,271],
[288,273,286,267,272,278,268,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,264,249,236,254,253,255,246],
[291,0,293,261,269,289,257,281,270],
[287,258,0,248,249,252,258,253,243],
[302,290,303,0,269,287,269,272,242],
[315,282,302,282,0,277,281,279,274],
[297,262,299,264,274,0,256,263,257],
[298,294,293,282,270,295,0,286,274],
[296,270,298,279,272,288,265,0,276],
[305,281,308,309,277,294,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,283,299,297,297,286,294,263],
[271,0,282,264,281,259,288,288,249],
[268,269,0,256,296,267,282,299,280],
[252,287,295,0,268,287,283,270,265],
[254,270,255,283,0,275,276,262,272],
[254,292,284,264,276,0,269,285,263],
[265,263,269,268,275,282,0,300,264],
[257,263,252,281,289,266,251,0,270],
[288,302,271,286,279,288,287,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,267,255,242,261,280,260,290],
[278,0,264,284,252,271,276,260,273],
[284,287,0,277,260,289,238,248,275],
[296,267,274,0,276,278,277,244,293],
[309,299,291,275,0,294,298,281,308],
[290,280,262,273,257,0,252,263,277],
[271,275,313,274,253,299,0,251,298],
[291,291,303,307,270,288,300,0,293],
[261,278,276,258,243,274,253,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,275,266,269,279,251,260],
[278,0,261,277,265,263,266,251,266],
[283,290,0,287,299,278,297,280,266],
[276,274,264,0,299,279,278,265,273],
[285,286,252,252,0,275,276,256,267],
[282,288,273,272,276,0,277,269,266],
[272,285,254,273,275,274,0,262,262],
[300,300,271,286,295,282,289,0,292],
[291,285,285,278,284,285,289,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,244,263,269,239,277,255,257],
[270,0,272,283,284,295,304,280,273],
[307,279,0,263,268,277,292,278,297],
[288,268,288,0,308,278,296,283,259],
[282,267,283,243,0,294,321,288,281],
[312,256,274,273,257,0,300,282,307],
[274,247,259,255,230,251,0,265,251],
[296,271,273,268,263,269,286,0,308],
[294,278,254,292,270,244,300,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,272,269,268,279,289,269,259],
[264,0,269,267,255,269,259,245,278],
[279,282,0,278,276,267,291,259,275],
[282,284,273,0,246,281,286,269,278],
[283,296,275,305,0,275,289,278,266],
[272,282,284,270,276,0,299,260,256],
[262,292,260,265,262,252,0,260,277],
[282,306,292,282,273,291,291,0,265],
[292,273,276,273,285,295,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,294,295,292,289,275,274,284],
[279,0,290,297,293,295,293,292,274],
[257,261,0,286,277,273,280,270,274],
[256,254,265,0,263,273,259,238,258],
[259,258,274,288,0,271,279,278,259],
[262,256,278,278,280,0,282,280,275],
[276,258,271,292,272,269,0,260,266],
[277,259,281,313,273,271,291,0,269],
[267,277,277,293,292,276,285,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,267,279,259,274,266,285,259],
[301,0,290,276,266,267,270,266,281],
[284,261,0,280,264,280,262,249,251],
[272,275,271,0,284,269,303,260,282],
[292,285,287,267,0,282,290,271,270],
[277,284,271,282,269,0,266,259,253],
[285,281,289,248,261,285,0,264,290],
[266,285,302,291,280,292,287,0,308],
[292,270,300,269,281,298,261,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,266,262,292,268,276,280,273],
[283,0,263,280,280,275,289,297,279],
[285,288,0,264,301,284,286,299,281],
[289,271,287,0,298,277,281,289,282],
[259,271,250,253,0,259,264,269,256],
[283,276,267,274,292,0,280,287,283],
[275,262,265,270,287,271,0,274,276],
[271,254,252,262,282,264,277,0,257],
[278,272,270,269,295,268,275,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,299,288,307,305,306,278,253],
[256,0,269,273,286,277,250,262,257],
[252,282,0,268,285,291,287,255,256],
[263,278,283,0,279,268,281,265,248],
[244,265,266,272,0,290,274,256,256],
[246,274,260,283,261,0,260,261,256],
[245,301,264,270,277,291,0,261,270],
[273,289,296,286,295,290,290,0,278],
[298,294,295,303,295,295,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,283,265,287,273,263,258,273],
[276,0,298,285,297,275,272,296,293],
[268,253,0,266,273,275,247,260,262],
[286,266,285,0,285,276,278,290,278],
[264,254,278,266,0,264,252,269,270],
[278,276,276,275,287,0,264,277,273],
[288,279,304,273,299,287,0,279,285],
[293,255,291,261,282,274,272,0,268],
[278,258,289,273,281,278,266,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,262,265,278,256,275,292,279],
[277,0,273,291,295,283,289,287,291],
[289,278,0,301,283,281,282,283,274],
[286,260,250,0,284,265,275,265,263],
[273,256,268,267,0,258,261,261,273],
[295,268,270,286,293,0,280,290,283],
[276,262,269,276,290,271,0,278,291],
[259,264,268,286,290,261,273,0,263],
[272,260,277,288,278,268,260,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,269,243,259,261,272,263,250],
[291,0,244,253,258,275,274,265,269],
[282,307,0,266,252,282,250,273,276],
[308,298,285,0,287,286,286,274,297],
[292,293,299,264,0,288,269,266,283],
[290,276,269,265,263,0,268,259,268],
[279,277,301,265,282,283,0,276,296],
[288,286,278,277,285,292,275,0,279],
[301,282,275,254,268,283,255,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,291,273,255,277,282,278,248],
[309,0,271,259,271,302,295,319,298],
[260,280,0,264,246,268,267,292,272],
[278,292,287,0,268,297,274,301,259],
[296,280,305,283,0,279,287,322,266],
[274,249,283,254,272,0,277,305,255],
[269,256,284,277,264,274,0,266,231],
[273,232,259,250,229,246,285,0,213],
[303,253,279,292,285,296,320,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,294,293,291,272,277,287,268],
[275,0,290,292,281,266,274,290,283],
[257,261,0,272,251,261,252,275,270],
[258,259,279,0,253,258,251,267,276],
[260,270,300,298,0,286,276,282,288],
[279,285,290,293,265,0,274,307,288],
[274,277,299,300,275,277,0,304,294],
[264,261,276,284,269,244,247,0,262],
[283,268,281,275,263,263,257,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,263,247,266,288,273,264,250],
[294,0,270,256,295,300,272,279,280],
[288,281,0,266,291,295,269,287,262],
[304,295,285,0,281,293,264,279,286],
[285,256,260,270,0,286,254,249,268],
[263,251,256,258,265,0,276,249,251],
[278,279,282,287,297,275,0,289,283],
[287,272,264,272,302,302,262,0,266],
[301,271,289,265,283,300,268,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,288,279,291,278,298,289],
[278,0,256,291,282,265,274,312,285],
[280,295,0,290,286,277,271,300,295],
[263,260,261,0,275,277,276,290,276],
[272,269,265,276,0,285,263,272,280],
[260,286,274,274,266,0,258,285,289],
[273,277,280,275,288,293,0,302,293],
[253,239,251,261,279,266,249,0,269],
[262,266,256,275,271,262,258,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,307,311,247,337,296,315,316],
[281,0,289,291,275,349,273,289,274],
[244,262,0,239,280,277,231,337,286],
[240,260,312,0,211,257,226,258,229],
[304,276,271,340,0,286,305,309,316],
[214,202,274,294,265,0,251,298,278],
[255,278,320,325,246,300,0,330,295],
[236,262,214,293,242,253,221,0,225],
[235,277,265,322,235,273,256,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,283,277,279,280,276,284,287],
[290,0,292,288,275,297,272,278,278],
[268,259,0,288,253,278,287,265,290],
[274,263,263,0,270,279,259,261,278],
[272,276,298,281,0,276,289,278,287],
[271,254,273,272,275,0,273,268,280],
[275,279,264,292,262,278,0,271,284],
[267,273,286,290,273,283,280,0,276],
[264,273,261,273,264,271,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,287,296,274,293,263,282],
[267,0,270,286,262,274,257,268,269],
[277,281,0,253,274,278,270,274,282],
[264,265,298,0,293,279,271,250,305],
[255,289,277,258,0,273,251,273,264],
[277,277,273,272,278,0,243,273,278],
[258,294,281,280,300,308,0,288,294],
[288,283,277,301,278,278,263,0,270],
[269,282,269,246,287,273,257,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,270,234,263,248,263,230,260],
[300,0,333,294,293,287,318,266,321],
[281,218,0,287,273,255,260,258,292],
[317,257,264,0,258,259,270,249,261],
[288,258,278,293,0,234,233,270,277],
[303,264,296,292,317,0,281,276,268],
[288,233,291,281,318,270,0,276,290],
[321,285,293,302,281,275,275,0,277],
[291,230,259,290,274,283,261,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,259,271,298,254,237,271,268],
[291,0,245,269,268,289,286,306,289],
[292,306,0,311,302,287,260,289,264],
[280,282,240,0,280,257,241,288,239],
[253,283,249,271,0,292,245,254,251],
[297,262,264,294,259,0,277,279,245],
[314,265,291,310,306,274,0,320,267],
[280,245,262,263,297,272,231,0,276],
[283,262,287,312,300,306,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,304,250,281,296,275,276,316],
[243,0,286,250,266,292,270,250,292],
[247,265,0,266,257,266,256,242,258],
[301,301,285,0,287,306,276,275,265],
[270,285,294,264,0,309,270,294,313],
[255,259,285,245,242,0,264,257,260],
[276,281,295,275,281,287,0,259,257],
[275,301,309,276,257,294,292,0,303],
[235,259,293,286,238,291,294,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,261,253,243,260,303,254,273],
[286,0,272,254,263,263,282,280,284],
[290,279,0,283,288,281,307,275,302],
[298,297,268,0,286,289,319,289,309],
[308,288,263,265,0,264,312,287,273],
[291,288,270,262,287,0,323,285,307],
[248,269,244,232,239,228,0,248,265],
[297,271,276,262,264,266,303,0,293],
[278,267,249,242,278,244,286,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,262,266,268,275,264,279],
[283,0,292,274,272,264,281,269,279],
[266,259,0,270,242,256,265,251,259],
[289,277,281,0,284,265,276,273,287],
[285,279,309,267,0,274,282,280,286],
[283,287,295,286,277,0,272,284,286],
[276,270,286,275,269,279,0,274,272],
[287,282,300,278,271,267,277,0,269],
[272,272,292,264,265,265,279,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,306,260,309,296,282,270,251],
[230,0,272,253,289,305,269,280,281],
[245,279,0,245,324,271,235,236,248],
[291,298,306,0,327,289,283,263,305],
[242,262,227,224,0,284,246,222,236],
[255,246,280,262,267,0,277,242,247],
[269,282,316,268,305,274,0,267,268],
[281,271,315,288,329,309,284,0,292],
[300,270,303,246,315,304,283,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,258,255,265,269,247,259,255],
[296,0,288,293,280,281,275,308,280],
[293,263,0,248,283,259,259,266,269],
[296,258,303,0,266,283,277,297,278],
[286,271,268,285,0,261,268,303,289],
[282,270,292,268,290,0,262,297,284],
[304,276,292,274,283,289,0,308,295],
[292,243,285,254,248,254,243,0,262],
[296,271,282,273,262,267,256,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,306,237,234,262,215,299,205],
[274,0,326,260,198,269,190,274,206],
[245,225,0,192,185,299,185,254,205],
[314,291,359,0,259,332,275,330,240],
[317,353,366,292,0,395,299,323,270],
[289,282,252,219,156,0,233,252,199],
[336,361,366,276,252,318,0,307,286],
[252,277,297,221,228,299,244,0,234],
[346,345,346,311,281,352,265,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,287,252,296,289,250,278],
[263,0,276,275,270,294,258,260,273],
[272,275,0,278,271,293,264,279,268],
[264,276,273,0,255,300,285,261,271],
[299,281,280,296,0,285,284,271,262],
[255,257,258,251,266,0,278,237,262],
[262,293,287,266,267,273,0,262,285],
[301,291,272,290,280,314,289,0,299],
[273,278,283,280,289,289,266,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,312,249,264,270,280,280],
[270,0,251,284,260,279,225,244,244],
[278,300,0,315,256,292,273,273,276],
[239,267,236,0,230,254,254,249,248],
[302,291,295,321,0,273,285,284,278],
[287,272,259,297,278,0,295,271,303],
[281,326,278,297,266,256,0,264,294],
[271,307,278,302,267,280,287,0,293],
[271,307,275,303,273,248,257,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,274,276,277,288,262,257],
[281,0,294,289,290,293,283,271,291],
[278,257,0,266,272,281,292,276,275],
[277,262,285,0,286,297,276,259,280],
[275,261,279,265,0,287,283,275,284],
[274,258,270,254,264,0,265,260,275],
[263,268,259,275,268,286,0,277,290],
[289,280,275,292,276,291,274,0,299],
[294,260,276,271,267,276,261,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,276,273,280,300,256,221,317],
[246,0,268,256,246,291,232,260,281],
[275,283,0,297,320,306,255,242,344],
[278,295,254,0,312,332,280,240,285],
[271,305,231,239,0,264,239,224,276],
[251,260,245,219,287,0,233,193,296],
[295,319,296,271,312,318,0,310,327],
[330,291,309,311,327,358,241,0,329],
[234,270,207,266,275,255,224,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,286,258,255,270,283,282,245],
[283,0,295,276,271,275,278,287,274],
[265,256,0,244,267,259,281,276,246],
[293,275,307,0,265,283,303,293,280],
[296,280,284,286,0,277,286,271,273],
[281,276,292,268,274,0,299,286,271],
[268,273,270,248,265,252,0,275,256],
[269,264,275,258,280,265,276,0,249],
[306,277,305,271,278,280,295,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,219,266,285,286,252,274,292],
[280,0,286,296,276,277,277,251,279],
[332,265,0,299,295,304,283,260,293],
[285,255,252,0,257,286,243,264,281],
[266,275,256,294,0,304,266,293,295],
[265,274,247,265,247,0,287,258,267],
[299,274,268,308,285,264,0,289,280],
[277,300,291,287,258,293,262,0,308],
[259,272,258,270,256,284,271,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,264,274,265,253,235,297,260],
[259,0,262,241,228,265,255,260,268],
[287,289,0,290,249,282,271,292,265],
[277,310,261,0,276,293,260,305,287],
[286,323,302,275,0,291,304,300,294],
[298,286,269,258,260,0,253,265,252],
[316,296,280,291,247,298,0,301,259],
[254,291,259,246,251,286,250,0,273],
[291,283,286,264,257,299,292,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,288,292,295,288,296,316,306],
[281,0,303,286,273,266,285,269,315],
[263,248,0,265,265,266,276,271,278],
[259,265,286,0,265,266,270,251,282],
[256,278,286,286,0,254,297,290,272],
[263,285,285,285,297,0,302,282,303],
[255,266,275,281,254,249,0,269,276],
[235,282,280,300,261,269,282,0,286],
[245,236,273,269,279,248,275,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,278,218,267,185,205,230,236],
[337,0,342,192,283,204,250,259,271],
[273,209,0,206,252,174,232,232,233],
[333,359,345,0,306,260,322,326,283],
[284,268,299,245,0,243,260,296,267],
[366,347,377,291,308,0,301,272,337],
[346,301,319,229,291,250,0,268,282],
[321,292,319,225,255,279,283,0,272],
[315,280,318,268,284,214,269,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,142,213,176,230,330,353,206],
[363,0,203,93,154,286,342,277,267],
[409,348,0,348,225,286,495,409,439],
[338,458,203,0,181,230,458,233,316],
[375,397,326,370,0,230,514,338,439],
[321,265,265,321,321,0,404,382,329],
[221,209,56,93,37,147,0,221,267],
[198,274,142,318,213,169,330,0,206],
[345,284,112,235,112,222,284,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,265,267,255,277,257,267,272],
[291,0,275,308,286,294,286,279,285],
[286,276,0,296,277,292,269,284,295],
[284,243,255,0,254,283,274,278,277],
[296,265,274,297,0,271,288,282,295],
[274,257,259,268,280,0,258,263,264],
[294,265,282,277,263,293,0,276,276],
[284,272,267,273,269,288,275,0,300],
[279,266,256,274,256,287,275,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,291,280,274,285,271,291,260],
[278,0,278,259,255,283,285,287,276],
[260,273,0,253,257,265,255,279,255],
[271,292,298,0,287,305,278,326,269],
[277,296,294,264,0,276,267,294,273],
[266,268,286,246,275,0,267,296,271],
[280,266,296,273,284,284,0,286,283],
[260,264,272,225,257,255,265,0,257],
[291,275,296,282,278,280,268,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,313,258,344,293,281,271,276],
[253,0,302,267,282,250,236,247,258],
[238,249,0,243,294,219,230,225,243],
[293,284,308,0,291,281,261,260,281],
[207,269,257,260,0,257,233,239,247],
[258,301,332,270,294,0,269,255,294],
[270,315,321,290,318,282,0,298,291],
[280,304,326,291,312,296,253,0,301],
[275,293,308,270,304,257,260,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,301,282,275,280,289,288,280],
[277,0,264,277,285,292,273,281,288],
[250,287,0,272,262,285,270,284,272],
[269,274,279,0,267,279,280,293,283],
[276,266,289,284,0,266,284,289,286],
[271,259,266,272,285,0,261,270,263],
[262,278,281,271,267,290,0,297,299],
[263,270,267,258,262,281,254,0,266],
[271,263,279,268,265,288,252,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,299,303,274,263,256,310,290],
[285,0,311,319,316,311,262,304,312],
[252,240,0,285,243,220,230,249,233],
[248,232,266,0,262,287,271,305,274],
[277,235,308,289,0,277,257,282,289],
[288,240,331,264,274,0,298,276,286],
[295,289,321,280,294,253,0,272,301],
[241,247,302,246,269,275,279,0,271],
[261,239,318,277,262,265,250,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,259,265,256,251,261,255,278],
[271,0,272,262,288,264,259,253,262],
[292,279,0,274,298,281,265,282,264],
[286,289,277,0,285,279,296,278,263],
[295,263,253,266,0,274,265,266,275],
[300,287,270,272,277,0,271,267,276],
[290,292,286,255,286,280,0,272,296],
[296,298,269,273,285,284,279,0,287],
[273,289,287,288,276,275,255,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,264,266,269,256,270,286,276],
[274,0,277,272,280,256,266,258,264],
[287,274,0,277,274,266,259,273,285],
[285,279,274,0,263,269,275,271,289],
[282,271,277,288,0,268,282,285,271],
[295,295,285,282,283,0,275,278,290],
[281,285,292,276,269,276,0,289,282],
[265,293,278,280,266,273,262,0,280],
[275,287,266,262,280,261,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,287,276,258,277,273,273,267],
[288,0,291,280,282,291,273,286,279],
[264,260,0,255,252,272,264,273,273],
[275,271,296,0,264,282,280,282,271],
[293,269,299,287,0,287,276,281,275],
[274,260,279,269,264,0,263,274,272],
[278,278,287,271,275,288,0,264,276],
[278,265,278,269,270,277,287,0,264],
[284,272,278,280,276,279,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,290,295,276,282,258,267,287],
[279,0,282,300,261,286,260,263,290],
[261,269,0,275,258,260,253,252,272],
[256,251,276,0,253,262,254,251,276],
[275,290,293,298,0,295,290,282,294],
[269,265,291,289,256,0,265,268,300],
[293,291,298,297,261,286,0,273,278],
[284,288,299,300,269,283,278,0,295],
[264,261,279,275,257,251,273,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,259,274,264,302,253,276,273],
[268,0,313,329,303,288,275,285,279],
[292,238,0,284,298,256,250,269,250],
[277,222,267,0,276,297,248,247,245],
[287,248,253,275,0,267,223,267,251],
[249,263,295,254,284,0,251,284,261],
[298,276,301,303,328,300,0,310,272],
[275,266,282,304,284,267,241,0,279],
[278,272,301,306,300,290,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,349,297,293,288,296,264,320],
[275,0,269,263,233,290,257,260,311],
[202,282,0,242,247,269,243,230,259],
[254,288,309,0,240,257,260,299,285],
[258,318,304,311,0,314,278,310,324],
[263,261,282,294,237,0,243,213,302],
[255,294,308,291,273,308,0,277,281],
[287,291,321,252,241,338,274,0,270],
[231,240,292,266,227,249,270,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,289,273,243,246,288,252,281],
[292,0,328,269,295,277,303,283,263],
[262,223,0,263,258,265,269,280,254],
[278,282,288,0,242,308,269,265,247],
[308,256,293,309,0,318,297,283,294],
[305,274,286,243,233,0,281,273,254],
[263,248,282,282,254,270,0,251,261],
[299,268,271,286,268,278,300,0,258],
[270,288,297,304,257,297,290,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,264,259,248,249,248,255,261],
[297,0,269,256,255,259,248,268,257],
[287,282,0,276,265,270,254,277,280],
[292,295,275,0,287,276,270,266,277],
[303,296,286,264,0,273,264,280,268],
[302,292,281,275,278,0,263,279,272],
[303,303,297,281,287,288,0,281,271],
[296,283,274,285,271,272,270,0,281],
[290,294,271,274,283,279,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,261,245,220,295,247,280,206],
[295,0,261,272,248,298,245,243,255],
[290,290,0,284,247,337,269,270,287],
[306,279,267,0,178,305,213,179,235],
[331,303,304,373,0,352,306,275,340],
[256,253,214,246,199,0,248,201,175],
[304,306,282,338,245,303,0,261,287],
[271,308,281,372,276,350,290,0,315],
[345,296,264,316,211,376,264,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,251,263,274,282,249,267,296],
[277,0,267,274,282,279,271,274,292],
[300,284,0,272,278,274,271,266,293],
[288,277,279,0,289,283,274,269,294],
[277,269,273,262,0,260,268,271,292],
[269,272,277,268,291,0,278,271,290],
[302,280,280,277,283,273,0,281,286],
[284,277,285,282,280,280,270,0,303],
[255,259,258,257,259,261,265,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,283,280,266,280,269,265],
[264,0,272,283,265,262,304,279,268],
[265,279,0,262,221,242,285,241,256],
[268,268,289,0,264,264,306,267,258],
[271,286,330,287,0,296,304,282,285],
[285,289,309,287,255,0,290,272,280],
[271,247,266,245,247,261,0,240,266],
[282,272,310,284,269,279,311,0,277],
[286,283,295,293,266,271,285,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,291,253,339,325,305,305,307],
[267,0,253,292,280,262,255,259,284],
[260,298,0,298,315,338,313,292,309],
[298,259,253,0,311,313,291,292,303],
[212,271,236,240,0,286,275,277,289],
[226,289,213,238,265,0,253,279,292],
[246,296,238,260,276,298,0,270,286],
[246,292,259,259,274,272,281,0,250],
[244,267,242,248,262,259,265,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,244,258,256,233,251,275,236],
[278,0,223,261,230,241,228,261,207],
[307,328,0,293,295,298,289,308,268],
[293,290,258,0,291,253,259,292,241],
[295,321,256,260,0,260,263,283,269],
[318,310,253,298,291,0,261,299,309],
[300,323,262,292,288,290,0,284,236],
[276,290,243,259,268,252,267,0,269],
[315,344,283,310,282,242,315,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,286,259,271,291,269,284,259],
[263,0,264,273,261,268,267,290,276],
[265,287,0,257,266,291,264,288,274],
[292,278,294,0,268,308,294,281,272],
[280,290,285,283,0,303,293,295,269],
[260,283,260,243,248,0,263,274,273],
[282,284,287,257,258,288,0,296,276],
[267,261,263,270,256,277,255,0,258],
[292,275,277,279,282,278,275,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,279,292,290,252,296,270,287],
[257,0,273,277,293,282,283,306,270],
[272,278,0,285,241,265,300,293,265],
[259,274,266,0,272,278,297,291,268],
[261,258,310,279,0,277,300,299,255],
[299,269,286,273,274,0,293,305,274],
[255,268,251,254,251,258,0,282,255],
[281,245,258,260,252,246,269,0,267],
[264,281,286,283,296,277,296,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,281,277,258,268,258,273,294],
[301,0,284,293,277,284,274,295,300],
[270,267,0,277,274,246,265,274,294],
[274,258,274,0,257,269,271,275,290],
[293,274,277,294,0,274,271,288,306],
[283,267,305,282,277,0,293,304,319],
[293,277,286,280,280,258,0,290,279],
[278,256,277,276,263,247,261,0,279],
[257,251,257,261,245,232,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,256,248,274,234,237,267,249],
[312,0,280,267,294,285,283,308,306],
[295,271,0,283,300,267,248,291,287],
[303,284,268,0,294,265,297,306,285],
[277,257,251,257,0,261,236,279,266],
[317,266,284,286,290,0,287,284,279],
[314,268,303,254,315,264,0,312,310],
[284,243,260,245,272,267,239,0,280],
[302,245,264,266,285,272,241,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,263,290,259,258,263,269,285],
[302,0,278,300,272,283,260,292,287],
[288,273,0,292,263,260,287,277,273],
[261,251,259,0,232,242,245,252,266],
[292,279,288,319,0,271,265,279,290],
[293,268,291,309,280,0,283,300,289],
[288,291,264,306,286,268,0,293,283],
[282,259,274,299,272,251,258,0,277],
[266,264,278,285,261,262,268,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,302,265,277,307,310,316,332],
[219,0,245,203,244,186,233,242,247],
[249,306,0,266,299,281,279,318,273],
[286,348,285,0,291,314,275,316,314],
[274,307,252,260,0,288,281,304,286],
[244,365,270,237,263,0,260,260,271],
[241,318,272,276,270,291,0,301,267],
[235,309,233,235,247,291,250,0,279],
[219,304,278,237,265,280,284,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,301,297,290,282,282,302,290],
[279,0,295,274,288,285,285,267,267],
[250,256,0,276,269,271,270,261,277],
[254,277,275,0,280,266,269,278,268],
[261,263,282,271,0,270,286,267,273],
[269,266,280,285,281,0,290,284,281],
[269,266,281,282,265,261,0,267,265],
[249,284,290,273,284,267,284,0,283],
[261,284,274,283,278,270,286,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,236,270,256,257,240,263],
[282,0,278,264,289,263,285,251,281],
[283,273,0,266,281,280,255,270,276],
[315,287,285,0,304,273,274,269,292],
[281,262,270,247,0,235,255,242,281],
[295,288,271,278,316,0,294,281,298],
[294,266,296,277,296,257,0,261,282],
[311,300,281,282,309,270,290,0,295],
[288,270,275,259,270,253,269,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,244,255,281,302,281,243,271],
[304,0,264,307,328,338,305,290,330],
[307,287,0,308,325,344,307,273,308],
[296,244,243,0,281,322,297,239,313],
[270,223,226,270,0,302,285,235,271],
[249,213,207,229,249,0,267,226,244],
[270,246,244,254,266,284,0,242,273],
[308,261,278,312,316,325,309,0,315],
[280,221,243,238,280,307,278,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,276,292,286,253,282,281,291],
[266,0,270,274,274,265,253,269,300],
[275,281,0,309,273,269,263,277,287],
[259,277,242,0,244,278,266,262,259],
[265,277,278,307,0,264,291,282,296],
[298,286,282,273,287,0,247,280,310],
[269,298,288,285,260,304,0,306,303],
[270,282,274,289,269,271,245,0,276],
[260,251,264,292,255,241,248,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,280,283,291,296,268,289,300],
[261,0,244,281,281,301,279,295,284],
[271,307,0,285,318,308,269,299,291],
[268,270,266,0,309,289,251,291,300],
[260,270,233,242,0,279,254,259,275],
[255,250,243,262,272,0,258,295,287],
[283,272,282,300,297,293,0,302,290],
[262,256,252,260,292,256,249,0,280],
[251,267,260,251,276,264,261,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,278,279,273,269,273,282,277],
[282,0,270,272,279,288,275,290,276],
[273,281,0,265,263,259,274,274,271],
[272,279,286,0,283,264,267,277,288],
[278,272,288,268,0,278,282,292,285],
[282,263,292,287,273,0,284,252,272],
[278,276,277,284,269,267,0,295,280],
[269,261,277,274,259,299,256,0,277],
[274,275,280,263,266,279,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,261,250,250,278,286,296],
[272,0,238,259,249,263,278,268,270],
[286,313,0,268,272,261,284,282,288],
[290,292,283,0,252,278,300,289,272],
[301,302,279,299,0,271,304,302,313],
[301,288,290,273,280,0,304,294,313],
[273,273,267,251,247,247,0,259,273],
[265,283,269,262,249,257,292,0,276],
[255,281,263,279,238,238,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,297,280,270,291,275,268],
[272,0,283,299,283,268,276,265,279],
[271,268,0,301,273,278,287,262,277],
[254,252,250,0,266,258,265,265,256],
[271,268,278,285,0,272,280,277,268],
[281,283,273,293,279,0,277,265,284],
[260,275,264,286,271,274,0,272,270],
[276,286,289,286,274,286,279,0,273],
[283,272,274,295,283,267,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,314,272,274,300,296,289,278],
[272,0,323,224,248,288,279,316,257],
[237,228,0,228,219,268,237,237,251],
[279,327,323,0,310,295,273,300,250],
[277,303,332,241,0,281,276,300,245],
[251,263,283,256,270,0,255,275,264],
[255,272,314,278,275,296,0,320,268],
[262,235,314,251,251,276,231,0,222],
[273,294,300,301,306,287,283,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,281,269,245,243,232,280,281],
[310,0,300,300,286,257,258,290,256],
[270,251,0,269,263,246,240,253,265],
[282,251,282,0,259,239,247,265,256],
[306,265,288,292,0,291,267,293,257],
[308,294,305,312,260,0,274,276,274],
[319,293,311,304,284,277,0,288,269],
[271,261,298,286,258,275,263,0,256],
[270,295,286,295,294,277,282,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,297,286,270,278,281,286,272],
[267,0,271,270,274,264,271,265,259],
[254,280,0,261,267,278,271,258,267],
[265,281,290,0,272,273,290,272,266],
[281,277,284,279,0,270,301,270,281],
[273,287,273,278,281,0,278,278,280],
[270,280,280,261,250,273,0,269,271],
[265,286,293,279,281,273,282,0,261],
[279,292,284,285,270,271,280,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,263,268,278,259,288,269],
[276,0,286,286,270,286,275,270,262],
[275,265,0,264,267,278,271,266,293],
[288,265,287,0,270,287,263,261,278],
[283,281,284,281,0,295,276,260,284],
[273,265,273,264,256,0,258,254,277],
[292,276,280,288,275,293,0,280,289],
[263,281,285,290,291,297,271,0,281],
[282,289,258,273,267,274,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,259,270,262,286,268,272,270],
[280,0,305,297,285,276,279,289,270],
[292,246,0,282,255,280,274,268,266],
[281,254,269,0,257,276,262,266,259],
[289,266,296,294,0,273,269,277,281],
[265,275,271,275,278,0,253,288,278],
[283,272,277,289,282,298,0,272,260],
[279,262,283,285,274,263,279,0,282],
[281,281,285,292,270,273,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,311,299,273,293,277,278,311],
[268,0,292,242,276,277,254,253,284],
[240,259,0,276,266,275,268,260,274],
[252,309,275,0,261,286,250,271,278],
[278,275,285,290,0,259,266,274,301],
[258,274,276,265,292,0,249,263,284],
[274,297,283,301,285,302,0,266,293],
[273,298,291,280,277,288,285,0,288],
[240,267,277,273,250,267,258,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,262,292,261,259,285,272,278],
[294,0,250,296,261,266,264,273,298],
[289,301,0,296,290,265,274,277,288],
[259,255,255,0,235,259,282,262,265],
[290,290,261,316,0,259,291,272,277],
[292,285,286,292,292,0,285,289,272],
[266,287,277,269,260,266,0,259,266],
[279,278,274,289,279,262,292,0,288],
[273,253,263,286,274,279,285,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,291,281,300,312,275,272,257],
[189,0,264,252,228,189,275,230,289],
[260,287,0,219,234,285,244,152,230],
[270,299,332,0,270,265,280,278,315],
[251,323,317,281,0,246,266,254,265],
[239,362,266,286,305,0,225,215,283],
[276,276,307,271,285,326,0,241,302],
[279,321,399,273,297,336,310,0,278],
[294,262,321,236,286,268,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,276,276,278,297,273,274,294],
[269,0,253,271,289,278,272,291,297],
[275,298,0,281,277,292,276,287,305],
[275,280,270,0,289,270,292,279,300],
[273,262,274,262,0,286,275,269,283],
[254,273,259,281,265,0,253,254,287],
[278,279,275,259,276,298,0,272,301],
[277,260,264,272,282,297,279,0,287],
[257,254,246,251,268,264,250,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,274,286,286,278,285,287],
[277,0,281,265,290,278,288,260,275],
[281,270,0,272,277,269,277,276,285],
[277,286,279,0,302,271,282,272,287],
[265,261,274,249,0,262,273,280,259],
[265,273,282,280,289,0,277,275,285],
[273,263,274,269,278,274,0,272,280],
[266,291,275,279,271,276,279,0,281],
[264,276,266,264,292,266,271,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,375,308,299,332,330,235,307],
[197,0,336,277,267,238,261,278,330],
[176,215,0,275,246,229,206,271,301],
[243,274,276,0,237,214,267,222,315],
[252,284,305,314,0,245,261,241,279],
[219,313,322,337,306,0,286,298,375],
[221,290,345,284,290,265,0,317,322],
[316,273,280,329,310,253,234,0,335],
[244,221,250,236,272,176,229,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,286,280,260,256,253,264,266],
[279,0,289,303,290,305,280,271,298],
[265,262,0,280,269,263,267,274,269],
[271,248,271,0,271,277,289,255,282],
[291,261,282,280,0,279,266,279,282],
[295,246,288,274,272,0,269,267,276],
[298,271,284,262,285,282,0,280,280],
[287,280,277,296,272,284,271,0,274],
[285,253,282,269,269,275,271,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,271,282,273,270,263,265],
[281,0,290,280,295,281,276,274,279],
[269,261,0,247,267,261,258,233,232],
[280,271,304,0,284,271,279,272,275],
[269,256,284,267,0,288,299,286,270],
[278,270,290,280,263,0,260,257,289],
[281,275,293,272,252,291,0,273,262],
[288,277,318,279,265,294,278,0,285],
[286,272,319,276,281,262,289,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,286,268,247,257,262,271,264],
[284,0,283,288,280,278,257,288,280],
[265,268,0,274,259,252,272,272,263],
[283,263,277,0,260,264,264,275,271],
[304,271,292,291,0,264,284,300,285],
[294,273,299,287,287,0,273,295,298],
[289,294,279,287,267,278,0,285,280],
[280,263,279,276,251,256,266,0,264],
[287,271,288,280,266,253,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,268,238,273,250,281,276,303],
[303,0,304,291,302,286,283,265,282],
[283,247,0,251,306,270,277,198,275],
[313,260,300,0,279,287,303,250,305],
[278,249,245,272,0,278,264,259,298],
[301,265,281,264,273,0,295,274,290],
[270,268,274,248,287,256,0,254,304],
[275,286,353,301,292,277,297,0,292],
[248,269,276,246,253,261,247,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,274,237,282,245,208,284,246],
[304,0,285,246,300,197,266,245,258],
[277,266,0,243,271,245,181,182,248],
[314,305,308,0,312,257,248,225,306],
[269,251,280,239,0,231,176,230,233],
[306,354,306,294,320,0,240,234,264],
[343,285,370,303,375,311,0,255,280],
[267,306,369,326,321,317,296,0,327],
[305,293,303,245,318,287,271,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,297,277,274,292,277,302,278],
[287,0,310,312,264,290,293,309,292],
[254,241,0,253,257,273,277,271,286],
[274,239,298,0,296,259,273,279,266],
[277,287,294,255,0,287,280,294,270],
[259,261,278,292,264,0,280,264,294],
[274,258,274,278,271,271,0,279,283],
[249,242,280,272,257,287,272,0,264],
[273,259,265,285,281,257,268,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,258,298,260,326,310,236,295],
[229,0,312,270,220,295,364,268,305],
[293,239,0,277,277,303,283,250,281],
[253,281,274,0,272,296,361,254,261],
[291,331,274,279,0,327,311,314,342],
[225,256,248,255,224,0,340,190,269],
[241,187,268,190,240,211,0,206,259],
[315,283,301,297,237,361,345,0,319],
[256,246,270,290,209,282,292,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,289,292,294,301,282,277,268],
[271,0,284,282,297,292,281,284,285],
[262,267,0,276,261,276,270,250,258],
[259,269,275,0,279,283,272,259,260],
[257,254,290,272,0,275,266,261,259],
[250,259,275,268,276,0,255,269,253],
[269,270,281,279,285,296,0,281,269],
[274,267,301,292,290,282,270,0,275],
[283,266,293,291,292,298,282,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,300,304,273,305,269,293,289],
[264,0,267,283,256,273,262,269,290],
[251,284,0,268,251,257,281,260,265],
[247,268,283,0,261,276,256,268,250],
[278,295,300,290,0,266,275,280,288],
[246,278,294,275,285,0,265,276,289],
[282,289,270,295,276,286,0,272,274],
[258,282,291,283,271,275,279,0,296],
[262,261,286,301,263,262,277,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,308,277,306,296,265,294,301],
[278,0,283,246,266,276,274,274,254],
[243,268,0,245,256,278,244,263,251],
[274,305,306,0,286,299,289,289,270],
[245,285,295,265,0,286,269,282,262],
[255,275,273,252,265,0,246,260,262],
[286,277,307,262,282,305,0,275,280],
[257,277,288,262,269,291,276,0,265],
[250,297,300,281,289,289,271,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,284,308,319,266,277,293,308],
[274,0,245,293,285,287,282,293,270],
[267,306,0,285,284,307,302,273,303],
[243,258,266,0,270,219,265,291,285],
[232,266,267,281,0,268,276,286,292],
[285,264,244,332,283,0,279,269,264],
[274,269,249,286,275,272,0,300,311],
[258,258,278,260,265,282,251,0,273],
[243,281,248,266,259,287,240,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,244,286,256,291,252,276,276],
[275,0,250,264,313,279,291,274,263],
[307,301,0,263,264,320,273,277,267],
[265,287,288,0,279,336,280,271,294],
[295,238,287,272,0,289,299,268,313],
[260,272,231,215,262,0,262,232,281],
[299,260,278,271,252,289,0,277,282],
[275,277,274,280,283,319,274,0,268],
[275,288,284,257,238,270,269,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,268,279,275,277,269,269,277],
[284,0,268,272,271,282,261,250,273],
[283,283,0,277,280,282,277,262,277],
[272,279,274,0,269,267,256,245,268],
[276,280,271,282,0,284,262,270,289],
[274,269,269,284,267,0,263,249,267],
[282,290,274,295,289,288,0,276,278],
[282,301,289,306,281,302,275,0,299],
[274,278,274,283,262,284,273,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,308,327,287,279,280,323,271],
[269,0,289,286,230,277,284,304,256],
[243,262,0,262,232,273,265,276,261],
[224,265,289,0,223,279,247,264,245],
[264,321,319,328,0,308,282,295,298],
[272,274,278,272,243,0,254,308,252],
[271,267,286,304,269,297,0,318,270],
[228,247,275,287,256,243,233,0,249],
[280,295,290,306,253,299,281,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,298,270,287,273,291,288,289],
[262,0,280,258,268,267,270,266,279],
[253,271,0,246,261,261,284,266,288],
[281,293,305,0,273,281,283,281,286],
[264,283,290,278,0,292,301,296,288],
[278,284,290,270,259,0,294,294,305],
[260,281,267,268,250,257,0,252,261],
[263,285,285,270,255,257,299,0,296],
[262,272,263,265,263,246,290,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,276,295,276,275,295,277],
[291,0,283,275,272,282,275,278,265],
[285,268,0,287,273,263,279,295,295],
[275,276,264,0,279,278,284,291,271],
[256,279,278,272,0,261,272,306,272],
[275,269,288,273,290,0,287,310,290],
[276,276,272,267,279,264,0,277,269],
[256,273,256,260,245,241,274,0,250],
[274,286,256,280,279,261,282,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,254,250,261,260,249,260],
[283,0,270,273,271,282,267,270,261],
[297,281,0,273,265,270,263,262,273],
[297,278,278,0,282,276,269,270,277],
[301,280,286,269,0,288,283,283,286],
[290,269,281,275,263,0,251,266,271],
[291,284,288,282,268,300,0,263,291],
[302,281,289,281,268,285,288,0,284],
[291,290,278,274,265,280,260,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,279,268,273,292,274,256],
[277,0,276,277,284,291,293,276,273],
[285,275,0,283,274,293,293,292,261],
[272,274,268,0,271,273,277,274,269],
[283,267,277,280,0,280,291,274,263],
[278,260,258,278,271,0,283,263,280],
[259,258,258,274,260,268,0,258,261],
[277,275,259,277,277,288,293,0,263],
[295,278,290,282,288,271,290,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,260,287,269,277,277,296,281],
[267,0,277,270,256,283,268,281,272],
[291,274,0,267,277,284,279,280,283],
[264,281,284,0,278,288,272,276,272],
[282,295,274,273,0,285,276,293,281],
[274,268,267,263,266,0,268,276,282],
[274,283,272,279,275,283,0,279,269],
[255,270,271,275,258,275,272,0,261],
[270,279,268,279,270,269,282,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,299,270,273,298,274,285,293],
[283,0,294,303,289,287,273,293,259],
[252,257,0,287,261,312,267,288,268],
[281,248,264,0,271,288,251,266,262],
[278,262,290,280,0,295,259,293,284],
[253,264,239,263,256,0,252,277,274],
[277,278,284,300,292,299,0,304,266],
[266,258,263,285,258,274,247,0,265],
[258,292,283,289,267,277,285,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,250,250,261,256,273,258],
[282,0,267,286,263,275,252,264,268],
[294,284,0,279,284,264,261,280,261],
[301,265,272,0,269,280,260,283,270],
[301,288,267,282,0,290,285,275,274],
[290,276,287,271,261,0,268,264,276],
[295,299,290,291,266,283,0,279,265],
[278,287,271,268,276,287,272,0,266],
[293,283,290,281,277,275,286,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,263,287,283,252,263,246,267],
[294,0,309,269,276,275,301,287,247],
[288,242,0,281,265,290,261,282,276],
[264,282,270,0,266,260,247,265,242],
[268,275,286,285,0,304,286,265,277],
[299,276,261,291,247,0,286,275,273],
[288,250,290,304,265,265,0,296,266],
[305,264,269,286,286,276,255,0,283],
[284,304,275,309,274,278,285,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,270,270,261,273,232,259,271],
[254,0,270,277,296,286,263,250,291],
[281,281,0,299,269,297,268,251,259],
[281,274,252,0,260,295,263,253,249],
[290,255,282,291,0,287,276,257,251],
[278,265,254,256,264,0,251,259,256],
[319,288,283,288,275,300,0,280,276],
[292,301,300,298,294,292,271,0,292],
[280,260,292,302,300,295,275,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,224,274,271,275,321,284,275],
[266,0,226,310,258,277,302,276,300],
[327,325,0,281,285,256,364,307,322],
[277,241,270,0,273,266,298,264,336],
[280,293,266,278,0,282,319,278,302],
[276,274,295,285,269,0,293,295,343],
[230,249,187,253,232,258,0,249,296],
[267,275,244,287,273,256,302,0,325],
[276,251,229,215,249,208,255,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,282,288,310,252,280,280,276],
[252,0,258,271,296,270,279,258,275],
[269,293,0,272,298,281,273,268,267],
[263,280,279,0,296,281,269,266,248],
[241,255,253,255,0,244,241,246,256],
[299,281,270,270,307,0,280,272,293],
[271,272,278,282,310,271,0,262,280],
[271,293,283,285,305,279,289,0,282],
[275,276,284,303,295,258,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,304,215,232,270,363,270,289],
[294,0,407,291,242,345,334,233,307],
[247,144,0,215,139,323,356,247,226],
[336,260,336,0,231,297,392,244,340],
[319,309,412,320,0,357,414,304,267],
[281,206,228,254,194,0,317,242,231],
[188,217,195,159,137,234,0,132,141],
[281,318,304,307,247,309,419,0,292],
[262,244,325,211,284,320,410,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,281,299,279,273,276,285,276],
[263,0,259,292,266,268,274,271,265],
[270,292,0,289,271,294,265,267,268],
[252,259,262,0,273,253,261,244,252],
[272,285,280,278,0,292,265,273,259],
[278,283,257,298,259,0,257,270,251],
[275,277,286,290,286,294,0,274,269],
[266,280,284,307,278,281,277,0,268],
[275,286,283,299,292,300,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,303,270,287,283,295,284,280],
[286,0,296,286,280,283,298,268,273],
[248,255,0,270,279,280,275,257,266],
[281,265,281,0,272,276,296,267,273],
[264,271,272,279,0,283,280,269,261],
[268,268,271,275,268,0,280,237,271],
[256,253,276,255,271,271,0,243,267],
[267,283,294,284,282,314,308,0,289],
[271,278,285,278,290,280,284,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,313,288,344,298,376,285,277],
[286,0,268,273,287,301,294,253,244],
[238,283,0,235,283,306,306,241,241],
[263,278,316,0,335,334,327,289,222],
[207,264,268,216,0,236,284,239,197],
[253,250,245,217,315,0,338,268,180],
[175,257,245,224,267,213,0,214,215],
[266,298,310,262,312,283,337,0,244],
[274,307,310,329,354,371,336,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,260,300,302,290,313,300,317],
[246,0,249,275,271,243,268,281,251],
[291,302,0,312,291,265,315,295,284],
[251,276,239,0,302,272,282,293,246],
[249,280,260,249,0,267,309,288,267],
[261,308,286,279,284,0,288,290,276],
[238,283,236,269,242,263,0,280,271],
[251,270,256,258,263,261,271,0,282],
[234,300,267,305,284,275,280,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,291,294,272,275,281,268,267],
[280,0,271,304,279,291,272,281,281],
[260,280,0,290,268,279,274,269,271],
[257,247,261,0,263,281,261,265,285],
[279,272,283,288,0,281,264,270,270],
[276,260,272,270,270,0,250,244,256],
[270,279,277,290,287,301,0,277,261],
[283,270,282,286,281,307,274,0,269],
[284,270,280,266,281,295,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,271,285,296,286,288,286],
[281,0,289,276,283,315,293,271,297],
[279,262,0,288,278,292,278,274,287],
[280,275,263,0,257,268,257,259,279],
[266,268,273,294,0,301,287,278,277],
[255,236,259,283,250,0,242,271,271],
[265,258,273,294,264,309,0,274,252],
[263,280,277,292,273,280,277,0,265],
[265,254,264,272,274,280,299,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,271,281,271,260,247,293,214],
[269,0,315,310,256,274,252,277,292],
[280,236,0,261,250,275,237,288,197],
[270,241,290,0,315,300,222,244,222],
[280,295,301,236,0,352,268,255,233],
[291,277,276,251,199,0,276,287,255],
[304,299,314,329,283,275,0,269,213],
[258,274,263,307,296,264,282,0,257],
[337,259,354,329,318,296,338,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,287,286,290,273,264,278,286],
[281,0,283,277,263,262,274,251,263],
[264,268,0,246,267,265,275,256,270],
[265,274,305,0,262,264,276,256,274],
[261,288,284,289,0,276,261,252,275],
[278,289,286,287,275,0,281,256,298],
[287,277,276,275,290,270,0,246,265],
[273,300,295,295,299,295,305,0,279],
[265,288,281,277,276,253,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,300,285,277,289,288,295,267],
[275,0,274,279,265,271,287,293,259],
[251,277,0,276,269,274,275,283,280],
[266,272,275,0,285,266,297,286,284],
[274,286,282,266,0,275,289,293,278],
[262,280,277,285,276,0,275,292,285],
[263,264,276,254,262,276,0,271,278],
[256,258,268,265,258,259,280,0,271],
[284,292,271,267,273,266,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,249,288,302,284,256,321,304],
[273,0,264,248,261,295,254,253,268],
[302,287,0,281,296,320,243,301,289],
[263,303,270,0,319,314,290,291,298],
[249,290,255,232,0,262,246,265,265],
[267,256,231,237,289,0,228,276,270],
[295,297,308,261,305,323,0,286,293],
[230,298,250,260,286,275,265,0,236],
[247,283,262,253,286,281,258,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,243,261,268,281,266,275,265],
[284,0,246,266,258,297,289,302,295],
[308,305,0,293,306,287,282,290,267],
[290,285,258,0,301,293,295,301,261],
[283,293,245,250,0,258,251,292,258],
[270,254,264,258,293,0,259,271,254],
[285,262,269,256,300,292,0,294,298],
[276,249,261,250,259,280,257,0,282],
[286,256,284,290,293,297,253,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,275,303,329,282,303,301,260],
[238,0,269,292,279,236,247,281,260],
[276,282,0,311,329,255,303,269,355],
[248,259,240,0,290,321,255,254,241],
[222,272,222,261,0,210,305,323,266],
[269,315,296,230,341,0,280,247,221],
[248,304,248,296,246,271,0,272,302],
[250,270,282,297,228,304,279,0,281],
[291,291,196,310,285,330,249,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,287,284,276,289,274,301],
[268,0,267,279,288,263,271,277,275],
[271,284,0,272,292,275,276,275,272],
[264,272,279,0,287,270,275,275,302],
[267,263,259,264,0,264,266,259,272],
[275,288,276,281,287,0,281,289,282],
[262,280,275,276,285,270,0,266,290],
[277,274,276,276,292,262,285,0,285],
[250,276,279,249,279,269,261,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,267,279,280,250,271,288,260],
[298,0,309,283,297,257,271,285,282],
[284,242,0,303,273,277,264,286,260],
[272,268,248,0,259,246,245,277,270],
[271,254,278,292,0,268,281,278,284],
[301,294,274,305,283,0,293,315,273],
[280,280,287,306,270,258,0,291,278],
[263,266,265,274,273,236,260,0,254],
[291,269,291,281,267,278,273,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,305,293,269,257,261,280],
[281,0,304,294,283,274,295,292,292],
[275,247,0,280,271,242,256,259,263],
[246,257,271,0,254,247,237,247,272],
[258,268,280,297,0,266,259,268,250],
[282,277,309,304,285,0,259,283,280],
[294,256,295,314,292,292,0,276,289],
[290,259,292,304,283,268,275,0,291],
[271,259,288,279,301,271,262,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,292,281,295,296,302,285,262],
[256,0,282,255,269,263,267,282,252],
[259,269,0,243,260,258,275,273,263],
[270,296,308,0,298,298,288,290,284],
[256,282,291,253,0,278,280,271,270],
[255,288,293,253,273,0,286,291,276],
[249,284,276,263,271,265,0,264,240],
[266,269,278,261,280,260,287,0,268],
[289,299,288,267,281,275,311,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,299,275,275,289,267,283,280],
[259,0,269,265,248,265,260,253,268],
[252,282,0,259,259,256,265,248,255],
[276,286,292,0,273,263,284,277,279],
[276,303,292,278,0,270,279,264,269],
[262,286,295,288,281,0,279,284,263],
[284,291,286,267,272,272,0,281,272],
[268,298,303,274,287,267,270,0,294],
[271,283,296,272,282,288,279,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,261,290,291,287,288,273,280],
[301,0,283,285,301,295,307,263,287],
[290,268,0,273,282,280,291,294,287],
[261,266,278,0,298,289,281,273,266],
[260,250,269,253,0,285,285,269,273],
[264,256,271,262,266,0,272,291,279],
[263,244,260,270,266,279,0,270,259],
[278,288,257,278,282,260,281,0,278],
[271,264,264,285,278,272,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,222,283,216,307,204,53,185],
[278,0,399,210,257,314,288,182,240],
[329,152,0,266,296,293,304,142,179],
[268,341,285,0,161,356,325,68,277],
[335,294,255,390,0,300,282,177,294],
[244,237,258,195,251,0,280,99,270],
[347,263,247,226,269,271,0,163,255],
[498,369,409,483,374,452,388,0,240],
[366,311,372,274,257,281,296,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,262,298,277,261,293,275,275],
[254,0,279,260,278,264,280,275,265],
[289,272,0,254,283,263,255,264,261],
[253,291,297,0,287,276,300,302,271],
[274,273,268,264,0,272,264,282,280],
[290,287,288,275,279,0,287,284,309],
[258,271,296,251,287,264,0,289,263],
[276,276,287,249,269,267,262,0,283],
[276,286,290,280,271,242,288,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,295,305,362,329,299,271,303],
[225,0,263,238,291,290,273,273,309],
[256,288,0,239,313,254,253,322,293],
[246,313,312,0,315,313,271,248,209],
[189,260,238,236,0,262,222,221,238],
[222,261,297,238,289,0,239,267,268],
[252,278,298,280,329,312,0,281,286],
[280,278,229,303,330,284,270,0,250],
[248,242,258,342,313,283,265,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,250,293,287,260,276,264,271],
[279,0,294,288,287,263,289,281,268],
[301,257,0,270,278,267,293,294,294],
[258,263,281,0,284,265,248,235,283],
[264,264,273,267,0,260,265,229,268],
[291,288,284,286,291,0,267,271,288],
[275,262,258,303,286,284,0,269,288],
[287,270,257,316,322,280,282,0,316],
[280,283,257,268,283,263,263,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,284,284,276,271,286,294],
[272,0,272,281,292,270,277,309,290],
[268,279,0,277,280,254,262,310,272],
[267,270,274,0,255,268,243,282,278],
[267,259,271,296,0,259,268,306,294],
[275,281,297,283,292,0,273,306,295],
[280,274,289,308,283,278,0,295,290],
[265,242,241,269,245,245,256,0,266],
[257,261,279,273,257,256,261,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,271,278,284,282,273,257,296],
[285,0,269,296,292,283,301,283,295],
[280,282,0,300,290,279,290,274,300],
[273,255,251,0,267,261,274,269,269],
[267,259,261,284,0,264,271,245,276],
[269,268,272,290,287,0,280,259,275],
[278,250,261,277,280,271,0,260,277],
[294,268,277,282,306,292,291,0,283],
[255,256,251,282,275,276,274,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,292,259,281,285,319,263,300],
[285,0,316,287,298,275,301,291,295],
[259,235,0,266,283,270,287,258,284],
[292,264,285,0,283,266,318,303,288],
[270,253,268,268,0,271,276,261,277],
[266,276,281,285,280,0,297,291,281],
[232,250,264,233,275,254,0,254,273],
[288,260,293,248,290,260,297,0,278],
[251,256,267,263,274,270,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,279,288,271,281,268,281,291],
[239,0,284,263,268,271,252,274,277],
[272,267,0,261,251,262,263,277,276],
[263,288,290,0,276,271,282,266,279],
[280,283,300,275,0,282,274,274,304],
[270,280,289,280,269,0,286,280,282],
[283,299,288,269,277,265,0,276,293],
[270,277,274,285,277,271,275,0,286],
[260,274,275,272,247,269,258,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,301,264,315,279,300,304,284],
[287,0,298,240,282,286,295,287,285],
[250,253,0,253,240,246,258,280,218],
[287,311,298,0,313,280,305,249,311],
[236,269,311,238,0,282,314,262,315],
[272,265,305,271,269,0,307,274,294],
[251,256,293,246,237,244,0,283,289],
[247,264,271,302,289,277,268,0,308],
[267,266,333,240,236,257,262,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,276,298,299,270,279,292,276],
[287,0,249,260,285,265,246,279,273],
[275,302,0,285,272,290,288,293,287],
[253,291,266,0,264,276,283,295,272],
[252,266,279,287,0,278,248,288,297],
[281,286,261,275,273,0,268,289,299],
[272,305,263,268,303,283,0,282,265],
[259,272,258,256,263,262,269,0,267],
[275,278,264,279,254,252,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,283,260,291,274,270,289,277],
[289,0,296,264,295,293,269,282,284],
[268,255,0,254,274,259,268,273,267],
[291,287,297,0,296,298,267,287,277],
[260,256,277,255,0,254,266,264,251],
[277,258,292,253,297,0,274,290,265],
[281,282,283,284,285,277,0,290,262],
[262,269,278,264,287,261,261,0,269],
[274,267,284,274,300,286,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,253,283,290,299,334,313,264],
[301,0,264,281,292,277,315,296,285],
[298,287,0,288,312,301,321,314,249],
[268,270,263,0,280,284,316,278,245],
[261,259,239,271,0,249,299,295,252],
[252,274,250,267,302,0,296,274,261],
[217,236,230,235,252,255,0,244,233],
[238,255,237,273,256,277,307,0,222],
[287,266,302,306,299,290,318,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,278,270,286,260,255,283,279],
[289,0,283,273,295,302,287,315,266],
[273,268,0,283,279,261,270,259,261],
[281,278,268,0,286,254,281,279,265],
[265,256,272,265,0,251,265,271,250],
[291,249,290,297,300,0,299,280,260],
[296,264,281,270,286,252,0,257,264],
[268,236,292,272,280,271,294,0,264],
[272,285,290,286,301,291,287,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,269,252,239,238,287,255,265],
[251,0,244,244,197,254,277,243,252],
[282,307,0,245,216,241,288,269,277],
[299,307,306,0,268,298,336,306,273],
[312,354,335,283,0,268,342,297,315],
[313,297,310,253,283,0,300,274,277],
[264,274,263,215,209,251,0,275,283],
[296,308,282,245,254,277,276,0,314],
[286,299,274,278,236,274,268,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,268,283,279,283,285,278,288],
[261,0,269,271,283,277,264,260,248],
[283,282,0,273,266,257,263,263,281],
[268,280,278,0,277,285,273,269,267],
[272,268,285,274,0,288,281,266,268],
[268,274,294,266,263,0,265,270,272],
[266,287,288,278,270,286,0,285,266],
[273,291,288,282,285,281,266,0,292],
[263,303,270,284,283,279,285,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,265,261,269,279,261,273,289],
[289,0,277,270,294,306,268,309,306],
[286,274,0,274,284,291,276,302,294],
[290,281,277,0,284,296,268,313,287],
[282,257,267,267,0,286,269,272,278],
[272,245,260,255,265,0,255,289,288],
[290,283,275,283,282,296,0,296,311],
[278,242,249,238,279,262,255,0,264],
[262,245,257,264,273,263,240,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,189,338,307,239,410,301,295],
[257,0,231,341,330,307,449,326,301],
[362,320,0,374,376,260,378,294,318],
[213,210,177,0,259,203,296,224,212],
[244,221,175,292,0,245,306,302,162],
[312,244,291,348,306,0,412,299,250],
[141,102,173,255,245,139,0,265,181],
[250,225,257,327,249,252,286,0,238],
[256,250,233,339,389,301,370,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,288,297,293,319,273,286,281],
[253,0,272,267,300,275,266,272,265],
[263,279,0,276,272,268,270,281,278],
[254,284,275,0,314,287,285,284,264],
[258,251,279,237,0,271,258,266,278],
[232,276,283,264,280,0,278,262,280],
[278,285,281,266,293,273,0,270,282],
[265,279,270,267,285,289,281,0,272],
[270,286,273,287,273,271,269,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,259,248,241,267,241,274,247],
[305,0,269,277,287,285,266,307,292],
[292,282,0,265,277,287,247,273,275],
[303,274,286,0,281,278,275,270,272],
[310,264,274,270,0,296,287,285,279],
[284,266,264,273,255,0,247,279,269],
[310,285,304,276,264,304,0,294,292],
[277,244,278,281,266,272,257,0,246],
[304,259,276,279,272,282,259,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,295,285,255,263,293,268,270],
[285,0,279,268,258,260,272,260,243],
[256,272,0,250,273,268,256,257,254],
[266,283,301,0,276,266,285,276,267],
[296,293,278,275,0,289,292,282,285],
[288,291,283,285,262,0,298,264,267],
[258,279,295,266,259,253,0,260,261],
[283,291,294,275,269,287,291,0,269],
[281,308,297,284,266,284,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,267,284,290,265,258,271,286],
[260,0,271,276,279,270,264,253,297],
[284,280,0,272,293,267,280,286,304],
[267,275,279,0,293,272,270,263,278],
[261,272,258,258,0,248,258,259,266],
[286,281,284,279,303,0,251,263,300],
[293,287,271,281,293,300,0,265,302],
[280,298,265,288,292,288,286,0,285],
[265,254,247,273,285,251,249,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,268,249,244,283,266,277,254],
[305,0,280,264,296,297,277,282,257],
[283,271,0,277,276,302,273,284,272],
[302,287,274,0,285,299,293,297,280],
[307,255,275,266,0,312,272,296,256],
[268,254,249,252,239,0,255,253,229],
[285,274,278,258,279,296,0,288,267],
[274,269,267,254,255,298,263,0,258],
[297,294,279,271,295,322,284,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,272,289,288,282,269,267,281],
[270,0,280,288,286,283,272,276,274],
[279,271,0,281,289,279,289,275,264],
[262,263,270,0,270,256,252,251,278],
[263,265,262,281,0,253,262,262,270],
[269,268,272,295,298,0,290,259,281],
[282,279,262,299,289,261,0,270,277],
[284,275,276,300,289,292,281,0,282],
[270,277,287,273,281,270,274,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,241,264,260,282,264,280,271],
[284,0,278,265,278,305,278,288,291],
[310,273,0,271,277,289,280,303,286],
[287,286,280,0,282,283,273,296,290],
[291,273,274,269,0,300,285,304,289],
[269,246,262,268,251,0,258,284,266],
[287,273,271,278,266,293,0,281,270],
[271,263,248,255,247,267,270,0,269],
[280,260,265,261,262,285,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,256,256,275,260,254,279,255],
[273,0,252,258,258,236,266,264,248],
[295,299,0,269,297,263,280,300,281],
[295,293,282,0,288,276,292,294,273],
[276,293,254,263,0,265,283,262,261],
[291,315,288,275,286,0,298,286,279],
[297,285,271,259,268,253,0,267,263],
[272,287,251,257,289,265,284,0,251],
[296,303,270,278,290,272,288,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,296,308,289,277,298,268,283],
[272,0,311,286,296,273,297,278,273],
[255,240,0,268,273,240,280,244,270],
[243,265,283,0,281,262,283,259,291],
[262,255,278,270,0,243,279,277,275],
[274,278,311,289,308,0,300,273,299],
[253,254,271,268,272,251,0,259,271],
[283,273,307,292,274,278,292,0,285],
[268,278,281,260,276,252,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,264,261,293,269,280,271,282],
[250,0,246,255,280,256,259,270,252],
[287,305,0,285,290,288,274,281,283],
[290,296,266,0,284,259,263,268,258],
[258,271,261,267,0,260,273,275,278],
[282,295,263,292,291,0,267,275,267],
[271,292,277,288,278,284,0,281,283],
[280,281,270,283,276,276,270,0,271],
[269,299,268,293,273,284,268,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,255,247,267,270,255,256,273],
[294,0,275,274,280,290,282,264,295],
[296,276,0,265,278,280,279,261,284],
[304,277,286,0,292,293,269,286,319],
[284,271,273,259,0,277,261,263,291],
[281,261,271,258,274,0,263,267,290],
[296,269,272,282,290,288,0,275,298],
[295,287,290,265,288,284,276,0,294],
[278,256,267,232,260,261,253,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,249,276,307,260,359,167],
[273,0,221,284,313,310,272,339,283],
[274,330,0,289,217,319,354,319,284],
[302,267,262,0,286,352,306,369,181],
[275,238,334,265,0,322,284,335,260],
[244,241,232,199,229,0,244,337,167],
[291,279,197,245,267,307,0,351,218],
[192,212,232,182,216,214,200,0,191],
[384,268,267,370,291,384,333,360,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,295,321,293,275,296,308,302],
[265,0,270,285,284,280,285,291,288],
[256,281,0,311,299,260,296,287,315],
[230,266,240,0,267,261,258,272,279],
[258,267,252,284,0,282,261,301,289],
[276,271,291,290,269,0,269,276,277],
[255,266,255,293,290,282,0,281,282],
[243,260,264,279,250,275,270,0,282],
[249,263,236,272,262,274,269,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,272,288,292,282,300,319,302],
[280,0,290,291,287,275,334,316,316],
[279,261,0,314,280,283,314,296,322],
[263,260,237,0,277,274,287,278,291],
[259,264,271,274,0,276,295,271,298],
[269,276,268,277,275,0,315,295,305],
[251,217,237,264,256,236,0,273,278],
[232,235,255,273,280,256,278,0,278],
[249,235,229,260,253,246,273,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,310,306,295,287,270,300,258],
[251,0,285,282,286,270,294,291,292],
[241,266,0,286,284,279,264,283,245],
[245,269,265,0,280,237,269,274,250],
[256,265,267,271,0,256,258,275,262],
[264,281,272,314,295,0,289,291,282],
[281,257,287,282,293,262,0,306,272],
[251,260,268,277,276,260,245,0,268],
[293,259,306,301,289,269,279,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,269,287,276,310,299,270,258],
[279,0,279,282,307,285,284,262,308],
[282,272,0,278,312,289,293,266,276],
[264,269,273,0,293,291,287,278,289],
[275,244,239,258,0,272,268,260,266],
[241,266,262,260,279,0,281,263,276],
[252,267,258,264,283,270,0,275,293],
[281,289,285,273,291,288,276,0,292],
[293,243,275,262,285,275,258,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,272,260,287,275,267,261,251],
[265,0,265,268,276,272,295,277,286],
[279,286,0,268,279,287,273,280,297],
[291,283,283,0,249,302,287,285,286],
[264,275,272,302,0,301,293,291,294],
[276,279,264,249,250,0,293,284,299],
[284,256,278,264,258,258,0,285,263],
[290,274,271,266,260,267,266,0,253],
[300,265,254,265,257,252,288,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,263,265,283,265,283,262,263],
[265,0,288,289,291,279,302,276,263],
[288,263,0,290,271,288,278,256,262],
[286,262,261,0,263,240,261,255,271],
[268,260,280,288,0,271,293,249,294],
[286,272,263,311,280,0,295,263,267],
[268,249,273,290,258,256,0,254,257],
[289,275,295,296,302,288,297,0,262],
[288,288,289,280,257,284,294,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,295,308,330,242,265,288,275],
[281,0,273,283,322,277,264,307,263],
[256,278,0,312,296,277,265,304,252],
[243,268,239,0,287,262,269,302,258],
[221,229,255,264,0,241,223,243,277],
[309,274,274,289,310,0,277,292,249],
[286,287,286,282,328,274,0,299,252],
[263,244,247,249,308,259,252,0,237],
[276,288,299,293,274,302,299,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,284,275,279,285,273,278,289],
[285,0,276,273,274,280,266,280,264],
[267,275,0,261,264,285,258,280,281],
[276,278,290,0,289,263,283,275,279],
[272,277,287,262,0,283,276,278,281],
[266,271,266,288,268,0,272,260,276],
[278,285,293,268,275,279,0,275,268],
[273,271,271,276,273,291,276,0,275],
[262,287,270,272,270,275,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,320,307,280,313,310,278,290],
[283,0,284,299,262,306,321,280,276],
[231,267,0,277,237,275,287,271,277],
[244,252,274,0,256,287,275,290,254],
[271,289,314,295,0,271,327,293,287],
[238,245,276,264,280,0,269,242,268],
[241,230,264,276,224,282,0,273,248],
[273,271,280,261,258,309,278,0,258],
[261,275,274,297,264,283,303,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,284,300,270,299,272,297,283],
[262,0,267,274,272,276,286,254,296],
[267,284,0,300,280,279,301,316,246],
[251,277,251,0,266,267,250,243,259],
[281,279,271,285,0,281,293,282,269],
[252,275,272,284,270,0,272,272,244],
[279,265,250,301,258,279,0,270,266],
[254,297,235,308,269,279,281,0,264],
[268,255,305,292,282,307,285,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,272,280,276,282,287,263,303],
[278,0,267,275,265,266,294,271,287],
[279,284,0,260,276,270,281,275,281],
[271,276,291,0,272,288,312,270,288],
[275,286,275,279,0,268,290,276,278],
[269,285,281,263,283,0,294,274,283],
[264,257,270,239,261,257,0,265,259],
[288,280,276,281,275,277,286,0,298],
[248,264,270,263,273,268,292,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,258,290,286,276,273,281,276],
[292,0,281,287,273,273,288,293,280],
[293,270,0,287,274,277,277,297,286],
[261,264,264,0,279,258,273,268,279],
[265,278,277,272,0,269,273,284,295],
[275,278,274,293,282,0,280,306,291],
[278,263,274,278,278,271,0,287,283],
[270,258,254,283,267,245,264,0,258],
[275,271,265,272,256,260,268,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,258,289,260,271,262,267,269],
[244,0,254,275,256,250,256,264,258],
[293,297,0,290,287,271,278,285,262],
[262,276,261,0,264,264,240,270,247],
[291,295,264,287,0,268,268,290,259],
[280,301,280,287,283,0,278,293,273],
[289,295,273,311,283,273,0,304,280],
[284,287,266,281,261,258,247,0,248],
[282,293,289,304,292,278,271,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,278,274,282,278,273,288],
[276,0,275,264,275,262,284,287,268],
[274,276,0,259,281,269,294,283,289],
[273,287,292,0,268,289,287,298,286],
[277,276,270,283,0,266,281,285,270],
[269,289,282,262,285,0,283,281,288],
[273,267,257,264,270,268,0,278,283],
[278,264,268,253,266,270,273,0,274],
[263,283,262,265,281,263,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,246,271,266,285,244,236,336],
[224,0,307,239,225,226,205,226,263],
[305,244,0,311,225,272,258,257,270],
[280,312,240,0,270,287,303,288,303],
[285,326,326,281,0,250,278,258,253],
[266,325,279,264,301,0,285,268,286],
[307,346,293,248,273,266,0,252,277],
[315,325,294,263,293,283,299,0,336],
[215,288,281,248,298,265,274,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,267,257,233,247,252,237,296],
[318,0,277,322,273,277,290,319,304],
[284,274,0,281,286,285,282,278,294],
[294,229,270,0,272,242,251,266,271],
[318,278,265,279,0,264,293,275,307],
[304,274,266,309,287,0,293,306,318],
[299,261,269,300,258,258,0,277,277],
[314,232,273,285,276,245,274,0,314],
[255,247,257,280,244,233,274,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,261,286,256,236,275,248,257],
[245,0,277,347,281,291,279,276,301],
[290,274,0,299,267,302,296,249,303],
[265,204,252,0,244,266,232,280,228],
[295,270,284,307,0,278,293,240,243],
[315,260,249,285,273,0,290,288,298],
[276,272,255,319,258,261,0,233,258],
[303,275,302,271,311,263,318,0,293],
[294,250,248,323,308,253,293,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,284,287,280,298,282,287,274],
[251,0,275,284,265,281,270,270,261],
[267,276,0,284,277,283,259,282,282],
[264,267,267,0,273,276,266,268,253],
[271,286,274,278,0,292,280,266,280],
[253,270,268,275,259,0,275,258,256],
[269,281,292,285,271,276,0,265,276],
[264,281,269,283,285,293,286,0,275],
[277,290,269,298,271,295,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,217,251,270,323,229,289,304],
[264,0,253,227,275,292,242,234,297],
[334,298,0,292,301,362,237,315,361],
[300,324,259,0,279,339,252,269,320],
[281,276,250,272,0,297,205,265,282],
[228,259,189,212,254,0,206,254,249],
[322,309,314,299,346,345,0,272,340],
[262,317,236,282,286,297,279,0,327],
[247,254,190,231,269,302,211,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,232,286,296,226,282,337,258],
[235,0,234,304,270,296,316,317,259],
[319,317,0,319,317,276,334,326,264],
[265,247,232,0,259,246,272,300,238],
[255,281,234,292,0,258,276,290,260],
[325,255,275,305,293,0,318,325,293],
[269,235,217,279,275,233,0,299,260],
[214,234,225,251,261,226,252,0,196],
[293,292,287,313,291,258,291,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,257,272,288,291,274,291,271],
[270,0,268,266,275,260,269,270,269],
[294,283,0,263,303,293,284,301,289],
[279,285,288,0,305,269,288,282,274],
[263,276,248,246,0,249,262,267,260],
[260,291,258,282,302,0,283,297,262],
[277,282,267,263,289,268,0,278,280],
[260,281,250,269,284,254,273,0,264],
[280,282,262,277,291,289,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,319,334,273,318,294,298,279],
[254,0,265,304,255,271,269,266,230],
[232,286,0,309,258,270,281,248,265],
[217,247,242,0,262,291,272,274,265],
[278,296,293,289,0,325,282,260,304],
[233,280,281,260,226,0,287,233,246],
[257,282,270,279,269,264,0,273,240],
[253,285,303,277,291,318,278,0,262],
[272,321,286,286,247,305,311,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,273,276,270,258,269,257,264],
[274,0,268,285,257,244,266,279,254],
[278,283,0,262,251,274,278,287,269],
[275,266,289,0,273,274,274,284,265],
[281,294,300,278,0,264,280,278,267],
[293,307,277,277,287,0,271,282,279],
[282,285,273,277,271,280,0,294,279],
[294,272,264,267,273,269,257,0,283],
[287,297,282,286,284,272,272,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,296,268,289,286,280,301,290],
[263,0,270,253,256,256,267,283,256],
[255,281,0,249,254,268,267,287,271],
[283,298,302,0,290,281,294,273,290],
[262,295,297,261,0,282,279,285,273],
[265,295,283,270,269,0,284,301,287],
[271,284,284,257,272,267,0,292,279],
[250,268,264,278,266,250,259,0,279],
[261,295,280,261,278,264,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,298,290,280,279,266,278,291],
[250,0,269,264,264,260,270,260,251],
[253,282,0,278,264,265,259,271,250],
[261,287,273,0,278,261,263,277,274],
[271,287,287,273,0,286,281,275,282],
[272,291,286,290,265,0,280,293,270],
[285,281,292,288,270,271,0,279,285],
[273,291,280,274,276,258,272,0,263],
[260,300,301,277,269,281,266,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,275,270,261,276,271,280,279],
[293,0,284,264,283,261,269,284,278],
[276,267,0,267,271,271,279,277,273],
[281,287,284,0,284,266,276,287,282],
[290,268,280,267,0,264,274,278,283],
[275,290,280,285,287,0,280,289,289],
[280,282,272,275,277,271,0,277,254],
[271,267,274,264,273,262,274,0,276],
[272,273,278,269,268,262,297,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,274,422,312,340,298,266,281],
[309,0,346,319,346,364,269,274,195],
[277,205,0,325,318,269,285,338,162],
[129,232,226,0,250,271,140,256,227],
[239,205,233,301,0,346,293,279,204],
[211,187,282,280,205,0,224,175,159],
[253,282,266,411,258,327,0,281,238],
[285,277,213,295,272,376,270,0,205],
[270,356,389,324,347,392,313,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,259,303,247,300,280,289,301],
[275,0,287,311,285,306,291,299,285],
[292,264,0,289,252,271,300,301,288],
[248,240,262,0,250,290,296,273,263],
[304,266,299,301,0,292,288,292,289],
[251,245,280,261,259,0,277,277,276],
[271,260,251,255,263,274,0,285,297],
[262,252,250,278,259,274,266,0,276],
[250,266,263,288,262,275,254,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,249,222,245,280,279,260,268],
[271,0,269,255,252,286,291,280,281],
[302,282,0,272,291,301,307,290,286],
[329,296,279,0,254,324,309,280,303],
[306,299,260,297,0,314,293,283,287],
[271,265,250,227,237,0,255,258,271],
[272,260,244,242,258,296,0,279,314],
[291,271,261,271,268,293,272,0,295],
[283,270,265,248,264,280,237,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,299,273,287,311,279,297,284],
[286,0,301,256,263,302,271,309,276],
[252,250,0,247,256,273,265,259,251],
[278,295,304,0,272,299,292,294,262],
[264,288,295,279,0,282,297,304,284],
[240,249,278,252,269,0,285,269,256],
[272,280,286,259,254,266,0,277,254],
[254,242,292,257,247,282,274,0,255],
[267,275,300,289,267,295,297,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,267,259,273,254,267,262,279],
[254,0,277,272,268,246,280,261,262],
[284,274,0,264,274,272,271,289,286],
[292,279,287,0,280,254,283,284,270],
[278,283,277,271,0,268,262,279,276],
[297,305,279,297,283,0,309,275,297],
[284,271,280,268,289,242,0,256,281],
[289,290,262,267,272,276,295,0,285],
[272,289,265,281,275,254,270,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,263,251,266,220,278,249,208],
[301,0,218,263,255,210,278,233,245],
[288,333,0,305,313,306,323,285,252],
[300,288,246,0,250,260,261,286,273],
[285,296,238,301,0,257,276,273,255],
[331,341,245,291,294,0,270,301,295],
[273,273,228,290,275,281,0,263,242],
[302,318,266,265,278,250,288,0,252],
[343,306,299,278,296,256,309,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,259,263,250,295,265,253,257],
[267,0,260,251,246,298,258,277,240],
[292,291,0,271,266,295,262,266,287],
[288,300,280,0,235,269,272,278,268],
[301,305,285,316,0,312,284,293,245],
[256,253,256,282,239,0,255,247,212],
[286,293,289,279,267,296,0,289,285],
[298,274,285,273,258,304,262,0,263],
[294,311,264,283,306,339,266,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,273,270,263,269,271,282,281],
[293,0,285,278,269,261,269,293,283],
[278,266,0,264,262,288,284,295,283],
[281,273,287,0,279,280,289,299,288],
[288,282,289,272,0,282,267,296,280],
[282,290,263,271,269,0,263,292,270],
[280,282,267,262,284,288,0,296,278],
[269,258,256,252,255,259,255,0,274],
[270,268,268,263,271,281,273,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,295,276,276,274,283,244,306],
[270,0,281,265,270,258,242,230,287],
[256,270,0,264,255,258,250,232,279],
[275,286,287,0,245,271,231,247,276],
[275,281,296,306,0,273,262,287,302],
[277,293,293,280,278,0,267,271,295],
[268,309,301,320,289,284,0,282,312],
[307,321,319,304,264,280,269,0,307],
[245,264,272,275,249,256,239,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,264,284,288,283,282,274],
[275,0,294,287,296,294,277,273,312],
[285,257,0,280,286,262,279,285,274],
[287,264,271,0,280,287,264,309,290],
[267,255,265,271,0,246,275,266,268],
[263,257,289,264,305,0,278,301,282],
[268,274,272,287,276,273,0,281,281],
[269,278,266,242,285,250,270,0,279],
[277,239,277,261,283,269,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,318,272,266,328,373,247,272],
[227,0,244,289,267,261,281,285,214],
[233,307,0,239,327,334,303,255,252],
[279,262,312,0,340,343,287,252,320],
[285,284,224,211,0,219,279,212,204],
[223,290,217,208,332,0,303,249,251],
[178,270,248,264,272,248,0,250,220],
[304,266,296,299,339,302,301,0,292],
[279,337,299,231,347,300,331,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,250,281,276,276,268,256,276],
[277,0,273,276,268,288,281,289,301],
[301,278,0,283,263,278,277,272,292],
[270,275,268,0,279,267,281,276,296],
[275,283,288,272,0,282,272,301,298],
[275,263,273,284,269,0,266,275,272],
[283,270,274,270,279,285,0,292,302],
[295,262,279,275,250,276,259,0,277],
[275,250,259,255,253,279,249,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,258,192,301,177,214,318,327],
[317,0,266,290,319,302,266,302,318],
[293,285,0,255,300,231,249,354,321],
[359,261,296,0,312,303,295,343,315],
[250,232,251,239,0,273,202,300,291],
[374,249,320,248,278,0,284,327,341],
[337,285,302,256,349,267,0,383,315],
[233,249,197,208,251,224,168,0,252],
[224,233,230,236,260,210,236,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,307,290,297,286,280,283,265],
[260,0,280,265,264,277,285,266,246],
[244,271,0,281,271,263,258,275,247],
[261,286,270,0,252,259,274,269,231],
[254,287,280,299,0,256,282,261,279],
[265,274,288,292,295,0,252,248,241],
[271,266,293,277,269,299,0,275,285],
[268,285,276,282,290,303,276,0,278],
[286,305,304,320,272,310,266,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,283,272,295,269,290,268],
[272,0,243,276,266,308,253,259,267],
[274,308,0,284,269,295,282,295,283],
[268,275,267,0,274,279,265,258,281],
[279,285,282,277,0,294,257,293,295],
[256,243,256,272,257,0,252,281,268],
[282,298,269,286,294,299,0,322,268],
[261,292,256,293,258,270,229,0,289],
[283,284,268,270,256,283,283,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,245,283,236,216,219,214,251],
[335,0,293,309,279,289,296,287,253],
[306,258,0,257,299,256,293,243,243],
[268,242,294,0,287,196,238,274,294],
[315,272,252,264,0,257,240,291,226],
[335,262,295,355,294,0,268,279,287],
[332,255,258,313,311,283,0,324,262],
[337,264,308,277,260,272,227,0,330],
[300,298,308,257,325,264,289,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,254,297,295,281,279,281,271],
[264,0,261,267,264,289,260,252,252],
[297,290,0,297,280,283,284,276,272],
[254,284,254,0,274,282,272,272,279],
[256,287,271,277,0,262,262,259,275],
[270,262,268,269,289,0,267,264,266],
[272,291,267,279,289,284,0,274,282],
[270,299,275,279,292,287,277,0,268],
[280,299,279,272,276,285,269,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,225,267,220,266,207,269,231],
[296,0,266,254,231,266,233,307,290],
[326,285,0,257,268,290,213,300,233],
[284,297,294,0,296,314,249,312,262],
[331,320,283,255,0,317,248,306,252],
[285,285,261,237,234,0,235,310,260],
[344,318,338,302,303,316,0,328,268],
[282,244,251,239,245,241,223,0,235],
[320,261,318,289,299,291,283,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,305,288,274,292,294,306],
[274,0,272,285,280,258,273,284,285],
[259,279,0,292,289,283,277,271,295],
[246,266,259,0,281,286,274,288,287],
[263,271,262,270,0,259,274,270,275],
[277,293,268,265,292,0,262,301,307],
[259,278,274,277,277,289,0,277,290],
[257,267,280,263,281,250,274,0,290],
[245,266,256,264,276,244,261,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,290,287,288,267,304,271,279],
[279,0,305,288,298,277,306,262,285],
[261,246,0,257,256,259,265,263,260],
[264,263,294,0,281,253,289,268,270],
[263,253,295,270,0,250,272,261,260],
[284,274,292,298,301,0,291,282,292],
[247,245,286,262,279,260,0,257,253],
[280,289,288,283,290,269,294,0,282],
[272,266,291,281,291,259,298,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,284,293,275,285,289,324,301],
[267,0,284,286,284,275,286,313,292],
[267,267,0,267,268,267,265,323,270],
[258,265,284,0,280,281,268,304,292],
[276,267,283,271,0,279,281,319,300],
[266,276,284,270,272,0,258,314,294],
[262,265,286,283,270,293,0,305,303],
[227,238,228,247,232,237,246,0,266],
[250,259,281,259,251,257,248,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,268,275,282,282,283,260,279],
[268,0,305,276,288,279,272,283,298],
[283,246,0,286,258,244,270,240,285],
[276,275,265,0,280,254,251,251,274],
[269,263,293,271,0,285,296,245,296],
[269,272,307,297,266,0,281,254,287],
[268,279,281,300,255,270,0,243,301],
[291,268,311,300,306,297,308,0,280],
[272,253,266,277,255,264,250,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,255,221,258,286,206,310,281],
[328,0,277,312,246,292,214,241,345],
[296,274,0,273,231,225,355,200,286],
[330,239,278,0,222,259,376,283,304],
[293,305,320,329,0,381,305,242,357],
[265,259,326,292,170,0,279,315,337],
[345,337,196,175,246,272,0,266,337],
[241,310,351,268,309,236,285,0,281],
[270,206,265,247,194,214,214,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,260,301,274,289,272,254,254],
[276,0,288,270,288,314,285,271,280],
[291,263,0,269,268,297,282,263,258],
[250,281,282,0,241,293,287,249,259],
[277,263,283,310,0,318,297,277,265],
[262,237,254,258,233,0,247,252,258],
[279,266,269,264,254,304,0,238,261],
[297,280,288,302,274,299,313,0,293],
[297,271,293,292,286,293,290,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,269,267,278,253,279,274],
[274,0,266,258,270,283,259,280,271],
[271,285,0,266,270,273,248,274,274],
[282,293,285,0,278,275,280,282,277],
[284,281,281,273,0,272,271,266,272],
[273,268,278,276,279,0,284,284,262],
[298,292,303,271,280,267,0,277,281],
[272,271,277,269,285,267,274,0,267],
[277,280,277,274,279,289,270,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,276,258,263,278,271,274],
[280,0,272,285,271,282,281,273,269],
[274,279,0,285,274,263,265,269,268],
[275,266,266,0,272,269,274,256,272],
[293,280,277,279,0,268,303,299,282],
[288,269,288,282,283,0,283,273,285],
[273,270,286,277,248,268,0,269,265],
[280,278,282,295,252,278,282,0,282],
[277,282,283,279,269,266,286,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,314,292,257,301,305,300,317],
[253,0,257,283,277,282,254,296,267],
[237,294,0,277,270,298,248,296,302],
[259,268,274,0,268,274,273,314,295],
[294,274,281,283,0,290,287,341,304],
[250,269,253,277,261,0,280,273,291],
[246,297,303,278,264,271,0,314,308],
[251,255,255,237,210,278,237,0,249],
[234,284,249,256,247,260,243,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,312,282,273,262,284,284,286],
[305,0,334,295,266,291,293,302,288],
[239,217,0,277,239,254,246,263,232],
[269,256,274,0,276,300,275,284,282],
[278,285,312,275,0,317,263,276,273],
[289,260,297,251,234,0,260,257,269],
[267,258,305,276,288,291,0,273,257],
[267,249,288,267,275,294,278,0,294],
[265,263,319,269,278,282,294,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,280,297,250,287,221,258,292],
[264,0,283,296,214,295,250,206,259],
[271,268,0,252,223,261,251,256,263],
[254,255,299,0,226,244,298,248,265],
[301,337,328,325,0,307,281,281,275],
[264,256,290,307,244,0,273,236,287],
[330,301,300,253,270,278,0,305,297],
[293,345,295,303,270,315,246,0,269],
[259,292,288,286,276,264,254,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,261,251,249,237,258,273,255],
[295,0,284,266,267,260,267,273,257],
[290,267,0,241,258,250,259,272,263],
[300,285,310,0,280,260,288,294,281],
[302,284,293,271,0,278,265,293,265],
[314,291,301,291,273,0,295,304,290],
[293,284,292,263,286,256,0,273,283],
[278,278,279,257,258,247,278,0,271],
[296,294,288,270,286,261,268,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,254,277,267,268,300,267,271],
[265,0,276,262,265,229,295,248,263],
[297,275,0,262,289,234,299,259,273],
[274,289,289,0,282,285,281,263,267],
[284,286,262,269,0,255,291,262,267],
[283,322,317,266,296,0,286,289,295],
[251,256,252,270,260,265,0,251,244],
[284,303,292,288,289,262,300,0,269],
[280,288,278,284,284,256,307,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,228,281,270,280,300,262,290],
[264,0,229,262,277,244,271,268,255],
[323,322,0,279,313,297,321,252,298],
[270,289,272,0,266,271,255,291,268],
[281,274,238,285,0,261,261,255,263],
[271,307,254,280,290,0,293,275,267],
[251,280,230,296,290,258,0,240,264],
[289,283,299,260,296,276,311,0,289],
[261,296,253,283,288,284,287,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,273,311,308,293,314,317,301],
[263,0,260,345,267,244,267,282,268],
[278,291,0,305,253,292,306,274,282],
[240,206,246,0,238,240,254,277,232],
[243,284,298,313,0,281,278,284,277],
[258,307,259,311,270,0,313,307,273],
[237,284,245,297,273,238,0,277,292],
[234,269,277,274,267,244,274,0,257],
[250,283,269,319,274,278,259,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,241,239,298,236,263,276,269],
[289,0,263,258,269,266,308,269,237],
[310,288,0,274,303,282,314,285,246],
[312,293,277,0,291,266,308,310,274],
[253,282,248,260,0,244,272,261,244],
[315,285,269,285,307,0,318,310,290],
[288,243,237,243,279,233,0,272,259],
[275,282,266,241,290,241,279,0,293],
[282,314,305,277,307,261,292,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,257,270,272,264,252,257,253],
[301,0,275,282,300,280,261,285,281],
[294,276,0,287,285,279,270,296,296],
[281,269,264,0,278,276,269,289,280],
[279,251,266,273,0,257,266,266,274],
[287,271,272,275,294,0,296,303,282],
[299,290,281,282,285,255,0,274,270],
[294,266,255,262,285,248,277,0,268],
[298,270,255,271,277,269,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,329,304,269,294,314,265,291],
[258,0,287,280,284,273,267,260,266],
[222,264,0,229,245,264,263,245,243],
[247,271,322,0,260,273,289,252,257],
[282,267,306,291,0,269,301,271,273],
[257,278,287,278,282,0,280,257,248],
[237,284,288,262,250,271,0,256,244],
[286,291,306,299,280,294,295,0,273],
[260,285,308,294,278,303,307,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,214,293,310,268,226,308,213],
[273,0,218,273,294,318,264,323,236],
[337,333,0,317,311,305,266,306,290],
[258,278,234,0,255,236,210,280,228],
[241,257,240,296,0,263,236,243,225],
[283,233,246,315,288,0,219,291,270],
[325,287,285,341,315,332,0,319,257],
[243,228,245,271,308,260,232,0,241],
[338,315,261,323,326,281,294,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,267,278,261,247,293,269,285],
[266,0,281,252,258,231,285,253,257],
[284,270,0,285,275,231,274,252,279],
[273,299,266,0,274,278,310,280,268],
[290,293,276,277,0,253,301,266,264],
[304,320,320,273,298,0,322,279,297],
[258,266,277,241,250,229,0,243,249],
[282,298,299,271,285,272,308,0,267],
[266,294,272,283,287,254,302,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,281,286,278,263,306,278,267],
[281,0,301,278,299,288,298,288,266],
[270,250,0,239,262,253,295,265,267],
[265,273,312,0,284,280,315,270,271],
[273,252,289,267,0,273,294,282,268],
[288,263,298,271,278,0,306,276,265],
[245,253,256,236,257,245,0,258,239],
[273,263,286,281,269,275,293,0,282],
[284,285,284,280,283,286,312,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,348,236,456,353,329,244,270,453],
[203,0,232,367,328,206,278,225,354],
[315,319,0,368,360,319,274,331,360],
[95,184,183,0,118,136,217,326,155],
[198,223,191,433,0,137,275,300,273],
[222,345,232,415,414,0,260,346,470],
[307,273,277,334,276,291,0,288,325],
[281,326,220,225,251,205,263,0,293],
[98,197,191,396,278,81,226,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,268,278,283,277,268,298,265],
[266,0,252,277,277,272,256,274,247],
[283,299,0,283,269,277,279,288,274],
[273,274,268,0,268,284,262,289,269],
[268,274,282,283,0,270,269,298,267],
[274,279,274,267,281,0,257,280,247],
[283,295,272,289,282,294,0,288,286],
[253,277,263,262,253,271,263,0,254],
[286,304,277,282,284,304,265,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,283,277,261,273,284,260,254],
[287,0,268,252,273,266,277,277,250],
[268,283,0,259,277,285,287,293,278],
[274,299,292,0,279,248,274,298,272],
[290,278,274,272,0,272,284,286,256],
[278,285,266,303,279,0,287,287,265],
[267,274,264,277,267,264,0,274,239],
[291,274,258,253,265,264,277,0,272],
[297,301,273,279,295,286,312,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,301,286,282,287,291,279,275],
[256,0,277,273,261,258,262,258,262],
[250,274,0,261,275,261,262,270,254],
[265,278,290,0,283,265,263,268,272],
[269,290,276,268,0,262,272,264,269],
[264,293,290,286,289,0,281,273,272],
[260,289,289,288,279,270,0,276,263],
[272,293,281,283,287,278,275,0,278],
[276,289,297,279,282,279,288,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,267,274,253,279,260,264,278],
[271,0,269,257,279,280,256,279,252],
[284,282,0,281,236,284,284,266,276],
[277,294,270,0,265,282,292,317,270],
[298,272,315,286,0,289,286,289,267],
[272,271,267,269,262,0,270,273,250],
[291,295,267,259,265,281,0,286,254],
[287,272,285,234,262,278,265,0,246],
[273,299,275,281,284,301,297,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,275,284,286,263,298,292,275],
[262,0,265,277,261,258,279,273,264],
[276,286,0,290,267,264,295,279,279],
[267,274,261,0,269,265,290,283,266],
[265,290,284,282,0,276,308,301,272],
[288,293,287,286,275,0,292,290,290],
[253,272,256,261,243,259,0,280,258],
[259,278,272,268,250,261,271,0,258],
[276,287,272,285,279,261,293,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,284,284,278,290,278,263,314],
[254,0,283,252,267,288,267,261,272],
[267,268,0,271,266,278,256,263,261],
[267,299,280,0,265,281,282,289,290],
[273,284,285,286,0,312,281,272,295],
[261,263,273,270,239,0,243,250,276],
[273,284,295,269,270,308,0,267,287],
[288,290,288,262,279,301,284,0,291],
[237,279,290,261,256,275,264,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,287,274,285,271,283,274],
[266,0,267,262,274,287,270,279,275],
[269,284,0,294,285,286,269,282,268],
[264,289,257,0,276,282,263,292,273],
[277,277,266,275,0,296,280,276,274],
[266,264,265,269,255,0,251,285,256],
[280,281,282,288,271,300,0,303,278],
[268,272,269,259,275,266,248,0,256],
[277,276,283,278,277,295,273,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,288,270,297,275,284,273,279],
[283,0,275,280,288,268,280,279,282],
[263,276,0,281,284,287,279,267,276],
[281,271,270,0,285,277,279,264,264],
[254,263,267,266,0,262,267,268,254],
[276,283,264,274,289,0,281,273,265],
[267,271,272,272,284,270,0,280,268],
[278,272,284,287,283,278,271,0,278],
[272,269,275,287,297,286,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,284,276,282,270,287,284,269],
[273,0,273,282,290,274,285,281,276],
[267,278,0,263,257,255,272,282,257],
[275,269,288,0,276,272,269,262,252],
[269,261,294,275,0,274,265,261,267],
[281,277,296,279,277,0,284,268,294],
[264,266,279,282,286,267,0,272,281],
[267,270,269,289,290,283,279,0,273],
[282,275,294,299,284,257,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,284,298,271,300,290,290,300],
[263,0,263,282,270,298,283,278,286],
[267,288,0,295,280,310,285,266,281],
[253,269,256,0,254,268,263,258,267],
[280,281,271,297,0,307,276,270,287],
[251,253,241,283,244,0,263,258,271],
[261,268,266,288,275,288,0,273,278],
[261,273,285,293,281,293,278,0,276],
[251,265,270,284,264,280,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,278,153,225,253,194,217,260],
[335,0,290,262,287,334,201,232,259],
[273,261,0,206,230,256,189,133,302],
[398,289,345,0,281,273,210,233,292],
[326,264,321,270,0,315,321,282,332],
[298,217,295,278,236,0,191,181,302],
[357,350,362,341,230,360,0,255,343],
[334,319,418,318,269,370,296,0,302],
[291,292,249,259,219,249,208,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,318,303,271,315,313,315,282],
[242,0,283,268,246,284,273,272,250],
[233,268,0,249,219,246,240,253,249],
[248,283,302,0,253,285,265,281,273],
[280,305,332,298,0,303,269,256,317],
[236,267,305,266,248,0,250,260,274],
[238,278,311,286,282,301,0,273,280],
[236,279,298,270,295,291,278,0,268],
[269,301,302,278,234,277,271,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,289,265,273,285,282,284,283],
[281,0,281,269,252,273,266,273,280],
[262,270,0,268,255,281,260,292,270],
[286,282,283,0,279,277,275,294,299],
[278,299,296,272,0,286,271,286,284],
[266,278,270,274,265,0,269,276,266],
[269,285,291,276,280,282,0,292,279],
[267,278,259,257,265,275,259,0,256],
[268,271,281,252,267,285,272,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,300,275,290,278,260,278],
[275,0,269,265,286,265,273,275,280],
[278,282,0,273,267,278,266,271,273],
[251,286,278,0,269,272,273,269,287],
[276,265,284,282,0,270,283,280,298],
[261,286,273,279,281,0,271,253,287],
[273,278,285,278,268,280,0,287,268],
[291,276,280,282,271,298,264,0,291],
[273,271,278,264,253,264,283,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,311,278,258,263,302,298,287],
[286,0,297,279,252,259,287,297,305],
[240,254,0,259,237,233,286,252,253],
[273,272,292,0,228,265,285,279,274],
[293,299,314,323,0,250,331,283,323],
[288,292,318,286,301,0,309,272,326],
[249,264,265,266,220,242,0,256,266],
[253,254,299,272,268,279,295,0,268],
[264,246,298,277,228,225,285,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,264,304,290,275,286,299,264],
[287,0,261,309,255,293,274,278,255],
[287,290,0,305,272,309,277,277,289],
[247,242,246,0,250,257,263,277,249],
[261,296,279,301,0,264,287,306,280],
[276,258,242,294,287,0,266,271,269],
[265,277,274,288,264,285,0,288,310],
[252,273,274,274,245,280,263,0,277],
[287,296,262,302,271,282,241,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,278,264,274,288,290,277,267],
[253,0,262,269,271,274,271,271,269],
[273,289,0,286,279,278,279,258,267],
[287,282,265,0,283,285,281,283,255],
[277,280,272,268,0,274,276,255,262],
[263,277,273,266,277,0,278,269,278],
[261,280,272,270,275,273,0,272,238],
[274,280,293,268,296,282,279,0,290],
[284,282,284,296,289,273,313,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,234,310,281,288,254,259,282],
[300,0,296,332,287,335,301,295,273],
[317,255,0,295,250,276,249,279,264],
[241,219,256,0,265,250,263,232,280],
[270,264,301,286,0,292,257,272,275],
[263,216,275,301,259,0,287,270,272],
[297,250,302,288,294,264,0,267,256],
[292,256,272,319,279,281,284,0,275],
[269,278,287,271,276,279,295,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,270,268,272,244,261,281,265],
[288,0,285,310,282,287,270,279,272],
[281,266,0,274,283,278,267,270,267],
[283,241,277,0,284,282,259,292,256],
[279,269,268,267,0,261,250,280,266],
[307,264,273,269,290,0,264,278,280],
[290,281,284,292,301,287,0,295,272],
[270,272,281,259,271,273,256,0,240],
[286,279,284,295,285,271,279,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,273,272,279,290,277,291,287],
[284,0,279,294,276,266,285,295,285],
[278,272,0,271,264,283,261,292,279],
[279,257,280,0,262,263,277,287,288],
[272,275,287,289,0,281,271,306,296],
[261,285,268,288,270,0,269,286,288],
[274,266,290,274,280,282,0,302,297],
[260,256,259,264,245,265,249,0,274],
[264,266,272,263,255,263,254,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,297,262,300,304,293,279,298],
[263,0,274,273,283,293,286,302,281],
[254,277,0,264,273,279,273,255,266],
[289,278,287,0,300,281,265,287,298],
[251,268,278,251,0,274,272,277,308],
[247,258,272,270,277,0,283,255,284],
[258,265,278,286,279,268,0,250,279],
[272,249,296,264,274,296,301,0,272],
[253,270,285,253,243,267,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,291,284,278,307,260,264,278],
[289,0,286,287,291,297,247,284,294],
[260,265,0,266,277,292,259,282,265],
[267,264,285,0,276,308,267,270,251],
[273,260,274,275,0,306,261,280,277],
[244,254,259,243,245,0,240,250,255],
[291,304,292,284,290,311,0,287,272],
[287,267,269,281,271,301,264,0,285],
[273,257,286,300,274,296,279,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,320,285,254,325,340,291,317],
[252,0,289,304,252,281,319,242,217],
[231,262,0,248,248,254,267,244,252],
[266,247,303,0,198,305,294,224,251],
[297,299,303,353,0,308,298,275,271],
[226,270,297,246,243,0,283,213,270],
[211,232,284,257,253,268,0,247,226],
[260,309,307,327,276,338,304,0,274],
[234,334,299,300,280,281,325,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,280,299,289,295,277,297,290],
[280,0,272,282,290,296,278,283,280],
[271,279,0,277,268,290,273,291,266],
[252,269,274,0,280,272,272,271,282],
[262,261,283,271,0,269,263,265,253],
[256,255,261,279,282,0,266,283,270],
[274,273,278,279,288,285,0,280,270],
[254,268,260,280,286,268,271,0,271],
[261,271,285,269,298,281,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,301,300,273,303,304,296,280],
[225,0,265,248,282,272,304,275,252],
[250,286,0,272,260,279,284,269,240],
[251,303,279,0,295,284,269,277,273],
[278,269,291,256,0,306,299,288,243],
[248,279,272,267,245,0,269,279,248],
[247,247,267,282,252,282,0,274,238],
[255,276,282,274,263,272,277,0,268],
[271,299,311,278,308,303,313,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,253,187,322,220,230,378,223],
[295,0,233,237,289,215,273,299,237],
[298,318,0,266,314,244,212,333,266],
[364,314,285,0,314,269,335,312,318],
[229,262,237,237,0,218,277,258,203],
[331,336,307,282,333,0,277,311,255],
[321,278,339,216,274,274,0,312,225],
[173,252,218,239,293,240,239,0,222],
[328,314,285,233,348,296,326,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,258,264,261,271,255,261,274],
[301,0,292,280,274,296,281,292,300],
[293,259,0,269,266,283,264,283,282],
[287,271,282,0,276,288,275,282,293],
[290,277,285,275,0,294,295,268,287],
[280,255,268,263,257,0,263,279,269],
[296,270,287,276,256,288,0,273,283],
[290,259,268,269,283,272,278,0,271],
[277,251,269,258,264,282,268,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,267,273,252,245,233,253,276],
[308,0,287,306,283,268,310,277,297],
[284,264,0,278,262,260,294,273,260],
[278,245,273,0,264,274,249,244,235],
[299,268,289,287,0,275,283,254,259],
[306,283,291,277,276,0,304,264,292],
[318,241,257,302,268,247,0,256,262],
[298,274,278,307,297,287,295,0,277],
[275,254,291,316,292,259,289,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,273,287,275,277,259,262],
[279,0,295,270,282,273,267,256,264],
[279,256,0,245,268,261,270,266,251],
[278,281,306,0,300,286,274,282,280],
[264,269,283,251,0,251,273,259,264],
[276,278,290,265,300,0,295,288,285],
[274,284,281,277,278,256,0,250,274],
[292,295,285,269,292,263,301,0,257],
[289,287,300,271,287,266,277,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,278,266,298,290,282,277,274],
[263,0,291,276,286,279,298,286,274],
[273,260,0,268,285,280,299,291,274],
[285,275,283,0,279,268,294,281,276],
[253,265,266,272,0,258,279,265,254],
[261,272,271,283,293,0,301,272,259],
[269,253,252,257,272,250,0,256,255],
[274,265,260,270,286,279,295,0,263],
[277,277,277,275,297,292,296,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,275,237,252,231,221,235,261],
[289,0,265,254,277,250,239,266,297],
[276,286,0,268,286,252,266,287,284],
[314,297,283,0,287,260,266,282,302],
[299,274,265,264,0,268,266,271,287],
[320,301,299,291,283,0,294,269,312],
[330,312,285,285,285,257,0,308,308],
[316,285,264,269,280,282,243,0,305],
[290,254,267,249,264,239,243,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,287,279,258,281,250,302,279],
[280,0,289,278,283,281,262,281,298],
[264,262,0,268,240,257,255,306,270],
[272,273,283,0,274,285,241,289,280],
[293,268,311,277,0,273,258,307,274],
[270,270,294,266,278,0,290,307,275],
[301,289,296,310,293,261,0,331,323],
[249,270,245,262,244,244,220,0,220],
[272,253,281,271,277,276,228,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,289,268,265,271,270,259,273],
[286,0,288,279,256,272,267,262,268],
[262,263,0,263,256,262,276,267,264],
[283,272,288,0,267,268,253,279,250],
[286,295,295,284,0,278,271,276,271],
[280,279,289,283,273,0,246,265,249],
[281,284,275,298,280,305,0,286,277],
[292,289,284,272,275,286,265,0,297],
[278,283,287,301,280,302,274,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,345,196,305,230,293,218,361],
[226,0,276,208,220,252,306,190,369],
[206,275,0,294,186,188,344,204,350],
[355,343,257,0,304,384,299,316,332],
[246,331,365,247,0,380,396,230,293],
[321,299,363,167,171,0,241,149,328],
[258,245,207,252,155,310,0,139,279],
[333,361,347,235,321,402,412,0,350],
[190,182,201,219,258,223,272,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,267,283,278,270,264,257,266],
[278,0,274,257,286,263,278,252,257],
[284,277,0,262,283,286,286,290,273],
[268,294,289,0,301,281,286,283,273],
[273,265,268,250,0,252,273,269,260],
[281,288,265,270,299,0,281,286,277],
[287,273,265,265,278,270,0,270,271],
[294,299,261,268,282,265,281,0,280],
[285,294,278,278,291,274,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,303,291,274,309,289,277,297],
[249,0,257,252,270,290,269,246,301],
[248,294,0,260,265,295,285,258,286],
[260,299,291,0,265,294,282,266,293],
[277,281,286,286,0,305,282,270,305],
[242,261,256,257,246,0,263,250,266],
[262,282,266,269,269,288,0,239,288],
[274,305,293,285,281,301,312,0,288],
[254,250,265,258,246,285,263,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,249,233,296,273,278,269,271],
[271,0,242,247,284,284,233,268,263],
[302,309,0,249,290,267,261,271,276],
[318,304,302,0,287,285,254,307,320],
[255,267,261,264,0,257,244,278,257],
[278,267,284,266,294,0,274,273,306],
[273,318,290,297,307,277,0,275,296],
[282,283,280,244,273,278,276,0,256],
[280,288,275,231,294,245,255,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,322,298,283,220,256,202,293],
[280,0,283,303,309,290,264,231,271],
[229,268,0,287,281,248,249,224,276],
[253,248,264,0,272,236,254,235,285],
[268,242,270,279,0,229,249,230,255],
[331,261,303,315,322,0,286,275,312],
[295,287,302,297,302,265,0,291,324],
[349,320,327,316,321,276,260,0,283],
[258,280,275,266,296,239,227,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,255,214,211,290,249,251,250],
[293,0,293,259,285,299,287,281,293],
[296,258,0,242,259,289,256,262,272],
[337,292,309,0,276,293,295,273,277],
[340,266,292,275,0,325,307,283,270],
[261,252,262,258,226,0,281,285,238],
[302,264,295,256,244,270,0,269,257],
[300,270,289,278,268,266,282,0,259],
[301,258,279,274,281,313,294,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,266,253,280,285,274,251,278],
[273,0,264,263,283,277,290,286,281],
[285,287,0,260,290,275,269,269,283],
[298,288,291,0,291,289,279,275,275],
[271,268,261,260,0,291,269,268,286],
[266,274,276,262,260,0,262,258,273],
[277,261,282,272,282,289,0,258,282],
[300,265,282,276,283,293,293,0,286],
[273,270,268,276,265,278,269,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,286,281,266,278,278,286,257],
[294,0,288,279,302,285,296,288,263],
[265,263,0,270,278,264,259,283,239],
[270,272,281,0,302,279,275,281,280],
[285,249,273,249,0,290,267,267,258],
[273,266,287,272,261,0,289,263,259],
[273,255,292,276,284,262,0,284,271],
[265,263,268,270,284,288,267,0,247],
[294,288,312,271,293,292,280,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,301,252,265,308,282,306,330],
[273,0,259,287,309,327,331,292,316],
[250,292,0,267,326,289,294,296,342],
[299,264,284,0,266,293,293,256,295],
[286,242,225,285,0,305,327,303,296],
[243,224,262,258,246,0,238,244,236],
[269,220,257,258,224,313,0,252,288],
[245,259,255,295,248,307,299,0,286],
[221,235,209,256,255,315,263,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,249,229,257,252,268,223,286],
[276,0,238,217,235,232,251,247,244],
[302,313,0,288,314,307,284,269,316],
[322,334,263,0,315,286,327,271,314],
[294,316,237,236,0,239,294,263,266],
[299,319,244,265,312,0,297,281,283],
[283,300,267,224,257,254,0,281,289],
[328,304,282,280,288,270,270,0,297],
[265,307,235,237,285,268,262,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,288,293,256,274,304,297],
[266,0,280,265,277,270,255,275,300],
[274,271,0,274,275,271,268,273,289],
[263,286,277,0,300,290,267,306,288],
[258,274,276,251,0,250,257,290,287],
[295,281,280,261,301,0,281,305,274],
[277,296,283,284,294,270,0,288,280],
[247,276,278,245,261,246,263,0,251],
[254,251,262,263,264,277,271,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,262,288,238,277,252,249,276],
[304,0,296,291,284,313,280,268,287],
[289,255,0,293,271,294,256,270,280],
[263,260,258,0,236,261,250,246,271],
[313,267,280,315,0,299,264,257,287],
[274,238,257,290,252,0,246,266,263],
[299,271,295,301,287,305,0,302,314],
[302,283,281,305,294,285,249,0,307],
[275,264,271,280,264,288,237,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,278,278,285,273,272,267],
[263,0,286,287,268,275,291,273,280],
[271,265,0,282,261,295,287,275,265],
[273,264,269,0,259,262,261,248,259],
[273,283,290,292,0,281,299,279,282],
[266,276,256,289,270,0,281,262,271],
[278,260,264,290,252,270,0,248,259],
[279,278,276,303,272,289,303,0,280],
[284,271,286,292,269,280,292,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,282,280,275,278,265,275],
[276,0,270,292,289,283,276,283,287],
[277,281,0,281,264,290,271,285,275],
[269,259,270,0,269,274,276,272,273],
[271,262,287,282,0,283,267,275,266],
[276,268,261,277,268,0,270,280,259],
[273,275,280,275,284,281,0,291,273],
[286,268,266,279,276,271,260,0,279],
[276,264,276,278,285,292,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,240,246,270,242,244,275,262],
[293,0,287,271,279,260,280,271,283],
[311,264,0,281,280,291,293,295,294],
[305,280,270,0,264,269,282,279,280],
[281,272,271,287,0,276,263,271,286],
[309,291,260,282,275,0,265,277,290],
[307,271,258,269,288,286,0,276,286],
[276,280,256,272,280,274,275,0,294],
[289,268,257,271,265,261,265,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,276,299,288,293,269,315,273],
[264,0,319,298,289,311,273,313,280],
[275,232,0,270,273,310,278,264,279],
[252,253,281,0,263,224,245,260,220],
[263,262,278,288,0,278,268,244,280],
[258,240,241,327,273,0,263,286,286],
[282,278,273,306,283,288,0,292,307],
[236,238,287,291,307,265,259,0,277],
[278,271,272,331,271,265,244,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,289,267,271,277,263,284,281],
[272,0,270,279,283,262,266,288,284],
[262,281,0,276,275,285,275,292,270],
[284,272,275,0,265,287,288,293,266],
[280,268,276,286,0,273,283,285,274],
[274,289,266,264,278,0,269,263,255],
[288,285,276,263,268,282,0,278,268],
[267,263,259,258,266,288,273,0,258],
[270,267,281,285,277,296,283,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,318,255,282,290,271,273,283],
[264,0,282,245,283,257,268,258,292],
[233,269,0,245,277,237,262,272,236],
[296,306,306,0,287,241,285,252,280],
[269,268,274,264,0,233,277,274,273],
[261,294,314,310,318,0,300,264,281],
[280,283,289,266,274,251,0,261,245],
[278,293,279,299,277,287,290,0,265],
[268,259,315,271,278,270,306,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,296,287,294,292,272,276,277],
[269,0,283,284,286,292,288,270,266],
[255,268,0,273,262,256,253,252,257],
[264,267,278,0,276,286,264,261,268],
[257,265,289,275,0,279,252,256,285],
[259,259,295,265,272,0,271,274,264],
[279,263,298,287,299,280,0,272,281],
[275,281,299,290,295,277,279,0,292],
[274,285,294,283,266,287,270,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,244,271,280,293,289,297,292],
[253,0,243,247,272,236,245,244,260],
[307,308,0,313,278,293,274,270,302],
[280,304,238,0,297,306,264,223,322],
[271,279,273,254,0,232,246,235,237],
[258,315,258,245,319,0,263,237,272],
[262,306,277,287,305,288,0,248,319],
[254,307,281,328,316,314,303,0,330],
[259,291,249,229,314,279,232,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,302,299,256,283,321,258,326],
[232,0,298,204,264,275,273,261,295],
[249,253,0,238,260,306,284,262,235],
[252,347,313,0,328,287,262,275,316],
[295,287,291,223,0,293,248,245,276],
[268,276,245,264,258,0,270,227,321],
[230,278,267,289,303,281,0,276,311],
[293,290,289,276,306,324,275,0,309],
[225,256,316,235,275,230,240,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,281,263,273,286,293,268,268],
[301,0,287,281,280,295,286,277,272],
[270,264,0,267,263,279,283,273,276],
[288,270,284,0,259,292,306,276,275],
[278,271,288,292,0,300,296,280,279],
[265,256,272,259,251,0,268,256,272],
[258,265,268,245,255,283,0,252,263],
[283,274,278,275,271,295,299,0,283],
[283,279,275,276,272,279,288,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,265,264,264,316,234,240,287],
[271,0,235,222,271,280,272,236,267],
[286,316,0,241,252,265,255,274,270],
[287,329,310,0,285,343,303,267,317],
[287,280,299,266,0,308,275,288,313],
[235,271,286,208,243,0,240,245,270],
[317,279,296,248,276,311,0,273,282],
[311,315,277,284,263,306,278,0,294],
[264,284,281,234,238,281,269,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,239,189,294,282,228,317,319],
[282,0,259,251,313,290,269,340,332],
[312,292,0,314,308,280,209,326,326],
[362,300,237,0,284,308,277,361,374],
[257,238,243,267,0,307,277,269,308],
[269,261,271,243,244,0,191,354,326],
[323,282,342,274,274,360,0,398,344],
[234,211,225,190,282,197,153,0,310],
[232,219,225,177,243,225,207,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,248,278,272,264,264,252,255],
[308,0,255,291,260,277,281,274,275],
[303,296,0,296,283,274,304,275,261],
[273,260,255,0,275,279,285,263,265],
[279,291,268,276,0,279,269,270,278],
[287,274,277,272,272,0,280,257,257],
[287,270,247,266,282,271,0,250,266],
[299,277,276,288,281,294,301,0,275],
[296,276,290,286,273,294,285,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,271,278,274,254,276,281,279],
[290,0,295,299,287,278,284,278,266],
[280,256,0,288,278,269,258,279,271],
[273,252,263,0,258,259,250,257,255],
[277,264,273,293,0,275,253,280,269],
[297,273,282,292,276,0,278,283,277],
[275,267,293,301,298,273,0,267,281],
[270,273,272,294,271,268,284,0,276],
[272,285,280,296,282,274,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,275,281,282,291,299,289,274],
[265,0,272,275,282,285,294,279,274],
[276,279,0,246,263,278,293,262,247],
[270,276,305,0,290,280,306,265,276],
[269,269,288,261,0,290,299,274,253],
[260,266,273,271,261,0,277,250,261],
[252,257,258,245,252,274,0,248,237],
[262,272,289,286,277,301,303,0,278],
[277,277,304,275,298,290,314,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,271,277,278,300,280,271,261],
[230,0,252,290,279,292,216,211,256],
[280,299,0,297,321,286,286,247,262],
[274,261,254,0,286,264,284,230,241],
[273,272,230,265,0,258,249,234,236],
[251,259,265,287,293,0,245,266,254],
[271,335,265,267,302,306,0,281,265],
[280,340,304,321,317,285,270,0,279],
[290,295,289,310,315,297,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,273,302,323,288,288,314,264],
[253,0,272,294,295,268,261,290,255],
[278,279,0,299,289,262,286,309,268],
[249,257,252,0,298,252,263,279,266],
[228,256,262,253,0,245,236,277,247],
[263,283,289,299,306,0,283,300,283],
[263,290,265,288,315,268,0,293,272],
[237,261,242,272,274,251,258,0,258],
[287,296,283,285,304,268,279,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,282,263,242,269,255,251],
[281,0,267,264,289,271,285,287,274],
[285,284,0,293,284,295,265,273,288],
[269,287,258,0,253,255,269,254,265],
[288,262,267,298,0,285,274,290,280],
[309,280,256,296,266,0,276,273,278],
[282,266,286,282,277,275,0,268,274],
[296,264,278,297,261,278,283,0,295],
[300,277,263,286,271,273,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,290,277,257,246,250,258,275],
[278,0,298,296,276,283,279,271,291],
[261,253,0,266,248,246,249,272,269],
[274,255,285,0,251,251,258,253,284],
[294,275,303,300,0,266,278,287,290],
[305,268,305,300,285,0,280,285,310],
[301,272,302,293,273,271,0,273,290],
[293,280,279,298,264,266,278,0,283],
[276,260,282,267,261,241,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,269,253,255,248,267,266,288],
[268,0,281,267,269,244,259,262,262],
[282,270,0,270,286,260,292,264,299],
[298,284,281,0,292,257,279,292,287],
[296,282,265,259,0,254,265,279,285],
[303,307,291,294,297,0,275,289,308],
[284,292,259,272,286,276,0,292,310],
[285,289,287,259,272,262,259,0,278],
[263,289,252,264,266,243,241,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,271,270,287,284,270,262,273],
[266,0,251,272,246,260,294,282,253],
[280,300,0,279,268,272,257,261,260],
[281,279,272,0,285,272,298,271,258],
[264,305,283,266,0,261,284,286,266],
[267,291,279,279,290,0,287,280,270],
[281,257,294,253,267,264,0,261,257],
[289,269,290,280,265,271,290,0,277],
[278,298,291,293,285,281,294,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,293,289,282,282,259,282,260],
[284,0,292,288,293,266,287,288,276],
[258,259,0,290,283,286,292,286,263],
[262,263,261,0,268,277,268,291,259],
[269,258,268,283,0,263,275,286,261],
[269,285,265,274,288,0,277,278,254],
[292,264,259,283,276,274,0,278,271],
[269,263,265,260,265,273,273,0,267],
[291,275,288,292,290,297,280,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,266,281,305,284,298,283,306],
[260,0,266,261,304,259,287,284,265],
[285,285,0,285,309,272,287,281,289],
[270,290,266,0,299,289,297,303,280],
[246,247,242,252,0,244,268,268,257],
[267,292,279,262,307,0,283,283,299],
[253,264,264,254,283,268,0,285,285],
[268,267,270,248,283,268,266,0,273],
[245,286,262,271,294,252,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,262,293,295,275,244,248,267],
[281,0,282,312,295,300,275,285,283],
[289,269,0,311,312,312,305,288,277],
[258,239,240,0,274,252,262,288,277],
[256,256,239,277,0,250,249,274,283],
[276,251,239,299,301,0,284,287,284],
[307,276,246,289,302,267,0,292,290],
[303,266,263,263,277,264,259,0,282],
[284,268,274,274,268,267,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,232,201,215,263,253,237,276],
[304,0,308,226,293,268,306,286,370],
[319,243,0,284,280,277,306,263,315],
[350,325,267,0,360,355,372,323,372],
[336,258,271,191,0,241,308,247,331],
[288,283,274,196,310,0,275,256,303],
[298,245,245,179,243,276,0,260,324],
[314,265,288,228,304,295,291,0,339],
[275,181,236,179,220,248,227,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,275,254,243,239,255,267,252],
[305,0,285,297,271,276,294,302,284],
[276,266,0,263,248,260,241,298,295],
[297,254,288,0,264,290,257,308,284],
[308,280,303,287,0,270,272,277,283],
[312,275,291,261,281,0,278,285,288],
[296,257,310,294,279,273,0,290,297],
[284,249,253,243,274,266,261,0,283],
[299,267,256,267,268,263,254,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,270,292,292,281,280,291],
[274,0,281,282,272,274,275,279,287],
[259,270,0,266,263,257,275,274,284],
[281,269,285,0,270,266,285,273,276],
[259,279,288,281,0,277,298,285,281],
[259,277,294,285,274,0,289,274,299],
[270,276,276,266,253,262,0,274,289],
[271,272,277,278,266,277,277,0,296],
[260,264,267,275,270,252,262,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,273,287,287,267,270,243,272],
[311,0,280,290,299,269,291,268,277],
[278,271,0,284,289,267,287,274,273],
[264,261,267,0,290,287,279,268,258],
[264,252,262,261,0,251,267,246,258],
[284,282,284,264,300,0,291,273,261],
[281,260,264,272,284,260,0,257,268],
[308,283,277,283,305,278,294,0,273],
[279,274,278,293,293,290,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,277,283,274,256,272,278],
[278,0,282,312,285,272,283,270,304],
[272,269,0,271,299,288,269,263,280],
[274,239,280,0,268,288,267,254,281],
[268,266,252,283,0,280,262,255,271],
[277,279,263,263,271,0,256,276,264],
[295,268,282,284,289,295,0,271,306],
[279,281,288,297,296,275,280,0,286],
[273,247,271,270,280,287,245,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,272,257,288,261,228,248,264],
[286,0,245,295,297,295,290,324,281],
[279,306,0,274,303,254,250,249,265],
[294,256,277,0,305,237,246,249,273],
[263,254,248,246,0,254,262,258,274],
[290,256,297,314,297,0,269,306,290],
[323,261,301,305,289,282,0,286,274],
[303,227,302,302,293,245,265,0,265],
[287,270,286,278,277,261,277,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,258,276,262,298,268,242,275],
[291,0,262,271,287,294,301,276,268],
[293,289,0,290,277,306,273,267,279],
[275,280,261,0,255,279,275,243,268],
[289,264,274,296,0,304,283,266,274],
[253,257,245,272,247,0,242,250,259],
[283,250,278,276,268,309,0,255,260],
[309,275,284,308,285,301,296,0,262],
[276,283,272,283,277,292,291,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,266,274,275,267,287,275],
[286,0,277,276,278,280,264,287,282],
[275,274,0,293,275,289,269,270,285],
[285,275,258,0,267,271,276,265,272],
[277,273,276,284,0,276,282,283,282],
[276,271,262,280,275,0,262,270,281],
[284,287,282,275,269,289,0,277,298],
[264,264,281,286,268,281,274,0,275],
[276,269,266,279,269,270,253,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,346,293,230,310,213,143,351],
[325,0,337,236,309,285,319,292,336],
[205,214,0,223,163,232,209,179,300],
[258,315,328,0,282,330,307,274,341],
[321,242,388,269,0,361,371,259,386],
[241,266,319,221,190,0,187,204,273],
[338,232,342,244,180,364,0,241,383],
[408,259,372,277,292,347,310,0,350],
[200,215,251,210,165,278,168,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,288,285,267,262,274,262,268],
[283,0,261,289,264,279,288,261,282],
[263,290,0,282,280,273,289,296,283],
[266,262,269,0,260,274,270,244,254],
[284,287,271,291,0,290,297,296,279],
[289,272,278,277,261,0,283,306,268],
[277,263,262,281,254,268,0,286,283],
[289,290,255,307,255,245,265,0,255],
[283,269,268,297,272,283,268,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,229,250,250,217,244,248,226],
[306,0,250,264,265,248,249,254,272],
[322,301,0,260,284,312,270,272,283],
[301,287,291,0,278,270,281,295,285],
[301,286,267,273,0,255,276,285,269],
[334,303,239,281,296,0,271,282,282],
[307,302,281,270,275,280,0,278,267],
[303,297,279,256,266,269,273,0,285],
[325,279,268,266,282,269,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,278,298,273,281,293,277,281],
[265,0,269,279,279,245,277,253,260],
[273,282,0,268,284,260,287,281,261],
[253,272,283,0,288,267,258,282,267],
[278,272,267,263,0,257,299,262,253],
[270,306,291,284,294,0,307,291,265],
[258,274,264,293,252,244,0,258,264],
[274,298,270,269,289,260,293,0,262],
[270,291,290,284,298,286,287,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,264,225,268,247,209,250,237],
[319,0,352,305,299,292,257,293,281],
[287,199,0,256,282,255,210,257,247],
[326,246,295,0,309,292,278,281,257],
[283,252,269,242,0,217,250,239,208],
[304,259,296,259,334,0,287,253,273],
[342,294,341,273,301,264,0,309,281],
[301,258,294,270,312,298,242,0,265],
[314,270,304,294,343,278,270,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,305,301,317,279,277,309,273],
[264,0,253,274,278,275,244,290,247],
[246,298,0,274,294,278,255,277,221],
[250,277,277,0,294,251,242,288,288],
[234,273,257,257,0,256,254,282,231],
[272,276,273,300,295,0,258,289,247],
[274,307,296,309,297,293,0,298,276],
[242,261,274,263,269,262,253,0,276],
[278,304,330,263,320,304,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,289,289,285,298,269,287,309],
[267,0,277,273,288,328,321,294,294],
[262,274,0,307,284,297,271,281,272],
[262,278,244,0,273,305,272,234,274],
[266,263,267,278,0,285,279,262,270],
[253,223,254,246,266,0,255,294,251],
[282,230,280,279,272,296,0,266,264],
[264,257,270,317,289,257,285,0,260],
[242,257,279,277,281,300,287,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,262,214,201,264,220,375,158],
[360,0,297,320,338,407,249,400,273],
[289,254,0,180,283,307,300,347,279],
[337,231,371,0,250,292,253,420,235],
[350,213,268,301,0,275,273,377,219],
[287,144,244,259,276,0,256,367,222],
[331,302,251,298,278,295,0,373,255],
[176,151,204,131,174,184,178,0,122],
[393,278,272,316,332,329,296,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,278,275,265,246,257,274,257],
[283,0,288,295,286,293,258,288,279],
[273,263,0,285,260,260,273,291,274],
[276,256,266,0,251,265,268,260,261],
[286,265,291,300,0,267,285,283,274],
[305,258,291,286,284,0,278,274,267],
[294,293,278,283,266,273,0,287,295],
[277,263,260,291,268,277,264,0,253],
[294,272,277,290,277,284,256,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,282,256,301,284,289,266],
[265,0,286,269,279,280,260,269,256],
[266,265,0,257,255,269,249,273,261],
[269,282,294,0,277,284,250,265,276],
[295,272,296,274,0,286,280,284,262],
[250,271,282,267,265,0,264,280,254],
[267,291,302,301,271,287,0,278,275],
[262,282,278,286,267,271,273,0,269],
[285,295,290,275,289,297,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,282,268,281,277,278,259,271],
[270,0,291,262,274,282,273,270,265],
[269,260,0,261,260,246,266,271,270],
[283,289,290,0,282,280,285,270,274],
[270,277,291,269,0,271,273,269,279],
[274,269,305,271,280,0,277,279,263],
[273,278,285,266,278,274,0,275,276],
[292,281,280,281,282,272,276,0,283],
[280,286,281,277,272,288,275,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,277,249,309,330,257,289,266],
[269,0,273,277,318,342,306,324,271],
[274,278,0,226,271,331,284,285,275],
[302,274,325,0,311,353,307,321,305],
[242,233,280,240,0,280,232,266,269],
[221,209,220,198,271,0,201,280,246],
[294,245,267,244,319,350,0,244,308],
[262,227,266,230,285,271,307,0,267],
[285,280,276,246,282,305,243,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,288,275,302,287,275,279,265],
[256,0,279,278,268,292,282,264,266],
[263,272,0,264,263,271,283,261,264],
[276,273,287,0,278,286,289,281,294],
[249,283,288,273,0,289,276,248,261],
[264,259,280,265,262,0,269,257,260],
[276,269,268,262,275,282,0,271,260],
[272,287,290,270,303,294,280,0,268],
[286,285,287,257,290,291,291,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,277,278,272,270,275,263,253],
[283,0,254,271,277,274,254,284,258],
[274,297,0,277,278,286,273,269,263],
[273,280,274,0,273,266,288,256,253],
[279,274,273,278,0,289,272,257,261],
[281,277,265,285,262,0,291,268,272],
[276,297,278,263,279,260,0,261,259],
[288,267,282,295,294,283,290,0,286],
[298,293,288,298,290,279,292,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,269,264,252,268,265,268,264],
[298,0,267,270,279,279,278,273,272],
[282,284,0,278,270,289,283,295,277],
[287,281,273,0,277,277,281,279,272],
[299,272,281,274,0,280,285,286,301],
[283,272,262,274,271,0,262,264,262],
[286,273,268,270,266,289,0,283,293],
[283,278,256,272,265,287,268,0,265],
[287,279,274,279,250,289,258,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,271,291,273,278,284,279,281],
[284,0,283,284,272,293,281,285,296],
[280,268,0,274,279,283,287,284,295],
[260,267,277,0,276,264,280,275,306],
[278,279,272,275,0,271,277,284,295],
[273,258,268,287,280,0,273,273,293],
[267,270,264,271,274,278,0,278,290],
[272,266,267,276,267,278,273,0,281],
[270,255,256,245,256,258,261,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,239,259,275,300,291,302,268],
[289,0,239,246,250,248,297,272,255],
[312,312,0,274,302,277,316,275,305],
[292,305,277,0,278,291,303,274,285],
[276,301,249,273,0,316,301,288,272],
[251,303,274,260,235,0,311,283,252],
[260,254,235,248,250,240,0,265,237],
[249,279,276,277,263,268,286,0,290],
[283,296,246,266,279,299,314,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,285,267,282,250,273,281],
[268,0,270,259,273,284,269,260,276],
[271,281,0,270,276,296,271,260,283],
[266,292,281,0,287,299,291,257,276],
[284,278,275,264,0,293,270,282,292],
[269,267,255,252,258,0,268,268,273],
[301,282,280,260,281,283,0,274,299],
[278,291,291,294,269,283,277,0,298],
[270,275,268,275,259,278,252,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,292,289,287,295,283,301],
[271,0,283,295,277,287,285,270,291],
[276,268,0,282,269,264,267,266,284],
[259,256,269,0,278,271,286,279,275],
[262,274,282,273,0,277,260,281,302],
[264,264,287,280,274,0,275,286,289],
[256,266,284,265,291,276,0,270,289],
[268,281,285,272,270,265,281,0,290],
[250,260,267,276,249,262,262,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,286,301,288,273,296,282,282],
[266,0,269,297,284,282,275,280,296],
[265,282,0,282,283,285,276,274,271],
[250,254,269,0,271,266,282,257,272],
[263,267,268,280,0,280,263,287,290],
[278,269,266,285,271,0,276,271,277],
[255,276,275,269,288,275,0,283,289],
[269,271,277,294,264,280,268,0,277],
[269,255,280,279,261,274,262,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,278,274,271,262,294,266],
[282,0,265,292,280,268,277,285,268],
[280,286,0,288,271,292,278,275,291],
[273,259,263,0,260,269,269,274,270],
[277,271,280,291,0,288,291,292,277],
[280,283,259,282,263,0,268,282,284],
[289,274,273,282,260,283,0,298,273],
[257,266,276,277,259,269,253,0,254],
[285,283,260,281,274,267,278,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,260,228,292,314,301,287,289],
[309,0,265,305,311,323,330,321,270],
[291,286,0,245,331,294,304,301,273],
[323,246,306,0,331,337,346,338,290],
[259,240,220,220,0,300,297,272,241],
[237,228,257,214,251,0,315,287,284],
[250,221,247,205,254,236,0,308,273],
[264,230,250,213,279,264,243,0,266],
[262,281,278,261,310,267,278,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,265,275,272,295,287,281],
[268,0,252,284,264,283,289,308,288],
[279,299,0,286,308,296,296,304,270],
[286,267,265,0,265,299,298,284,299],
[276,287,243,286,0,300,300,304,279],
[279,268,255,252,251,0,271,292,277],
[256,262,255,253,251,280,0,307,256],
[264,243,247,267,247,259,244,0,263],
[270,263,281,252,272,274,295,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,272,259,283,253,277,262,250],
[288,0,289,261,277,271,275,267,274],
[279,262,0,264,295,273,276,262,264],
[292,290,287,0,301,267,276,276,282],
[268,274,256,250,0,249,264,246,258],
[298,280,278,284,302,0,282,298,256],
[274,276,275,275,287,269,0,257,262],
[289,284,289,275,305,253,294,0,276],
[301,277,287,269,293,295,289,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,266,233,214,210,249,215,240],
[313,0,277,259,268,279,260,287,291],
[285,274,0,230,251,245,296,250,260],
[318,292,321,0,266,308,272,266,287],
[337,283,300,285,0,260,261,242,263],
[341,272,306,243,291,0,262,265,303],
[302,291,255,279,290,289,0,271,308],
[336,264,301,285,309,286,280,0,272],
[311,260,291,264,288,248,243,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,140,293,208,254,187,282,247],
[367,0,289,317,305,263,260,303,317],
[411,262,0,390,247,273,242,380,354],
[258,234,161,0,220,314,259,294,324],
[343,246,304,331,0,320,212,367,284],
[297,288,278,237,231,0,346,338,346],
[364,291,309,292,339,205,0,369,278],
[269,248,171,257,184,213,182,0,309],
[304,234,197,227,267,205,273,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,282,264,262,317,285,284,265],
[259,0,282,281,276,307,271,265,281],
[269,269,0,284,266,316,297,274,285],
[287,270,267,0,243,298,273,268,265],
[289,275,285,308,0,325,292,315,276],
[234,244,235,253,226,0,254,246,261],
[266,280,254,278,259,297,0,285,287],
[267,286,277,283,236,305,266,0,248],
[286,270,266,286,275,290,264,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,255,265,270,276,288,272,251],
[284,0,258,264,255,272,279,278,261],
[296,293,0,287,262,281,279,298,293],
[286,287,264,0,261,269,273,287,266],
[281,296,289,290,0,277,272,281,279],
[275,279,270,282,274,0,278,278,272],
[263,272,272,278,279,273,0,275,270],
[279,273,253,264,270,273,276,0,258],
[300,290,258,285,272,279,281,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,333,366,369,302,312,263,347],
[202,0,284,284,225,201,341,192,270],
[218,267,0,314,238,225,226,174,230],
[185,267,237,0,235,262,253,248,222],
[182,326,313,316,0,280,304,265,268],
[249,350,326,289,271,0,361,306,300],
[239,210,325,298,247,190,0,164,338],
[288,359,377,303,286,245,387,0,392],
[204,281,321,329,283,251,213,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,282,272,278,297,274,283,288],
[262,0,256,280,256,285,253,270,268],
[269,295,0,271,263,280,280,292,275],
[279,271,280,0,290,290,285,291,276],
[273,295,288,261,0,274,297,272,285],
[254,266,271,261,277,0,261,250,283],
[277,298,271,266,254,290,0,280,273],
[268,281,259,260,279,301,271,0,277],
[263,283,276,275,266,268,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,295,325,300,284,275,279,288],
[284,0,265,308,267,273,273,291,299],
[256,286,0,292,260,231,276,270,307],
[226,243,259,0,269,248,247,255,262],
[251,284,291,282,0,312,295,278,294],
[267,278,320,303,239,0,255,269,298],
[276,278,275,304,256,296,0,269,297],
[272,260,281,296,273,282,282,0,254],
[263,252,244,289,257,253,254,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,260,206,320,252,250,230,311],
[251,0,196,171,278,222,306,205,233],
[291,355,0,292,375,292,347,238,310],
[345,380,259,0,366,302,329,280,331],
[231,273,176,185,0,181,261,199,268],
[299,329,259,249,370,0,315,262,274],
[301,245,204,222,290,236,0,193,287],
[321,346,313,271,352,289,358,0,334],
[240,318,241,220,283,277,264,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,284,277,280,260,286,268],
[276,0,291,256,284,268,277,281,272],
[277,260,0,266,289,276,267,280,263],
[267,295,285,0,276,262,253,283,269],
[274,267,262,275,0,263,241,284,253],
[271,283,275,289,288,0,262,282,277],
[291,274,284,298,310,289,0,291,279],
[265,270,271,268,267,269,260,0,262],
[283,279,288,282,298,274,272,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,276,245,273,235,242,266,259],
[260,0,276,262,261,260,257,255,221],
[275,275,0,284,298,280,271,282,229],
[306,289,267,0,294,300,261,264,277],
[278,290,253,257,0,284,265,277,241],
[316,291,271,251,267,0,287,247,246],
[309,294,280,290,286,264,0,285,291],
[285,296,269,287,274,304,266,0,278],
[292,330,322,274,310,305,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,250,241,265,238,245,240,250],
[309,0,277,264,286,263,271,269,262],
[301,274,0,259,268,264,269,276,295],
[310,287,292,0,296,263,267,261,286],
[286,265,283,255,0,249,267,256,266],
[313,288,287,288,302,0,270,276,289],
[306,280,282,284,284,281,0,262,279],
[311,282,275,290,295,275,289,0,292],
[301,289,256,265,285,262,272,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,275,275,289,278,266,271,272],
[244,0,276,293,271,261,320,265,219],
[276,275,0,256,268,266,326,233,231],
[276,258,295,0,269,286,259,274,257],
[262,280,283,282,0,304,279,288,251],
[273,290,285,265,247,0,303,255,277],
[285,231,225,292,272,248,0,228,261],
[280,286,318,277,263,296,323,0,267],
[279,332,320,294,300,274,290,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,275,316,292,304,277,291,277],
[257,0,287,291,283,287,267,284,275],
[276,264,0,287,286,277,267,276,255],
[235,260,264,0,280,298,271,287,260],
[259,268,265,271,0,288,291,284,258],
[247,264,274,253,263,0,266,261,253],
[274,284,284,280,260,285,0,282,271],
[260,267,275,264,267,290,269,0,253],
[274,276,296,291,293,298,280,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,297,200,202,355,357,277,335],
[244,0,265,128,306,285,304,224,301],
[254,286,0,148,287,304,319,244,277],
[351,423,403,0,333,419,365,260,394],
[349,245,264,218,0,237,299,331,337],
[196,266,247,132,314,0,255,230,333],
[194,247,232,186,252,296,0,200,273],
[274,327,307,291,220,321,351,0,330],
[216,250,274,157,214,218,278,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,309,282,305,285,345,274,279],
[263,0,279,280,283,237,358,282,277],
[242,272,0,235,225,260,280,210,224],
[269,271,316,0,262,262,335,319,273],
[246,268,326,289,0,333,349,291,302],
[266,314,291,289,218,0,338,291,316],
[206,193,271,216,202,213,0,219,220],
[277,269,341,232,260,260,332,0,264],
[272,274,327,278,249,235,331,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,245,279,322,355,298,342,322],
[217,0,267,282,269,318,248,292,341],
[306,284,0,318,271,299,282,321,296],
[272,269,233,0,289,258,286,218,326],
[229,282,280,262,0,283,303,274,297],
[196,233,252,293,268,0,245,288,313],
[253,303,269,265,248,306,0,317,261],
[209,259,230,333,277,263,234,0,269],
[229,210,255,225,254,238,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,286,302,262,266,271,281,283],
[312,0,308,295,282,272,285,304,294],
[265,243,0,285,243,256,266,275,286],
[249,256,266,0,235,249,259,268,284],
[289,269,308,316,0,287,291,294,298],
[285,279,295,302,264,0,266,299,296],
[280,266,285,292,260,285,0,275,289],
[270,247,276,283,257,252,276,0,288],
[268,257,265,267,253,255,262,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,230,295,234,242,258,336,279],
[230,0,246,248,207,284,302,262,303],
[321,305,0,333,283,265,313,296,274],
[256,303,218,0,225,215,288,290,288],
[317,344,268,326,0,312,315,266,374],
[309,267,286,336,239,0,269,265,321],
[293,249,238,263,236,282,0,267,238],
[215,289,255,261,285,286,284,0,274],
[272,248,277,263,177,230,313,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,267,278,266,284,255,281,277],
[279,0,281,265,272,269,277,278,268],
[284,270,0,270,261,288,264,279,277],
[273,286,281,0,261,276,266,269,263],
[285,279,290,290,0,288,260,281,259],
[267,282,263,275,263,0,258,279,260],
[296,274,287,285,291,293,0,283,281],
[270,273,272,282,270,272,268,0,275],
[274,283,274,288,292,291,270,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,243,255,253,252,268,256,255],
[295,0,269,260,251,268,275,257,279],
[308,282,0,290,268,292,314,279,295],
[296,291,261,0,281,292,305,288,283],
[298,300,283,270,0,295,291,264,290],
[299,283,259,259,256,0,296,260,284],
[283,276,237,246,260,255,0,260,260],
[295,294,272,263,287,291,291,0,289],
[296,272,256,268,261,267,291,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,285,275,285,282,299,277,281],
[289,0,279,275,290,307,300,281,277],
[266,272,0,263,269,300,303,275,256],
[276,276,288,0,290,286,291,277,263],
[266,261,282,261,0,291,276,284,258],
[269,244,251,265,260,0,288,260,262],
[252,251,248,260,275,263,0,271,259],
[274,270,276,274,267,291,280,0,278],
[270,274,295,288,293,289,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,245,269,249,261,260,270],
[284,0,282,284,263,277,269,273,276],
[277,269,0,267,270,269,271,268,257],
[306,267,284,0,300,286,298,283,288],
[282,288,281,251,0,268,290,272,266],
[302,274,282,265,283,0,302,276,287],
[290,282,280,253,261,249,0,281,269],
[291,278,283,268,279,275,270,0,267],
[281,275,294,263,285,264,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,295,289,323,290,282,312,316],
[279,0,282,285,253,296,269,300,314],
[256,269,0,291,306,296,272,277,313],
[262,266,260,0,283,318,272,299,298],
[228,298,245,268,0,265,258,274,294],
[261,255,255,233,286,0,260,274,265],
[269,282,279,279,293,291,0,301,291],
[239,251,274,252,277,277,250,0,273],
[235,237,238,253,257,286,260,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,259,254,240,247,251,283,252],
[283,0,277,285,257,262,268,287,253],
[292,274,0,290,250,286,284,313,270],
[297,266,261,0,258,270,282,281,265],
[311,294,301,293,0,297,307,305,274],
[304,289,265,281,254,0,266,304,262],
[300,283,267,269,244,285,0,303,278],
[268,264,238,270,246,247,248,0,244],
[299,298,281,286,277,289,273,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,266,270,272,282,267,251,280],
[269,0,263,263,258,267,276,260,281],
[285,288,0,255,285,284,249,256,247],
[281,288,296,0,274,274,282,259,295],
[279,293,266,277,0,280,278,257,271],
[269,284,267,277,271,0,284,272,269],
[284,275,302,269,273,267,0,278,292],
[300,291,295,292,294,279,273,0,294],
[271,270,304,256,280,282,259,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,273,275,270,287,258,289,286],
[263,0,268,257,268,254,254,264,273],
[278,283,0,275,263,256,256,283,285],
[276,294,276,0,282,273,276,287,287],
[281,283,288,269,0,256,268,272,283],
[264,297,295,278,295,0,276,282,281],
[293,297,295,275,283,275,0,276,307],
[262,287,268,264,279,269,275,0,290],
[265,278,266,264,268,270,244,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,282,275,290,270,277,280,244],
[264,0,280,285,288,271,285,279,238],
[269,271,0,270,284,269,271,272,263],
[276,266,281,0,304,270,279,280,276],
[261,263,267,247,0,277,270,267,249],
[281,280,282,281,274,0,258,265,277],
[274,266,280,272,281,293,0,269,267],
[271,272,279,271,284,286,282,0,256],
[307,313,288,275,302,274,284,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,303,263,301,280,281,270,278],
[270,0,277,264,276,273,281,273,267],
[248,274,0,254,262,253,260,253,276],
[288,287,297,0,302,259,287,283,273],
[250,275,289,249,0,247,268,261,236],
[271,278,298,292,304,0,265,264,278],
[270,270,291,264,283,286,0,274,261],
[281,278,298,268,290,287,277,0,272],
[273,284,275,278,315,273,290,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,250,263,434,370,392,383,361],
[292,0,289,221,305,351,363,451,358],
[301,262,0,366,376,393,393,325,349],
[288,330,185,0,301,242,318,451,363],
[117,246,175,250,0,291,446,437,244],
[181,200,158,309,260,0,492,378,290],
[159,188,158,233,105,59,0,370,349],
[168,100,226,100,114,173,181,0,215],
[190,193,202,188,307,261,202,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,287,276,298,282,292,262,278],
[257,0,268,266,279,266,264,259,262],
[264,283,0,270,267,280,277,265,279],
[275,285,281,0,284,279,283,285,291],
[253,272,284,267,0,273,266,260,280],
[269,285,271,272,278,0,274,256,273],
[259,287,274,268,285,277,0,262,283],
[289,292,286,266,291,295,289,0,295],
[273,289,272,260,271,278,268,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,255,270,267,279,324,317,269],
[270,0,271,286,287,292,318,289,263],
[296,280,0,247,264,263,304,275,276],
[281,265,304,0,291,327,340,299,276],
[284,264,287,260,0,277,318,307,271],
[272,259,288,224,274,0,303,287,276],
[227,233,247,211,233,248,0,267,249],
[234,262,276,252,244,264,284,0,262],
[282,288,275,275,280,275,302,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,275,269,273,287,285,271,301],
[251,0,217,238,246,266,261,248,268],
[276,334,0,255,284,283,281,274,299],
[282,313,296,0,294,296,273,308,300],
[278,305,267,257,0,286,276,301,288],
[264,285,268,255,265,0,272,283,266],
[266,290,270,278,275,279,0,274,289],
[280,303,277,243,250,268,277,0,275],
[250,283,252,251,263,285,262,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,261,288,255,266,262,256,263],
[276,0,269,275,271,266,276,289,287],
[290,282,0,282,271,280,296,295,287],
[263,276,269,0,265,270,265,279,282],
[296,280,280,286,0,281,275,294,279],
[285,285,271,281,270,0,284,274,287],
[289,275,255,286,276,267,0,286,285],
[295,262,256,272,257,277,265,0,282],
[288,264,264,269,272,264,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,286,274,286,278,301,327,266],
[267,0,266,237,293,293,274,310,264],
[265,285,0,251,224,315,272,308,290],
[277,314,300,0,212,335,269,351,268],
[265,258,327,339,0,282,298,302,295],
[273,258,236,216,269,0,308,256,238],
[250,277,279,282,253,243,0,297,255],
[224,241,243,200,249,295,254,0,246],
[285,287,261,283,256,313,296,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,301,324,278,315,297,294,315],
[277,0,309,214,253,251,286,301,254],
[250,242,0,283,242,331,274,224,296],
[227,337,268,0,242,276,330,268,270],
[273,298,309,309,0,385,376,264,309],
[236,300,220,275,166,0,229,218,223],
[254,265,277,221,175,322,0,268,293],
[257,250,327,283,287,333,283,0,289],
[236,297,255,281,242,328,258,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,298,251,275,294,255,225,284],
[261,0,260,247,284,256,296,233,274],
[253,291,0,223,179,215,214,207,237],
[300,304,328,0,322,239,278,218,270],
[276,267,372,229,0,258,277,246,256],
[257,295,336,312,293,0,230,241,285],
[296,255,337,273,274,321,0,280,330],
[326,318,344,333,305,310,271,0,301],
[267,277,314,281,295,266,221,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,271,276,286,265,272,287,278],
[265,0,280,289,286,257,281,282,278],
[280,271,0,269,264,280,261,285,286],
[275,262,282,0,270,258,284,273,285],
[265,265,287,281,0,271,271,291,265],
[286,294,271,293,280,0,275,298,291],
[279,270,290,267,280,276,0,286,288],
[264,269,266,278,260,253,265,0,283],
[273,273,265,266,286,260,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,279,291,299,265,277,298,290],
[252,0,265,242,301,244,248,298,294],
[272,286,0,266,316,261,267,284,284],
[260,309,285,0,293,280,273,291,299],
[252,250,235,258,0,245,241,277,268],
[286,307,290,271,306,0,258,333,262],
[274,303,284,278,310,293,0,302,301],
[253,253,267,260,274,218,249,0,270],
[261,257,267,252,283,289,250,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,260,259,264,276,267,268,259],
[274,0,257,266,249,257,266,273,265],
[291,294,0,290,289,277,283,271,270],
[292,285,261,0,277,272,290,273,278],
[287,302,262,274,0,280,288,275,293],
[275,294,274,279,271,0,278,275,258],
[284,285,268,261,263,273,0,270,252],
[283,278,280,278,276,276,281,0,261],
[292,286,281,273,258,293,299,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,277,263,273,241,257,257,250],
[285,0,274,282,273,263,261,284,259],
[274,277,0,268,266,262,268,267,273],
[288,269,283,0,264,272,276,259,276],
[278,278,285,287,0,278,274,277,276],
[310,288,289,279,273,0,267,274,273],
[294,290,283,275,277,284,0,275,275],
[294,267,284,292,274,277,276,0,275],
[301,292,278,275,275,278,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,249,281,327,304,271,273,311],
[304,0,277,297,324,275,284,281,318],
[302,274,0,310,298,304,294,290,337],
[270,254,241,0,283,266,265,269,298],
[224,227,253,268,0,269,268,225,289],
[247,276,247,285,282,0,279,251,316],
[280,267,257,286,283,272,0,277,303],
[278,270,261,282,326,300,274,0,327],
[240,233,214,253,262,235,248,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,281,280,263,286,280,269,285],
[284,0,269,290,267,275,283,272,285],
[270,282,0,270,281,265,299,259,285],
[271,261,281,0,271,270,309,246,305],
[288,284,270,280,0,283,301,281,309],
[265,276,286,281,268,0,295,248,294],
[271,268,252,242,250,256,0,258,255],
[282,279,292,305,270,303,293,0,307],
[266,266,266,246,242,257,296,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,271,267,256,266,277,284,291],
[299,0,272,288,276,279,316,304,294],
[280,279,0,293,272,278,304,291,290],
[284,263,258,0,276,261,298,278,294],
[295,275,279,275,0,262,281,290,296],
[285,272,273,290,289,0,308,289,292],
[274,235,247,253,270,243,0,258,273],
[267,247,260,273,261,262,293,0,276],
[260,257,261,257,255,259,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,252,257,255,273,289,253,273],
[289,0,265,289,260,278,287,271,263],
[299,286,0,285,261,299,287,277,266],
[294,262,266,0,280,285,295,274,272],
[296,291,290,271,0,285,284,280,280],
[278,273,252,266,266,0,267,264,248],
[262,264,264,256,267,284,0,269,257],
[298,280,274,277,271,287,282,0,273],
[278,288,285,279,271,303,294,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,261,266,322,285,308,264,280],
[246,0,247,244,290,241,250,254,257],
[290,304,0,273,321,287,262,269,263],
[285,307,278,0,309,258,280,278,261],
[229,261,230,242,0,240,259,221,265],
[266,310,264,293,311,0,272,264,300],
[243,301,289,271,292,279,0,282,271],
[287,297,282,273,330,287,269,0,291],
[271,294,288,290,286,251,280,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,319,306,300,282,300,297,268],
[254,0,286,280,268,273,273,285,278],
[232,265,0,270,272,274,276,271,269],
[245,271,281,0,248,262,268,278,280],
[251,283,279,303,0,277,292,257,282],
[269,278,277,289,274,0,276,287,289],
[251,278,275,283,259,275,0,267,293],
[254,266,280,273,294,264,284,0,277],
[283,273,282,271,269,262,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,284,273,290,285,289,272],
[272,0,283,284,288,296,298,280,284],
[271,268,0,267,259,279,262,279,290],
[267,267,284,0,271,273,286,278,280],
[278,263,292,280,0,298,283,292,284],
[261,255,272,278,253,0,283,270,276],
[266,253,289,265,268,268,0,262,270],
[262,271,272,273,259,281,289,0,272],
[279,267,261,271,267,275,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,269,278,290,295,295,258,262],
[305,0,268,298,297,274,299,262,290],
[282,283,0,273,305,274,297,277,288],
[273,253,278,0,283,278,283,259,270],
[261,254,246,268,0,272,267,241,251],
[256,277,277,273,279,0,292,256,256],
[256,252,254,268,284,259,0,242,257],
[293,289,274,292,310,295,309,0,265],
[289,261,263,281,300,295,294,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,268,237,287,283,272,274,253],
[284,0,284,275,294,285,300,268,274],
[283,267,0,262,299,278,286,275,260],
[314,276,289,0,316,262,306,286,282],
[264,257,252,235,0,260,275,263,254],
[268,266,273,289,291,0,274,273,267],
[279,251,265,245,276,277,0,272,258],
[277,283,276,265,288,278,279,0,260],
[298,277,291,269,297,284,293,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,249,248,275,287,273,272,269],
[280,0,288,271,256,264,262,276,276],
[302,263,0,238,288,279,272,291,284],
[303,280,313,0,260,281,298,285,306],
[276,295,263,291,0,293,289,275,330],
[264,287,272,270,258,0,273,272,292],
[278,289,279,253,262,278,0,302,293],
[279,275,260,266,276,279,249,0,299],
[282,275,267,245,221,259,258,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,265,229,265,240,245,285,237],
[320,0,307,280,309,281,273,292,276],
[286,244,0,236,274,247,230,246,252],
[322,271,315,0,284,285,258,299,264],
[286,242,277,267,0,255,265,282,270],
[311,270,304,266,296,0,282,301,272],
[306,278,321,293,286,269,0,303,294],
[266,259,305,252,269,250,248,0,250],
[314,275,299,287,281,279,257,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,276,274,263,267,282,274,284],
[287,0,287,267,264,269,279,274,277],
[275,264,0,285,266,265,270,283,273],
[277,284,266,0,257,267,263,266,275],
[288,287,285,294,0,273,272,290,288],
[284,282,286,284,278,0,267,279,272],
[269,272,281,288,279,284,0,271,271],
[277,277,268,285,261,272,280,0,275],
[267,274,278,276,263,279,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,267,302,284,277,254,268,279],
[271,0,276,293,295,303,281,276,286],
[284,275,0,264,281,245,277,286,292],
[249,258,287,0,273,270,261,278,267],
[267,256,270,278,0,231,269,277,297],
[274,248,306,281,320,0,292,299,309],
[297,270,274,290,282,259,0,293,317],
[283,275,265,273,274,252,258,0,267],
[272,265,259,284,254,242,234,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,288,301,274,259,303,290,319],
[301,0,297,271,286,274,257,262,274],
[263,254,0,266,257,242,256,242,225],
[250,280,285,0,254,277,244,229,267],
[277,265,294,297,0,286,274,279,281],
[292,277,309,274,265,0,262,275,273],
[248,294,295,307,277,289,0,244,277],
[261,289,309,322,272,276,307,0,282],
[232,277,326,284,270,278,274,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,258,267,280,258,270,265,271],
[298,0,273,282,276,255,280,282,282],
[293,278,0,300,292,270,286,290,300],
[284,269,251,0,282,281,281,292,287],
[271,275,259,269,0,263,285,284,276],
[293,296,281,270,288,0,275,298,287],
[281,271,265,270,266,276,0,287,279],
[286,269,261,259,267,253,264,0,277],
[280,269,251,264,275,264,272,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,259,260,249,304,259,268,260],
[275,0,272,262,268,296,278,274,262],
[292,279,0,268,270,290,247,276,277],
[291,289,283,0,280,305,278,273,282],
[302,283,281,271,0,305,264,290,274],
[247,255,261,246,246,0,243,259,252],
[292,273,304,273,287,308,0,284,274],
[283,277,275,278,261,292,267,0,280],
[291,289,274,269,277,299,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,264,266,289,269,280,283,298],
[250,0,294,237,269,277,258,298,296],
[287,257,0,276,271,273,250,259,295],
[285,314,275,0,294,294,322,280,315],
[262,282,280,257,0,271,269,284,300],
[282,274,278,257,280,0,281,273,279],
[271,293,301,229,282,270,0,270,289],
[268,253,292,271,267,278,281,0,299],
[253,255,256,236,251,272,262,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,311,257,282,288,293,307,309],
[256,0,295,266,274,269,279,279,275],
[240,256,0,233,256,248,272,282,280],
[294,285,318,0,274,292,315,282,308],
[269,277,295,277,0,274,290,290,274],
[263,282,303,259,277,0,287,292,268],
[258,272,279,236,261,264,0,273,264],
[244,272,269,269,261,259,278,0,275],
[242,276,271,243,277,283,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,301,277,261,275,303,247,340],
[311,0,283,333,309,284,273,270,312],
[250,268,0,222,244,221,257,245,249],
[274,218,329,0,273,258,281,283,301],
[290,242,307,278,0,260,261,277,313],
[276,267,330,293,291,0,291,270,326],
[248,278,294,270,290,260,0,253,315],
[304,281,306,268,274,281,298,0,299],
[211,239,302,250,238,225,236,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,279,296,275,272,262,273,284],
[265,0,276,276,276,271,277,270,272],
[272,275,0,285,256,268,258,262,260],
[255,275,266,0,261,283,261,266,264],
[276,275,295,290,0,284,295,280,270],
[279,280,283,268,267,0,311,285,280],
[289,274,293,290,256,240,0,265,253],
[278,281,289,285,271,266,286,0,263],
[267,279,291,287,281,271,298,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,266,262,301,251,263,250,258],
[297,0,276,280,305,268,280,259,276],
[285,275,0,261,294,272,274,258,280],
[289,271,290,0,305,277,277,261,287],
[250,246,257,246,0,246,235,224,252],
[300,283,279,274,305,0,286,276,290],
[288,271,277,274,316,265,0,260,287],
[301,292,293,290,327,275,291,0,303],
[293,275,271,264,299,261,264,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,262,235,243,256,244,268],
[272,0,264,269,241,276,260,261,254],
[269,287,0,264,243,272,277,229,260],
[289,282,287,0,279,271,297,276,288],
[316,310,308,272,0,285,266,283,289],
[308,275,279,280,266,0,280,268,288],
[295,291,274,254,285,271,0,259,270],
[307,290,322,275,268,283,292,0,290],
[283,297,291,263,262,263,281,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,199,251,209,296,265,134,202],
[288,0,338,287,369,318,172,109,327],
[352,213,0,383,364,218,277,290,450],
[300,264,168,0,343,278,186,158,217],
[342,182,187,208,0,320,238,169,277],
[255,233,333,273,231,0,309,124,384],
[286,379,274,365,313,242,0,193,316],
[417,442,261,393,382,427,358,0,410],
[349,224,101,334,274,167,235,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,264,290,266,256,299,258,386],
[253,0,294,255,275,258,269,270,295],
[287,257,0,307,298,231,288,279,304],
[261,296,244,0,248,242,281,200,325],
[285,276,253,303,0,286,309,279,318],
[295,293,320,309,265,0,289,290,320],
[252,282,263,270,242,262,0,233,267],
[293,281,272,351,272,261,318,0,316],
[165,256,247,226,233,231,284,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,286,295,294,275,300,273,295],
[254,0,277,261,278,270,284,266,283],
[265,274,0,275,278,248,277,259,273],
[256,290,276,0,272,272,286,259,286],
[257,273,273,279,0,277,285,284,295],
[276,281,303,279,274,0,301,263,287],
[251,267,274,265,266,250,0,244,274],
[278,285,292,292,267,288,307,0,316],
[256,268,278,265,256,264,277,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,261,262,274,267,291,264,238],
[290,0,264,270,273,270,305,304,268],
[290,287,0,276,280,268,289,262,267],
[289,281,275,0,288,267,302,277,276],
[277,278,271,263,0,254,280,278,266],
[284,281,283,284,297,0,281,290,275],
[260,246,262,249,271,270,0,261,249],
[287,247,289,274,273,261,290,0,278],
[313,283,284,275,285,276,302,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,232,290,323,297,195,227,217],
[270,0,265,230,264,259,232,190,161],
[319,286,0,166,341,327,334,267,286],
[261,321,385,0,276,211,209,300,161],
[228,287,210,275,0,250,227,196,147],
[254,292,224,340,301,0,258,348,238],
[356,319,217,342,324,293,0,238,80],
[324,361,284,251,355,203,313,0,213],
[334,390,265,390,404,313,471,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,239,267,255,256,263,272,255],
[283,0,243,288,273,276,278,274,262],
[312,308,0,296,292,283,286,275,286],
[284,263,255,0,285,263,267,261,269],
[296,278,259,266,0,271,277,273,263],
[295,275,268,288,280,0,285,295,296],
[288,273,265,284,274,266,0,292,263],
[279,277,276,290,278,256,259,0,265],
[296,289,265,282,288,255,288,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,284,270,316,287,285,269,307],
[259,0,256,273,286,250,272,277,294],
[267,295,0,280,297,286,269,286,282],
[281,278,271,0,285,276,276,257,284],
[235,265,254,266,0,242,261,265,275],
[264,301,265,275,309,0,286,279,290],
[266,279,282,275,290,265,0,295,279],
[282,274,265,294,286,272,256,0,282],
[244,257,269,267,276,261,272,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,268,293,286,279,286,282],
[268,0,272,263,286,270,263,279,278],
[289,279,0,268,285,284,270,276,271],
[283,288,283,0,292,285,259,283,278],
[258,265,266,259,0,267,268,283,254],
[265,281,267,266,284,0,253,285,260],
[272,288,281,292,283,298,0,299,278],
[265,272,275,268,268,266,252,0,263],
[269,273,280,273,297,291,273,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,287,296,271,259,286,277,266],
[281,0,291,278,266,266,300,272,267],
[264,260,0,267,266,239,267,251,247],
[255,273,284,0,268,234,257,266,286],
[280,285,285,283,0,277,281,281,259],
[292,285,312,317,274,0,298,299,292],
[265,251,284,294,270,253,0,280,261],
[274,279,300,285,270,252,271,0,276],
[285,284,304,265,292,259,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,263,256,269,243,229,242,289],
[307,0,290,272,280,267,229,304,317],
[288,261,0,283,292,266,299,290,326],
[295,279,268,0,239,234,240,249,276],
[282,271,259,312,0,264,252,282,323],
[308,284,285,317,287,0,254,302,304],
[322,322,252,311,299,297,0,281,307],
[309,247,261,302,269,249,270,0,330],
[262,234,225,275,228,247,244,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,467,185,281,218,243,233,244],
[336,0,391,256,256,309,238,199,254],
[84,160,0,166,227,124,184,109,148],
[366,295,385,0,340,261,338,242,268],
[270,295,324,211,0,240,300,295,268],
[333,242,427,290,311,0,324,260,350],
[308,313,367,213,251,227,0,242,286],
[318,352,442,309,256,291,309,0,294],
[307,297,403,283,283,201,265,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,291,272,275,269,294,254],
[274,0,309,271,260,265,273,268,261],
[262,242,0,267,242,265,272,267,250],
[260,280,284,0,284,282,282,285,260],
[279,291,309,267,0,290,286,302,300],
[276,286,286,269,261,0,272,266,280],
[282,278,279,269,265,279,0,291,291],
[257,283,284,266,249,285,260,0,251],
[297,290,301,291,251,271,260,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,278,268,249,258,265,253,266],
[303,0,286,311,274,283,278,287,301],
[273,265,0,307,264,248,272,268,283],
[283,240,244,0,247,252,244,270,266],
[302,277,287,304,0,271,285,271,277],
[293,268,303,299,280,0,304,279,256],
[286,273,279,307,266,247,0,261,265],
[298,264,283,281,280,272,290,0,298],
[285,250,268,285,274,295,286,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,289,305,299,279,266,300,302],
[285,0,265,300,275,279,274,309,292],
[262,286,0,296,276,295,275,314,294],
[246,251,255,0,290,279,260,306,260],
[252,276,275,261,0,267,260,314,263],
[272,272,256,272,284,0,282,316,288],
[285,277,276,291,291,269,0,310,293],
[251,242,237,245,237,235,241,0,237],
[249,259,257,291,288,263,258,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,256,270,290,263,253,295,250],
[289,0,271,275,276,261,265,292,288],
[295,280,0,310,312,294,276,272,282],
[281,276,241,0,275,260,286,283,284],
[261,275,239,276,0,260,251,298,279],
[288,290,257,291,291,0,280,304,281],
[298,286,275,265,300,271,0,301,290],
[256,259,279,268,253,247,250,0,284],
[301,263,269,267,272,270,261,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,286,288,288,269,278,290,289],
[271,0,280,271,275,266,264,260,272],
[265,271,0,278,278,265,260,274,265],
[263,280,273,0,282,280,273,273,270],
[263,276,273,269,0,263,261,276,262],
[282,285,286,271,288,0,272,276,280],
[273,287,291,278,290,279,0,298,283],
[261,291,277,278,275,275,253,0,275],
[262,279,286,281,289,271,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,306,302,302,292,346,290,276],
[294,0,326,275,279,326,367,285,228],
[245,225,0,176,251,244,262,232,266],
[249,276,375,0,275,294,334,265,285],
[249,272,300,276,0,262,323,339,275],
[259,225,307,257,289,0,269,243,238],
[205,184,289,217,228,282,0,237,216],
[261,266,319,286,212,308,314,0,267],
[275,323,285,266,276,313,335,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,237,279,253,261,285,248,259],
[324,0,273,291,278,287,318,278,284],
[314,278,0,319,276,285,267,299,260],
[272,260,232,0,250,254,290,293,271],
[298,273,275,301,0,301,293,273,283],
[290,264,266,297,250,0,291,279,282],
[266,233,284,261,258,260,0,279,254],
[303,273,252,258,278,272,272,0,280],
[292,267,291,280,268,269,297,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,271,255,266,250,248,253,265],
[294,0,285,274,279,277,269,278,262],
[280,266,0,263,265,263,269,264,264],
[296,277,288,0,277,265,272,281,259],
[285,272,286,274,0,276,254,281,274],
[301,274,288,286,275,0,267,276,267],
[303,282,282,279,297,284,0,270,280],
[298,273,287,270,270,275,281,0,273],
[286,289,287,292,277,284,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,294,269,281,229,252,279,289],
[278,0,255,266,289,244,286,250,267],
[257,296,0,276,278,276,264,243,291],
[282,285,275,0,282,258,291,235,270],
[270,262,273,269,0,259,292,237,278],
[322,307,275,293,292,0,303,267,310],
[299,265,287,260,259,248,0,247,308],
[272,301,308,316,314,284,304,0,321],
[262,284,260,281,273,241,243,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,280,269,272,266,284,270],
[273,0,259,264,292,253,264,265,262],
[284,292,0,292,297,263,282,288,278],
[271,287,259,0,295,266,282,275,265],
[282,259,254,256,0,233,262,261,258],
[279,298,288,285,318,0,286,286,272],
[285,287,269,269,289,265,0,251,271],
[267,286,263,276,290,265,300,0,285],
[281,289,273,286,293,279,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,256,276,258,275,254,268,277],
[274,0,263,280,264,269,275,259,268],
[295,288,0,290,272,307,285,294,308],
[275,271,261,0,288,278,270,277,269],
[293,287,279,263,0,282,275,279,284],
[276,282,244,273,269,0,265,255,278],
[297,276,266,281,276,286,0,260,275],
[283,292,257,274,272,296,291,0,292],
[274,283,243,282,267,273,276,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,241,224,220,244,222,228,288],
[268,0,213,256,247,241,226,234,294],
[310,338,0,272,286,302,283,263,345],
[327,295,279,0,266,267,257,237,311],
[331,304,265,285,0,314,324,278,315],
[307,310,249,284,237,0,271,219,242],
[329,325,268,294,227,280,0,299,283],
[323,317,288,314,273,332,252,0,375],
[263,257,206,240,236,309,268,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,301,328,255,287,278,298,303],
[261,0,289,301,283,302,305,302,295],
[250,262,0,290,257,268,259,276,275],
[223,250,261,0,254,279,262,260,281],
[296,268,294,297,0,294,271,288,288],
[264,249,283,272,257,0,260,282,289],
[273,246,292,289,280,291,0,273,312],
[253,249,275,291,263,269,278,0,289],
[248,256,276,270,263,262,239,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,304,301,289,314,285,263,294],
[235,0,252,272,242,284,244,225,263],
[247,299,0,283,273,299,261,228,267],
[250,279,268,0,267,277,253,238,272],
[262,309,278,284,0,293,282,231,269],
[237,267,252,274,258,0,238,241,238],
[266,307,290,298,269,313,0,281,282],
[288,326,323,313,320,310,270,0,304],
[257,288,284,279,282,313,269,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,300,285,296,267,255,272,288],
[286,0,309,292,286,274,280,284,313],
[251,242,0,238,275,259,237,257,266],
[266,259,313,0,290,286,258,278,307],
[255,265,276,261,0,259,251,280,298],
[284,277,292,265,292,0,255,270,297],
[296,271,314,293,300,296,0,288,312],
[279,267,294,273,271,281,263,0,278],
[263,238,285,244,253,254,239,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,271,265,268,276,274,317,251],
[306,0,252,281,271,298,275,302,268],
[280,299,0,303,269,325,287,303,256],
[286,270,248,0,250,288,255,293,264],
[283,280,282,301,0,302,275,314,281],
[275,253,226,263,249,0,247,290,251],
[277,276,264,296,276,304,0,313,278],
[234,249,248,258,237,261,238,0,251],
[300,283,295,287,270,300,273,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,280,268,277,277,288,263,280],
[271,0,246,244,301,258,272,259,253],
[271,305,0,273,312,295,282,285,277],
[283,307,278,0,295,294,287,282,264],
[274,250,239,256,0,254,255,248,256],
[274,293,256,257,297,0,293,292,282],
[263,279,269,264,296,258,0,273,269],
[288,292,266,269,303,259,278,0,269],
[271,298,274,287,295,269,282,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,268,269,256,260,283,270,256],
[294,0,296,281,269,274,285,274,261],
[283,255,0,254,236,250,273,248,258],
[282,270,297,0,264,287,283,279,270],
[295,282,315,287,0,267,283,277,283],
[291,277,301,264,284,0,275,277,275],
[268,266,278,268,268,276,0,254,274],
[281,277,303,272,274,274,297,0,283],
[295,290,293,281,268,276,277,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,337,287,275,268,307,281,256],
[252,0,350,243,241,266,274,288,288],
[214,201,0,152,205,262,215,243,235],
[264,308,399,0,279,266,278,258,323],
[276,310,346,272,0,232,299,278,289],
[283,285,289,285,319,0,263,310,293],
[244,277,336,273,252,288,0,257,299],
[270,263,308,293,273,241,294,0,268],
[295,263,316,228,262,258,252,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,319,291,290,267,275,262,271],
[299,0,321,289,314,293,284,286,250],
[232,230,0,251,288,249,231,245,276],
[260,262,300,0,308,257,288,279,263],
[261,237,263,243,0,285,266,244,238],
[284,258,302,294,266,0,263,269,268],
[276,267,320,263,285,288,0,272,287],
[289,265,306,272,307,282,279,0,288],
[280,301,275,288,313,283,264,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,246,257,303,286,270,299,237],
[277,0,278,260,283,236,294,273,274],
[305,273,0,260,286,277,313,290,268],
[294,291,291,0,299,271,313,301,277],
[248,268,265,252,0,278,287,255,263],
[265,315,274,280,273,0,288,292,278],
[281,257,238,238,264,263,0,288,253],
[252,278,261,250,296,259,263,0,263],
[314,277,283,274,288,273,298,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,277,263,279,269,279,280,272],
[267,0,259,268,278,261,278,267,260],
[274,292,0,273,291,279,300,280,294],
[288,283,278,0,290,270,278,295,294],
[272,273,260,261,0,249,256,258,262],
[282,290,272,281,302,0,310,273,295],
[272,273,251,273,295,241,0,290,267],
[271,284,271,256,293,278,261,0,270],
[279,291,257,257,289,256,284,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,313,353,272,245,313,296,307],
[254,0,319,304,269,269,280,282,296],
[238,232,0,285,286,256,278,247,275],
[198,247,266,0,240,262,270,257,252],
[279,282,265,311,0,311,327,285,305],
[306,282,295,289,240,0,272,299,325],
[238,271,273,281,224,279,0,254,292],
[255,269,304,294,266,252,297,0,314],
[244,255,276,299,246,226,259,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,268,276,265,285,261,285,275],
[289,0,236,265,238,297,242,305,222],
[283,315,0,295,286,314,258,299,292],
[275,286,256,0,243,283,249,276,247],
[286,313,265,308,0,321,276,315,292],
[266,254,237,268,230,0,242,260,270],
[290,309,293,302,275,309,0,317,289],
[266,246,252,275,236,291,234,0,241],
[276,329,259,304,259,281,262,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,276,264,259,273,263,261],
[271,0,273,278,268,255,255,240,270],
[278,278,0,286,274,265,288,282,289],
[275,273,265,0,260,269,276,268,269],
[287,283,277,291,0,278,278,275,273],
[292,296,286,282,273,0,288,279,287],
[278,296,263,275,273,263,0,282,271],
[288,311,269,283,276,272,269,0,275],
[290,281,262,282,278,264,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,294,253,299,294,279,293,300],
[280,0,266,241,285,272,240,283,266],
[257,285,0,278,277,267,260,258,261],
[298,310,273,0,304,297,279,301,294],
[252,266,274,247,0,276,268,270,263],
[257,279,284,254,275,0,251,265,252],
[272,311,291,272,283,300,0,292,275],
[258,268,293,250,281,286,259,0,258],
[251,285,290,257,288,299,276,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,281,259,283,275,279,252,269],
[292,0,282,297,273,306,286,293,281],
[270,269,0,261,261,267,285,249,259],
[292,254,290,0,266,277,278,253,289],
[268,278,290,285,0,270,277,255,257],
[276,245,284,274,281,0,281,271,266],
[272,265,266,273,274,270,0,250,266],
[299,258,302,298,296,280,301,0,293],
[282,270,292,262,294,285,285,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,274,266,261,262,259,277,274],
[287,0,275,273,276,272,279,284,273],
[277,276,0,287,277,280,278,273,287],
[285,278,264,0,268,254,279,274,285],
[290,275,274,283,0,272,267,265,279],
[289,279,271,297,279,0,300,283,286],
[292,272,273,272,284,251,0,275,280],
[274,267,278,277,286,268,276,0,299],
[277,278,264,266,272,265,271,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,264,264,253,269,257,266,256],
[299,0,281,285,283,275,285,286,270],
[287,270,0,284,270,252,271,273,245],
[287,266,267,0,276,261,264,270,262],
[298,268,281,275,0,271,261,261,268],
[282,276,299,290,280,0,275,268,275],
[294,266,280,287,290,276,0,264,273],
[285,265,278,281,290,283,287,0,277],
[295,281,306,289,283,276,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,292,291,290,299,263,321,302],
[244,0,256,269,270,262,248,270,307],
[259,295,0,274,277,260,264,273,293],
[260,282,277,0,276,253,251,301,301],
[261,281,274,275,0,276,273,295,309],
[252,289,291,298,275,0,284,298,308],
[288,303,287,300,278,267,0,291,304],
[230,281,278,250,256,253,260,0,293],
[249,244,258,250,242,243,247,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,379,335,332,187,262,278,296],
[252,0,383,376,340,258,273,322,325],
[172,168,0,236,186,166,160,221,186],
[216,175,315,0,222,175,208,216,297],
[219,211,365,329,0,200,210,271,237],
[364,293,385,376,351,0,259,338,318],
[289,278,391,343,341,292,0,372,224],
[273,229,330,335,280,213,179,0,250],
[255,226,365,254,314,233,327,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,265,292,292,277,292,291,280],
[269,0,262,277,285,269,277,274,277],
[286,289,0,272,283,285,288,284,277],
[259,274,279,0,290,282,282,276,272],
[259,266,268,261,0,268,267,263,254],
[274,282,266,269,283,0,284,285,273],
[259,274,263,269,284,267,0,278,278],
[260,277,267,275,288,266,273,0,276],
[271,274,274,279,297,278,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,178,206,208,252,225,213,227],
[308,0,226,261,241,265,272,244,309],
[373,325,0,261,265,311,295,266,283],
[345,290,290,0,262,300,272,265,261],
[343,310,286,289,0,255,310,308,264],
[299,286,240,251,296,0,308,254,242],
[326,279,256,279,241,243,0,243,251],
[338,307,285,286,243,297,308,0,302],
[324,242,268,290,287,309,300,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,298,286,277,277,273,319,267],
[294,0,289,303,261,304,288,322,297],
[253,262,0,298,239,263,266,318,256],
[265,248,253,0,227,265,285,296,253],
[274,290,312,324,0,310,306,340,264],
[274,247,288,286,241,0,305,312,269],
[278,263,285,266,245,246,0,297,239],
[232,229,233,255,211,239,254,0,260],
[284,254,295,298,287,282,312,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,292,272,287,266,305,261,275],
[279,0,294,286,316,260,272,281,297],
[259,257,0,261,277,248,250,251,259],
[279,265,290,0,287,252,273,265,260],
[264,235,274,264,0,251,274,272,237],
[285,291,303,299,300,0,298,254,300],
[246,279,301,278,277,253,0,263,284],
[290,270,300,286,279,297,288,0,288],
[276,254,292,291,314,251,267,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,275,292,300,278,294,307],
[271,0,260,261,283,283,267,271,299],
[275,291,0,286,288,303,280,308,308],
[276,290,265,0,274,302,278,277,296],
[259,268,263,277,0,276,269,273,287],
[251,268,248,249,275,0,261,267,302],
[273,284,271,273,282,290,0,287,313],
[257,280,243,274,278,284,264,0,289],
[244,252,243,255,264,249,238,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,244,279,225,280,274,249,257],
[287,0,251,282,244,271,271,231,280],
[307,300,0,280,271,293,280,275,267],
[272,269,271,0,264,270,284,272,268],
[326,307,280,287,0,286,318,281,274],
[271,280,258,281,265,0,259,259,279],
[277,280,271,267,233,292,0,248,295],
[302,320,276,279,270,292,303,0,301],
[294,271,284,283,277,272,256,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,281,286,273,279,293,267,259],
[290,0,278,302,287,275,285,269,271],
[270,273,0,280,281,286,302,277,270],
[265,249,271,0,269,281,292,260,264],
[278,264,270,282,0,262,293,254,282],
[272,276,265,270,289,0,285,258,255],
[258,266,249,259,258,266,0,241,265],
[284,282,274,291,297,293,310,0,286],
[292,280,281,287,269,296,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,260,294,284,280,282,281,255],
[260,0,266,299,268,245,278,307,263],
[291,285,0,274,298,267,288,313,264],
[257,252,277,0,263,237,316,259,295],
[267,283,253,288,0,223,295,283,272],
[271,306,284,314,328,0,327,320,275],
[269,273,263,235,256,224,0,261,285],
[270,244,238,292,268,231,290,0,275],
[296,288,287,256,279,276,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,230,226,220,289,275,310,245],
[224,0,218,201,239,205,239,264,196],
[321,333,0,250,269,252,282,323,275],
[325,350,301,0,241,278,319,318,265],
[331,312,282,310,0,342,287,338,270],
[262,346,299,273,209,0,275,282,294],
[276,312,269,232,264,276,0,253,266],
[241,287,228,233,213,269,298,0,233],
[306,355,276,286,281,257,285,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,255,274,252,263,283,268,270],
[260,0,264,273,267,259,268,270,280],
[296,287,0,263,267,275,281,281,294],
[277,278,288,0,266,276,279,279,279],
[299,284,284,285,0,284,272,294,266],
[288,292,276,275,267,0,275,285,287],
[268,283,270,272,279,276,0,278,279],
[283,281,270,272,257,266,273,0,260],
[281,271,257,272,285,264,272,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,305,252,284,274,283,271,327],
[289,0,316,263,310,312,279,276,296],
[246,235,0,241,237,236,240,230,273],
[299,288,310,0,284,295,276,239,328],
[267,241,314,267,0,299,224,201,290],
[277,239,315,256,252,0,285,246,334],
[268,272,311,275,327,266,0,266,312],
[280,275,321,312,350,305,285,0,350],
[224,255,278,223,261,217,239,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,233,271,285,253,270,213,262],
[339,0,304,313,269,343,298,321,321],
[318,247,0,318,314,268,328,320,277],
[280,238,233,0,277,281,302,277,269],
[266,282,237,274,0,258,288,270,310],
[298,208,283,270,293,0,289,312,261],
[281,253,223,249,263,262,0,329,293],
[338,230,231,274,281,239,222,0,252],
[289,230,274,282,241,290,258,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,257,286,325,280,255,257,297],
[256,0,302,281,332,227,226,296,244],
[294,249,0,322,321,244,172,230,276],
[265,270,229,0,211,236,248,255,323],
[226,219,230,340,0,253,254,265,307],
[271,324,307,315,298,0,293,297,298],
[296,325,379,303,297,258,0,284,285],
[294,255,321,296,286,254,267,0,294],
[254,307,275,228,244,253,266,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,294,283,288,274,264,266,285],
[280,0,294,268,274,269,259,274,288],
[257,257,0,259,284,274,278,278,280],
[268,283,292,0,274,272,252,266,276],
[263,277,267,277,0,283,276,283,282],
[277,282,277,279,268,0,267,279,289],
[287,292,273,299,275,284,0,292,297],
[285,277,273,285,268,272,259,0,276],
[266,263,271,275,269,262,254,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,276,273,309,293,286,302],
[272,0,290,259,282,278,280,276,283],
[264,261,0,251,272,266,282,270,288],
[275,292,300,0,285,293,286,271,294],
[278,269,279,266,0,295,288,270,289],
[242,273,285,258,256,0,286,260,277],
[258,271,269,265,263,265,0,259,265],
[265,275,281,280,281,291,292,0,291],
[249,268,263,257,262,274,286,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,284,303,303,275,273,284,295],
[237,0,249,279,280,262,256,249,257],
[267,302,0,286,285,254,273,260,274],
[248,272,265,0,276,250,253,256,259],
[248,271,266,275,0,254,267,246,278],
[276,289,297,301,297,0,276,271,271],
[278,295,278,298,284,275,0,261,276],
[267,302,291,295,305,280,290,0,296],
[256,294,277,292,273,280,275,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,280,287,318,286,267,305,310],
[264,0,254,286,308,295,259,275,308],
[271,297,0,294,307,283,299,322,321],
[264,265,257,0,299,280,272,285,297],
[233,243,244,252,0,258,249,262,269],
[265,256,268,271,293,0,273,282,308],
[284,292,252,279,302,278,0,296,289],
[246,276,229,266,289,269,255,0,285],
[241,243,230,254,282,243,262,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,332,301,313,307,332,340,282],
[286,0,312,286,341,330,355,299,271],
[219,239,0,258,244,309,323,290,226],
[250,265,293,0,289,311,335,295,266],
[238,210,307,262,0,302,286,255,245],
[244,221,242,240,249,0,295,256,244],
[219,196,228,216,265,256,0,256,209],
[211,252,261,256,296,295,295,0,261],
[269,280,325,285,306,307,342,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,281,286,306,285,279,269,285],
[256,0,267,275,275,267,275,248,282],
[270,284,0,273,291,265,265,280,282],
[265,276,278,0,264,274,282,251,281],
[245,276,260,287,0,268,264,250,267],
[266,284,286,277,283,0,274,258,283],
[272,276,286,269,287,277,0,263,279],
[282,303,271,300,301,293,288,0,285],
[266,269,269,270,284,268,272,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,248,293,258,268,259,242,255],
[285,0,281,297,279,260,263,254,289],
[303,270,0,298,305,301,263,250,286],
[258,254,253,0,257,262,268,243,258],
[293,272,246,294,0,265,262,254,272],
[283,291,250,289,286,0,284,279,271],
[292,288,288,283,289,267,0,276,276],
[309,297,301,308,297,272,275,0,280],
[296,262,265,293,279,280,275,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,285,271,244,281,210,304,246],
[306,0,282,305,275,331,241,277,289],
[266,269,0,276,278,275,277,256,266],
[280,246,275,0,231,325,234,261,235],
[307,276,273,320,0,286,273,307,287],
[270,220,276,226,265,0,231,276,263],
[341,310,274,317,278,320,0,321,298],
[247,274,295,290,244,275,230,0,270],
[305,262,285,316,264,288,253,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,271,271,264,250,270,296,262],
[290,0,304,288,271,282,294,303,273],
[280,247,0,278,267,272,269,290,246],
[280,263,273,0,268,274,268,283,267],
[287,280,284,283,0,268,287,307,289],
[301,269,279,277,283,0,287,289,275],
[281,257,282,283,264,264,0,296,273],
[255,248,261,268,244,262,255,0,246],
[289,278,305,284,262,276,278,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,247,276,269,243,258,263,261],
[276,0,268,283,277,291,276,261,276],
[304,283,0,286,290,281,269,291,286],
[275,268,265,0,278,278,244,274,264],
[282,274,261,273,0,265,255,276,255],
[308,260,270,273,286,0,280,283,283],
[293,275,282,307,296,271,0,282,273],
[288,290,260,277,275,268,269,0,279],
[290,275,265,287,296,268,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,271,274,274,276,286,267],
[276,0,280,279,265,283,268,271,275],
[274,271,0,261,267,273,257,271,256],
[280,272,290,0,286,293,280,275,268],
[277,286,284,265,0,285,281,273,283],
[277,268,278,258,266,0,276,261,260],
[275,283,294,271,270,275,0,280,266],
[265,280,280,276,278,290,271,0,281],
[284,276,295,283,268,291,285,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,281,278,274,289,276,265,279],
[287,0,301,273,286,277,271,269,281],
[270,250,0,258,259,278,261,248,280],
[273,278,293,0,275,283,269,286,280],
[277,265,292,276,0,272,269,281,289],
[262,274,273,268,279,0,266,280,281],
[275,280,290,282,282,285,0,268,293],
[286,282,303,265,270,271,283,0,296],
[272,270,271,271,262,270,258,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,314,369,369,458,297,382,155],
[307,0,242,221,390,475,297,214,314],
[237,309,0,293,392,316,138,303,223],
[182,330,258,0,392,309,176,237,337],
[182,161,159,159,0,309,7,248,79],
[93,76,235,242,242,0,83,159,155],
[254,254,413,375,544,468,0,375,168],
[169,337,248,314,303,392,176,0,155],
[396,237,328,214,472,396,383,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,283,283,269,277,293,275,268],
[278,0,269,294,276,264,279,269,274],
[268,282,0,273,273,263,282,273,266],
[268,257,278,0,259,268,284,288,260],
[282,275,278,292,0,286,277,282,279],
[274,287,288,283,265,0,288,285,269],
[258,272,269,267,274,263,0,276,263],
[276,282,278,263,269,266,275,0,257],
[283,277,285,291,272,282,288,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,271,268,270,265,259,279],
[282,0,264,286,271,270,282,263,272],
[265,287,0,276,271,269,247,260,263],
[280,265,275,0,288,266,277,264,257],
[283,280,280,263,0,270,283,267,272],
[281,281,282,285,281,0,281,274,277],
[286,269,304,274,268,270,0,263,282],
[292,288,291,287,284,277,288,0,273],
[272,279,288,294,279,274,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,256,261,237,288,297,241,188],
[294,0,289,288,283,289,285,259,255],
[295,262,0,308,280,295,322,280,243],
[290,263,243,0,300,309,353,281,266],
[314,268,271,251,0,326,330,255,254],
[263,262,256,242,225,0,258,189,219],
[254,266,229,198,221,293,0,243,193],
[310,292,271,270,296,362,308,0,280],
[363,296,308,285,297,332,358,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,244,258,345,332,348,287,231],
[288,0,262,319,348,340,328,358,246],
[307,289,0,252,313,262,317,293,276],
[293,232,299,0,315,341,298,336,242],
[206,203,238,236,0,252,312,349,252],
[219,211,289,210,299,0,287,281,240],
[203,223,234,253,239,264,0,256,272],
[264,193,258,215,202,270,295,0,302],
[320,305,275,309,299,311,279,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,259,255,259,256,275,272,268],
[273,0,282,269,270,250,278,277,275],
[292,269,0,257,264,257,289,266,261],
[296,282,294,0,279,263,287,289,272],
[292,281,287,272,0,282,298,268,286],
[295,301,294,288,269,0,290,278,290],
[276,273,262,264,253,261,0,260,269],
[279,274,285,262,283,273,291,0,284],
[283,276,290,279,265,261,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,307,301,291,266,314,285,287],
[249,0,289,289,288,272,296,245,284],
[244,262,0,275,245,235,259,239,256],
[250,262,276,0,269,231,270,243,247],
[260,263,306,282,0,275,283,269,261],
[285,279,316,320,276,0,285,270,283],
[237,255,292,281,268,266,0,251,257],
[266,306,312,308,282,281,300,0,261],
[264,267,295,304,290,268,294,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,285,281,260,267,249,253,261],
[272,0,284,271,288,285,270,286,254],
[266,267,0,272,270,266,259,251,250],
[270,280,279,0,269,270,259,264,253],
[291,263,281,282,0,273,278,255,264],
[284,266,285,281,278,0,281,278,255],
[302,281,292,292,273,270,0,282,267],
[298,265,300,287,296,273,269,0,277],
[290,297,301,298,287,296,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,259,270,277,242,278,290,249],
[282,0,258,257,286,233,290,255,265],
[292,293,0,291,284,268,284,269,258],
[281,294,260,0,286,277,290,267,279],
[274,265,267,265,0,263,282,249,262],
[309,318,283,274,288,0,287,269,287],
[273,261,267,261,269,264,0,256,249],
[261,296,282,284,302,282,295,0,274],
[302,286,293,272,289,264,302,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,277,272,259,304,296,255,278],
[268,0,284,301,283,306,281,274,276],
[274,267,0,264,252,281,258,250,256],
[279,250,287,0,272,283,283,278,280],
[292,268,299,279,0,278,292,261,261],
[247,245,270,268,273,0,266,243,286],
[255,270,293,268,259,285,0,262,278],
[296,277,301,273,290,308,289,0,307],
[273,275,295,271,290,265,273,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,320,290,287,250,289,283,280],
[229,0,275,271,215,246,276,266,263],
[231,276,0,258,256,251,248,252,249],
[261,280,293,0,258,259,268,257,261],
[264,336,295,293,0,269,256,289,247],
[301,305,300,292,282,0,273,235,270],
[262,275,303,283,295,278,0,242,251],
[268,285,299,294,262,316,309,0,277],
[271,288,302,290,304,281,300,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,257,275,250,261,259,260,259],
[302,0,298,310,290,298,270,298,287],
[294,253,0,291,289,262,278,294,285],
[276,241,260,0,257,269,271,262,268],
[301,261,262,294,0,289,281,269,289],
[290,253,289,282,262,0,264,277,257],
[292,281,273,280,270,287,0,275,269],
[291,253,257,289,282,274,276,0,303],
[292,264,266,283,262,294,282,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,255,258,261,262,243,278,242],
[281,0,256,260,291,275,257,299,250],
[296,295,0,292,284,286,242,268,260],
[293,291,259,0,290,302,259,283,272],
[290,260,267,261,0,263,233,270,249],
[289,276,265,249,288,0,257,292,243],
[308,294,309,292,318,294,0,274,291],
[273,252,283,268,281,259,277,0,266],
[309,301,291,279,302,308,260,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,282,272,282,288,272,290,292],
[267,0,279,275,259,299,283,273,280],
[269,272,0,280,276,268,275,274,292],
[279,276,271,0,278,282,267,285,284],
[269,292,275,273,0,295,280,292,279],
[263,252,283,269,256,0,278,279,283],
[279,268,276,284,271,273,0,276,281],
[261,278,277,266,259,272,275,0,286],
[259,271,259,267,272,268,270,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,325,264,305,338,275,268,312],
[217,0,276,208,213,210,220,231,231],
[226,275,0,244,269,284,263,302,266],
[287,343,307,0,285,313,282,302,265],
[246,338,282,266,0,279,248,251,257],
[213,341,267,238,272,0,262,251,259],
[276,331,288,269,303,289,0,272,284],
[283,320,249,249,300,300,279,0,284],
[239,320,285,286,294,292,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,264,283,277,261,269,275,279],
[287,0,276,280,281,277,277,271,282],
[287,275,0,295,288,264,283,274,286],
[268,271,256,0,283,248,276,266,283],
[274,270,263,268,0,253,271,271,269],
[290,274,287,303,298,0,300,289,298],
[282,274,268,275,280,251,0,273,286],
[276,280,277,285,280,262,278,0,270],
[272,269,265,268,282,253,265,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,282,281,282,274,278,285,278],
[261,0,284,271,278,272,268,275,302],
[269,267,0,269,273,305,268,273,264],
[270,280,282,0,257,279,275,283,272],
[269,273,278,294,0,281,296,297,275],
[277,279,246,272,270,0,269,280,274],
[273,283,283,276,255,282,0,269,282],
[266,276,278,268,254,271,282,0,261],
[273,249,287,279,276,277,269,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,247,240,288,290,228,309,238],
[293,0,277,263,300,278,237,276,243],
[304,274,0,262,295,274,293,314,295],
[311,288,289,0,300,288,268,322,271],
[263,251,256,251,0,251,256,287,256],
[261,273,277,263,300,0,247,306,256],
[323,314,258,283,295,304,0,310,283],
[242,275,237,229,264,245,241,0,260],
[313,308,256,280,295,295,268,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,268,276,275,283,264,275,267],
[268,0,267,270,279,275,261,272,259],
[283,284,0,272,272,286,277,287,281],
[275,281,279,0,281,280,270,278,270],
[276,272,279,270,0,268,263,278,264],
[268,276,265,271,283,0,265,282,271],
[287,290,274,281,288,286,0,290,285],
[276,279,264,273,273,269,261,0,256],
[284,292,270,281,287,280,266,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,307,238,244,204,261,278,193],
[255,0,264,206,269,250,213,184,167],
[244,287,0,234,202,232,253,229,238],
[313,345,317,0,296,317,314,269,324],
[307,282,349,255,0,213,334,284,253],
[347,301,319,234,338,0,279,272,265],
[290,338,298,237,217,272,0,224,188],
[273,367,322,282,267,279,327,0,248],
[358,384,313,227,298,286,363,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,300,309,270,258,259,270,277],
[258,0,299,275,276,270,289,290,277],
[251,252,0,224,265,214,259,257,246],
[242,276,327,0,252,239,256,250,257],
[281,275,286,299,0,268,258,250,294],
[293,281,337,312,283,0,263,282,284],
[292,262,292,295,293,288,0,252,243],
[281,261,294,301,301,269,299,0,273],
[274,274,305,294,257,267,308,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,277,286,283,294,253,308,267],
[260,0,270,253,235,281,259,262,268],
[274,281,0,283,258,288,273,296,237],
[265,298,268,0,297,302,287,300,283],
[268,316,293,254,0,293,278,302,265],
[257,270,263,249,258,0,289,266,260],
[298,292,278,264,273,262,0,281,243],
[243,289,255,251,249,285,270,0,235],
[284,283,314,268,286,291,308,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,278,267,296,278,258,265,274],
[304,0,272,251,280,286,280,291,271],
[273,279,0,251,276,278,273,259,262],
[284,300,300,0,299,295,270,299,273],
[255,271,275,252,0,267,281,271,262],
[273,265,273,256,284,0,270,269,252],
[293,271,278,281,270,281,0,278,283],
[286,260,292,252,280,282,273,0,276],
[277,280,289,278,289,299,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,277,271,285,281,277,284,273],
[261,0,245,260,255,267,270,259,266],
[274,306,0,283,284,286,305,283,297],
[280,291,268,0,266,273,282,269,271],
[266,296,267,285,0,253,293,277,284],
[270,284,265,278,298,0,292,307,299],
[274,281,246,269,258,259,0,282,271],
[267,292,268,282,274,244,269,0,256],
[278,285,254,280,267,252,280,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,250,300,261,243,232,278],
[286,0,291,275,286,297,257,247,327],
[270,260,0,256,274,278,269,272,299],
[301,276,295,0,310,278,302,270,336],
[251,265,277,241,0,233,243,202,281],
[290,254,273,273,318,0,237,272,264],
[308,294,282,249,308,314,0,276,305],
[319,304,279,281,349,279,275,0,304],
[273,224,252,215,270,287,246,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,284,282,303,293,287,284,270],
[272,0,281,275,281,285,278,277,266],
[267,270,0,281,272,274,267,261,265],
[269,276,270,0,274,286,274,291,290],
[248,270,279,277,0,276,268,279,288],
[258,266,277,265,275,0,274,271,276],
[264,273,284,277,283,277,0,302,288],
[267,274,290,260,272,280,249,0,271],
[281,285,286,261,263,275,263,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,290,269,268,310,264,272,265],
[289,0,299,270,295,297,284,294,285],
[261,252,0,236,255,285,253,238,264],
[282,281,315,0,275,308,288,267,284],
[283,256,296,276,0,269,288,263,278],
[241,254,266,243,282,0,267,244,256],
[287,267,298,263,263,284,0,261,270],
[279,257,313,284,288,307,290,0,296],
[286,266,287,267,273,295,281,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,339,309,297,401,237,321,329,333],
[212,0,238,230,310,224,250,225,240],
[242,313,0,278,319,260,278,247,270],
[254,321,273,0,324,234,275,241,273],
[150,241,232,227,0,191,228,194,219],
[314,327,291,317,360,0,316,284,258],
[230,301,273,276,323,235,0,273,252],
[222,326,304,310,357,267,278,0,285],
[218,311,281,278,332,293,299,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,262,259,264,264,271,259,255],
[295,0,269,295,287,284,297,302,286],
[289,282,0,265,288,280,279,272,278],
[292,256,286,0,284,275,276,291,288],
[287,264,263,267,0,259,286,242,262],
[287,267,271,276,292,0,282,272,263],
[280,254,272,275,265,269,0,255,252],
[292,249,279,260,309,279,296,0,279],
[296,265,273,263,289,288,299,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,143,220,190,212,194,211,181],
[273,0,227,394,258,314,326,279,239],
[408,324,0,374,353,278,401,399,234],
[331,157,177,0,185,278,110,244,194],
[361,293,198,366,0,264,302,286,325],
[339,237,273,273,287,0,316,262,297],
[357,225,150,441,249,235,0,270,166],
[340,272,152,307,265,289,281,0,171],
[370,312,317,357,226,254,385,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,307,268,295,250,281,265,241],
[274,0,265,287,236,213,241,237,240],
[244,286,0,288,249,218,224,304,250],
[283,264,263,0,287,263,273,302,303],
[256,315,302,264,0,227,235,254,249],
[301,338,333,288,324,0,274,330,303],
[270,310,327,278,316,277,0,311,273],
[286,314,247,249,297,221,240,0,189],
[310,311,301,248,302,248,278,362,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,280,284,278,273,278,291,277],
[260,0,273,276,277,270,242,278,275],
[271,278,0,293,273,288,275,289,300],
[267,275,258,0,273,270,280,276,278],
[273,274,278,278,0,294,281,299,275],
[278,281,263,281,257,0,296,303,275],
[273,309,276,271,270,255,0,280,277],
[260,273,262,275,252,248,271,0,260],
[274,276,251,273,276,276,274,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,310,294,274,273,298,282,271],
[249,0,292,285,280,274,281,282,267],
[241,259,0,276,257,246,265,249,251],
[257,266,275,0,271,269,268,249,255],
[277,271,294,280,0,272,282,270,285],
[278,277,305,282,279,0,282,274,283],
[253,270,286,283,269,269,0,282,252],
[269,269,302,302,281,277,269,0,268],
[280,284,300,296,266,268,299,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,85,135,189,184,302,189],
[369,0,160,190,259,379,249,341,369],
[381,391,0,249,325,259,249,541,369],
[466,361,302,0,175,410,409,407,334],
[416,292,226,376,0,311,350,407,310],
[362,172,292,141,240,0,181,292,261],
[367,302,302,142,201,370,0,302,304],
[249,210,10,144,144,259,249,0,369],
[362,182,182,217,241,290,247,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,263,309,304,275,294,309,279],
[262,0,266,274,254,257,273,281,265],
[288,285,0,282,294,257,292,298,310],
[242,277,269,0,292,266,263,284,267],
[247,297,257,259,0,246,264,274,282],
[276,294,294,285,305,0,274,300,285],
[257,278,259,288,287,277,0,312,304],
[242,270,253,267,277,251,239,0,274],
[272,286,241,284,269,266,247,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,291,280,322,290,282,272,271],
[265,0,274,292,271,284,285,281,297],
[260,277,0,290,313,261,270,319,264],
[271,259,261,0,337,276,287,295,268],
[229,280,238,214,0,245,233,210,235],
[261,267,290,275,306,0,281,273,289],
[269,266,281,264,318,270,0,248,208],
[279,270,232,256,341,278,303,0,271],
[280,254,287,283,316,262,343,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,270,260,270,283,266,296,274],
[305,0,294,265,295,315,288,317,284],
[281,257,0,286,266,267,273,275,256],
[291,286,265,0,292,276,288,284,262],
[281,256,285,259,0,266,258,283,265],
[268,236,284,275,285,0,261,298,255],
[285,263,278,263,293,290,0,299,262],
[255,234,276,267,268,253,252,0,254],
[277,267,295,289,286,296,289,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,289,284,305,298,272,232,301],
[276,0,288,291,271,251,265,283,302],
[262,263,0,271,289,258,289,260,276],
[267,260,280,0,275,275,230,252,300],
[246,280,262,276,0,273,258,270,311],
[253,300,293,276,278,0,281,269,314],
[279,286,262,321,293,270,0,297,293],
[319,268,291,299,281,282,254,0,300],
[250,249,275,251,240,237,258,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,243,241,260,276,234,244,271],
[306,0,284,278,290,293,273,272,295],
[308,267,0,263,282,280,292,280,291],
[310,273,288,0,298,287,266,259,283],
[291,261,269,253,0,279,271,237,277],
[275,258,271,264,272,0,255,269,265],
[317,278,259,285,280,296,0,269,269],
[307,279,271,292,314,282,282,0,303],
[280,256,260,268,274,286,282,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,281,279,299,270,289,298,284],
[226,0,222,245,250,256,274,256,246],
[270,329,0,276,270,279,288,285,299],
[272,306,275,0,285,295,272,271,279],
[252,301,281,266,0,282,293,266,287],
[281,295,272,256,269,0,274,279,261],
[262,277,263,279,258,277,0,250,254],
[253,295,266,280,285,272,301,0,285],
[267,305,252,272,264,290,297,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,265,266,268,283,257,275,279],
[270,0,266,267,279,281,270,270,271],
[286,285,0,259,279,291,262,281,290],
[285,284,292,0,280,281,276,275,274],
[283,272,272,271,0,277,254,263,269],
[268,270,260,270,274,0,256,268,271],
[294,281,289,275,297,295,0,286,284],
[276,281,270,276,288,283,265,0,281],
[272,280,261,277,282,280,267,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,289,304,282,241,247,269,281],
[277,0,267,305,281,262,240,262,244],
[262,284,0,289,266,250,239,272,269],
[247,246,262,0,216,244,228,236,265],
[269,270,285,335,0,257,253,249,283],
[310,289,301,307,294,0,272,286,318],
[304,311,312,323,298,279,0,264,311],
[282,289,279,315,302,265,287,0,301],
[270,307,282,286,268,233,240,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,265,315,305,319,288,279,316],
[249,0,208,226,214,255,240,272,292],
[286,343,0,317,274,306,304,305,329],
[236,325,234,0,260,286,270,333,314],
[246,337,277,291,0,290,260,325,306],
[232,296,245,265,261,0,262,307,268],
[263,311,247,281,291,289,0,332,315],
[272,279,246,218,226,244,219,0,272],
[235,259,222,237,245,283,236,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,347,295,326,435,422,244,340],
[83,0,284,246,160,349,219,77,184],
[204,267,0,163,227,258,224,142,142],
[256,305,388,0,263,443,352,270,369],
[225,391,324,288,0,439,384,281,234],
[116,202,293,108,112,0,158,99,271],
[129,332,327,199,167,393,0,143,176],
[307,474,409,281,270,452,408,0,287],
[211,367,409,182,317,280,375,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,290,264,264,250,273,286,254],
[277,0,283,289,272,284,273,303,254],
[261,268,0,269,236,267,257,286,243],
[287,262,282,0,256,267,269,264,251],
[287,279,315,295,0,282,300,315,270],
[301,267,284,284,269,0,289,299,265],
[278,278,294,282,251,262,0,282,278],
[265,248,265,287,236,252,269,0,241],
[297,297,308,300,281,286,273,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,283,284,285,275,257,256],
[280,0,243,287,248,259,259,252,266],
[280,308,0,270,320,313,299,286,285],
[268,264,281,0,295,285,278,258,268],
[267,303,231,256,0,293,268,274,269],
[266,292,238,266,258,0,260,247,257],
[276,292,252,273,283,291,0,261,255],
[294,299,265,293,277,304,290,0,261],
[295,285,266,283,282,294,296,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,289,320,317,309,302,268,292],
[271,0,280,272,305,302,259,295,282],
[262,271,0,262,292,310,289,288,272],
[231,279,289,0,290,310,302,266,252],
[234,246,259,261,0,304,275,258,281],
[242,249,241,241,247,0,256,224,270],
[249,292,262,249,276,295,0,236,281],
[283,256,263,285,293,327,315,0,295],
[259,269,279,299,270,281,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,296,270,277,278,247,277,249],
[283,0,269,276,259,258,259,267,259],
[255,282,0,296,273,274,261,256,289],
[281,275,255,0,291,287,260,280,252],
[274,292,278,260,0,256,258,250,266],
[273,293,277,264,295,0,268,262,263],
[304,292,290,291,293,283,0,299,267],
[274,284,295,271,301,289,252,0,267],
[302,292,262,299,285,288,284,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,289,267,284,302,281,277,280],
[280,0,297,260,279,271,289,263,291],
[262,254,0,261,261,265,278,252,275],
[284,291,290,0,278,284,274,264,296],
[267,272,290,273,0,279,264,280,295],
[249,280,286,267,272,0,260,280,272],
[270,262,273,277,287,291,0,264,278],
[274,288,299,287,271,271,287,0,301],
[271,260,276,255,256,279,273,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,283,292,292,308,274,283,281],
[247,0,284,265,265,264,263,267,255],
[268,267,0,282,261,265,264,279,244],
[259,286,269,0,266,288,244,272,250],
[259,286,290,285,0,280,263,262,259],
[243,287,286,263,271,0,250,279,251],
[277,288,287,307,288,301,0,289,262],
[268,284,272,279,289,272,262,0,266],
[270,296,307,301,292,300,289,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,250,279,277,290,292,290,259],
[298,0,279,301,258,299,283,251,299],
[301,272,0,299,273,311,283,266,322],
[272,250,252,0,279,295,295,220,288],
[274,293,278,272,0,271,270,276,300],
[261,252,240,256,280,0,259,257,260],
[259,268,268,256,281,292,0,274,287],
[261,300,285,331,275,294,277,0,299],
[292,252,229,263,251,291,264,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,294,316,305,335,298,342,247],
[239,0,260,278,211,264,277,253,237],
[257,291,0,299,246,231,271,308,224],
[235,273,252,0,239,244,248,260,215],
[246,340,305,312,0,271,296,280,281],
[216,287,320,307,280,0,293,256,234],
[253,274,280,303,255,258,0,291,259],
[209,298,243,291,271,295,260,0,240],
[304,314,327,336,270,317,292,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,257,276,276,267,275,279],
[284,0,279,271,295,270,287,292,305],
[275,272,0,253,289,281,267,299,290],
[294,280,298,0,303,264,293,293,299],
[275,256,262,248,0,252,247,256,271],
[275,281,270,287,299,0,263,288,286],
[284,264,284,258,304,288,0,286,296],
[276,259,252,258,295,263,265,0,272],
[272,246,261,252,280,265,255,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,283,281,266,286,280,291,283],
[265,0,290,257,265,278,269,281,249],
[268,261,0,267,265,270,281,279,264],
[270,294,284,0,275,281,288,278,270],
[285,286,286,276,0,286,273,286,267],
[265,273,281,270,265,0,263,286,269],
[271,282,270,263,278,288,0,294,272],
[260,270,272,273,265,265,257,0,262],
[268,302,287,281,284,282,279,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,293,276,260,287,269,275,282],
[263,0,281,272,275,264,264,265,250],
[258,270,0,253,254,251,234,259,262],
[275,279,298,0,291,274,295,300,269],
[291,276,297,260,0,264,247,269,242],
[264,287,300,277,287,0,267,274,259],
[282,287,317,256,304,284,0,285,274],
[276,286,292,251,282,277,266,0,260],
[269,301,289,282,309,292,277,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,248,262,286,271,247,273,264],
[282,0,283,251,275,279,265,265,276],
[303,268,0,286,287,279,278,271,306],
[289,300,265,0,298,300,282,268,281],
[265,276,264,253,0,289,258,277,278],
[280,272,272,251,262,0,250,247,270],
[304,286,273,269,293,301,0,288,301],
[278,286,280,283,274,304,263,0,294],
[287,275,245,270,273,281,250,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,268,282,281,312,267,261,298],
[250,0,252,256,268,278,265,232,268],
[283,299,0,277,271,309,290,276,286],
[269,295,274,0,287,298,267,282,290],
[270,283,280,264,0,306,291,266,293],
[239,273,242,253,245,0,222,245,258],
[284,286,261,284,260,329,0,267,274],
[290,319,275,269,285,306,284,0,315],
[253,283,265,261,258,293,277,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,250,275,281,266,238,263,272],
[299,0,272,296,318,286,275,286,289],
[301,279,0,280,289,263,282,298,304],
[276,255,271,0,310,267,242,285,294],
[270,233,262,241,0,210,253,264,250],
[285,265,288,284,341,0,273,273,293],
[313,276,269,309,298,278,0,306,305],
[288,265,253,266,287,278,245,0,290],
[279,262,247,257,301,258,246,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,279,293,272,272,284,290,284],
[269,0,283,285,269,287,271,283,288],
[272,268,0,282,268,282,279,278,292],
[258,266,269,0,281,264,271,277,285],
[279,282,283,270,0,296,278,281,305],
[279,264,269,287,255,0,274,262,285],
[267,280,272,280,273,277,0,262,280],
[261,268,273,274,270,289,289,0,287],
[267,263,259,266,246,266,271,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,257,268,270,281,260,256],
[267,0,257,261,245,265,253,235,259],
[277,294,0,270,269,274,263,247,260],
[294,290,281,0,278,277,272,266,279],
[283,306,282,273,0,307,292,283,271],
[281,286,277,274,244,0,252,261,255],
[270,298,288,279,259,299,0,255,269],
[291,316,304,285,268,290,296,0,267],
[295,292,291,272,280,296,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,273,278,192,278,242,281],
[270,0,285,287,297,242,293,265,282],
[270,266,0,267,299,231,291,250,285],
[278,264,284,0,292,242,285,276,278],
[273,254,252,259,0,251,267,241,276],
[359,309,320,309,300,0,272,302,309],
[273,258,260,266,284,279,0,235,277],
[309,286,301,275,310,249,316,0,279],
[270,269,266,273,275,242,274,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,277,275,294,322,300,287,288],
[255,0,255,261,274,292,287,265,265],
[274,296,0,281,312,301,283,265,278],
[276,290,270,0,288,292,273,290,271],
[257,277,239,263,0,300,267,264,285],
[229,259,250,259,251,0,269,235,247],
[251,264,268,278,284,282,0,257,267],
[264,286,286,261,287,316,294,0,255],
[263,286,273,280,266,304,284,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,263,271,264,286,296,267,267],
[301,0,278,293,256,304,289,268,274],
[288,273,0,276,258,294,304,273,284],
[280,258,275,0,253,271,313,270,255],
[287,295,293,298,0,302,307,281,266],
[265,247,257,280,249,0,292,252,274],
[255,262,247,238,244,259,0,262,260],
[284,283,278,281,270,299,289,0,265],
[284,277,267,296,285,277,291,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,280,273,252,278,274,275,278],
[271,0,277,278,286,271,281,282,281],
[271,274,0,280,258,269,283,280,289],
[278,273,271,0,271,272,267,279,272],
[299,265,293,280,0,271,288,295,300],
[273,280,282,279,280,0,278,291,288],
[277,270,268,284,263,273,0,275,269],
[276,269,271,272,256,260,276,0,279],
[273,270,262,279,251,263,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,245,255,229,270,264,254,324],
[264,0,277,253,260,282,260,259,318],
[306,274,0,268,273,256,258,256,328],
[296,298,283,0,270,300,292,280,317],
[322,291,278,281,0,299,273,293,323],
[281,269,295,251,252,0,267,257,309],
[287,291,293,259,278,284,0,267,318],
[297,292,295,271,258,294,284,0,334],
[227,233,223,234,228,242,233,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,252,251,260,292,257,266,279],
[291,0,283,251,263,293,263,272,288],
[299,268,0,247,287,290,259,274,263],
[300,300,304,0,293,308,288,270,331],
[291,288,264,258,0,290,282,263,272],
[259,258,261,243,261,0,237,267,269],
[294,288,292,263,269,314,0,276,295],
[285,279,277,281,288,284,275,0,269],
[272,263,288,220,279,282,256,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,282,266,304,275,271,302,251],
[245,0,263,273,265,267,298,283,257],
[269,288,0,264,278,293,286,272,256],
[285,278,287,0,275,289,288,302,283],
[247,286,273,276,0,292,272,287,273],
[276,284,258,262,259,0,268,268,255],
[280,253,265,263,279,283,0,266,252],
[249,268,279,249,264,283,285,0,271],
[300,294,295,268,278,296,299,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,267,281,287,290,276,260,290],
[262,0,260,277,279,277,268,259,278],
[284,291,0,278,291,293,276,271,287],
[270,274,273,0,294,301,280,276,288],
[264,272,260,257,0,266,255,269,274],
[261,274,258,250,285,0,268,258,276],
[275,283,275,271,296,283,0,247,290],
[291,292,280,275,282,293,304,0,291],
[261,273,264,263,277,275,261,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,387,254,323,277,291,359,208],
[256,0,335,349,233,304,238,311,223],
[164,216,0,237,193,188,228,280,228],
[297,202,314,0,331,287,231,324,218],
[228,318,358,220,0,257,263,340,288],
[274,247,363,264,294,0,271,369,246],
[260,313,323,320,288,280,0,267,298],
[192,240,271,227,211,182,284,0,248],
[343,328,323,333,263,305,253,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,282,286,298,300,311,304,275],
[253,0,269,252,255,280,289,257,253],
[269,282,0,263,281,275,287,280,258],
[265,299,288,0,303,289,288,274,280],
[253,296,270,248,0,275,299,264,268],
[251,271,276,262,276,0,303,293,283],
[240,262,264,263,252,248,0,287,256],
[247,294,271,277,287,258,264,0,244],
[276,298,293,271,283,268,295,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,263,293,282,284,275,295,282],
[249,0,256,266,280,240,279,257,279],
[288,295,0,303,268,284,279,283,278],
[258,285,248,0,264,279,249,275,271],
[269,271,283,287,0,278,294,264,298],
[267,311,267,272,273,0,272,291,293],
[276,272,272,302,257,279,0,289,297],
[256,294,268,276,287,260,262,0,275],
[269,272,273,280,253,258,254,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,280,275,281,275,258,271,262],
[293,0,273,294,300,278,289,273,281],
[271,278,0,288,289,267,278,269,271],
[276,257,263,0,293,264,277,269,277],
[270,251,262,258,0,268,267,264,267],
[276,273,284,287,283,0,293,260,276],
[293,262,273,274,284,258,0,269,266],
[280,278,282,282,287,291,282,0,275],
[289,270,280,274,284,275,285,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,284,266,269,286,283,278,266],
[261,0,263,280,255,274,272,277,251],
[267,288,0,265,257,277,269,273,265],
[285,271,286,0,260,298,264,288,274],
[282,296,294,291,0,290,274,292,284],
[265,277,274,253,261,0,298,294,263],
[268,279,282,287,277,253,0,279,276],
[273,274,278,263,259,257,272,0,268],
[285,300,286,277,267,288,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,278,266,277,288,279,288],
[274,0,275,285,265,282,261,272,279],
[279,276,0,276,273,271,280,278,278],
[273,266,275,0,265,271,255,268,260],
[285,286,278,286,0,276,267,280,277],
[274,269,280,280,275,0,271,281,287],
[263,290,271,296,284,280,0,279,298],
[272,279,273,283,271,270,272,0,273],
[263,272,273,291,274,264,253,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,277,271,257,286,269,268,282],
[281,0,285,283,286,284,281,273,301],
[274,266,0,269,276,281,257,285,270],
[280,268,282,0,282,282,277,280,291],
[294,265,275,269,0,304,287,274,288],
[265,267,270,269,247,0,256,257,273],
[282,270,294,274,264,295,0,297,292],
[283,278,266,271,277,294,254,0,291],
[269,250,281,260,263,278,259,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,305,292,286,300,272,311,298],
[270,0,285,261,286,277,261,285,282],
[246,266,0,273,269,274,273,275,299],
[259,290,278,0,277,263,278,292,281],
[265,265,282,274,0,266,280,302,303],
[251,274,277,288,285,0,296,283,271],
[279,290,278,273,271,255,0,287,279],
[240,266,276,259,249,268,264,0,262],
[253,269,252,270,248,280,272,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,260,269,286,287,279,282,264],
[278,0,276,282,282,287,289,274,280],
[291,275,0,292,289,301,287,285,294],
[282,269,259,0,295,281,287,283,258],
[265,269,262,256,0,270,279,276,267],
[264,264,250,270,281,0,280,294,267],
[272,262,264,264,272,271,0,283,278],
[269,277,266,268,275,257,268,0,262],
[287,271,257,293,284,284,273,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,289,290,320,250,284,270,305],
[238,0,296,290,291,287,295,336,260],
[262,255,0,245,335,292,224,242,266],
[261,261,306,0,331,287,271,291,257],
[231,260,216,220,0,221,238,245,238],
[301,264,259,264,330,0,317,294,252],
[267,256,327,280,313,234,0,260,314],
[281,215,309,260,306,257,291,0,276],
[246,291,285,294,313,299,237,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,264,268,286,278,264,268,261],
[267,0,258,261,284,266,274,274,264],
[287,293,0,279,295,279,280,266,260],
[283,290,272,0,289,266,274,289,270],
[265,267,256,262,0,252,275,261,253],
[273,285,272,285,299,0,285,271,286],
[287,277,271,277,276,266,0,258,272],
[283,277,285,262,290,280,293,0,278],
[290,287,291,281,298,265,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,244,301,322,263,195,246,303],
[262,0,231,266,269,252,194,215,281],
[307,320,0,265,277,262,213,263,237],
[250,285,286,0,304,265,242,246,292],
[229,282,274,247,0,224,226,263,245],
[288,299,289,286,327,0,280,310,253],
[356,357,338,309,325,271,0,305,311],
[305,336,288,305,288,241,246,0,269],
[248,270,314,259,306,298,240,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,256,293,241,234,241,225,235],
[271,0,228,218,219,303,218,275,245],
[295,323,0,240,258,357,296,302,279],
[258,333,311,0,282,312,262,251,315],
[310,332,293,269,0,296,288,331,318],
[317,248,194,239,255,0,226,265,233],
[310,333,255,289,263,325,0,319,312],
[326,276,249,300,220,286,232,0,299],
[316,306,272,236,233,318,239,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,308,299,266,251,279,313,275],
[286,0,270,288,275,254,241,285,297],
[243,281,0,274,313,266,256,308,271],
[252,263,277,0,268,284,271,276,261],
[285,276,238,283,0,279,270,307,297],
[300,297,285,267,272,0,264,299,289],
[272,310,295,280,281,287,0,326,304],
[238,266,243,275,244,252,225,0,238],
[276,254,280,290,254,262,247,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,287,275,285,290,260,276],
[264,0,271,266,276,268,262,261,287],
[273,280,0,290,291,289,297,278,290],
[264,285,261,0,278,281,276,254,267],
[276,275,260,273,0,266,275,269,291],
[266,283,262,270,285,0,276,250,292],
[261,289,254,275,276,275,0,257,292],
[291,290,273,297,282,301,294,0,299],
[275,264,261,284,260,259,259,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,278,270,270,282,253,284,269],
[300,0,281,295,272,310,281,279,280],
[273,270,0,287,277,274,270,279,277],
[281,256,264,0,265,271,264,269,258],
[281,279,274,286,0,285,275,275,269],
[269,241,277,280,266,0,256,264,246],
[298,270,281,287,276,295,0,288,277],
[267,272,272,282,276,287,263,0,271],
[282,271,274,293,282,305,274,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,301,295,292,277,299,280,275],
[219,0,263,274,265,273,261,256,272],
[250,288,0,248,262,281,245,253,260],
[256,277,303,0,269,268,270,256,256],
[259,286,289,282,0,271,276,281,268],
[274,278,270,283,280,0,263,263,264],
[252,290,306,281,275,288,0,271,277],
[271,295,298,295,270,288,280,0,274],
[276,279,291,295,283,287,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,265,275,259,275,251,307,273],
[284,0,281,272,302,276,276,347,267],
[286,270,0,277,261,266,254,312,246],
[276,279,274,0,270,285,271,313,310],
[292,249,290,281,0,295,252,298,269],
[276,275,285,266,256,0,233,280,258],
[300,275,297,280,299,318,0,325,285],
[244,204,239,238,253,271,226,0,269],
[278,284,305,241,282,293,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,277,284,282,272,269,292,272],
[254,0,273,276,273,265,278,261,272],
[274,278,0,283,284,272,274,283,261],
[267,275,268,0,285,262,276,281,276],
[269,278,267,266,0,266,270,276,275],
[279,286,279,289,285,0,274,291,274],
[282,273,277,275,281,277,0,280,272],
[259,290,268,270,275,260,271,0,268],
[279,279,290,275,276,277,279,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,254,274,286,267,275,258,267],
[268,0,251,249,281,248,277,286,263],
[297,300,0,278,317,284,274,281,303],
[277,302,273,0,287,248,277,260,293],
[265,270,234,264,0,271,270,251,270],
[284,303,267,303,280,0,288,288,288],
[276,274,277,274,281,263,0,267,281],
[293,265,270,291,300,263,284,0,276],
[284,288,248,258,281,263,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,267,273,269,293,264,310,284],
[260,0,260,271,282,287,251,304,266],
[284,291,0,253,277,282,301,287,290],
[278,280,298,0,290,281,273,312,306],
[282,269,274,261,0,253,260,283,271],
[258,264,269,270,298,0,261,256,283],
[287,300,250,278,291,290,0,274,277],
[241,247,264,239,268,295,277,0,263],
[267,285,261,245,280,268,274,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,257,277,286,292,275,292],
[271,0,277,295,262,253,285,286,284],
[266,274,0,270,263,292,274,249,295],
[294,256,281,0,275,278,294,283,272],
[274,289,288,276,0,276,278,268,291],
[265,298,259,273,275,0,274,284,279],
[259,266,277,257,273,277,0,256,278],
[276,265,302,268,283,267,295,0,316],
[259,267,256,279,260,272,273,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,292,266,217,317,306,273,266],
[355,0,352,309,273,387,353,330,369],
[259,199,0,250,248,310,308,274,290],
[285,242,301,0,247,266,247,247,260],
[334,278,303,304,0,318,350,248,266],
[234,164,241,285,233,0,297,241,270],
[245,198,243,304,201,254,0,253,225],
[278,221,277,304,303,310,298,0,274],
[285,182,261,291,285,281,326,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,242,263,261,267,240,259,272],
[300,0,319,287,294,292,287,263,295],
[309,232,0,253,261,252,268,208,270],
[288,264,298,0,254,310,269,236,283],
[290,257,290,297,0,308,304,251,266],
[284,259,299,241,243,0,261,266,262],
[311,264,283,282,247,290,0,250,294],
[292,288,343,315,300,285,301,0,269],
[279,256,281,268,285,289,257,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,199,211,287,247,214,254,248],
[304,0,275,236,295,311,267,280,251],
[352,276,0,269,336,347,288,312,276],
[340,315,282,0,318,305,234,267,253],
[264,256,215,233,0,251,215,291,246],
[304,240,204,246,300,0,269,284,229],
[337,284,263,317,336,282,0,342,251],
[297,271,239,284,260,267,209,0,206],
[303,300,275,298,305,322,300,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,271,272,301,276,278,265],
[270,0,261,266,260,281,269,285,252],
[271,290,0,262,258,295,270,282,268],
[280,285,289,0,275,289,266,280,277],
[279,291,293,276,0,304,283,278,273],
[250,270,256,262,247,0,271,263,248],
[275,282,281,285,268,280,0,283,291],
[273,266,269,271,273,288,268,0,262],
[286,299,283,274,278,303,260,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,277,266,278,287,277,287,263],
[270,0,266,278,281,281,283,288,278],
[274,285,0,274,268,273,288,285,265],
[285,273,277,0,281,288,299,289,270],
[273,270,283,270,0,279,287,282,269],
[264,270,278,263,272,0,267,274,263],
[274,268,263,252,264,284,0,272,285],
[264,263,266,262,269,277,279,0,261],
[288,273,286,281,282,288,266,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,296,259,287,285,282,276,282],
[265,0,282,268,282,276,258,288,271],
[255,269,0,248,271,273,246,270,275],
[292,283,303,0,279,297,275,272,272],
[264,269,280,272,0,261,267,270,284],
[266,275,278,254,290,0,265,273,283],
[269,293,305,276,284,286,0,283,283],
[275,263,281,279,281,278,268,0,277],
[269,280,276,279,267,268,268,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,271,256,278,269,260,258,250],
[300,0,268,292,277,304,270,279,271],
[280,283,0,287,271,276,266,279,281],
[295,259,264,0,247,276,247,285,263],
[273,274,280,304,0,298,266,282,271],
[282,247,275,275,253,0,254,277,258],
[291,281,285,304,285,297,0,274,269],
[293,272,272,266,269,274,277,0,262],
[301,280,270,288,280,293,282,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,289,284,261,276,264,278,291],
[259,0,278,270,266,283,273,290,285],
[262,273,0,266,260,296,272,270,270],
[267,281,285,0,281,261,281,285,268],
[290,285,291,270,0,302,287,287,291],
[275,268,255,290,249,0,290,278,265],
[287,278,279,270,264,261,0,266,288],
[273,261,281,266,264,273,285,0,275],
[260,266,281,283,260,286,263,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,298,274,275,289,276,297,275],
[245,0,263,264,252,268,255,257,247],
[253,288,0,256,265,273,267,254,262],
[277,287,295,0,284,270,265,292,256],
[276,299,286,267,0,294,243,275,266],
[262,283,278,281,257,0,280,295,268],
[275,296,284,286,308,271,0,286,276],
[254,294,297,259,276,256,265,0,262],
[276,304,289,295,285,283,275,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,297,240,291,280,274,272,266],
[264,0,331,277,321,323,293,254,300],
[254,220,0,264,286,287,270,250,251],
[311,274,287,0,334,298,290,301,280],
[260,230,265,217,0,244,235,242,257],
[271,228,264,253,307,0,275,257,261],
[277,258,281,261,316,276,0,238,274],
[279,297,301,250,309,294,313,0,304],
[285,251,300,271,294,290,277,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,272,278,288,271,258,228,245],
[260,0,265,269,273,242,251,250,251],
[279,286,0,279,300,270,261,267,261],
[273,282,272,0,275,254,263,255,252],
[263,278,251,276,0,252,248,249,250],
[280,309,281,297,299,0,270,286,284],
[293,300,290,288,303,281,0,273,294],
[323,301,284,296,302,265,278,0,264],
[306,300,290,299,301,267,257,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,276,304,271,281,290,277,274],
[291,0,290,277,274,288,291,272,295],
[275,261,0,275,267,269,275,250,278],
[247,274,276,0,259,254,263,269,262],
[280,277,284,292,0,298,294,274,286],
[270,263,282,297,253,0,284,266,287],
[261,260,276,288,257,267,0,273,268],
[274,279,301,282,277,285,278,0,282],
[277,256,273,289,265,264,283,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,287,268,286,274,292,275,274],
[258,0,272,275,276,274,276,276,277],
[264,279,0,275,282,270,280,274,268],
[283,276,276,0,270,292,295,285,276],
[265,275,269,281,0,268,273,282,267],
[277,277,281,259,283,0,283,275,284],
[259,275,271,256,278,268,0,284,275],
[276,275,277,266,269,276,267,0,273],
[277,274,283,275,284,267,276,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,307,284,295,274,278,284,313],
[252,0,295,278,279,293,256,288,320],
[244,256,0,249,299,276,260,269,307],
[267,273,302,0,300,271,262,306,305],
[256,272,252,251,0,260,276,278,297],
[277,258,275,280,291,0,252,270,296],
[273,295,291,289,275,299,0,310,311],
[267,263,282,245,273,281,241,0,302],
[238,231,244,246,254,255,240,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,272,271,272,258,271,264,238],
[275,0,282,268,247,267,283,289,266],
[279,269,0,283,250,257,264,289,278],
[280,283,268,0,254,298,266,294,268],
[279,304,301,297,0,292,296,266,269],
[293,284,294,253,259,0,295,280,277],
[280,268,287,285,255,256,0,269,257],
[287,262,262,257,285,271,282,0,276],
[313,285,273,283,282,274,294,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,272,269,266,291,281,279,278],
[284,0,278,271,280,295,295,285,293],
[279,273,0,276,290,304,302,285,285],
[282,280,275,0,289,299,298,283,288],
[285,271,261,262,0,290,284,275,272],
[260,256,247,252,261,0,274,252,256],
[270,256,249,253,267,277,0,262,259],
[272,266,266,268,276,299,289,0,270],
[273,258,266,263,279,295,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,260,261,252,258,276,254],
[278,0,290,263,275,286,269,279,268],
[277,261,0,254,269,256,258,274,248],
[291,288,297,0,261,271,279,280,283],
[290,276,282,290,0,270,261,281,264],
[299,265,295,280,281,0,274,287,274],
[293,282,293,272,290,277,0,274,275],
[275,272,277,271,270,264,277,0,258],
[297,283,303,268,287,277,276,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,286,257,308,297,292,304,274],
[260,0,280,233,302,289,288,258,295],
[265,271,0,251,290,316,312,253,302],
[294,318,300,0,291,262,303,265,315],
[243,249,261,260,0,235,254,218,259],
[254,262,235,289,316,0,285,236,264],
[259,263,239,248,297,266,0,282,246],
[247,293,298,286,333,315,269,0,268],
[277,256,249,236,292,287,305,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,318,272,261,259,240,231],
[282,0,301,302,263,272,279,270,284],
[265,250,0,266,272,251,270,249,260],
[233,249,285,0,245,222,234,211,228],
[279,288,279,306,0,253,288,252,263],
[290,279,300,329,298,0,258,273,297],
[292,272,281,317,263,293,0,261,278],
[311,281,302,340,299,278,290,0,266],
[320,267,291,323,288,254,273,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,245,282,273,262,260,278,257],
[291,0,284,284,297,291,290,264,290],
[306,267,0,282,305,303,289,292,273],
[269,267,269,0,272,270,254,261,259],
[278,254,246,279,0,255,260,247,253],
[289,260,248,281,296,0,271,268,257],
[291,261,262,297,291,280,0,261,268],
[273,287,259,290,304,283,290,0,270],
[294,261,278,292,298,294,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,242,293,243,247,282,268,239],
[276,0,234,261,275,258,287,272,285],
[309,317,0,324,284,276,322,241,302],
[258,290,227,0,238,286,292,248,272],
[308,276,267,313,0,271,293,279,295],
[304,293,275,265,280,0,286,286,254],
[269,264,229,259,258,265,0,250,234],
[283,279,310,303,272,265,301,0,276],
[312,266,249,279,256,297,317,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,248,310,258,274,273,290,262],
[256,0,289,296,267,252,252,270,269],
[303,262,0,291,265,277,263,300,276],
[241,255,260,0,268,261,241,240,221],
[293,284,286,283,0,264,256,299,267],
[277,299,274,290,287,0,283,302,290],
[278,299,288,310,295,268,0,282,269],
[261,281,251,311,252,249,269,0,267],
[289,282,275,330,284,261,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,292,292,298,278,298,275,290],
[238,0,274,265,280,274,274,266,264],
[259,277,0,278,271,264,282,255,260],
[259,286,273,0,273,269,268,287,266],
[253,271,280,278,0,276,283,269,271],
[273,277,287,282,275,0,279,271,277],
[253,277,269,283,268,272,0,258,277],
[276,285,296,264,282,280,293,0,272],
[261,287,291,285,280,274,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,296,249,276,283,278,265,279],
[294,0,285,272,279,291,277,281,280],
[255,266,0,270,246,293,278,277,267],
[302,279,281,0,270,286,293,280,270],
[275,272,305,281,0,292,288,278,283],
[268,260,258,265,259,0,282,277,267],
[273,274,273,258,263,269,0,294,275],
[286,270,274,271,273,274,257,0,260],
[272,271,284,281,268,284,276,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,337,324,323,267,399,294,387],
[158,0,285,280,317,271,347,216,279],
[214,266,0,242,302,299,296,185,303],
[227,271,309,0,329,342,333,298,356],
[228,234,249,222,0,258,305,195,308],
[284,280,252,209,293,0,279,281,291],
[152,204,255,218,246,272,0,223,240],
[257,335,366,253,356,270,328,0,296],
[164,272,248,195,243,260,311,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,252,257,257,261,269,280,270],
[286,0,268,281,278,272,297,287,263],
[299,283,0,247,283,259,272,298,270],
[294,270,304,0,279,276,284,309,277],
[294,273,268,272,0,255,288,298,283],
[290,279,292,275,296,0,277,322,269],
[282,254,279,267,263,274,0,290,273],
[271,264,253,242,253,229,261,0,239],
[281,288,281,274,268,282,278,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,248,275,276,298,334,249,210],
[329,0,270,295,296,285,276,355,313],
[303,281,0,329,225,305,299,322,296],
[276,256,222,0,235,311,235,270,238],
[275,255,326,316,0,275,252,329,345],
[253,266,246,240,276,0,274,275,237],
[217,275,252,316,299,277,0,275,298],
[302,196,229,281,222,276,276,0,205],
[341,238,255,313,206,314,253,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,245,278,256,253,299,275,274],
[268,0,237,286,253,264,273,303,283],
[306,314,0,276,284,271,307,313,287],
[273,265,275,0,293,255,281,287,294],
[295,298,267,258,0,262,277,297,283],
[298,287,280,296,289,0,273,288,295],
[252,278,244,270,274,278,0,268,258],
[276,248,238,264,254,263,283,0,283],
[277,268,264,257,268,256,293,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,280,269,289,282,264,267,280],
[269,0,282,298,285,277,275,285,278],
[271,269,0,273,277,273,258,280,282],
[282,253,278,0,286,273,275,278,270],
[262,266,274,265,0,276,276,272,268],
[269,274,278,278,275,0,283,288,272],
[287,276,293,276,275,268,0,280,288],
[284,266,271,273,279,263,271,0,272],
[271,273,269,281,283,279,263,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,296,282,269,267,261,278,272],
[291,0,285,285,280,267,276,286,270],
[255,266,0,274,279,278,279,279,287],
[269,266,277,0,253,258,269,262,281],
[282,271,272,298,0,268,297,296,282],
[284,284,273,293,283,0,291,289,281],
[290,275,272,282,254,260,0,271,270],
[273,265,272,289,255,262,280,0,276],
[279,281,264,270,269,270,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,319,299,321,333,303,266,304],
[223,0,249,275,299,275,237,239,239],
[232,302,0,281,337,304,254,245,288],
[252,276,270,0,314,284,245,250,247],
[230,252,214,237,0,267,245,216,227],
[218,276,247,267,284,0,209,243,253],
[248,314,297,306,306,342,0,271,292],
[285,312,306,301,335,308,280,0,256],
[247,312,263,304,324,298,259,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,350,309,314,338,278,272,304,302],
[201,0,271,265,293,243,202,237,234],
[242,280,0,317,298,240,250,249,246],
[237,286,234,0,275,230,239,225,245],
[213,258,253,276,0,253,200,226,236],
[273,308,311,321,298,0,320,272,322],
[279,349,301,312,351,231,0,277,298],
[247,314,302,326,325,279,274,0,266],
[249,317,305,306,315,229,253,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,297,265,275,291,291,288,296],
[277,0,297,280,274,286,275,280,291],
[254,254,0,249,265,277,256,257,264],
[286,271,302,0,275,286,282,278,297],
[276,277,286,276,0,297,274,282,305],
[260,265,274,265,254,0,262,260,283],
[260,276,295,269,277,289,0,261,285],
[263,271,294,273,269,291,290,0,287],
[255,260,287,254,246,268,266,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,259,294,285,257,284,284,266],
[274,0,276,292,256,283,299,277,270],
[292,275,0,298,284,284,296,294,282],
[257,259,253,0,259,261,263,268,248],
[266,295,267,292,0,275,299,279,266],
[294,268,267,290,276,0,304,278,276],
[267,252,255,288,252,247,0,277,261],
[267,274,257,283,272,273,274,0,266],
[285,281,269,303,285,275,290,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,239,256,260,264,248,261,257],
[308,0,272,283,284,263,276,295,282],
[312,279,0,301,298,274,291,293,290],
[295,268,250,0,276,272,259,280,269],
[291,267,253,275,0,281,273,275,268],
[287,288,277,279,270,0,268,272,280],
[303,275,260,292,278,283,0,291,275],
[290,256,258,271,276,279,260,0,266],
[294,269,261,282,283,271,276,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,274,276,282,276,285,298,296],
[249,0,259,275,275,271,274,283,294],
[277,292,0,275,279,282,268,282,301],
[275,276,276,0,282,279,289,299,290],
[269,276,272,269,0,274,276,290,304],
[275,280,269,272,277,0,287,299,306],
[266,277,283,262,275,264,0,269,290],
[253,268,269,252,261,252,282,0,271],
[255,257,250,261,247,245,261,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,269,280,258,273,273,307,272],
[265,0,278,284,271,277,251,286,279],
[282,273,0,295,271,284,257,297,276],
[271,267,256,0,274,284,276,297,268],
[293,280,280,277,0,277,263,304,261],
[278,274,267,267,274,0,261,299,274],
[278,300,294,275,288,290,0,309,290],
[244,265,254,254,247,252,242,0,243],
[279,272,275,283,290,277,261,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,260,280,296,289,295,277,281],
[285,0,261,284,285,249,271,280,254],
[291,290,0,271,278,304,291,295,283],
[271,267,280,0,283,281,282,282,269],
[255,266,273,268,0,260,271,273,264],
[262,302,247,270,291,0,283,275,273],
[256,280,260,269,280,268,0,287,288],
[274,271,256,269,278,276,264,0,277],
[270,297,268,282,287,278,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,274,275,266,286,292,299,313],
[252,0,259,264,282,253,271,260,280],
[277,292,0,277,292,276,273,276,286],
[276,287,274,0,258,283,295,297,269],
[285,269,259,293,0,270,271,289,287],
[265,298,275,268,281,0,289,300,311],
[259,280,278,256,280,262,0,254,302],
[252,291,275,254,262,251,297,0,287],
[238,271,265,282,264,240,249,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,287,290,296,267,282,286,282],
[271,0,272,282,294,275,284,271,277],
[264,279,0,290,281,284,287,262,287],
[261,269,261,0,275,261,278,251,263],
[255,257,270,276,0,261,280,262,270],
[284,276,267,290,290,0,298,277,285],
[269,267,264,273,271,253,0,249,262],
[265,280,289,300,289,274,302,0,283],
[269,274,264,288,281,266,289,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,240,263,270,276,292,282,271],
[303,0,256,255,316,311,307,309,308],
[311,295,0,276,275,296,335,329,287],
[288,296,275,0,296,317,303,336,296],
[281,235,276,255,0,283,315,308,274],
[275,240,255,234,268,0,282,258,244],
[259,244,216,248,236,269,0,296,249],
[269,242,222,215,243,293,255,0,265],
[280,243,264,255,277,307,302,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,309,276,283,309,262,264,293],
[259,0,289,270,286,249,275,276,281],
[242,262,0,269,264,277,266,267,278],
[275,281,282,0,281,274,278,294,277],
[268,265,287,270,0,282,267,271,258],
[242,302,274,277,269,0,257,274,277],
[289,276,285,273,284,294,0,288,288],
[287,275,284,257,280,277,263,0,266],
[258,270,273,274,293,274,263,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,282,288,286,277,267,288],
[274,0,286,266,283,270,243,268,274],
[269,265,0,266,276,267,263,258,261],
[269,285,285,0,282,261,274,268,272],
[263,268,275,269,0,269,249,270,262],
[265,281,284,290,282,0,263,284,287],
[274,308,288,277,302,288,0,271,277],
[284,283,293,283,281,267,280,0,287],
[263,277,290,279,289,264,274,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,273,288,284,255,265,250,284],
[288,0,281,282,275,288,284,277,272],
[278,270,0,283,279,274,284,270,280],
[263,269,268,0,253,269,272,263,283],
[267,276,272,298,0,271,279,277,261],
[296,263,277,282,280,0,272,282,285],
[286,267,267,279,272,279,0,279,267],
[301,274,281,288,274,269,272,0,273],
[267,279,271,268,290,266,284,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,298,304,270,286,286,290],
[268,0,253,280,289,250,270,279,260],
[280,298,0,304,314,266,290,290,282],
[253,271,247,0,287,238,265,258,277],
[247,262,237,264,0,266,266,268,277],
[281,301,285,313,285,0,269,279,275],
[265,281,261,286,285,282,0,275,272],
[265,272,261,293,283,272,276,0,278],
[261,291,269,274,274,276,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,284,280,278,294,297,262,284],
[270,0,268,254,275,279,284,243,259],
[267,283,0,253,261,270,266,252,271],
[271,297,298,0,283,288,293,284,262],
[273,276,290,268,0,283,270,268,271],
[257,272,281,263,268,0,259,248,236],
[254,267,285,258,281,292,0,267,268],
[289,308,299,267,283,303,284,0,286],
[267,292,280,289,280,315,283,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,248,283,274,262,277,267,274],
[284,0,274,306,286,286,290,278,281],
[303,277,0,264,282,289,291,280,287],
[268,245,287,0,261,264,284,247,288],
[277,265,269,290,0,263,262,259,273],
[289,265,262,287,288,0,287,273,284],
[274,261,260,267,289,264,0,229,276],
[284,273,271,304,292,278,322,0,300],
[277,270,264,263,278,267,275,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,286,280,255,285,264,289,293],
[275,0,281,293,286,282,297,290,301],
[265,270,0,297,274,272,283,274,297],
[271,258,254,0,271,255,265,270,287],
[296,265,277,280,0,273,270,278,293],
[266,269,279,296,278,0,291,284,283],
[287,254,268,286,281,260,0,271,296],
[262,261,277,281,273,267,280,0,301],
[258,250,254,264,258,268,255,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,305,269,271,310,271,294,297],
[258,0,287,226,235,271,249,231,242],
[246,264,0,244,243,288,251,258,257],
[282,325,307,0,266,290,278,295,263],
[280,316,308,285,0,307,298,303,274],
[241,280,263,261,244,0,239,234,244],
[280,302,300,273,253,312,0,257,271],
[257,320,293,256,248,317,294,0,260],
[254,309,294,288,277,307,280,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,251,260,256,247,253,277,268],
[286,0,260,273,282,268,286,281,289],
[300,291,0,283,265,277,286,283,280],
[291,278,268,0,266,284,282,279,298],
[295,269,286,285,0,265,292,296,289],
[304,283,274,267,286,0,298,291,289],
[298,265,265,269,259,253,0,267,274],
[274,270,268,272,255,260,284,0,282],
[283,262,271,253,262,262,277,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,270,292,280,296,292,283,270],
[258,0,262,268,265,277,264,291,262],
[281,289,0,280,280,290,270,292,276],
[259,283,271,0,273,290,274,290,267],
[271,286,271,278,0,278,278,278,284],
[255,274,261,261,273,0,264,276,270],
[259,287,281,277,273,287,0,300,274],
[268,260,259,261,273,275,251,0,258],
[281,289,275,284,267,281,277,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,288,266,259,244,262,259,278],
[309,0,299,283,294,267,284,278,281],
[263,252,0,273,247,260,268,256,281],
[285,268,278,0,280,272,274,274,290],
[292,257,304,271,0,275,284,286,276],
[307,284,291,279,276,0,266,285,296],
[289,267,283,277,267,285,0,282,278],
[292,273,295,277,265,266,269,0,299],
[273,270,270,261,275,255,273,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,270,307,263,251,315,286,297],
[214,0,278,200,272,235,268,302,273],
[281,273,0,251,304,220,283,262,256],
[244,351,300,0,328,278,350,367,293],
[288,279,247,223,0,242,330,268,284],
[300,316,331,273,309,0,292,303,308],
[236,283,268,201,221,259,0,257,261],
[265,249,289,184,283,248,294,0,221],
[254,278,295,258,267,243,290,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,265,260,268,264,245,256,238],
[293,0,283,267,261,284,261,277,268],
[286,268,0,250,263,263,253,283,260],
[291,284,301,0,293,289,271,288,276],
[283,290,288,258,0,284,278,286,281],
[287,267,288,262,267,0,276,280,264],
[306,290,298,280,273,275,0,282,274],
[295,274,268,263,265,271,269,0,276],
[313,283,291,275,270,287,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,272,268,270,297,302,291],
[277,0,275,273,270,271,281,301,286],
[275,276,0,280,285,269,289,301,288],
[279,278,271,0,261,266,273,290,293],
[283,281,266,290,0,269,286,296,290],
[281,280,282,285,282,0,296,299,271],
[254,270,262,278,265,255,0,291,271],
[249,250,250,261,255,252,260,0,265],
[260,265,263,258,261,280,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,294,291,276,308,276,262,287],
[284,0,287,297,275,295,296,294,284],
[257,264,0,279,267,286,286,269,277],
[260,254,272,0,265,275,260,258,251],
[275,276,284,286,0,291,299,283,275],
[243,256,265,276,260,0,294,277,269],
[275,255,265,291,252,257,0,264,273],
[289,257,282,293,268,274,287,0,281],
[264,267,274,300,276,282,278,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,243,255,262,293,252,228,264],
[268,0,253,286,273,312,222,242,273],
[308,298,0,297,301,327,278,281,271],
[296,265,254,0,284,292,230,230,249],
[289,278,250,267,0,268,255,257,274],
[258,239,224,259,283,0,224,219,240],
[299,329,273,321,296,327,0,252,307],
[323,309,270,321,294,332,299,0,285],
[287,278,280,302,277,311,244,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,268,273,273,279,278,276,267],
[281,0,263,260,257,270,260,266,272],
[283,288,0,268,278,287,291,265,283],
[278,291,283,0,275,281,283,287,273],
[278,294,273,276,0,279,264,270,269],
[272,281,264,270,272,0,251,258,266],
[273,291,260,268,287,300,0,272,283],
[275,285,286,264,281,293,279,0,274],
[284,279,268,278,282,285,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,280,281,275,284,292,270],
[276,0,280,260,267,267,269,283,271],
[263,271,0,278,269,282,293,290,281],
[271,291,273,0,293,284,294,294,279],
[270,284,282,258,0,282,276,288,270],
[276,284,269,267,269,0,289,269,267],
[267,282,258,257,275,262,0,278,276],
[259,268,261,257,263,282,273,0,272],
[281,280,270,272,281,284,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,284,250,283,292,273,287,258],
[268,0,307,299,293,287,302,307,292],
[267,244,0,254,276,292,271,277,273],
[301,252,297,0,295,286,313,323,296],
[268,258,275,256,0,305,273,275,259],
[259,264,259,265,246,0,276,259,271],
[278,249,280,238,278,275,0,322,274],
[264,244,274,228,276,292,229,0,284],
[293,259,278,255,292,280,277,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,269,277,279,278,277,256,263],
[293,0,300,297,295,284,281,275,299],
[282,251,0,276,287,280,255,278,277],
[274,254,275,0,280,272,268,254,273],
[272,256,264,271,0,281,253,269,272],
[273,267,271,279,270,0,261,275,279],
[274,270,296,283,298,290,0,300,276],
[295,276,273,297,282,276,251,0,291],
[288,252,274,278,279,272,275,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,281,287,291,283,269,284,274],
[257,0,256,261,271,283,268,275,278],
[270,295,0,286,292,291,279,293,296],
[264,290,265,0,283,280,285,278,278],
[260,280,259,268,0,290,271,283,278],
[268,268,260,271,261,0,275,281,274],
[282,283,272,266,280,276,0,274,269],
[267,276,258,273,268,270,277,0,274],
[277,273,255,273,273,277,282,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,257,255,281,273,282,264],
[263,0,253,275,294,244,280,251,256],
[279,298,0,284,302,275,263,296,267],
[294,276,267,0,276,314,284,287,296],
[296,257,249,275,0,275,267,269,280],
[270,307,276,237,276,0,275,297,277],
[278,271,288,267,284,276,0,269,285],
[269,300,255,264,282,254,282,0,290],
[287,295,284,255,271,274,266,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,293,272,268,294,292,284,283],
[268,0,276,276,275,287,276,273,285],
[258,275,0,264,272,296,294,277,268],
[279,275,287,0,277,304,294,280,277],
[283,276,279,274,0,289,299,279,288],
[257,264,255,247,262,0,278,261,261],
[259,275,257,257,252,273,0,259,249],
[267,278,274,271,272,290,292,0,271],
[268,266,283,274,263,290,302,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,261,258,250,288,242,252,270],
[300,0,298,256,257,287,254,273,285],
[290,253,0,249,249,297,219,278,269],
[293,295,302,0,289,304,268,268,290],
[301,294,302,262,0,309,289,279,304],
[263,264,254,247,242,0,249,241,246],
[309,297,332,283,262,302,0,282,283],
[299,278,273,283,272,310,269,0,295],
[281,266,282,261,247,305,268,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,283,269,273,299,255,295,273],
[257,0,281,274,259,286,278,280,258],
[268,270,0,282,255,281,267,276,260],
[282,277,269,0,261,277,254,275,251],
[278,292,296,290,0,283,272,265,273],
[252,265,270,274,268,0,264,261,266],
[296,273,284,297,279,287,0,273,294],
[256,271,275,276,286,290,278,0,272],
[278,293,291,300,278,285,257,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,294,284,275,286,283,290,284],
[260,0,280,240,254,239,263,263,245],
[257,271,0,262,275,260,267,291,254],
[267,311,289,0,278,289,300,303,280],
[276,297,276,273,0,310,296,319,276],
[265,312,291,262,241,0,273,302,272],
[268,288,284,251,255,278,0,280,281],
[261,288,260,248,232,249,271,0,281],
[267,306,297,271,275,279,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,264,273,280,281,270,271,275],
[274,0,277,279,286,285,281,262,284],
[287,274,0,274,302,309,282,271,289],
[278,272,277,0,286,298,267,260,268],
[271,265,249,265,0,275,259,256,243],
[270,266,242,253,276,0,261,261,267],
[281,270,269,284,292,290,0,259,270],
[280,289,280,291,295,290,292,0,273],
[276,267,262,283,308,284,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,278,291,300,295,281,266,305],
[293,0,286,272,304,303,296,278,326],
[273,265,0,250,266,292,244,256,300],
[260,279,301,0,291,271,279,264,285],
[251,247,285,260,0,283,239,243,275],
[256,248,259,280,268,0,261,240,241],
[270,255,307,272,312,290,0,274,323],
[285,273,295,287,308,311,277,0,304],
[246,225,251,266,276,310,228,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,255,269,260,242,242,244,281],
[286,0,268,296,259,275,250,261,282],
[296,283,0,284,286,265,273,256,300],
[282,255,267,0,268,273,257,275,277],
[291,292,265,283,0,283,272,274,285],
[309,276,286,278,268,0,280,282,294],
[309,301,278,294,279,271,0,267,295],
[307,290,295,276,277,269,284,0,287],
[270,269,251,274,266,257,256,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,270,259,245,272,275,267,262],
[255,0,249,246,281,267,254,243,237],
[281,302,0,262,271,295,266,282,278],
[292,305,289,0,256,240,275,270,256],
[306,270,280,295,0,285,262,280,260],
[279,284,256,311,266,0,280,255,264],
[276,297,285,276,289,271,0,299,285],
[284,308,269,281,271,296,252,0,275],
[289,314,273,295,291,287,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,302,288,424,337,209,228,337],
[342,0,215,429,342,215,141,268,464],
[249,336,0,288,410,196,122,249,323],
[263,122,263,0,337,337,122,263,263],
[127,209,141,214,0,215,0,268,249],
[214,336,355,214,336,0,214,355,249],
[342,410,429,429,551,337,0,268,464],
[323,283,302,288,283,196,283,0,196],
[214,87,228,288,302,302,87,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,294,245,382,283,220,185,201],
[204,0,70,193,255,197,133,114,172],
[257,481,0,344,453,298,371,333,277],
[306,358,207,0,521,237,202,329,116],
[169,296,98,30,0,145,86,209,116],
[268,354,253,314,406,0,244,317,135],
[331,418,180,349,465,307,0,277,323],
[366,437,218,222,342,234,274,0,280],
[350,379,274,435,435,416,228,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,277,297,282,278,272,299,262],
[281,0,281,296,293,272,308,319,279],
[274,270,0,297,284,279,280,296,268],
[254,255,254,0,250,261,264,275,253],
[269,258,267,301,0,272,286,297,281],
[273,279,272,290,279,0,283,302,279],
[279,243,271,287,265,268,0,295,260],
[252,232,255,276,254,249,256,0,253],
[289,272,283,298,270,272,291,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,268,273,267,269,269,264,273],
[284,0,262,299,264,272,265,261,275],
[283,289,0,287,280,252,255,260,300],
[278,252,264,0,257,257,259,255,276],
[284,287,271,294,0,266,275,267,285],
[282,279,299,294,285,0,269,281,289],
[282,286,296,292,276,282,0,273,305],
[287,290,291,296,284,270,278,0,290],
[278,276,251,275,266,262,246,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,313,252,317,280,249,274,290],
[270,0,302,236,272,264,247,263,266],
[238,249,0,248,284,276,248,258,266],
[299,315,303,0,298,290,277,273,269],
[234,279,267,253,0,257,271,262,237],
[271,287,275,261,294,0,270,279,257],
[302,304,303,274,280,281,0,280,267],
[277,288,293,278,289,272,271,0,259],
[261,285,285,282,314,294,284,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,268,279,320,234,272,337,258],
[314,0,277,259,320,219,277,324,322],
[283,274,0,274,316,280,224,312,237],
[272,292,277,0,244,237,306,370,242],
[231,231,235,307,0,261,259,253,230],
[317,332,271,314,290,0,332,392,312],
[279,274,327,245,292,219,0,327,277],
[214,227,239,181,298,159,224,0,279],
[293,229,314,309,321,239,274,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,354,425,313,227,375,312,287],
[244,0,251,296,103,121,246,123,217],
[197,300,0,264,255,178,254,264,198],
[126,255,287,0,253,306,280,225,194],
[238,448,296,298,0,258,385,349,369],
[324,430,373,245,293,0,392,299,348],
[176,305,297,271,166,159,0,310,326],
[239,428,287,326,202,252,241,0,346],
[264,334,353,357,182,203,225,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,308,283,256,269,260,293,272],
[282,0,250,252,267,272,274,266,280],
[243,301,0,280,277,290,303,268,271],
[268,299,271,0,275,277,266,283,275],
[295,284,274,276,0,251,277,281,272],
[282,279,261,274,300,0,271,279,285],
[291,277,248,285,274,280,0,265,280],
[258,285,283,268,270,272,286,0,282],
[279,271,280,276,279,266,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,301,249,295,332,351,330,247],
[339,0,272,349,257,390,426,345,361],
[250,279,0,228,286,323,332,371,254],
[302,202,323,0,285,323,396,372,286],
[256,294,265,266,0,286,337,326,328],
[219,161,228,228,265,0,261,282,230],
[200,125,219,155,214,290,0,203,221],
[221,206,180,179,225,269,348,0,254],
[304,190,297,265,223,321,330,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,290,257,272,281,263,301,264],
[295,0,293,285,293,314,276,279,270],
[261,258,0,241,262,274,258,279,258],
[294,266,310,0,296,292,259,297,273],
[279,258,289,255,0,277,275,274,269],
[270,237,277,259,274,0,290,268,288],
[288,275,293,292,276,261,0,300,250],
[250,272,272,254,277,283,251,0,246],
[287,281,293,278,282,263,301,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,310,259,312,319,297,301,318],
[260,0,336,276,282,291,290,307,323],
[241,215,0,250,291,249,247,271,267],
[292,275,301,0,304,290,292,284,298],
[239,269,260,247,0,269,255,244,249],
[232,260,302,261,282,0,284,274,287],
[254,261,304,259,296,267,0,272,276],
[250,244,280,267,307,277,279,0,293],
[233,228,284,253,302,264,275,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,243,252,210,226,277,286,223],
[292,0,269,232,243,259,265,322,250],
[308,282,0,259,252,292,290,309,277],
[299,319,292,0,278,269,281,325,280],
[341,308,299,273,0,318,272,350,306],
[325,292,259,282,233,0,249,307,264],
[274,286,261,270,279,302,0,315,282],
[265,229,242,226,201,244,236,0,226],
[328,301,274,271,245,287,269,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,248,228,270,298,286,238,298],
[262,0,263,267,260,305,299,254,258],
[303,288,0,268,279,331,270,249,288],
[323,284,283,0,240,273,273,265,290],
[281,291,272,311,0,312,284,276,290],
[253,246,220,278,239,0,257,238,277],
[265,252,281,278,267,294,0,261,273],
[313,297,302,286,275,313,290,0,304],
[253,293,263,261,261,274,278,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,297,280,307,281,287,274,276],
[268,0,298,279,286,267,276,276,279],
[254,253,0,265,270,271,270,274,269],
[271,272,286,0,274,276,273,267,253],
[244,265,281,277,0,266,280,263,274],
[270,284,280,275,285,0,272,279,270],
[264,275,281,278,271,279,0,283,258],
[277,275,277,284,288,272,268,0,277],
[275,272,282,298,277,281,293,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,265,273,272,240,266,268,270],
[299,0,269,297,277,268,262,279,276],
[286,282,0,292,294,296,284,264,295],
[278,254,259,0,275,246,263,271,275],
[279,274,257,276,0,257,270,263,263],
[311,283,255,305,294,0,296,286,285],
[285,289,267,288,281,255,0,296,279],
[283,272,287,280,288,265,255,0,270],
[281,275,256,276,288,266,272,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,286,283,294,301,268,293,300],
[277,0,308,268,252,258,279,282,295],
[265,243,0,253,260,247,232,270,244],
[268,283,298,0,288,266,284,280,278],
[257,299,291,263,0,283,269,297,298],
[250,293,304,285,268,0,260,308,312],
[283,272,319,267,282,291,0,299,292],
[258,269,281,271,254,243,252,0,274],
[251,256,307,273,253,239,259,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,338,281,313,253,289,286,282,283],
[213,0,242,273,264,232,249,241,250],
[270,309,0,307,278,277,281,261,286],
[238,278,244,0,262,271,281,254,272],
[298,287,273,289,0,294,299,267,265],
[262,319,274,280,257,0,298,276,270],
[265,302,270,270,252,253,0,248,267],
[269,310,290,297,284,275,303,0,285],
[268,301,265,279,286,281,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,205,225,243,227,257,234,279],
[302,0,261,271,279,288,257,265,290],
[346,290,0,347,247,288,310,268,313],
[326,280,204,0,284,274,281,318,285],
[308,272,304,267,0,266,329,279,298],
[324,263,263,277,285,0,307,269,244],
[294,294,241,270,222,244,0,267,283],
[317,286,283,233,272,282,284,0,309],
[272,261,238,266,253,307,268,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,268,273,261,261,285,257],
[278,0,290,272,286,265,281,282,286],
[277,261,0,258,262,254,266,257,278],
[283,279,293,0,290,281,270,285,257],
[278,265,289,261,0,267,258,272,261],
[290,286,297,270,284,0,275,273,283],
[290,270,285,281,293,276,0,278,273],
[266,269,294,266,279,278,273,0,280],
[294,265,273,294,290,268,278,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,299,267,303,297,292,262,306],
[251,0,226,233,231,223,249,160,250],
[252,325,0,287,307,290,308,305,297],
[284,318,264,0,280,251,303,284,261],
[248,320,244,271,0,273,257,262,283],
[254,328,261,300,278,0,289,266,260],
[259,302,243,248,294,262,0,267,266],
[289,391,246,267,289,285,284,0,299],
[245,301,254,290,268,291,285,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,286,288,267,314,285,300,280],
[267,0,288,283,296,301,290,291,279],
[265,263,0,267,272,318,278,272,247],
[263,268,284,0,265,286,268,300,271],
[284,255,279,286,0,280,274,295,276],
[237,250,233,265,271,0,258,270,254],
[266,261,273,283,277,293,0,328,247],
[251,260,279,251,256,281,223,0,235],
[271,272,304,280,275,297,304,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,255,274,255,287,261,267],
[283,0,285,285,273,282,263,263,274],
[272,266,0,273,266,267,282,277,271],
[296,266,278,0,276,270,276,285,263],
[277,278,285,275,0,283,278,281,257],
[296,269,284,281,268,0,281,283,257],
[264,288,269,275,273,270,0,263,277],
[290,288,274,266,270,268,288,0,269],
[284,277,280,288,294,294,274,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,250,323,303,312,276,332,310],
[277,0,303,277,251,302,291,340,339],
[301,248,0,321,273,278,303,339,312],
[228,274,230,0,278,236,221,292,275],
[248,300,278,273,0,288,275,295,344],
[239,249,273,315,263,0,286,323,326],
[275,260,248,330,276,265,0,311,314],
[219,211,212,259,256,228,240,0,285],
[241,212,239,276,207,225,237,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,272,270,287,292,268,226,259],
[296,0,290,273,323,317,304,280,264],
[279,261,0,278,284,295,299,241,238],
[281,278,273,0,275,298,268,234,241],
[264,228,267,276,0,257,272,223,237],
[259,234,256,253,294,0,282,220,230],
[283,247,252,283,279,269,0,245,263],
[325,271,310,317,328,331,306,0,293],
[292,287,313,310,314,321,288,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,287,288,287,295,304,273,284],
[275,0,269,253,265,272,295,270,264],
[264,282,0,246,246,285,296,274,269],
[263,298,305,0,266,304,306,278,275],
[264,286,305,285,0,276,300,281,279],
[256,279,266,247,275,0,288,273,279],
[247,256,255,245,251,263,0,228,253],
[278,281,277,273,270,278,323,0,282],
[267,287,282,276,272,272,298,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,260,259,230,264,258,248,288],
[300,0,272,282,234,264,258,273,307],
[291,279,0,285,264,262,265,260,304],
[292,269,266,0,244,285,256,284,301],
[321,317,287,307,0,322,271,282,311],
[287,287,289,266,229,0,258,263,278],
[293,293,286,295,280,293,0,273,320],
[303,278,291,267,269,288,278,0,314],
[263,244,247,250,240,273,231,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,279,305,283,258,292,259],
[281,0,288,230,308,288,260,290,281],
[286,263,0,263,266,294,257,296,287],
[272,321,288,0,318,294,283,311,283],
[246,243,285,233,0,272,231,284,251],
[268,263,257,257,279,0,260,264,256],
[293,291,294,268,320,291,0,323,308],
[259,261,255,240,267,287,228,0,259],
[292,270,264,268,300,295,243,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,285,332,308,302,289,267,294],
[251,0,280,299,246,287,244,255,220],
[266,271,0,298,275,253,255,273,242],
[219,252,253,0,248,255,219,241,202],
[243,305,276,303,0,282,297,259,271],
[249,264,298,296,269,0,291,289,247],
[262,307,296,332,254,260,0,237,260],
[284,296,278,310,292,262,314,0,282],
[257,331,309,349,280,304,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,306,267,277,268,296,264,263],
[264,0,299,266,266,267,271,255,249],
[245,252,0,253,256,274,276,243,257],
[284,285,298,0,283,276,283,287,267],
[274,285,295,268,0,292,293,283,256],
[283,284,277,275,259,0,275,244,289],
[255,280,275,268,258,276,0,257,254],
[287,296,308,264,268,307,294,0,279],
[288,302,294,284,295,262,297,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,278,249,266,264,268,292,262],
[289,0,295,291,287,292,254,295,288],
[273,256,0,221,264,253,262,271,259],
[302,260,330,0,277,269,271,285,269],
[285,264,287,274,0,294,287,281,276],
[287,259,298,282,257,0,245,274,271],
[283,297,289,280,264,306,0,282,278],
[259,256,280,266,270,277,269,0,270],
[289,263,292,282,275,280,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,271,296,321,277,302,271,281],
[279,0,285,273,312,286,293,287,274],
[280,266,0,279,315,258,313,298,264],
[255,278,272,0,301,240,309,288,290],
[230,239,236,250,0,242,259,238,251],
[274,265,293,311,309,0,299,296,260],
[249,258,238,242,292,252,0,270,251],
[280,264,253,263,313,255,281,0,235],
[270,277,287,261,300,291,300,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,355,249,177,232,173,263,325,405],
[196,0,152,214,139,83,325,152,140],
[302,399,0,313,276,265,399,325,405],
[374,337,238,0,336,417,503,322,381],
[319,412,275,215,0,269,314,224,236],
[378,468,286,134,282,0,423,282,276],
[288,226,152,48,237,128,0,286,277],
[226,399,226,229,327,269,265,0,92],
[146,411,146,170,315,275,274,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,328,254,277,284,294,272,279],
[284,0,307,249,278,279,300,280,281],
[223,244,0,221,226,241,236,228,265],
[297,302,330,0,275,298,279,270,292],
[274,273,325,276,0,284,285,283,293],
[267,272,310,253,267,0,280,273,292],
[257,251,315,272,266,271,0,265,291],
[279,271,323,281,268,278,286,0,287],
[272,270,286,259,258,259,260,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,314,338,245,286,347,320,285],
[267,0,323,325,288,290,296,307,285],
[237,228,0,307,299,296,281,243,262],
[213,226,244,0,230,245,264,238,266],
[306,263,252,321,0,293,309,317,293],
[265,261,255,306,258,0,297,252,256],
[204,255,270,287,242,254,0,271,263],
[231,244,308,313,234,299,280,0,262],
[266,266,289,285,258,295,288,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,227,262,249,271,336,257,254],
[284,0,278,296,298,293,308,260,270],
[324,273,0,248,289,298,296,280,328],
[289,255,303,0,276,274,328,273,317],
[302,253,262,275,0,268,325,270,275],
[280,258,253,277,283,0,302,331,292],
[215,243,255,223,226,249,0,245,217],
[294,291,271,278,281,220,306,0,265],
[297,281,223,234,276,259,334,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,292,265,308,296,300,310,289],
[240,0,246,246,290,264,241,255,303],
[259,305,0,244,260,257,221,268,279],
[286,305,307,0,298,238,255,309,285],
[243,261,291,253,0,249,229,217,283],
[255,287,294,313,302,0,254,297,294],
[251,310,330,296,322,297,0,315,340],
[241,296,283,242,334,254,236,0,307],
[262,248,272,266,268,257,211,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,283,266,276,281,279,273,269],
[283,0,260,267,303,271,285,283,288],
[268,291,0,259,276,290,277,279,264],
[285,284,292,0,267,284,261,280,272],
[275,248,275,284,0,272,232,266,248],
[270,280,261,267,279,0,287,265,259],
[272,266,274,290,319,264,0,261,261],
[278,268,272,271,285,286,290,0,262],
[282,263,287,279,303,292,290,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,296,293,289,282,275,283,278],
[254,0,280,261,259,253,256,254,261],
[255,271,0,264,269,269,261,266,275],
[258,290,287,0,272,257,258,273,275],
[262,292,282,279,0,263,277,278,276],
[269,298,282,294,288,0,264,292,268],
[276,295,290,293,274,287,0,289,287],
[268,297,285,278,273,259,262,0,278],
[273,290,276,276,275,283,264,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,309,286,302,289,290,292,265],
[249,0,298,275,269,249,277,278,251],
[242,253,0,270,305,260,284,266,280],
[265,276,281,0,297,267,283,258,280],
[249,282,246,254,0,251,276,243,265],
[262,302,291,284,300,0,287,297,280],
[261,274,267,268,275,264,0,276,245],
[259,273,285,293,308,254,275,0,257],
[286,300,271,271,286,271,306,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,281,282,291,279,268,291,286],
[224,0,244,265,261,245,251,246,243],
[270,307,0,281,304,260,284,286,292],
[269,286,270,0,294,252,253,275,284],
[260,290,247,257,0,255,249,266,257],
[272,306,291,299,296,0,299,303,287],
[283,300,267,298,302,252,0,275,298],
[260,305,265,276,285,248,276,0,266],
[265,308,259,267,294,264,253,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,273,288,299,304,284,274,289],
[288,0,260,281,303,297,262,277,302],
[278,291,0,281,300,315,270,295,287],
[263,270,270,0,290,319,276,289,286],
[252,248,251,261,0,279,225,263,254],
[247,254,236,232,272,0,231,255,272],
[267,289,281,275,326,320,0,287,301],
[277,274,256,262,288,296,264,0,281],
[262,249,264,265,297,279,250,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,318,262,300,263,303,285,301],
[241,0,271,268,270,277,279,261,273],
[233,280,0,283,271,259,276,286,274],
[289,283,268,0,321,287,295,284,279],
[251,281,280,230,0,248,268,234,257],
[288,274,292,264,303,0,287,268,272],
[248,272,275,256,283,264,0,255,258],
[266,290,265,267,317,283,296,0,276],
[250,278,277,272,294,279,293,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,246,268,286,281,282,278,291],
[259,0,263,252,251,293,252,261,255],
[305,288,0,257,310,314,298,258,307],
[283,299,294,0,305,316,259,268,291],
[265,300,241,246,0,275,267,268,271],
[270,258,237,235,276,0,250,264,266],
[269,299,253,292,284,301,0,270,279],
[273,290,293,283,283,287,281,0,287],
[260,296,244,260,280,285,272,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,279,294,309,238,255,279,264],
[269,0,270,274,278,233,264,244,224],
[272,281,0,285,318,279,272,274,295],
[257,277,266,0,298,244,262,284,280],
[242,273,233,253,0,241,258,242,242],
[313,318,272,307,310,0,285,301,292],
[296,287,279,289,293,266,0,271,288],
[272,307,277,267,309,250,280,0,284],
[287,327,256,271,309,259,263,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,267,251,274,240,263,289,274],
[259,0,256,254,277,241,276,283,276],
[284,295,0,272,269,276,271,295,297],
[300,297,279,0,295,256,287,295,300],
[277,274,282,256,0,259,266,301,284],
[311,310,275,295,292,0,281,302,288],
[288,275,280,264,285,270,0,299,273],
[262,268,256,256,250,249,252,0,264],
[277,275,254,251,267,263,278,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,297,256,360,239,280,332,311],
[301,0,269,271,290,228,273,305,310],
[254,282,0,238,278,222,266,270,247],
[295,280,313,0,361,271,272,345,293],
[191,261,273,190,0,251,239,281,254],
[312,323,329,280,300,0,267,294,286],
[271,278,285,279,312,284,0,342,313],
[219,246,281,206,270,257,209,0,269],
[240,241,304,258,297,265,238,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,267,283,277,275,280,264],
[275,0,266,282,269,271,272,282,271],
[285,285,0,276,275,274,287,284,262],
[284,269,275,0,283,277,261,291,267],
[268,282,276,268,0,257,266,279,260],
[274,280,277,274,294,0,288,263,277],
[276,279,264,290,285,263,0,283,281],
[271,269,267,260,272,288,268,0,272],
[287,280,289,284,291,274,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,311,307,275,300,317,305,301],
[232,0,278,275,263,269,267,278,250],
[240,273,0,285,245,271,272,265,260],
[244,276,266,0,261,266,270,270,275],
[276,288,306,290,0,284,284,283,270],
[251,282,280,285,267,0,276,262,271],
[234,284,279,281,267,275,0,263,264],
[246,273,286,281,268,289,288,0,256],
[250,301,291,276,281,280,287,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,253,268,257,275,267,255],
[275,0,266,262,280,275,285,281,274],
[285,285,0,280,275,286,289,282,287],
[298,289,271,0,286,277,294,285,280],
[283,271,276,265,0,273,281,272,264],
[294,276,265,274,278,0,294,274,275],
[276,266,262,257,270,257,0,263,259],
[284,270,269,266,279,277,288,0,275],
[296,277,264,271,287,276,292,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,261,279,279,266,258,276,249],
[302,0,306,274,299,294,287,278,282],
[290,245,0,255,286,286,264,278,267],
[272,277,296,0,286,287,284,271,265],
[272,252,265,265,0,259,276,264,267],
[285,257,265,264,292,0,270,266,267],
[293,264,287,267,275,281,0,280,271],
[275,273,273,280,287,285,271,0,278],
[302,269,284,286,284,284,280,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,235,250,252,257,269,283,242],
[297,0,293,282,280,285,282,304,258],
[316,258,0,308,307,264,294,313,294],
[301,269,243,0,288,249,293,288,270],
[299,271,244,263,0,268,287,287,278],
[294,266,287,302,283,0,300,316,284],
[282,269,257,258,264,251,0,269,258],
[268,247,238,263,264,235,282,0,262],
[309,293,257,281,273,267,293,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,251,303,256,277,279,259,274],
[309,0,329,323,282,319,283,305,269],
[300,222,0,311,273,275,292,245,232],
[248,228,240,0,262,259,283,257,267],
[295,269,278,289,0,297,292,293,278],
[274,232,276,292,254,0,280,266,252],
[272,268,259,268,259,271,0,268,230],
[292,246,306,294,258,285,283,0,271],
[277,282,319,284,273,299,321,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,279,278,271,281,259,270],
[282,0,269,294,281,286,285,269,283],
[271,282,0,269,270,251,275,256,267],
[272,257,282,0,284,268,293,261,280],
[273,270,281,267,0,275,283,257,270],
[280,265,300,283,276,0,289,276,270],
[270,266,276,258,268,262,0,256,264],
[292,282,295,290,294,275,295,0,285],
[281,268,284,271,281,281,287,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,314,291,279,288,310,260,295],
[291,0,321,265,281,263,291,235,289],
[237,230,0,238,264,242,297,255,263],
[260,286,313,0,304,272,297,304,277],
[272,270,287,247,0,267,285,244,267],
[263,288,309,279,284,0,309,293,269],
[241,260,254,254,266,242,0,233,272],
[291,316,296,247,307,258,318,0,273],
[256,262,288,274,284,282,279,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,269,282,265,295,247,328,291],
[297,0,262,276,269,316,281,337,290],
[282,289,0,276,259,276,296,314,297],
[269,275,275,0,286,292,256,302,276],
[286,282,292,265,0,303,296,318,290],
[256,235,275,259,248,0,249,295,265],
[304,270,255,295,255,302,0,311,289],
[223,214,237,249,233,256,240,0,248],
[260,261,254,275,261,286,262,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,294,291,296,273,291,273,260],
[242,0,271,258,259,270,280,246,243],
[257,280,0,260,285,267,277,274,274],
[260,293,291,0,291,290,292,276,262],
[255,292,266,260,0,273,277,276,247],
[278,281,284,261,278,0,305,269,271],
[260,271,274,259,274,246,0,245,258],
[278,305,277,275,275,282,306,0,278],
[291,308,277,289,304,280,293,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,295,368,255,321,328,243,220],
[297,0,256,299,230,287,241,254,277],
[256,295,0,320,269,331,336,228,262],
[183,252,231,0,222,314,254,285,275],
[296,321,282,329,0,347,348,257,333],
[230,264,220,237,204,0,271,242,263],
[223,310,215,297,203,280,0,170,255],
[308,297,323,266,294,309,381,0,295],
[331,274,289,276,218,288,296,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,275,262,296,271,273,279,265],
[286,0,277,271,290,280,263,275,272],
[276,274,0,267,285,257,281,286,278],
[289,280,284,0,277,268,270,300,282],
[255,261,266,274,0,254,259,281,281],
[280,271,294,283,297,0,272,294,278],
[278,288,270,281,292,279,0,285,282],
[272,276,265,251,270,257,266,0,264],
[286,279,273,269,270,273,269,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,267,274,273,273,275,278,269],
[276,0,281,259,277,264,272,259,269],
[284,270,0,277,278,266,264,278,276],
[277,292,274,0,280,264,276,263,274],
[278,274,273,271,0,260,270,283,268],
[278,287,285,287,291,0,268,277,278],
[276,279,287,275,281,283,0,276,270],
[273,292,273,288,268,274,275,0,283],
[282,282,275,277,283,273,281,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,278,297,320,255,305,300,277],
[250,0,260,256,288,283,296,283,291],
[273,291,0,260,309,296,289,300,277],
[254,295,291,0,302,276,271,323,287],
[231,263,242,249,0,246,287,269,255],
[296,268,255,275,305,0,292,281,270],
[246,255,262,280,264,259,0,257,249],
[251,268,251,228,282,270,294,0,246],
[274,260,274,264,296,281,302,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,223,353,276,257,242,285,213],
[222,0,268,406,306,299,282,317,314],
[328,283,0,326,264,187,288,230,300],
[198,145,225,0,232,129,152,316,222],
[275,245,287,319,0,246,266,321,343],
[294,252,364,422,305,0,315,412,379],
[309,269,263,399,285,236,0,360,274],
[266,234,321,235,230,139,191,0,296],
[338,237,251,329,208,172,277,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,190,207,161,244,201,276,184],
[295,0,241,231,260,236,246,357,225],
[361,310,0,294,326,319,274,364,357],
[344,320,257,0,264,304,314,354,301],
[390,291,225,287,0,320,296,350,277],
[307,315,232,247,231,0,235,366,273],
[350,305,277,237,255,316,0,356,317],
[275,194,187,197,201,185,195,0,188],
[367,326,194,250,274,278,234,363,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,245,265,300,287,242,227,277],
[293,0,276,292,304,306,261,262,280],
[306,275,0,287,271,280,268,269,294],
[286,259,264,0,281,259,228,238,274],
[251,247,280,270,0,228,256,253,287],
[264,245,271,292,323,0,298,257,293],
[309,290,283,323,295,253,0,292,293],
[324,289,282,313,298,294,259,0,307],
[274,271,257,277,264,258,258,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,312,250,301,278,290,271],
[285,0,289,343,254,317,266,292,294],
[283,262,0,280,231,304,294,297,264],
[239,208,271,0,229,206,229,263,241],
[301,297,320,322,0,255,283,307,318],
[250,234,247,345,296,0,270,252,282],
[273,285,257,322,268,281,0,277,272],
[261,259,254,288,244,299,274,0,280],
[280,257,287,310,233,269,279,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,261,293,268,291,294,283,283],
[246,0,276,267,270,275,270,275,248],
[290,275,0,281,280,293,283,295,273],
[258,284,270,0,278,300,277,271,270],
[283,281,271,273,0,287,265,272,277],
[260,276,258,251,264,0,274,290,255],
[257,281,268,274,286,277,0,287,252],
[268,276,256,280,279,261,264,0,272],
[268,303,278,281,274,296,299,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,245,261,265,280,230,242,283],
[292,0,262,285,291,342,293,304,308],
[306,289,0,289,294,336,261,291,280],
[290,266,262,0,291,287,259,260,247],
[286,260,257,260,0,266,238,245,268],
[271,209,215,264,285,0,264,244,239],
[321,258,290,292,313,287,0,262,264],
[309,247,260,291,306,307,289,0,291],
[268,243,271,304,283,312,287,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,273,272,282,293,270,265],
[276,0,275,276,283,272,278,268,281],
[276,276,0,290,281,301,273,277,275],
[278,275,261,0,282,284,287,280,273],
[279,268,270,269,0,271,289,280,273],
[269,279,250,267,280,0,280,253,257],
[258,273,278,264,262,271,0,262,264],
[281,283,274,271,271,298,289,0,267],
[286,270,276,278,278,294,287,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,270,271,273,273,269,265],
[276,0,288,263,277,290,273,275,284],
[271,263,0,267,263,275,265,259,278],
[281,288,284,0,275,286,277,287,289],
[280,274,288,276,0,296,287,273,268],
[278,261,276,265,255,0,255,278,266],
[278,278,286,274,264,296,0,282,279],
[282,276,292,264,278,273,269,0,279],
[286,267,273,262,283,285,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,297,282,291,277,263,275,300],
[282,0,300,300,293,278,285,271,305],
[254,251,0,260,255,242,262,270,262],
[269,251,291,0,283,263,263,274,278],
[260,258,296,268,0,276,275,296,282],
[274,273,309,288,275,0,272,297,291],
[288,266,289,288,276,279,0,292,306],
[276,280,281,277,255,254,259,0,282],
[251,246,289,273,269,260,245,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,302,264,293,289,279,288,279],
[278,0,289,279,281,273,277,277,290],
[249,262,0,259,272,268,272,274,266],
[287,272,292,0,285,262,293,278,285],
[258,270,279,266,0,262,273,283,267],
[262,278,283,289,289,0,294,282,282],
[272,274,279,258,278,257,0,279,278],
[263,274,277,273,268,269,272,0,272],
[272,261,285,266,284,269,273,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,296,281,277,275,266,279],
[263,0,244,282,296,266,280,256,273],
[282,307,0,320,326,297,261,261,285],
[255,269,231,0,274,245,270,256,229],
[270,255,225,277,0,247,262,247,239],
[274,285,254,306,304,0,275,247,275],
[276,271,290,281,289,276,0,289,292],
[285,295,290,295,304,304,262,0,274],
[272,278,266,322,312,276,259,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,234,282,272,261,271,248,245],
[290,0,287,275,314,302,310,304,311],
[317,264,0,264,308,282,306,267,294],
[269,276,287,0,294,283,296,263,275],
[279,237,243,257,0,246,283,247,266],
[290,249,269,268,305,0,290,265,276],
[280,241,245,255,268,261,0,256,240],
[303,247,284,288,304,286,295,0,294],
[306,240,257,276,285,275,311,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,289,251,288,307,265,281,297],
[254,0,274,280,260,272,288,269,256],
[262,277,0,270,265,293,305,301,302],
[300,271,281,0,296,300,295,318,296],
[263,291,286,255,0,300,292,291,284],
[244,279,258,251,251,0,271,281,288],
[286,263,246,256,259,280,0,285,277],
[270,282,250,233,260,270,266,0,285],
[254,295,249,255,267,263,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,287,290,270,286,290,276,280],
[256,0,270,263,259,273,270,248,274],
[264,281,0,277,277,280,281,253,273],
[261,288,274,0,272,260,287,267,279],
[281,292,274,279,0,275,278,250,271],
[265,278,271,291,276,0,272,274,287],
[261,281,270,264,273,279,0,268,281],
[275,303,298,284,301,277,283,0,285],
[271,277,278,272,280,264,270,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,276,355,308,315,297,281,236],
[263,0,289,265,315,357,384,257,337],
[275,262,0,293,281,322,361,249,292],
[196,286,258,0,258,306,306,234,227],
[243,236,270,293,0,299,292,228,244],
[236,194,229,245,252,0,354,250,217],
[254,167,190,245,259,197,0,215,236],
[270,294,302,317,323,301,336,0,345],
[315,214,259,324,307,334,315,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,282,282,258,321,249,267,320],
[254,0,242,280,310,296,248,318,267],
[269,309,0,276,265,333,291,314,282],
[269,271,275,0,278,343,302,310,322],
[293,241,286,273,0,350,335,357,294],
[230,255,218,208,201,0,255,267,282],
[302,303,260,249,216,296,0,324,278],
[284,233,237,241,194,284,227,0,285],
[231,284,269,229,257,269,273,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,254,252,268,280,251,289,268],
[275,0,239,284,262,271,240,285,274],
[297,312,0,289,278,270,240,290,316],
[299,267,262,0,260,250,246,287,267],
[283,289,273,291,0,278,257,270,293],
[271,280,281,301,273,0,278,262,292],
[300,311,311,305,294,273,0,299,325],
[262,266,261,264,281,289,252,0,273],
[283,277,235,284,258,259,226,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,283,284,274,285,291,273],
[282,0,268,275,273,276,276,286,269],
[265,283,0,279,264,273,266,287,252],
[268,276,272,0,284,281,273,301,262],
[267,278,287,267,0,261,268,279,259],
[277,275,278,270,290,0,278,291,271],
[266,275,285,278,283,273,0,293,281],
[260,265,264,250,272,260,258,0,255],
[278,282,299,289,292,280,270,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,283,246,251,307,232,277,282],
[317,0,247,285,288,308,256,299,240],
[268,304,0,299,333,359,307,304,300],
[305,266,252,0,255,311,280,377,294],
[300,263,218,296,0,276,230,285,307],
[244,243,192,240,275,0,192,287,235],
[319,295,244,271,321,359,0,298,269],
[274,252,247,174,266,264,253,0,317],
[269,311,251,257,244,316,282,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,256,256,294,278,257,269,261],
[295,0,257,310,295,279,280,292,279],
[295,294,0,283,301,306,286,259,294],
[295,241,268,0,293,268,280,260,258],
[257,256,250,258,0,255,260,248,220],
[273,272,245,283,296,0,233,266,253],
[294,271,265,271,291,318,0,266,251],
[282,259,292,291,303,285,285,0,259],
[290,272,257,293,331,298,300,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,279,245,269,288,274,269,281],
[280,0,282,266,283,293,254,273,294],
[272,269,0,259,264,289,259,276,282],
[306,285,292,0,274,301,276,285,269],
[282,268,287,277,0,296,278,284,290],
[263,258,262,250,255,0,269,280,268],
[277,297,292,275,273,282,0,272,288],
[282,278,275,266,267,271,279,0,277],
[270,257,269,282,261,283,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,294,278,271,288,288,300,268],
[228,0,241,239,284,252,259,268,255],
[257,310,0,292,283,291,305,307,250],
[273,312,259,0,280,283,288,298,269],
[280,267,268,271,0,287,291,272,278],
[263,299,260,268,264,0,271,294,238],
[263,292,246,263,260,280,0,270,235],
[251,283,244,253,279,257,281,0,247],
[283,296,301,282,273,313,316,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,291,283,284,262,299,290,281],
[286,0,255,293,303,284,313,313,265],
[260,296,0,275,307,281,321,287,263],
[268,258,276,0,283,266,315,281,248],
[267,248,244,268,0,265,308,277,257],
[289,267,270,285,286,0,307,286,273],
[252,238,230,236,243,244,0,267,274],
[261,238,264,270,274,265,284,0,250],
[270,286,288,303,294,278,277,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,232,251,240,243,257,279,282],
[266,0,237,258,293,267,255,313,288],
[319,314,0,267,303,276,270,322,333],
[300,293,284,0,290,268,281,303,268],
[311,258,248,261,0,255,273,283,256],
[308,284,275,283,296,0,268,311,284],
[294,296,281,270,278,283,0,337,274],
[272,238,229,248,268,240,214,0,283],
[269,263,218,283,295,267,277,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,263,247,268,253,260,245,230],
[306,0,266,281,270,277,254,271,248],
[288,285,0,275,306,269,287,261,265],
[304,270,276,0,284,286,270,277,271],
[283,281,245,267,0,246,254,250,246],
[298,274,282,265,305,0,265,288,258],
[291,297,264,281,297,286,0,273,268],
[306,280,290,274,301,263,278,0,279],
[321,303,286,280,305,293,283,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,258,296,274,254,290,281],
[285,0,280,285,289,271,274,281,277],
[281,271,0,272,297,282,259,274,289],
[293,266,279,0,299,287,274,288,286],
[255,262,254,252,0,264,252,276,262],
[277,280,269,264,287,0,278,273,282],
[297,277,292,277,299,273,0,276,299],
[261,270,277,263,275,278,275,0,271],
[270,274,262,265,289,269,252,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,257,252,257,279,264,263,284],
[292,0,281,273,277,300,280,280,289],
[294,270,0,279,264,294,278,285,302],
[299,278,272,0,268,288,294,285,305],
[294,274,287,283,0,297,288,269,298],
[272,251,257,263,254,0,271,256,281],
[287,271,273,257,263,280,0,266,281],
[288,271,266,266,282,295,285,0,295],
[267,262,249,246,253,270,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,249,298,315,288,296,238],
[278,0,278,280,318,267,287,294,264],
[287,273,0,268,284,307,285,336,331],
[302,271,283,0,269,335,297,320,288],
[253,233,267,282,0,261,273,313,265],
[236,284,244,216,290,0,324,336,286],
[263,264,266,254,278,227,0,291,279],
[255,257,215,231,238,215,260,0,254],
[313,287,220,263,286,265,272,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,290,319,271,273,303,277,249],
[272,0,278,309,271,306,290,283,251],
[261,273,0,330,237,315,279,275,260],
[232,242,221,0,222,260,267,239,238],
[280,280,314,329,0,307,301,261,294],
[278,245,236,291,244,0,258,276,248],
[248,261,272,284,250,293,0,276,243],
[274,268,276,312,290,275,275,0,251],
[302,300,291,313,257,303,308,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,254,237,232,258,248,251,256],
[267,0,275,207,225,264,233,253,250],
[297,276,0,231,267,289,245,243,298],
[314,344,320,0,301,322,292,266,307],
[319,326,284,250,0,280,261,266,304],
[293,287,262,229,271,0,246,219,287],
[303,318,306,259,290,305,0,279,278],
[300,298,308,285,285,332,272,0,281],
[295,301,253,244,247,264,273,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,280,269,287,277,259,255,262],
[299,0,302,281,302,273,268,281,319],
[271,249,0,266,295,274,276,257,289],
[282,270,285,0,310,278,275,290,294],
[264,249,256,241,0,251,259,283,288],
[274,278,277,273,300,0,268,276,296],
[292,283,275,276,292,283,0,257,296],
[296,270,294,261,268,275,294,0,282],
[289,232,262,257,263,255,255,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,208,254,276,254,210,213,248],
[299,0,276,257,305,249,279,262,287],
[343,275,0,282,325,308,288,261,304],
[297,294,269,0,315,276,295,229,252],
[275,246,226,236,0,259,219,230,228],
[297,302,243,275,292,0,236,267,278],
[341,272,263,256,332,315,0,294,295],
[338,289,290,322,321,284,257,0,313],
[303,264,247,299,323,273,256,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,282,311,317,276,295,302],
[282,0,267,259,264,290,274,268,269],
[276,284,0,270,284,284,279,307,281],
[269,292,281,0,297,262,286,287,289],
[240,287,267,254,0,271,266,273,265],
[234,261,267,289,280,0,277,283,260],
[275,277,272,265,285,274,0,286,297],
[256,283,244,264,278,268,265,0,269],
[249,282,270,262,286,291,254,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,266,288,290,264,283,269,264],
[282,0,272,286,271,274,300,265,275],
[285,279,0,279,286,268,281,269,265],
[263,265,272,0,255,233,240,241,258],
[261,280,265,296,0,267,262,243,278],
[287,277,283,318,284,0,292,252,292],
[268,251,270,311,289,259,0,272,285],
[282,286,282,310,308,299,279,0,262],
[287,276,286,293,273,259,266,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,302,265,273,278,284,276,273],
[305,0,294,283,302,288,288,266,261],
[249,257,0,244,262,253,243,252,235],
[286,268,307,0,273,295,275,276,280],
[278,249,289,278,0,272,272,273,250],
[273,263,298,256,279,0,261,271,238],
[267,263,308,276,279,290,0,275,290],
[275,285,299,275,278,280,276,0,270],
[278,290,316,271,301,313,261,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,263,266,255,248,260,257,266],
[286,0,261,292,264,280,273,281,261],
[288,290,0,280,265,270,267,279,257],
[285,259,271,0,260,264,256,269,249],
[296,287,286,291,0,263,287,270,267],
[303,271,281,287,288,0,274,274,266],
[291,278,284,295,264,277,0,271,279],
[294,270,272,282,281,277,280,0,268],
[285,290,294,302,284,285,272,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,279,306,246,305,335,272,297],
[264,0,296,330,252,278,329,311,278],
[272,255,0,268,230,220,285,251,283],
[245,221,283,0,305,266,304,232,307],
[305,299,321,246,0,285,321,325,244],
[246,273,331,285,266,0,309,269,276],
[216,222,266,247,230,242,0,215,251],
[279,240,300,319,226,282,336,0,279],
[254,273,268,244,307,275,300,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,270,295,292,270,281,253,256],
[275,0,263,292,281,262,303,270,287],
[281,288,0,292,279,256,284,257,242],
[256,259,259,0,274,240,279,226,239],
[259,270,272,277,0,249,284,251,259],
[281,289,295,311,302,0,290,267,261],
[270,248,267,272,267,261,0,237,278],
[298,281,294,325,300,284,314,0,269],
[295,264,309,312,292,290,273,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,223,329,279,232,284,267,286],
[273,0,303,298,270,274,251,308,309],
[328,248,0,347,266,285,325,275,263],
[222,253,204,0,241,204,259,233,225],
[272,281,285,310,0,309,321,301,270],
[319,277,266,347,242,0,309,270,275],
[267,300,226,292,230,242,0,239,250],
[284,243,276,318,250,281,312,0,288],
[265,242,288,326,281,276,301,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,279,290,254,283,296,307,298],
[266,0,277,280,279,276,285,315,295],
[272,274,0,290,269,276,297,297,299],
[261,271,261,0,265,269,286,279,309],
[297,272,282,286,0,301,297,305,316],
[268,275,275,282,250,0,290,280,298],
[255,266,254,265,254,261,0,256,293],
[244,236,254,272,246,271,295,0,286],
[253,256,252,242,235,253,258,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,274,284,267,269,276,258,281],
[268,0,263,280,268,295,272,259,276],
[277,288,0,295,286,280,300,280,275],
[267,271,256,0,261,272,286,270,289],
[284,283,265,290,0,295,298,282,275],
[282,256,271,279,256,0,290,278,276],
[275,279,251,265,253,261,0,253,270],
[293,292,271,281,269,273,298,0,274],
[270,275,276,262,276,275,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,308,276,293,307,275,296,295],
[266,0,285,299,287,306,275,297,288],
[243,266,0,277,260,290,246,280,293],
[275,252,274,0,264,290,257,276,261],
[258,264,291,287,0,296,277,289,302],
[244,245,261,261,255,0,240,276,271],
[276,276,305,294,274,311,0,261,295],
[255,254,271,275,262,275,290,0,280],
[256,263,258,290,249,280,256,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,284,273,270,284,262,284,290],
[264,0,243,246,265,278,265,255,275],
[267,308,0,282,285,280,274,288,285],
[278,305,269,0,277,284,274,253,287],
[281,286,266,274,0,290,255,268,269],
[267,273,271,267,261,0,280,270,277],
[289,286,277,277,296,271,0,293,277],
[267,296,263,298,283,281,258,0,271],
[261,276,266,264,282,274,274,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,281,263,309,317,284,277,278],
[231,0,282,218,267,294,227,219,231],
[270,269,0,223,277,309,221,247,258],
[288,333,328,0,320,318,266,294,288],
[242,284,274,231,0,311,226,214,230],
[234,257,242,233,240,0,217,216,244],
[267,324,330,285,325,334,0,257,301],
[274,332,304,257,337,335,294,0,301],
[273,320,293,263,321,307,250,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,267,294,268,257,262,277,281],
[289,0,309,286,298,287,280,269,314],
[284,242,0,280,274,266,246,263,270],
[257,265,271,0,257,269,237,244,266],
[283,253,277,294,0,261,253,280,272],
[294,264,285,282,290,0,258,269,268],
[289,271,305,314,298,293,0,275,267],
[274,282,288,307,271,282,276,0,285],
[270,237,281,285,279,283,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,282,302,330,281,288,274,273],
[254,0,267,285,291,262,291,254,262],
[269,284,0,283,294,295,285,268,274],
[249,266,268,0,290,276,272,245,260],
[221,260,257,261,0,256,266,241,266],
[270,289,256,275,295,0,275,276,274],
[263,260,266,279,285,276,0,259,260],
[277,297,283,306,310,275,292,0,302],
[278,289,277,291,285,277,291,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,268,270,271,282,264,285,266],
[286,0,273,281,281,279,279,268,267],
[283,278,0,272,268,288,268,276,265],
[281,270,279,0,263,302,285,290,271],
[280,270,283,288,0,299,290,301,291],
[269,272,263,249,252,0,259,271,262],
[287,272,283,266,261,292,0,282,262],
[266,283,275,261,250,280,269,0,262],
[285,284,286,280,260,289,289,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,274,261,267,289,291,300],
[284,0,279,266,249,274,275,296,280],
[290,272,0,260,258,267,278,292,296],
[277,285,291,0,265,264,273,298,292],
[290,302,293,286,0,274,290,291,293],
[284,277,284,287,277,0,268,297,277],
[262,276,273,278,261,283,0,282,295],
[260,255,259,253,260,254,269,0,280],
[251,271,255,259,258,274,256,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,285,283,277,293,286,295],
[267,0,269,285,280,262,251,249,252],
[278,282,0,280,284,265,276,259,263],
[266,266,271,0,275,280,277,262,258],
[268,271,267,276,0,282,266,268,280],
[274,289,286,271,269,0,281,282,289],
[258,300,275,274,285,270,0,272,280],
[265,302,292,289,283,269,279,0,286],
[256,299,288,293,271,262,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,260,252,265,274,252,316,248],
[349,0,228,313,255,370,326,284,347],
[291,323,0,308,318,381,263,315,354],
[299,238,243,0,234,312,253,299,308],
[286,296,233,317,0,331,271,302,258],
[277,181,170,239,220,0,231,274,280],
[299,225,288,298,280,320,0,314,289],
[235,267,236,252,249,277,237,0,288],
[303,204,197,243,293,271,262,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,285,264,266,270,276,288,254],
[279,0,291,261,256,236,258,255,229],
[266,260,0,241,241,234,243,256,244],
[287,290,310,0,273,275,274,294,249],
[285,295,310,278,0,281,270,286,260],
[281,315,317,276,270,0,292,275,284],
[275,293,308,277,281,259,0,292,265],
[263,296,295,257,265,276,259,0,238],
[297,322,307,302,291,267,286,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,269,317,226,237,272,160,263],
[359,0,337,358,200,295,215,376,205],
[282,214,0,285,140,221,201,394,218],
[234,193,266,0,155,207,307,253,292],
[325,351,411,396,0,248,360,373,244],
[314,256,330,344,303,0,298,263,281],
[279,336,350,244,191,253,0,259,339],
[391,175,157,298,178,288,292,0,226],
[288,346,333,259,307,270,212,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,249,264,266,232,211,208,200],
[338,0,333,336,286,320,283,257,297],
[302,218,0,259,238,267,268,241,240],
[287,215,292,0,280,254,283,311,234],
[285,265,313,271,0,278,335,249,217],
[319,231,284,297,273,0,278,239,202],
[340,268,283,268,216,273,0,283,272],
[343,294,310,240,302,312,268,0,287],
[351,254,311,317,334,349,279,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,280,263,277,272,273,254],
[275,0,292,273,283,277,250,276,276],
[271,259,0,278,280,273,278,278,260],
[271,278,273,0,281,290,260,266,260],
[288,268,271,270,0,278,263,277,258],
[274,274,278,261,273,0,267,275,274],
[279,301,273,291,288,284,0,288,288],
[278,275,273,285,274,276,263,0,260],
[297,275,291,291,293,277,263,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,293,262,283,270,267,280,289],
[290,0,244,254,271,275,280,259,275],
[258,307,0,260,278,291,301,272,275],
[289,297,291,0,270,275,289,271,275],
[268,280,273,281,0,297,299,272,287],
[281,276,260,276,254,0,301,270,249],
[284,271,250,262,252,250,0,251,263],
[271,292,279,280,279,281,300,0,284],
[262,276,276,276,264,302,288,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,261,278,268,306,254,258,247],
[253,0,257,247,264,262,253,253,244],
[290,294,0,286,270,294,263,267,280],
[273,304,265,0,270,288,276,269,259],
[283,287,281,281,0,310,263,271,273],
[245,289,257,263,241,0,241,250,247],
[297,298,288,275,288,310,0,285,285],
[293,298,284,282,280,301,266,0,280],
[304,307,271,292,278,304,266,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,106,228,173,252,350,266,238],
[364,0,351,313,184,337,337,188,119],
[445,200,0,201,105,337,337,188,238],
[323,238,350,0,281,472,510,386,277],
[378,367,446,270,0,310,391,267,198],
[299,214,214,79,241,0,324,266,157],
[201,214,214,41,160,227,0,283,78],
[285,363,363,165,284,285,268,0,227],
[313,432,313,274,353,394,473,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,287,294,299,273,291,273,272],
[251,0,263,259,263,258,251,246,241],
[264,288,0,299,293,288,299,284,282],
[257,292,252,0,278,272,270,263,245],
[252,288,258,273,0,252,263,268,249],
[278,293,263,279,299,0,296,272,266],
[260,300,252,281,288,255,0,267,249],
[278,305,267,288,283,279,284,0,276],
[279,310,269,306,302,285,302,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,284,305,280,277,263,285,274],
[273,0,265,275,250,289,269,266,259],
[267,286,0,258,277,268,243,260,243],
[246,276,293,0,264,279,279,272,250],
[271,301,274,287,0,284,251,268,279],
[274,262,283,272,267,0,264,275,263],
[288,282,308,272,300,287,0,280,275],
[266,285,291,279,283,276,271,0,271],
[277,292,308,301,272,288,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,270,253,285,235,258,250,256],
[299,0,276,280,295,267,282,287,300],
[281,275,0,275,260,254,270,264,272],
[298,271,276,0,288,255,276,269,274],
[266,256,291,263,0,223,252,248,265],
[316,284,297,296,328,0,288,264,279],
[293,269,281,275,299,263,0,290,277],
[301,264,287,282,303,287,261,0,278],
[295,251,279,277,286,272,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,271,265,270,256,277,270],
[279,0,284,274,279,273,269,286,281],
[287,267,0,273,275,287,269,270,290],
[280,277,278,0,270,300,258,275,269],
[286,272,276,281,0,294,281,284,287],
[281,278,264,251,257,0,256,248,272],
[295,282,282,293,270,295,0,273,287],
[274,265,281,276,267,303,278,0,291],
[281,270,261,282,264,279,264,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,267,253,257,275,293,289,288],
[219,0,272,252,260,241,243,263,238],
[284,279,0,271,293,272,247,306,269],
[298,299,280,0,295,261,231,292,261],
[294,291,258,256,0,261,245,299,288],
[276,310,279,290,290,0,258,264,285],
[258,308,304,320,306,293,0,311,298],
[262,288,245,259,252,287,240,0,258],
[263,313,282,290,263,266,253,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,229,273,287,262,275,305,243],
[244,0,250,175,232,285,249,247,212],
[322,301,0,308,256,334,285,307,334],
[278,376,243,0,277,292,297,293,231],
[264,319,295,274,0,333,264,339,280],
[289,266,217,259,218,0,227,279,231],
[276,302,266,254,287,324,0,336,216],
[246,304,244,258,212,272,215,0,253],
[308,339,217,320,271,320,335,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,272,287,279,282,305,288],
[281,0,282,259,276,289,282,291,286],
[276,269,0,278,262,279,281,271,278],
[279,292,273,0,278,280,271,300,280],
[264,275,289,273,0,283,291,290,286],
[272,262,272,271,268,0,264,283,262],
[269,269,270,280,260,287,0,281,279],
[246,260,280,251,261,268,270,0,276],
[263,265,273,271,265,289,272,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,276,296,282,276,267,255,268],
[259,0,251,272,280,281,254,217,281],
[275,300,0,320,293,295,284,281,312],
[255,279,231,0,258,278,259,231,264],
[269,271,258,293,0,277,255,250,274],
[275,270,256,273,274,0,270,264,269],
[284,297,267,292,296,281,0,272,280],
[296,334,270,320,301,287,279,0,301],
[283,270,239,287,277,282,271,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,281,276,274,261,282,301,285],
[264,0,257,293,291,295,266,300,251],
[270,294,0,297,302,284,297,315,295],
[275,258,254,0,298,284,283,301,286],
[277,260,249,253,0,256,283,304,293],
[290,256,267,267,295,0,294,320,279],
[269,285,254,268,268,257,0,305,295],
[250,251,236,250,247,231,246,0,247],
[266,300,256,265,258,272,256,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,324,192,173,182,265,281,300],
[163,0,201,320,173,217,201,281,281],
[227,350,0,365,173,221,384,237,365],
[359,231,186,0,289,353,372,353,353],
[378,378,378,262,0,127,377,290,255],
[369,334,330,198,424,0,472,385,385],
[286,350,167,179,174,79,0,143,115],
[270,270,314,198,261,166,408,0,350],
[251,270,186,198,296,166,436,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,247,283,255,244,255,238,267],
[338,0,312,294,306,315,272,281,318],
[304,239,0,277,310,272,303,271,253],
[268,257,274,0,301,273,303,243,286],
[296,245,241,250,0,270,298,249,279],
[307,236,279,278,281,0,281,240,302],
[296,279,248,248,253,270,0,268,267],
[313,270,280,308,302,311,283,0,319],
[284,233,298,265,272,249,284,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,331,276,290,302,321,275,284],
[253,0,281,253,247,259,269,256,258],
[220,270,0,225,254,262,257,259,254],
[275,298,326,0,291,283,277,284,283],
[261,304,297,260,0,262,291,265,264],
[249,292,289,268,289,0,285,251,240],
[230,282,294,274,260,266,0,271,260],
[276,295,292,267,286,300,280,0,254],
[267,293,297,268,287,311,291,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,297,279,267,243,252,281,247],
[308,0,290,308,252,282,286,291,267],
[254,261,0,256,244,239,248,249,239],
[272,243,295,0,259,263,218,244,249],
[284,299,307,292,0,286,263,262,291],
[308,269,312,288,265,0,273,265,265],
[299,265,303,333,288,278,0,277,266],
[270,260,302,307,289,286,274,0,277],
[304,284,312,302,260,286,285,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,304,264,300,337,275,312,245],
[252,0,315,295,313,315,291,310,278],
[247,236,0,270,273,296,285,290,270],
[287,256,281,0,276,283,272,275,272],
[251,238,278,275,0,287,286,299,264],
[214,236,255,268,264,0,254,247,231],
[276,260,266,279,265,297,0,301,271],
[239,241,261,276,252,304,250,0,223],
[306,273,281,279,287,320,280,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,278,272,261,290,262,274,276],
[267,0,296,274,290,283,272,275,265],
[273,255,0,283,265,283,266,269,270],
[279,277,268,0,283,277,257,271,267],
[290,261,286,268,0,274,264,279,268],
[261,268,268,274,277,0,270,268,274],
[289,279,285,294,287,281,0,275,264],
[277,276,282,280,272,283,276,0,276],
[275,286,281,284,283,277,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,220,234,204,294,232,257,258],
[231,0,259,307,236,188,202,325,255],
[331,292,0,276,277,337,261,343,284],
[317,244,275,0,236,328,268,319,329],
[347,315,274,315,0,353,317,312,335],
[257,363,214,223,198,0,249,276,258],
[319,349,290,283,234,302,0,315,308],
[294,226,208,232,239,275,236,0,268],
[293,296,267,222,216,293,243,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,213,295,288,302,305,282,271],
[273,0,269,280,278,280,265,277,275],
[338,282,0,275,309,310,335,309,282],
[256,271,276,0,269,287,269,251,254],
[263,273,242,282,0,284,288,286,264],
[249,271,241,264,267,0,291,267,235],
[246,286,216,282,263,260,0,263,261],
[269,274,242,300,265,284,288,0,272],
[280,276,269,297,287,316,290,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,274,276,275,271,271,250],
[259,0,257,265,257,264,289,269,260],
[271,294,0,261,275,283,274,277,263],
[277,286,290,0,270,271,273,264,279],
[275,294,276,281,0,267,282,271,266],
[276,287,268,280,284,0,276,280,274],
[280,262,277,278,269,275,0,265,268],
[280,282,274,287,280,271,286,0,270],
[301,291,288,272,285,277,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,251,261,261,268,280,269,283],
[288,0,259,284,290,288,279,274,269],
[300,292,0,268,281,277,260,284,287],
[290,267,283,0,279,280,278,288,263],
[290,261,270,272,0,276,268,269,285],
[283,263,274,271,275,0,274,277,271],
[271,272,291,273,283,277,0,313,274],
[282,277,267,263,282,274,238,0,270],
[268,282,264,288,266,280,277,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,276,272,265,279,281,285,274],
[288,0,274,264,281,280,290,281,277],
[275,277,0,269,270,272,293,284,271],
[279,287,282,0,289,277,293,293,274],
[286,270,281,262,0,281,277,279,282],
[272,271,279,274,270,0,287,294,275],
[270,261,258,258,274,264,0,290,275],
[266,270,267,258,272,257,261,0,254],
[277,274,280,277,269,276,276,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,297,266,285,279,305,276,307],
[261,0,306,298,273,254,310,308,302],
[254,245,0,281,276,267,251,240,281],
[285,253,270,0,296,245,291,305,269],
[266,278,275,255,0,230,282,280,286],
[272,297,284,306,321,0,320,293,316],
[246,241,300,260,269,231,0,255,256],
[275,243,311,246,271,258,296,0,276],
[244,249,270,282,265,235,295,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,308,260,310,312,252,316,309],
[263,0,288,207,289,275,262,273,312],
[243,263,0,218,287,286,281,277,269],
[291,344,333,0,331,298,268,284,267],
[241,262,264,220,0,251,262,253,296],
[239,276,265,253,300,0,215,264,280],
[299,289,270,283,289,336,0,304,291],
[235,278,274,267,298,287,247,0,308],
[242,239,282,284,255,271,260,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,268,264,269,281,292,292,262],
[257,0,280,273,257,281,285,284,273],
[283,271,0,237,272,266,263,289,271],
[287,278,314,0,255,283,285,280,279],
[282,294,279,296,0,272,293,270,293],
[270,270,285,268,279,0,272,308,280],
[259,266,288,266,258,279,0,258,276],
[259,267,262,271,281,243,293,0,265],
[289,278,280,272,258,271,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,277,280,293,268,288,294],
[268,0,262,278,277,270,273,292,276],
[280,289,0,277,297,297,284,275,278],
[274,273,274,0,289,266,265,278,269],
[271,274,254,262,0,263,271,271,273],
[258,281,254,285,288,0,281,289,278],
[283,278,267,286,280,270,0,293,277],
[263,259,276,273,280,262,258,0,281],
[257,275,273,282,278,273,274,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,226,276,290,247,267,274,254],
[287,0,303,325,320,293,269,313,302],
[325,248,0,299,301,295,304,297,305],
[275,226,252,0,263,259,239,269,241],
[261,231,250,288,0,295,258,310,250],
[304,258,256,292,256,0,246,302,254],
[284,282,247,312,293,305,0,324,286],
[277,238,254,282,241,249,227,0,256],
[297,249,246,310,301,297,265,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,306,272,282,268,283,287],
[273,0,283,282,275,266,246,283,265],
[276,268,0,280,260,260,259,274,271],
[245,269,271,0,253,275,267,279,269],
[279,276,291,298,0,283,271,279,278],
[269,285,291,276,268,0,267,272,266],
[283,305,292,284,280,284,0,304,267],
[268,268,277,272,272,279,247,0,274],
[264,286,280,282,273,285,284,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,252,286,257,261,267,285,246],
[269,0,260,271,279,241,236,282,262],
[299,291,0,273,262,284,291,289,277],
[265,280,278,0,293,257,265,290,262],
[294,272,289,258,0,264,280,301,289],
[290,310,267,294,287,0,260,278,287],
[284,315,260,286,271,291,0,275,257],
[266,269,262,261,250,273,276,0,274],
[305,289,274,289,262,264,294,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,276,282,273,269,284,284],
[271,0,272,278,273,275,282,284,274],
[267,279,0,297,280,270,278,268,276],
[275,273,254,0,282,277,260,265,285],
[269,278,271,269,0,286,265,280,272],
[278,276,281,274,265,0,263,273,269],
[282,269,273,291,286,288,0,288,281],
[267,267,283,286,271,278,263,0,277],
[267,277,275,266,279,282,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,328,258,240,265,288,284,278],
[261,0,293,270,254,295,248,270,288],
[223,258,0,219,213,272,259,262,243],
[293,281,332,0,267,276,259,340,269],
[311,297,338,284,0,263,275,275,262],
[286,256,279,275,288,0,248,265,272],
[263,303,292,292,276,303,0,322,274],
[267,281,289,211,276,286,229,0,274],
[273,263,308,282,289,279,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,273,242,262,263,243,273,256],
[299,0,280,248,256,261,248,256,261],
[278,271,0,261,270,261,275,261,272],
[309,303,290,0,300,299,271,320,288],
[289,295,281,251,0,277,276,316,266],
[288,290,290,252,274,0,273,278,266],
[308,303,276,280,275,278,0,262,267],
[278,295,290,231,235,273,289,0,262],
[295,290,279,263,285,285,284,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,263,304,283,262,289,259,269],
[288,0,301,328,270,312,292,308,299],
[288,250,0,273,255,253,269,298,273],
[247,223,278,0,236,258,249,284,235],
[268,281,296,315,0,288,274,282,279],
[289,239,298,293,263,0,279,323,275],
[262,259,282,302,277,272,0,292,264],
[292,243,253,267,269,228,259,0,253],
[282,252,278,316,272,276,287,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,285,323,308,263,309,345,253],
[281,0,248,284,304,247,290,329,241],
[266,303,0,288,312,318,328,338,298],
[228,267,263,0,285,245,284,303,234],
[243,247,239,266,0,224,286,296,213],
[288,304,233,306,327,0,319,341,244],
[242,261,223,267,265,232,0,297,228],
[206,222,213,248,255,210,254,0,215],
[298,310,253,317,338,307,323,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,320,280,305,283,302,263,293],
[272,0,308,261,250,282,292,281,310],
[231,243,0,257,232,263,264,276,227],
[271,290,294,0,239,263,235,300,263],
[246,301,319,312,0,287,341,273,341],
[268,269,288,288,264,0,270,270,249],
[249,259,287,316,210,281,0,301,318],
[288,270,275,251,278,281,250,0,276],
[258,241,324,288,210,302,233,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,271,325,268,283,288,295,292],
[261,0,271,285,264,268,282,290,286],
[280,280,0,291,281,270,290,293,278],
[226,266,260,0,241,234,265,263,250],
[283,287,270,310,0,278,271,288,289],
[268,283,281,317,273,0,291,293,281],
[263,269,261,286,280,260,0,291,275],
[256,261,258,288,263,258,260,0,282],
[259,265,273,301,262,270,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,285,293,287,279,271,279,264],
[277,0,296,275,292,272,264,275,254],
[266,255,0,267,274,267,254,268,244],
[258,276,284,0,280,278,273,270,259],
[264,259,277,271,0,286,269,274,262],
[272,279,284,273,265,0,277,273,263],
[280,287,297,278,282,274,0,270,276],
[272,276,283,281,277,278,281,0,268],
[287,297,307,292,289,288,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,276,277,285,295,296,342,290],
[285,0,264,283,306,290,276,327,272],
[275,287,0,302,296,306,301,333,278],
[274,268,249,0,276,283,271,297,239],
[266,245,255,275,0,272,274,310,283],
[256,261,245,268,279,0,250,275,281],
[255,275,250,280,277,301,0,305,276],
[209,224,218,254,241,276,246,0,232],
[261,279,273,312,268,270,275,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,248,255,259,258,267,268,270],
[251,0,239,241,233,256,253,260,258],
[303,312,0,281,275,272,290,327,309],
[296,310,270,0,268,277,270,305,290],
[292,318,276,283,0,305,275,299,289],
[293,295,279,274,246,0,273,291,304],
[284,298,261,281,276,278,0,293,284],
[283,291,224,246,252,260,258,0,275],
[281,293,242,261,262,247,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,264,262,285,300,301,280,263],
[266,0,279,269,264,305,268,281,267],
[287,272,0,256,287,305,277,249,268],
[289,282,295,0,271,281,301,279,293],
[266,287,264,280,0,302,281,258,258],
[251,246,246,270,249,0,284,254,245],
[250,283,274,250,270,267,0,256,233],
[271,270,302,272,293,297,295,0,292],
[288,284,283,258,293,306,318,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,275,266,255,270,250,255,266],
[259,0,247,283,253,274,251,259,266],
[276,304,0,298,299,277,270,271,273],
[285,268,253,0,234,271,262,285,253],
[296,298,252,317,0,278,281,281,277],
[281,277,274,280,273,0,264,267,270],
[301,300,281,289,270,287,0,281,284],
[296,292,280,266,270,284,270,0,268],
[285,285,278,298,274,281,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,272,280,289,266,283,264,273],
[292,0,281,274,296,281,274,259,270],
[279,270,0,274,287,277,283,258,281],
[271,277,277,0,276,278,291,273,282],
[262,255,264,275,0,255,277,264,258],
[285,270,274,273,296,0,284,268,280],
[268,277,268,260,274,267,0,270,264],
[287,292,293,278,287,283,281,0,266],
[278,281,270,269,293,271,287,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,139,138,346,327,248,286,214],
[450,0,324,244,426,353,397,413,294],
[412,227,0,295,361,321,317,267,362],
[413,307,256,0,394,315,356,375,324],
[205,125,190,157,0,269,242,326,231],
[224,198,230,236,282,0,227,219,313],
[303,154,234,195,309,324,0,280,272],
[265,138,284,176,225,332,271,0,193],
[337,257,189,227,320,238,279,358,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,311,260,248,258,269,227,272],
[303,0,323,282,249,300,301,261,254],
[240,228,0,238,213,249,244,205,227],
[291,269,313,0,274,267,281,278,276],
[303,302,338,277,0,295,288,280,268],
[293,251,302,284,256,0,294,273,278],
[282,250,307,270,263,257,0,266,289],
[324,290,346,273,271,278,285,0,281],
[279,297,324,275,283,273,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,276,270,277,270,267,265],
[285,0,291,267,248,277,270,267,276],
[277,260,0,269,243,267,260,266,268],
[275,284,282,0,257,262,260,277,273],
[281,303,308,294,0,283,275,294,293],
[274,274,284,289,268,0,265,278,267],
[281,281,291,291,276,286,0,268,269],
[284,284,285,274,257,273,283,0,260],
[286,275,283,278,258,284,282,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,279,303,258,265,256,278,317],
[262,0,271,262,280,250,235,280,283],
[272,280,0,312,263,239,241,267,238],
[248,289,239,0,221,220,263,297,263],
[293,271,288,330,0,291,238,290,252],
[286,301,312,331,260,0,236,266,267],
[295,316,310,288,313,315,0,280,274],
[273,271,284,254,261,285,271,0,295],
[234,268,313,288,299,284,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,248,271,283,247,260,277],
[282,0,275,276,281,276,267,285,277],
[284,276,0,277,263,276,271,258,268],
[303,275,274,0,294,289,277,267,285],
[280,270,288,257,0,281,263,282,282],
[268,275,275,262,270,0,263,279,284],
[304,284,280,274,288,288,0,286,276],
[291,266,293,284,269,272,265,0,262],
[274,274,283,266,269,267,275,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,332,283,312,355,352,202,318],
[224,0,254,290,323,302,295,183,301],
[219,297,0,254,279,363,357,257,236],
[268,261,297,0,287,358,234,278,330],
[239,228,272,264,0,354,314,224,245],
[196,249,188,193,197,0,257,198,215],
[199,256,194,317,237,294,0,252,285],
[349,368,294,273,327,353,299,0,326],
[233,250,315,221,306,336,266,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,267,289,276,288,263,271,284],
[278,0,263,238,293,275,255,261,281],
[284,288,0,265,292,298,280,273,310],
[262,313,286,0,309,287,271,265,308],
[275,258,259,242,0,276,262,255,281],
[263,276,253,264,275,0,273,253,265],
[288,296,271,280,289,278,0,276,285],
[280,290,278,286,296,298,275,0,302],
[267,270,241,243,270,286,266,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,311,302,296,302,287,267,288],
[254,0,263,282,272,265,283,252,272],
[240,288,0,281,264,290,254,272,281],
[249,269,270,0,251,274,271,246,251],
[255,279,287,300,0,291,286,284,258],
[249,286,261,277,260,0,285,274,252],
[264,268,297,280,265,266,0,252,263],
[284,299,279,305,267,277,299,0,279],
[263,279,270,300,293,299,288,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,285,297,261,283,273,280,277],
[308,0,284,293,283,266,284,287,285],
[266,267,0,283,254,278,280,283,262],
[254,258,268,0,249,289,254,287,252],
[290,268,297,302,0,257,278,292,263],
[268,285,273,262,294,0,283,291,287],
[278,267,271,297,273,268,0,283,265],
[271,264,268,264,259,260,268,0,280],
[274,266,289,299,288,264,286,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,278,288,269,263,272,256,272],
[269,0,269,258,280,266,272,264,285],
[273,282,0,274,281,262,279,278,268],
[263,293,277,0,266,269,274,259,291],
[282,271,270,285,0,279,284,254,266],
[288,285,289,282,272,0,280,268,277],
[279,279,272,277,267,271,0,260,270],
[295,287,273,292,297,283,291,0,292],
[279,266,283,260,285,274,281,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,264,274,262,268,271,267,271],
[283,0,280,285,275,284,298,283,258],
[287,271,0,270,267,267,269,279,272],
[277,266,281,0,260,272,285,292,276],
[289,276,284,291,0,272,292,286,282],
[283,267,284,279,279,0,294,289,279],
[280,253,282,266,259,257,0,267,259],
[284,268,272,259,265,262,284,0,278],
[280,293,279,275,269,272,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,305,248,270,252,246,284,247],
[309,0,297,260,278,264,278,315,261],
[246,254,0,256,258,258,258,293,260],
[303,291,295,0,272,305,293,327,280],
[281,273,293,279,0,268,272,298,267],
[299,287,293,246,283,0,270,293,268],
[305,273,293,258,279,281,0,313,265],
[267,236,258,224,253,258,238,0,239],
[304,290,291,271,284,283,286,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,288,276,283,287,279,277],
[275,0,277,280,278,283,285,266,279],
[280,274,0,290,285,304,298,270,274],
[263,271,261,0,282,257,266,260,270],
[275,273,266,269,0,279,270,265,267],
[268,268,247,294,272,0,267,263,270],
[264,266,253,285,281,284,0,263,269],
[272,285,281,291,286,288,288,0,292],
[274,272,277,281,284,281,282,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,266,264,276,273,273,273,300],
[269,0,277,248,253,257,250,262,279],
[285,274,0,285,288,263,278,264,304],
[287,303,266,0,292,278,275,279,293],
[275,298,263,259,0,258,275,283,292],
[278,294,288,273,293,0,277,281,282],
[278,301,273,276,276,274,0,269,284],
[278,289,287,272,268,270,282,0,288],
[251,272,247,258,259,269,267,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,291,289,269,273,282,277,277],
[281,0,285,286,280,282,292,283,262],
[260,266,0,289,273,268,277,265,253],
[262,265,262,0,271,260,258,264,267],
[282,271,278,280,0,271,282,275,265],
[278,269,283,291,280,0,282,272,277],
[269,259,274,293,269,269,0,268,266],
[274,268,286,287,276,279,283,0,270],
[274,289,298,284,286,274,285,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,304,239,193,323,265,308,344],
[363,0,287,204,319,345,306,305,361],
[247,264,0,260,295,310,277,238,326],
[312,347,291,0,360,343,370,228,318],
[358,232,256,191,0,375,315,274,346],
[228,206,241,208,176,0,293,188,264],
[286,245,274,181,236,258,0,226,307],
[243,246,313,323,277,363,325,0,334],
[207,190,225,233,205,287,244,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,265,261,258,254,256,253,253],
[299,0,277,277,274,271,270,272,275],
[286,274,0,272,283,259,267,276,278],
[290,274,279,0,281,289,274,275,268],
[293,277,268,270,0,273,251,256,275],
[297,280,292,262,278,0,271,272,272],
[295,281,284,277,300,280,0,274,275],
[298,279,275,276,295,279,277,0,274],
[298,276,273,283,276,279,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,272,275,253,299,268,252,289],
[255,0,288,292,241,268,256,221,244],
[279,263,0,258,238,287,237,263,254],
[276,259,293,0,255,254,266,259,250],
[298,310,313,296,0,305,263,296,287],
[252,283,264,297,246,0,256,247,247],
[283,295,314,285,288,295,0,260,278],
[299,330,288,292,255,304,291,0,297],
[262,307,297,301,264,304,273,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,238,240,215,258,289,292,334],
[318,0,266,177,271,263,291,279,310],
[313,285,0,279,268,277,330,293,331],
[311,374,272,0,297,298,278,294,299],
[336,280,283,254,0,250,343,268,342],
[293,288,274,253,301,0,292,257,364],
[262,260,221,273,208,259,0,258,273],
[259,272,258,257,283,294,293,0,291],
[217,241,220,252,209,187,278,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,326,357,311,343,305,355,270],
[233,0,297,282,272,160,324,303,285],
[225,254,0,318,309,258,203,333,307],
[194,269,233,0,290,243,305,313,291],
[240,279,242,261,0,277,256,353,251],
[208,391,293,308,274,0,322,330,274],
[246,227,348,246,295,229,0,305,329],
[196,248,218,238,198,221,246,0,198],
[281,266,244,260,300,277,222,353,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,294,297,320,314,316,298,328],
[280,0,270,255,291,272,285,248,278],
[257,281,0,266,303,282,301,268,287],
[254,296,285,0,296,296,275,245,284],
[231,260,248,255,0,242,240,254,257],
[237,279,269,255,309,0,290,243,261],
[235,266,250,276,311,261,0,241,282],
[253,303,283,306,297,308,310,0,311],
[223,273,264,267,294,290,269,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,270,285,253,258,270,267,267],
[291,0,275,298,272,273,285,285,280],
[281,276,0,292,295,270,283,276,269],
[266,253,259,0,271,274,269,263,265],
[298,279,256,280,0,274,277,291,280],
[293,278,281,277,277,0,273,277,280],
[281,266,268,282,274,278,0,266,271],
[284,266,275,288,260,274,285,0,278],
[284,271,282,286,271,271,280,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,298,285,302,301,295,276,274],
[223,0,265,221,251,278,246,264,245],
[253,286,0,245,258,276,265,277,255],
[266,330,306,0,304,306,285,303,301],
[249,300,293,247,0,288,250,286,287],
[250,273,275,245,263,0,245,259,260],
[256,305,286,266,301,306,0,286,277],
[275,287,274,248,265,292,265,0,276],
[277,306,296,250,264,291,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,353,242,447,236,372,307,292,272],
[198,0,197,198,249,216,229,262,153],
[309,354,0,322,240,330,278,295,253],
[104,353,229,0,215,217,208,264,197],
[315,302,311,336,0,343,225,341,292],
[179,335,221,334,208,0,292,260,190],
[244,322,273,343,326,259,0,263,213],
[259,289,256,287,210,291,288,0,182],
[279,398,298,354,259,361,338,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,281,297,274,281,292,277],
[273,0,286,265,287,267,272,279,263],
[257,265,0,248,265,262,256,269,253],
[270,286,303,0,268,284,257,273,269],
[254,264,286,283,0,259,270,282,263],
[277,284,289,267,292,0,274,289,272],
[270,279,295,294,281,277,0,273,288],
[259,272,282,278,269,262,278,0,261],
[274,288,298,282,288,279,263,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,257,244,221,264,292,218,254],
[289,0,306,269,249,295,316,271,296],
[294,245,0,266,256,262,317,267,273],
[307,282,285,0,248,296,286,261,263],
[330,302,295,303,0,326,323,265,319],
[287,256,289,255,225,0,282,223,253],
[259,235,234,265,228,269,0,230,273],
[333,280,284,290,286,328,321,0,273],
[297,255,278,288,232,298,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,298,281,299,237,283,251,253],
[282,0,294,284,304,293,270,286,270],
[253,257,0,264,278,259,260,250,244],
[270,267,287,0,297,262,276,275,260],
[252,247,273,254,0,248,261,255,253],
[314,258,292,289,303,0,289,279,292],
[268,281,291,275,290,262,0,273,272],
[300,265,301,276,296,272,278,0,294],
[298,281,307,291,298,259,279,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,268,286,298,281,277,281],
[273,0,260,248,290,295,291,253,272],
[279,291,0,263,271,305,282,295,266],
[283,303,288,0,286,309,308,261,277],
[265,261,280,265,0,315,292,283,284],
[253,256,246,242,236,0,262,272,271],
[270,260,269,243,259,289,0,264,260],
[274,298,256,290,268,279,287,0,286],
[270,279,285,274,267,280,291,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,280,269,265,253,252,238,262],
[289,0,274,257,290,257,266,267,270],
[271,277,0,267,255,273,251,250,272],
[282,294,284,0,272,262,256,270,267],
[286,261,296,279,0,270,264,264,267],
[298,294,278,289,281,0,259,279,265],
[299,285,300,295,287,292,0,263,292],
[313,284,301,281,287,272,288,0,282],
[289,281,279,284,284,286,259,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,237,281,269,289,305,266,282],
[283,0,264,273,274,270,295,279,262],
[314,287,0,306,275,254,332,301,282],
[270,278,245,0,282,248,270,262,284],
[282,277,276,269,0,284,311,241,255],
[262,281,297,303,267,0,338,259,302],
[246,256,219,281,240,213,0,252,244],
[285,272,250,289,310,292,299,0,258],
[269,289,269,267,296,249,307,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,230,265,267,279,261,261,275],
[297,0,254,280,275,291,275,272,281],
[321,297,0,283,286,302,285,263,296],
[286,271,268,0,276,267,259,269,281],
[284,276,265,275,0,276,282,252,268],
[272,260,249,284,275,0,247,260,279],
[290,276,266,292,269,304,0,289,270],
[290,279,288,282,299,291,262,0,281],
[276,270,255,270,283,272,281,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,256,253,289,270,264,292,271],
[273,0,247,255,285,242,270,298,243],
[295,304,0,303,321,262,281,318,280],
[298,296,248,0,274,261,256,294,262],
[262,266,230,277,0,235,215,262,222],
[281,309,289,290,316,0,269,329,292],
[287,281,270,295,336,282,0,329,286],
[259,253,233,257,289,222,222,0,225],
[280,308,271,289,329,259,265,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,251,274,258,276,284,269,292],
[260,0,274,286,271,292,230,276,285],
[300,277,0,287,272,305,264,278,296],
[277,265,264,0,242,276,256,261,276],
[293,280,279,309,0,299,283,258,282],
[275,259,246,275,252,0,247,292,271],
[267,321,287,295,268,304,0,275,296],
[282,275,273,290,293,259,276,0,298],
[259,266,255,275,269,280,255,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,252,258,267,254,268,253],
[281,0,288,259,277,265,279,296,251],
[269,263,0,252,247,271,265,262,254],
[299,292,299,0,283,273,276,297,268],
[293,274,304,268,0,276,277,279,275],
[284,286,280,278,275,0,299,263,273],
[297,272,286,275,274,252,0,285,282],
[283,255,289,254,272,288,266,0,264],
[298,300,297,283,276,278,269,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,259,256,259,286,273,286,250],
[293,0,291,277,241,275,286,293,288],
[292,260,0,261,247,285,287,286,274],
[295,274,290,0,283,286,293,324,302],
[292,310,304,268,0,284,305,315,303],
[265,276,266,265,267,0,283,286,269],
[278,265,264,258,246,268,0,292,281],
[265,258,265,227,236,265,259,0,252],
[301,263,277,249,248,282,270,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,261,276,255,271,290,266,273],
[267,0,247,288,263,278,268,279,279],
[290,304,0,296,291,297,277,270,301],
[275,263,255,0,262,264,268,265,281],
[296,288,260,289,0,286,290,276,288],
[280,273,254,287,265,0,298,277,290],
[261,283,274,283,261,253,0,297,277],
[285,272,281,286,275,274,254,0,288],
[278,272,250,270,263,261,274,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,275,254,279,274,273,272,257],
[302,0,298,269,281,277,274,280,288],
[276,253,0,264,281,258,272,268,263],
[297,282,287,0,276,260,276,285,278],
[272,270,270,275,0,264,273,275,279],
[277,274,293,291,287,0,270,282,273],
[278,277,279,275,278,281,0,276,255],
[279,271,283,266,276,269,275,0,268],
[294,263,288,273,272,278,296,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,266,286,266,285,291,277,315],
[295,0,282,296,284,270,287,288,278],
[285,269,0,282,290,275,277,301,336],
[265,255,269,0,261,265,273,256,289],
[285,267,261,290,0,285,275,270,296],
[266,281,276,286,266,0,283,308,288],
[260,264,274,278,276,268,0,279,276],
[274,263,250,295,281,243,272,0,265],
[236,273,215,262,255,263,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,285,286,266,261,276,277,254],
[299,0,271,275,253,273,305,276,243],
[266,280,0,277,258,254,288,281,285],
[265,276,274,0,259,254,292,279,285],
[285,298,293,292,0,278,308,303,270],
[290,278,297,297,273,0,312,281,294],
[275,246,263,259,243,239,0,276,252],
[274,275,270,272,248,270,275,0,273],
[297,308,266,266,281,257,299,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,281,283,258,266,272,264,300],
[282,0,297,299,271,284,282,279,293],
[270,254,0,282,262,268,273,262,287],
[268,252,269,0,263,262,253,259,271],
[293,280,289,288,0,258,290,267,296],
[285,267,283,289,293,0,277,274,288],
[279,269,278,298,261,274,0,267,271],
[287,272,289,292,284,277,284,0,291],
[251,258,264,280,255,263,280,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,267,301,281,280,309,279],
[270,0,292,278,313,308,287,297,313],
[262,259,0,267,272,293,274,269,274],
[284,273,284,0,293,298,284,289,288],
[250,238,279,258,0,248,258,281,282],
[270,243,258,253,303,0,263,286,273],
[271,264,277,267,293,288,0,303,284],
[242,254,282,262,270,265,248,0,271],
[272,238,277,263,269,278,267,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,282,284,252,274,275,264,273],
[291,0,288,287,276,287,263,279,264],
[269,263,0,301,249,288,266,268,260],
[267,264,250,0,269,267,244,263,249],
[299,275,302,282,0,291,270,276,276],
[277,264,263,284,260,0,267,272,252],
[276,288,285,307,281,284,0,275,262],
[287,272,283,288,275,279,276,0,256],
[278,287,291,302,275,299,289,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,296,300,286,296,273,275,302],
[263,0,291,292,289,259,259,265,276],
[255,260,0,245,253,282,267,277,273],
[251,259,306,0,267,272,254,275,284],
[265,262,298,284,0,286,277,270,293],
[255,292,269,279,265,0,270,288,261],
[278,292,284,297,274,281,0,259,279],
[276,286,274,276,281,263,292,0,278],
[249,275,278,267,258,290,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,272,286,287,276,288,263],
[277,0,280,268,277,288,262,280,281],
[276,271,0,265,290,287,277,289,269],
[279,283,286,0,300,312,280,278,274],
[265,274,261,251,0,288,264,252,276],
[264,263,264,239,263,0,259,257,272],
[275,289,274,271,287,292,0,283,272],
[263,271,262,273,299,294,268,0,278],
[288,270,282,277,275,279,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,292,268,252,275,255,266,266],
[291,0,278,265,272,269,269,282,275],
[259,273,0,260,280,262,251,275,288],
[283,286,291,0,296,311,272,288,313],
[299,279,271,255,0,287,279,283,276],
[276,282,289,240,264,0,264,262,290],
[296,282,300,279,272,287,0,276,304],
[285,269,276,263,268,289,275,0,268],
[285,276,263,238,275,261,247,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,261,278,265,278,282,245,296],
[274,0,279,273,288,277,286,269,288],
[290,272,0,303,293,299,306,307,326],
[273,278,248,0,277,281,290,270,294],
[286,263,258,274,0,258,278,285,289],
[273,274,252,270,293,0,316,234,295],
[269,265,245,261,273,235,0,258,271],
[306,282,244,281,266,317,293,0,298],
[255,263,225,257,262,256,280,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,294,320,313,287,276,298,263],
[247,0,284,289,276,280,272,265,268],
[257,267,0,314,304,275,275,278,259],
[231,262,237,0,289,254,249,239,246],
[238,275,247,262,0,250,245,228,256],
[264,271,276,297,301,0,282,244,259],
[275,279,276,302,306,269,0,270,258],
[253,286,273,312,323,307,281,0,282],
[288,283,292,305,295,292,293,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,291,295,298,285,306,278,274],
[270,0,259,245,245,235,285,249,256],
[260,292,0,248,281,246,294,277,262],
[256,306,303,0,296,302,299,292,265],
[253,306,270,255,0,279,298,293,287],
[266,316,305,249,272,0,297,300,287],
[245,266,257,252,253,254,0,254,269],
[273,302,274,259,258,251,297,0,291],
[277,295,289,286,264,264,282,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,266,283,265,287,290,278,271],
[289,0,271,274,269,288,265,253,280],
[285,280,0,275,273,296,278,267,265],
[268,277,276,0,271,299,275,282,274],
[286,282,278,280,0,302,282,275,290],
[264,263,255,252,249,0,267,256,261],
[261,286,273,276,269,284,0,282,270],
[273,298,284,269,276,295,269,0,272],
[280,271,286,277,261,290,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,314,252,262,267,284,288,298],
[287,0,298,276,277,273,233,265,279],
[237,253,0,267,240,253,228,250,263],
[299,275,284,0,295,310,261,290,293],
[289,274,311,256,0,301,259,317,288],
[284,278,298,241,250,0,258,297,270],
[267,318,323,290,292,293,0,291,282],
[263,286,301,261,234,254,260,0,244],
[253,272,288,258,263,281,269,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,269,289,300,294,271,271,278],
[249,0,268,258,249,266,271,285,224],
[282,283,0,272,294,273,269,293,247],
[262,293,279,0,285,289,275,268,271],
[251,302,257,266,0,285,284,256,255],
[257,285,278,262,266,0,263,271,252],
[280,280,282,276,267,288,0,270,262],
[280,266,258,283,295,280,281,0,228],
[273,327,304,280,296,299,289,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,301,278,286,242,255,287,279],
[313,0,287,314,329,266,301,327,327],
[250,264,0,269,322,280,285,281,307],
[273,237,282,0,308,270,280,275,307],
[265,222,229,243,0,265,247,267,256],
[309,285,271,281,286,0,330,318,318],
[296,250,266,271,304,221,0,313,273],
[264,224,270,276,284,233,238,0,277],
[272,224,244,244,295,233,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,251,277,263,271,277,267,288],
[279,0,263,267,257,277,278,267,272],
[300,288,0,293,293,274,277,280,284],
[274,284,258,0,271,265,276,262,272],
[288,294,258,280,0,287,279,272,272],
[280,274,277,286,264,0,296,286,271],
[274,273,274,275,272,255,0,277,270],
[284,284,271,289,279,265,274,0,289],
[263,279,267,279,279,280,281,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,267,260,279,261,265,292,280],
[245,0,256,251,264,258,258,259,256],
[284,295,0,269,268,273,239,275,285],
[291,300,282,0,278,272,258,293,277],
[272,287,283,273,0,287,267,326,258],
[290,293,278,279,264,0,277,299,272],
[286,293,312,293,284,274,0,273,286],
[259,292,276,258,225,252,278,0,268],
[271,295,266,274,293,279,265,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,271,268,278,249,273,272,265],
[279,0,265,260,285,242,285,242,251],
[280,286,0,292,276,291,298,262,280],
[283,291,259,0,277,270,269,274,267],
[273,266,275,274,0,264,289,242,262],
[302,309,260,281,287,0,293,275,283],
[278,266,253,282,262,258,0,267,264],
[279,309,289,277,309,276,284,0,274],
[286,300,271,284,289,268,287,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,296,268,267,270,313,318,263],
[311,0,264,309,263,298,263,290,314],
[255,287,0,235,240,249,285,289,252],
[283,242,316,0,275,280,286,324,239],
[284,288,311,276,0,339,286,326,257],
[281,253,302,271,212,0,261,270,256],
[238,288,266,265,265,290,0,274,271],
[233,261,262,227,225,281,277,0,229],
[288,237,299,312,294,295,280,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,127,269,222,198,191,176,226],
[358,0,258,293,293,234,225,326,308],
[424,293,0,273,325,249,259,295,324],
[282,258,278,0,274,295,242,293,289],
[329,258,226,277,0,264,275,295,306],
[353,317,302,256,287,0,285,255,239],
[360,326,292,309,276,266,0,280,261],
[375,225,256,258,256,296,271,0,253],
[325,243,227,262,245,312,290,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,314,295,278,305,276,292,273],
[261,0,258,255,244,279,252,256,272],
[237,293,0,262,240,278,284,291,254],
[256,296,289,0,259,284,269,260,289],
[273,307,311,292,0,290,281,300,298],
[246,272,273,267,261,0,268,274,289],
[275,299,267,282,270,283,0,283,278],
[259,295,260,291,251,277,268,0,261],
[278,279,297,262,253,262,273,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,259,293,285,296,287,287],
[284,0,266,261,284,286,284,285,249],
[290,285,0,273,279,282,304,294,274],
[292,290,278,0,277,270,291,281,274],
[258,267,272,274,0,263,270,298,260],
[266,265,269,281,288,0,285,285,261],
[255,267,247,260,281,266,0,280,250],
[264,266,257,270,253,266,271,0,273],
[264,302,277,277,291,290,301,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,248,275,272,265,269,289,291],
[289,0,258,289,296,275,278,281,290],
[303,293,0,283,280,272,277,303,297],
[276,262,268,0,260,289,280,325,323],
[279,255,271,291,0,270,293,316,299],
[286,276,279,262,281,0,277,297,318],
[282,273,274,271,258,274,0,286,284],
[262,270,248,226,235,254,265,0,275],
[260,261,254,228,252,233,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,239,260,247,244,242,241,245],
[309,0,268,275,288,269,269,282,289],
[312,283,0,277,289,292,260,267,294],
[291,276,274,0,272,272,249,272,274],
[304,263,262,279,0,264,292,255,277],
[307,282,259,279,287,0,262,275,288],
[309,282,291,302,259,289,0,282,291],
[310,269,284,279,296,276,269,0,290],
[306,262,257,277,274,263,260,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,256,296,271,272,310,294,290],
[220,0,257,236,261,247,260,249,269],
[295,294,0,281,285,272,298,283,284],
[255,315,270,0,283,282,292,290,312],
[280,290,266,268,0,254,275,250,285],
[279,304,279,269,297,0,295,299,294],
[241,291,253,259,276,256,0,246,282],
[257,302,268,261,301,252,305,0,300],
[261,282,267,239,266,257,269,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,301,278,286,284,267,282,283],
[276,0,299,288,288,288,274,290,294],
[250,252,0,258,276,268,252,257,267],
[273,263,293,0,284,278,258,270,262],
[265,263,275,267,0,264,269,271,273],
[267,263,283,273,287,0,269,274,278],
[284,277,299,293,282,282,0,270,289],
[269,261,294,281,280,277,281,0,277],
[268,257,284,289,278,273,262,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,285,283,286,291,275,289,279],
[279,0,265,289,279,270,292,280,284],
[266,286,0,287,284,269,286,283,278],
[268,262,264,0,271,265,272,270,271],
[265,272,267,280,0,264,280,270,274],
[260,281,282,286,287,0,275,276,276],
[276,259,265,279,271,276,0,267,258],
[262,271,268,281,281,275,284,0,289],
[272,267,273,280,277,275,293,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,302,317,272,321,295,296,281],
[269,0,303,303,308,291,290,295,261],
[249,248,0,287,238,275,260,278,276],
[234,248,264,0,253,267,261,273,245],
[279,243,313,298,0,280,287,294,272],
[230,260,276,284,271,0,265,276,255],
[256,261,291,290,264,286,0,294,265],
[255,256,273,278,257,275,257,0,275],
[270,290,275,306,279,296,286,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,295,269,265,283,291,282],
[263,0,262,256,268,256,265,283,275],
[271,289,0,297,291,262,281,273,275],
[256,295,254,0,263,273,250,289,264],
[282,283,260,288,0,263,293,292,292],
[286,295,289,278,288,0,287,291,269],
[268,286,270,301,258,264,0,304,265],
[260,268,278,262,259,260,247,0,258],
[269,276,276,287,259,282,286,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,266,297,267,270,266,280,269],
[289,0,273,298,275,294,289,288,283],
[285,278,0,284,280,290,263,297,268],
[254,253,267,0,282,270,254,267,281],
[284,276,271,269,0,271,273,292,275],
[281,257,261,281,280,0,263,275,264],
[285,262,288,297,278,288,0,302,286],
[271,263,254,284,259,276,249,0,280],
[282,268,283,270,276,287,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,273,294,297,278,312,283,321],
[246,0,269,258,246,246,268,251,285],
[278,282,0,279,254,268,278,277,291],
[257,293,272,0,267,272,280,261,287],
[254,305,297,284,0,284,275,274,298],
[273,305,283,279,267,0,284,287,285],
[239,283,273,271,276,267,0,262,268],
[268,300,274,290,277,264,289,0,264],
[230,266,260,264,253,266,283,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,265,267,252,238,256,275,266],
[270,0,268,284,253,259,256,264,264],
[286,283,0,288,281,284,270,295,291],
[284,267,263,0,250,254,257,259,280],
[299,298,270,301,0,298,287,292,283],
[313,292,267,297,253,0,278,299,306],
[295,295,281,294,264,273,0,303,270],
[276,287,256,292,259,252,248,0,279],
[285,287,260,271,268,245,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,274,252,295,272,305,292,304],
[256,0,240,270,239,241,270,257,269],
[277,311,0,284,255,279,306,263,311],
[299,281,267,0,286,306,322,297,313],
[256,312,296,265,0,286,301,276,291],
[279,310,272,245,265,0,300,273,309],
[246,281,245,229,250,251,0,257,259],
[259,294,288,254,275,278,294,0,295],
[247,282,240,238,260,242,292,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,282,254,264,276,269,302],
[288,0,276,297,295,275,273,287,310],
[285,275,0,277,283,285,272,284,296],
[269,254,274,0,272,253,243,297,263],
[297,256,268,279,0,239,221,277,276],
[287,276,266,298,312,0,281,270,284],
[275,278,279,308,330,270,0,290,328],
[282,264,267,254,274,281,261,0,262],
[249,241,255,288,275,267,223,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,267,256,263,275,246,257,269],
[307,0,299,284,296,279,276,272,288],
[284,252,0,251,274,284,275,248,273],
[295,267,300,0,299,283,281,270,271],
[288,255,277,252,0,261,274,252,263],
[276,272,267,268,290,0,286,285,287],
[305,275,276,270,277,265,0,258,261],
[294,279,303,281,299,266,293,0,269],
[282,263,278,280,288,264,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,249,244,227,259,266,249,240],
[294,0,298,299,264,288,273,319,260],
[302,253,0,258,238,287,224,276,261],
[307,252,293,0,245,290,274,275,252],
[324,287,313,306,0,298,247,296,292],
[292,263,264,261,253,0,265,276,257],
[285,278,327,277,304,286,0,300,263],
[302,232,275,276,255,275,251,0,248],
[311,291,290,299,259,294,288,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,265,299,288,286,262,301,290],
[258,0,280,285,283,272,283,300,274],
[286,271,0,299,273,288,279,283,288],
[252,266,252,0,281,262,249,284,295],
[263,268,278,270,0,268,251,291,295],
[265,279,263,289,283,0,253,287,293],
[289,268,272,302,300,298,0,309,297],
[250,251,268,267,260,264,242,0,284],
[261,277,263,256,256,258,254,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,277,279,274,239,273,274],
[281,0,278,277,275,291,267,288,297],
[277,273,0,279,278,284,281,284,284],
[274,274,272,0,271,282,254,277,281],
[272,276,273,280,0,281,259,277,266],
[277,260,267,269,270,0,248,266,259],
[312,284,270,297,292,303,0,296,301],
[278,263,267,274,274,285,255,0,269],
[277,254,267,270,285,292,250,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,282,251,267,267,244,270,257],
[315,0,307,276,292,306,274,322,301],
[269,244,0,243,273,234,252,267,268],
[300,275,308,0,301,288,288,315,281],
[284,259,278,250,0,256,275,283,296],
[284,245,317,263,295,0,286,284,253],
[307,277,299,263,276,265,0,312,278],
[281,229,284,236,268,267,239,0,261],
[294,250,283,270,255,298,273,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,273,260,298,295,275,281],
[274,0,257,269,234,280,290,243,298],
[260,294,0,250,250,277,291,255,251],
[278,282,301,0,255,265,317,258,278],
[291,317,301,296,0,296,315,275,299],
[253,271,274,286,255,0,288,257,258],
[256,261,260,234,236,263,0,262,261],
[276,308,296,293,276,294,289,0,275],
[270,253,300,273,252,293,290,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,268,271,274,278,269,244,270],
[290,0,286,277,288,296,275,289,288],
[283,265,0,271,268,267,256,249,260],
[280,274,280,0,282,287,286,264,280],
[277,263,283,269,0,280,286,254,282],
[273,255,284,264,271,0,273,261,274],
[282,276,295,265,265,278,0,257,284],
[307,262,302,287,297,290,294,0,295],
[281,263,291,271,269,277,267,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,285,274,282,267,261,278,264],
[278,0,266,265,274,276,260,273,270],
[266,285,0,272,282,264,245,277,264],
[277,286,279,0,291,268,286,277,272],
[269,277,269,260,0,256,253,248,265],
[284,275,287,283,295,0,261,278,278],
[290,291,306,265,298,290,0,295,298],
[273,278,274,274,303,273,256,0,268],
[287,281,287,279,286,273,253,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,273,263,283,284,279,292,291],
[256,0,269,241,265,261,274,281,287],
[278,282,0,263,265,281,269,313,296],
[288,310,288,0,290,270,289,309,292],
[268,286,286,261,0,276,276,302,301],
[267,290,270,281,275,0,287,284,298],
[272,277,282,262,275,264,0,294,307],
[259,270,238,242,249,267,257,0,285],
[260,264,255,259,250,253,244,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,277,280,271,271,279,261],
[268,0,265,267,270,274,284,272,269],
[278,286,0,266,269,273,267,273,266],
[274,284,285,0,284,258,271,292,276],
[271,281,282,267,0,270,256,271,273],
[280,277,278,293,281,0,260,268,274],
[280,267,284,280,295,291,0,290,268],
[272,279,278,259,280,283,261,0,281],
[290,282,285,275,278,277,283,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,257,259,219,288,307,228,270],
[291,0,251,277,273,269,335,252,281],
[294,300,0,307,275,316,332,304,298],
[292,274,244,0,260,296,289,248,290],
[332,278,276,291,0,305,326,236,315],
[263,282,235,255,246,0,284,218,269],
[244,216,219,262,225,267,0,239,234],
[323,299,247,303,315,333,312,0,291],
[281,270,253,261,236,282,317,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,263,279,239,267,285,248,261],
[306,0,288,280,277,270,274,247,303],
[288,263,0,296,282,279,271,260,292],
[272,271,255,0,277,266,296,259,267],
[312,274,269,274,0,275,279,284,289],
[284,281,272,285,276,0,297,266,303],
[266,277,280,255,272,254,0,254,293],
[303,304,291,292,267,285,297,0,306],
[290,248,259,284,262,248,258,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,250,238,216,239,254,247,251],
[291,0,272,271,288,264,270,299,253],
[301,279,0,280,256,265,272,312,286],
[313,280,271,0,276,282,273,265,291],
[335,263,295,275,0,264,259,299,276],
[312,287,286,269,287,0,283,277,274],
[297,281,279,278,292,268,0,296,287],
[304,252,239,286,252,274,255,0,259],
[300,298,265,260,275,277,264,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,295,218,290,218,234,334,236],
[234,0,276,238,274,316,351,396,294],
[256,275,0,216,296,197,313,275,177],
[333,313,335,0,254,273,351,293,295],
[261,277,255,297,0,239,294,314,295],
[333,235,354,278,312,0,291,395,216],
[317,200,238,200,257,260,0,356,217],
[217,155,276,258,237,156,195,0,254],
[315,257,374,256,256,335,334,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,296,257,255,299,273,288,294],
[274,0,279,277,280,284,275,239,271],
[255,272,0,258,256,266,247,270,257],
[294,274,293,0,272,291,280,277,282],
[296,271,295,279,0,286,259,273,296],
[252,267,285,260,265,0,245,267,282],
[278,276,304,271,292,306,0,286,281],
[263,312,281,274,278,284,265,0,262],
[257,280,294,269,255,269,270,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,273,202,238,168,170,205,272],
[238,0,271,167,273,306,205,237,236],
[278,280,0,208,239,347,210,206,205],
[349,384,343,0,274,310,347,312,342],
[313,278,312,277,0,311,278,348,240],
[383,245,204,241,240,0,174,240,273],
[381,346,341,204,273,377,0,203,272],
[346,314,345,239,203,311,348,0,307],
[279,315,346,209,311,278,279,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,197,222,235,204,267,256],
[271,0,175,224,177,201,235,191,247],
[272,376,0,276,254,242,302,279,276],
[354,327,275,0,306,284,232,283,355],
[329,374,297,245,0,291,242,328,336],
[316,350,309,267,260,0,289,296,268],
[347,316,249,319,309,262,0,286,306],
[284,360,272,268,223,255,265,0,326],
[295,304,275,196,215,283,245,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,251,254,276,284,265,265,301],
[280,0,281,277,275,311,288,293,268],
[300,270,0,313,275,306,292,251,268],
[297,274,238,0,276,301,278,253,271],
[275,276,276,275,0,301,264,276,264],
[267,240,245,250,250,0,268,253,269],
[286,263,259,273,287,283,0,250,294],
[286,258,300,298,275,298,301,0,272],
[250,283,283,280,287,282,257,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,271,242,266,293,246,272,278],
[306,0,281,283,270,304,245,287,289],
[280,270,0,246,283,270,248,276,277],
[309,268,305,0,273,302,270,261,306],
[285,281,268,278,0,314,298,286,316],
[258,247,281,249,237,0,245,260,277],
[305,306,303,281,253,306,0,267,297],
[279,264,275,290,265,291,284,0,288],
[273,262,274,245,235,274,254,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,294,251,252,240,263,235,236],
[313,0,326,289,291,272,287,285,278],
[257,225,0,240,234,230,229,226,258],
[300,262,311,0,291,276,273,293,287],
[299,260,317,260,0,238,269,280,285],
[311,279,321,275,313,0,289,273,295],
[288,264,322,278,282,262,0,274,257],
[316,266,325,258,271,278,277,0,281],
[315,273,293,264,266,256,294,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,276,287,286,263,291,260,290],
[264,0,272,281,281,267,267,274,265],
[275,279,0,295,292,288,285,274,294],
[264,270,256,0,289,253,268,271,270],
[265,270,259,262,0,269,265,247,277],
[288,284,263,298,282,0,279,293,298],
[260,284,266,283,286,272,0,262,283],
[291,277,277,280,304,258,289,0,296],
[261,286,257,281,274,253,268,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,269,251,247,257,260,235,249],
[307,0,309,274,303,311,275,288,286],
[282,242,0,264,260,292,273,275,265],
[300,277,287,0,292,277,266,301,243],
[304,248,291,259,0,281,260,277,249],
[294,240,259,274,270,0,264,267,265],
[291,276,278,285,291,287,0,298,262],
[316,263,276,250,274,284,253,0,249],
[302,265,286,308,302,286,289,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,296,276,284,270,292,266,277],
[273,0,272,291,269,277,297,268,264],
[255,279,0,269,275,284,280,278,268],
[275,260,282,0,269,270,287,280,273],
[267,282,276,282,0,279,284,275,281],
[281,274,267,281,272,0,287,269,276],
[259,254,271,264,267,264,0,283,265],
[285,283,273,271,276,282,268,0,277],
[274,287,283,278,270,275,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,257,273,270,261,293,260,279],
[285,0,264,279,278,273,277,283,288],
[294,287,0,282,279,268,293,285,285],
[278,272,269,0,277,259,299,273,283],
[281,273,272,274,0,267,285,264,279],
[290,278,283,292,284,0,291,270,288],
[258,274,258,252,266,260,0,249,273],
[291,268,266,278,287,281,302,0,283],
[272,263,266,268,272,263,278,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,282,272,294,267,256,260,288],
[283,0,271,270,293,266,272,297,295],
[269,280,0,279,284,266,282,272,310],
[279,281,272,0,299,267,269,294,294],
[257,258,267,252,0,253,250,247,286],
[284,285,285,284,298,0,272,290,319],
[295,279,269,282,301,279,0,276,284],
[291,254,279,257,304,261,275,0,305],
[263,256,241,257,265,232,267,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,252,282,256,253,243,258,285],
[296,0,279,308,273,335,291,286,315],
[299,272,0,288,254,268,313,277,277],
[269,243,263,0,255,281,238,256,272],
[295,278,297,296,0,307,276,268,289],
[298,216,283,270,244,0,245,248,266],
[308,260,238,313,275,306,0,280,312],
[293,265,274,295,283,303,271,0,267],
[266,236,274,279,262,285,239,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,294,285,286,284,282,271,264],
[266,0,252,287,257,288,278,280,276],
[257,299,0,307,279,296,261,279,292],
[266,264,244,0,240,273,236,266,257],
[265,294,272,311,0,314,303,290,270],
[267,263,255,278,237,0,249,262,265],
[269,273,290,315,248,302,0,287,272],
[280,271,272,285,261,289,264,0,267],
[287,275,259,294,281,286,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,292,271,329,268,253,291,292],
[293,0,304,271,288,290,272,268,285],
[259,247,0,259,296,238,253,263,202],
[280,280,292,0,286,259,282,263,264],
[222,263,255,265,0,267,228,236,221],
[283,261,313,292,284,0,290,261,263],
[298,279,298,269,323,261,0,293,268],
[260,283,288,288,315,290,258,0,267],
[259,266,349,287,330,288,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,253,299,236,283,283,264,240],
[266,0,300,285,236,267,264,266,304],
[298,251,0,367,266,297,333,316,252],
[252,266,184,0,184,214,283,235,203],
[315,315,285,367,0,332,284,267,301],
[268,284,254,337,219,0,252,253,205],
[268,287,218,268,267,299,0,234,238],
[287,285,235,316,284,298,317,0,306],
[311,247,299,348,250,346,313,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,277,262,278,278,265,259,272],
[299,0,266,301,306,321,294,290,291],
[274,285,0,308,283,319,291,298,288],
[289,250,243,0,275,256,268,263,286],
[273,245,268,276,0,291,263,258,281],
[273,230,232,295,260,0,243,249,274],
[286,257,260,283,288,308,0,270,283],
[292,261,253,288,293,302,281,0,298],
[279,260,263,265,270,277,268,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,269,259,278,264,267,273,268],
[274,0,266,267,277,268,265,252,274],
[282,285,0,280,290,274,278,276,277],
[292,284,271,0,289,277,285,284,275],
[273,274,261,262,0,275,270,263,270],
[287,283,277,274,276,0,275,276,280],
[284,286,273,266,281,276,0,275,270],
[278,299,275,267,288,275,276,0,280],
[283,277,274,276,281,271,281,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,263,279,318,247,241,273,219],
[341,0,267,302,348,301,304,283,293],
[288,284,0,302,361,298,283,306,229],
[272,249,249,0,304,331,306,270,226],
[233,203,190,247,0,250,221,222,142],
[304,250,253,220,301,0,206,235,217],
[310,247,268,245,330,345,0,308,262],
[278,268,245,281,329,316,243,0,199],
[332,258,322,325,409,334,289,352,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,273,281,270,283,274,274,270],
[285,0,265,282,261,290,286,280,266],
[278,286,0,307,262,287,277,262,284],
[270,269,244,0,249,266,270,258,251],
[281,290,289,302,0,273,283,279,280],
[268,261,264,285,278,0,270,250,261],
[277,265,274,281,268,281,0,269,284],
[277,271,289,293,272,301,282,0,284],
[281,285,267,300,271,290,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,304,267,308,285,284,309,272],
[243,0,267,250,297,263,275,275,263],
[247,284,0,272,290,269,259,294,280],
[284,301,279,0,283,264,289,277,276],
[243,254,261,268,0,254,251,265,238],
[266,288,282,287,297,0,281,298,287],
[267,276,292,262,300,270,0,261,266],
[242,276,257,274,286,253,290,0,273],
[279,288,271,275,313,264,285,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,278,283,290,276,277,280],
[270,0,252,269,285,283,246,269,259],
[277,299,0,279,288,282,261,279,287],
[273,282,272,0,274,273,262,285,286],
[268,266,263,277,0,275,254,265,273],
[261,268,269,278,276,0,260,280,291],
[275,305,290,289,297,291,0,299,297],
[274,282,272,266,286,271,252,0,277],
[271,292,264,265,278,260,254,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,251,289,253,267,251,266,271],
[247,0,261,263,239,257,262,280,248],
[300,290,0,270,285,294,277,286,294],
[262,288,281,0,255,269,240,293,257],
[298,312,266,296,0,290,293,292,278],
[284,294,257,282,261,0,281,311,286],
[300,289,274,311,258,270,0,307,262],
[285,271,265,258,259,240,244,0,267],
[280,303,257,294,273,265,289,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,315,278,275,230,243,274,251],
[266,0,309,232,271,265,239,246,236],
[236,242,0,251,265,242,241,247,216],
[273,319,300,0,308,285,239,265,287],
[276,280,286,243,0,269,242,272,234],
[321,286,309,266,282,0,278,284,253],
[308,312,310,312,309,273,0,259,261],
[277,305,304,286,279,267,292,0,281],
[300,315,335,264,317,298,290,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,284,270,267,298,267,273,242],
[262,0,262,251,265,286,265,258,240],
[267,289,0,280,277,281,278,256,268],
[281,300,271,0,291,291,282,284,256],
[284,286,274,260,0,282,253,262,242],
[253,265,270,260,269,0,259,263,263],
[284,286,273,269,298,292,0,280,280],
[278,293,295,267,289,288,271,0,284],
[309,311,283,295,309,288,271,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,257,267,277,269,271,265,260],
[280,0,261,271,275,249,259,268,280],
[294,290,0,283,283,286,281,281,263],
[284,280,268,0,280,280,277,280,282],
[274,276,268,271,0,259,275,273,263],
[282,302,265,271,292,0,295,273,268],
[280,292,270,274,276,256,0,282,267],
[286,283,270,271,278,278,269,0,277],
[291,271,288,269,288,283,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,255,258,282,234,275,252,256],
[288,0,268,280,282,259,279,269,266],
[296,283,0,280,304,268,285,276,278],
[293,271,271,0,315,279,282,277,266],
[269,269,247,236,0,248,250,251,236],
[317,292,283,272,303,0,280,282,261],
[276,272,266,269,301,271,0,271,244],
[299,282,275,274,300,269,280,0,256],
[295,285,273,285,315,290,307,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,285,278,257,295,269,295,289],
[259,0,269,251,249,267,279,286,290],
[266,282,0,294,260,286,271,290,289],
[273,300,257,0,249,271,267,275,297],
[294,302,291,302,0,267,294,292,292],
[256,284,265,280,284,0,258,291,306],
[282,272,280,284,257,293,0,297,310],
[256,265,261,276,259,260,254,0,278],
[262,261,262,254,259,245,241,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,267,265,280,268,258,262,265],
[284,0,264,275,273,270,279,276,293],
[284,287,0,285,272,274,284,270,285],
[286,276,266,0,277,285,277,269,278],
[271,278,279,274,0,276,287,271,269],
[283,281,277,266,275,0,279,254,274],
[293,272,267,274,264,272,0,262,273],
[289,275,281,282,280,297,289,0,275],
[286,258,266,273,282,277,278,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,304,302,291,275,289,294,293],
[257,0,290,292,266,275,272,281,266],
[247,261,0,288,266,260,259,279,272],
[249,259,263,0,251,260,247,267,257],
[260,285,285,300,0,256,276,279,276],
[276,276,291,291,295,0,286,274,276],
[262,279,292,304,275,265,0,287,267],
[257,270,272,284,272,277,264,0,285],
[258,285,279,294,275,275,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,260,225,260,242,249,236,273],
[258,0,252,231,232,238,252,242,264],
[291,299,0,255,274,275,261,257,271],
[326,320,296,0,301,296,275,288,312],
[291,319,277,250,0,254,271,268,288],
[309,313,276,255,297,0,278,289,280],
[302,299,290,276,280,273,0,276,298],
[315,309,294,263,283,262,275,0,265],
[278,287,280,239,263,271,253,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,280,271,303,283,288,273,269],
[293,0,261,286,297,283,282,294,273],
[271,290,0,277,289,281,274,288,263],
[280,265,274,0,306,275,274,267,277],
[248,254,262,245,0,265,259,257,248],
[268,268,270,276,286,0,279,266,259],
[263,269,277,277,292,272,0,253,258],
[278,257,263,284,294,285,298,0,269],
[282,278,288,274,303,292,293,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,270,294,295,262,276,254,287],
[279,0,267,280,278,274,286,267,264],
[281,284,0,299,294,280,305,286,263],
[257,271,252,0,268,264,279,262,250],
[256,273,257,283,0,267,295,267,265],
[289,277,271,287,284,0,272,291,280],
[275,265,246,272,256,279,0,246,236],
[297,284,265,289,284,260,305,0,271],
[264,287,288,301,286,271,315,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,278,284,287,255,296,257,281],
[266,0,241,284,269,242,264,253,251],
[273,310,0,302,283,270,287,285,271],
[267,267,249,0,289,262,280,256,265],
[264,282,268,262,0,258,272,261,262],
[296,309,281,289,293,0,296,256,283],
[255,287,264,271,279,255,0,244,277],
[294,298,266,295,290,295,307,0,282],
[270,300,280,286,289,268,274,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,265,267,272,280,262,286,269],
[297,0,272,294,303,294,281,270,251],
[286,279,0,297,322,272,282,298,268],
[284,257,254,0,255,258,273,262,265],
[279,248,229,296,0,271,290,280,265],
[271,257,279,293,280,0,274,290,261],
[289,270,269,278,261,277,0,269,268],
[265,281,253,289,271,261,282,0,287],
[282,300,283,286,286,290,283,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,294,270,262,274,264,269],
[274,0,255,259,259,276,256,252,264],
[270,296,0,277,272,258,269,242,267],
[257,292,274,0,277,250,279,246,273],
[281,292,279,274,0,260,286,280,278],
[289,275,293,301,291,0,280,278,306],
[277,295,282,272,265,271,0,258,275],
[287,299,309,305,271,273,293,0,284],
[282,287,284,278,273,245,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,295,277,300,283,254,270,280],
[276,0,288,272,309,298,290,307,272],
[256,263,0,248,303,287,283,297,264],
[274,279,303,0,328,295,263,298,276],
[251,242,248,223,0,275,237,255,271],
[268,253,264,256,276,0,267,241,273],
[297,261,268,288,314,284,0,283,275],
[281,244,254,253,296,310,268,0,261],
[271,279,287,275,280,278,276,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,209,240,236,261,236,273,320],
[299,0,262,275,269,243,248,273,288],
[342,289,0,264,299,309,278,280,331],
[311,276,287,0,288,280,260,302,303],
[315,282,252,263,0,262,262,272,297],
[290,308,242,271,289,0,252,297,296],
[315,303,273,291,289,299,0,306,314],
[278,278,271,249,279,254,245,0,297],
[231,263,220,248,254,255,237,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,282,282,269,277,282,273],
[272,0,281,289,285,271,284,268,282],
[271,270,0,267,286,256,277,272,255],
[269,262,284,0,265,272,296,277,273],
[269,266,265,286,0,266,291,299,267],
[282,280,295,279,285,0,278,294,273],
[274,267,274,255,260,273,0,266,262],
[269,283,279,274,252,257,285,0,250],
[278,269,296,278,284,278,289,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,249,246,275,273,264,259],
[288,0,277,278,259,312,292,282,282],
[280,274,0,279,272,297,294,291,286],
[302,273,272,0,280,305,288,288,277],
[305,292,279,271,0,307,301,305,287],
[276,239,254,246,244,0,257,256,245],
[278,259,257,263,250,294,0,272,265],
[287,269,260,263,246,295,279,0,251],
[292,269,265,274,264,306,286,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,303,286,293,276,280,315,282],
[283,0,299,289,285,278,280,290,268],
[248,252,0,298,273,266,249,277,267],
[265,262,253,0,260,270,249,277,252],
[258,266,278,291,0,280,268,290,261],
[275,273,285,281,271,0,258,272,256],
[271,271,302,302,283,293,0,296,276],
[236,261,274,274,261,279,255,0,269],
[269,283,284,299,290,295,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,283,331,263,237,340,257,336],
[197,0,195,193,214,227,287,208,280],
[268,356,0,303,297,292,352,259,388],
[220,358,248,0,290,187,285,274,311],
[288,337,254,261,0,226,313,251,323],
[314,324,259,364,325,0,348,290,388],
[211,264,199,266,238,203,0,277,287],
[294,343,292,277,300,261,274,0,311],
[215,271,163,240,228,163,264,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,283,265,315,285,308,284],
[277,0,294,293,258,284,309,286,289],
[279,257,0,303,276,289,293,294,291],
[268,258,248,0,270,258,266,291,266],
[286,293,275,281,0,287,287,295,267],
[236,267,262,293,264,0,263,300,250],
[266,242,258,285,264,288,0,316,269],
[243,265,257,260,256,251,235,0,254],
[267,262,260,285,284,301,282,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,270,272,285,269,279,283,270],
[292,0,283,285,284,266,304,278,264],
[281,268,0,292,286,279,290,295,256],
[279,266,259,0,262,286,298,283,272],
[266,267,265,289,0,277,278,300,262],
[282,285,272,265,274,0,296,285,288],
[272,247,261,253,273,255,0,284,280],
[268,273,256,268,251,266,267,0,251],
[281,287,295,279,289,263,271,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,283,264,267,276,291,269,285],
[292,0,286,292,283,270,298,263,310],
[268,265,0,272,279,291,294,279,284],
[287,259,279,0,271,290,271,262,295],
[284,268,272,280,0,285,270,260,288],
[275,281,260,261,266,0,267,262,283],
[260,253,257,280,281,284,0,258,279],
[282,288,272,289,291,289,293,0,285],
[266,241,267,256,263,268,272,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,296,278,272,298,294,297,294],
[255,0,313,278,252,280,282,272,286],
[255,238,0,275,257,286,277,270,258],
[273,273,276,0,246,265,267,269,269],
[279,299,294,305,0,278,267,298,288],
[253,271,265,286,273,0,267,267,263],
[257,269,274,284,284,284,0,271,269],
[254,279,281,282,253,284,280,0,248],
[257,265,293,282,263,288,282,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,289,277,253,264,269,261,297],
[281,0,291,260,272,276,282,282,291],
[262,260,0,272,263,280,281,266,264],
[274,291,279,0,272,282,291,286,302],
[298,279,288,279,0,280,294,269,301],
[287,275,271,269,271,0,253,278,291],
[282,269,270,260,257,298,0,277,287],
[290,269,285,265,282,273,274,0,290],
[254,260,287,249,250,260,264,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,266,272,252,268,300,242,283],
[285,0,283,248,259,263,279,262,292],
[285,268,0,257,247,275,286,274,290],
[279,303,294,0,284,298,299,270,297],
[299,292,304,267,0,295,293,298,293],
[283,288,276,253,256,0,276,264,276],
[251,272,265,252,258,275,0,254,278],
[309,289,277,281,253,287,297,0,290],
[268,259,261,254,258,275,273,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,277,271,277,268,287,284,269],
[284,0,283,271,271,279,285,279,269],
[274,268,0,272,267,259,276,267,270],
[280,280,279,0,282,266,298,282,269],
[274,280,284,269,0,274,298,276,271],
[283,272,292,285,277,0,305,278,284],
[264,266,275,253,253,246,0,266,260],
[267,272,284,269,275,273,285,0,276],
[282,282,281,282,280,267,291,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,306,306,312,286,274,327,296],
[249,0,283,279,300,295,272,299,274],
[245,268,0,281,280,264,281,287,261],
[245,272,270,0,270,273,267,285,263],
[239,251,271,281,0,272,257,278,268],
[265,256,287,278,279,0,264,279,276],
[277,279,270,284,294,287,0,296,277],
[224,252,264,266,273,272,255,0,272],
[255,277,290,288,283,275,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,309,293,294,281,240,298,283],
[273,0,310,284,274,289,246,258,271],
[242,241,0,272,262,247,232,285,250],
[258,267,279,0,270,257,237,259,300],
[257,277,289,281,0,269,251,272,301],
[270,262,304,294,282,0,270,284,282],
[311,305,319,314,300,281,0,272,300],
[253,293,266,292,279,267,279,0,295],
[268,280,301,251,250,269,251,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,251,267,273,276,263,281],
[283,0,272,245,258,266,273,264,276],
[283,279,0,264,259,272,268,254,283],
[300,306,287,0,275,288,282,268,289],
[284,293,292,276,0,275,285,284,293],
[278,285,279,263,276,0,285,292,282],
[275,278,283,269,266,266,0,268,280],
[288,287,297,283,267,259,283,0,292],
[270,275,268,262,258,269,271,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,270,262,257,263,259,290,262],
[284,0,267,295,288,276,266,268,269],
[281,284,0,267,279,283,293,296,290],
[289,256,284,0,265,271,272,243,281],
[294,263,272,286,0,275,264,275,265],
[288,275,268,280,276,0,246,247,257],
[292,285,258,279,287,305,0,275,257],
[261,283,255,308,276,304,276,0,232],
[289,282,261,270,286,294,294,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,289,310,299,317,307,270,289],
[268,0,302,322,280,286,275,282,282],
[262,249,0,281,300,260,268,267,263],
[241,229,270,0,244,254,264,261,249],
[252,271,251,307,0,251,280,266,240],
[234,265,291,297,300,0,264,280,285],
[244,276,283,287,271,287,0,249,260],
[281,269,284,290,285,271,302,0,277],
[262,269,288,302,311,266,291,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,268,273,296,267,275,275,274],
[251,0,271,288,285,279,284,269,252],
[283,280,0,261,295,267,289,256,276],
[278,263,290,0,298,291,301,281,283],
[255,266,256,253,0,272,266,240,255],
[284,272,284,260,279,0,273,255,266],
[276,267,262,250,285,278,0,271,269],
[276,282,295,270,311,296,280,0,286],
[277,299,275,268,296,285,282,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,280,294,264,278,283,271,288],
[266,0,290,281,283,274,273,282,279],
[271,261,0,294,257,287,272,269,284],
[257,270,257,0,262,273,270,267,278],
[287,268,294,289,0,288,282,288,287],
[273,277,264,278,263,0,281,272,278],
[268,278,279,281,269,270,0,276,275],
[280,269,282,284,263,279,275,0,262],
[263,272,267,273,264,273,276,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,237,249,253,263,271,253,250],
[295,0,270,268,247,288,259,255,269],
[314,281,0,284,262,285,295,282,295],
[302,283,267,0,270,299,279,275,274],
[298,304,289,281,0,291,274,279,281],
[288,263,266,252,260,0,284,305,294],
[280,292,256,272,277,267,0,288,276],
[298,296,269,276,272,246,263,0,266],
[301,282,256,277,270,257,275,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,266,268,272,256,264,247,266],
[283,0,266,264,267,250,260,248,266],
[285,285,0,262,270,258,283,263,274],
[283,287,289,0,276,264,276,262,267],
[279,284,281,275,0,256,278,259,263],
[295,301,293,287,295,0,279,258,281],
[287,291,268,275,273,272,0,252,279],
[304,303,288,289,292,293,299,0,267],
[285,285,277,284,288,270,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,255,267,265,279,261,265,259],
[271,0,259,254,260,276,266,258,276],
[296,292,0,273,278,289,276,291,274],
[284,297,278,0,281,267,263,264,277],
[286,291,273,270,0,278,286,274,273],
[272,275,262,284,273,0,288,262,269],
[290,285,275,288,265,263,0,277,284],
[286,293,260,287,277,289,274,0,278],
[292,275,277,274,278,282,267,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,261,285,276,259,248,265,262],
[282,0,257,291,285,271,254,278,267],
[290,294,0,300,287,282,283,283,275],
[266,260,251,0,266,252,260,260,256],
[275,266,264,285,0,263,268,260,266],
[292,280,269,299,288,0,281,273,262],
[303,297,268,291,283,270,0,258,275],
[286,273,268,291,291,278,293,0,277],
[289,284,276,295,285,289,276,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,269,265,275,288,280,282,284],
[276,0,255,267,284,280,271,264,281],
[282,296,0,264,287,274,267,259,278],
[286,284,287,0,277,287,282,268,278],
[276,267,264,274,0,275,263,257,275],
[263,271,277,264,276,0,265,266,274],
[271,280,284,269,288,286,0,277,274],
[269,287,292,283,294,285,274,0,284],
[267,270,273,273,276,277,277,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,279,277,293,282,278,282,276],
[282,0,281,287,291,275,287,281,281],
[272,270,0,274,284,270,271,280,278],
[274,264,277,0,276,281,266,283,273],
[258,260,267,275,0,282,259,276,261],
[269,276,281,270,269,0,269,267,278],
[273,264,280,285,292,282,0,278,277],
[269,270,271,268,275,284,273,0,286],
[275,270,273,278,290,273,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,261,283,258,276,291,308,276],
[264,0,261,275,258,253,253,280,259],
[290,290,0,302,274,283,287,298,265],
[268,276,249,0,279,269,276,287,253],
[293,293,277,272,0,289,272,278,287],
[275,298,268,282,262,0,265,295,281],
[260,298,264,275,279,286,0,287,264],
[243,271,253,264,273,256,264,0,263],
[275,292,286,298,264,270,287,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,258,255,250,287,267,259,275],
[290,0,267,278,277,286,286,262,282],
[293,284,0,281,275,294,280,267,292],
[296,273,270,0,275,294,304,278,281],
[301,274,276,276,0,291,270,270,288],
[264,265,257,257,260,0,273,254,268],
[284,265,271,247,281,278,0,264,272],
[292,289,284,273,281,297,287,0,297],
[276,269,259,270,263,283,279,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,291,296,252,276,292,306,267],
[272,0,267,296,269,282,263,259,259],
[260,284,0,303,280,279,267,303,279],
[255,255,248,0,244,247,253,272,254],
[299,282,271,307,0,269,270,290,271],
[275,269,272,304,282,0,290,277,286],
[259,288,284,298,281,261,0,302,259],
[245,292,248,279,261,274,249,0,254],
[284,292,272,297,280,265,292,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,276,267,271,276,272,285,266],
[247,0,237,240,246,238,253,266,251],
[275,314,0,272,279,271,295,271,264],
[284,311,279,0,284,273,281,285,293],
[280,305,272,267,0,271,288,300,284],
[275,313,280,278,280,0,282,281,287],
[279,298,256,270,263,269,0,271,279],
[266,285,280,266,251,270,280,0,269],
[285,300,287,258,267,264,272,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,279,293,299,264,272,282,265],
[284,0,283,274,294,279,275,296,249],
[272,268,0,281,265,259,250,261,251],
[258,277,270,0,271,256,273,262,234],
[252,257,286,280,0,256,259,257,279],
[287,272,292,295,295,0,281,284,253],
[279,276,301,278,292,270,0,293,270],
[269,255,290,289,294,267,258,0,253],
[286,302,300,317,272,298,281,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,295,291,266,281,269,297,298],
[290,0,290,280,276,284,272,260,311],
[256,261,0,271,266,257,256,251,278],
[260,271,280,0,261,285,275,272,289],
[285,275,285,290,0,284,270,282,303],
[270,267,294,266,267,0,294,283,299],
[282,279,295,276,281,257,0,277,287],
[254,291,300,279,269,268,274,0,296],
[253,240,273,262,248,252,264,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,301,291,286,283,295,270,282],
[251,0,284,278,273,263,274,264,275],
[250,267,0,263,259,264,270,254,277],
[260,273,288,0,270,267,283,282,272],
[265,278,292,281,0,280,277,256,297],
[268,288,287,284,271,0,292,268,292],
[256,277,281,268,274,259,0,250,276],
[281,287,297,269,295,283,301,0,292],
[269,276,274,279,254,259,275,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,243,282,262,250,269,228,254],
[334,0,288,280,319,251,340,268,272],
[308,263,0,297,306,255,285,285,263],
[269,271,254,0,328,287,274,262,315],
[289,232,245,223,0,305,286,254,248],
[301,300,296,264,246,0,289,274,239],
[282,211,266,277,265,262,0,235,218],
[323,283,266,289,297,277,316,0,244],
[297,279,288,236,303,312,333,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,279,280,293,295,271,270,262],
[277,0,275,268,278,298,284,296,251],
[272,276,0,272,305,291,306,273,283],
[271,283,279,0,315,286,303,252,260],
[258,273,246,236,0,269,272,249,226],
[256,253,260,265,282,0,282,291,262],
[280,267,245,248,279,269,0,270,229],
[281,255,278,299,302,260,281,0,273],
[289,300,268,291,325,289,322,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,259,281,273,247,257,260,274],
[302,0,282,308,280,292,260,286,266],
[292,269,0,283,282,282,254,271,271],
[270,243,268,0,264,262,240,263,255],
[278,271,269,287,0,289,266,255,266],
[304,259,269,289,262,0,259,286,279],
[294,291,297,311,285,292,0,300,267],
[291,265,280,288,296,265,251,0,261],
[277,285,280,296,285,272,284,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,257,237,241,249,275,272,265],
[312,0,308,261,265,295,343,307,299],
[294,243,0,257,246,257,290,257,258],
[314,290,294,0,254,252,278,293,271],
[310,286,305,297,0,254,318,302,292],
[302,256,294,299,297,0,343,300,277],
[276,208,261,273,233,208,0,233,250],
[279,244,294,258,249,251,318,0,254],
[286,252,293,280,259,274,301,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,268,269,257,270,271,280,299],
[267,0,280,298,292,275,279,305,292],
[283,271,0,277,272,275,270,298,284],
[282,253,274,0,275,258,272,295,298],
[294,259,279,276,0,264,265,280,293],
[281,276,276,293,287,0,265,283,284],
[280,272,281,279,286,286,0,303,286],
[271,246,253,256,271,268,248,0,277],
[252,259,267,253,258,267,265,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,273,293,264,280,272,287,270],
[272,0,289,285,277,280,274,287,275],
[278,262,0,286,263,277,276,276,262],
[258,266,265,0,260,272,279,277,264],
[287,274,288,291,0,275,284,288,280],
[271,271,274,279,276,0,278,275,275],
[279,277,275,272,267,273,0,280,260],
[264,264,275,274,263,276,271,0,284],
[281,276,289,287,271,276,291,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,264,242,248,246,249,249],
[266,0,269,269,258,248,250,246,249],
[274,282,0,272,257,248,263,258,264],
[287,282,279,0,281,280,306,259,292],
[309,293,294,270,0,255,268,274,273],
[303,303,303,271,296,0,278,287,303],
[305,301,288,245,283,273,0,270,284],
[302,305,293,292,277,264,281,0,284],
[302,302,287,259,278,248,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,263,255,278,279,268,251],
[274,0,294,255,255,281,272,272,256],
[262,257,0,243,249,287,266,260,245],
[288,296,308,0,279,288,292,274,269],
[296,296,302,272,0,287,294,287,291],
[273,270,264,263,264,0,285,267,266],
[272,279,285,259,257,266,0,281,279],
[283,279,291,277,264,284,270,0,261],
[300,295,306,282,260,285,272,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,249,286,263,295,261,242,280],
[305,0,262,245,260,257,283,277,284],
[302,289,0,271,265,272,309,265,281],
[265,306,280,0,290,273,310,281,290],
[288,291,286,261,0,276,303,243,290],
[256,294,279,278,275,0,301,267,291],
[290,268,242,241,248,250,0,244,271],
[309,274,286,270,308,284,307,0,294],
[271,267,270,261,261,260,280,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,264,263,261,274,262,291,314],
[274,0,217,311,256,230,256,250,274],
[287,334,0,271,310,313,284,313,297],
[288,240,280,0,264,260,268,249,228],
[290,295,241,287,0,273,270,273,292],
[277,321,238,291,278,0,300,289,294],
[289,295,267,283,281,251,0,292,278],
[260,301,238,302,278,262,259,0,299],
[237,277,254,323,259,257,273,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,248,281,273,266,252,255,279],
[287,0,290,301,281,280,273,266,271],
[303,261,0,306,291,292,276,273,269],
[270,250,245,0,250,254,247,251,264],
[278,270,260,301,0,268,276,261,275],
[285,271,259,297,283,0,272,286,274],
[299,278,275,304,275,279,0,267,283],
[296,285,278,300,290,265,284,0,280],
[272,280,282,287,276,277,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,311,283,288,313,273,281,280],
[279,0,272,310,254,277,277,289,265],
[240,279,0,258,267,289,271,274,260],
[268,241,293,0,283,290,237,281,260],
[263,297,284,268,0,310,286,310,277],
[238,274,262,261,241,0,260,274,263],
[278,274,280,314,265,291,0,312,275],
[270,262,277,270,241,277,239,0,269],
[271,286,291,291,274,288,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,253,256,304,294,270,247,247],
[297,0,276,277,296,252,278,255,246],
[298,275,0,294,274,288,290,264,276],
[295,274,257,0,280,278,299,281,248],
[247,255,277,271,0,261,268,242,255],
[257,299,263,273,290,0,248,242,280],
[281,273,261,252,283,303,0,259,262],
[304,296,287,270,309,309,292,0,306],
[304,305,275,303,296,271,289,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,229,217,259,255,265,232,268],
[304,0,296,269,351,337,353,313,314],
[322,255,0,283,301,308,370,323,361],
[334,282,268,0,328,329,322,344,284],
[292,200,250,223,0,233,334,313,314],
[296,214,243,222,318,0,291,295,277],
[286,198,181,229,217,260,0,292,242],
[319,238,228,207,238,256,259,0,269],
[283,237,190,267,237,274,309,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,271,239,262,252,259,248,247],
[272,0,257,257,256,262,254,268,244],
[280,294,0,276,271,269,265,267,281],
[312,294,275,0,274,256,270,273,273],
[289,295,280,277,0,270,275,272,273],
[299,289,282,295,281,0,280,289,257],
[292,297,286,281,276,271,0,290,287],
[303,283,284,278,279,262,261,0,260],
[304,307,270,278,278,294,264,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,263,294,270,303,287,276,267],
[280,0,266,291,260,270,273,249,262],
[288,285,0,298,273,319,306,282,281],
[257,260,253,0,247,277,285,245,250],
[281,291,278,304,0,301,306,280,263],
[248,281,232,274,250,0,275,224,251],
[264,278,245,266,245,276,0,264,275],
[275,302,269,306,271,327,287,0,281],
[284,289,270,301,288,300,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,269,248,278,268,278,256],
[283,0,261,242,243,260,273,274,280],
[297,290,0,277,253,292,265,293,280],
[282,309,274,0,276,303,284,295,289],
[303,308,298,275,0,292,278,307,287],
[273,291,259,248,259,0,267,281,278],
[283,278,286,267,273,284,0,290,286],
[273,277,258,256,244,270,261,0,267],
[295,271,271,262,264,273,265,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,262,275,283,277,268,276],
[271,0,287,266,283,271,271,276,265],
[273,264,0,246,266,260,262,246,270],
[289,285,305,0,286,284,283,272,288],
[276,268,285,265,0,259,261,246,273],
[268,280,291,267,292,0,270,283,279],
[274,280,289,268,290,281,0,283,288],
[283,275,305,279,305,268,268,0,277],
[275,286,281,263,278,272,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,269,305,283,284,265,273,267],
[282,0,257,248,300,288,269,286,261],
[282,294,0,308,309,286,309,280,260],
[246,303,243,0,269,272,254,272,276],
[268,251,242,282,0,260,259,269,241],
[267,263,265,279,291,0,267,250,267],
[286,282,242,297,292,284,0,276,249],
[278,265,271,279,282,301,275,0,254],
[284,290,291,275,310,284,302,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,296,278,280,291,265,243,271],
[288,0,285,282,289,278,282,271,304],
[255,266,0,297,300,291,247,283,286],
[273,269,254,0,290,269,264,272,258],
[271,262,251,261,0,274,239,240,277],
[260,273,260,282,277,0,257,272,277],
[286,269,304,287,312,294,0,282,293],
[308,280,268,279,311,279,269,0,305],
[280,247,265,293,274,274,258,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,269,286,277,265,286,270,292],
[266,0,269,260,257,270,267,255,253],
[282,282,0,270,270,277,281,264,278],
[265,291,281,0,276,283,283,290,272],
[274,294,281,275,0,283,281,264,271],
[286,281,274,268,268,0,282,272,269],
[265,284,270,268,270,269,0,267,272],
[281,296,287,261,287,279,284,0,273],
[259,298,273,279,280,282,279,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,365,218,292,291,221,218,217,218],
[186,0,219,220,218,221,184,255,220],
[333,332,0,295,328,260,295,330,223],
[259,331,256,0,292,333,258,181,257],
[260,333,223,259,0,223,222,220,222],
[330,330,291,218,328,0,254,253,220],
[333,367,256,293,329,297,0,366,331],
[334,296,221,370,331,298,185,0,261],
[333,331,328,294,329,331,220,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,249,273,278,270,252,251,270],
[299,0,265,280,288,277,290,254,279],
[302,286,0,288,299,292,267,279,278],
[278,271,263,0,292,293,258,283,267],
[273,263,252,259,0,265,255,274,271],
[281,274,259,258,286,0,257,273,251],
[299,261,284,293,296,294,0,259,266],
[300,297,272,268,277,278,292,0,275],
[281,272,273,284,280,300,285,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,258,265,249,241,265,288,264],
[279,0,268,295,251,265,264,275,264],
[293,283,0,295,271,282,272,276,282],
[286,256,256,0,257,274,265,281,272],
[302,300,280,294,0,265,278,286,282],
[310,286,269,277,286,0,271,291,276],
[286,287,279,286,273,280,0,279,253],
[263,276,275,270,265,260,272,0,279],
[287,287,269,279,269,275,298,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,281,303,272,281,284,285],
[275,0,277,293,299,263,304,285,298],
[284,274,0,266,291,271,285,276,277],
[270,258,285,0,286,252,290,255,276],
[248,252,260,265,0,259,270,260,265],
[279,288,280,299,292,0,299,245,272],
[270,247,266,261,281,252,0,257,263],
[267,266,275,296,291,306,294,0,298],
[266,253,274,275,286,279,288,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,273,254,275,259,276,277,269],
[279,0,268,256,276,241,266,291,257],
[278,283,0,261,278,257,277,291,244],
[297,295,290,0,299,261,297,287,278],
[276,275,273,252,0,248,265,265,260],
[292,310,294,290,303,0,320,308,275],
[275,285,274,254,286,231,0,287,262],
[274,260,260,264,286,243,264,0,264],
[282,294,307,273,291,276,289,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,459,369,278,278,186,367,367],
[92,0,369,369,92,186,94,182,276],
[92,182,0,183,0,92,92,182,276],
[182,182,368,0,182,182,276,182,276],
[273,459,551,369,0,369,369,365,367],
[273,365,459,369,182,0,276,273,367],
[365,457,459,275,182,275,0,365,459],
[184,369,369,369,186,278,186,0,368],
[184,275,275,275,184,184,92,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,284,238,272,276,261,275,243],
[265,0,270,247,290,276,269,300,266],
[267,281,0,251,285,265,224,250,228],
[313,304,300,0,301,294,268,277,283],
[279,261,266,250,0,229,269,247,228],
[275,275,286,257,322,0,272,299,254],
[290,282,327,283,282,279,0,284,260],
[276,251,301,274,304,252,267,0,272],
[308,285,323,268,323,297,291,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,259,209,282,268,281,290,287],
[303,0,308,251,331,319,298,311,292],
[292,243,0,227,317,267,274,292,256],
[342,300,324,0,339,304,315,332,262],
[269,220,234,212,0,274,264,281,260],
[283,232,284,247,277,0,244,298,269],
[270,253,277,236,287,307,0,307,252],
[261,240,259,219,270,253,244,0,262],
[264,259,295,289,291,282,299,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,267,276,277,246,264,293,285],
[259,0,279,292,286,262,227,294,270],
[284,272,0,263,271,284,252,300,274],
[275,259,288,0,277,244,246,283,279],
[274,265,280,274,0,264,262,304,298],
[305,289,267,307,287,0,280,301,292],
[287,324,299,305,289,271,0,312,313],
[258,257,251,268,247,250,239,0,299],
[266,281,277,272,253,259,238,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,312,288,278,281,287,312,260],
[282,0,276,290,256,254,300,283,263],
[239,275,0,282,289,265,292,287,275],
[263,261,269,0,269,229,279,292,258],
[273,295,262,282,0,272,323,289,281],
[270,297,286,322,279,0,284,290,267],
[264,251,259,272,228,267,0,263,260],
[239,268,264,259,262,261,288,0,244],
[291,288,276,293,270,284,291,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,268,238,275,269,266,283,271],
[284,0,285,278,281,283,270,304,253],
[283,266,0,297,285,283,266,288,262],
[313,273,254,0,302,282,254,288,262],
[276,270,266,249,0,297,248,304,268],
[282,268,268,269,254,0,253,292,282],
[285,281,285,297,303,298,0,275,304],
[268,247,263,263,247,259,276,0,265],
[280,298,289,289,283,269,247,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,305,282,278,274,279,262,266],
[303,0,292,287,286,287,272,281,280],
[246,259,0,279,287,275,231,259,252],
[269,264,272,0,285,297,259,278,272],
[273,265,264,266,0,264,272,272,260],
[277,264,276,254,287,0,223,278,260],
[272,279,320,292,279,328,0,273,303],
[289,270,292,273,279,273,278,0,266],
[285,271,299,279,291,291,248,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,252,255,271,282,255,256,270],
[287,0,278,279,286,294,288,273,285],
[299,273,0,277,269,284,281,274,291],
[296,272,274,0,287,272,279,281,288],
[280,265,282,264,0,274,281,283,276],
[269,257,267,279,277,0,273,282,274],
[296,263,270,272,270,278,0,282,282],
[295,278,277,270,268,269,269,0,285],
[281,266,260,263,275,277,269,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,262,274,283,267,255,272,247],
[279,0,272,260,289,277,257,282,244],
[289,279,0,260,290,292,287,300,282],
[277,291,291,0,292,288,297,293,263],
[268,262,261,259,0,248,253,281,241],
[284,274,259,263,303,0,306,291,239],
[296,294,264,254,298,245,0,298,251],
[279,269,251,258,270,260,253,0,274],
[304,307,269,288,310,312,300,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,310,281,287,317,302,294],
[276,0,277,318,259,264,269,272,270],
[279,274,0,291,287,289,281,277,275],
[241,233,260,0,271,270,237,257,272],
[270,292,264,280,0,256,264,267,275],
[264,287,262,281,295,0,278,283,253],
[234,282,270,314,287,273,0,294,269],
[249,279,274,294,284,268,257,0,264],
[257,281,276,279,276,298,282,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,261,277,269,268,292,259,277],
[279,0,283,287,282,272,280,285,277],
[290,268,0,308,273,273,275,287,270],
[274,264,243,0,267,259,262,265,263],
[282,269,278,284,0,267,268,264,271],
[283,279,278,292,284,0,276,266,284],
[259,271,276,289,283,275,0,270,262],
[292,266,264,286,287,285,281,0,281],
[274,274,281,288,280,267,289,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,351,329,270,334,350,324,281,362],
[200,0,228,262,246,259,294,291,257],
[222,323,0,252,270,305,275,301,275],
[281,289,299,0,271,317,316,314,294],
[217,305,281,280,0,284,272,261,266],
[201,292,246,234,267,0,252,292,242],
[227,257,276,235,279,299,0,254,242],
[270,260,250,237,290,259,297,0,285],
[189,294,276,257,285,309,309,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,263,263,268,250,272,272,261],
[309,0,273,261,276,267,287,253,271],
[288,278,0,268,274,267,278,255,272],
[288,290,283,0,315,274,303,318,282],
[283,275,277,236,0,295,283,271,264],
[301,284,284,277,256,0,281,283,276],
[279,264,273,248,268,270,0,247,254],
[279,298,296,233,280,268,304,0,293],
[290,280,279,269,287,275,297,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,277,250,286,323,281,288,298],
[253,0,258,236,277,291,268,262,293],
[274,293,0,266,283,298,278,282,290],
[301,315,285,0,273,320,302,270,325],
[265,274,268,278,0,317,289,263,309],
[228,260,253,231,234,0,250,243,275],
[270,283,273,249,262,301,0,257,320],
[263,289,269,281,288,308,294,0,301],
[253,258,261,226,242,276,231,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,301,275,257,258,280,262,266],
[311,0,292,285,273,278,315,291,275],
[250,259,0,254,262,270,261,268,265],
[276,266,297,0,266,273,299,283,283],
[294,278,289,285,0,287,277,287,275],
[293,273,281,278,264,0,267,295,282],
[271,236,290,252,274,284,0,266,265],
[289,260,283,268,264,256,285,0,261],
[285,276,286,268,276,269,286,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,265,277,267,263,268,276,289],
[266,0,277,266,284,251,270,281,271],
[286,274,0,261,268,277,249,268,287],
[274,285,290,0,299,264,272,292,292],
[284,267,283,252,0,259,267,262,267],
[288,300,274,287,292,0,290,286,306],
[283,281,302,279,284,261,0,284,276],
[275,270,283,259,289,265,267,0,265],
[262,280,264,259,284,245,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,295,285,290,306,307,287,274],
[256,0,290,271,310,288,287,279,270],
[256,261,0,271,278,277,282,271,247],
[266,280,280,0,274,297,286,272,278],
[261,241,273,277,0,281,271,277,262],
[245,263,274,254,270,0,292,255,257],
[244,264,269,265,280,259,0,274,275],
[264,272,280,279,274,296,277,0,281],
[277,281,304,273,289,294,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,271,297,277,289,276,285,274],
[266,0,260,269,260,286,262,248,279],
[280,291,0,295,267,291,315,283,301],
[254,282,256,0,257,260,291,267,255],
[274,291,284,294,0,288,303,267,288],
[262,265,260,291,263,0,286,270,293],
[275,289,236,260,248,265,0,254,284],
[266,303,268,284,284,281,297,0,304],
[277,272,250,296,263,258,267,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,282,271,291,284,277,284],
[267,0,272,264,278,266,259,277,270],
[272,279,0,285,274,269,271,277,286],
[269,287,266,0,278,270,269,267,273],
[280,273,277,273,0,267,270,278,284],
[260,285,282,281,284,0,269,284,270],
[267,292,280,282,281,282,0,276,278],
[274,274,274,284,273,267,275,0,281],
[267,281,265,278,267,281,273,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,277,412,277,274,412,277,413],
[135,0,273,412,138,274,412,277,413],
[274,278,0,412,277,274,412,416,413],
[139,139,139,0,139,278,274,139,278],
[274,413,274,412,0,274,274,413,413],
[277,277,277,273,277,0,412,277,412],
[139,139,139,277,277,139,0,277,139],
[274,274,135,412,138,274,274,0,274],
[138,138,138,273,138,139,412,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,284,292,285,303,292,273],
[265,0,279,255,288,271,292,289,289],
[266,272,0,270,292,267,303,289,265],
[267,296,281,0,302,279,282,290,288],
[259,263,259,249,0,261,260,265,263],
[266,280,284,272,290,0,280,276,264],
[248,259,248,269,291,271,0,280,269],
[259,262,262,261,286,275,271,0,278],
[278,262,286,263,288,287,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,272,280,275,271,287,281,280],
[266,0,273,273,276,283,290,288,263],
[279,278,0,278,275,258,280,273,257],
[271,278,273,0,284,248,270,278,279],
[276,275,276,267,0,244,283,289,260],
[280,268,293,303,307,0,290,284,287],
[264,261,271,281,268,261,0,281,264],
[270,263,278,273,262,267,270,0,263],
[271,288,294,272,291,264,287,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,271,287,275,269,280,279],
[271,0,271,256,308,286,285,293,285],
[272,280,0,296,288,296,278,277,277],
[280,295,255,0,302,304,272,266,277],
[264,243,263,249,0,265,283,252,252],
[276,265,255,247,286,0,259,266,263],
[282,266,273,279,268,292,0,277,263],
[271,258,274,285,299,285,274,0,273],
[272,266,274,274,299,288,288,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,264,274,279,263,262,260,253],
[280,0,261,306,291,274,279,285,279],
[287,290,0,312,282,274,300,283,266],
[277,245,239,0,257,265,230,280,251],
[272,260,269,294,0,282,296,289,275],
[288,277,277,286,269,0,298,294,290],
[289,272,251,321,255,253,0,287,290],
[291,266,268,271,262,257,264,0,251],
[298,272,285,300,276,261,261,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,245,277,291,239,237,281,248],
[299,0,268,310,301,270,267,285,277],
[306,283,0,300,291,272,270,294,273],
[274,241,251,0,302,253,246,276,241],
[260,250,260,249,0,250,249,256,258],
[312,281,279,298,301,0,253,271,272],
[314,284,281,305,302,298,0,297,265],
[270,266,257,275,295,280,254,0,251],
[303,274,278,310,293,279,286,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,289,280,257,262,259,272],
[274,0,264,252,266,264,266,269,253],
[266,287,0,261,285,273,280,278,267],
[262,299,290,0,299,268,272,290,277],
[271,285,266,252,0,261,278,275,255],
[294,287,278,283,290,0,278,270,286],
[289,285,271,279,273,273,0,272,245],
[292,282,273,261,276,281,279,0,275],
[279,298,284,274,296,265,306,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,268,250,280,286,268,258,283],
[289,0,296,273,311,317,296,302,281],
[283,255,0,261,285,296,278,290,277],
[301,278,290,0,301,305,306,288,274],
[271,240,266,250,0,294,283,268,263],
[265,234,255,246,257,0,273,250,242],
[283,255,273,245,268,278,0,263,245],
[293,249,261,263,283,301,288,0,266],
[268,270,274,277,288,309,306,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,264,259,254,270,265,268,264],
[308,0,282,274,272,291,280,271,280],
[287,269,0,260,278,278,272,271,260],
[292,277,291,0,273,283,290,274,294],
[297,279,273,278,0,289,280,297,270],
[281,260,273,268,262,0,279,281,251],
[286,271,279,261,271,272,0,277,258],
[283,280,280,277,254,270,274,0,260],
[287,271,291,257,281,300,293,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,301,278,276,282,269,246,268],
[274,0,270,269,288,290,264,288,259],
[250,281,0,253,262,262,270,229,265],
[273,282,298,0,294,291,277,250,277],
[275,263,289,257,0,265,259,244,271],
[269,261,289,260,286,0,269,248,255],
[282,287,281,274,292,282,0,282,258],
[305,263,322,301,307,303,269,0,275],
[283,292,286,274,280,296,293,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,276,277,281,268,277,288,283],
[274,0,275,276,271,262,276,272,257],
[275,276,0,276,271,271,265,271,257],
[274,275,275,0,280,281,295,275,285],
[270,280,280,271,0,279,288,270,266],
[283,289,280,270,272,0,286,282,269],
[274,275,286,256,263,265,0,269,266],
[263,279,280,276,281,269,282,0,284],
[268,294,294,266,285,282,285,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,284,280,314,288,258,220,262],
[307,0,297,304,319,294,279,267,303],
[267,254,0,304,291,287,230,241,269],
[271,247,247,0,287,256,211,243,228],
[237,232,260,264,0,301,235,235,237],
[263,257,264,295,250,0,226,266,267],
[293,272,321,340,316,325,0,281,280],
[331,284,310,308,316,285,270,0,289],
[289,248,282,323,314,284,271,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,286,287,292,301,274,283,283],
[273,0,267,297,277,320,276,273,308],
[265,284,0,287,280,302,266,266,287],
[264,254,264,0,247,288,257,261,271],
[259,274,271,304,0,288,272,283,285],
[250,231,249,263,263,0,258,255,290],
[277,275,285,294,279,293,0,283,288],
[268,278,285,290,268,296,268,0,282],
[268,243,264,280,266,261,263,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,260,254,197,330,271,218,294],
[271,0,269,290,286,353,327,278,315],
[291,282,0,293,264,348,283,309,260],
[297,261,258,0,304,333,310,308,283],
[354,265,287,247,0,338,291,301,314],
[221,198,203,218,213,0,232,184,220],
[280,224,268,241,260,319,0,281,293],
[333,273,242,243,250,367,270,0,309],
[257,236,291,268,237,331,258,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,292,276,281,273,288,289,291],
[288,0,268,284,255,280,268,260,267],
[259,283,0,274,290,274,268,287,277],
[275,267,277,0,267,275,279,275,265],
[270,296,261,284,0,269,282,295,268],
[278,271,277,276,282,0,275,272,264],
[263,283,283,272,269,276,0,250,274],
[262,291,264,276,256,279,301,0,266],
[260,284,274,286,283,287,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,307,276,246,286,295,266,267],
[273,0,272,287,302,268,319,291,282],
[244,279,0,250,302,268,281,267,254],
[275,264,301,0,307,257,300,287,288],
[305,249,249,244,0,280,242,288,253],
[265,283,283,294,271,0,291,297,278],
[256,232,270,251,309,260,0,300,280],
[285,260,284,264,263,254,251,0,280],
[284,269,297,263,298,273,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,315,275,283,234,278,266,236],
[281,0,311,267,264,258,306,274,279],
[236,240,0,231,245,233,267,231,239],
[276,284,320,0,296,276,272,298,282],
[268,287,306,255,0,231,269,290,281],
[317,293,318,275,320,0,290,318,306],
[273,245,284,279,282,261,0,283,265],
[285,277,320,253,261,233,268,0,270],
[315,272,312,269,270,245,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,275,284,255,232,259,245,228],
[261,0,288,285,295,238,259,270,272],
[276,263,0,317,268,247,240,273,267],
[267,266,234,0,249,241,261,264,274],
[296,256,283,302,0,250,272,237,261],
[319,313,304,310,301,0,295,267,276],
[292,292,311,290,279,256,0,292,291],
[306,281,278,287,314,284,259,0,250],
[323,279,284,277,290,275,260,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,265,277,262,250,265,268,274],
[282,0,267,267,250,254,253,261,242],
[286,284,0,274,288,275,274,306,292],
[274,284,277,0,248,256,279,284,257],
[289,301,263,303,0,281,274,281,271],
[301,297,276,295,270,0,294,313,307],
[286,298,277,272,277,257,0,279,278],
[283,290,245,267,270,238,272,0,273],
[277,309,259,294,280,244,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,270,282,243,281,255,266,265],
[307,0,286,327,287,287,261,317,305],
[281,265,0,288,268,290,271,286,288],
[269,224,263,0,222,247,263,262,272],
[308,264,283,329,0,290,307,319,323],
[270,264,261,304,261,0,286,269,279],
[296,290,280,288,244,265,0,307,306],
[285,234,265,289,232,282,244,0,262],
[286,246,263,279,228,272,245,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,249,305,226,309,256,259,227],
[333,0,280,260,260,327,289,277,280],
[302,271,0,244,224,296,285,309,276],
[246,291,307,0,278,311,306,298,266],
[325,291,327,273,0,326,296,314,302],
[242,224,255,240,225,0,242,228,241],
[295,262,266,245,255,309,0,281,272],
[292,274,242,253,237,323,270,0,289],
[324,271,275,285,249,310,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,289,297,277,288,286,281,289],
[279,0,257,239,267,265,242,253,271],
[262,294,0,280,259,267,272,283,250],
[254,312,271,0,266,261,281,273,275],
[274,284,292,285,0,292,285,279,275],
[263,286,284,290,259,0,270,283,291],
[265,309,279,270,266,281,0,258,273],
[270,298,268,278,272,268,293,0,277],
[262,280,301,276,276,260,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,315,264,288,263,304,264,318],
[269,0,313,274,316,302,320,240,338],
[236,238,0,236,251,251,236,258,280],
[287,277,315,0,258,286,324,282,352],
[263,235,300,293,0,254,284,228,303],
[288,249,300,265,297,0,271,241,300],
[247,231,315,227,267,280,0,265,322],
[287,311,293,269,323,310,286,0,341],
[233,213,271,199,248,251,229,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,272,265,306,266,269,260,286],
[290,0,267,265,290,243,264,255,290],
[279,284,0,277,287,282,274,285,269],
[286,286,274,0,306,266,260,277,285],
[245,261,264,245,0,258,267,252,276],
[285,308,269,285,293,0,318,279,267],
[282,287,277,291,284,233,0,264,277],
[291,296,266,274,299,272,287,0,292],
[265,261,282,266,275,284,274,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,295,277,301,277,288,263,282],
[251,0,246,244,272,254,281,234,261],
[256,305,0,266,319,250,287,258,271],
[274,307,285,0,312,275,310,275,301],
[250,279,232,239,0,257,267,225,262],
[274,297,301,276,294,0,292,278,308],
[263,270,264,241,284,259,0,255,295],
[288,317,293,276,326,273,296,0,299],
[269,290,280,250,289,243,256,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,282,262,271,250,283,283,287],
[249,0,283,262,247,284,259,268,281],
[269,268,0,283,283,247,280,285,313],
[289,289,268,0,292,247,287,313,300],
[280,304,268,259,0,245,274,289,302],
[301,267,304,304,306,0,301,318,296],
[268,292,271,264,277,250,0,278,281],
[268,283,266,238,262,233,273,0,283],
[264,270,238,251,249,255,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,287,274,266,271,302,290],
[266,0,272,283,290,274,282,299,292],
[274,279,0,282,287,272,265,295,300],
[264,268,269,0,272,275,266,293,300],
[277,261,264,279,0,277,270,288,288],
[285,277,279,276,274,0,261,306,301],
[280,269,286,285,281,290,0,295,295],
[249,252,256,258,263,245,256,0,268],
[261,259,251,251,263,250,256,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,252,351,350,303,236,214,317],
[250,0,329,381,365,350,300,295,316],
[299,222,0,265,316,267,234,265,349],
[200,170,286,0,233,186,201,198,233],
[201,186,235,318,0,183,200,216,266],
[248,201,284,365,368,0,302,262,332],
[315,251,317,350,351,249,0,247,266],
[337,256,286,353,335,289,304,0,353],
[234,235,202,318,285,219,285,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,304,300,260,297,273,277,273],
[262,0,281,281,276,279,267,273,276],
[247,270,0,260,263,269,247,268,269],
[251,270,291,0,260,278,261,256,280],
[291,275,288,291,0,293,282,287,283],
[254,272,282,273,258,0,285,271,275],
[278,284,304,290,269,266,0,271,298],
[274,278,283,295,264,280,280,0,271],
[278,275,282,271,268,276,253,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,287,276,273,297,301,268,284],
[265,0,282,267,284,273,275,263,262],
[264,269,0,275,255,280,268,251,270],
[275,284,276,0,269,280,269,278,265],
[278,267,296,282,0,285,277,271,274],
[254,278,271,271,266,0,276,261,274],
[250,276,283,282,274,275,0,251,270],
[283,288,300,273,280,290,300,0,268],
[267,289,281,286,277,277,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,285,276,280,267,266,290,296],
[263,0,272,262,276,287,262,270,287],
[266,279,0,267,268,280,247,278,285],
[275,289,284,0,291,281,276,297,290],
[271,275,283,260,0,263,249,281,277],
[284,264,271,270,288,0,255,266,285],
[285,289,304,275,302,296,0,302,296],
[261,281,273,254,270,285,249,0,286],
[255,264,266,261,274,266,255,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,272,306,293,257,288,252,317],
[292,0,267,347,313,281,313,273,321],
[279,284,0,342,313,314,298,274,330],
[245,204,209,0,225,213,235,213,261],
[258,238,238,326,0,281,295,253,279],
[294,270,237,338,270,0,255,290,308],
[263,238,253,316,256,296,0,226,262],
[299,278,277,338,298,261,325,0,322],
[234,230,221,290,272,243,289,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,279,285,260,261,250,271,256],
[279,0,279,277,258,265,257,263,268],
[272,272,0,272,260,267,247,272,258],
[266,274,279,0,261,257,249,267,251],
[291,293,291,290,0,298,275,296,266],
[290,286,284,294,253,0,268,263,280],
[301,294,304,302,276,283,0,280,274],
[280,288,279,284,255,288,271,0,267],
[295,283,293,300,285,271,277,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,268,277,261,261,267,271,275],
[273,0,272,278,279,271,258,255,271],
[283,279,0,274,285,274,275,282,253],
[274,273,277,0,294,271,267,269,270],
[290,272,266,257,0,263,252,243,243],
[290,280,277,280,288,0,279,263,260],
[284,293,276,284,299,272,0,284,254],
[280,296,269,282,308,288,267,0,283],
[276,280,298,281,308,291,297,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,297,300,271,280,273,308,293],
[264,0,269,247,230,258,286,298,271],
[254,282,0,276,255,271,283,257,276],
[251,304,275,0,264,283,281,289,280],
[280,321,296,287,0,311,274,315,304],
[271,293,280,268,240,0,284,281,275],
[278,265,268,270,277,267,0,288,267],
[243,253,294,262,236,270,263,0,277],
[258,280,275,271,247,276,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,250,210,252,212,293,207,126],
[296,0,292,251,295,253,250,208,166],
[301,259,0,384,382,298,256,254,340],
[341,300,167,0,423,256,251,212,253],
[299,256,169,128,0,213,166,254,168],
[339,298,253,295,338,0,336,296,166],
[258,301,295,300,385,215,0,297,212],
[344,343,297,339,297,255,254,0,213],
[425,385,211,298,383,385,339,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,298,284,315,276,277,280,268],
[323,0,346,292,279,292,250,299,303],
[253,205,0,273,243,272,265,229,247],
[267,259,278,0,274,297,246,259,275],
[236,272,308,277,0,278,288,274,266],
[275,259,279,254,273,0,258,243,277],
[274,301,286,305,263,293,0,303,310],
[271,252,322,292,277,308,248,0,278],
[283,248,304,276,285,274,241,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,276,289,262,259,313,291,256],
[265,0,263,302,277,275,305,272,287],
[275,288,0,300,274,256,302,285,290],
[262,249,251,0,234,253,264,262,235],
[289,274,277,317,0,284,306,311,286],
[292,276,295,298,267,0,310,276,284],
[238,246,249,287,245,241,0,272,247],
[260,279,266,289,240,275,279,0,273],
[295,264,261,316,265,267,304,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,280,279,284,268,283,273,282],
[279,0,280,272,267,259,270,252,286],
[271,271,0,292,277,287,281,262,283],
[272,279,259,0,278,269,270,279,293],
[267,284,274,273,0,262,275,263,273],
[283,292,264,282,289,0,266,279,283],
[268,281,270,281,276,285,0,269,292],
[278,299,289,272,288,272,282,0,291],
[269,265,268,258,278,268,259,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,273,276,280,279,276,267,262],
[246,0,260,218,283,248,232,261,223],
[278,291,0,246,285,276,255,258,239],
[275,333,305,0,290,301,259,300,226],
[271,268,266,261,0,256,257,266,233],
[272,303,275,250,295,0,278,275,266],
[275,319,296,292,294,273,0,295,280],
[284,290,293,251,285,276,256,0,250],
[289,328,312,325,318,285,271,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,288,290,269,268,261,287,281],
[268,0,278,266,256,270,272,273,274],
[263,273,0,278,258,262,261,265,292],
[261,285,273,0,290,293,287,288,302],
[282,295,293,261,0,286,260,280,281],
[283,281,289,258,265,0,283,281,263],
[290,279,290,264,291,268,0,294,283],
[264,278,286,263,271,270,257,0,303],
[270,277,259,249,270,288,268,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,311,271,287,316,274,291,288],
[272,0,275,289,290,313,285,299,305],
[240,276,0,258,261,284,270,266,287],
[280,262,293,0,277,314,263,291,288],
[264,261,290,274,0,288,265,268,275],
[235,238,267,237,263,0,255,258,266],
[277,266,281,288,286,296,0,285,290],
[260,252,285,260,283,293,266,0,279],
[263,246,264,263,276,285,261,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,279,278,304,290,298,316,259],
[235,0,267,265,286,238,299,272,271],
[272,284,0,272,302,266,279,285,267],
[273,286,279,0,301,285,307,288,289],
[247,265,249,250,0,237,254,233,256],
[261,313,285,266,314,0,310,303,293],
[253,252,272,244,297,241,0,267,256],
[235,279,266,263,318,248,284,0,257],
[292,280,284,262,295,258,295,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,268,268,298,291,264,263,268],
[286,0,280,286,308,293,275,288,272],
[283,271,0,308,309,316,276,281,289],
[283,265,243,0,294,274,279,268,277],
[253,243,242,257,0,273,267,274,232],
[260,258,235,277,278,0,239,249,268],
[287,276,275,272,284,312,0,277,294],
[288,263,270,283,277,302,274,0,276],
[283,279,262,274,319,283,257,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,297,281,274,273,266,276,300],
[278,0,261,278,263,272,270,261,282],
[254,290,0,284,279,302,266,264,292],
[270,273,267,0,274,278,282,264,301],
[277,288,272,277,0,283,265,267,303],
[278,279,249,273,268,0,265,256,274],
[285,281,285,269,286,286,0,269,300],
[275,290,287,287,284,295,282,0,295],
[251,269,259,250,248,277,251,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,300,320,316,303,330,263,269],
[264,0,264,278,307,296,288,247,280],
[251,287,0,291,307,320,321,288,273],
[231,273,260,0,263,257,295,251,232],
[235,244,244,288,0,271,293,275,252],
[248,255,231,294,280,0,280,257,259],
[221,263,230,256,258,271,0,265,223],
[288,304,263,300,276,294,286,0,278],
[282,271,278,319,299,292,328,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,278,247,252,263,263,298,263],
[258,0,294,259,264,284,276,288,282],
[273,257,0,248,252,242,253,258,243],
[304,292,303,0,268,289,306,301,290],
[299,287,299,283,0,273,305,286,298],
[288,267,309,262,278,0,285,298,285],
[288,275,298,245,246,266,0,277,277],
[253,263,293,250,265,253,274,0,270],
[288,269,308,261,253,266,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,281,259,243,288,274,265,278],
[268,0,274,261,267,276,265,274,282],
[270,277,0,254,279,268,269,284,268],
[292,290,297,0,287,283,292,293,273],
[308,284,272,264,0,289,282,292,279],
[263,275,283,268,262,0,267,284,264],
[277,286,282,259,269,284,0,271,274],
[286,277,267,258,259,267,280,0,264],
[273,269,283,278,272,287,277,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,277,280,274,275,276,319,271],
[264,0,244,251,263,254,268,282,250],
[274,307,0,253,277,289,282,300,297],
[271,300,298,0,289,303,277,308,306],
[277,288,274,262,0,273,272,299,276],
[276,297,262,248,278,0,274,309,263],
[275,283,269,274,279,277,0,312,288],
[232,269,251,243,252,242,239,0,261],
[280,301,254,245,275,288,263,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,283,291,274,266,285,273,276],
[262,0,272,290,271,261,283,262,268],
[268,279,0,283,279,265,281,284,275],
[260,261,268,0,274,267,278,273,238],
[277,280,272,277,0,254,278,267,258],
[285,290,286,284,297,0,301,287,256],
[266,268,270,273,273,250,0,260,250],
[278,289,267,278,284,264,291,0,257],
[275,283,276,313,293,295,301,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,282,258,249,285,260,260,286],
[282,0,278,285,267,284,294,286,271],
[269,273,0,292,281,297,280,270,279],
[293,266,259,0,274,279,272,270,271],
[302,284,270,277,0,299,271,269,263],
[266,267,254,272,252,0,277,271,231],
[291,257,271,279,280,274,0,264,269],
[291,265,281,281,282,280,287,0,277],
[265,280,272,280,288,320,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,290,302,287,285,292,272,279],
[272,0,280,291,282,268,281,273,277],
[261,271,0,281,282,267,282,283,297],
[249,260,270,0,256,256,259,274,269],
[264,269,269,295,0,275,284,282,278],
[266,283,284,295,276,0,282,278,284],
[259,270,269,292,267,269,0,266,260],
[279,278,268,277,269,273,285,0,290],
[272,274,254,282,273,267,291,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,309,289,279,285,295,288,275],
[261,0,332,252,294,314,287,314,298],
[242,219,0,239,228,257,261,226,253],
[262,299,312,0,283,313,299,295,305],
[272,257,323,268,0,273,271,292,309],
[266,237,294,238,278,0,262,291,283],
[256,264,290,252,280,289,0,287,281],
[263,237,325,256,259,260,264,0,309],
[276,253,298,246,242,268,270,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,250,264,222,224,306,272,279],
[306,0,235,240,230,242,255,281,269],
[301,316,0,289,240,308,292,320,297],
[287,311,262,0,264,261,282,306,301],
[329,321,311,287,0,262,315,295,306],
[327,309,243,290,289,0,299,326,306],
[245,296,259,269,236,252,0,237,274],
[279,270,231,245,256,225,314,0,291],
[272,282,254,250,245,245,277,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,287,238,267,252,320,237,271],
[295,0,335,285,296,316,293,252,225],
[264,216,0,234,251,236,251,157,186],
[313,266,317,0,286,250,349,194,256],
[284,255,300,265,0,283,302,203,269],
[299,235,315,301,268,0,336,287,303],
[231,258,300,202,249,215,0,202,188],
[314,299,394,357,348,264,349,0,286],
[280,326,365,295,282,248,363,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,288,275,276,303,266,281,281],
[270,0,286,253,260,281,267,281,284],
[263,265,0,267,261,270,265,273,267],
[276,298,284,0,267,300,278,273,272],
[275,291,290,284,0,297,271,268,290],
[248,270,281,251,254,0,269,259,274],
[285,284,286,273,280,282,0,272,270],
[270,270,278,278,283,292,279,0,280],
[270,267,284,279,261,277,281,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,256,295,283,280,286,293,281],
[256,0,230,262,254,291,268,292,272],
[295,321,0,280,270,304,293,303,310],
[256,289,271,0,263,303,280,296,278],
[268,297,281,288,0,299,307,295,267],
[271,260,247,248,252,0,276,309,279],
[265,283,258,271,244,275,0,283,259],
[258,259,248,255,256,242,268,0,250],
[270,279,241,273,284,272,292,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,309,271,241,307,239,262,279],
[281,0,298,297,272,303,284,290,256],
[242,253,0,269,261,258,244,256,267],
[280,254,282,0,292,264,252,272,307],
[310,279,290,259,0,323,286,282,292],
[244,248,293,287,228,0,217,244,262],
[312,267,307,299,265,334,0,291,291],
[289,261,295,279,269,307,260,0,299],
[272,295,284,244,259,289,260,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,292,298,279,327,309,320,267],
[248,0,244,251,226,283,259,258,230],
[259,307,0,272,253,301,287,252,278],
[253,300,279,0,250,310,295,274,284],
[272,325,298,301,0,343,320,326,284],
[224,268,250,241,208,0,269,256,245],
[242,292,264,256,231,282,0,275,268],
[231,293,299,277,225,295,276,0,253],
[284,321,273,267,267,306,283,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,277,287,263,269,277,278,286],
[262,0,261,256,241,252,250,265,258],
[274,290,0,269,263,261,273,262,263],
[264,295,282,0,271,275,274,259,273],
[288,310,288,280,0,274,278,272,272],
[282,299,290,276,277,0,275,272,280],
[274,301,278,277,273,276,0,271,272],
[273,286,289,292,279,279,280,0,267],
[265,293,288,278,279,271,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,262,264,257,282,286,260,266],
[287,0,268,259,239,253,283,256,295],
[289,283,0,295,272,278,284,285,265],
[287,292,256,0,244,275,289,287,267],
[294,312,279,307,0,282,284,274,286],
[269,298,273,276,269,0,280,267,274],
[265,268,267,262,267,271,0,263,280],
[291,295,266,264,277,284,288,0,282],
[285,256,286,284,265,277,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,273,259,273,290,262,295,281],
[303,0,291,261,291,318,300,292,297],
[278,260,0,252,287,305,269,283,296],
[292,290,299,0,277,303,281,275,295],
[278,260,264,274,0,299,256,270,300],
[261,233,246,248,252,0,246,274,272],
[289,251,282,270,295,305,0,280,307],
[256,259,268,276,281,277,271,0,297],
[270,254,255,256,251,279,244,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,250,262,267,282,270,295,298],
[253,0,258,264,266,248,259,273,271],
[301,293,0,248,284,249,279,271,285],
[289,287,303,0,267,271,275,296,295],
[284,285,267,284,0,284,276,293,320],
[269,303,302,280,267,0,273,289,313],
[281,292,272,276,275,278,0,272,303],
[256,278,280,255,258,262,279,0,282],
[253,280,266,256,231,238,248,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,325,307,331,275,316,328,304],
[237,0,287,246,279,273,286,283,277],
[226,264,0,274,300,265,237,282,250],
[244,305,277,0,294,276,290,298,293],
[220,272,251,257,0,251,261,273,273],
[276,278,286,275,300,0,296,299,279],
[235,265,314,261,290,255,0,289,281],
[223,268,269,253,278,252,262,0,270],
[247,274,301,258,278,272,270,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,299,281,290,291,293,295,281],
[278,0,272,293,286,267,292,283,292],
[252,279,0,257,269,256,251,264,272],
[270,258,294,0,271,254,288,266,261],
[261,265,282,280,0,257,289,279,275],
[260,284,295,297,294,0,296,274,292],
[258,259,300,263,262,255,0,282,282],
[256,268,287,285,272,277,269,0,276],
[270,259,279,290,276,259,269,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,285,276,272,290,262,279,280],
[276,0,280,262,276,283,269,274,278],
[266,271,0,259,267,267,261,274,264],
[275,289,292,0,281,286,269,295,288],
[279,275,284,270,0,296,281,274,278],
[261,268,284,265,255,0,263,265,281],
[289,282,290,282,270,288,0,286,287],
[272,277,277,256,277,286,265,0,277],
[271,273,287,263,273,270,264,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,243,298,253,240,251,260,257],
[297,0,251,312,257,238,262,262,262],
[308,300,0,323,279,273,304,272,312],
[253,239,228,0,225,241,249,239,255],
[298,294,272,326,0,293,295,302,291],
[311,313,278,310,258,0,300,295,305],
[300,289,247,302,256,251,0,265,291],
[291,289,279,312,249,256,286,0,283],
[294,289,239,296,260,246,260,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,220,258,227,237,300,277,308],
[294,0,261,244,259,284,279,267,299],
[331,290,0,246,279,294,294,306,337],
[293,307,305,0,265,329,266,288,277],
[324,292,272,286,0,274,306,289,329],
[314,267,257,222,277,0,271,273,300],
[251,272,257,285,245,280,0,264,286],
[274,284,245,263,262,278,287,0,295],
[243,252,214,274,222,251,265,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,283,285,274,285,285,284,292],
[247,0,243,247,233,239,252,262,244],
[268,308,0,278,269,287,256,283,289],
[266,304,273,0,285,273,269,283,286],
[277,318,282,266,0,256,287,289,285],
[266,312,264,278,295,0,285,302,291],
[266,299,295,282,264,266,0,295,292],
[267,289,268,268,262,249,256,0,280],
[259,307,262,265,266,260,259,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,283,254,262,279,270,291,303],
[289,0,277,255,266,264,277,264,288],
[268,274,0,260,267,293,295,292,315],
[297,296,291,0,256,278,260,284,306],
[289,285,284,295,0,295,270,298,286],
[272,287,258,273,256,0,259,293,287],
[281,274,256,291,281,292,0,330,309],
[260,287,259,267,253,258,221,0,283],
[248,263,236,245,265,264,242,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,275,286,280,314,324,282,298],
[254,0,264,273,278,289,282,261,281],
[276,287,0,270,288,288,307,271,291],
[265,278,281,0,279,298,301,263,284],
[271,273,263,272,0,291,304,247,278],
[237,262,263,253,260,0,271,230,257],
[227,269,244,250,247,280,0,252,270],
[269,290,280,288,304,321,299,0,293],
[253,270,260,267,273,294,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,279,299,311,291,273,308,280],
[259,0,285,287,296,271,254,293,272],
[272,266,0,268,287,269,258,264,255],
[252,264,283,0,290,270,257,268,264],
[240,255,264,261,0,232,247,269,265],
[260,280,282,281,319,0,279,293,266],
[278,297,293,294,304,272,0,279,290],
[243,258,287,283,282,258,272,0,270],
[271,279,296,287,286,285,261,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,263,294,265,268,286,300,270],
[276,0,280,269,262,236,262,285,279],
[288,271,0,295,269,252,301,280,292],
[257,282,256,0,269,274,295,265,247],
[286,289,282,282,0,277,275,296,282],
[283,315,299,277,274,0,290,301,302],
[265,289,250,256,276,261,0,270,253],
[251,266,271,286,255,250,281,0,270],
[281,272,259,304,269,249,298,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,260,280,264,278,277,270,274],
[292,0,256,296,271,267,307,290,278],
[291,295,0,268,271,276,300,261,274],
[271,255,283,0,249,264,278,282,276],
[287,280,280,302,0,280,284,258,284],
[273,284,275,287,271,0,305,275,286],
[274,244,251,273,267,246,0,266,246],
[281,261,290,269,293,276,285,0,277],
[277,273,277,275,267,265,305,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,255,261,251,255,227,228,243],
[301,0,252,284,245,254,266,251,282],
[296,299,0,288,254,250,259,252,270],
[290,267,263,0,243,257,254,254,256],
[300,306,297,308,0,271,287,257,293],
[296,297,301,294,280,0,293,279,273],
[324,285,292,297,264,258,0,271,264],
[323,300,299,297,294,272,280,0,274],
[308,269,281,295,258,278,287,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,266,282,282,292,276,266,251],
[298,0,282,291,272,323,255,264,255],
[285,269,0,252,292,273,266,257,255],
[269,260,299,0,279,274,257,269,258],
[269,279,259,272,0,276,258,252,222],
[259,228,278,277,275,0,252,247,211],
[275,296,285,294,293,299,0,283,264],
[285,287,294,282,299,304,268,0,284],
[300,296,296,293,329,340,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,278,268,260,250,274,278,314],
[280,0,260,256,289,253,239,271,278],
[273,291,0,273,277,274,275,278,283],
[283,295,278,0,283,238,277,295,289],
[291,262,274,268,0,239,280,285,291],
[301,298,277,313,312,0,275,313,299],
[277,312,276,274,271,276,0,287,287],
[273,280,273,256,266,238,264,0,276],
[237,273,268,262,260,252,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,270,253,282,304,275,272,281],
[276,0,279,281,269,275,261,249,274],
[281,272,0,278,256,292,260,247,290],
[298,270,273,0,289,277,264,288,285],
[269,282,295,262,0,264,283,263,279],
[247,276,259,274,287,0,258,278,272],
[276,290,291,287,268,293,0,263,282],
[279,302,304,263,288,273,288,0,283],
[270,277,261,266,272,279,269,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,278,246,261,255,268,275,300],
[308,0,295,271,261,272,287,294,301],
[273,256,0,265,262,254,248,287,294],
[305,280,286,0,277,273,249,293,285],
[290,290,289,274,0,286,274,303,307],
[296,279,297,278,265,0,263,279,286],
[283,264,303,302,277,288,0,339,283],
[276,257,264,258,248,272,212,0,276],
[251,250,257,266,244,265,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,289,296,281,300,300,277,268],
[235,0,267,252,253,291,267,242,257],
[262,284,0,272,254,281,256,258,289],
[255,299,279,0,291,289,262,249,267],
[270,298,297,260,0,294,271,282,277],
[251,260,270,262,257,0,262,267,269],
[251,284,295,289,280,289,0,268,289],
[274,309,293,302,269,284,283,0,274],
[283,294,262,284,274,282,262,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,263,270,265,265,287,259,262],
[294,0,270,306,284,282,296,285,274],
[288,281,0,291,271,297,297,295,291],
[281,245,260,0,276,237,283,285,280],
[286,267,280,275,0,254,290,266,298],
[286,269,254,314,297,0,279,300,278],
[264,255,254,268,261,272,0,283,284],
[292,266,256,266,285,251,268,0,273],
[289,277,260,271,253,273,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,275,268,280,283,260,255,302],
[227,0,243,242,265,251,244,247,254],
[276,308,0,280,261,279,260,278,284],
[283,309,271,0,286,286,246,267,285],
[271,286,290,265,0,290,275,279,299],
[268,300,272,265,261,0,270,249,281],
[291,307,291,305,276,281,0,270,285],
[296,304,273,284,272,302,281,0,306],
[249,297,267,266,252,270,266,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,274,270,284,286,258,274,248],
[295,0,272,289,298,298,292,281,276],
[277,279,0,270,289,287,269,280,262],
[281,262,281,0,282,289,255,281,262],
[267,253,262,269,0,283,260,260,250],
[265,253,264,262,268,0,238,252,264],
[293,259,282,296,291,313,0,288,282],
[277,270,271,270,291,299,263,0,268],
[303,275,289,289,301,287,269,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,275,254,261,235,241,254,267],
[305,0,274,261,298,276,260,253,287],
[276,277,0,229,277,250,261,242,256],
[297,290,322,0,279,272,260,281,295],
[290,253,274,272,0,255,239,282,265],
[316,275,301,279,296,0,288,276,272],
[310,291,290,291,312,263,0,278,279],
[297,298,309,270,269,275,273,0,288],
[284,264,295,256,286,279,272,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,288,267,260,283,289,266,267],
[268,0,293,268,252,266,265,251,279],
[263,258,0,265,259,279,266,253,269],
[284,283,286,0,279,291,273,269,304],
[291,299,292,272,0,310,315,277,296],
[268,285,272,260,241,0,274,260,276],
[262,286,285,278,236,277,0,249,287],
[285,300,298,282,274,291,302,0,304],
[284,272,282,247,255,275,264,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,223,245,324,211,212,235,267],
[364,0,241,295,336,265,244,295,220],
[328,310,0,316,337,272,263,294,265],
[306,256,235,0,323,239,224,247,245],
[227,215,214,228,0,225,153,259,228],
[340,286,279,312,326,0,266,268,334],
[339,307,288,327,398,285,0,338,269],
[316,256,257,304,292,283,213,0,249],
[284,331,286,306,323,217,282,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,271,273,278,287,258,268],
[274,0,293,272,293,245,302,269,295],
[289,258,0,293,281,269,287,283,280],
[280,279,258,0,274,253,279,263,279],
[278,258,270,277,0,272,293,262,266],
[273,306,282,298,279,0,289,282,270],
[264,249,264,272,258,262,0,260,283],
[293,282,268,288,289,269,291,0,275],
[283,256,271,272,285,281,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,266,224,266,259,256,269,248],
[270,0,255,255,284,281,266,245,240],
[285,296,0,262,290,291,252,240,246],
[327,296,289,0,320,297,273,280,283],
[285,267,261,231,0,285,246,253,237],
[292,270,260,254,266,0,259,232,256],
[295,285,299,278,305,292,0,266,266],
[282,306,311,271,298,319,285,0,269],
[303,311,305,268,314,295,285,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,266,292,289,312,315,326,287],
[226,0,230,241,247,199,257,263,272],
[285,321,0,307,302,260,291,274,295],
[259,310,244,0,262,262,272,269,269],
[262,304,249,289,0,283,244,327,294],
[239,352,291,289,268,0,305,288,303],
[236,294,260,279,307,246,0,317,304],
[225,288,277,282,224,263,234,0,257],
[264,279,256,282,257,248,247,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,298,263,277,287,262,250],
[266,0,280,305,283,287,279,282,278],
[256,271,0,288,269,263,249,266,239],
[253,246,263,0,262,266,261,258,247],
[288,268,282,289,0,264,281,266,252],
[274,264,288,285,287,0,271,263,264],
[264,272,302,290,270,280,0,270,280],
[289,269,285,293,285,288,281,0,282],
[301,273,312,304,299,287,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,265,176,352,222,198,242,222],
[285,0,199,220,263,157,156,287,288],
[286,352,0,352,240,373,310,329,289],
[375,331,199,0,329,330,310,353,263],
[199,288,311,222,0,289,266,330,266],
[329,394,178,221,262,0,263,243,217],
[353,395,241,241,285,288,0,375,308],
[309,264,222,198,221,308,176,0,197],
[329,263,262,288,285,334,243,354,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,271,345,315,320,284,322,347],
[217,0,265,250,327,284,267,289,306],
[280,286,0,232,329,330,313,287,305],
[206,301,319,0,328,304,333,351,237],
[236,224,222,223,0,222,201,274,252],
[231,267,221,247,329,0,259,271,313],
[267,284,238,218,350,292,0,319,265],
[229,262,264,200,277,280,232,0,276],
[204,245,246,314,299,238,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,260,231,263,271,273,253,328],
[332,0,280,274,298,293,294,273,321],
[291,271,0,252,277,247,275,297,313],
[320,277,299,0,305,273,299,284,325],
[288,253,274,246,0,276,254,265,325],
[280,258,304,278,275,0,292,263,287],
[278,257,276,252,297,259,0,275,302],
[298,278,254,267,286,288,276,0,321],
[223,230,238,226,226,264,249,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,278,282,260,255,257,264,254],
[305,0,285,273,282,283,269,274,260],
[273,266,0,260,273,263,266,253,230],
[269,278,291,0,267,271,260,257,267],
[291,269,278,284,0,272,266,278,291],
[296,268,288,280,279,0,280,257,258],
[294,282,285,291,285,271,0,271,258],
[287,277,298,294,273,294,280,0,301],
[297,291,321,284,260,293,293,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,265,250,265,281,265,248],
[280,0,282,260,272,266,291,268,280],
[275,269,0,259,238,257,264,264,257],
[286,291,292,0,257,269,287,281,285],
[301,279,313,294,0,264,292,298,282],
[286,285,294,282,287,0,294,282,255],
[270,260,287,264,259,257,0,268,249],
[286,283,287,270,253,269,283,0,277],
[303,271,294,266,269,296,302,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,275,277,267,261,281,281,300],
[268,0,275,279,263,262,282,270,279],
[276,276,0,286,274,278,279,277,298],
[274,272,265,0,272,264,270,258,281],
[284,288,277,279,0,267,305,286,292],
[290,289,273,287,284,0,301,302,307],
[270,269,272,281,246,250,0,257,286],
[270,281,274,293,265,249,294,0,304],
[251,272,253,270,259,244,265,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,275,267,281,314,301,277,280],
[279,0,285,291,287,299,285,298,270],
[276,266,0,271,293,291,276,273,254],
[284,260,280,0,270,307,285,284,253],
[270,264,258,281,0,283,278,275,252],
[237,252,260,244,268,0,270,253,241],
[250,266,275,266,273,281,0,282,255],
[274,253,278,267,276,298,269,0,252],
[271,281,297,298,299,310,296,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,289,279,290,284,273,274,288],
[264,0,257,265,279,263,263,253,272],
[262,294,0,268,284,272,300,269,292],
[272,286,283,0,290,267,275,264,289],
[261,272,267,261,0,274,271,253,282],
[267,288,279,284,277,0,277,261,277],
[278,288,251,276,280,274,0,260,277],
[277,298,282,287,298,290,291,0,272],
[263,279,259,262,269,274,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,286,288,282,277,287,275,296],
[279,0,275,293,278,265,278,269,271],
[265,276,0,282,273,263,282,268,267],
[263,258,269,0,260,258,265,264,264],
[269,273,278,291,0,284,282,274,284],
[274,286,288,293,267,0,286,277,270],
[264,273,269,286,269,265,0,238,260],
[276,282,283,287,277,274,313,0,286],
[255,280,284,287,267,281,291,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,260,247,261,261,261,260],
[286,0,277,268,259,254,271,260,273],
[270,274,0,262,257,247,271,265,256],
[291,283,289,0,275,278,274,264,267],
[304,292,294,276,0,279,275,279,280],
[290,297,304,273,272,0,284,284,286],
[290,280,280,277,276,267,0,263,282],
[290,291,286,287,272,267,288,0,278],
[291,278,295,284,271,265,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,262,255,199,140,233,181,235],
[283,0,281,265,289,249,273,265,302],
[289,270,0,295,277,203,242,223,269],
[296,286,256,0,253,247,283,253,262],
[352,262,274,298,0,275,266,259,279],
[411,302,348,304,276,0,290,266,282],
[318,278,309,268,285,261,0,244,264],
[370,286,328,298,292,285,307,0,264],
[316,249,282,289,272,269,287,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,269,266,279,252,254,261,252],
[291,0,277,270,289,256,281,283,252],
[282,274,0,268,287,249,273,284,262],
[285,281,283,0,297,274,299,279,261],
[272,262,264,254,0,249,252,264,250],
[299,295,302,277,302,0,282,288,257],
[297,270,278,252,299,269,0,275,260],
[290,268,267,272,287,263,276,0,279],
[299,299,289,290,301,294,291,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,286,284,277,265,280,281],
[274,0,281,272,258,267,258,269,263],
[268,270,0,281,270,290,269,264,269],
[265,279,270,0,262,273,279,258,282],
[267,293,281,289,0,275,276,256,278],
[274,284,261,278,276,0,277,272,291],
[286,293,282,272,275,274,0,262,267],
[271,282,287,293,295,279,289,0,280],
[270,288,282,269,273,260,284,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,264,307,280,295,269,285,301],
[273,0,263,298,275,287,281,282,277],
[287,288,0,300,261,284,277,277,286],
[244,253,251,0,263,265,254,262,265],
[271,276,290,288,0,290,291,266,282],
[256,264,267,286,261,0,253,265,266],
[282,270,274,297,260,298,0,269,284],
[266,269,274,289,285,286,282,0,268],
[250,274,265,286,269,285,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,264,283,298,274,241,290,276],
[266,0,246,268,300,293,235,276,254],
[287,305,0,306,324,304,276,298,267],
[268,283,245,0,288,264,235,267,259],
[253,251,227,263,0,249,236,260,243],
[277,258,247,287,302,0,230,288,257],
[310,316,275,316,315,321,0,301,296],
[261,275,253,284,291,263,250,0,253],
[275,297,284,292,308,294,255,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,248,257,291,230,301,270,260],
[290,0,270,225,278,277,290,259,285],
[303,281,0,266,299,242,281,281,293],
[294,326,285,0,297,271,314,281,304],
[260,273,252,254,0,251,282,258,288],
[321,274,309,280,300,0,313,296,313],
[250,261,270,237,269,238,0,243,258],
[281,292,270,270,293,255,308,0,291],
[291,266,258,247,263,238,293,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,283,276,267,285,262,283,245],
[261,0,288,286,278,247,275,284,259],
[268,263,0,271,252,263,274,277,259],
[275,265,280,0,259,269,255,273,263],
[284,273,299,292,0,274,293,297,295],
[266,304,288,282,277,0,285,274,254],
[289,276,277,296,258,266,0,273,272],
[268,267,274,278,254,277,278,0,267],
[306,292,292,288,256,297,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,254,259,302,257,291,299,283],
[280,0,288,258,321,279,289,295,313],
[297,263,0,267,301,253,284,287,288],
[292,293,284,0,294,282,304,290,271],
[249,230,250,257,0,265,273,244,260],
[294,272,298,269,286,0,270,288,294],
[260,262,267,247,278,281,0,295,319],
[252,256,264,261,307,263,256,0,258],
[268,238,263,280,291,257,232,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,267,257,269,265,268,265,254],
[276,0,278,264,276,282,270,256,266],
[284,273,0,266,277,263,278,265,255],
[294,287,285,0,290,276,280,279,270],
[282,275,274,261,0,262,267,259,268],
[286,269,288,275,289,0,270,269,255],
[283,281,273,271,284,281,0,269,266],
[286,295,286,272,292,282,282,0,278],
[297,285,296,281,283,296,285,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,297,268,276,263,270,251,247],
[277,0,294,273,276,279,279,254,253],
[254,257,0,253,247,268,256,278,258],
[283,278,298,0,273,275,286,272,252],
[275,275,304,278,0,292,278,298,289],
[288,272,283,276,259,0,289,281,259],
[281,272,295,265,273,262,0,278,268],
[300,297,273,279,253,270,273,0,257],
[304,298,293,299,262,292,283,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,277,282,284,271,270,280],
[276,0,281,280,295,285,279,271,276],
[274,270,0,290,272,283,256,270,264],
[274,271,261,0,268,262,282,267,278],
[269,256,279,283,0,280,269,285,259],
[267,266,268,289,271,0,275,286,280],
[280,272,295,269,282,276,0,277,274],
[281,280,281,284,266,265,274,0,270],
[271,275,287,273,292,271,277,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,249,307,283,267,296,275,275],
[271,0,288,298,298,259,290,244,274],
[302,263,0,302,292,255,309,290,289],
[244,253,249,0,261,253,254,291,243],
[268,253,259,290,0,229,259,238,248],
[284,292,296,298,322,0,308,260,278],
[255,261,242,297,292,243,0,268,260],
[276,307,261,260,313,291,283,0,259],
[276,277,262,308,303,273,291,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,272,287,306,278,305,283,292],
[264,0,274,274,258,259,286,231,308],
[279,277,0,270,281,221,299,250,306],
[264,277,281,0,279,251,259,249,308],
[245,293,270,272,0,258,276,250,278],
[273,292,330,300,293,0,326,297,327],
[246,265,252,292,275,225,0,235,268],
[268,320,301,302,301,254,316,0,309],
[259,243,245,243,273,224,283,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,286,279,283,248,295,276,284],
[252,0,269,266,276,265,273,265,264],
[265,282,0,264,272,268,270,267,260],
[272,285,287,0,284,280,267,275,278],
[268,275,279,267,0,278,278,280,271],
[303,286,283,271,273,0,299,297,300],
[256,278,281,284,273,252,0,277,276],
[275,286,284,276,271,254,274,0,279],
[267,287,291,273,280,251,275,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,276,278,252,267,280,257,261],
[266,0,280,245,262,294,286,276,306],
[275,271,0,263,236,284,257,276,289],
[273,306,288,0,232,309,249,237,326],
[299,289,315,319,0,313,269,296,342],
[284,257,267,242,238,0,223,273,294],
[271,265,294,302,282,328,0,283,313],
[294,275,275,314,255,278,268,0,309],
[290,245,262,225,209,257,238,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,276,282,271,266,253,276,271],
[298,0,285,278,253,266,286,280,273],
[275,266,0,299,286,276,277,286,284],
[269,273,252,0,252,276,271,266,273],
[280,298,265,299,0,286,286,293,301],
[285,285,275,275,265,0,275,285,292],
[298,265,274,280,265,276,0,272,279],
[275,271,265,285,258,266,279,0,274],
[280,278,267,278,250,259,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,261,257,274,247,264,265,254],
[283,0,287,278,278,263,280,277,267],
[290,264,0,285,290,276,287,293,290],
[294,273,266,0,286,268,281,265,260],
[277,273,261,265,0,238,266,277,255],
[304,288,275,283,313,0,317,291,286],
[287,271,264,270,285,234,0,259,280],
[286,274,258,286,274,260,292,0,275],
[297,284,261,291,296,265,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,266,278,284,279,278,257,270],
[265,0,274,270,271,256,273,267,248],
[285,277,0,286,293,311,272,286,272],
[273,281,265,0,297,277,272,286,267],
[267,280,258,254,0,267,271,264,262],
[272,295,240,274,284,0,282,272,281],
[273,278,279,279,280,269,0,264,272],
[294,284,265,265,287,279,287,0,281],
[281,303,279,284,289,270,279,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,263,279,254,268,271,282,295],
[259,0,300,265,292,290,299,286,299],
[288,251,0,264,278,272,276,277,275],
[272,286,287,0,268,275,270,279,301],
[297,259,273,283,0,290,292,301,313],
[283,261,279,276,261,0,273,285,297],
[280,252,275,281,259,278,0,281,280],
[269,265,274,272,250,266,270,0,305],
[256,252,276,250,238,254,271,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,264,282,266,282,271,263,256],
[255,0,252,269,243,233,246,243,238],
[287,299,0,286,256,244,281,264,238],
[269,282,265,0,280,285,281,273,232],
[285,308,295,271,0,270,288,295,276],
[269,318,307,266,281,0,272,292,274],
[280,305,270,270,263,279,0,274,244],
[288,308,287,278,256,259,277,0,284],
[295,313,313,319,275,277,307,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,290,275,283,283,264,307,282],
[259,0,272,279,274,283,265,288,267],
[261,279,0,254,276,298,283,299,270],
[276,272,297,0,308,300,284,322,269],
[268,277,275,243,0,295,288,277,256],
[268,268,253,251,256,0,241,303,288],
[287,286,268,267,263,310,0,280,253],
[244,263,252,229,274,248,271,0,266],
[269,284,281,282,295,263,298,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,298,278,278,284,285,300,296],
[290,0,273,277,278,287,296,281,288],
[253,278,0,296,292,287,275,301,296],
[273,274,255,0,266,246,281,295,288],
[273,273,259,285,0,248,287,307,283],
[267,264,264,305,303,0,281,283,314],
[266,255,276,270,264,270,0,292,293],
[251,270,250,256,244,268,259,0,270],
[255,263,255,263,268,237,258,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,367,276,320,321,324,276,184],
[182,0,229,229,274,274,231,230,136],
[184,322,0,184,183,275,140,138,184],
[275,322,367,0,320,366,413,319,320],
[231,277,368,231,0,139,233,278,184],
[230,277,276,185,412,0,278,369,229],
[227,320,411,138,318,273,0,320,181],
[275,321,413,232,273,182,231,0,183],
[367,415,367,231,367,322,370,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,291,261,270,300,283,282],
[277,0,276,270,277,258,284,276,292],
[280,275,0,297,283,281,310,272,300],
[260,281,254,0,286,275,294,277,297],
[290,274,268,265,0,268,289,280,282],
[281,293,270,276,283,0,292,286,279],
[251,267,241,257,262,259,0,247,260],
[268,275,279,274,271,265,304,0,278],
[269,259,251,254,269,272,291,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,270,304,286,295,299,278,271],
[283,0,273,275,297,313,316,308,303],
[281,278,0,268,292,293,302,297,284],
[247,276,283,0,270,266,276,276,269],
[265,254,259,281,0,283,319,270,262],
[256,238,258,285,268,0,259,271,267],
[252,235,249,275,232,292,0,270,258],
[273,243,254,275,281,280,281,0,268],
[280,248,267,282,289,284,293,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,284,272,283,279,290,293,284],
[286,0,278,272,284,274,294,299,284],
[267,273,0,284,271,281,281,296,278],
[279,279,267,0,279,271,279,295,286],
[268,267,280,272,0,276,285,290,282],
[272,277,270,280,275,0,292,288,285],
[261,257,270,272,266,259,0,277,260],
[258,252,255,256,261,263,274,0,272],
[267,267,273,265,269,266,291,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,239,297,256,268,267,236,224],
[295,0,263,295,326,251,278,279,276],
[312,288,0,269,271,268,311,257,190],
[254,256,282,0,313,252,267,280,265],
[295,225,280,238,0,235,326,251,277],
[283,300,283,299,316,0,341,301,253],
[284,273,240,284,225,210,0,225,267],
[315,272,294,271,300,250,326,0,265],
[327,275,361,286,274,298,284,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,269,296,282,285,284,276,273],
[257,0,260,291,273,269,273,286,274],
[282,291,0,283,281,272,281,276,288],
[255,260,268,0,255,263,275,271,262],
[269,278,270,296,0,248,286,269,277],
[266,282,279,288,303,0,278,281,276],
[267,278,270,276,265,273,0,257,284],
[275,265,275,280,282,270,294,0,288],
[278,277,263,289,274,275,267,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,295,291,307,255,369,314,236],
[243,0,299,334,314,280,297,315,244],
[256,252,0,218,270,220,275,237,177],
[260,217,333,0,276,276,337,301,258],
[244,237,281,275,0,277,244,224,242],
[296,271,331,275,274,0,350,370,311],
[182,254,276,214,307,201,0,311,236],
[237,236,314,250,327,181,240,0,198],
[315,307,374,293,309,240,315,353,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,302,264,260,269,286,285,283],
[271,0,298,264,267,274,281,276,269],
[249,253,0,268,261,254,264,265,267],
[287,287,283,0,268,261,274,286,270],
[291,284,290,283,0,277,284,270,262],
[282,277,297,290,274,0,273,292,281],
[265,270,287,277,267,278,0,269,261],
[266,275,286,265,281,259,282,0,273],
[268,282,284,281,289,270,290,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,288,275,270,290,259,272],
[272,0,258,280,238,274,267,230,249],
[268,293,0,270,226,280,281,234,276],
[263,271,281,0,266,255,278,238,250],
[276,313,325,285,0,277,315,268,278],
[281,277,271,296,274,0,289,260,280],
[261,284,270,273,236,262,0,256,264],
[292,321,317,313,283,291,295,0,271],
[279,302,275,301,273,271,287,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,259,287,274,246,252,271,267],
[312,0,295,299,269,264,286,340,300],
[292,256,0,303,298,286,252,304,267],
[264,252,248,0,250,274,251,315,256],
[277,282,253,301,0,263,293,316,250],
[305,287,265,277,288,0,248,309,280],
[299,265,299,300,258,303,0,309,270],
[280,211,247,236,235,242,242,0,243],
[284,251,284,295,301,271,281,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,266,273,292,247,267,258],
[282,0,273,258,262,267,265,291,274],
[280,278,0,251,254,267,255,259,276],
[285,293,300,0,263,310,296,290,290],
[278,289,297,288,0,297,274,274,282],
[259,284,284,241,254,0,259,271,261],
[304,286,296,255,277,292,0,265,278],
[284,260,292,261,277,280,286,0,255],
[293,277,275,261,269,290,273,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,305,314,294,312,304,310,271],
[250,0,290,272,245,294,260,281,264],
[246,261,0,299,255,276,252,283,222],
[237,279,252,0,240,295,270,283,269],
[257,306,296,311,0,299,295,291,270],
[239,257,275,256,252,0,269,283,234],
[247,291,299,281,256,282,0,274,266],
[241,270,268,268,260,268,277,0,283],
[280,287,329,282,281,317,285,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,291,279,274,252,277,266],
[274,0,280,297,287,282,277,253,253],
[260,271,0,302,270,260,258,277,257],
[260,254,249,0,263,255,245,246,241],
[272,264,281,288,0,266,265,281,249],
[277,269,291,296,285,0,266,278,285],
[299,274,293,306,286,285,0,290,261],
[274,298,274,305,270,273,261,0,290],
[285,298,294,310,302,266,290,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,268,281,266,275,267,276],
[269,0,266,265,294,265,295,280,267],
[267,285,0,261,274,282,275,289,283],
[283,286,290,0,293,294,281,272,278],
[270,257,277,258,0,247,266,268,253],
[285,286,269,257,304,0,281,276,266],
[276,256,276,270,285,270,0,266,256],
[284,271,262,279,283,275,285,0,273],
[275,284,268,273,298,285,295,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,301,273,299,286,308,298,268],
[238,0,283,284,254,274,243,273,276],
[250,268,0,267,265,258,267,272,298],
[278,267,284,0,281,272,284,294,292],
[252,297,286,270,0,282,270,281,286],
[265,277,293,279,269,0,276,292,280],
[243,308,284,267,281,275,0,268,267],
[253,278,279,257,270,259,283,0,267],
[283,275,253,259,265,271,284,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,276,266,269,256,275,271,259],
[296,0,288,280,288,290,287,275,287],
[275,263,0,268,264,275,286,268,278],
[285,271,283,0,274,290,286,283,279],
[282,263,287,277,0,297,287,268,283],
[295,261,276,261,254,0,289,271,269],
[276,264,265,265,264,262,0,271,270],
[280,276,283,268,283,280,280,0,279],
[292,264,273,272,268,282,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,275,263,254,301,308,276,309],
[298,0,261,268,252,302,278,272,290],
[276,290,0,269,258,326,264,265,306],
[288,283,282,0,262,321,300,284,324],
[297,299,293,289,0,303,294,274,323],
[250,249,225,230,248,0,241,241,307],
[243,273,287,251,257,310,0,262,312],
[275,279,286,267,277,310,289,0,314],
[242,261,245,227,228,244,239,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,277,252,277,255,259,270],
[274,0,277,272,276,278,261,279,253],
[266,274,0,257,261,273,273,277,266],
[274,279,294,0,273,296,282,280,280],
[299,275,290,278,0,294,279,288,288],
[274,273,278,255,257,0,259,262,264],
[296,290,278,269,272,292,0,283,292],
[292,272,274,271,263,289,268,0,292],
[281,298,285,271,263,287,259,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,183,368,183,185,185,185,185],
[366,0,366,368,366,183,366,551,368],
[368,185,0,368,366,368,368,368,368],
[183,183,183,0,183,183,183,368,368],
[368,185,185,368,0,185,185,185,368],
[366,368,183,368,366,0,368,368,551],
[366,185,183,368,366,183,0,185,368],
[366,0,183,183,366,183,366,0,183],
[366,183,183,183,183,0,183,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,263,297,237,251,231,223,306],
[260,0,292,236,251,265,259,240,303],
[288,259,0,281,272,263,265,260,273],
[254,315,270,0,263,300,246,284,303],
[314,300,279,288,0,294,299,270,337],
[300,286,288,251,257,0,250,236,280],
[320,292,286,305,252,301,0,250,327],
[328,311,291,267,281,315,301,0,333],
[245,248,278,248,214,271,224,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,300,277,269,278,294,277,268],
[297,0,296,260,287,282,300,278,304],
[251,255,0,262,247,260,253,283,250],
[274,291,289,0,274,284,277,290,303],
[282,264,304,277,0,291,284,293,282],
[273,269,291,267,260,0,297,295,290],
[257,251,298,274,267,254,0,264,286],
[274,273,268,261,258,256,287,0,273],
[283,247,301,248,269,261,265,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,280,251,268,271,278,280,265],
[279,0,289,251,282,287,282,281,270],
[271,262,0,259,268,287,289,273,271],
[300,300,292,0,275,286,302,283,280],
[283,269,283,276,0,279,281,263,270],
[280,264,264,265,272,0,279,277,275],
[273,269,262,249,270,272,0,282,243],
[271,270,278,268,288,274,269,0,271],
[286,281,280,271,281,276,308,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,281,253,287,286,287,300,255],
[266,0,275,269,269,268,261,281,241],
[270,276,0,242,269,284,263,270,255],
[298,282,309,0,279,296,276,297,268],
[264,282,282,272,0,283,270,275,258],
[265,283,267,255,268,0,266,306,249],
[264,290,288,275,281,285,0,293,286],
[251,270,281,254,276,245,258,0,267],
[296,310,296,283,293,302,265,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,387,277,297,393,411,367,414],
[278,0,253,304,231,322,347,300,390],
[164,298,0,257,232,298,302,304,322],
[274,247,294,0,206,322,252,367,367],
[254,320,319,345,0,300,321,392,364],
[158,229,253,229,251,0,229,345,297],
[140,204,249,299,230,322,0,346,343],
[184,251,247,184,159,206,205,0,298],
[137,161,229,184,187,254,208,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,312,266,275,288,264,305,242],
[276,0,280,305,275,291,273,295,276],
[239,271,0,271,238,269,283,277,231],
[285,246,280,0,246,242,302,294,263],
[276,276,313,305,0,306,266,276,252],
[263,260,282,309,245,0,262,246,248],
[287,278,268,249,285,289,0,276,253],
[246,256,274,257,275,305,275,0,242],
[309,275,320,288,299,303,298,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,290,298,278,289,286,304,264],
[253,0,256,252,242,267,268,270,246],
[261,295,0,264,276,285,310,301,267],
[253,299,287,0,271,281,286,279,264],
[273,309,275,280,0,297,303,307,279],
[262,284,266,270,254,0,281,285,258],
[265,283,241,265,248,270,0,262,232],
[247,281,250,272,244,266,289,0,259],
[287,305,284,287,272,293,319,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,325,276,326,248,327,310,290],
[290,0,268,269,295,295,281,272,285],
[226,283,0,314,276,326,279,264,302],
[275,282,237,0,305,243,288,230,251],
[225,256,275,246,0,260,279,281,242],
[303,256,225,308,291,0,287,268,266],
[224,270,272,263,272,264,0,234,233],
[241,279,287,321,270,283,317,0,228],
[261,266,249,300,309,285,318,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,262,271,257,259,281,297,279],
[261,0,256,252,254,255,281,256,271],
[289,295,0,272,279,266,303,269,294],
[280,299,279,0,270,272,298,271,290],
[294,297,272,281,0,282,292,280,281],
[292,296,285,279,269,0,286,291,293],
[270,270,248,253,259,265,0,255,270],
[254,295,282,280,271,260,296,0,292],
[272,280,257,261,270,258,281,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,247,222,222,219,193,275,245],
[331,0,331,248,224,248,221,218,303],
[304,220,0,279,304,194,279,189,331],
[329,303,272,0,219,245,277,216,272],
[329,327,247,332,0,273,304,243,357],
[332,303,357,306,278,0,277,190,356],
[358,330,272,274,247,274,0,245,246],
[276,333,362,335,308,361,306,0,222],
[306,248,220,279,194,195,305,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,276,225,261,276,274,286,238],
[269,0,233,214,251,255,233,248,231],
[275,318,0,265,250,269,245,266,241],
[326,337,286,0,281,266,286,266,297],
[290,300,301,270,0,272,240,262,250],
[275,296,282,285,279,0,239,275,264],
[277,318,306,265,311,312,0,265,294],
[265,303,285,285,289,276,286,0,250],
[313,320,310,254,301,287,257,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,273,260,280,282,273,261],
[282,0,271,274,282,269,276,281,274],
[283,280,0,275,286,285,269,277,271],
[278,277,276,0,285,284,284,273,280],
[291,269,265,266,0,272,281,283,270],
[271,282,266,267,279,0,273,257,278],
[269,275,282,267,270,278,0,272,273],
[278,270,274,278,268,294,279,0,268],
[290,277,280,271,281,273,278,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,294,288,290,269,274,282,298],
[284,0,324,283,269,285,296,276,301],
[257,227,0,258,239,244,245,237,268],
[263,268,293,0,271,275,272,266,274],
[261,282,312,280,0,278,281,254,305],
[282,266,307,276,273,0,276,242,303],
[277,255,306,279,270,275,0,261,298],
[269,275,314,285,297,309,290,0,307],
[253,250,283,277,246,248,253,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,277,272,259,254,276,255,272],
[267,0,294,287,302,278,284,285,278],
[274,257,0,269,275,267,262,266,305],
[279,264,282,0,293,280,275,274,268],
[292,249,276,258,0,248,262,280,264],
[297,273,284,271,303,0,261,292,282],
[275,267,289,276,289,290,0,302,285],
[296,266,285,277,271,259,249,0,289],
[279,273,246,283,287,269,266,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,284,283,281,270,282,278,308],
[258,0,280,256,250,283,263,278,262],
[267,271,0,270,242,241,245,275,288],
[268,295,281,0,282,293,263,290,302],
[270,301,309,269,0,291,279,294,291],
[281,268,310,258,260,0,236,277,304],
[269,288,306,288,272,315,0,294,291],
[273,273,276,261,257,274,257,0,289],
[243,289,263,249,260,247,260,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,279,276,270,281,274,290,280],
[247,0,260,280,283,265,269,265,259],
[272,291,0,282,269,271,292,272,260],
[275,271,269,0,278,281,275,286,266],
[281,268,282,273,0,282,278,262,252],
[270,286,280,270,269,0,281,281,269],
[277,282,259,276,273,270,0,273,275],
[261,286,279,265,289,270,278,0,264],
[271,292,291,285,299,282,276,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,289,286,278,279,255,257,263],
[273,0,283,276,286,266,256,242,246],
[262,268,0,268,295,268,261,242,265],
[265,275,283,0,282,281,250,289,287],
[273,265,256,269,0,259,264,247,272],
[272,285,283,270,292,0,266,263,269],
[296,295,290,301,287,285,0,263,274],
[294,309,309,262,304,288,288,0,300],
[288,305,286,264,279,282,277,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,291,286,288,290,281,279],
[263,0,255,280,281,269,288,264,266],
[276,296,0,296,265,282,301,273,282],
[260,271,255,0,268,270,264,264,266],
[265,270,286,283,0,266,300,256,280],
[263,282,269,281,285,0,280,257,283],
[261,263,250,287,251,271,0,263,267],
[270,287,278,287,295,294,288,0,296],
[272,285,269,285,271,268,284,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,268,251,253,257,263,247,265],
[305,0,280,282,254,282,290,282,288],
[283,271,0,269,277,281,303,271,272],
[300,269,282,0,275,288,280,280,289],
[298,297,274,276,0,275,286,279,288],
[294,269,270,263,276,0,290,287,278],
[288,261,248,271,265,261,0,264,277],
[304,269,280,271,272,264,287,0,273],
[286,263,279,262,263,273,274,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,262,272,275,267,285,296],
[269,0,294,263,262,256,266,280,279],
[263,257,0,263,280,267,279,293,267],
[289,288,288,0,277,259,287,291,295],
[279,289,271,274,0,286,275,295,296],
[276,295,284,292,265,0,276,277,291],
[284,285,272,264,276,275,0,287,285],
[266,271,258,260,256,274,264,0,301],
[255,272,284,256,255,260,266,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,265,259,270,240,280,283,278],
[284,0,279,279,284,261,267,327,272],
[286,272,0,265,284,277,303,319,292],
[292,272,286,0,258,282,293,296,295],
[281,267,267,293,0,280,288,317,263],
[311,290,274,269,271,0,296,327,279],
[271,284,248,258,263,255,0,282,269],
[268,224,232,255,234,224,269,0,243],
[273,279,259,256,288,272,282,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,252,252,280,285,262,277,265],
[298,0,306,296,297,277,271,293,300],
[299,245,0,275,286,274,284,266,291],
[299,255,276,0,293,273,278,273,281],
[271,254,265,258,0,261,268,246,283],
[266,274,277,278,290,0,271,284,279],
[289,280,267,273,283,280,0,290,276],
[274,258,285,278,305,267,261,0,275],
[286,251,260,270,268,272,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,264,283,282,235,252,262,258],
[310,0,290,259,291,240,275,263,268],
[287,261,0,283,307,281,282,250,271],
[268,292,268,0,297,266,286,256,252],
[269,260,244,254,0,217,267,236,225],
[316,311,270,285,334,0,300,285,269],
[299,276,269,265,284,251,0,263,258],
[289,288,301,295,315,266,288,0,289],
[293,283,280,299,326,282,293,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,282,265,254,251,269,257],
[273,0,260,272,260,248,266,275,255],
[288,291,0,291,275,266,259,282,278],
[269,279,260,0,281,251,250,272,259],
[286,291,276,270,0,264,271,267,249],
[297,303,285,300,287,0,274,286,280],
[300,285,292,301,280,277,0,304,272],
[282,276,269,279,284,265,247,0,262],
[294,296,273,292,302,271,279,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,269,262,272,274,274,295,271],
[274,0,278,276,264,265,283,285,273],
[282,273,0,259,279,254,275,304,257],
[289,275,292,0,289,272,292,292,261],
[279,287,272,262,0,254,273,304,293],
[277,286,297,279,297,0,280,302,268],
[277,268,276,259,278,271,0,301,265],
[256,266,247,259,247,249,250,0,272],
[280,278,294,290,258,283,286,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,251,229,245,252,280,208,248],
[316,0,282,291,269,284,262,289,261],
[300,269,0,258,270,278,268,275,279],
[322,260,293,0,276,231,277,261,283],
[306,282,281,275,0,265,262,246,270],
[299,267,273,320,286,0,275,278,255],
[271,289,283,274,289,276,0,287,272],
[343,262,276,290,305,273,264,0,274],
[303,290,272,268,281,296,279,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,274,276,275,273,302,288,282],
[272,0,269,273,268,261,266,271,273],
[277,282,0,273,283,288,298,270,292],
[275,278,278,0,278,267,293,273,296],
[276,283,268,273,0,267,264,280,286],
[278,290,263,284,284,0,274,282,288],
[249,285,253,258,287,277,0,272,288],
[263,280,281,278,271,269,279,0,283],
[269,278,259,255,265,263,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,256,255,272,240,257,266,260],
[290,0,289,263,279,290,312,286,280],
[295,262,0,263,280,267,271,285,241],
[296,288,288,0,309,286,291,282,256],
[279,272,271,242,0,294,284,271,248],
[311,261,284,265,257,0,271,288,271],
[294,239,280,260,267,280,0,286,272],
[285,265,266,269,280,263,265,0,280],
[291,271,310,295,303,280,279,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,265,268,270,263,268,256,282],
[262,0,266,260,270,268,274,258,265],
[286,285,0,274,282,281,278,280,278],
[283,291,277,0,290,276,281,272,298],
[281,281,269,261,0,263,270,268,259],
[288,283,270,275,288,0,273,265,279],
[283,277,273,270,281,278,0,279,287],
[295,293,271,279,283,286,272,0,282],
[269,286,273,253,292,272,264,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,301,322,286,293,312,306,260],
[240,0,270,299,279,235,301,295,273],
[250,281,0,286,286,250,282,259,255],
[229,252,265,0,256,244,298,290,245],
[265,272,265,295,0,264,303,305,281],
[258,316,301,307,287,0,320,310,288],
[239,250,269,253,248,231,0,280,224],
[245,256,292,261,246,241,271,0,265],
[291,278,296,306,270,263,327,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,264,260,266,263,298,284,290],
[267,0,265,256,267,254,273,259,273],
[287,286,0,259,266,272,302,269,279],
[291,295,292,0,268,282,294,261,279],
[285,284,285,283,0,279,308,257,300],
[288,297,279,269,272,0,285,271,289],
[253,278,249,257,243,266,0,254,246],
[267,292,282,290,294,280,297,0,290],
[261,278,272,272,251,262,305,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,275,273,276,291,293,271,288],
[268,0,271,286,289,275,280,250,272],
[276,280,0,287,270,300,284,266,284],
[278,265,264,0,263,288,269,280,279],
[275,262,281,288,0,272,270,270,283],
[260,276,251,263,279,0,295,270,270],
[258,271,267,282,281,256,0,275,290],
[280,301,285,271,281,281,276,0,271],
[263,279,267,272,268,281,261,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,294,258,262,311,291,285,289],
[289,0,309,278,274,296,298,269,279],
[257,242,0,252,275,275,292,270,269],
[293,273,299,0,257,287,294,290,283],
[289,277,276,294,0,300,296,272,277],
[240,255,276,264,251,0,290,265,276],
[260,253,259,257,255,261,0,232,287],
[266,282,281,261,279,286,319,0,309],
[262,272,282,268,274,275,264,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,208,210,344,311,379,309,136],
[341,0,310,276,307,273,307,274,203],
[343,241,0,345,272,378,343,238,137],
[341,275,206,0,343,205,308,274,170],
[207,244,279,208,0,242,275,207,241],
[240,278,173,346,309,0,273,272,170],
[172,244,208,243,276,278,0,139,103],
[242,277,313,277,344,279,412,0,277],
[415,348,414,381,310,381,448,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,248,270,294,263,272,263,270],
[277,0,243,268,235,252,300,286,248],
[303,308,0,317,282,274,293,292,280],
[281,283,234,0,268,289,286,290,266],
[257,316,269,283,0,277,326,292,274],
[288,299,277,262,274,0,287,285,261],
[279,251,258,265,225,264,0,230,240],
[288,265,259,261,259,266,321,0,279],
[281,303,271,285,277,290,311,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,255,282,274,251,278,302,294],
[272,0,256,263,264,280,273,300,289],
[296,295,0,279,280,265,292,306,318],
[269,288,272,0,280,281,275,303,279],
[277,287,271,271,0,278,289,293,281],
[300,271,286,270,273,0,260,302,300],
[273,278,259,276,262,291,0,293,304],
[249,251,245,248,258,249,258,0,258],
[257,262,233,272,270,251,247,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,300,271,267,284,303,248,303],
[268,0,251,247,262,250,301,254,301],
[251,300,0,244,271,278,290,285,299],
[280,304,307,0,292,273,315,282,299],
[284,289,280,259,0,282,314,280,308],
[267,301,273,278,269,0,302,264,286],
[248,250,261,236,237,249,0,245,270],
[303,297,266,269,271,287,306,0,305],
[248,250,252,252,243,265,281,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,271,270,263,258,293,265,269],
[279,0,284,268,276,274,291,267,282],
[280,267,0,268,247,265,284,254,272],
[281,283,283,0,273,268,295,266,276],
[288,275,304,278,0,285,284,291,289],
[293,277,286,283,266,0,292,277,294],
[258,260,267,256,267,259,0,254,266],
[286,284,297,285,260,274,297,0,297],
[282,269,279,275,262,257,285,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,246,239,279,233,284,235,232],
[324,0,320,240,331,282,347,315,309],
[305,231,0,251,329,255,318,271,270],
[312,311,300,0,309,247,390,317,339],
[272,220,222,242,0,242,288,274,255],
[318,269,296,304,309,0,364,300,305],
[267,204,233,161,263,187,0,254,249],
[316,236,280,234,277,251,297,0,231],
[319,242,281,212,296,246,302,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,285,291,294,300,290,312,275],
[255,0,264,272,260,267,262,291,262],
[266,287,0,286,278,288,293,297,292],
[260,279,265,0,276,286,259,288,278],
[257,291,273,275,0,292,280,293,284],
[251,284,263,265,259,0,270,272,274],
[261,289,258,292,271,281,0,293,299],
[239,260,254,263,258,279,258,0,270],
[276,289,259,273,267,277,252,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,269,274,281,264,290,267],
[277,0,267,258,281,292,277,275,262],
[276,284,0,287,289,289,270,293,297],
[282,293,264,0,292,295,294,276,292],
[277,270,262,259,0,291,271,271,280],
[270,259,262,256,260,0,278,273,276],
[287,274,281,257,280,273,0,271,277],
[261,276,258,275,280,278,280,0,292],
[284,289,254,259,271,275,274,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,301,271,278,274,296,275,271],
[294,0,274,304,296,281,290,289,292],
[250,277,0,292,287,279,269,270,279],
[280,247,259,0,268,267,269,260,275],
[273,255,264,283,0,281,287,263,266],
[277,270,272,284,270,0,281,266,279],
[255,261,282,282,264,270,0,280,291],
[276,262,281,291,288,285,271,0,296],
[280,259,272,276,285,272,260,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,261,160,266,209,264,167,226],
[260,0,285,219,249,152,249,239,259],
[290,266,0,211,311,188,235,218,193],
[391,332,340,0,290,277,323,282,272],
[285,302,240,261,0,261,237,224,223],
[342,399,363,274,290,0,327,290,314],
[287,302,316,228,314,224,0,305,312],
[384,312,333,269,327,261,246,0,270],
[325,292,358,279,328,237,239,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,276,249,282,296,286,328,299],
[268,0,255,249,288,257,317,296,289],
[275,296,0,284,287,341,298,317,284],
[302,302,267,0,285,298,343,307,268],
[269,263,264,266,0,288,301,261,277],
[255,294,210,253,263,0,285,288,275],
[265,234,253,208,250,266,0,247,248],
[223,255,234,244,290,263,304,0,251],
[252,262,267,283,274,276,303,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,302,294,275,269,285,288,275],
[301,0,258,293,280,279,274,299,277],
[249,293,0,260,266,250,266,278,263],
[257,258,291,0,266,278,265,244,260],
[276,271,285,285,0,273,279,294,271],
[282,272,301,273,278,0,291,288,273],
[266,277,285,286,272,260,0,291,271],
[263,252,273,307,257,263,260,0,265],
[276,274,288,291,280,278,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,269,268,294,306,287,296,269],
[277,0,274,258,256,241,257,261,249],
[282,277,0,277,252,274,285,255,258],
[283,293,274,0,281,292,297,275,279],
[257,295,299,270,0,275,286,269,280],
[245,310,277,259,276,0,291,269,267],
[264,294,266,254,265,260,0,265,253],
[255,290,296,276,282,282,286,0,283],
[282,302,293,272,271,284,298,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,290,288,312,295,280,316,306],
[283,0,330,324,317,259,288,287,312],
[261,221,0,277,309,277,245,255,299],
[263,227,274,0,260,275,291,310,266],
[239,234,242,291,0,246,264,284,251],
[256,292,274,276,305,0,297,315,278],
[271,263,306,260,287,254,0,298,300],
[235,264,296,241,267,236,253,0,282],
[245,239,252,285,300,273,251,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,278,285,281,245,288,322,270],
[248,0,271,293,280,260,274,309,273],
[273,280,0,285,279,277,310,314,293],
[266,258,266,0,272,265,290,312,280],
[270,271,272,279,0,240,270,312,294],
[306,291,274,286,311,0,287,326,293],
[263,277,241,261,281,264,0,291,284],
[229,242,237,239,239,225,260,0,246],
[281,278,258,271,257,258,267,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,277,273,251,263,262,289,284],
[277,0,292,280,273,260,282,309,286],
[274,259,0,281,263,272,260,284,267],
[278,271,270,0,244,279,273,305,271],
[300,278,288,307,0,273,283,310,269],
[288,291,279,272,278,0,281,314,289],
[289,269,291,278,268,270,0,269,281],
[262,242,267,246,241,237,282,0,283],
[267,265,284,280,282,262,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,183,276,276,275,184,276,275],
[182,0,183,184,184,183,183,184,275],
[368,368,0,368,367,275,275,276,367],
[275,367,183,0,182,92,183,0,366],
[275,367,184,369,0,184,275,184,367],
[276,368,276,459,367,0,367,185,366],
[367,368,276,368,276,184,0,276,183],
[275,367,275,551,367,366,275,0,458],
[276,276,184,185,184,185,368,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,284,270,271,279,272,273],
[277,0,292,278,267,288,286,278,293],
[287,259,0,262,265,284,253,289,272],
[267,273,289,0,246,278,290,293,274],
[281,284,286,305,0,287,290,291,275],
[280,263,267,273,264,0,277,276,269],
[272,265,298,261,261,274,0,287,276],
[279,273,262,258,260,275,264,0,275],
[278,258,279,277,276,282,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,256,283,267,256,283,284,270],
[293,0,277,295,301,267,290,288,302],
[295,274,0,287,288,287,295,312,295],
[268,256,264,0,274,265,278,276,270],
[284,250,263,277,0,270,292,276,296],
[295,284,264,286,281,0,302,278,281],
[268,261,256,273,259,249,0,269,257],
[267,263,239,275,275,273,282,0,277],
[281,249,256,281,255,270,294,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,283,294,272,296,294,280,293],
[259,0,263,277,269,285,294,255,253],
[268,288,0,297,241,290,283,279,274],
[257,274,254,0,243,278,275,286,258],
[279,282,310,308,0,288,285,312,270],
[255,266,261,273,263,0,276,261,248],
[257,257,268,276,266,275,0,271,258],
[271,296,272,265,239,290,280,0,266],
[258,298,277,293,281,303,293,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,261,290,283,278,273,277,295],
[271,0,275,278,291,265,279,280,268],
[290,276,0,291,295,275,283,260,288],
[261,273,260,0,277,270,272,277,297],
[268,260,256,274,0,258,264,250,261],
[273,286,276,281,293,0,281,278,305],
[278,272,268,279,287,270,0,264,266],
[274,271,291,274,301,273,287,0,286],
[256,283,263,254,290,246,285,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,316,296,291,264,291,292,305],
[260,0,291,262,264,270,276,272,283],
[235,260,0,255,247,256,268,248,263],
[255,289,296,0,278,263,283,270,287],
[260,287,304,273,0,286,288,278,295],
[287,281,295,288,265,0,276,268,291],
[260,275,283,268,263,275,0,270,275],
[259,279,303,281,273,283,281,0,275],
[246,268,288,264,256,260,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,291,284,282,296,302,286,274],
[262,0,302,286,280,309,293,289,288],
[260,249,0,284,266,273,280,265,260],
[267,265,267,0,274,293,287,265,265],
[269,271,285,277,0,303,307,286,281],
[255,242,278,258,248,0,265,254,265],
[249,258,271,264,244,286,0,274,261],
[265,262,286,286,265,297,277,0,267],
[277,263,291,286,270,286,290,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,257,282,271,264,286,292,265],
[269,0,262,289,268,256,272,299,265],
[294,289,0,284,281,281,304,321,273],
[269,262,267,0,274,271,278,278,252],
[280,283,270,277,0,273,301,306,272],
[287,295,270,280,278,0,284,308,279],
[265,279,247,273,250,267,0,273,255],
[259,252,230,273,245,243,278,0,257],
[286,286,278,299,279,272,296,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,325,299,293,288,271,340,359],
[301,0,316,270,304,297,262,322,345],
[226,235,0,246,259,240,229,277,255],
[252,281,305,0,276,269,277,290,336],
[258,247,292,275,0,261,232,279,291],
[263,254,311,282,290,0,270,304,330],
[280,289,322,274,319,281,0,316,320],
[211,229,274,261,272,247,235,0,312],
[192,206,296,215,260,221,231,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,307,274,275,290,252,290,282],
[250,0,298,264,300,289,279,310,298],
[244,253,0,226,258,289,234,276,290],
[277,287,325,0,301,278,290,304,258],
[276,251,293,250,0,289,219,276,288],
[261,262,262,273,262,0,273,306,251],
[299,272,317,261,332,278,0,280,312],
[261,241,275,247,275,245,271,0,242],
[269,253,261,293,263,300,239,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,254,261,316,319,267,243,302],
[284,0,279,288,332,356,273,279,324],
[297,272,0,271,332,294,290,288,310],
[290,263,280,0,318,313,293,266,317],
[235,219,219,233,0,287,223,199,237],
[232,195,257,238,264,0,225,243,285],
[284,278,261,258,328,326,0,285,293],
[308,272,263,285,352,308,266,0,297],
[249,227,241,234,314,266,258,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,271,281,290,291,300,278,299],
[263,0,257,253,280,273,266,283,274],
[280,294,0,268,289,280,278,260,307],
[270,298,283,0,300,291,268,295,304],
[261,271,262,251,0,263,301,255,298],
[260,278,271,260,288,0,276,263,281],
[251,285,273,283,250,275,0,255,303],
[273,268,291,256,296,288,296,0,291],
[252,277,244,247,253,270,248,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,280,280,301,274,300,275],
[274,0,276,266,260,279,274,299,276],
[269,275,0,278,281,277,272,288,284],
[271,285,273,0,272,291,275,287,271],
[271,291,270,279,0,300,288,283,285],
[250,272,274,260,251,0,256,284,266],
[277,277,279,276,263,295,0,275,289],
[251,252,263,264,268,267,276,0,266],
[276,275,267,280,266,285,262,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,369,296,294,258,276,279,270],
[239,0,300,297,284,225,243,255,210],
[182,251,0,260,239,205,221,235,217],
[255,254,291,0,306,217,275,292,272],
[257,267,312,245,0,249,253,271,220],
[293,326,346,334,302,0,258,298,236],
[275,308,330,276,298,293,0,272,245],
[272,296,316,259,280,253,279,0,284],
[281,341,334,279,331,315,306,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,260,258,227,245,312,258,215],
[242,0,274,253,201,251,225,190,223],
[291,277,0,299,247,264,283,268,236],
[293,298,252,0,292,244,278,281,267],
[324,350,304,259,0,289,242,270,309],
[306,300,287,307,262,0,277,276,270],
[239,326,268,273,309,274,0,266,295],
[293,361,283,270,281,275,285,0,301],
[336,328,315,284,242,281,256,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,256,303,279,258,282,267,261],
[311,0,290,278,281,284,299,294,259],
[295,261,0,290,283,246,297,296,295],
[248,273,261,0,287,269,281,262,275],
[272,270,268,264,0,269,276,312,286],
[293,267,305,282,282,0,301,305,305],
[269,252,254,270,275,250,0,262,275],
[284,257,255,289,239,246,289,0,305],
[290,292,256,276,265,246,276,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,273,261,296,255,278,266,279],
[300,0,279,285,304,265,294,298,294],
[278,272,0,298,300,290,285,278,300],
[290,266,253,0,303,274,288,281,300],
[255,247,251,248,0,255,278,248,276],
[296,286,261,277,296,0,281,277,285],
[273,257,266,263,273,270,0,258,258],
[285,253,273,270,303,274,293,0,294],
[272,257,251,251,275,266,293,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,261,299,283,280,284,285,273],
[281,0,267,280,290,272,279,257,297],
[290,284,0,270,302,288,282,281,298],
[252,271,281,0,289,285,274,259,283],
[268,261,249,262,0,254,263,221,257],
[271,279,263,266,297,0,281,280,280],
[267,272,269,277,288,270,0,256,275],
[266,294,270,292,330,271,295,0,315],
[278,254,253,268,294,271,276,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,279,302,278,287,275,306],
[271,0,266,287,296,280,286,276,277],
[263,285,0,270,291,276,282,259,279],
[272,264,281,0,277,274,268,260,300],
[249,255,260,274,0,261,270,268,270],
[273,271,275,277,290,0,274,276,293],
[264,265,269,283,281,277,0,274,283],
[276,275,292,291,283,275,277,0,284],
[245,274,272,251,281,258,268,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,257,265,256,274,276,269,271],
[279,0,276,268,273,300,282,270,279],
[294,275,0,286,297,289,285,284,286],
[286,283,265,0,272,292,293,268,277],
[295,278,254,279,0,293,279,284,278],
[277,251,262,259,258,0,268,272,256],
[275,269,266,258,272,283,0,274,277],
[282,281,267,283,267,279,277,0,279],
[280,272,265,274,273,295,274,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,302,306,298,284,329,294,256],
[258,0,312,311,249,256,265,302,297],
[249,239,0,242,221,242,270,254,254],
[245,240,309,0,248,254,262,265,227],
[253,302,330,303,0,279,258,315,270],
[267,295,309,297,272,0,289,297,315],
[222,286,281,289,293,262,0,279,273],
[257,249,297,286,236,254,272,0,270],
[295,254,297,324,281,236,278,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,267,262,264,269,257,287,258],
[293,0,295,296,304,281,279,282,261],
[284,256,0,278,261,279,242,302,235],
[289,255,273,0,274,307,241,273,242],
[287,247,290,277,0,282,270,273,240],
[282,270,272,244,269,0,266,264,251],
[294,272,309,310,281,285,0,308,283],
[264,269,249,278,278,287,243,0,266],
[293,290,316,309,311,300,268,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,279,268,292,285,279,288,294],
[289,0,308,272,287,282,315,287,307],
[272,243,0,277,255,260,273,285,283],
[283,279,274,0,287,308,291,296,295],
[259,264,296,264,0,274,292,279,292],
[266,269,291,243,277,0,281,283,294],
[272,236,278,260,259,270,0,267,285],
[263,264,266,255,272,268,284,0,280],
[257,244,268,256,259,257,266,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,247,253,259,286,268,271,288],
[290,0,267,275,264,282,268,287,289],
[304,284,0,274,293,307,271,285,301],
[298,276,277,0,288,297,272,280,289],
[292,287,258,263,0,274,268,285,297],
[265,269,244,254,277,0,264,270,277],
[283,283,280,279,283,287,0,274,295],
[280,264,266,271,266,281,277,0,278],
[263,262,250,262,254,274,256,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,300,289,341,263,307,327,263],
[263,0,290,315,328,292,278,315,307],
[251,261,0,290,303,234,251,277,236],
[262,236,261,0,356,239,254,266,237],
[210,223,248,195,0,223,241,302,290],
[288,259,317,312,328,0,265,307,330],
[244,273,300,297,310,286,0,289,263],
[224,236,274,285,249,244,262,0,196],
[288,244,315,314,261,221,288,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,310,286,257,290,263,287,250],
[284,0,297,281,275,287,279,301,252],
[241,254,0,265,251,269,241,259,246],
[265,270,286,0,261,288,261,279,256],
[294,276,300,290,0,295,273,290,283],
[261,264,282,263,256,0,250,268,233],
[288,272,310,290,278,301,0,298,259],
[264,250,292,272,261,283,253,0,250],
[301,299,305,295,268,318,292,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,290,247,289,242,293,214,270],
[340,0,313,326,290,263,286,312,281],
[261,238,0,266,280,256,237,292,272],
[304,225,285,0,278,269,317,270,274],
[262,261,271,273,0,269,285,292,286],
[309,288,295,282,282,0,318,296,275],
[258,265,314,234,266,233,0,257,242],
[337,239,259,281,259,255,294,0,284],
[281,270,279,277,265,276,309,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,254,284,276,281,307,313,298],
[258,0,281,280,267,296,285,324,273],
[297,270,0,275,254,300,274,293,307],
[267,271,276,0,294,279,288,282,296],
[275,284,297,257,0,302,288,292,304],
[270,255,251,272,249,0,265,289,269],
[244,266,277,263,263,286,0,271,259],
[238,227,258,269,259,262,280,0,266],
[253,278,244,255,247,282,292,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,277,273,286,285,263,260,259],
[275,0,301,284,297,299,286,297,277],
[274,250,0,259,277,295,265,257,269],
[278,267,292,0,303,292,270,276,264],
[265,254,274,248,0,302,248,262,241],
[266,252,256,259,249,0,245,270,254],
[288,265,286,281,303,306,0,292,275],
[291,254,294,275,289,281,259,0,243],
[292,274,282,287,310,297,276,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,313,300,280,295,309,266,259],
[271,0,256,299,276,264,276,275,263],
[238,295,0,285,284,313,282,282,279],
[251,252,266,0,236,259,271,258,241],
[271,275,267,315,0,288,285,279,255],
[256,287,238,292,263,0,254,267,257],
[242,275,269,280,266,297,0,278,264],
[285,276,269,293,272,284,273,0,267],
[292,288,272,310,296,294,287,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,269,285,276,267,301,282,283],
[261,0,265,282,281,273,299,270,266],
[282,286,0,261,263,265,287,271,280],
[266,269,290,0,268,275,286,279,275],
[275,270,288,283,0,268,279,268,264],
[284,278,286,276,283,0,304,283,266],
[250,252,264,265,272,247,0,258,258],
[269,281,280,272,283,268,293,0,263],
[268,285,271,276,287,285,293,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,368,366,274,274,274,183,366],
[276,0,184,275,184,184,459,276,367],
[183,367,0,366,366,274,366,275,366],
[185,276,185,0,184,277,368,277,275],
[277,367,185,367,0,276,459,276,459],
[277,367,277,274,275,0,275,183,367],
[277,92,185,183,92,276,0,185,184],
[368,275,276,274,275,368,366,0,366],
[185,184,185,276,92,184,367,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,281,272,275,270,263,260],
[280,0,279,288,287,288,268,265,269],
[277,272,0,280,271,275,269,264,271],
[270,263,271,0,256,285,281,289,274],
[279,264,280,295,0,261,270,272,275],
[276,263,276,266,290,0,274,278,280],
[281,283,282,270,281,277,0,261,269],
[288,286,287,262,279,273,290,0,287],
[291,282,280,277,276,271,282,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,239,256,263,277,307,301,298],
[310,0,298,300,301,231,326,274,326],
[312,253,0,291,316,263,332,299,313],
[295,251,260,0,292,253,335,327,307],
[288,250,235,259,0,277,303,286,280],
[274,320,288,298,274,0,318,324,333],
[244,225,219,216,248,233,0,278,277],
[250,277,252,224,265,227,273,0,282],
[253,225,238,244,271,218,274,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,275,276,286,272,292,300,282],
[275,0,277,270,270,261,274,292,283],
[276,274,0,278,270,274,278,277,280],
[275,281,273,0,273,274,277,297,281],
[265,281,281,278,0,268,283,288,283],
[279,290,277,277,283,0,274,293,290],
[259,277,273,274,268,277,0,277,274],
[251,259,274,254,263,258,274,0,271],
[269,268,271,270,268,261,277,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,295,286,276,295,268,284,270],
[272,0,285,276,285,283,284,297,298],
[256,266,0,285,260,283,290,276,289],
[265,275,266,0,279,285,258,273,270],
[275,266,291,272,0,291,270,262,264],
[256,268,268,266,260,0,274,284,254],
[283,267,261,293,281,277,0,277,287],
[267,254,275,278,289,267,274,0,262],
[281,253,262,281,287,297,264,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,68,205,344,344,273,136,346],
[346,0,205,344,414,346,205,275,346],
[483,346,0,343,414,345,205,206,483],
[346,207,208,0,207,276,208,346,414],
[207,137,137,344,0,343,137,275,207],
[207,205,206,275,208,0,206,343,278],
[278,346,346,343,414,345,0,275,346],
[415,276,345,205,276,208,276,0,415],
[205,205,68,137,344,273,205,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,250,387,331,249,193,274,302],
[359,0,304,414,386,249,221,303,249],
[301,247,0,415,412,305,276,303,358],
[164,137,136,0,246,193,136,191,135],
[220,165,139,305,0,168,192,165,220],
[302,302,246,358,383,0,273,190,190],
[358,330,275,415,359,278,0,302,330],
[277,248,248,360,386,361,249,0,331],
[249,302,193,416,331,361,221,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,294,288,284,302,278,277,274],
[272,0,291,271,256,263,254,257,273],
[257,260,0,257,245,251,249,263,251],
[263,280,294,0,259,276,269,284,262],
[267,295,306,292,0,285,289,279,267],
[249,288,300,275,266,0,275,269,257],
[273,297,302,282,262,276,0,279,264],
[274,294,288,267,272,282,272,0,277],
[277,278,300,289,284,294,287,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,261,265,273,254,291,243,255],
[296,0,273,293,283,279,296,281,283],
[290,278,0,286,286,273,286,284,293],
[286,258,265,0,267,258,293,270,274],
[278,268,265,284,0,263,276,264,267],
[297,272,278,293,288,0,300,266,272],
[260,255,265,258,275,251,0,257,266],
[308,270,267,281,287,285,294,0,280],
[296,268,258,277,284,279,285,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,298,295,285,311,254,301,298],
[249,0,265,272,279,271,253,281,264],
[253,286,0,269,290,267,279,271,278],
[256,279,282,0,274,278,254,278,279],
[266,272,261,277,0,301,276,267,282],
[240,280,284,273,250,0,268,264,259],
[297,298,272,297,275,283,0,278,279],
[250,270,280,273,284,287,273,0,287],
[253,287,273,272,269,292,272,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,330,302,226,261,318,276,252],
[268,0,328,308,197,258,329,277,296],
[221,223,0,231,171,220,301,220,276],
[249,243,320,0,263,300,337,291,278],
[325,354,380,288,0,267,375,277,271],
[290,293,331,251,284,0,339,291,295],
[233,222,250,214,176,212,0,230,255],
[275,274,331,260,274,260,321,0,282],
[299,255,275,273,280,256,296,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,268,270,279,309,302,275],
[271,0,286,271,275,290,314,292,270],
[270,265,0,281,271,272,299,303,265],
[283,280,270,0,280,296,310,311,276],
[281,276,280,271,0,279,313,268,259],
[272,261,279,255,272,0,289,275,270],
[242,237,252,241,238,262,0,289,255],
[249,259,248,240,283,276,262,0,256],
[276,281,286,275,292,281,296,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,286,226,248,283,284,298,243],
[249,0,273,215,234,251,269,217,203],
[265,278,0,235,296,260,309,262,230],
[325,336,316,0,304,317,313,295,271],
[303,317,255,247,0,299,292,260,284],
[268,300,291,234,252,0,262,252,255],
[267,282,242,238,259,289,0,267,247],
[253,334,289,256,291,299,284,0,274],
[308,348,321,280,267,296,304,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,256,281,292,281,293,298,273],
[265,0,280,296,310,279,291,286,286],
[295,271,0,307,286,283,293,315,266],
[270,255,244,0,264,271,260,275,255],
[259,241,265,287,0,285,268,283,251],
[270,272,268,280,266,0,272,301,251],
[258,260,258,291,283,279,0,292,265],
[253,265,236,276,268,250,259,0,251],
[278,265,285,296,300,300,286,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,268,269,293,272,266,286,263],
[293,0,270,279,276,281,263,301,271],
[283,281,0,281,270,273,280,301,269],
[282,272,270,0,270,277,275,293,291],
[258,275,281,281,0,287,272,270,269],
[279,270,278,274,264,0,261,294,273],
[285,288,271,276,279,290,0,284,281],
[265,250,250,258,281,257,267,0,277],
[288,280,282,260,282,278,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,269,250,257,261,258,275,271],
[287,0,277,278,277,255,268,279,287],
[282,274,0,265,264,268,269,281,270],
[301,273,286,0,269,266,277,280,283],
[294,274,287,282,0,276,295,295,294],
[290,296,283,285,275,0,293,296,299],
[293,283,282,274,256,258,0,293,294],
[276,272,270,271,256,255,258,0,282],
[280,264,281,268,257,252,257,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,306,291,265,256,281,299,314],
[271,0,268,256,263,256,266,260,266],
[245,283,0,287,265,276,263,293,276],
[260,295,264,0,272,279,236,302,297],
[286,288,286,279,0,293,267,283,295],
[295,295,275,272,258,0,278,308,291],
[270,285,288,315,284,273,0,299,290],
[252,291,258,249,268,243,252,0,276],
[237,285,275,254,256,260,261,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,275,278,278,277,284,289,297],
[251,0,267,258,230,254,264,251,249],
[276,284,0,258,255,275,278,270,260],
[273,293,293,0,252,259,278,273,272],
[273,321,296,299,0,287,279,300,260],
[274,297,276,292,264,0,273,279,297],
[267,287,273,273,272,278,0,264,277],
[262,300,281,278,251,272,287,0,270],
[254,302,291,279,291,254,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,319,314,265,295,283,258,312],
[264,0,288,289,259,284,253,248,293],
[232,263,0,243,259,250,243,218,252],
[237,262,308,0,257,261,285,250,278],
[286,292,292,294,0,298,247,284,309],
[256,267,301,290,253,0,249,245,282],
[268,298,308,266,304,302,0,245,312],
[293,303,333,301,267,306,306,0,298],
[239,258,299,273,242,269,239,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,262,253,253,228,276,261,270],
[267,0,285,290,338,318,338,338,299],
[289,266,0,324,304,299,314,294,284],
[298,261,227,0,286,272,290,307,262],
[298,213,247,265,0,268,253,308,295],
[323,233,252,279,283,0,282,272,319],
[275,213,237,261,298,269,0,314,285],
[290,213,257,244,243,279,237,0,259],
[281,252,267,289,256,232,266,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,262,267,263,268,251,254,275],
[291,0,271,266,256,276,265,266,267],
[289,280,0,265,260,277,268,269,271],
[284,285,286,0,278,275,257,282,285],
[288,295,291,273,0,274,290,267,302],
[283,275,274,276,277,0,268,257,249],
[300,286,283,294,261,283,0,278,294],
[297,285,282,269,284,294,273,0,286],
[276,284,280,266,249,302,257,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,282,266,241,244,253,256,215],
[314,0,346,275,280,272,298,310,291],
[269,205,0,264,208,239,245,259,210],
[285,276,287,0,262,282,263,303,262],
[310,271,343,289,0,291,318,308,298],
[307,279,312,269,260,0,261,311,271],
[298,253,306,288,233,290,0,295,272],
[295,241,292,248,243,240,256,0,246],
[336,260,341,289,253,280,279,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,277,287,264,303,252,275,278],
[304,0,267,289,274,294,280,274,286],
[274,284,0,275,288,283,274,287,294],
[264,262,276,0,268,286,260,266,304],
[287,277,263,283,0,289,284,266,286],
[248,257,268,265,262,0,254,267,265],
[299,271,277,291,267,297,0,283,297],
[276,277,264,285,285,284,268,0,288],
[273,265,257,247,265,286,254,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,233,269,247,268,243,280,259],
[288,0,252,277,291,280,280,305,281],
[318,299,0,257,301,290,289,308,285],
[282,274,294,0,292,283,290,301,275],
[304,260,250,259,0,275,294,269,260],
[283,271,261,268,276,0,287,289,262],
[308,271,262,261,257,264,0,279,264],
[271,246,243,250,282,262,272,0,246],
[292,270,266,276,291,289,287,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,282,273,278,302,284,275,279],
[262,0,264,272,258,275,264,255,266],
[269,287,0,286,301,300,264,268,279],
[278,279,265,0,288,277,262,283,283],
[273,293,250,263,0,275,268,249,274],
[249,276,251,274,276,0,267,267,269],
[267,287,287,289,283,284,0,263,306],
[276,296,283,268,302,284,288,0,259],
[272,285,272,268,277,282,245,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,297,285,282,292,286,275,297],
[254,0,261,263,257,268,261,255,271],
[254,290,0,269,271,271,271,274,283],
[266,288,282,0,280,277,279,290,295],
[269,294,280,271,0,281,263,278,280],
[259,283,280,274,270,0,268,275,277],
[265,290,280,272,288,283,0,278,279],
[276,296,277,261,273,276,273,0,285],
[254,280,268,256,271,274,272,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,300,243,277,260,281,312,314],
[263,0,303,284,252,245,322,336,303],
[251,248,0,241,260,254,248,276,304],
[308,267,310,0,286,271,254,317,336],
[274,299,291,265,0,293,272,317,315],
[291,306,297,280,258,0,305,365,329],
[270,229,303,297,279,246,0,316,315],
[239,215,275,234,234,186,235,0,308],
[237,248,247,215,236,222,236,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,256,246,248,254,252,248,252],
[305,0,299,255,278,277,297,278,297],
[295,252,0,290,264,253,290,264,260],
[305,296,261,0,275,287,301,287,305],
[303,273,287,276,0,260,286,278,270],
[297,274,298,264,291,0,284,297,269],
[299,254,261,250,265,267,0,264,260],
[303,273,287,264,273,254,287,0,280],
[299,254,291,246,281,282,291,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,251,239,275,231,240,274,267],
[245,0,250,235,258,226,255,256,241],
[300,301,0,265,288,276,285,288,272],
[312,316,286,0,297,279,309,312,267],
[276,293,263,254,0,257,232,274,288],
[320,325,275,272,294,0,284,307,296],
[311,296,266,242,319,267,0,297,269],
[277,295,263,239,277,244,254,0,274],
[284,310,279,284,263,255,282,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,285,265,267,262,261,281,248],
[298,0,310,304,303,301,310,298,274],
[266,241,0,267,245,251,280,254,231],
[286,247,284,0,269,288,263,301,273],
[284,248,306,282,0,288,268,302,276],
[289,250,300,263,263,0,288,311,275],
[290,241,271,288,283,263,0,311,270],
[270,253,297,250,249,240,240,0,250],
[303,277,320,278,275,276,281,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,283,284,246,304,268,281,273],
[248,0,210,264,220,246,265,282,222],
[268,341,0,288,274,302,263,316,273],
[267,287,263,0,261,290,251,305,265],
[305,331,277,290,0,279,260,287,291],
[247,305,249,261,272,0,234,284,234],
[283,286,288,300,291,317,0,323,264],
[270,269,235,246,264,267,228,0,259],
[278,329,278,286,260,317,287,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,294,277,283,280,307,306],
[276,0,266,287,268,281,273,292,280],
[275,285,0,284,273,274,276,296,282],
[257,264,267,0,261,269,259,298,288],
[274,283,278,290,0,273,281,291,306],
[268,270,277,282,278,0,289,298,288],
[271,278,275,292,270,262,0,280,310],
[244,259,255,253,260,253,271,0,248],
[245,271,269,263,245,263,241,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,91,182,91,92,183,182,91],
[368,0,185,276,368,368,276,368,368],
[460,366,0,274,369,369,274,274,366],
[369,275,277,0,277,369,274,368,460],
[460,183,182,274,0,183,274,274,183],
[459,183,182,182,368,0,273,274,182],
[368,275,277,277,277,278,0,277,277],
[369,183,277,183,277,277,274,0,277],
[460,183,185,91,368,369,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,289,303,267,284,290,298,287],
[259,0,273,280,257,259,290,297,249],
[262,278,0,288,280,273,285,305,302],
[248,271,263,0,223,293,278,274,277],
[284,294,271,328,0,276,300,307,292],
[267,292,278,258,275,0,254,296,267],
[261,261,266,273,251,297,0,292,296],
[253,254,246,277,244,255,259,0,276],
[264,302,249,274,259,284,255,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,272,274,307,258,282,276,266],
[264,0,256,236,271,276,254,226,262],
[279,295,0,283,283,297,250,223,261],
[277,315,268,0,251,284,245,225,298],
[244,280,268,300,0,275,238,269,257],
[293,275,254,267,276,0,230,268,272],
[269,297,301,306,313,321,0,280,265],
[275,325,328,326,282,283,271,0,246],
[285,289,290,253,294,279,286,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,286,258,284,302,311,273,278],
[249,0,275,260,273,285,279,280,276],
[265,276,0,285,269,285,274,292,292],
[293,291,266,0,280,277,274,252,293],
[267,278,282,271,0,258,291,271,300],
[249,266,266,274,293,0,277,250,280],
[240,272,277,277,260,274,0,279,269],
[278,271,259,299,280,301,272,0,284],
[273,275,259,258,251,271,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,392,316,394,394,394,157,313],
[313,0,392,394,234,394,394,313,391],
[159,159,0,394,237,394,394,235,391],
[235,157,157,0,78,316,159,156,235],
[157,317,314,473,0,394,394,314,313],
[157,157,157,235,157,0,157,157,314],
[157,157,157,392,157,394,0,157,313],
[394,238,316,395,237,394,394,0,472],
[238,160,160,316,238,237,238,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,275,286,256,264,294,274,283],
[275,0,261,268,263,262,258,263,272],
[276,290,0,300,270,280,275,278,280],
[265,283,251,0,257,253,265,266,258],
[295,288,281,294,0,273,288,277,288],
[287,289,271,298,278,0,286,284,281],
[257,293,276,286,263,265,0,252,280],
[277,288,273,285,274,267,299,0,271],
[268,279,271,293,263,270,271,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,284,281,265,268,277,242,261],
[288,0,285,278,265,257,298,269,288],
[267,266,0,274,268,246,282,253,257],
[270,273,277,0,265,259,265,271,260],
[286,286,283,286,0,251,286,284,289],
[283,294,305,292,300,0,296,273,279],
[274,253,269,286,265,255,0,262,270],
[309,282,298,280,267,278,289,0,293],
[290,263,294,291,262,272,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,286,310,272,288,285,257,269],
[257,0,264,284,242,253,261,228,274],
[265,287,0,321,287,299,303,284,285],
[241,267,230,0,207,253,246,241,265],
[279,309,264,344,0,286,316,276,286],
[263,298,252,298,265,0,280,256,253],
[266,290,248,305,235,271,0,260,261],
[294,323,267,310,275,295,291,0,283],
[282,277,266,286,265,298,290,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,291,334,319,274,298,265,305],
[296,0,268,334,297,270,300,287,300],
[260,283,0,307,315,267,279,246,303],
[217,217,244,0,252,187,242,195,267],
[232,254,236,299,0,225,284,245,286],
[277,281,284,364,326,0,302,274,291],
[253,251,272,309,267,249,0,252,294],
[286,264,305,356,306,277,299,0,325],
[246,251,248,284,265,260,257,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,273,284,259,251,263,282],
[276,0,274,256,260,255,268,270,271],
[278,277,0,253,288,259,263,244,255],
[278,295,298,0,289,280,281,280,265],
[267,291,263,262,0,256,262,258,250],
[292,296,292,271,295,0,282,280,274],
[300,283,288,270,289,269,0,279,287],
[288,281,307,271,293,271,272,0,274],
[269,280,296,286,301,277,264,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,256,234,308,244,265,260,254],
[302,0,284,307,315,282,292,299,274],
[295,267,0,277,283,255,292,283,293],
[317,244,274,0,311,232,277,267,273],
[243,236,268,240,0,256,258,275,242],
[307,269,296,319,295,0,294,296,289],
[286,259,259,274,293,257,0,264,288],
[291,252,268,284,276,255,287,0,276],
[297,277,258,278,309,262,263,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,274,266,301,298,283,264],
[275,0,269,275,284,285,295,269,285],
[273,282,0,258,271,290,281,269,267],
[277,276,293,0,264,290,287,274,273],
[285,267,280,287,0,292,289,288,286],
[250,266,261,261,259,0,280,257,252],
[253,256,270,264,262,271,0,265,240],
[268,282,282,277,263,294,286,0,251],
[287,266,284,278,265,299,311,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,258,261,261,299,300,241,347],
[293,0,273,282,254,252,258,260,321],
[293,278,0,275,284,329,256,279,341],
[290,269,276,0,287,249,281,239,323],
[290,297,267,264,0,290,301,268,326],
[252,299,222,302,261,0,272,267,305],
[251,293,295,270,250,279,0,254,348],
[310,291,272,312,283,284,297,0,324],
[204,230,210,228,225,246,203,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,305,322,273,278,245,301,261],
[300,0,327,310,307,348,304,323,275],
[246,224,0,256,244,258,224,261,196],
[229,241,295,0,222,282,243,275,239],
[278,244,307,329,0,331,293,332,292],
[273,203,293,269,220,0,248,275,235],
[306,247,327,308,258,303,0,324,276],
[250,228,290,276,219,276,227,0,264],
[290,276,355,312,259,316,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,299,278,292,292,273,276,287],
[266,0,278,286,295,275,279,278,285],
[252,273,0,264,289,257,266,253,268],
[273,265,287,0,281,274,272,281,272],
[259,256,262,270,0,263,280,259,261],
[259,276,294,277,288,0,269,284,271],
[278,272,285,279,271,282,0,262,265],
[275,273,298,270,292,267,289,0,273],
[264,266,283,279,290,280,286,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,274,277,306,281,283,275,282],
[252,0,258,260,273,267,251,276,258],
[277,293,0,299,313,254,289,296,263],
[274,291,252,0,288,257,295,246,300],
[245,278,238,263,0,247,260,257,248],
[270,284,297,294,304,0,287,267,288],
[268,300,262,256,291,264,0,291,268],
[276,275,255,305,294,284,260,0,273],
[269,293,288,251,303,263,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,231,254,228,274,259,265,248],
[326,0,265,277,271,293,276,250,251],
[320,286,0,273,313,321,317,280,311],
[297,274,278,0,297,296,298,272,296],
[323,280,238,254,0,316,250,271,262],
[277,258,230,255,235,0,237,275,264],
[292,275,234,253,301,314,0,295,294],
[286,301,271,279,280,276,256,0,280],
[303,300,240,255,289,287,257,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,287,280,268,277,271,286,289],
[279,0,290,281,263,283,242,289,282],
[264,261,0,283,252,261,257,278,290],
[271,270,268,0,248,275,272,288,285],
[283,288,299,303,0,272,287,301,303],
[274,268,290,276,279,0,262,294,308],
[280,309,294,279,264,289,0,291,307],
[265,262,273,263,250,257,260,0,284],
[262,269,261,266,248,243,244,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,294,296,292,288,292,289,302],
[291,0,291,272,298,272,280,292,286],
[257,260,0,262,277,258,288,262,270],
[255,279,289,0,259,249,294,268,296],
[259,253,274,292,0,269,286,280,310],
[263,279,293,302,282,0,298,295,302],
[259,271,263,257,265,253,0,261,284],
[262,259,289,283,271,256,290,0,281],
[249,265,281,255,241,249,267,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,275,273,262,281,288,290,256],
[262,0,279,261,270,286,286,269,269],
[276,272,0,273,279,277,260,260,268],
[278,290,278,0,255,289,275,276,267],
[289,281,272,296,0,276,281,287,285],
[270,265,274,262,275,0,254,276,284],
[263,265,291,276,270,297,0,275,279],
[261,282,291,275,264,275,276,0,287],
[295,282,283,284,266,267,272,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,257,225,228,227,272,258,239],
[281,0,281,255,230,278,271,253,266],
[294,270,0,265,249,242,296,262,259],
[326,296,286,0,279,263,293,295,306],
[323,321,302,272,0,315,295,303,299],
[324,273,309,288,236,0,285,245,278],
[279,280,255,258,256,266,0,236,285],
[293,298,289,256,248,306,315,0,289],
[312,285,292,245,252,273,266,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,301,271,280,284,291,299,294],
[287,0,289,268,291,280,295,274,292],
[250,262,0,266,278,243,274,283,283],
[280,283,285,0,300,274,286,317,293],
[271,260,273,251,0,265,269,285,289],
[267,271,308,277,286,0,294,292,291],
[260,256,277,265,282,257,0,279,283],
[252,277,268,234,266,259,272,0,280],
[257,259,268,258,262,260,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,383,297,299,256,300,426,343],
[211,0,299,213,173,167,217,300,210],
[168,252,0,298,169,124,257,256,253],
[254,338,253,0,257,212,215,342,339],
[252,378,382,294,0,251,338,509,294],
[295,384,427,339,300,0,257,385,339],
[251,334,294,336,213,294,0,337,251],
[125,251,295,209,42,166,214,0,209],
[208,341,298,212,257,212,300,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,256,259,283,264,274,280],
[276,0,264,278,264,282,250,262,267],
[276,287,0,307,286,290,268,277,272],
[295,273,244,0,265,267,273,258,265],
[292,287,265,286,0,289,291,259,291],
[268,269,261,284,262,0,266,260,273],
[287,301,283,278,260,285,0,273,253],
[277,289,274,293,292,291,278,0,287],
[271,284,279,286,260,278,298,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,294,214,296,313,354,294,278],
[278,0,275,256,236,333,300,254,215],
[257,276,0,237,255,295,358,335,259],
[337,295,314,0,330,335,334,235,296],
[255,315,296,221,0,277,298,294,257],
[238,218,256,216,274,0,258,236,237],
[197,251,193,217,253,293,0,271,213],
[257,297,216,316,257,315,280,0,257],
[273,336,292,255,294,314,338,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,275,290,273,254,280,285,293],
[262,0,257,277,271,252,279,271,265],
[276,294,0,306,290,268,284,272,274],
[261,274,245,0,269,252,254,250,260],
[278,280,261,282,0,277,279,266,276],
[297,299,283,299,274,0,282,276,287],
[271,272,267,297,272,269,0,270,267],
[266,280,279,301,285,275,281,0,281],
[258,286,277,291,275,264,284,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,219,440,385,330,275,165],
[277,0,222,221,386,221,386,276,221],
[275,329,0,274,495,385,330,330,329],
[332,330,277,0,385,442,386,276,166],
[111,165,56,166,0,221,275,331,111],
[166,330,166,109,330,0,275,219,166],
[221,165,221,165,276,276,0,221,220],
[276,275,221,275,220,332,330,0,276],
[386,330,222,385,440,385,331,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,281,303,269,286,288,266,284],
[289,0,280,293,277,278,290,273,282],
[270,271,0,271,262,269,268,263,269],
[248,258,280,0,264,267,280,258,254],
[282,274,289,287,0,282,278,284,271],
[265,273,282,284,269,0,254,253,262],
[263,261,283,271,273,297,0,273,270],
[285,278,288,293,267,298,278,0,274],
[267,269,282,297,280,289,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,319,255,298,244,283,294,259],
[295,0,319,305,228,292,291,304,272],
[232,232,0,253,200,268,212,243,221],
[296,246,298,0,287,327,310,319,309],
[253,323,351,264,0,287,323,291,301],
[307,259,283,224,264,0,224,316,287],
[268,260,339,241,228,327,0,277,260],
[257,247,308,232,260,235,274,0,247],
[292,279,330,242,250,264,291,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,277,263,280,262,259,268,283],
[269,0,277,262,262,288,271,265,269],
[274,274,0,254,276,271,266,258,252],
[288,289,297,0,282,278,280,280,258],
[271,289,275,269,0,278,276,263,280],
[289,263,280,273,273,0,263,259,294],
[292,280,285,271,275,288,0,265,289],
[283,286,293,271,288,292,286,0,293],
[268,282,299,293,271,257,262,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,257,279,251,264,289,266,285],
[306,0,288,287,267,295,337,302,291],
[294,263,0,286,249,283,281,293,270],
[272,264,265,0,289,271,301,269,289],
[300,284,302,262,0,289,320,306,301],
[287,256,268,280,262,0,302,277,257],
[262,214,270,250,231,249,0,269,236],
[285,249,258,282,245,274,282,0,261],
[266,260,281,262,250,294,315,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,254,268,277,277,280,282,273],
[262,0,266,249,275,268,259,273,268],
[297,285,0,274,275,280,274,280,270],
[283,302,277,0,291,271,289,279,271],
[274,276,276,260,0,267,271,272,259],
[274,283,271,280,284,0,278,279,285],
[271,292,277,262,280,273,0,265,258],
[269,278,271,272,279,272,286,0,263],
[278,283,281,280,292,266,293,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,344,332,297,316,305,245,310],
[284,0,321,291,303,311,299,258,296],
[207,230,0,270,248,283,249,236,268],
[219,260,281,0,229,268,237,218,247],
[254,248,303,322,0,301,270,279,314],
[235,240,268,283,250,0,267,238,317],
[246,252,302,314,281,284,0,296,311],
[306,293,315,333,272,313,255,0,298],
[241,255,283,304,237,234,240,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,304,292,314,318,312,296,323],
[302,0,356,274,269,299,311,315,306],
[247,195,0,230,238,286,256,264,273],
[259,277,321,0,310,316,268,271,261],
[237,282,313,241,0,290,263,244,300],
[233,252,265,235,261,0,291,257,294],
[239,240,295,283,288,260,0,276,274],
[255,236,287,280,307,294,275,0,307],
[228,245,278,290,251,257,277,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,286,279,259,266,246,292,287],
[284,0,283,263,253,287,281,227,256],
[265,268,0,250,276,265,240,253,300],
[272,288,301,0,292,257,315,270,286],
[292,298,275,259,0,258,252,271,259],
[285,264,286,294,293,0,292,276,266],
[305,270,311,236,299,259,0,220,282],
[259,324,298,281,280,275,331,0,249],
[264,295,251,265,292,285,269,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,248,270,251,239,230,279,259],
[288,0,259,259,264,259,281,276,237],
[303,292,0,277,300,274,246,340,293],
[281,292,274,0,289,273,315,305,267],
[300,287,251,262,0,263,265,312,243],
[312,292,277,278,288,0,303,335,249],
[321,270,305,236,286,248,0,310,265],
[272,275,211,246,239,216,241,0,221],
[292,314,258,284,308,302,286,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,315,314,256,280,276,315,275],
[222,0,246,258,213,285,271,260,250],
[236,305,0,326,276,274,283,289,260],
[237,293,225,0,236,265,271,299,240],
[295,338,275,315,0,318,321,323,316],
[271,266,277,286,233,0,299,305,245],
[275,280,268,280,230,252,0,299,313],
[236,291,262,252,228,246,252,0,290],
[276,301,291,311,235,306,238,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,249,240,259,258,246,240,246],
[305,0,275,277,279,272,268,275,283],
[302,276,0,275,298,286,293,298,292],
[311,274,276,0,297,273,283,285,281],
[292,272,253,254,0,285,280,285,286],
[293,279,265,278,266,0,282,260,262],
[305,283,258,268,271,269,0,283,286],
[311,276,253,266,266,291,268,0,269],
[305,268,259,270,265,289,265,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,279,290,267,297,256,262,283],
[285,0,275,286,281,295,278,285,288],
[272,276,0,273,272,283,259,271,273],
[261,265,278,0,282,285,270,279,278],
[284,270,279,269,0,308,269,255,290],
[254,256,268,266,243,0,255,251,261],
[295,273,292,281,282,296,0,275,295],
[289,266,280,272,296,300,276,0,263],
[268,263,278,273,261,290,256,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,251,283,283,268,253,265,295],
[275,0,295,272,244,262,249,281,283],
[300,256,0,281,275,258,257,285,286],
[268,279,270,0,237,260,255,289,266],
[268,307,276,314,0,268,284,285,305],
[283,289,293,291,283,0,260,288,298],
[298,302,294,296,267,291,0,281,316],
[286,270,266,262,266,263,270,0,287],
[256,268,265,285,246,253,235,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,275,269,280,284,271,267,283],
[266,0,290,275,278,264,268,274,269],
[276,261,0,267,280,263,272,276,263],
[282,276,284,0,268,301,276,280,276],
[271,273,271,283,0,271,280,292,275],
[267,287,288,250,280,0,279,271,268],
[280,283,279,275,271,272,0,280,248],
[284,277,275,271,259,280,271,0,243],
[268,282,288,275,276,283,303,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,281,277,270,273,276,263],
[285,0,281,272,266,255,236,270,279],
[281,270,0,289,274,281,269,283,279],
[270,279,262,0,295,262,267,283,269],
[274,285,277,256,0,248,264,272,265],
[281,296,270,289,303,0,283,284,282],
[278,315,282,284,287,268,0,292,274],
[275,281,268,268,279,267,259,0,255],
[288,272,272,282,286,269,277,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,295,309,269,300,284,300,292],
[270,0,271,280,260,301,262,279,259],
[256,280,0,279,260,293,252,298,261],
[242,271,272,0,276,276,252,267,253],
[282,291,291,275,0,301,267,283,283],
[251,250,258,275,250,0,260,267,260],
[267,289,299,299,284,291,0,312,281],
[251,272,253,284,268,284,239,0,254],
[259,292,290,298,268,291,270,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,294,286,266,310,304,312,280],
[276,0,242,285,250,265,271,289,249],
[257,309,0,276,251,285,274,274,265],
[265,266,275,0,275,293,298,298,239],
[285,301,300,276,0,294,304,306,227],
[241,286,266,258,257,0,279,300,228],
[247,280,277,253,247,272,0,284,239],
[239,262,277,253,245,251,267,0,235],
[271,302,286,312,324,323,312,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,297,296,291,274,309,294,298],
[264,0,291,310,267,274,300,291,284],
[254,260,0,262,246,251,259,256,242],
[255,241,289,0,225,259,272,254,277],
[260,284,305,326,0,284,307,267,303],
[277,277,300,292,267,0,278,275,301],
[242,251,292,279,244,273,0,274,267],
[257,260,295,297,284,276,277,0,306],
[253,267,309,274,248,250,284,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,276,268,271,308,266,261,274],
[287,0,285,288,286,296,265,261,273],
[275,266,0,264,277,265,257,269,262],
[283,263,287,0,270,300,263,265,282],
[280,265,274,281,0,278,274,229,279],
[243,255,286,251,273,0,269,275,248],
[285,286,294,288,277,282,0,254,287],
[290,290,282,286,322,276,297,0,261],
[277,278,289,269,272,303,264,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,287,288,283,290,268,289,282],
[268,0,289,287,273,285,281,289,294],
[264,262,0,270,246,281,269,278,266],
[263,264,281,0,281,287,267,291,283],
[268,278,305,270,0,287,267,290,274],
[261,266,270,264,264,0,256,300,270],
[283,270,282,284,284,295,0,290,269],
[262,262,273,260,261,251,261,0,268],
[269,257,285,268,277,281,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,287,277,265,284,315,301,307],
[247,0,264,251,260,276,278,263,294],
[264,287,0,246,246,278,281,279,288],
[274,300,305,0,267,297,312,294,305],
[286,291,305,284,0,274,276,274,277],
[267,275,273,254,277,0,282,280,301],
[236,273,270,239,275,269,0,276,302],
[250,288,272,257,277,271,275,0,305],
[244,257,263,246,274,250,249,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,302,285,262,276,257,262,256],
[274,0,280,264,260,268,263,272,268],
[249,271,0,295,276,258,283,269,275],
[266,287,256,0,284,254,274,278,263],
[289,291,275,267,0,283,288,272,276],
[275,283,293,297,268,0,297,283,263],
[294,288,268,277,263,254,0,273,272],
[289,279,282,273,279,268,278,0,260],
[295,283,276,288,275,288,279,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,270,294,272,285,289,273,278],
[252,0,263,261,260,247,289,258,255],
[281,288,0,297,282,282,300,269,282],
[257,290,254,0,284,261,293,261,262],
[279,291,269,267,0,273,281,260,274],
[266,304,269,290,278,0,285,281,261],
[262,262,251,258,270,266,0,250,257],
[278,293,282,290,291,270,301,0,275],
[273,296,269,289,277,290,294,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,278,242,250,274,280,250,268],
[267,0,298,278,263,279,302,239,293],
[273,253,0,245,261,250,254,248,273],
[309,273,306,0,267,268,283,280,278],
[301,288,290,284,0,313,282,267,269],
[277,272,301,283,238,0,282,268,284],
[271,249,297,268,269,269,0,232,263],
[301,312,303,271,284,283,319,0,294],
[283,258,278,273,282,267,288,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,290,282,285,302,270,283,288],
[262,0,279,260,278,256,266,280,271],
[261,272,0,269,267,265,260,266,281],
[269,291,282,0,281,279,280,277,261],
[266,273,284,270,0,286,272,287,284],
[249,295,286,272,265,0,264,273,271],
[281,285,291,271,279,287,0,284,281],
[268,271,285,274,264,278,267,0,278],
[263,280,270,290,267,280,270,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,255,270,264,251,240,249,248],
[298,0,274,300,296,274,277,280,260],
[296,277,0,279,274,273,267,277,272],
[281,251,272,0,256,252,261,274,251],
[287,255,277,295,0,271,265,281,253],
[300,277,278,299,280,0,275,277,257],
[311,274,284,290,286,276,0,303,288],
[302,271,274,277,270,274,248,0,270],
[303,291,279,300,298,294,263,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,315,270,296,252,257,288],
[278,0,271,315,256,293,267,281,280],
[280,280,0,294,268,284,277,254,288],
[236,236,257,0,267,272,263,251,277],
[281,295,283,284,0,303,271,258,289],
[255,258,267,279,248,0,255,236,287],
[299,284,274,288,280,296,0,257,295],
[294,270,297,300,293,315,294,0,310],
[263,271,263,274,262,264,256,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,287,323,245,258,306,259,257],
[224,0,287,292,255,233,283,211,281],
[264,264,0,317,257,222,301,236,254],
[228,259,234,0,210,238,258,203,237],
[306,296,294,341,0,255,320,242,274],
[293,318,329,313,296,0,272,232,277],
[245,268,250,293,231,279,0,237,235],
[292,340,315,348,309,319,314,0,264],
[294,270,297,314,277,274,316,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,293,274,271,286,263,277],
[267,0,279,292,275,263,288,267,262],
[278,272,0,273,262,266,268,264,261],
[258,259,278,0,250,266,274,272,256],
[277,276,289,301,0,281,266,265,259],
[280,288,285,285,270,0,287,295,278],
[265,263,283,277,285,264,0,278,257],
[288,284,287,279,286,256,273,0,263],
[274,289,290,295,292,273,294,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,267,272,278,272,270,259,253],
[263,0,267,275,265,273,288,266,250],
[284,284,0,282,274,274,296,271,267],
[279,276,269,0,255,293,290,255,257],
[273,286,277,296,0,266,299,266,269],
[279,278,277,258,285,0,310,277,272],
[281,263,255,261,252,241,0,270,271],
[292,285,280,296,285,274,281,0,279],
[298,301,284,294,282,279,280,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,334,321,375,336,264,281,264],
[341,0,302,272,326,299,229,226,300],
[217,249,0,184,236,264,193,230,193],
[230,279,367,0,354,316,265,244,298],
[176,225,315,197,0,281,247,191,189],
[215,252,287,235,270,0,264,213,213],
[287,322,358,286,304,287,0,265,271],
[270,325,321,307,360,338,286,0,318],
[287,251,358,253,362,338,280,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,243,279,271,295,268,251,230],
[300,0,282,286,297,285,270,275,270],
[308,269,0,270,306,307,269,261,277],
[272,265,281,0,307,284,279,289,289],
[280,254,245,244,0,260,248,276,253],
[256,266,244,267,291,0,245,244,271],
[283,281,282,272,303,306,0,287,277],
[300,276,290,262,275,307,264,0,267],
[321,281,274,262,298,280,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,256,274,262,283,265,277],
[285,0,293,278,283,263,310,290,281],
[283,258,0,259,267,255,289,265,273],
[295,273,292,0,275,271,294,301,297],
[277,268,284,276,0,270,284,275,291],
[289,288,296,280,281,0,314,272,294],
[268,241,262,257,267,237,0,270,272],
[286,261,286,250,276,279,281,0,291],
[274,270,278,254,260,257,279,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,266,262,264,261,261,267],
[283,0,272,274,272,258,253,260,269],
[297,279,0,298,263,281,264,271,279],
[285,277,253,0,260,272,267,278,269],
[289,279,288,291,0,282,265,274,295],
[287,293,270,279,269,0,253,273,257],
[290,298,287,284,286,298,0,274,287],
[290,291,280,273,277,278,277,0,279],
[284,282,272,282,256,294,264,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,256,288,280,282,258,268,270],
[290,0,282,289,299,281,265,263,297],
[295,269,0,291,288,277,256,276,310],
[263,262,260,0,284,272,254,258,262],
[271,252,263,267,0,284,259,277,286],
[269,270,274,279,267,0,259,268,272],
[293,286,295,297,292,292,0,256,300],
[283,288,275,293,274,283,295,0,286],
[281,254,241,289,265,279,251,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,376,282,320,327,270,352,319],
[260,0,357,283,304,268,304,303,289],
[175,194,0,184,242,258,235,251,207],
[269,268,367,0,323,302,300,294,266],
[231,247,309,228,0,270,277,296,246],
[224,283,293,249,281,0,282,272,247],
[281,247,316,251,274,269,0,284,276],
[199,248,300,257,255,279,267,0,224],
[232,262,344,285,305,304,275,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,266,287,248,283,269,269,249],
[270,0,286,292,286,273,279,275,277],
[285,265,0,289,232,284,261,276,295],
[264,259,262,0,258,277,267,266,270],
[303,265,319,293,0,310,294,279,309],
[268,278,267,274,241,0,252,261,259],
[282,272,290,284,257,299,0,284,283],
[282,276,275,285,272,290,267,0,272],
[302,274,256,281,242,292,268,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,344,283,280,273,294,297,317],
[266,0,342,284,286,262,283,307,312],
[207,209,0,222,230,237,230,229,256],
[268,267,329,0,299,274,256,305,295],
[271,265,321,252,0,276,288,283,326],
[278,289,314,277,275,0,274,262,307],
[257,268,321,295,263,277,0,281,299],
[254,244,322,246,268,289,270,0,295],
[234,239,295,256,225,244,252,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,259,284,264,270,261,269,285],
[290,0,262,300,281,280,266,281,276],
[292,289,0,279,253,264,271,299,283],
[267,251,272,0,257,258,249,268,238],
[287,270,298,294,0,291,284,281,277],
[281,271,287,293,260,0,260,290,269],
[290,285,280,302,267,291,0,303,305],
[282,270,252,283,270,261,248,0,262],
[266,275,268,313,274,282,246,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,238,240,267,253,287,303,321],
[344,0,288,287,317,266,284,362,332],
[313,263,0,282,263,244,251,348,329],
[311,264,269,0,283,310,363,329,332],
[284,234,288,268,0,313,290,272,301],
[298,285,307,241,238,0,288,302,315],
[264,267,300,188,261,263,0,300,329],
[248,189,203,222,279,249,251,0,253],
[230,219,222,219,250,236,222,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,282,328,300,304,264,266,296],
[256,0,277,327,277,271,296,278,262],
[269,274,0,281,267,280,254,269,260],
[223,224,270,0,246,240,258,228,240],
[251,274,284,305,0,281,258,263,289],
[247,280,271,311,270,0,279,247,253],
[287,255,297,293,293,272,0,255,298],
[285,273,282,323,288,304,296,0,286],
[255,289,291,311,262,298,253,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,268,284,267,268,281,283,273],
[280,0,274,273,276,288,296,297,277],
[283,277,0,282,271,286,287,273,273],
[267,278,269,0,274,297,270,286,280],
[284,275,280,277,0,287,294,294,300],
[283,263,265,254,264,0,270,277,269],
[270,255,264,281,257,281,0,277,263],
[268,254,278,265,257,274,274,0,260],
[278,274,278,271,251,282,288,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,277,282,307,256,292,301,284],
[244,0,258,242,276,271,268,283,278],
[274,293,0,281,298,270,279,291,291],
[269,309,270,0,300,284,269,307,271],
[244,275,253,251,0,262,259,293,282],
[295,280,281,267,289,0,283,301,272],
[259,283,272,282,292,268,0,320,292],
[250,268,260,244,258,250,231,0,251],
[267,273,260,280,269,279,259,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,270,292,278,282,296,287,285],
[244,0,268,281,262,270,264,268,275],
[281,283,0,279,269,269,275,292,283],
[259,270,272,0,249,271,272,266,288],
[273,289,282,302,0,286,286,307,293],
[269,281,282,280,265,0,270,292,272],
[255,287,276,279,265,281,0,284,300],
[264,283,259,285,244,259,267,0,254],
[266,276,268,263,258,279,251,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,294,252,301,296,293,267,272],
[250,0,306,280,266,260,283,246,274],
[257,245,0,241,243,230,263,251,243],
[299,271,310,0,312,285,280,279,260],
[250,285,308,239,0,254,303,266,273],
[255,291,321,266,297,0,319,260,253],
[258,268,288,271,248,232,0,244,236],
[284,305,300,272,285,291,307,0,287],
[279,277,308,291,278,298,315,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,272,289,291,286,288,298],
[266,0,273,269,297,271,301,274,271],
[269,278,0,272,283,277,280,270,284],
[279,282,279,0,288,289,277,271,269],
[262,254,268,263,0,272,281,269,271],
[260,280,274,262,279,0,277,274,280],
[265,250,271,274,270,274,0,268,269],
[263,277,281,280,282,277,283,0,278],
[253,280,267,282,280,271,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,278,277,270,278,281,273],
[275,0,269,274,273,278,276,264,273],
[284,282,0,290,274,286,284,275,283],
[273,277,261,0,279,287,256,275,255],
[274,278,277,272,0,285,263,262,282],
[281,273,265,264,266,0,271,277,275],
[273,275,267,295,288,280,0,274,261],
[270,287,276,276,289,274,277,0,277],
[278,278,268,296,269,276,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,261,266,277,306,277,269],
[271,0,292,279,290,294,290,287,278],
[274,259,0,271,276,286,270,261,255],
[290,272,280,0,271,280,274,274,272],
[285,261,275,280,0,280,285,274,263],
[274,257,265,271,271,0,293,267,272],
[245,261,281,277,266,258,0,259,264],
[274,264,290,277,277,284,292,0,257],
[282,273,296,279,288,279,287,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,283,281,282,267,272,318,236],
[286,0,280,321,279,284,256,321,252],
[268,271,0,293,266,280,268,322,276],
[270,230,258,0,249,241,263,304,228],
[269,272,285,302,0,275,297,310,259],
[284,267,271,310,276,0,268,310,283],
[279,295,283,288,254,283,0,311,242],
[233,230,229,247,241,241,240,0,204],
[315,299,275,323,292,268,309,347,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,261,222,354,319,275,254,252],
[261,0,278,293,302,280,303,279,250],
[290,273,0,252,289,240,300,266,247],
[329,258,299,0,314,306,313,306,285],
[197,249,262,237,0,273,238,255,199],
[232,271,311,245,278,0,289,304,235],
[276,248,251,238,313,262,0,238,274],
[297,272,285,245,296,247,313,0,312],
[299,301,304,266,352,316,277,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,277,287,281,257,252,300,261],
[282,0,290,272,273,293,276,290,265],
[274,261,0,275,271,265,263,285,262],
[264,279,276,0,276,282,272,283,265],
[270,278,280,275,0,269,259,278,294],
[294,258,286,269,282,0,267,286,273],
[299,275,288,279,292,284,0,302,296],
[251,261,266,268,273,265,249,0,276],
[290,286,289,286,257,278,255,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,282,261,257,264,278,259,286],
[276,0,274,290,279,272,245,272,260],
[269,277,0,277,263,272,258,276,287],
[290,261,274,0,261,260,273,250,279],
[294,272,288,290,0,276,297,278,304],
[287,279,279,291,275,0,288,286,283],
[273,306,293,278,254,263,0,275,303],
[292,279,275,301,273,265,276,0,280],
[265,291,264,272,247,268,248,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,284,279,289,293,288,270,291],
[279,0,290,287,279,287,292,273,292],
[267,261,0,269,265,282,283,279,266],
[272,264,282,0,269,281,271,264,274],
[262,272,286,282,0,268,287,287,277],
[258,264,269,270,283,0,279,270,271],
[263,259,268,280,264,272,0,257,258],
[281,278,272,287,264,281,294,0,276],
[260,259,285,277,274,280,293,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,292,301,270,269,272,273,271],
[257,0,293,277,270,267,304,263,263],
[259,258,0,275,271,281,295,286,277],
[250,274,276,0,262,254,294,262,277],
[281,281,280,289,0,276,287,302,265],
[282,284,270,297,275,0,305,292,266],
[279,247,256,257,264,246,0,288,249],
[278,288,265,289,249,259,263,0,272],
[280,288,274,274,286,285,302,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,276,288,274,286,282,262,298],
[279,0,282,273,286,299,268,260,276],
[275,269,0,274,263,290,272,272,272],
[263,278,277,0,270,284,271,274,276],
[277,265,288,281,0,295,270,283,259],
[265,252,261,267,256,0,265,239,281],
[269,283,279,280,281,286,0,263,277],
[289,291,279,277,268,312,288,0,295],
[253,275,279,275,292,270,274,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,233,260,263,244,263,264,263],
[290,0,279,275,295,298,283,285,281],
[318,272,0,273,295,294,292,280,290],
[291,276,278,0,297,295,270,293,291],
[288,256,256,254,0,263,240,268,263],
[307,253,257,256,288,0,259,274,269],
[288,268,259,281,311,292,0,292,288],
[287,266,271,258,283,277,259,0,265],
[288,270,261,260,288,282,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,268,269,240,247,250,225,258],
[300,0,312,323,295,286,273,308,296],
[283,239,0,302,259,251,263,266,248],
[282,228,249,0,217,251,241,232,225],
[311,256,292,334,0,266,321,286,274],
[304,265,300,300,285,0,276,270,252],
[301,278,288,310,230,275,0,256,281],
[326,243,285,319,265,281,295,0,262],
[293,255,303,326,277,299,270,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,290,260,276,265,269,276,286],
[258,0,271,256,275,261,285,291,290],
[261,280,0,271,283,276,280,294,274],
[291,295,280,0,293,302,274,292,264],
[275,276,268,258,0,280,250,248,262],
[286,290,275,249,271,0,277,282,283],
[282,266,271,277,301,274,0,298,265],
[275,260,257,259,303,269,253,0,261],
[265,261,277,287,289,268,286,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,292,313,295,269,271,297,301],
[289,0,276,292,245,246,302,266,331],
[259,275,0,268,251,290,297,258,317],
[238,259,283,0,247,236,275,244,260],
[256,306,300,304,0,267,300,266,282],
[282,305,261,315,284,0,317,298,344],
[280,249,254,276,251,234,0,256,293],
[254,285,293,307,285,253,295,0,324],
[250,220,234,291,269,207,258,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,289,269,281,257,272,276,271],
[263,0,277,267,280,271,281,302,271],
[262,274,0,292,268,289,263,276,255],
[282,284,259,0,272,284,279,272,284],
[270,271,283,279,0,278,264,277,281],
[294,280,262,267,273,0,288,263,266],
[279,270,288,272,287,263,0,264,258],
[275,249,275,279,274,288,287,0,259],
[280,280,296,267,270,285,293,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,251,283,274,269,257,247,266],
[266,0,237,255,269,269,232,263,260],
[300,314,0,290,313,284,276,275,277],
[268,296,261,0,292,287,253,275,272],
[277,282,238,259,0,262,244,260,251],
[282,282,267,264,289,0,251,270,285],
[294,319,275,298,307,300,0,296,300],
[304,288,276,276,291,281,255,0,260],
[285,291,274,279,300,266,251,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,292,276,268,281,291,275,256],
[263,0,267,270,262,268,285,291,263],
[259,284,0,267,266,252,269,293,257],
[275,281,284,0,270,271,300,289,270],
[283,289,285,281,0,273,287,288,276],
[270,283,299,280,278,0,288,286,263],
[260,266,282,251,264,263,0,279,262],
[276,260,258,262,263,265,272,0,265],
[295,288,294,281,275,288,289,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,283,300,278,280,276,283,267],
[260,0,284,301,284,271,272,257,272],
[268,267,0,286,266,279,266,255,251],
[251,250,265,0,260,259,279,262,268],
[273,267,285,291,0,262,270,258,266],
[271,280,272,292,289,0,294,267,282],
[275,279,285,272,281,257,0,292,263],
[268,294,296,289,293,284,259,0,279],
[284,279,300,283,285,269,288,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,257,269,248,271,248,231,281],
[272,0,261,251,244,252,279,229,270],
[294,290,0,283,268,281,281,267,304],
[282,300,268,0,245,254,278,260,283],
[303,307,283,306,0,268,296,283,301],
[280,299,270,297,283,0,280,268,304],
[303,272,270,273,255,271,0,267,282],
[320,322,284,291,268,283,284,0,287],
[270,281,247,268,250,247,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,265,276,286,287,261,292,270],
[262,0,266,294,293,297,272,319,276],
[286,285,0,274,316,283,276,312,311],
[275,257,277,0,247,251,260,285,252],
[265,258,235,304,0,235,272,294,254],
[264,254,268,300,316,0,262,292,303],
[290,279,275,291,279,289,0,295,298],
[259,232,239,266,257,259,256,0,279],
[281,275,240,299,297,248,253,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,253,264,264,265,274,281,260],
[289,0,265,284,261,265,258,276,270],
[298,286,0,281,286,280,276,283,269],
[287,267,270,0,286,276,278,298,270],
[287,290,265,265,0,262,270,273,262],
[286,286,271,275,289,0,274,292,272],
[277,293,275,273,281,277,0,293,278],
[270,275,268,253,278,259,258,0,266],
[291,281,282,281,289,279,273,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,243,273,286,249,300,223,251],
[264,0,190,230,311,281,251,233,302],
[308,361,0,339,363,322,337,269,270],
[278,321,212,0,274,264,300,224,249],
[265,240,188,277,0,238,252,254,263],
[302,270,229,287,313,0,327,263,225],
[251,300,214,251,299,224,0,239,276],
[328,318,282,327,297,288,312,0,275],
[300,249,281,302,288,326,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,263,254,267,291,277,248,283],
[274,0,275,257,275,293,289,273,303],
[288,276,0,247,254,280,277,274,293],
[297,294,304,0,272,295,281,283,317],
[284,276,297,279,0,273,288,279,293],
[260,258,271,256,278,0,261,281,289],
[274,262,274,270,263,290,0,285,276],
[303,278,277,268,272,270,266,0,295],
[268,248,258,234,258,262,275,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,311,302,276,268,277,285,302],
[258,0,282,266,271,272,281,277,297],
[240,269,0,262,251,270,265,261,275],
[249,285,289,0,271,270,280,291,283],
[275,280,300,280,0,280,284,273,296],
[283,279,281,281,271,0,292,282,291],
[274,270,286,271,267,259,0,289,287],
[266,274,290,260,278,269,262,0,278],
[249,254,276,268,255,260,264,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,267,265,269,244,266,292],
[271,0,285,261,269,259,260,279,264],
[276,266,0,267,264,251,246,275,283],
[284,290,284,0,281,251,251,279,275],
[286,282,287,270,0,285,269,268,286],
[282,292,300,300,266,0,290,272,314],
[307,291,305,300,282,261,0,305,286],
[285,272,276,272,283,279,246,0,278],
[259,287,268,276,265,237,265,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,296,272,270,310,281,307,311],
[230,0,258,278,288,267,242,248,245],
[255,293,0,243,286,295,275,241,275],
[279,273,308,0,269,309,333,301,283],
[281,263,265,282,0,265,287,316,292],
[241,284,256,242,286,0,255,269,262],
[270,309,276,218,264,296,0,323,287],
[244,303,310,250,235,282,228,0,285],
[240,306,276,268,259,289,264,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,267,298,252,297,262,254,272],
[308,0,287,277,312,251,283,265,310],
[284,264,0,282,278,302,279,275,305],
[253,274,269,0,264,273,238,243,265],
[299,239,273,287,0,248,249,265,278],
[254,300,249,278,303,0,270,260,287],
[289,268,272,313,302,281,0,292,296],
[297,286,276,308,286,291,259,0,315],
[279,241,246,286,273,264,255,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,282,273,284,258,250,270,244],
[293,0,301,261,263,265,317,273,253],
[269,250,0,256,313,305,279,287,258],
[278,290,295,0,301,288,296,296,262],
[267,288,238,250,0,242,305,275,258],
[293,286,246,263,309,0,292,264,280],
[301,234,272,255,246,259,0,261,215],
[281,278,264,255,276,287,290,0,241],
[307,298,293,289,293,271,336,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,255,233,279,264,271,257,266],
[277,0,274,271,279,280,290,281,294],
[296,277,0,266,285,278,282,291,264],
[318,280,285,0,282,290,274,277,278],
[272,272,266,269,0,282,287,278,274],
[287,271,273,261,269,0,284,272,281],
[280,261,269,277,264,267,0,254,254],
[294,270,260,274,273,279,297,0,266],
[285,257,287,273,277,270,297,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,124,208,124,124,126,167,124],
[340,0,168,339,124,168,169,170,85],
[427,383,0,469,254,298,257,342,342],
[343,212,82,0,125,171,127,168,167],
[427,427,297,426,0,174,214,299,128],
[427,383,253,380,377,0,296,338,210],
[425,382,294,424,337,255,0,380,209],
[384,381,209,383,252,213,171,0,212],
[427,466,209,384,423,341,342,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,249,274,254,246,268,277,229],
[314,0,261,292,285,284,274,281,250],
[302,290,0,293,276,267,302,263,276],
[277,259,258,0,254,291,255,281,246],
[297,266,275,297,0,286,286,283,274],
[305,267,284,260,265,0,287,277,263],
[283,277,249,296,265,264,0,281,243],
[274,270,288,270,268,274,270,0,260],
[322,301,275,305,277,288,308,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,298,266,274,269,268,271],
[270,0,279,311,298,269,270,279,267],
[277,272,0,265,270,275,278,294,288],
[253,240,286,0,267,263,243,258,261],
[285,253,281,284,0,273,297,281,264],
[277,282,276,288,278,0,274,273,282],
[282,281,273,308,254,277,0,285,279],
[283,272,257,293,270,278,266,0,262],
[280,284,263,290,287,269,272,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,293,263,315,319,275,277,282],
[268,0,272,291,281,301,286,292,269],
[258,279,0,258,306,325,280,293,277],
[288,260,293,0,275,316,285,288,305],
[236,270,245,276,0,295,269,275,272],
[232,250,226,235,256,0,248,236,236],
[276,265,271,266,282,303,0,290,273],
[274,259,258,263,276,315,261,0,274],
[269,282,274,246,279,315,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,293,269,281,288,282,290,290],
[273,0,290,275,253,286,268,280,299],
[258,261,0,259,256,272,266,257,272],
[282,276,292,0,261,289,267,285,297],
[270,298,295,290,0,290,271,271,292],
[263,265,279,262,261,0,270,260,263],
[269,283,285,284,280,281,0,285,281],
[261,271,294,266,280,291,266,0,283],
[261,252,279,254,259,288,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,260,274,259,219,263,257,252],
[287,0,284,288,284,259,288,266,277],
[291,267,0,303,277,282,278,272,258],
[277,263,248,0,289,241,267,238,237],
[292,267,274,262,0,259,279,280,248],
[332,292,269,310,292,0,302,268,297],
[288,263,273,284,272,249,0,237,264],
[294,285,279,313,271,283,314,0,281],
[299,274,293,314,303,254,287,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,288,299,291,269,300,285,282],
[245,0,238,257,248,243,264,261,257],
[263,313,0,286,274,285,281,291,301],
[252,294,265,0,269,274,285,270,250],
[260,303,277,282,0,268,294,300,276],
[282,308,266,277,283,0,288,275,272],
[251,287,270,266,257,263,0,283,264],
[266,290,260,281,251,276,268,0,276],
[269,294,250,301,275,279,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,298,288,234,315,260,252,286],
[291,0,298,274,252,317,196,238,261],
[253,253,0,293,267,303,220,207,231],
[263,277,258,0,226,313,235,235,256],
[317,299,284,325,0,306,284,265,294],
[236,234,248,238,245,0,248,210,222],
[291,355,331,316,267,303,0,281,295],
[299,313,344,316,286,341,270,0,305],
[265,290,320,295,257,329,256,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,291,278,295,275,282,270,286],
[261,0,263,259,271,249,268,238,267],
[260,288,0,278,280,279,285,270,279],
[273,292,273,0,275,281,306,283,295],
[256,280,271,276,0,268,270,257,276],
[276,302,272,270,283,0,275,270,281],
[269,283,266,245,281,276,0,265,285],
[281,313,281,268,294,281,286,0,281],
[265,284,272,256,275,270,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,262,298,311,282,303,258,284],
[237,0,308,237,242,274,254,261,251],
[289,243,0,260,248,240,285,252,280],
[253,314,291,0,254,258,260,268,274],
[240,309,303,297,0,256,322,293,267],
[269,277,311,293,295,0,292,271,276],
[248,297,266,291,229,259,0,250,240],
[293,290,299,283,258,280,301,0,273],
[267,300,271,277,284,275,311,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,77,77,77,156,236,79,314],
[239,0,77,237,80,79,159,239,316],
[474,474,0,160,239,239,237,318,317],
[474,314,391,0,315,157,316,314,472],
[474,471,312,236,0,234,393,315,472],
[395,472,312,394,317,0,237,474,473],
[315,392,314,235,158,314,0,237,394],
[472,312,233,237,236,77,314,0,315],
[237,235,234,79,79,78,157,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,273,287,281,276,273,290,283],
[291,0,265,301,283,273,290,306,305],
[278,286,0,300,278,271,290,291,289],
[264,250,251,0,249,248,269,284,263],
[270,268,273,302,0,259,286,297,294],
[275,278,280,303,292,0,281,295,287],
[278,261,261,282,265,270,0,271,275],
[261,245,260,267,254,256,280,0,260],
[268,246,262,288,257,264,276,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,256,258,270,262,273,275,263],
[274,0,286,267,274,271,279,293,274],
[295,265,0,271,292,284,272,295,276],
[293,284,280,0,278,286,279,289,273],
[281,277,259,273,0,279,255,282,283],
[289,280,267,265,272,0,286,295,290],
[278,272,279,272,296,265,0,302,273],
[276,258,256,262,269,256,249,0,255],
[288,277,275,278,268,261,278,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,285,315,298,289,296,269,289],
[260,0,282,313,302,285,288,294,286],
[266,269,0,318,285,283,293,285,272],
[236,238,233,0,246,287,263,257,254],
[253,249,266,305,0,268,269,262,250],
[262,266,268,264,283,0,281,257,255],
[255,263,258,288,282,270,0,264,273],
[282,257,266,294,289,294,287,0,276],
[262,265,279,297,301,296,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,299,279,276,299,271,273],
[269,0,271,276,255,266,275,281,268],
[263,280,0,272,260,273,291,272,294],
[252,275,279,0,268,269,297,283,279],
[272,296,291,283,0,276,290,279,277],
[275,285,278,282,275,0,286,279,293],
[252,276,260,254,261,265,0,251,263],
[280,270,279,268,272,272,300,0,276],
[278,283,257,272,274,258,288,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,293,289,258,273,277,282,271],
[281,0,315,298,282,301,292,270,289],
[258,236,0,299,256,292,258,256,259],
[262,253,252,0,255,247,247,254,276],
[293,269,295,296,0,301,263,275,279],
[278,250,259,304,250,0,299,272,284],
[274,259,293,304,288,252,0,255,266],
[269,281,295,297,276,279,296,0,296],
[280,262,292,275,272,267,285,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,286,250,267,285,260,242],
[273,0,275,273,273,256,287,277,265],
[279,276,0,284,261,262,297,271,243],
[265,278,267,0,264,245,285,264,263],
[301,278,290,287,0,267,313,284,281],
[284,295,289,306,284,0,292,267,286],
[266,264,254,266,238,259,0,266,234],
[291,274,280,287,267,284,285,0,272],
[309,286,308,288,270,265,317,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,291,291,272,278,286,288,260],
[246,0,268,265,256,271,262,273,261],
[260,283,0,279,271,277,289,281,269],
[260,286,272,0,260,279,277,287,261],
[279,295,280,291,0,286,296,291,270],
[273,280,274,272,265,0,272,291,284],
[265,289,262,274,255,279,0,278,284],
[263,278,270,264,260,260,273,0,278],
[291,290,282,290,281,267,267,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,271,277,302,288,290,289,271],
[263,0,250,281,278,280,292,265,283],
[280,301,0,263,307,285,286,297,285],
[274,270,288,0,300,287,288,296,265],
[249,273,244,251,0,271,267,272,256],
[263,271,266,264,280,0,283,290,269],
[261,259,265,263,284,268,0,273,261],
[262,286,254,255,279,261,278,0,260],
[280,268,266,286,295,282,290,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,258,265,284,297,311,286,292],
[272,0,234,253,275,285,290,297,292],
[293,317,0,302,271,329,307,300,316],
[286,298,249,0,292,286,307,302,309],
[267,276,280,259,0,285,286,290,292],
[254,266,222,265,266,0,273,299,325],
[240,261,244,244,265,278,0,273,262],
[265,254,251,249,261,252,278,0,270],
[259,259,235,242,259,226,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,290,310,289,305,275,302,278],
[251,0,260,281,286,307,270,278,234],
[261,291,0,266,291,307,280,291,253],
[241,270,285,0,272,296,258,272,270],
[262,265,260,279,0,301,264,268,256],
[246,244,244,255,250,0,264,248,239],
[276,281,271,293,287,287,0,294,267],
[249,273,260,279,283,303,257,0,254],
[273,317,298,281,295,312,284,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,292,268,274,277,287,285,258],
[240,0,271,260,230,227,245,258,245],
[259,280,0,280,264,273,268,292,261],
[283,291,271,0,256,260,278,267,259],
[277,321,287,295,0,287,288,287,270],
[274,324,278,291,264,0,268,307,279],
[264,306,283,273,263,283,0,286,266],
[266,293,259,284,264,244,265,0,253],
[293,306,290,292,281,272,285,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,252,271,236,260,249,263,281],
[298,0,308,285,262,291,269,301,276],
[299,243,0,263,263,259,250,268,285],
[280,266,288,0,261,274,247,283,269],
[315,289,288,290,0,265,262,283,279],
[291,260,292,277,286,0,280,272,292],
[302,282,301,304,289,271,0,291,297],
[288,250,283,268,268,279,260,0,277],
[270,275,266,282,272,259,254,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,278,259,315,276,294,318,301],
[263,0,262,252,294,264,277,278,282],
[273,289,0,256,302,275,267,281,280],
[292,299,295,0,310,293,324,275,297],
[236,257,249,241,0,253,270,274,262],
[275,287,276,258,298,0,286,290,282],
[257,274,284,227,281,265,0,288,260],
[233,273,270,276,277,261,263,0,259],
[250,269,271,254,289,269,291,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,287,279,304,247,284,297,319],
[259,0,278,295,293,254,266,299,309],
[264,273,0,273,281,263,256,299,321],
[272,256,278,0,291,230,263,286,325],
[247,258,270,260,0,255,252,279,300],
[304,297,288,321,296,0,266,286,307],
[267,285,295,288,299,285,0,292,294],
[254,252,252,265,272,265,259,0,281],
[232,242,230,226,251,244,257,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,274,256,280,251,265,263,289],
[301,0,290,290,300,274,280,294,293],
[277,261,0,283,286,280,271,286,286],
[295,261,268,0,286,262,275,272,265],
[271,251,265,265,0,264,258,261,265],
[300,277,271,289,287,0,279,274,291],
[286,271,280,276,293,272,0,280,278],
[288,257,265,279,290,277,271,0,285],
[262,258,265,286,286,260,273,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,276,278,276,275,265,252,277],
[279,0,285,266,264,250,271,277,271],
[275,266,0,293,268,264,272,284,291],
[273,285,258,0,253,244,273,281,276],
[275,287,283,298,0,279,274,279,285],
[276,301,287,307,272,0,292,297,301],
[286,280,279,278,277,259,0,277,286],
[299,274,267,270,272,254,274,0,283],
[274,280,260,275,266,250,265,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,304,264,253,279,255,260,258],
[291,0,287,300,290,283,255,244,224],
[247,264,0,249,261,265,264,256,219],
[287,251,302,0,271,269,257,295,251],
[298,261,290,280,0,257,282,245,249],
[272,268,286,282,294,0,255,244,238],
[296,296,287,294,269,296,0,272,258],
[291,307,295,256,306,307,279,0,277],
[293,327,332,300,302,313,293,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,270,271,274,278,254,266],
[276,0,284,283,310,282,300,275,270],
[277,267,0,293,285,269,304,270,275],
[281,268,258,0,284,272,303,255,249],
[280,241,266,267,0,267,284,255,230],
[277,269,282,279,284,0,310,261,277],
[273,251,247,248,267,241,0,250,234],
[297,276,281,296,296,290,301,0,266],
[285,281,276,302,321,274,317,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,307,285,257,285,273,290,283],
[285,0,286,281,266,291,302,275,268],
[244,265,0,272,291,265,253,252,272],
[266,270,279,0,264,266,314,253,283],
[294,285,260,287,0,273,298,278,270],
[266,260,286,285,278,0,304,259,258],
[278,249,298,237,253,247,0,267,250],
[261,276,299,298,273,292,284,0,291],
[268,283,279,268,281,293,301,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,268,278,261,275,249,275,297],
[271,0,257,240,280,263,253,260,290],
[283,294,0,285,260,277,276,271,279],
[273,311,266,0,274,273,263,268,290],
[290,271,291,277,0,290,269,286,332],
[276,288,274,278,261,0,263,294,303],
[302,298,275,288,282,288,0,261,288],
[276,291,280,283,265,257,290,0,314],
[254,261,272,261,219,248,263,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,258,344,292,301,322,316,324],
[253,0,302,311,321,299,307,273,247],
[293,249,0,320,283,285,337,262,301],
[207,240,231,0,238,238,315,256,259],
[259,230,268,313,0,261,344,287,270],
[250,252,266,313,290,0,311,273,303],
[229,244,214,236,207,240,0,247,227],
[235,278,289,295,264,278,304,0,284],
[227,304,250,292,281,248,324,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,272,287,268,271,275,274,277],
[286,0,279,293,290,267,276,262,285],
[279,272,0,282,275,276,280,285,282],
[264,258,269,0,270,257,267,262,271],
[283,261,276,281,0,267,253,254,277],
[280,284,275,294,284,0,269,274,297],
[276,275,271,284,298,282,0,282,289],
[277,289,266,289,297,277,269,0,298],
[274,266,269,280,274,254,262,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,263,257,271,274,275,273,285],
[280,0,248,283,268,296,285,267,278],
[288,303,0,265,274,285,270,273,262],
[294,268,286,0,273,293,276,294,299],
[280,283,277,278,0,277,269,265,301],
[277,255,266,258,274,0,275,261,268],
[276,266,281,275,282,276,0,289,270],
[278,284,278,257,286,290,262,0,271],
[266,273,289,252,250,283,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,229,231,288,281,286,267,288],
[235,0,227,238,282,236,234,237,264],
[322,324,0,260,286,295,295,288,295],
[320,313,291,0,288,308,273,302,295],
[263,269,265,263,0,272,228,256,276],
[270,315,256,243,279,0,253,270,272],
[265,317,256,278,323,298,0,285,317],
[284,314,263,249,295,281,266,0,291],
[263,287,256,256,275,279,234,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,295,314,264,303,299,290,303],
[250,0,250,276,268,276,268,259,274],
[256,301,0,303,284,288,309,271,277],
[237,275,248,0,277,279,288,254,273],
[287,283,267,274,0,282,282,296,286],
[248,275,263,272,269,0,267,264,284],
[252,283,242,263,269,284,0,258,285],
[261,292,280,297,255,287,293,0,289],
[248,277,274,278,265,267,266,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,247,301,266,263,264,280,258],
[277,0,254,269,271,271,277,278,260],
[304,297,0,298,279,296,288,293,272],
[250,282,253,0,274,265,283,295,259],
[285,280,272,277,0,246,254,287,262],
[288,280,255,286,305,0,277,271,266],
[287,274,263,268,297,274,0,299,284],
[271,273,258,256,264,280,252,0,260],
[293,291,279,292,289,285,267,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,289,277,281,271,279,283,281],
[292,0,291,302,288,296,285,296,271],
[262,260,0,267,268,266,269,277,272],
[274,249,284,0,277,265,258,260,268],
[270,263,283,274,0,272,258,261,256],
[280,255,285,286,279,0,270,273,268],
[272,266,282,293,293,281,0,281,283],
[268,255,274,291,290,278,270,0,282],
[270,280,279,283,295,283,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,254,256,270,252,257,248,234],
[261,0,269,305,249,276,244,247,261],
[297,282,0,302,259,300,269,265,266],
[295,246,249,0,277,240,268,236,219],
[281,302,292,274,0,277,257,269,229],
[299,275,251,311,274,0,227,257,262],
[294,307,282,283,294,324,0,275,278],
[303,304,286,315,282,294,276,0,247],
[317,290,285,332,322,289,273,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,285,270,289,291,309,287,290],
[266,0,305,256,265,274,300,282,271],
[266,246,0,272,253,276,274,257,264],
[281,295,279,0,264,265,282,278,279],
[262,286,298,287,0,275,298,261,288],
[260,277,275,286,276,0,285,276,285],
[242,251,277,269,253,266,0,261,266],
[264,269,294,273,290,275,290,0,300],
[261,280,287,272,263,266,285,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,263,262,256,290,281,258,266],
[284,0,277,252,265,289,285,275,283],
[288,274,0,281,277,291,283,271,275],
[289,299,270,0,259,286,291,278,285],
[295,286,274,292,0,293,290,284,288],
[261,262,260,265,258,0,293,257,258],
[270,266,268,260,261,258,0,254,277],
[293,276,280,273,267,294,297,0,287],
[285,268,276,266,263,293,274,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,255,240,252,287,282,271,279],
[289,0,261,252,264,266,285,246,259],
[296,290,0,291,278,288,274,281,292],
[311,299,260,0,280,295,307,280,295],
[299,287,273,271,0,290,281,281,304],
[264,285,263,256,261,0,275,258,249],
[269,266,277,244,270,276,0,269,254],
[280,305,270,271,270,293,282,0,279],
[272,292,259,256,247,302,297,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,256,293,289,312,271,263,262],
[271,0,258,289,287,286,285,274,278],
[295,293,0,287,285,319,264,289,288],
[258,262,264,0,266,297,271,270,251],
[262,264,266,285,0,302,277,269,286],
[239,265,232,254,249,0,262,252,246],
[280,266,287,280,274,289,0,277,275],
[288,277,262,281,282,299,274,0,285],
[289,273,263,300,265,305,276,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,275,270,257,259,269,249],
[284,0,265,285,301,271,295,265,279],
[285,286,0,268,296,293,284,273,275],
[276,266,283,0,283,286,289,276,269],
[281,250,255,268,0,245,260,259,267],
[294,280,258,265,306,0,292,279,268],
[292,256,267,262,291,259,0,285,255],
[282,286,278,275,292,272,266,0,267],
[302,272,276,282,284,283,296,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,265,255,256,277,251,268,279],
[263,0,247,277,260,263,254,247,282],
[286,304,0,283,274,295,274,281,279],
[296,274,268,0,277,288,295,290,293],
[295,291,277,274,0,267,259,280,293],
[274,288,256,263,284,0,250,256,281],
[300,297,277,256,292,301,0,278,302],
[283,304,270,261,271,295,273,0,281],
[272,269,272,258,258,270,249,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,277,226,263,246,265,259],
[282,0,267,293,267,274,269,280,263],
[283,284,0,287,252,266,269,271,272],
[274,258,264,0,244,271,269,254,254],
[325,284,299,307,0,291,293,270,311],
[288,277,285,280,260,0,265,269,284],
[305,282,282,282,258,286,0,263,279],
[286,271,280,297,281,282,288,0,277],
[292,288,279,297,240,267,272,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,277,289,281,276,278,264,291],
[267,0,265,269,281,252,277,271,282],
[274,286,0,284,296,243,300,276,276],
[262,282,267,0,272,256,284,260,285],
[270,270,255,279,0,255,273,267,291],
[275,299,308,295,296,0,299,281,295],
[273,274,251,267,278,252,0,269,275],
[287,280,275,291,284,270,282,0,283],
[260,269,275,266,260,256,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,249,255,259,275,290,252,264],
[289,0,303,265,264,280,316,292,274],
[302,248,0,261,284,289,283,250,301],
[296,286,290,0,278,305,304,269,272],
[292,287,267,273,0,290,309,239,284],
[276,271,262,246,261,0,298,268,280],
[261,235,268,247,242,253,0,237,261],
[299,259,301,282,312,283,314,0,324],
[287,277,250,279,267,271,290,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,281,265,255,285,275,297,275],
[275,0,266,259,274,276,253,281,252],
[270,285,0,281,275,281,271,295,274],
[286,292,270,0,273,284,276,301,280],
[296,277,276,278,0,282,254,269,277],
[266,275,270,267,269,0,256,291,266],
[276,298,280,275,297,295,0,299,296],
[254,270,256,250,282,260,252,0,230],
[276,299,277,271,274,285,255,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,264,299,283,297,287,279,289],
[263,0,260,294,264,277,267,270,252],
[287,291,0,285,267,285,277,276,273],
[252,257,266,0,259,271,259,260,254],
[268,287,284,292,0,280,281,262,271],
[254,274,266,280,271,0,274,271,266],
[264,284,274,292,270,277,0,271,260],
[272,281,275,291,289,280,280,0,273],
[262,299,278,297,280,285,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,257,277,237,245,276,238,263],
[303,0,274,288,253,257,272,283,274],
[294,277,0,282,251,272,270,290,278],
[274,263,269,0,236,231,250,268,270],
[314,298,300,315,0,276,273,287,296],
[306,294,279,320,275,0,289,280,300],
[275,279,281,301,278,262,0,277,277],
[313,268,261,283,264,271,274,0,273],
[288,277,273,281,255,251,274,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,259,258,261,271,270,277,277],
[284,0,259,278,269,290,274,282,275],
[292,292,0,284,272,284,283,291,286],
[293,273,267,0,288,277,277,266,294],
[290,282,279,263,0,290,280,272,287],
[280,261,267,274,261,0,276,275,281],
[281,277,268,274,271,275,0,269,278],
[274,269,260,285,279,276,282,0,285],
[274,276,265,257,264,270,273,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,294,287,321,279,307,332,392],
[286,0,275,275,299,315,341,306,380],
[257,276,0,260,254,351,347,291,326],
[264,276,291,0,255,346,301,288,331],
[230,252,297,296,0,277,262,308,279],
[272,236,200,205,274,0,268,261,298],
[244,210,204,250,289,283,0,244,292],
[219,245,260,263,243,290,307,0,321],
[159,171,225,220,272,253,259,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,263,283,267,256,288,243,273],
[277,0,291,287,264,268,283,284,278],
[288,260,0,303,277,244,300,260,273],
[268,264,248,0,255,234,278,232,243],
[284,287,274,296,0,236,277,235,253],
[295,283,307,317,315,0,320,275,291],
[263,268,251,273,274,231,0,243,254],
[308,267,291,319,316,276,308,0,301],
[278,273,278,308,298,260,297,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,285,279,277,260,256,265],
[272,0,277,302,286,289,258,278,294],
[274,274,0,311,284,309,271,288,268],
[266,249,240,0,275,277,239,257,231],
[272,265,267,276,0,286,301,296,247],
[274,262,242,274,265,0,276,276,283],
[291,293,280,312,250,275,0,285,272],
[295,273,263,294,255,275,266,0,252],
[286,257,283,320,304,268,279,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,293,275,296,288,288,283,278],
[281,0,285,279,289,281,272,280,285],
[258,266,0,274,277,282,262,250,266],
[276,272,277,0,280,306,301,273,281],
[255,262,274,271,0,274,286,259,288],
[263,270,269,245,277,0,273,271,278],
[263,279,289,250,265,278,0,275,261],
[268,271,301,278,292,280,276,0,268],
[273,266,285,270,263,273,290,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,256,261,274,286,277,302,274],
[277,0,265,261,259,276,260,305,277],
[295,286,0,279,266,280,280,302,292],
[290,290,272,0,264,281,262,292,296],
[277,292,285,287,0,301,268,300,307],
[265,275,271,270,250,0,265,294,297],
[274,291,271,289,283,286,0,297,293],
[249,246,249,259,251,257,254,0,271],
[277,274,259,255,244,254,258,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,296,297,283,270,284,278,265],
[271,0,299,289,288,281,284,266,264],
[255,252,0,258,284,240,289,252,263],
[254,262,293,0,284,243,250,272,264],
[268,263,267,267,0,265,294,271,265],
[281,270,311,308,286,0,290,277,276],
[267,267,262,301,257,261,0,272,252],
[273,285,299,279,280,274,279,0,275],
[286,287,288,287,286,275,299,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,277,269,296,265,289,291,237],
[283,0,300,231,247,275,259,292,252],
[274,251,0,287,282,273,307,276,267],
[282,320,264,0,261,273,292,273,284],
[255,304,269,290,0,257,296,300,269],
[286,276,278,278,294,0,292,271,256],
[262,292,244,259,255,259,0,254,239],
[260,259,275,278,251,280,297,0,269],
[314,299,284,267,282,295,312,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,267,282,271,277,287,303,298],
[287,0,270,280,284,279,285,278,292],
[284,281,0,291,276,288,290,292,274],
[269,271,260,0,265,268,277,285,271],
[280,267,275,286,0,271,288,292,283],
[274,272,263,283,280,0,283,294,293],
[264,266,261,274,263,268,0,286,281],
[248,273,259,266,259,257,265,0,263],
[253,259,277,280,268,258,270,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,307,293,287,284,289,289,285],
[296,0,311,270,275,298,280,325,288],
[244,240,0,260,263,281,264,279,267],
[258,281,291,0,265,286,276,297,277],
[264,276,288,286,0,298,269,282,288],
[267,253,270,265,253,0,248,289,251],
[262,271,287,275,282,303,0,296,277],
[262,226,272,254,269,262,255,0,267],
[266,263,284,274,263,300,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,281,271,250,299,267,270,299],
[275,0,289,263,294,336,249,312,304],
[270,262,0,281,288,308,273,305,309],
[280,288,270,0,318,330,279,299,312],
[301,257,263,233,0,287,247,280,306],
[252,215,243,221,264,0,222,267,259],
[284,302,278,272,304,329,0,316,317],
[281,239,246,252,271,284,235,0,293],
[252,247,242,239,245,292,234,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,285,286,291,290,302,287,253],
[257,0,275,269,284,252,261,273,260],
[266,276,0,268,280,280,261,295,281],
[265,282,283,0,289,306,263,298,272],
[260,267,271,262,0,288,262,293,279],
[261,299,271,245,263,0,261,270,254],
[249,290,290,288,289,290,0,300,277],
[264,278,256,253,258,281,251,0,248],
[298,291,270,279,272,297,274,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,274,299,280,281,258,313,271],
[232,0,241,255,252,237,274,308,261],
[277,310,0,314,304,307,262,301,269],
[252,296,237,0,306,289,285,306,250],
[271,299,247,245,0,284,239,297,284],
[270,314,244,262,267,0,258,303,263],
[293,277,289,266,312,293,0,297,268],
[238,243,250,245,254,248,254,0,227],
[280,290,282,301,267,288,283,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,317,282,298,301,308,273,327],
[227,0,277,249,256,299,262,284,262],
[234,274,0,265,229,282,261,262,250],
[269,302,286,0,291,314,286,263,284],
[253,295,322,260,0,329,283,260,272],
[250,252,269,237,222,0,255,226,241],
[243,289,290,265,268,296,0,241,255],
[278,267,289,288,291,325,310,0,280],
[224,289,301,267,279,310,296,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,339,299,305,223,297,224,273],
[353,0,329,323,338,271,301,255,322],
[212,222,0,271,227,188,248,194,230],
[252,228,280,0,271,270,283,244,265],
[246,213,324,280,0,233,279,276,281],
[328,280,363,281,318,0,348,265,302],
[254,250,303,268,272,203,0,245,247],
[327,296,357,307,275,286,306,0,268],
[278,229,321,286,270,249,304,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,269,247,272,322,286,255,303],
[234,0,271,214,234,295,241,266,250],
[282,280,0,262,255,346,303,276,256],
[304,337,289,0,316,325,307,276,261],
[279,317,296,235,0,310,279,274,256],
[229,256,205,226,241,0,256,223,214],
[265,310,248,244,272,295,0,246,259],
[296,285,275,275,277,328,305,0,271],
[248,301,295,290,295,337,292,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,266,277,268,245,245,260,244],
[283,0,276,284,270,261,287,298,260],
[285,275,0,311,296,283,279,297,274],
[274,267,240,0,269,253,269,286,256],
[283,281,255,282,0,262,276,280,260],
[306,290,268,298,289,0,288,298,279],
[306,264,272,282,275,263,0,293,268],
[291,253,254,265,271,253,258,0,273],
[307,291,277,295,291,272,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,252,340,266,272,282,299,307],
[248,0,259,316,252,249,287,257,280],
[299,292,0,318,282,272,298,310,303],
[211,235,233,0,244,239,231,265,242],
[285,299,269,307,0,276,272,303,287],
[279,302,279,312,275,0,284,316,291],
[269,264,253,320,279,267,0,296,289],
[252,294,241,286,248,235,255,0,257],
[244,271,248,309,264,260,262,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,265,289,268,255,273,292,279],
[280,0,275,260,297,274,276,267,267],
[286,276,0,273,299,266,278,296,281],
[262,291,278,0,282,291,269,284,247],
[283,254,252,269,0,259,269,277,266],
[296,277,285,260,292,0,269,299,262],
[278,275,273,282,282,282,0,271,292],
[259,284,255,267,274,252,280,0,258],
[272,284,270,304,285,289,259,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,290,287,267,287,279,270,276],
[275,0,282,281,281,295,298,277,277],
[261,269,0,273,278,300,267,255,255],
[264,270,278,0,275,296,267,247,273],
[284,270,273,276,0,295,289,270,266],
[264,256,251,255,256,0,266,253,244],
[272,253,284,284,262,285,0,277,280],
[281,274,296,304,281,298,274,0,287],
[275,274,296,278,285,307,271,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,289,251,306,291,277,234,235],
[229,0,287,226,263,287,251,251,262],
[262,264,0,239,280,279,253,225,267],
[300,325,312,0,312,289,291,267,312],
[245,288,271,239,0,259,251,200,263],
[260,264,272,262,292,0,277,234,273],
[274,300,298,260,300,274,0,254,269],
[317,300,326,284,351,317,297,0,271],
[316,289,284,239,288,278,282,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,334,282,285,307,279,256,271],
[293,0,332,247,308,302,303,265,286],
[217,219,0,220,235,248,249,194,237],
[269,304,331,0,308,310,274,276,307],
[266,243,316,243,0,274,251,217,278],
[244,249,303,241,277,0,277,245,262],
[272,248,302,277,300,274,0,255,258],
[295,286,357,275,334,306,296,0,299],
[280,265,314,244,273,289,293,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,261,287,260,266,266,263,244],
[323,0,286,309,271,274,287,268,289],
[290,265,0,304,279,277,297,294,281],
[264,242,247,0,229,243,271,266,247],
[291,280,272,322,0,291,296,273,293],
[285,277,274,308,260,0,295,282,271],
[285,264,254,280,255,256,0,271,267],
[288,283,257,285,278,269,280,0,283],
[307,262,270,304,258,280,284,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,296,349,236,301,199,303,267],
[231,0,230,212,215,234,145,215,264],
[255,321,0,336,241,238,252,275,267],
[202,339,215,0,222,219,214,251,232],
[315,336,310,329,0,285,280,268,314],
[250,317,313,332,266,0,181,234,282],
[352,406,299,337,271,370,0,404,351],
[248,336,276,300,283,317,147,0,279],
[284,287,284,319,237,269,200,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,277,264,249,316,227,255,315],
[296,0,275,247,271,262,263,278,292],
[274,276,0,262,278,266,258,249,270],
[287,304,289,0,289,285,268,270,316],
[302,280,273,262,0,310,268,240,268],
[235,289,285,266,241,0,243,263,274],
[324,288,293,283,283,308,0,269,313],
[296,273,302,281,311,288,282,0,296],
[236,259,281,235,283,277,238,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,268,256,288,269,270,249,267],
[288,0,306,285,326,291,305,271,271],
[283,245,0,286,295,284,297,268,270],
[295,266,265,0,303,266,254,263,265],
[263,225,256,248,0,246,244,249,228],
[282,260,267,285,305,0,250,257,287],
[281,246,254,297,307,301,0,276,275],
[302,280,283,288,302,294,275,0,292],
[284,280,281,286,323,264,276,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,311,295,298,270,291,270,307],
[257,0,274,276,281,273,260,292,316],
[240,277,0,285,309,295,273,269,315],
[256,275,266,0,304,259,244,275,304],
[253,270,242,247,0,258,293,247,294],
[281,278,256,292,293,0,259,265,284],
[260,291,278,307,258,292,0,255,295],
[281,259,282,276,304,286,296,0,318],
[244,235,236,247,257,267,256,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,283,294,261,271,288,258,258],
[290,0,305,278,301,274,274,263,288],
[268,246,0,256,261,269,268,231,263],
[257,273,295,0,251,269,283,271,264],
[290,250,290,300,0,276,281,281,276],
[280,277,282,282,275,0,306,266,284],
[263,277,283,268,270,245,0,246,260],
[293,288,320,280,270,285,305,0,285],
[293,263,288,287,275,267,291,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,288,275,267,277,300,291,291],
[265,0,302,274,266,276,299,294,284],
[263,249,0,268,252,256,289,277,271],
[276,277,283,0,285,267,301,275,291],
[284,285,299,266,0,278,305,314,304],
[274,275,295,284,273,0,309,305,305],
[251,252,262,250,246,242,0,253,264],
[260,257,274,276,237,246,298,0,265],
[260,267,280,260,247,246,287,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,254,260,282,263,254,281],
[282,0,271,269,265,281,291,262,283],
[293,280,0,288,269,267,291,282,286],
[297,282,263,0,278,281,288,261,285],
[291,286,282,273,0,281,287,260,274],
[269,270,284,270,270,0,292,269,271],
[288,260,260,263,264,259,0,252,279],
[297,289,269,290,291,282,299,0,301],
[270,268,265,266,277,280,272,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,271,264,260,276,282,302,313],
[270,0,275,286,285,297,290,289,307],
[280,276,0,274,281,274,265,245,306],
[287,265,277,0,292,293,311,282,292],
[291,266,270,259,0,249,286,256,290],
[275,254,277,258,302,0,299,265,298],
[269,261,286,240,265,252,0,309,274],
[249,262,306,269,295,286,242,0,299],
[238,244,245,259,261,253,277,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,304,326,253,246,273,282,264],
[231,0,244,314,223,199,216,232,251],
[247,307,0,273,250,243,258,273,275],
[225,237,278,0,250,259,239,237,289],
[298,328,301,301,0,287,271,256,276],
[305,352,308,292,264,0,272,294,329],
[278,335,293,312,280,279,0,285,260],
[269,319,278,314,295,257,266,0,282],
[287,300,276,262,275,222,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,264,279,270,283,257,277,282],
[284,0,265,291,280,289,269,279,292],
[287,286,0,280,274,293,297,292,298],
[272,260,271,0,254,289,291,265,286],
[281,271,277,297,0,294,281,281,293],
[268,262,258,262,257,0,275,266,282],
[294,282,254,260,270,276,0,284,288],
[274,272,259,286,270,285,267,0,281],
[269,259,253,265,258,269,263,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,259,319,311,289,267,308,305],
[261,0,264,305,293,272,276,277,284],
[292,287,0,308,298,288,275,281,290],
[232,246,243,0,247,250,247,252,273],
[240,258,253,304,0,266,275,277,285],
[262,279,263,301,285,0,254,307,304],
[284,275,276,304,276,297,0,298,308],
[243,274,270,299,274,244,253,0,270],
[246,267,261,278,266,247,243,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,357,198,198,159,272,198,313,238],
[194,0,116,117,74,154,77,274,117],
[353,435,0,277,235,274,275,355,316],
[353,434,274,0,274,313,353,276,313],
[392,477,316,277,0,353,197,394,354],
[279,397,277,238,198,0,119,276,199],
[353,474,276,198,354,432,0,353,314],
[238,277,196,275,157,275,198,0,159],
[313,434,235,238,197,352,237,392,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,299,326,295,296,257,360,355],
[263,0,284,328,280,271,288,357,371],
[252,267,0,296,278,247,269,305,269],
[225,223,255,0,272,286,252,308,285],
[256,271,273,279,0,313,234,307,360],
[255,280,304,265,238,0,305,271,276],
[294,263,282,299,317,246,0,319,373],
[191,194,246,243,244,280,232,0,325],
[196,180,282,266,191,275,178,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,281,273,287,269,267,272],
[273,0,255,287,259,292,260,258,269],
[280,296,0,291,275,302,274,281,286],
[270,264,260,0,252,286,229,250,260],
[278,292,276,299,0,305,262,270,290],
[264,259,249,265,246,0,255,257,274],
[282,291,277,322,289,296,0,271,295],
[284,293,270,301,281,294,280,0,290],
[279,282,265,291,261,277,256,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,296,271,285,280,281,271,305],
[264,0,275,292,266,264,279,286,304],
[255,276,0,275,259,279,270,286,301],
[280,259,276,0,258,289,286,283,317],
[266,285,292,293,0,269,280,297,300],
[271,287,272,262,282,0,286,279,309],
[270,272,281,265,271,265,0,266,290],
[280,265,265,268,254,272,285,0,304],
[246,247,250,234,251,242,261,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,263,273,271,268,286,272,274],
[272,0,262,274,273,272,259,275,264],
[288,289,0,285,268,276,268,281,276],
[278,277,266,0,277,264,282,281,268],
[280,278,283,274,0,270,278,277,277],
[283,279,275,287,281,0,273,272,272],
[265,292,283,269,273,278,0,270,287],
[279,276,270,270,274,279,281,0,275],
[277,287,275,283,274,279,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,274,297,305,292,291,284,300],
[254,0,287,252,267,276,255,272,270],
[277,264,0,279,285,260,276,287,268],
[254,299,272,0,288,280,282,286,279],
[246,284,266,263,0,279,238,250,277],
[259,275,291,271,272,0,268,276,284],
[260,296,275,269,313,283,0,260,263],
[267,279,264,265,301,275,291,0,260],
[251,281,283,272,274,267,288,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,272,300,291,284,289,302,282],
[271,0,274,269,258,290,289,283,278],
[279,277,0,301,278,295,279,293,268],
[251,282,250,0,268,250,278,276,262],
[260,293,273,283,0,283,276,289,282],
[267,261,256,301,268,0,261,281,266],
[262,262,272,273,275,290,0,289,269],
[249,268,258,275,262,270,262,0,245],
[269,273,283,289,269,285,282,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,280,285,279,284,279,285,275],
[291,0,295,262,265,288,277,295,272],
[271,256,0,260,262,284,270,286,254],
[266,289,291,0,276,284,294,299,273],
[272,286,289,275,0,313,287,295,290],
[267,263,267,267,238,0,260,273,255],
[272,274,281,257,264,291,0,288,269],
[266,256,265,252,256,278,263,0,254],
[276,279,297,278,261,296,282,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,255,285,302,267,264,288,266],
[265,0,245,258,244,268,247,295,262],
[296,306,0,307,286,275,257,323,286],
[266,293,244,0,264,280,245,293,284],
[249,307,265,287,0,285,277,308,262],
[284,283,276,271,266,0,263,309,287],
[287,304,294,306,274,288,0,315,303],
[263,256,228,258,243,242,236,0,251],
[285,289,265,267,289,264,248,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,330,294,278,268,283,303,268],
[318,0,285,271,249,303,318,290,286],
[221,266,0,236,267,261,256,246,261],
[257,280,315,0,285,278,265,289,306],
[273,302,284,266,0,265,324,286,289],
[283,248,290,273,286,0,263,277,269],
[268,233,295,286,227,288,0,292,293],
[248,261,305,262,265,274,259,0,277],
[283,265,290,245,262,282,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,275,366,186,183,366,273,93],
[365,0,182,365,368,182,458,365,183],
[276,369,0,273,279,90,276,183,186],
[185,186,278,0,278,278,279,368,186],
[365,183,272,273,0,182,366,365,183],
[368,369,461,273,369,0,366,459,276],
[185,93,275,272,185,185,0,365,186],
[278,186,368,183,186,92,186,0,93],
[458,368,365,365,368,275,365,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,275,263,284,277,295,276,305],
[221,0,266,220,276,260,285,211,239],
[276,285,0,233,306,289,267,256,232],
[288,331,318,0,337,320,290,268,285],
[267,275,245,214,0,258,247,248,224],
[274,291,262,231,293,0,226,222,217],
[256,266,284,261,304,325,0,274,337],
[275,340,295,283,303,329,277,0,295],
[246,312,319,266,327,334,214,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,279,264,294,270,274,257,266],
[281,0,288,269,296,280,269,254,258],
[272,263,0,267,279,265,274,257,268],
[287,282,284,0,304,293,290,277,271],
[257,255,272,247,0,259,264,237,243],
[281,271,286,258,292,0,262,260,272],
[277,282,277,261,287,289,0,275,258],
[294,297,294,274,314,291,276,0,294],
[285,293,283,280,308,279,293,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,250,252,245,304,262,267,260],
[302,0,257,251,285,270,258,267,281],
[301,294,0,265,310,274,268,264,283],
[299,300,286,0,306,297,286,272,263],
[306,266,241,245,0,271,263,281,309],
[247,281,277,254,280,0,271,260,263],
[289,293,283,265,288,280,0,299,305],
[284,284,287,279,270,291,252,0,266],
[291,270,268,288,242,288,246,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,265,265,282,301,281,259,288],
[264,0,266,287,259,271,282,241,267],
[286,285,0,296,288,292,271,276,304],
[286,264,255,0,286,291,282,280,302],
[269,292,263,265,0,296,286,276,277],
[250,280,259,260,255,0,262,279,285],
[270,269,280,269,265,289,0,263,275],
[292,310,275,271,275,272,288,0,278],
[263,284,247,249,274,266,276,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,297,308,295,283,299,277,298],
[276,0,284,301,258,271,287,270,284],
[254,267,0,291,271,266,293,263,271],
[243,250,260,0,258,251,270,242,256],
[256,293,280,293,0,260,284,283,302],
[268,280,285,300,291,0,290,270,293],
[252,264,258,281,267,261,0,267,279],
[274,281,288,309,268,281,284,0,293],
[253,267,280,295,249,258,272,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,247,263,275,251,252,263,267],
[306,0,255,273,272,251,284,263,265],
[304,296,0,291,283,256,291,284,259],
[288,278,260,0,277,260,279,257,285],
[276,279,268,274,0,267,277,271,261],
[300,300,295,291,284,0,282,276,261],
[299,267,260,272,274,269,0,275,256],
[288,288,267,294,280,275,276,0,264],
[284,286,292,266,290,290,295,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,273,260,277,255,295,242,306],
[287,0,296,305,255,260,296,268,308],
[278,255,0,253,248,247,260,233,284],
[291,246,298,0,231,285,273,246,266],
[274,296,303,320,0,298,302,262,313],
[296,291,304,266,253,0,280,289,307],
[256,255,291,278,249,271,0,237,282],
[309,283,318,305,289,262,314,0,317],
[245,243,267,285,238,244,269,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,279,286,273,267,288,295,285],
[289,0,294,298,277,269,275,288,294],
[272,257,0,267,260,271,270,284,254],
[265,253,284,0,282,274,282,276,276],
[278,274,291,269,0,261,276,293,271],
[284,282,280,277,290,0,274,280,278],
[263,276,281,269,275,277,0,271,262],
[256,263,267,275,258,271,280,0,270],
[266,257,297,275,280,273,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,270,277,278,299,276,279,287],
[269,0,276,281,256,275,267,278,262],
[281,275,0,278,290,270,274,283,287],
[274,270,273,0,275,285,277,290,284],
[273,295,261,276,0,281,283,280,296],
[252,276,281,266,270,0,274,267,271],
[275,284,277,274,268,277,0,298,301],
[272,273,268,261,271,284,253,0,283],
[264,289,264,267,255,280,250,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,259,277,245,260,241,249,243],
[303,0,293,302,262,282,284,284,273],
[292,258,0,275,276,294,272,289,275],
[274,249,276,0,245,274,265,283,256],
[306,289,275,306,0,315,283,278,283],
[291,269,257,277,236,0,244,260,251],
[310,267,279,286,268,307,0,288,269],
[302,267,262,268,273,291,263,0,268],
[308,278,276,295,268,300,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,308,300,256,302,284,294,270],
[240,0,272,262,282,280,243,269,281],
[243,279,0,289,280,291,287,274,243],
[251,289,262,0,247,327,292,285,277],
[295,269,271,304,0,313,298,298,264],
[249,271,260,224,238,0,250,251,213],
[267,308,264,259,253,301,0,314,275],
[257,282,277,266,253,300,237,0,245],
[281,270,308,274,287,338,276,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,275,290,277,255,282,299,279],
[289,0,263,275,267,296,308,283,272],
[276,288,0,293,284,295,315,291,264],
[261,276,258,0,248,271,288,272,258],
[274,284,267,303,0,270,290,293,277],
[296,255,256,280,281,0,292,287,270],
[269,243,236,263,261,259,0,239,254],
[252,268,260,279,258,264,312,0,256],
[272,279,287,293,274,281,297,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,279,280,262,279,274,265,266],
[253,0,259,268,256,253,264,249,260],
[272,292,0,282,278,273,272,276,261],
[271,283,269,0,259,260,269,266,282],
[289,295,273,292,0,280,282,276,297],
[272,298,278,291,271,0,285,262,279],
[277,287,279,282,269,266,0,276,282],
[286,302,275,285,275,289,275,0,282],
[285,291,290,269,254,272,269,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,256,248,264,264,260,272,264],
[304,0,278,282,281,279,278,273,296],
[295,273,0,284,283,292,273,268,267],
[303,269,267,0,262,258,280,262,276],
[287,270,268,289,0,289,278,269,283],
[287,272,259,293,262,0,276,269,271],
[291,273,278,271,273,275,0,287,279],
[279,278,283,289,282,282,264,0,278],
[287,255,284,275,268,280,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,254,295,287,271,329,282,273],
[280,0,257,273,285,267,297,276,266],
[297,294,0,274,272,255,304,280,279],
[256,278,277,0,270,269,312,283,264],
[264,266,279,281,0,257,296,262,257],
[280,284,296,282,294,0,301,275,266],
[222,254,247,239,255,250,0,247,228],
[269,275,271,268,289,276,304,0,258],
[278,285,272,287,294,285,323,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,303,255,281,293,318,328,265],
[259,0,299,228,280,243,267,321,284],
[248,252,0,253,271,287,291,311,263],
[296,323,298,0,269,305,319,330,286],
[270,271,280,282,0,288,290,313,285],
[258,308,264,246,263,0,328,311,264],
[233,284,260,232,261,223,0,271,253],
[223,230,240,221,238,240,280,0,241],
[286,267,288,265,266,287,298,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,270,296,268,276,285,286,281],
[267,0,257,262,257,280,282,273,246],
[281,294,0,288,269,286,291,281,267],
[255,289,263,0,256,277,273,265,260],
[283,294,282,295,0,283,292,302,273],
[275,271,265,274,268,0,281,274,270],
[266,269,260,278,259,270,0,273,251],
[265,278,270,286,249,277,278,0,253],
[270,305,284,291,278,281,300,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,261,292,241,319,338,309,328],
[269,0,277,241,238,281,324,265,298],
[290,274,0,297,269,340,323,289,365],
[259,310,254,0,289,326,357,309,334],
[310,313,282,262,0,287,360,327,321],
[232,270,211,225,264,0,335,264,268],
[213,227,228,194,191,216,0,222,277],
[242,286,262,242,224,287,329,0,302],
[223,253,186,217,230,283,274,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,268,226,273,265,236,263,276],
[297,0,283,269,246,300,258,273,257],
[283,268,0,255,290,287,261,243,275],
[325,282,296,0,274,278,273,306,260],
[278,305,261,277,0,289,268,285,269],
[286,251,264,273,262,0,254,268,283],
[315,293,290,278,283,297,0,269,281],
[288,278,308,245,266,283,282,0,244],
[275,294,276,291,282,268,270,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,273,286,279,287,282,266],
[274,0,265,279,298,286,276,286,284],
[266,286,0,261,286,307,268,306,285],
[278,272,290,0,286,311,281,312,294],
[265,253,265,265,0,273,262,253,281],
[272,265,244,240,278,0,279,255,242],
[264,275,283,270,289,272,0,302,279],
[269,265,245,239,298,296,249,0,272],
[285,267,266,257,270,309,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,287,248,236,261,267,259,243],
[268,0,270,248,230,230,234,271,240],
[264,281,0,282,284,273,271,273,268],
[303,303,269,0,251,250,296,283,257],
[315,321,267,300,0,315,273,292,277],
[290,321,278,301,236,0,278,286,290],
[284,317,280,255,278,273,0,289,263],
[292,280,278,268,259,265,262,0,247],
[308,311,283,294,274,261,288,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,252,258,239,249,281,268,256],
[288,0,287,282,268,285,297,277,277],
[299,264,0,267,242,272,282,255,252],
[293,269,284,0,243,278,274,275,275],
[312,283,309,308,0,295,316,275,276],
[302,266,279,273,256,0,287,276,274],
[270,254,269,277,235,264,0,246,251],
[283,274,296,276,276,275,305,0,266],
[295,274,299,276,275,277,300,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,300,295,287,270,305,286,303],
[247,0,262,278,256,258,272,263,280],
[251,289,0,281,265,276,265,271,273],
[256,273,270,0,251,274,262,273,261],
[264,295,286,300,0,282,290,282,271],
[281,293,275,277,269,0,277,282,272],
[246,279,286,289,261,274,0,254,264],
[265,288,280,278,269,269,297,0,287],
[248,271,278,290,280,279,287,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,257,274,275,282,316,244,270],
[317,0,284,294,271,311,296,279,292],
[294,267,0,254,268,290,284,286,296],
[277,257,297,0,266,301,285,272,255],
[276,280,283,285,0,290,309,275,262],
[269,240,261,250,261,0,255,252,256],
[235,255,267,266,242,296,0,264,273],
[307,272,265,279,276,299,287,0,297],
[281,259,255,296,289,295,278,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,295,269,269,266,289,274,272],
[279,0,283,270,260,289,253,284,274],
[256,268,0,253,281,275,243,274,238],
[282,281,298,0,276,287,269,298,252],
[282,291,270,275,0,274,276,282,256],
[285,262,276,264,277,0,281,293,292],
[262,298,308,282,275,270,0,287,271],
[277,267,277,253,269,258,264,0,248],
[279,277,313,299,295,259,280,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,314,275,276,277,277,275,316],
[274,0,272,273,234,351,273,311,391],
[237,279,0,236,277,235,315,233,274],
[276,278,315,0,276,352,315,194,391],
[275,317,274,275,0,314,314,236,235],
[274,200,316,199,237,0,313,234,236],
[274,278,236,236,237,238,0,155,313],
[276,240,318,357,315,317,396,0,433],
[235,160,277,160,316,315,238,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,275,306,297,275,280,274,288],
[268,0,280,289,304,280,297,291,286],
[276,271,0,264,274,259,258,270,253],
[245,262,287,0,278,260,262,250,241],
[254,247,277,273,0,273,262,259,268],
[276,271,292,291,278,0,285,287,304],
[271,254,293,289,289,266,0,295,294],
[277,260,281,301,292,264,256,0,275],
[263,265,298,310,283,247,257,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,276,290,307,289,295,284,267],
[268,0,254,250,272,275,264,269,245],
[275,297,0,248,266,276,272,281,285],
[261,301,303,0,316,289,289,296,277],
[244,279,285,235,0,278,282,280,246],
[262,276,275,262,273,0,272,278,264],
[256,287,279,262,269,279,0,286,246],
[267,282,270,255,271,273,265,0,248],
[284,306,266,274,305,287,305,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,284,236,239,240,244,285,217],
[312,0,297,242,289,267,252,323,203],
[267,254,0,251,320,347,335,311,261],
[315,309,300,0,283,274,334,339,276],
[312,262,231,268,0,239,251,319,208],
[311,284,204,277,312,0,313,327,250],
[307,299,216,217,300,238,0,282,230],
[266,228,240,212,232,224,269,0,261],
[334,348,290,275,343,301,321,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,265,292,268,276,291,297,288],
[236,0,244,273,248,280,255,239,220],
[286,307,0,290,268,271,269,295,292],
[259,278,261,0,261,272,288,269,272],
[283,303,283,290,0,286,264,291,276],
[275,271,280,279,265,0,255,259,264],
[260,296,282,263,287,296,0,280,272],
[254,312,256,282,260,292,271,0,290],
[263,331,259,279,275,287,279,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,278,283,274,290,278,273,268],
[263,0,258,274,262,285,274,253,254],
[273,293,0,263,256,276,277,260,284],
[268,277,288,0,270,308,276,269,271],
[277,289,295,281,0,279,272,293,274],
[261,266,275,243,272,0,281,269,272],
[273,277,274,275,279,270,0,274,292],
[278,298,291,282,258,282,277,0,278],
[283,297,267,280,277,279,259,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,265,291,321,279,283,277,280],
[280,0,257,291,280,271,285,221,201],
[286,294,0,280,304,284,315,299,247],
[260,260,271,0,314,255,275,246,234],
[230,271,247,237,0,210,256,243,174],
[272,280,267,296,341,0,317,290,270],
[268,266,236,276,295,234,0,255,182],
[274,330,252,305,308,261,296,0,212],
[271,350,304,317,377,281,369,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,286,284,259,266,252,257,282],
[284,0,259,243,256,259,247,259,256],
[265,292,0,278,290,258,258,250,276],
[267,308,273,0,288,242,262,252,263],
[292,295,261,263,0,270,300,257,267],
[285,292,293,309,281,0,274,278,289],
[299,304,293,289,251,277,0,259,267],
[294,292,301,299,294,273,292,0,270],
[269,295,275,288,284,262,284,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,287,298,275,319,286,292,283],
[282,0,271,297,287,310,309,293,298],
[264,280,0,264,263,286,292,277,287],
[253,254,287,0,260,280,281,279,278],
[276,264,288,291,0,304,285,305,288],
[232,241,265,271,247,0,281,255,266],
[265,242,259,270,266,270,0,257,273],
[259,258,274,272,246,296,294,0,284],
[268,253,264,273,263,285,278,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,249,265,297,234,243,261,231],
[335,0,262,295,266,250,274,258,276],
[302,289,0,244,327,321,317,308,306],
[286,256,307,0,341,277,283,331,260],
[254,285,224,210,0,289,236,274,228],
[317,301,230,274,262,0,281,291,277],
[308,277,234,268,315,270,0,311,280],
[290,293,243,220,277,260,240,0,247],
[320,275,245,291,323,274,271,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,300,271,286,286,301,321,250],
[219,0,336,269,335,268,267,321,316],
[251,215,0,249,285,247,232,284,250],
[280,282,302,0,331,250,300,339,280],
[265,216,266,220,0,301,234,255,280],
[265,283,304,301,250,0,282,252,215],
[250,284,319,251,317,269,0,355,318],
[230,230,267,212,296,299,196,0,215],
[301,235,301,271,271,336,233,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,262,278,269,275,279,264,254],
[292,0,275,293,263,288,244,286,269],
[289,276,0,273,265,283,281,282,269],
[273,258,278,0,275,275,273,284,280],
[282,288,286,276,0,312,274,296,293],
[276,263,268,276,239,0,269,265,259],
[272,307,270,278,277,282,0,285,270],
[287,265,269,267,255,286,266,0,276],
[297,282,282,271,258,292,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,271,290,291,292,287,270],
[278,0,283,265,270,315,282,282,287],
[275,268,0,261,278,281,274,273,263],
[280,286,290,0,288,309,298,290,272],
[261,281,273,263,0,297,271,263,275],
[260,236,270,242,254,0,266,245,248],
[259,269,277,253,280,285,0,266,262],
[264,269,278,261,288,306,285,0,273],
[281,264,288,279,276,303,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,551,367,185,367,367,367,367,367],
[0,0,367,0,367,367,182,182,367],
[184,184,0,184,369,369,184,0,369],
[366,551,367,0,551,367,366,182,367],
[184,184,182,0,0,367,366,182,182],
[184,184,182,184,184,0,366,0,184],
[184,369,367,185,185,185,0,185,185],
[184,369,551,369,369,551,366,0,551],
[184,184,182,184,369,367,366,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,282,290,265,268,285,278],
[269,0,263,289,295,271,267,279,280],
[277,288,0,302,281,286,274,296,287],
[269,262,249,0,264,275,262,269,270],
[261,256,270,287,0,287,262,280,289],
[286,280,265,276,264,0,274,274,275],
[283,284,277,289,289,277,0,286,273],
[266,272,255,282,271,277,265,0,273],
[273,271,264,281,262,276,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,248,285,269,272,267,261,271],
[266,0,262,276,249,272,271,272,250],
[303,289,0,290,257,281,290,281,257],
[266,275,261,0,250,265,259,273,237],
[282,302,294,301,0,285,283,276,268],
[279,279,270,286,266,0,282,286,253],
[284,280,261,292,268,269,0,278,252],
[290,279,270,278,275,265,273,0,281],
[280,301,294,314,283,298,299,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,266,265,274,280,271,258,284],
[256,0,266,262,261,270,248,261,285],
[285,285,0,293,272,281,267,282,282],
[286,289,258,0,276,285,266,270,295],
[277,290,279,275,0,279,295,280,281],
[271,281,270,266,272,0,266,272,280],
[280,303,284,285,256,285,0,271,281],
[293,290,269,281,271,279,280,0,265],
[267,266,269,256,270,271,270,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,269,276,287,286,279,272,286],
[267,0,276,286,295,269,280,284,277],
[282,275,0,279,281,286,285,286,264],
[275,265,272,0,285,268,285,264,270],
[264,256,270,266,0,258,260,276,279],
[265,282,265,283,293,0,265,286,288],
[272,271,266,266,291,286,0,290,278],
[279,267,265,287,275,265,261,0,267],
[265,274,287,281,272,263,273,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,264,265,269,293,261,263,277],
[296,0,281,264,281,270,254,256,288],
[287,270,0,259,287,288,266,299,264],
[286,287,292,0,284,306,279,273,290],
[282,270,264,267,0,280,259,289,278],
[258,281,263,245,271,0,277,272,256],
[290,297,285,272,292,274,0,274,293],
[288,295,252,278,262,279,277,0,269],
[274,263,287,261,273,295,258,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,277,290,250,250,239,259,226],
[267,0,302,313,264,262,242,282,268],
[274,249,0,283,238,251,210,263,225],
[261,238,268,0,239,279,247,262,240],
[301,287,313,312,0,282,292,276,272],
[301,289,300,272,269,0,260,276,270],
[312,309,341,304,259,291,0,298,285],
[292,269,288,289,275,275,253,0,246],
[325,283,326,311,279,281,266,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,295,271,288,289,305,283,309],
[261,0,275,275,278,279,286,265,271],
[256,276,0,275,279,271,279,272,284],
[280,276,276,0,289,277,305,261,289],
[263,273,272,262,0,268,294,280,263],
[262,272,280,274,283,0,295,287,279],
[246,265,272,246,257,256,0,257,272],
[268,286,279,290,271,264,294,0,288],
[242,280,267,262,288,272,279,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,259,304,296,276,299,287,284],
[255,0,259,263,280,274,278,256,266],
[292,292,0,282,275,278,311,279,281],
[247,288,269,0,293,266,292,260,271],
[255,271,276,258,0,292,293,280,276],
[275,277,273,285,259,0,295,250,255],
[252,273,240,259,258,256,0,242,242],
[264,295,272,291,271,301,309,0,280],
[267,285,270,280,275,296,309,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,221,331,250,277,167,247,196],
[301,0,302,359,277,305,247,274,193],
[330,249,0,251,250,253,168,250,170],
[220,192,300,0,251,197,113,166,221],
[301,274,301,300,0,330,217,356,250],
[274,246,298,354,221,0,300,247,165],
[384,304,383,438,334,251,0,329,276],
[304,277,301,385,195,304,222,0,223],
[355,358,381,330,301,386,275,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,286,264,248,250,289,291,261],
[307,0,299,281,262,254,286,297,278],
[265,252,0,236,272,252,266,255,225],
[287,270,315,0,219,287,303,322,267],
[303,289,279,332,0,298,290,313,237],
[301,297,299,264,253,0,285,298,248],
[262,265,285,248,261,266,0,267,241],
[260,254,296,229,238,253,284,0,233],
[290,273,326,284,314,303,310,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,297,288,277,295,282,286,291],
[284,0,290,275,295,278,271,261,282],
[254,261,0,262,251,266,251,256,258],
[263,276,289,0,269,280,265,271,266],
[274,256,300,282,0,277,260,274,267],
[256,273,285,271,274,0,275,267,257],
[269,280,300,286,291,276,0,276,281],
[265,290,295,280,277,284,275,0,264],
[260,269,293,285,284,294,270,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,281,275,286,292,272,287,289],
[293,0,287,285,281,285,273,265,258],
[270,264,0,268,276,301,262,293,275],
[276,266,283,0,271,297,283,294,284],
[265,270,275,280,0,274,254,274,285],
[259,266,250,254,277,0,259,282,268],
[279,278,289,268,297,292,0,271,289],
[264,286,258,257,277,269,280,0,284],
[262,293,276,267,266,283,262,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,271,276,266,289,272,280,285],
[290,0,312,298,311,268,279,295,294],
[280,239,0,291,279,268,278,283,257],
[275,253,260,0,277,267,266,276,285],
[285,240,272,274,0,277,281,284,256],
[262,283,283,284,274,0,263,288,296],
[279,272,273,285,270,288,0,276,277],
[271,256,268,275,267,263,275,0,273],
[266,257,294,266,295,255,274,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,243,210,260,254,225,280,275],
[366,0,279,264,319,312,321,331,320],
[308,272,0,271,325,326,295,321,342],
[341,287,280,0,299,269,295,274,322],
[291,232,226,252,0,277,258,256,262],
[297,239,225,282,274,0,283,215,302],
[326,230,256,256,293,268,0,239,258],
[271,220,230,277,295,336,312,0,299],
[276,231,209,229,289,249,293,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,246,269,256,235,276,254,253],
[245,0,238,237,217,187,242,251,212],
[305,313,0,331,305,301,292,273,279],
[282,314,220,0,252,302,244,274,253],
[295,334,246,299,0,265,315,254,222],
[316,364,250,249,286,0,287,229,238],
[275,309,259,307,236,264,0,279,274],
[297,300,278,277,297,322,272,0,278],
[298,339,272,298,329,313,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,271,285,296,274,277,251,261],
[311,0,282,288,284,273,260,305,286],
[280,269,0,308,310,277,239,271,264],
[266,263,243,0,274,252,257,269,253],
[255,267,241,277,0,261,232,266,236],
[277,278,274,299,290,0,275,273,256],
[274,291,312,294,319,276,0,312,279],
[300,246,280,282,285,278,239,0,270],
[290,265,287,298,315,295,272,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,306,302,299,302,275,299],
[277,0,306,295,295,258,272,257,273],
[276,245,0,265,254,254,254,229,243],
[245,256,286,0,275,251,256,230,279],
[249,256,297,276,0,223,259,263,258],
[252,293,297,300,328,0,283,268,289],
[249,279,297,295,292,268,0,256,288],
[276,294,322,321,288,283,295,0,271],
[252,278,308,272,293,262,263,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,269,275,289,288,273,289,298],
[288,0,273,278,295,304,303,280,286],
[282,278,0,277,286,301,300,261,312],
[276,273,274,0,276,283,285,259,286],
[262,256,265,275,0,290,286,249,290],
[263,247,250,268,261,0,286,264,277],
[278,248,251,266,265,265,0,254,287],
[262,271,290,292,302,287,297,0,297],
[253,265,239,265,261,274,264,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,264,266,287,249,245,285,278],
[294,0,268,282,283,280,262,261,263],
[287,283,0,290,299,258,271,288,283],
[285,269,261,0,277,267,276,280,274],
[264,268,252,274,0,269,262,265,265],
[302,271,293,284,282,0,278,302,294],
[306,289,280,275,289,273,0,292,289],
[266,290,263,271,286,249,259,0,272],
[273,288,268,277,286,257,262,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,288,303,291,273,292,281,285],
[260,0,274,299,290,265,267,263,254],
[263,277,0,315,283,277,288,296,286],
[248,252,236,0,254,239,254,242,230],
[260,261,268,297,0,257,274,279,277],
[278,286,274,312,294,0,288,271,288],
[259,284,263,297,277,263,0,268,284],
[270,288,255,309,272,280,283,0,277],
[266,297,265,321,274,263,267,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,254,283,278,263,265,262,262],
[275,0,264,282,277,259,275,265,259],
[297,287,0,296,291,285,269,278,277],
[268,269,255,0,266,260,252,256,249],
[273,274,260,285,0,260,257,263,271],
[288,292,266,291,291,0,277,274,283],
[286,276,282,299,294,274,0,278,269],
[289,286,273,295,288,277,273,0,273],
[289,292,274,302,280,268,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,243,277,255,275,279,271,235],
[296,0,270,308,267,257,291,302,269],
[308,281,0,297,272,295,289,302,252],
[274,243,254,0,248,283,261,245,239],
[296,284,279,303,0,306,292,295,275],
[276,294,256,268,245,0,259,276,254],
[272,260,262,290,259,292,0,280,236],
[280,249,249,306,256,275,271,0,287],
[316,282,299,312,276,297,315,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,292,299,279,260,270,269],
[277,0,269,268,281,261,267,268,268],
[275,282,0,280,272,258,255,272,253],
[259,283,271,0,278,285,264,281,283],
[252,270,279,273,0,263,283,281,275],
[272,290,293,266,288,0,267,284,270],
[291,284,296,287,268,284,0,286,284],
[281,283,279,270,270,267,265,0,289],
[282,283,298,268,276,281,267,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,286,251,248,314,305,224,276],
[293,0,269,266,263,331,257,246,275],
[265,282,0,226,246,315,260,239,251],
[300,285,325,0,309,322,304,253,294],
[303,288,305,242,0,299,293,262,261],
[237,220,236,229,252,0,247,252,260],
[246,294,291,247,258,304,0,281,270],
[327,305,312,298,289,299,270,0,309],
[275,276,300,257,290,291,281,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,288,274,282,284,289,313,294],
[257,0,308,293,277,279,292,315,294],
[263,243,0,279,277,277,289,310,283],
[277,258,272,0,260,269,276,326,282],
[269,274,274,291,0,285,285,317,292],
[267,272,274,282,266,0,269,322,292],
[262,259,262,275,266,282,0,311,282],
[238,236,241,225,234,229,240,0,252],
[257,257,268,269,259,259,269,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,278,325,280,266,291,269,274],
[245,0,290,309,304,284,274,270,244],
[273,261,0,296,234,253,276,260,253],
[226,242,255,0,247,243,235,273,234],
[271,247,317,304,0,305,287,289,256],
[285,267,298,308,246,0,270,270,263],
[260,277,275,316,264,281,0,276,233],
[282,281,291,278,262,281,275,0,328],
[277,307,298,317,295,288,318,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,223,258,235,276,256,282,269],
[273,0,252,262,282,235,326,294,305],
[328,299,0,267,265,292,320,253,319],
[293,289,284,0,277,293,302,279,274],
[316,269,286,274,0,269,315,302,292],
[275,316,259,258,282,0,325,268,282],
[295,225,231,249,236,226,0,239,215],
[269,257,298,272,249,283,312,0,255],
[282,246,232,277,259,269,336,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,271,282,282,298,276,271,299],
[262,0,257,280,277,280,268,269,277],
[280,294,0,300,286,301,282,272,303],
[269,271,251,0,273,280,253,249,272],
[269,274,265,278,0,295,254,257,293],
[253,271,250,271,256,0,266,269,262],
[275,283,269,298,297,285,0,280,297],
[280,282,279,302,294,282,271,0,300],
[252,274,248,279,258,289,254,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,282,266,287,293,285,264,266],
[285,0,294,276,272,267,257,293,274],
[269,257,0,267,271,263,266,287,275],
[285,275,284,0,262,266,259,258,273],
[264,279,280,289,0,248,277,270,264],
[258,284,288,285,303,0,273,282,267],
[266,294,285,292,274,278,0,286,272],
[287,258,264,293,281,269,265,0,283],
[285,277,276,278,287,284,279,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,276,279,280,273,278,280,294],
[303,0,284,283,288,275,313,298,321],
[275,267,0,260,272,266,285,277,279],
[272,268,291,0,263,284,297,282,282],
[271,263,279,288,0,291,299,298,293],
[278,276,285,267,260,0,289,269,281],
[273,238,266,254,252,262,0,272,284],
[271,253,274,269,253,282,279,0,289],
[257,230,272,269,258,270,267,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,261,283,271,304,277,289,265],
[247,0,240,256,233,270,285,264,256],
[290,311,0,275,297,308,296,304,301],
[268,295,276,0,278,282,308,290,277],
[280,318,254,273,0,312,275,259,273],
[247,281,243,269,239,0,270,273,249],
[274,266,255,243,276,281,0,293,291],
[262,287,247,261,292,278,258,0,273],
[286,295,250,274,278,302,260,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,285,285,269,288,293,291,292],
[268,0,264,272,257,273,290,281,278],
[266,287,0,271,269,282,293,288,287],
[266,279,280,0,273,283,282,282,295],
[282,294,282,278,0,303,304,274,302],
[263,278,269,268,248,0,287,281,282],
[258,261,258,269,247,264,0,261,279],
[260,270,263,269,277,270,290,0,289],
[259,273,264,256,249,269,272,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,365,360,304,339,274,295,295,272],
[186,0,270,225,260,227,214,235,211],
[191,281,0,212,190,234,202,242,206],
[247,326,339,0,319,309,262,332,229],
[212,291,361,232,0,299,274,327,273],
[277,324,317,242,252,0,267,254,262],
[256,337,349,289,277,284,0,294,296],
[256,316,309,219,224,297,257,0,232],
[279,340,345,322,278,289,255,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,322,304,259,291,279,308,303],
[242,0,279,269,242,234,222,252,253],
[229,272,0,232,233,238,251,241,208],
[247,282,319,0,281,277,239,289,268],
[292,309,318,270,0,274,268,269,274],
[260,317,313,274,277,0,264,264,285],
[272,329,300,312,283,287,0,284,302],
[243,299,310,262,282,287,267,0,265],
[248,298,343,283,277,266,249,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,347,255,264,301,293,260,257],
[275,0,307,279,255,311,256,276,252],
[204,244,0,213,212,288,200,220,249],
[296,272,338,0,241,306,271,280,272],
[287,296,339,310,0,325,318,270,265],
[250,240,263,245,226,0,253,247,221],
[258,295,351,280,233,298,0,274,244],
[291,275,331,271,281,304,277,0,279],
[294,299,302,279,286,330,307,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,301,299,278,277,252,274,287],
[279,0,315,282,297,276,268,287,272],
[250,236,0,236,289,247,253,265,264],
[252,269,315,0,288,269,285,278,279],
[273,254,262,263,0,251,259,257,263],
[274,275,304,282,300,0,281,274,294],
[299,283,298,266,292,270,0,287,270],
[277,264,286,273,294,277,264,0,283],
[264,279,287,272,288,257,281,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,271,280,267,290,294,279,316],
[293,0,274,251,278,281,326,290,280],
[280,277,0,274,272,281,274,261,265],
[271,300,277,0,265,289,312,283,299],
[284,273,279,286,0,312,307,294,288],
[261,270,270,262,239,0,286,290,272],
[257,225,277,239,244,265,0,280,262],
[272,261,290,268,257,261,271,0,260],
[235,271,286,252,263,279,289,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,287,279,289,282,293,284,273],
[262,0,270,272,273,260,268,273,284],
[264,281,0,271,275,263,258,255,284],
[272,279,280,0,288,260,279,272,268],
[262,278,276,263,0,263,268,266,273],
[269,291,288,291,288,0,284,289,296],
[258,283,293,272,283,267,0,267,288],
[267,278,296,279,285,262,284,0,279],
[278,267,267,283,278,255,263,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,259,277,280,268,262,267,280],
[255,0,247,259,275,273,245,233,265],
[292,304,0,281,288,289,264,282,276],
[274,292,270,0,262,263,260,250,279],
[271,276,263,289,0,284,249,261,289],
[283,278,262,288,267,0,259,265,292],
[289,306,287,291,302,292,0,275,291],
[284,318,269,301,290,286,276,0,300],
[271,286,275,272,262,259,260,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,319,276,347,310,267,277,263],
[274,0,292,274,340,305,277,283,291],
[232,259,0,259,287,280,252,278,251],
[275,277,292,0,328,296,289,283,274],
[204,211,264,223,0,217,213,239,219],
[241,246,271,255,334,0,278,284,240],
[284,274,299,262,338,273,0,293,260],
[274,268,273,268,312,267,258,0,240],
[288,260,300,277,332,311,291,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,256,291,263,255,253,276,271],
[302,0,290,298,283,294,276,291,275],
[295,261,0,268,283,261,263,297,277],
[260,253,283,0,271,250,275,303,279],
[288,268,268,280,0,244,272,282,274],
[296,257,290,301,307,0,293,303,277],
[298,275,288,276,279,258,0,301,276],
[275,260,254,248,269,248,250,0,259],
[280,276,274,272,277,274,275,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,270,255,263,295,283,290,286],
[262,0,269,256,264,280,269,278,272],
[281,282,0,266,271,281,280,285,280],
[296,295,285,0,273,291,285,286,275],
[288,287,280,278,0,293,270,292,282],
[256,271,270,260,258,0,281,279,275],
[268,282,271,266,281,270,0,282,273],
[261,273,266,265,259,272,269,0,264],
[265,279,271,276,269,276,278,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,253,258,251,253,254,255,261],
[291,0,273,269,272,279,277,265,282],
[298,278,0,282,265,282,272,266,294],
[293,282,269,0,276,281,280,275,284],
[300,279,286,275,0,281,289,284,286],
[298,272,269,270,270,0,268,259,284],
[297,274,279,271,262,283,0,254,277],
[296,286,285,276,267,292,297,0,286],
[290,269,257,267,265,267,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,291,302,272,283,288,266,278],
[267,0,276,312,268,252,280,304,241],
[260,275,0,257,260,320,247,288,313],
[249,239,294,0,222,255,256,249,272],
[279,283,291,329,0,303,280,271,287],
[268,299,231,296,248,0,245,309,288],
[263,271,304,295,271,306,0,287,271],
[285,247,263,302,280,242,264,0,246],
[273,310,238,279,264,263,280,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,276,307,274,309,277,285,294],
[297,0,277,327,275,316,304,299,296],
[275,274,0,299,275,305,285,286,302],
[244,224,252,0,257,293,257,254,273],
[277,276,276,294,0,298,273,285,282],
[242,235,246,258,253,0,258,277,275],
[274,247,266,294,278,293,0,275,290],
[266,252,265,297,266,274,276,0,282],
[257,255,249,278,269,276,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,270,293,260,287,281,280],
[278,0,273,278,285,286,302,299,277],
[271,278,0,284,278,264,287,272,263],
[281,273,267,0,285,257,307,286,260],
[258,266,273,266,0,265,254,267,267],
[291,265,287,294,286,0,306,297,278],
[264,249,264,244,297,245,0,266,247],
[270,252,279,265,284,254,285,0,262],
[271,274,288,291,284,273,304,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,300,310,299,293,310,270,318],
[251,0,268,292,256,264,261,280,274],
[251,283,0,293,288,278,264,257,277],
[241,259,258,0,265,303,228,235,284],
[252,295,263,286,0,297,276,288,276],
[258,287,273,248,254,0,270,226,241],
[241,290,287,323,275,281,0,256,303],
[281,271,294,316,263,325,295,0,296],
[233,277,274,267,275,310,248,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,290,266,264,268,276,259,259],
[277,0,290,269,278,282,275,274,275],
[261,261,0,270,253,258,276,254,274],
[285,282,281,0,269,288,274,278,269],
[287,273,298,282,0,273,292,270,274],
[283,269,293,263,278,0,283,259,272],
[275,276,275,277,259,268,0,273,268],
[292,277,297,273,281,292,278,0,276],
[292,276,277,282,277,279,283,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,290,275,293,268,278,272],
[271,0,272,295,280,286,278,279,284],
[267,279,0,283,278,284,268,272,271],
[261,256,268,0,269,271,259,271,263],
[276,271,273,282,0,280,276,284,272],
[258,265,267,280,271,0,265,277,269],
[283,273,283,292,275,286,0,298,286],
[273,272,279,280,267,274,253,0,276],
[279,267,280,288,279,282,265,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,288,289,262,286,315,306,274],
[265,0,258,239,259,281,281,285,243],
[263,293,0,271,267,273,269,289,281],
[262,312,280,0,269,293,289,319,301],
[289,292,284,282,0,278,266,281,277],
[265,270,278,258,273,0,280,306,240],
[236,270,282,262,285,271,0,272,259],
[245,266,262,232,270,245,279,0,244],
[277,308,270,250,274,311,292,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,260,283,253,280,255,259,263],
[287,0,292,302,293,301,282,260,286],
[291,259,0,274,271,290,269,265,271],
[268,249,277,0,264,259,266,251,267],
[298,258,280,287,0,301,265,257,283],
[271,250,261,292,250,0,259,244,254],
[296,269,282,285,286,292,0,270,276],
[292,291,286,300,294,307,281,0,273],
[288,265,280,284,268,297,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,286,282,268,294,277,275,272],
[269,0,275,286,265,283,266,268,273],
[265,276,0,282,279,283,269,258,268],
[269,265,269,0,276,275,268,257,285],
[283,286,272,275,0,277,259,271,280],
[257,268,268,276,274,0,247,263,264],
[274,285,282,283,292,304,0,295,275],
[276,283,293,294,280,288,256,0,259],
[279,278,283,266,271,287,276,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,289,292,286,280,287,285,275],
[275,0,287,304,284,280,285,283,281],
[262,264,0,261,273,272,279,278,275],
[259,247,290,0,249,237,284,277,267],
[265,267,278,302,0,275,295,298,258],
[271,271,279,314,276,0,288,290,290],
[264,266,272,267,256,263,0,264,260],
[266,268,273,274,253,261,287,0,285],
[276,270,276,284,293,261,291,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,273,282,267,262,262,269,270],
[262,0,257,278,259,259,252,265,267],
[278,294,0,290,274,277,283,287,282],
[269,273,261,0,266,272,274,270,276],
[284,292,277,285,0,269,279,284,250],
[289,292,274,279,282,0,275,293,286],
[289,299,268,277,272,276,0,270,274],
[282,286,264,281,267,258,281,0,278],
[281,284,269,275,301,265,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,273,272,293,297,294,274,312],
[260,0,270,242,259,257,278,267,292],
[278,281,0,287,289,276,286,266,291],
[279,309,264,0,282,291,289,285,299],
[258,292,262,269,0,293,274,272,295],
[254,294,275,260,258,0,245,285,277],
[257,273,265,262,277,306,0,290,288],
[277,284,285,266,279,266,261,0,291],
[239,259,260,252,256,274,263,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,284,273,281,290,283,287,306],
[272,0,284,286,273,292,283,288,297],
[267,267,0,271,276,275,265,275,293],
[278,265,280,0,281,283,276,265,306],
[270,278,275,270,0,258,277,288,295],
[261,259,276,268,293,0,258,268,279],
[268,268,286,275,274,293,0,302,277],
[264,263,276,286,263,283,249,0,290],
[245,254,258,245,256,272,274,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,270,278,274,265,266,284,281],
[297,0,283,294,305,290,283,272,284],
[281,268,0,276,277,278,280,273,254],
[273,257,275,0,269,272,276,273,293],
[277,246,274,282,0,267,279,273,271],
[286,261,273,279,284,0,275,269,260],
[285,268,271,275,272,276,0,269,266],
[267,279,278,278,278,282,282,0,265],
[270,267,297,258,280,291,285,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,260,245,265,265,265,268,244],
[265,0,240,255,255,261,263,269,242],
[291,311,0,277,261,292,304,287,259],
[306,296,274,0,291,306,306,283,275],
[286,296,290,260,0,290,309,288,280],
[286,290,259,245,261,0,274,271,259],
[286,288,247,245,242,277,0,271,251],
[283,282,264,268,263,280,280,0,252],
[307,309,292,276,271,292,300,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,306,267,280,278,261,259,285],
[281,0,303,285,296,278,275,280,280],
[245,248,0,252,269,247,264,241,274],
[284,266,299,0,291,269,271,264,294],
[271,255,282,260,0,260,257,264,273],
[273,273,304,282,291,0,276,261,279],
[290,276,287,280,294,275,0,268,274],
[292,271,310,287,287,290,283,0,280],
[266,271,277,257,278,272,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,285,285,292,279,277,272,276],
[237,0,264,250,248,254,244,253,264],
[266,287,0,259,256,270,252,253,248],
[266,301,292,0,282,282,276,266,272],
[259,303,295,269,0,272,278,284,274],
[272,297,281,269,279,0,274,278,269],
[274,307,299,275,273,277,0,280,275],
[279,298,298,285,267,273,271,0,266],
[275,287,303,279,277,282,276,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,253,267,269,259,279,288,274],
[275,0,264,288,280,276,264,282,287],
[298,287,0,282,273,297,281,291,281],
[284,263,269,0,256,293,278,277,263],
[282,271,278,295,0,280,279,296,288],
[292,275,254,258,271,0,284,271,257],
[272,287,270,273,272,267,0,287,266],
[263,269,260,274,255,280,264,0,258],
[277,264,270,288,263,294,285,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,296,256,261,291,240,253,250],
[295,0,317,277,270,329,282,276,277],
[255,234,0,258,256,281,235,250,257],
[295,274,293,0,284,303,268,280,280],
[290,281,295,267,0,323,285,273,274],
[260,222,270,248,228,0,223,250,226],
[311,269,316,283,266,328,0,268,264],
[298,275,301,271,278,301,283,0,265],
[301,274,294,271,277,325,287,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,317,282,261,251,259,260,282],
[284,0,326,256,300,287,262,305,271],
[234,225,0,226,254,252,215,224,237],
[269,295,325,0,248,283,273,254,259],
[290,251,297,303,0,312,291,302,304],
[300,264,299,268,239,0,254,270,270],
[292,289,336,278,260,297,0,288,255],
[291,246,327,297,249,281,263,0,302],
[269,280,314,292,247,281,296,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,270,295,286,291,288,283],
[270,0,273,286,264,271,279,284,291],
[277,278,0,268,265,263,288,276,280],
[281,265,283,0,271,259,289,287,273],
[256,287,286,280,0,281,280,286,295],
[265,280,288,292,270,0,290,290,290],
[260,272,263,262,271,261,0,266,262],
[263,267,275,264,265,261,285,0,269],
[268,260,271,278,256,261,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,287,284,270,280,270,238,283],
[276,0,275,276,265,268,257,252,254],
[264,276,0,260,250,270,245,242,249],
[267,275,291,0,249,265,282,269,275],
[281,286,301,302,0,290,266,287,260],
[271,283,281,286,261,0,270,256,247],
[281,294,306,269,285,281,0,270,279],
[313,299,309,282,264,295,281,0,268],
[268,297,302,276,291,304,272,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,257,301,275,284,258,298,271],
[266,0,276,300,273,290,283,283,262],
[294,275,0,310,270,304,308,313,292],
[250,251,241,0,247,264,238,263,235],
[276,278,281,304,0,297,276,303,274],
[267,261,247,287,254,0,256,269,265],
[293,268,243,313,275,295,0,272,295],
[253,268,238,288,248,282,279,0,258],
[280,289,259,316,277,286,256,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,210,256,283,270,289,296,284],
[265,0,254,270,291,252,297,307,229],
[341,297,0,320,301,337,309,301,268],
[295,281,231,0,290,258,300,321,251],
[268,260,250,261,0,266,328,334,270],
[281,299,214,293,285,0,302,293,255],
[262,254,242,251,223,249,0,262,200],
[255,244,250,230,217,258,289,0,220],
[267,322,283,300,281,296,351,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,258,219,241,292,245,221,252],
[291,0,318,260,250,320,309,212,290],
[293,233,0,228,216,294,239,211,269],
[332,291,323,0,268,309,300,279,315],
[310,301,335,283,0,305,340,256,312],
[259,231,257,242,246,0,305,201,285],
[306,242,312,251,211,246,0,207,248],
[330,339,340,272,295,350,344,0,340],
[299,261,282,236,239,266,303,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,326,299,256,307,288,335,271],
[294,0,300,349,254,294,307,322,279],
[225,251,0,320,238,344,293,278,240],
[252,202,231,0,267,309,267,272,228],
[295,297,313,284,0,324,278,298,269],
[244,257,207,242,227,0,286,266,284],
[263,244,258,284,273,265,0,267,190],
[216,229,273,279,253,285,284,0,295],
[280,272,311,323,282,267,361,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,280,271,270,268,293,264,264],
[286,0,286,275,265,282,287,265,273],
[271,265,0,274,234,266,294,257,263],
[280,276,277,0,276,277,288,262,264],
[281,286,317,275,0,278,311,279,289],
[283,269,285,274,273,0,285,253,257],
[258,264,257,263,240,266,0,249,266],
[287,286,294,289,272,298,302,0,282],
[287,278,288,287,262,294,285,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,268,276,284,266,266,282,261],
[236,0,275,291,259,232,248,255,232],
[283,276,0,281,274,269,280,294,247],
[275,260,270,0,291,280,277,313,276],
[267,292,277,260,0,271,260,256,256],
[285,319,282,271,280,0,283,289,262],
[285,303,271,274,291,268,0,293,275],
[269,296,257,238,295,262,258,0,251],
[290,319,304,275,295,289,276,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,276,184,185,369,368,369,275],
[367,0,184,92,185,185,367,185,366],
[275,367,0,367,93,276,275,93,182],
[367,459,184,0,185,460,275,185,366],
[366,366,458,366,0,275,274,366,274],
[182,366,275,91,276,0,182,183,274],
[183,184,276,276,277,369,0,277,184],
[182,366,458,366,185,368,274,0,366],
[276,185,369,185,277,277,367,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,245,270,271,265,263,263,267],
[294,0,281,274,263,279,293,274,277],
[306,270,0,280,280,278,296,269,283],
[281,277,271,0,275,283,285,255,281],
[280,288,271,276,0,282,295,279,293],
[286,272,273,268,269,0,292,251,302],
[288,258,255,266,256,259,0,256,268],
[288,277,282,296,272,300,295,0,286],
[284,274,268,270,258,249,283,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,293,272,279,269,291,257,287],
[288,0,282,263,280,254,270,270,286],
[258,269,0,268,280,255,266,272,268],
[279,288,283,0,300,268,286,265,291],
[272,271,271,251,0,282,266,246,270],
[282,297,296,283,269,0,287,273,268],
[260,281,285,265,285,264,0,269,272],
[294,281,279,286,305,278,282,0,271],
[264,265,283,260,281,283,279,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,256,259,253,268,252,261,274],
[295,0,264,277,283,287,290,264,281],
[295,287,0,283,283,274,291,282,298],
[292,274,268,0,268,287,264,263,278],
[298,268,268,283,0,296,277,269,288],
[283,264,277,264,255,0,258,254,292],
[299,261,260,287,274,293,0,275,285],
[290,287,269,288,282,297,276,0,295],
[277,270,253,273,263,259,266,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,260,274,265,264,262,237,249],
[283,0,299,272,285,287,293,275,301],
[291,252,0,290,260,276,284,276,272],
[277,279,261,0,273,269,255,264,292],
[286,266,291,278,0,278,281,251,264],
[287,264,275,282,273,0,270,280,292],
[289,258,267,296,270,281,0,244,273],
[314,276,275,287,300,271,307,0,296],
[302,250,279,259,287,259,278,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,253,262,258,258,237,242,256],
[323,0,285,314,298,301,282,286,272],
[298,266,0,280,265,305,257,257,272],
[289,237,271,0,278,285,252,277,292],
[293,253,286,273,0,295,288,270,273],
[293,250,246,266,256,0,260,232,254],
[314,269,294,299,263,291,0,284,279],
[309,265,294,274,281,319,267,0,278],
[295,279,279,259,278,297,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,296,273,274,268,266,272,277],
[285,0,281,285,290,270,292,281,298],
[255,270,0,266,265,263,249,235,283],
[278,266,285,0,290,272,269,257,291],
[277,261,286,261,0,260,298,259,286],
[283,281,288,279,291,0,275,259,295],
[285,259,302,282,253,276,0,262,286],
[279,270,316,294,292,292,289,0,289],
[274,253,268,260,265,256,265,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,274,266,270,291,274,268],
[287,0,289,267,270,282,288,276,281],
[286,262,0,283,290,266,291,259,269],
[277,284,268,0,278,272,291,282,255],
[285,281,261,273,0,274,276,270,276],
[281,269,285,279,277,0,302,286,272],
[260,263,260,260,275,249,0,263,260],
[277,275,292,269,281,265,288,0,265],
[283,270,282,296,275,279,291,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,267,297,282,276,288,273,272],
[252,0,230,254,245,243,270,224,230],
[284,321,0,274,281,259,274,256,250],
[254,297,277,0,277,251,269,267,267],
[269,306,270,274,0,239,259,263,254],
[275,308,292,300,312,0,305,284,276],
[263,281,277,282,292,246,0,267,249],
[278,327,295,284,288,267,284,0,277],
[279,321,301,284,297,275,302,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,289,302,253,291,264,279,256],
[282,0,243,303,276,291,294,274,258],
[262,308,0,305,296,300,291,310,279],
[249,248,246,0,254,291,264,278,239],
[298,275,255,297,0,290,278,280,294],
[260,260,251,260,261,0,293,314,283],
[287,257,260,287,273,258,0,295,242],
[272,277,241,273,271,237,256,0,241],
[295,293,272,312,257,268,309,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,272,262,268,285,284,245,282],
[289,0,280,282,290,285,271,262,302],
[279,271,0,268,283,280,292,278,279],
[289,269,283,0,270,289,282,266,287],
[283,261,268,281,0,266,273,259,268],
[266,266,271,262,285,0,267,273,281],
[267,280,259,269,278,284,0,263,265],
[306,289,273,285,292,278,288,0,299],
[269,249,272,264,283,270,286,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,265,289,283,288,243,289],
[278,0,257,273,278,268,288,275,281],
[281,294,0,275,290,261,282,241,289],
[286,278,276,0,279,261,285,242,274],
[262,273,261,272,0,247,292,270,274],
[268,283,290,290,304,0,288,286,283],
[263,263,269,266,259,263,0,266,280],
[308,276,310,309,281,265,285,0,300],
[262,270,262,277,277,268,271,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,268,262,267,269,281,262,279],
[292,0,276,266,316,292,273,275,293],
[283,275,0,266,292,289,277,279,308],
[289,285,285,0,292,274,270,270,262],
[284,235,259,259,0,258,262,255,264],
[282,259,262,277,293,0,293,277,270],
[270,278,274,281,289,258,0,268,267],
[289,276,272,281,296,274,283,0,269],
[272,258,243,289,287,281,284,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,282,285,259,275,274,262,303],
[279,0,309,302,287,268,305,305,303],
[269,242,0,281,266,261,258,272,283],
[266,249,270,0,267,257,281,273,296],
[292,264,285,284,0,276,295,302,288],
[276,283,290,294,275,0,309,286,297],
[277,246,293,270,256,242,0,279,280],
[289,246,279,278,249,265,272,0,285],
[248,248,268,255,263,254,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,281,268,245,272,278,237,235],
[300,0,290,305,312,286,297,288,262],
[270,261,0,292,255,259,280,257,267],
[283,246,259,0,292,267,271,272,260],
[306,239,296,259,0,276,264,266,261],
[279,265,292,284,275,0,258,246,281],
[273,254,271,280,287,293,0,248,260],
[314,263,294,279,285,305,303,0,263],
[316,289,284,291,290,270,291,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,267,266,241,255,255,259,245],
[296,0,308,277,250,291,262,289,273],
[284,243,0,251,241,250,247,283,266],
[285,274,300,0,255,288,266,294,270],
[310,301,310,296,0,285,274,313,296],
[296,260,301,263,266,0,286,301,288],
[296,289,304,285,277,265,0,293,288],
[292,262,268,257,238,250,258,0,265],
[306,278,285,281,255,263,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,226,313,259,308,216,263,242],
[324,0,241,344,290,289,215,254,274],
[325,310,0,379,341,325,315,291,244],
[238,207,172,0,283,251,256,252,171],
[292,261,210,268,0,276,280,259,245],
[243,262,226,300,275,0,331,242,240],
[335,336,236,295,271,220,0,236,268],
[288,297,260,299,292,309,315,0,292],
[309,277,307,380,306,311,283,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,285,276,272,273,282,297,301],
[259,0,278,296,257,278,290,304,296],
[266,273,0,250,260,243,267,245,295],
[275,255,301,0,246,241,279,273,295],
[279,294,291,305,0,296,266,295,302],
[278,273,308,310,255,0,278,272,282],
[269,261,284,272,285,273,0,290,287],
[254,247,306,278,256,279,261,0,289],
[250,255,256,256,249,269,264,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,267,257,270,270,256,278],
[271,0,280,261,259,283,271,270,266],
[274,271,0,244,270,277,263,246,276],
[284,290,307,0,283,286,285,272,295],
[294,292,281,268,0,278,287,273,283],
[281,268,274,265,273,0,267,278,276],
[281,280,288,266,264,284,0,270,276],
[295,281,305,279,278,273,281,0,279],
[273,285,275,256,268,275,275,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,290,276,285,270,288,286,288],
[253,0,260,261,268,266,267,269,287],
[261,291,0,262,281,251,304,281,290],
[275,290,289,0,288,276,307,285,307],
[266,283,270,263,0,267,292,295,292],
[281,285,300,275,284,0,306,284,272],
[263,284,247,244,259,245,0,279,283],
[265,282,270,266,256,267,272,0,291],
[263,264,261,244,259,279,268,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,285,304,289,294,275,288,271],
[249,0,268,269,291,297,251,272,246],
[266,283,0,276,251,273,254,269,243],
[247,282,275,0,250,278,263,298,246],
[262,260,300,301,0,311,263,280,265],
[257,254,278,273,240,0,271,254,223],
[276,300,297,288,288,280,0,271,257],
[263,279,282,253,271,297,280,0,276],
[280,305,308,305,286,328,294,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,302,308,283,281,293,273,308],
[281,0,272,286,269,283,293,270,287],
[249,279,0,271,257,268,269,290,272],
[243,265,280,0,262,244,289,255,257],
[268,282,294,289,0,276,257,285,296],
[270,268,283,307,275,0,302,280,285],
[258,258,282,262,294,249,0,280,280],
[278,281,261,296,266,271,271,0,265],
[243,264,279,294,255,266,271,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,270,252,278,270,273,261,253],
[280,0,293,276,276,253,284,276,263],
[281,258,0,255,266,239,272,267,257],
[299,275,296,0,270,264,276,275,264],
[273,275,285,281,0,254,293,245,273],
[281,298,312,287,297,0,277,267,285],
[278,267,279,275,258,274,0,260,265],
[290,275,284,276,306,284,291,0,277],
[298,288,294,287,278,266,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,299,271,268,299,291,265,294],
[273,0,307,284,287,291,317,277,292],
[252,244,0,263,249,276,266,256,259],
[280,267,288,0,277,288,294,256,279],
[283,264,302,274,0,286,320,283,314],
[252,260,275,263,265,0,287,264,284],
[260,234,285,257,231,264,0,266,270],
[286,274,295,295,268,287,285,0,283],
[257,259,292,272,237,267,281,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,273,279,296,298,271,267,271],
[282,0,273,277,296,291,270,284,279],
[278,278,0,281,292,272,261,286,263],
[272,274,270,0,273,251,262,251,245],
[255,255,259,278,0,272,262,262,252],
[253,260,279,300,279,0,268,265,259],
[280,281,290,289,289,283,0,270,283],
[284,267,265,300,289,286,281,0,275],
[280,272,288,306,299,292,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,285,276,278,288,276,281],
[277,0,267,271,268,269,270,271,278],
[276,284,0,288,274,296,289,285,291],
[266,280,263,0,256,250,259,276,266],
[275,283,277,295,0,278,295,294,292],
[273,282,255,301,273,0,293,285,286],
[263,281,262,292,256,258,0,264,262],
[275,280,266,275,257,266,287,0,268],
[270,273,260,285,259,265,289,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,258,287,266,311,271,257,262],
[301,0,294,300,307,327,284,273,286],
[293,257,0,290,288,307,276,251,283],
[264,251,261,0,287,288,245,256,262],
[285,244,263,264,0,277,268,231,251],
[240,224,244,263,274,0,263,233,239],
[280,267,275,306,283,288,0,259,284],
[294,278,300,295,320,318,292,0,268],
[289,265,268,289,300,312,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,295,283,266,262,263,265,258],
[284,0,311,324,294,284,267,276,278],
[256,240,0,280,258,293,231,258,232],
[268,227,271,0,242,244,224,206,230],
[285,257,293,309,0,266,267,288,276],
[289,267,258,307,285,0,253,259,239],
[288,284,320,327,284,298,0,264,272],
[286,275,293,345,263,292,287,0,279],
[293,273,319,321,275,312,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,257,271,285,273,291,263,284],
[266,0,274,265,294,255,297,275,272],
[294,277,0,282,312,282,285,271,305],
[280,286,269,0,306,261,300,291,315],
[266,257,239,245,0,244,271,254,282],
[278,296,269,290,307,0,284,283,286],
[260,254,266,251,280,267,0,263,291],
[288,276,280,260,297,268,288,0,304],
[267,279,246,236,269,265,260,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,273,287,294,276,265,274,295],
[256,0,266,243,273,253,260,252,269],
[278,285,0,283,292,271,282,281,292],
[264,308,268,0,299,269,263,288,298],
[257,278,259,252,0,252,239,268,267],
[275,298,280,282,299,0,266,290,314],
[286,291,269,288,312,285,0,281,286],
[277,299,270,263,283,261,270,0,282],
[256,282,259,253,284,237,265,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,261,256,266,247,265,265,230],
[308,0,296,274,310,264,288,299,264],
[290,255,0,267,289,268,268,278,246],
[295,277,284,0,297,284,289,293,275],
[285,241,262,254,0,274,293,270,253],
[304,287,283,267,277,0,272,307,276],
[286,263,283,262,258,279,0,297,245],
[286,252,273,258,281,244,254,0,250],
[321,287,305,276,298,275,306,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,351,199,302,303,251,449,251],
[251,0,298,249,250,200,297,348,300],
[200,253,0,200,102,203,301,251,252],
[352,302,351,0,253,203,301,351,301],
[249,301,449,298,0,248,399,401,251],
[248,351,348,348,303,0,300,299,301],
[300,254,250,250,152,251,0,299,204],
[102,203,300,200,150,252,252,0,152],
[300,251,299,250,300,250,347,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,262,256,288,276,272,277,279],
[248,0,266,266,272,256,255,252,263],
[289,285,0,288,288,268,276,274,280],
[295,285,263,0,287,283,273,247,286],
[263,279,263,264,0,267,264,272,263],
[275,295,283,268,284,0,259,258,290],
[279,296,275,278,287,292,0,274,282],
[274,299,277,304,279,293,277,0,293],
[272,288,271,265,288,261,269,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,288,285,280,273,278,282,272],
[285,0,290,307,263,294,267,291,274],
[263,261,0,277,261,269,254,271,254],
[266,244,274,0,250,257,258,244,261],
[271,288,290,301,0,287,278,286,293],
[278,257,282,294,264,0,262,269,277],
[273,284,297,293,273,289,0,294,295],
[269,260,280,307,265,282,257,0,287],
[279,277,297,290,258,274,256,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,265,275,277,278,272,291,289],
[265,0,285,287,280,266,289,288,290],
[286,266,0,279,281,285,269,278,280],
[276,264,272,0,279,280,255,286,269],
[274,271,270,272,0,270,265,278,276],
[273,285,266,271,281,0,261,277,279],
[279,262,282,296,286,290,0,279,290],
[260,263,273,265,273,274,272,0,276],
[262,261,271,282,275,272,261,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,277,266,295,302,268,310,295],
[277,0,267,266,277,270,274,294,280],
[274,284,0,269,295,274,277,297,286],
[285,285,282,0,287,289,261,275,284],
[256,274,256,264,0,303,257,262,277],
[249,281,277,262,248,0,259,275,269],
[283,277,274,290,294,292,0,291,296],
[241,257,254,276,289,276,260,0,272],
[256,271,265,267,274,282,255,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,272,259,281,274,276,295,279],
[288,0,293,267,284,296,284,290,261],
[279,258,0,281,252,279,289,281,268],
[292,284,270,0,301,266,305,298,250],
[270,267,299,250,0,295,283,287,271],
[277,255,272,285,256,0,288,307,264],
[275,267,262,246,268,263,0,248,242],
[256,261,270,253,264,244,303,0,261],
[272,290,283,301,280,287,309,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,273,272,245,280,270,280,275],
[296,0,286,296,278,290,306,312,273],
[278,265,0,274,257,303,296,285,256],
[279,255,277,0,260,276,281,290,266],
[306,273,294,291,0,308,316,317,295],
[271,261,248,275,243,0,282,274,255],
[281,245,255,270,235,269,0,277,250],
[271,239,266,261,234,277,274,0,257],
[276,278,295,285,256,296,301,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,234,272,243,256,255,222,258],
[277,0,259,261,249,251,264,237,257],
[317,292,0,320,291,296,290,270,303],
[279,290,231,0,257,236,281,247,267],
[308,302,260,294,0,245,285,275,291],
[295,300,255,315,306,0,307,279,303],
[296,287,261,270,266,244,0,258,290],
[329,314,281,304,276,272,293,0,293],
[293,294,248,284,260,248,261,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,267,261,290,272,277,277,280],
[259,0,265,265,299,259,263,284,290],
[284,286,0,276,272,290,281,279,289],
[290,286,275,0,305,245,280,280,272],
[261,252,279,246,0,260,266,264,286],
[279,292,261,306,291,0,257,278,284],
[274,288,270,271,285,294,0,275,310],
[274,267,272,271,287,273,276,0,299],
[271,261,262,279,265,267,241,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,274,221,276,249,235,296,271],
[292,0,269,261,285,264,278,322,302],
[277,282,0,275,289,278,281,333,325],
[330,290,276,0,304,250,284,290,297],
[275,266,262,247,0,275,244,325,271],
[302,287,273,301,276,0,323,323,305],
[316,273,270,267,307,228,0,292,305],
[255,229,218,261,226,228,259,0,246],
[280,249,226,254,280,246,246,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,277,289,256,290,248,278,282],
[248,0,266,264,252,272,251,267,269],
[274,285,0,277,266,286,274,266,278],
[262,287,274,0,270,296,274,266,287],
[295,299,285,281,0,311,284,273,277],
[261,279,265,255,240,0,264,244,264],
[303,300,277,277,267,287,0,260,279],
[273,284,285,285,278,307,291,0,289],
[269,282,273,264,274,287,272,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,223,256,236,204,191,219,207],
[296,0,270,252,232,249,221,248,264],
[328,281,0,266,314,313,252,233,297],
[295,299,285,0,279,250,250,217,295],
[315,319,237,272,0,297,269,282,252],
[347,302,238,301,254,0,283,220,286],
[360,330,299,301,282,268,0,236,299],
[332,303,318,334,269,331,315,0,300],
[344,287,254,256,299,265,252,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,276,286,261,275,270,276,281],
[283,0,271,287,273,271,276,292,278],
[275,280,0,294,271,263,269,270,281],
[265,264,257,0,258,266,262,263,278],
[290,278,280,293,0,282,268,281,280],
[276,280,288,285,269,0,263,291,284],
[281,275,282,289,283,288,0,286,289],
[275,259,281,288,270,260,265,0,264],
[270,273,270,273,271,267,262,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,286,300,307,278,290,298,297],
[278,0,282,276,298,263,266,262,277],
[265,269,0,274,284,261,261,287,301],
[251,275,277,0,313,274,264,277,304],
[244,253,267,238,0,247,219,264,282],
[273,288,290,277,304,0,291,292,276],
[261,285,290,287,332,260,0,285,307],
[253,289,264,274,287,259,266,0,285],
[254,274,250,247,269,275,244,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,312,293,314,275,296,265,250],
[281,0,305,276,292,264,295,260,293],
[239,246,0,254,254,248,273,242,254],
[258,275,297,0,313,284,281,285,275],
[237,259,297,238,0,241,259,237,235],
[276,287,303,267,310,0,276,259,267],
[255,256,278,270,292,275,0,237,276],
[286,291,309,266,314,292,314,0,303],
[301,258,297,276,316,284,275,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,282,252,302,286,290,259,271],
[244,0,259,244,284,276,210,266,238],
[269,292,0,275,293,308,257,251,282],
[299,307,276,0,291,298,279,270,284],
[249,267,258,260,0,276,269,292,237],
[265,275,243,253,275,0,211,228,255],
[261,341,294,272,282,340,0,307,302],
[292,285,300,281,259,323,244,0,301],
[280,313,269,267,314,296,249,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,293,290,287,283,281,296,273],
[252,0,290,259,287,256,274,279,278],
[258,261,0,251,244,240,257,271,254],
[261,292,300,0,285,261,278,257,264],
[264,264,307,266,0,278,265,273,277],
[268,295,311,290,273,0,294,293,272],
[270,277,294,273,286,257,0,272,262],
[255,272,280,294,278,258,279,0,257],
[278,273,297,287,274,279,289,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,266,289,267,280,266,287,277],
[270,0,292,289,280,268,279,297,296],
[285,259,0,263,272,256,258,290,285],
[262,262,288,0,280,264,264,289,303],
[284,271,279,271,0,271,260,288,292],
[271,283,295,287,280,0,260,299,297],
[285,272,293,287,291,291,0,300,297],
[264,254,261,262,263,252,251,0,257],
[274,255,266,248,259,254,254,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,276,296,280,302,287,299,271],
[243,0,256,270,294,290,262,304,258],
[275,295,0,268,314,290,255,251,263],
[255,281,283,0,288,302,252,268,257],
[271,257,237,263,0,284,267,273,253],
[249,261,261,249,267,0,255,266,249],
[264,289,296,299,284,296,0,289,315],
[252,247,300,283,278,285,262,0,244],
[280,293,288,294,298,302,236,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,291,268,269,256,261,261,266],
[304,0,289,283,293,276,262,260,276],
[260,262,0,262,268,248,245,262,270],
[283,268,289,0,289,271,274,276,288],
[282,258,283,262,0,249,251,258,281],
[295,275,303,280,302,0,272,275,294],
[290,289,306,277,300,279,0,272,273],
[290,291,289,275,293,276,279,0,267],
[285,275,281,263,270,257,278,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,271,260,304,277,295,280],
[273,0,276,277,264,276,269,300,269],
[276,275,0,304,277,286,272,333,280],
[280,274,247,0,260,276,267,289,281],
[291,287,274,291,0,294,285,307,285],
[247,275,265,275,257,0,285,274,250],
[274,282,279,284,266,266,0,331,287],
[256,251,218,262,244,277,220,0,249],
[271,282,271,270,266,301,264,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,296,297,287,265,297,311,286],
[239,0,253,241,235,248,251,293,229],
[255,298,0,271,261,272,241,287,232],
[254,310,280,0,278,274,284,302,266],
[264,316,290,273,0,283,293,304,284],
[286,303,279,277,268,0,271,291,268],
[254,300,310,267,258,280,0,289,240],
[240,258,264,249,247,260,262,0,271],
[265,322,319,285,267,283,311,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,275,265,270,279,274,266,263],
[275,0,273,276,274,287,267,296,263],
[276,278,0,250,254,263,296,262,262],
[286,275,301,0,277,281,304,302,277],
[281,277,297,274,0,301,291,298,273],
[272,264,288,270,250,0,292,266,262],
[277,284,255,247,260,259,0,273,274],
[285,255,289,249,253,285,278,0,270],
[288,288,289,274,278,289,277,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,253,283,278,248,267,276,272],
[290,0,275,307,301,261,304,282,293],
[298,276,0,286,308,256,270,260,306],
[268,244,265,0,266,251,280,256,291],
[273,250,243,285,0,278,282,283,269],
[303,290,295,300,273,0,290,283,308],
[284,247,281,271,269,261,0,274,285],
[275,269,291,295,268,268,277,0,292],
[279,258,245,260,282,243,266,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,273,292,275,234,253,267,249],
[306,0,280,267,286,226,297,316,306],
[278,271,0,257,295,233,313,294,295],
[259,284,294,0,304,280,334,328,292],
[276,265,256,247,0,226,287,269,285],
[317,325,318,271,325,0,332,343,317],
[298,254,238,217,264,219,0,248,268],
[284,235,257,223,282,208,303,0,319],
[302,245,256,259,266,234,283,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,250,279,264,265,288,246,255],
[286,0,268,332,283,261,286,267,333],
[301,283,0,296,301,295,279,257,271],
[272,219,255,0,305,256,244,222,310],
[287,268,250,246,0,275,249,264,287],
[286,290,256,295,276,0,287,289,328],
[263,265,272,307,302,264,0,246,289],
[305,284,294,329,287,262,305,0,316],
[296,218,280,241,264,223,262,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,304,265,276,292,294,317,294],
[262,0,298,248,271,289,277,290,285],
[247,253,0,252,260,252,279,283,267],
[286,303,299,0,271,294,287,308,277],
[275,280,291,280,0,295,279,285,286],
[259,262,299,257,256,0,269,270,291],
[257,274,272,264,272,282,0,298,276],
[234,261,268,243,266,281,253,0,285],
[257,266,284,274,265,260,275,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,220,252,287,300,276,274,273],
[286,0,248,253,275,286,246,277,292],
[331,303,0,317,317,334,274,295,323],
[299,298,234,0,298,306,262,279,300],
[264,276,234,253,0,308,236,270,306],
[251,265,217,245,243,0,243,280,262],
[275,305,277,289,315,308,0,270,290],
[277,274,256,272,281,271,281,0,288],
[278,259,228,251,245,289,261,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,281,263,281,296,260,271,314],
[277,0,280,268,292,301,290,310,306],
[270,271,0,261,326,306,262,307,292],
[288,283,290,0,280,319,263,305,299],
[270,259,225,271,0,289,285,302,305],
[255,250,245,232,262,0,235,243,268],
[291,261,289,288,266,316,0,336,302],
[280,241,244,246,249,308,215,0,290],
[237,245,259,252,246,283,249,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,259,308,265,305,285,244,248],
[260,0,259,266,264,271,282,289,249],
[292,292,0,290,258,294,314,297,280],
[243,285,261,0,267,265,266,279,254],
[286,287,293,284,0,302,276,291,274],
[246,280,257,286,249,0,259,281,232],
[266,269,237,285,275,292,0,278,254],
[307,262,254,272,260,270,273,0,232],
[303,302,271,297,277,319,297,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,261,259,325,293,291,285,244],
[319,0,309,293,328,303,295,284,264],
[290,242,0,267,303,301,295,298,281],
[292,258,284,0,287,295,307,301,256],
[226,223,248,264,0,266,258,279,255],
[258,248,250,256,285,0,259,279,231],
[260,256,256,244,293,292,0,269,238],
[266,267,253,250,272,272,282,0,232],
[307,287,270,295,296,320,313,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,277,275,298,337,291,365,379],
[257,0,297,235,275,300,275,299,384],
[274,254,0,298,338,359,312,362,362],
[276,316,253,0,274,251,315,320,359],
[253,276,213,277,0,232,275,323,277],
[214,251,192,300,319,0,335,303,255],
[260,276,239,236,276,216,0,322,365],
[186,252,189,231,228,248,229,0,229],
[172,167,189,192,274,296,186,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,278,328,319,330,315,263,261],
[238,0,239,280,238,304,261,240,209],
[273,312,0,331,284,341,330,328,301],
[223,271,220,0,264,317,259,267,224],
[232,313,267,287,0,304,341,246,303],
[221,247,210,234,247,0,259,178,273],
[236,290,221,292,210,292,0,236,265],
[288,311,223,284,305,373,315,0,289],
[290,342,250,327,248,278,286,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,279,270,289,282,316,272],
[281,0,279,264,290,281,274,307,267],
[275,272,0,285,268,278,299,307,263],
[272,287,266,0,283,266,289,281,280],
[281,261,283,268,0,258,265,312,269],
[262,270,273,285,293,0,275,291,255],
[269,277,252,262,286,276,0,284,271],
[235,244,244,270,239,260,267,0,247],
[279,284,288,271,282,296,280,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,267,260,277,284,272,276,290],
[280,0,252,251,265,257,261,258,277],
[284,299,0,274,294,297,286,283,290],
[291,300,277,0,275,289,300,296,291],
[274,286,257,276,0,285,273,273,310],
[267,294,254,262,266,0,257,266,281],
[279,290,265,251,278,294,0,266,288],
[275,293,268,255,278,285,285,0,290],
[261,274,261,260,241,270,263,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,271,261,271,258,273,252,265],
[285,0,297,282,292,274,273,280,280],
[280,254,0,272,275,273,278,267,279],
[290,269,279,0,277,260,277,262,265],
[280,259,276,274,0,288,282,270,280],
[293,277,278,291,263,0,278,261,290],
[278,278,273,274,269,273,0,266,270],
[299,271,284,289,281,290,285,0,282],
[286,271,272,286,271,261,281,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,223,254,267,282,248,288,287],
[295,0,278,269,275,304,266,284,276],
[328,273,0,285,258,306,296,269,333],
[297,282,266,0,259,309,290,270,289],
[284,276,293,292,0,269,299,293,325],
[269,247,245,242,282,0,255,246,262],
[303,285,255,261,252,296,0,298,298],
[263,267,282,281,258,305,253,0,325],
[264,275,218,262,226,289,253,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,289,265,266,254,301,270,261],
[291,0,278,285,272,284,297,270,286],
[262,273,0,270,258,272,274,251,247],
[286,266,281,0,282,285,288,278,261],
[285,279,293,269,0,274,281,270,269],
[297,267,279,266,277,0,288,258,268],
[250,254,277,263,270,263,0,257,255],
[281,281,300,273,281,293,294,0,278],
[290,265,304,290,282,283,296,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,275,271,261,285,272,257],
[281,0,294,280,282,263,258,284,265],
[275,257,0,278,275,263,273,263,281],
[276,271,273,0,286,274,267,265,278],
[280,269,276,265,0,290,274,289,264],
[290,288,288,277,261,0,255,285,269],
[266,293,278,284,277,296,0,271,290],
[279,267,288,286,262,266,280,0,271],
[294,286,270,273,287,282,261,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,291,289,271,269,306,269,292],
[265,0,285,278,257,267,317,277,277],
[260,266,0,267,259,264,285,246,292],
[262,273,284,0,263,271,279,255,291],
[280,294,292,288,0,268,310,271,296],
[282,284,287,280,283,0,315,267,307],
[245,234,266,272,241,236,0,232,260],
[282,274,305,296,280,284,319,0,301],
[259,274,259,260,255,244,291,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,283,249,273,256,258,273,275],
[276,0,279,270,283,284,267,295,273],
[268,272,0,242,253,269,244,276,266],
[302,281,309,0,270,277,286,283,286],
[278,268,298,281,0,267,272,280,268],
[295,267,282,274,284,0,282,286,283],
[293,284,307,265,279,269,0,288,274],
[278,256,275,268,271,265,263,0,268],
[276,278,285,265,283,268,277,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,257,264,248,293,259,249,270],
[292,0,258,275,263,275,295,280,284],
[294,293,0,252,280,297,309,286,274],
[287,276,299,0,242,273,294,276,275],
[303,288,271,309,0,274,307,286,279],
[258,276,254,278,277,0,276,250,277],
[292,256,242,257,244,275,0,248,284],
[302,271,265,275,265,301,303,0,285],
[281,267,277,276,272,274,267,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,282,274,279,260,273,271,288],
[295,0,288,271,287,276,297,287,282],
[269,263,0,275,279,229,265,260,261],
[277,280,276,0,261,257,285,254,279],
[272,264,272,290,0,259,271,239,279],
[291,275,322,294,292,0,301,293,302],
[278,254,286,266,280,250,0,261,261],
[280,264,291,297,312,258,290,0,291],
[263,269,290,272,272,249,290,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,261,270,271,246,287,250,265],
[274,0,275,274,284,279,272,272,262],
[290,276,0,259,263,269,286,256,248],
[281,277,292,0,272,278,277,264,278],
[280,267,288,279,0,262,286,268,280],
[305,272,282,273,289,0,295,266,266],
[264,279,265,274,265,256,0,264,274],
[301,279,295,287,283,285,287,0,274],
[286,289,303,273,271,285,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,280,257,246,257,246,280,284],
[281,0,292,264,276,290,267,292,275],
[271,259,0,267,246,273,243,276,261],
[294,287,284,0,264,287,278,280,278],
[305,275,305,287,0,297,268,280,295],
[294,261,278,264,254,0,255,291,280],
[305,284,308,273,283,296,0,312,292],
[271,259,275,271,271,260,239,0,243],
[267,276,290,273,256,271,259,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,246,304,323,293,308,241,292],
[244,0,302,291,305,304,248,278,281],
[305,249,0,328,300,309,300,295,283],
[247,260,223,0,284,293,289,270,290],
[228,246,251,267,0,270,272,253,276],
[258,247,242,258,281,0,276,231,301],
[243,303,251,262,279,275,0,253,288],
[310,273,256,281,298,320,298,0,272],
[259,270,268,261,275,250,263,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,294,260,273,274,300,285,285],
[288,0,305,279,288,268,292,270,274],
[257,246,0,260,264,292,279,288,272],
[291,272,291,0,275,252,285,282,285],
[278,263,287,276,0,277,280,287,271],
[277,283,259,299,274,0,299,275,275],
[251,259,272,266,271,252,0,288,278],
[266,281,263,269,264,276,263,0,276],
[266,277,279,266,280,276,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,274,273,271,272,271,257,283],
[290,0,279,301,275,282,285,288,300],
[277,272,0,283,276,260,275,262,276],
[278,250,268,0,250,259,266,262,269],
[280,276,275,301,0,268,282,281,293],
[279,269,291,292,283,0,273,271,284],
[280,266,276,285,269,278,0,277,276],
[294,263,289,289,270,280,274,0,294],
[268,251,275,282,258,267,275,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,281,250,302,293,299,305,300],
[219,0,242,231,254,252,247,242,263],
[270,309,0,292,275,295,296,274,278],
[301,320,259,0,304,286,298,259,278],
[249,297,276,247,0,265,274,269,266],
[258,299,256,265,286,0,295,277,267],
[252,304,255,253,277,256,0,240,259],
[246,309,277,292,282,274,311,0,295],
[251,288,273,273,285,284,292,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,330,330,330,330,440,221,331],
[221,0,442,329,331,220,221,442,111],
[221,109,0,219,110,110,221,111,220],
[221,222,332,0,332,221,332,222,111],
[221,220,441,219,0,219,221,332,220],
[221,331,441,330,332,0,332,222,220],
[111,330,330,219,330,219,0,332,220],
[330,109,440,329,219,329,219,0,220],
[220,440,331,440,331,331,331,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,286,305,291,256,278,270,264],
[290,0,294,287,318,278,291,264,292],
[265,257,0,281,283,293,291,253,301],
[246,264,270,0,277,272,274,300,285],
[260,233,268,274,0,247,279,256,287],
[295,273,258,279,304,0,302,270,291],
[273,260,260,277,272,249,0,280,262],
[281,287,298,251,295,281,271,0,274],
[287,259,250,266,264,260,289,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,272,273,326,276,319,288,284],
[234,0,262,254,284,246,296,248,274],
[279,289,0,269,296,286,328,285,265],
[278,297,282,0,309,253,345,312,272],
[225,267,255,242,0,242,296,262,225],
[275,305,265,298,309,0,303,283,278],
[232,255,223,206,255,248,0,231,228],
[263,303,266,239,289,268,320,0,255],
[267,277,286,279,326,273,323,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,245,257,311,243,283,306],
[265,0,299,276,303,295,261,293,290],
[266,252,0,246,271,272,237,272,284],
[306,275,305,0,265,305,284,300,306],
[294,248,280,286,0,305,241,286,297],
[240,256,279,246,246,0,232,277,314],
[308,290,314,267,310,319,0,320,310],
[268,258,279,251,265,274,231,0,277],
[245,261,267,245,254,237,241,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,252,271,258,255,251,273,264],
[292,0,264,289,274,279,285,268,275],
[299,287,0,287,275,280,287,306,280],
[280,262,264,0,265,265,288,271,267],
[293,277,276,286,0,280,274,284,267],
[296,272,271,286,271,0,284,285,289],
[300,266,264,263,277,267,0,296,279],
[278,283,245,280,267,266,255,0,268],
[287,276,271,284,284,262,272,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,291,295,293,266,293,302,315],
[255,0,270,315,297,277,296,301,286],
[260,281,0,285,307,292,293,285,263],
[256,236,266,0,273,251,256,252,267],
[258,254,244,278,0,259,278,281,285],
[285,274,259,300,292,0,284,275,289],
[258,255,258,295,273,267,0,268,274],
[249,250,266,299,270,276,283,0,262],
[236,265,288,284,266,262,277,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,291,281,277,286,301,275,295],
[257,0,278,277,252,260,281,282,289],
[260,273,0,277,263,249,295,277,287],
[270,274,274,0,244,249,293,270,275],
[274,299,288,307,0,281,311,270,296],
[265,291,302,302,270,0,309,285,309],
[250,270,256,258,240,242,0,272,283],
[276,269,274,281,281,266,279,0,283],
[256,262,264,276,255,242,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,257,270,280,283,292,263,273],
[277,0,284,276,291,287,288,274,300],
[294,267,0,281,266,289,264,278,291],
[281,275,270,0,270,277,273,262,286],
[271,260,285,281,0,276,270,277,255],
[268,264,262,274,275,0,270,264,266],
[259,263,287,278,281,281,0,247,276],
[288,277,273,289,274,287,304,0,262],
[278,251,260,265,296,285,275,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,283,274,316,304,286,274,287],
[269,0,282,278,306,301,284,286,287],
[268,269,0,271,290,277,267,274,286],
[277,273,280,0,294,285,287,267,280],
[235,245,261,257,0,253,264,266,267],
[247,250,274,266,298,0,274,284,272],
[265,267,284,264,287,277,0,267,272],
[277,265,277,284,285,267,284,0,278],
[264,264,265,271,284,279,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,265,253,268,265,252,254,257],
[284,0,252,270,265,255,262,257,273],
[286,299,0,283,289,287,281,273,275],
[298,281,268,0,277,283,274,287,258],
[283,286,262,274,0,268,282,294,280],
[286,296,264,268,283,0,267,276,276],
[299,289,270,277,269,284,0,286,279],
[297,294,278,264,257,275,265,0,270],
[294,278,276,293,271,275,272,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,280,277,276,272,285,284,279],
[281,0,290,276,266,282,281,288,299],
[271,261,0,262,252,267,269,279,264],
[274,275,289,0,251,269,284,265,253],
[275,285,299,300,0,285,276,277,288],
[279,269,284,282,266,0,284,294,288],
[266,270,282,267,275,267,0,279,280],
[267,263,272,286,274,257,272,0,279],
[272,252,287,298,263,263,271,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,310,310,316,266,271,320,280],
[279,0,282,270,274,267,246,273,259],
[241,269,0,281,273,250,247,299,263],
[241,281,270,0,270,242,238,278,248],
[235,277,278,281,0,256,267,264,235],
[285,284,301,309,295,0,263,295,293],
[280,305,304,313,284,288,0,271,318],
[231,278,252,273,287,256,280,0,257],
[271,292,288,303,316,258,233,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,306,297,272,287,286,278,294],
[269,0,278,302,280,264,241,277,277],
[245,273,0,271,255,269,247,259,262],
[254,249,280,0,286,287,245,237,279],
[279,271,296,265,0,276,273,272,264],
[264,287,282,264,275,0,271,250,269],
[265,310,304,306,278,280,0,274,285],
[273,274,292,314,279,301,277,0,269],
[257,274,289,272,287,282,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,209,253,280,275,290,257,305],
[321,0,259,279,357,259,273,296,302],
[342,292,0,308,337,317,296,260,336],
[298,272,243,0,339,271,279,229,308],
[271,194,214,212,0,266,207,278,271],
[276,292,234,280,285,0,303,257,286],
[261,278,255,272,344,248,0,270,303],
[294,255,291,322,273,294,281,0,278],
[246,249,215,243,280,265,248,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,284,256,262,280,273,270],
[271,0,272,281,272,269,275,268,277],
[278,279,0,283,275,272,275,262,279],
[267,270,268,0,273,265,278,250,269],
[295,279,276,278,0,254,277,276,271],
[289,282,279,286,297,0,266,270,303],
[271,276,276,273,274,285,0,274,281],
[278,283,289,301,275,281,277,0,278],
[281,274,272,282,280,248,270,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,259,269,246,276,282,275,282],
[290,0,279,262,261,262,267,272,298],
[292,272,0,269,256,274,258,277,294],
[282,289,282,0,254,267,280,287,298],
[305,290,295,297,0,272,279,282,301],
[275,289,277,284,279,0,266,270,276],
[269,284,293,271,272,285,0,282,284],
[276,279,274,264,269,281,269,0,311],
[269,253,257,253,250,275,267,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,292,290,296,279,285,266,285],
[256,0,288,268,270,272,269,261,258],
[259,263,0,246,259,240,274,253,244],
[261,283,305,0,289,263,291,267,270],
[255,281,292,262,0,254,283,256,269],
[272,279,311,288,297,0,277,262,297],
[266,282,277,260,268,274,0,241,257],
[285,290,298,284,295,289,310,0,269],
[266,293,307,281,282,254,294,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,275,303,278,271,287,303,267],
[284,0,270,308,266,265,301,300,285],
[276,281,0,290,300,285,273,312,261],
[248,243,261,0,276,260,276,302,263],
[273,285,251,275,0,279,275,295,262],
[280,286,266,291,272,0,276,315,263],
[264,250,278,275,276,275,0,288,279],
[248,251,239,249,256,236,263,0,268],
[284,266,290,288,289,288,272,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,267,273,285,274,198,321,317],
[247,0,252,257,248,292,223,250,282],
[284,299,0,257,254,317,242,289,311],
[278,294,294,0,313,368,246,329,324],
[266,303,297,238,0,338,265,312,307],
[277,259,234,183,213,0,230,275,274],
[353,328,309,305,286,321,0,267,303],
[230,301,262,222,239,276,284,0,293],
[234,269,240,227,244,277,248,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,305,282,308,282,240,261,306],
[277,0,284,296,297,295,245,285,300],
[246,267,0,267,279,294,264,251,290],
[269,255,284,0,280,257,283,236,299],
[243,254,272,271,0,295,259,257,277],
[269,256,257,294,256,0,267,259,303],
[311,306,287,268,292,284,0,280,295],
[290,266,300,315,294,292,271,0,319],
[245,251,261,252,274,248,256,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,260,227,291,292,261,326,193],
[257,0,326,290,258,227,258,323,258],
[291,225,0,259,290,292,193,324,323],
[324,261,292,0,227,293,324,293,292],
[260,293,261,324,0,290,291,324,357],
[259,324,259,258,261,0,289,326,260],
[290,293,358,227,260,262,0,325,292],
[225,228,227,258,227,225,226,0,227],
[358,293,228,259,194,291,259,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,301,290,282,238,243,301,208],
[302,0,334,269,297,278,304,328,270],
[250,217,0,263,252,242,275,300,206],
[261,282,288,0,330,260,257,287,224],
[269,254,299,221,0,283,263,282,243],
[313,273,309,291,268,0,281,293,279],
[308,247,276,294,288,270,0,300,289],
[250,223,251,264,269,258,251,0,219],
[343,281,345,327,308,272,262,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,243,258,273,267,257,281,271],
[268,0,275,255,262,276,249,278,273],
[308,276,0,281,291,271,273,276,278],
[293,296,270,0,278,274,269,294,285],
[278,289,260,273,0,279,259,269,268],
[284,275,280,277,272,0,270,268,271],
[294,302,278,282,292,281,0,267,272],
[270,273,275,257,282,283,284,0,288],
[280,278,273,266,283,280,279,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,296,289,297,291,267,262,283],
[294,0,279,292,315,275,276,296,277],
[255,272,0,273,307,277,262,286,268],
[262,259,278,0,333,255,285,303,263],
[254,236,244,218,0,256,235,267,252],
[260,276,274,296,295,0,256,256,291],
[284,275,289,266,316,295,0,306,302],
[289,255,265,248,284,295,245,0,264],
[268,274,283,288,299,260,249,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,301,312,255,296,273,242,298],
[296,0,259,290,292,293,270,250,249],
[250,292,0,313,278,308,284,253,284],
[239,261,238,0,228,279,268,258,264],
[296,259,273,323,0,309,274,268,249],
[255,258,243,272,242,0,263,231,260],
[278,281,267,283,277,288,0,241,292],
[309,301,298,293,283,320,310,0,266],
[253,302,267,287,302,291,259,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,285,278,284,270,329,294,321],
[266,0,250,275,296,245,307,279,267],
[266,301,0,278,283,259,315,306,277],
[273,276,273,0,272,288,329,309,284],
[267,255,268,279,0,249,311,305,254],
[281,306,292,263,302,0,317,321,291],
[222,244,236,222,240,234,0,247,227],
[257,272,245,242,246,230,304,0,270],
[230,284,274,267,297,260,324,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,266,269,251,291,275,286,281],
[285,0,290,284,265,289,294,277,279],
[285,261,0,258,281,259,266,269,278],
[282,267,293,0,291,282,278,293,297],
[300,286,270,260,0,279,288,288,270],
[260,262,292,269,272,0,286,291,289],
[276,257,285,273,263,265,0,276,246],
[265,274,282,258,263,260,275,0,274],
[270,272,273,254,281,262,305,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,258,278,270,293,274,263,283],
[258,0,270,276,284,294,274,280,272],
[293,281,0,297,294,299,284,273,282],
[273,275,254,0,281,302,279,267,265],
[281,267,257,270,0,274,267,268,262],
[258,257,252,249,277,0,256,252,271],
[277,277,267,272,284,295,0,270,285],
[288,271,278,284,283,299,281,0,279],
[268,279,269,286,289,280,266,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,304,289,277,296,294,262,269],
[270,0,271,277,278,278,285,248,255],
[247,280,0,286,259,287,285,276,262],
[262,274,265,0,255,259,267,258,240],
[274,273,292,296,0,303,265,277,287],
[255,273,264,292,248,0,276,252,263],
[257,266,266,284,286,275,0,257,266],
[289,303,275,293,274,299,294,0,285],
[282,296,289,311,264,288,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,270,282,255,291,240,269,237],
[319,0,291,315,275,310,289,288,299],
[281,260,0,317,301,330,273,278,258],
[269,236,234,0,272,272,261,246,252],
[296,276,250,279,0,288,261,254,222],
[260,241,221,279,263,0,279,251,261],
[311,262,278,290,290,272,0,281,275],
[282,263,273,305,297,300,270,0,278],
[314,252,293,299,329,290,276,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,279,290,295,299,307,275,281],
[254,0,271,282,281,269,276,264,280],
[272,280,0,276,282,266,295,274,303],
[261,269,275,0,270,274,278,281,282],
[256,270,269,281,0,270,278,273,276],
[252,282,285,277,281,0,279,282,277],
[244,275,256,273,273,272,0,275,269],
[276,287,277,270,278,269,276,0,279],
[270,271,248,269,275,274,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,246,258,261,257,274,280,255],
[284,0,272,310,290,271,281,297,271],
[305,279,0,296,287,264,266,300,305],
[293,241,255,0,250,264,265,291,264],
[290,261,264,301,0,282,267,273,302],
[294,280,287,287,269,0,258,263,271],
[277,270,285,286,284,293,0,277,289],
[271,254,251,260,278,288,274,0,277],
[296,280,246,287,249,280,262,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,314,304,272,287,286,286,308],
[288,0,330,312,275,312,272,267,319],
[237,221,0,239,259,239,246,251,238],
[247,239,312,0,250,249,289,288,269],
[279,276,292,301,0,255,251,270,233],
[264,239,312,302,296,0,267,295,277],
[265,279,305,262,300,284,0,301,254],
[265,284,300,263,281,256,250,0,257],
[243,232,313,282,318,274,297,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,291,290,284,297,278,274,299],
[253,0,279,265,266,289,265,249,286],
[260,272,0,249,270,308,246,258,275],
[261,286,302,0,269,272,272,277,289],
[267,285,281,282,0,291,266,262,276],
[254,262,243,279,260,0,264,256,263],
[273,286,305,279,285,287,0,260,296],
[277,302,293,274,289,295,291,0,289],
[252,265,276,262,275,288,255,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,296,264,278,288,279,268,297],
[258,0,289,264,260,250,245,262,278],
[255,262,0,276,276,262,251,274,273],
[287,287,275,0,286,268,260,284,305],
[273,291,275,265,0,266,273,268,281],
[263,301,289,283,285,0,278,250,283],
[272,306,300,291,278,273,0,264,296],
[283,289,277,267,283,301,287,0,304],
[254,273,278,246,270,268,255,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,278,293,284,265,256,253],
[278,0,291,285,290,282,266,259,264],
[272,260,0,301,306,283,269,279,272],
[273,266,250,0,271,260,256,244,261],
[258,261,245,280,0,272,243,259,257],
[267,269,268,291,279,0,270,271,269],
[286,285,282,295,308,281,0,274,270],
[295,292,272,307,292,280,277,0,283],
[298,287,279,290,294,282,281,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,283,277,263,275,275,282,290],
[285,0,287,278,266,275,293,273,273],
[268,264,0,287,259,265,280,263,272],
[274,273,264,0,274,272,280,261,263],
[288,285,292,277,0,290,291,275,280],
[276,276,286,279,261,0,280,270,272],
[276,258,271,271,260,271,0,256,258],
[269,278,288,290,276,281,295,0,250],
[261,278,279,288,271,279,293,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,236,264,259,297,298,298,291],
[265,0,278,252,284,285,240,319,298],
[315,273,0,279,292,297,323,337,301],
[287,299,272,0,293,300,282,342,313],
[292,267,259,258,0,315,288,315,295],
[254,266,254,251,236,0,294,281,287],
[253,311,228,269,263,257,0,288,281],
[253,232,214,209,236,270,263,0,263],
[260,253,250,238,256,264,270,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,274,278,284,286,295,273],
[267,0,280,278,282,284,287,271,280],
[272,271,0,257,267,272,259,246,274],
[277,273,294,0,279,304,282,272,291],
[273,269,284,272,0,285,277,275,266],
[267,267,279,247,266,0,262,276,265],
[265,264,292,269,274,289,0,276,281],
[256,280,305,279,276,275,275,0,275],
[278,271,277,260,285,286,270,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,295,292,266,283,282,273],
[277,0,283,288,290,301,265,285,281],
[279,268,0,280,288,270,271,283,270],
[256,263,271,0,296,277,269,285,298],
[259,261,263,255,0,277,256,255,263],
[285,250,281,274,274,0,265,246,234],
[268,286,280,282,295,286,0,256,272],
[269,266,268,266,296,305,295,0,264],
[278,270,281,253,288,317,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,281,273,282,252,258,278,270],
[281,0,294,267,295,275,260,268,245],
[270,257,0,283,286,271,239,238,221],
[278,284,268,0,295,286,264,293,268],
[269,256,265,256,0,248,243,251,252],
[299,276,280,265,303,0,274,293,278],
[293,291,312,287,308,277,0,297,272],
[273,283,313,258,300,258,254,0,262],
[281,306,330,283,299,273,279,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,250,248,231,298,276,278,263],
[300,0,259,243,280,300,294,298,273],
[301,292,0,280,272,292,269,304,264],
[303,308,271,0,284,319,294,298,296],
[320,271,279,267,0,310,289,311,290],
[253,251,259,232,241,0,273,275,246],
[275,257,282,257,262,278,0,271,276],
[273,253,247,253,240,276,280,0,242],
[288,278,287,255,261,305,275,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,256,310,259,287,252,271,242],
[285,0,274,292,275,297,269,295,277],
[295,277,0,302,273,303,263,296,287],
[241,259,249,0,267,281,241,263,240],
[292,276,278,284,0,268,273,275,274],
[264,254,248,270,283,0,263,276,254],
[299,282,288,310,278,288,0,309,273],
[280,256,255,288,276,275,242,0,272],
[309,274,264,311,277,297,278,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,277,268,261,296,279,272],
[278,0,282,277,270,285,295,289,283],
[274,269,0,293,285,282,289,284,279],
[274,274,258,0,275,262,302,266,271],
[283,281,266,276,0,289,281,290,268],
[290,266,269,289,262,0,290,274,275],
[255,256,262,249,270,261,0,274,275],
[272,262,267,285,261,277,277,0,276],
[279,268,272,280,283,276,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,264,293,274,282,256,264,288],
[302,0,291,308,266,292,308,262,284],
[287,260,0,288,288,271,249,257,286],
[258,243,263,0,256,259,259,256,269],
[277,285,263,295,0,261,277,269,284],
[269,259,280,292,290,0,272,277,300],
[295,243,302,292,274,279,0,268,290],
[287,289,294,295,282,274,283,0,288],
[263,267,265,282,267,251,261,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,288,265,260,265,250,273,263],
[287,0,279,299,287,295,275,298,264],
[263,272,0,259,248,291,277,252,249],
[286,252,292,0,261,283,269,281,279],
[291,264,303,290,0,308,293,292,288],
[286,256,260,268,243,0,266,271,266],
[301,276,274,282,258,285,0,294,262],
[278,253,299,270,259,280,257,0,276],
[288,287,302,272,263,285,289,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,287,289,280,269,269,277,285],
[274,0,270,272,285,263,268,271,287],
[264,281,0,285,267,265,275,279,280],
[262,279,266,0,280,260,288,278,295],
[271,266,284,271,0,274,267,270,281],
[282,288,286,291,277,0,263,285,297],
[282,283,276,263,284,288,0,284,285],
[274,280,272,273,281,266,267,0,267],
[266,264,271,256,270,254,266,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,274,278,280,275,294,276],
[264,0,269,262,252,289,259,299,259],
[265,282,0,285,287,287,296,308,284],
[277,289,266,0,277,282,274,307,279],
[273,299,264,274,0,285,265,293,262],
[271,262,264,269,266,0,277,287,258],
[276,292,255,277,286,274,0,294,266],
[257,252,243,244,258,264,257,0,253],
[275,292,267,272,289,293,285,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,276,291,279,260,275,273,275],
[252,0,276,282,269,271,296,264,275],
[275,275,0,297,302,314,319,279,271],
[260,269,254,0,273,276,289,262,259],
[272,282,249,278,0,282,278,272,273],
[291,280,237,275,269,0,253,287,290],
[276,255,232,262,273,298,0,259,254],
[278,287,272,289,279,264,292,0,276],
[276,276,280,292,278,261,297,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,265,279,269,276,272,269,292],
[285,0,278,275,275,283,262,271,295],
[286,273,0,263,261,297,277,275,268],
[272,276,288,0,279,286,275,267,283],
[282,276,290,272,0,290,287,273,280],
[275,268,254,265,261,0,266,255,268],
[279,289,274,276,264,285,0,273,283],
[282,280,276,284,278,296,278,0,270],
[259,256,283,268,271,283,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,267,265,272,263,257,278],
[285,0,277,286,275,276,279,273,274],
[279,274,0,278,276,269,274,268,274],
[284,265,273,0,281,252,258,269,259],
[286,276,275,270,0,272,299,271,300],
[279,275,282,299,279,0,287,265,281],
[288,272,277,293,252,264,0,283,285],
[294,278,283,282,280,286,268,0,292],
[273,277,277,292,251,270,266,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,267,255,291,286,257,249,260],
[283,0,299,285,304,294,277,287,250],
[284,252,0,313,299,263,272,277,258],
[296,266,238,0,279,260,266,287,253],
[260,247,252,272,0,250,248,247,252],
[265,257,288,291,301,0,268,266,293],
[294,274,279,285,303,283,0,268,262],
[302,264,274,264,304,285,283,0,277],
[291,301,293,298,299,258,289,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,281,271,273,272,278,284,269],
[267,0,273,267,274,298,254,292,277],
[270,278,0,268,276,268,272,286,266],
[280,284,283,0,276,287,272,298,265],
[278,277,275,275,0,269,285,297,286],
[279,253,283,264,282,0,263,284,264],
[273,297,279,279,266,288,0,283,263],
[267,259,265,253,254,267,268,0,264],
[282,274,285,286,265,287,288,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,272,280,270,288,316,244,285],
[265,0,274,297,301,299,313,285,270],
[279,277,0,266,279,281,297,294,277],
[271,254,285,0,266,260,278,285,316],
[281,250,272,285,0,291,294,269,271],
[263,252,270,291,260,0,304,312,288],
[235,238,254,273,257,247,0,259,246],
[307,266,257,266,282,239,292,0,274],
[266,281,274,235,280,263,305,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,263,256,265,266,281,284,282],
[271,0,292,284,282,249,288,308,291],
[288,259,0,294,284,278,282,294,271],
[295,267,257,0,275,245,266,288,252],
[286,269,267,276,0,261,279,303,285],
[285,302,273,306,290,0,315,310,294],
[270,263,269,285,272,236,0,270,267],
[267,243,257,263,248,241,281,0,258],
[269,260,280,299,266,257,284,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,267,271,277,301,263,273,284],
[279,0,291,290,268,296,269,266,273],
[284,260,0,277,276,290,274,285,273],
[280,261,274,0,257,300,263,289,281],
[274,283,275,294,0,285,289,277,293],
[250,255,261,251,266,0,258,276,260],
[288,282,277,288,262,293,0,269,276],
[278,285,266,262,274,275,282,0,275],
[267,278,278,270,258,291,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,321,252,332,379,350,344,292],
[315,0,300,325,280,349,288,317,261],
[230,251,0,264,290,372,203,297,205],
[299,226,287,0,254,346,317,312,305],
[219,271,261,297,0,298,222,273,269],
[172,202,179,205,253,0,256,286,202],
[201,263,348,234,329,295,0,290,223],
[207,234,254,239,278,265,261,0,229],
[259,290,346,246,282,349,328,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,277,235,296,230,275,258,277],
[311,0,299,289,317,274,326,274,296],
[274,252,0,231,295,267,259,235,279],
[316,262,320,0,311,274,288,290,303],
[255,234,256,240,0,234,236,242,238],
[321,277,284,277,317,0,274,290,312],
[276,225,292,263,315,277,0,276,289],
[293,277,316,261,309,261,275,0,278],
[274,255,272,248,313,239,262,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,276,325,255,312,236,303,314],
[289,0,242,309,256,320,279,306,286],
[275,309,0,296,277,307,276,325,288],
[226,242,255,0,228,285,251,286,253],
[296,295,274,323,0,316,279,347,311],
[239,231,244,266,235,0,250,265,272],
[315,272,275,300,272,301,0,301,309],
[248,245,226,265,204,286,250,0,259],
[237,265,263,298,240,279,242,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,270,275,260,277,245,280,278],
[287,0,279,267,250,275,298,283,269],
[281,272,0,268,259,269,241,271,270],
[276,284,283,0,265,266,276,283,267],
[291,301,292,286,0,282,267,287,282],
[274,276,282,285,269,0,256,291,287],
[306,253,310,275,284,295,0,291,285],
[271,268,280,268,264,260,260,0,253],
[273,282,281,284,269,264,266,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,294,256,279,286,254,281,277],
[266,0,270,267,247,266,252,243,246],
[257,281,0,234,273,260,236,253,266],
[295,284,317,0,277,297,260,272,297],
[272,304,278,274,0,274,269,283,280],
[265,285,291,254,277,0,284,270,299],
[297,299,315,291,282,267,0,281,292],
[270,308,298,279,268,281,270,0,271],
[274,305,285,254,271,252,259,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,278,272,269,278,269,271],
[274,0,266,273,269,265,265,270,283],
[280,285,0,303,276,286,275,284,275],
[273,278,248,0,281,250,258,256,253],
[279,282,275,270,0,265,266,275,272],
[282,286,265,301,286,0,276,285,270],
[273,286,276,293,285,275,0,294,287],
[282,281,267,295,276,266,257,0,278],
[280,268,276,298,279,281,264,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,239,296,274,269,274,269,233],
[241,0,242,285,268,281,278,280,272],
[312,309,0,291,280,295,278,301,270],
[255,266,260,0,275,262,276,282,269],
[277,283,271,276,0,300,294,288,282],
[282,270,256,289,251,0,284,298,270],
[277,273,273,275,257,267,0,281,270],
[282,271,250,269,263,253,270,0,255],
[318,279,281,282,269,281,281,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,287,285,266,266,277,255,286],
[278,0,289,297,261,273,287,282,293],
[264,262,0,283,269,264,274,266,291],
[266,254,268,0,270,279,270,271,279],
[285,290,282,281,0,273,275,267,285],
[285,278,287,272,278,0,280,270,304],
[274,264,277,281,276,271,0,272,286],
[296,269,285,280,284,281,279,0,280],
[265,258,260,272,266,247,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,259,288,261,277,291,275,294],
[276,0,275,291,283,272,285,296,294],
[292,276,0,298,274,297,293,282,291],
[263,260,253,0,260,254,264,269,272],
[290,268,277,291,0,269,271,281,266],
[274,279,254,297,282,0,272,257,258],
[260,266,258,287,280,279,0,268,276],
[276,255,269,282,270,294,283,0,252],
[257,257,260,279,285,293,275,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,282,271,267,274,281,278,252],
[257,0,264,260,263,257,259,254,268],
[269,287,0,271,286,262,274,269,247],
[280,291,280,0,290,261,288,276,285],
[284,288,265,261,0,273,262,258,254],
[277,294,289,290,278,0,279,275,279],
[270,292,277,263,289,272,0,278,285],
[273,297,282,275,293,276,273,0,254],
[299,283,304,266,297,272,266,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,279,285,284,281,265,283,284],
[270,0,261,277,282,271,254,272,250],
[272,290,0,294,284,303,288,300,280],
[266,274,257,0,250,265,282,281,259],
[267,269,267,301,0,290,257,290,269],
[270,280,248,286,261,0,266,280,254],
[286,297,263,269,294,285,0,264,288],
[268,279,251,270,261,271,287,0,249],
[267,301,271,292,282,297,263,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,247,283,277,279,282,274,260],
[285,0,270,296,286,280,279,298,266],
[304,281,0,292,271,287,282,291,269],
[268,255,259,0,283,286,298,246,273],
[274,265,280,268,0,276,302,276,281],
[272,271,264,265,275,0,277,261,242],
[269,272,269,253,249,274,0,273,266],
[277,253,260,305,275,290,278,0,253],
[291,285,282,278,270,309,285,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,278,269,286,271,280,285,288],
[256,0,281,273,272,257,262,274,257],
[273,270,0,254,267,279,270,271,268],
[282,278,297,0,292,274,279,294,293],
[265,279,284,259,0,275,269,268,278],
[280,294,272,277,276,0,282,290,309],
[271,289,281,272,282,269,0,282,275],
[266,277,280,257,283,261,269,0,287],
[263,294,283,258,273,242,276,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,277,312,265,240,317,256,282],
[265,0,284,306,261,258,322,245,267],
[274,267,0,309,255,235,320,254,262],
[239,245,242,0,180,206,277,200,251],
[286,290,296,371,0,284,331,273,330],
[311,293,316,345,267,0,289,235,264],
[234,229,231,274,220,262,0,241,228],
[295,306,297,351,278,316,310,0,274],
[269,284,289,300,221,287,323,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,307,262,262,256,261,279,287],
[263,0,273,252,250,238,226,264,264],
[244,278,0,256,256,245,237,243,267],
[289,299,295,0,285,267,275,291,277],
[289,301,295,266,0,272,255,286,252],
[295,313,306,284,279,0,281,267,307],
[290,325,314,276,296,270,0,316,287],
[272,287,308,260,265,284,235,0,286],
[264,287,284,274,299,244,264,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,263,282,270,261,261,290,275],
[278,0,275,267,264,259,259,258,264],
[288,276,0,263,274,284,282,277,287],
[269,284,288,0,262,278,252,288,287],
[281,287,277,289,0,271,262,266,303],
[290,292,267,273,280,0,250,275,261],
[290,292,269,299,289,301,0,285,296],
[261,293,274,263,285,276,266,0,274],
[276,287,264,264,248,290,255,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,253,213,338,210,337,297,251],
[338,0,338,295,337,337,211,295,337],
[298,213,0,342,251,297,212,256,336],
[338,256,209,0,337,338,252,255,253],
[213,214,300,214,0,211,85,214,296],
[341,214,254,213,340,0,297,214,295],
[214,340,339,299,466,254,0,296,338],
[254,256,295,296,337,337,255,0,380],
[300,214,215,298,255,256,213,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,307,322,296,299,294,317,282],
[276,0,311,343,279,302,293,306,275],
[244,240,0,277,247,260,292,268,279],
[229,208,274,0,246,252,292,275,263],
[255,272,304,305,0,289,283,309,280],
[252,249,291,299,262,0,285,277,260],
[257,258,259,259,268,266,0,281,254],
[234,245,283,276,242,274,270,0,274],
[269,276,272,288,271,291,297,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,261,264,251,262,245,251,282],
[272,0,252,263,251,257,252,268,284],
[290,299,0,292,274,294,285,303,302],
[287,288,259,0,241,267,257,273,274],
[300,300,277,310,0,282,291,274,283],
[289,294,257,284,269,0,278,271,291],
[306,299,266,294,260,273,0,295,297],
[300,283,248,278,277,280,256,0,284],
[269,267,249,277,268,260,254,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,244,262,291,280,281,244],
[267,0,278,240,270,291,286,275,265],
[268,273,0,265,258,267,255,279,251],
[307,311,286,0,271,290,281,295,268],
[289,281,293,280,0,287,262,261,287],
[260,260,284,261,264,0,248,258,256],
[271,265,296,270,289,303,0,276,268],
[270,276,272,256,290,293,275,0,275],
[307,286,300,283,264,295,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,279,272,314,280,289,280,283],
[237,0,273,252,278,255,265,252,271],
[272,278,0,267,295,277,285,279,282],
[279,299,284,0,299,297,291,287,275],
[237,273,256,252,0,266,273,267,260],
[271,296,274,254,285,0,260,268,260],
[262,286,266,260,278,291,0,267,253],
[271,299,272,264,284,283,284,0,293],
[268,280,269,276,291,291,298,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,265,288,260,277,257,297],
[271,0,272,282,286,258,265,261,285],
[276,279,0,279,288,274,275,266,296],
[286,269,272,0,291,261,277,283,272],
[263,265,263,260,0,262,279,242,284],
[291,293,277,290,289,0,279,264,285],
[274,286,276,274,272,272,0,254,269],
[294,290,285,268,309,287,297,0,299],
[254,266,255,279,267,266,282,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,258,262,259,265,267,256,275],
[288,0,278,284,289,272,275,265,289],
[293,273,0,279,275,282,286,273,294],
[289,267,272,0,266,270,271,279,278],
[292,262,276,285,0,265,267,266,275],
[286,279,269,281,286,0,273,279,295],
[284,276,265,280,284,278,0,266,286],
[295,286,278,272,285,272,285,0,287],
[276,262,257,273,276,256,265,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,311,276,285,267,270,261,273],
[258,0,299,257,256,262,266,272,259],
[240,252,0,245,269,226,249,248,264],
[275,294,306,0,269,279,268,271,266],
[266,295,282,282,0,289,273,278,273],
[284,289,325,272,262,0,283,304,282],
[281,285,302,283,278,268,0,280,287],
[290,279,303,280,273,247,271,0,283],
[278,292,287,285,278,269,264,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,286,272,301,284,282,290,267],
[284,0,312,284,302,294,258,278,275],
[265,239,0,296,288,281,260,288,248],
[279,267,255,0,280,266,272,260,272],
[250,249,263,271,0,265,255,269,249],
[267,257,270,285,286,0,273,282,235],
[269,293,291,279,296,278,0,280,277],
[261,273,263,291,282,269,271,0,264],
[284,276,303,279,302,316,274,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,266,281,275,292,281,281,254],
[257,0,262,269,266,286,290,277,249],
[285,289,0,290,271,285,285,282,286],
[270,282,261,0,275,283,271,271,257],
[276,285,280,276,0,308,296,284,250],
[259,265,266,268,243,0,276,263,254],
[270,261,266,280,255,275,0,285,246],
[270,274,269,280,267,288,266,0,253],
[297,302,265,294,301,297,305,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,261,317,271,261,267,293,278],
[264,0,274,299,292,273,258,281,258],
[290,277,0,300,286,278,266,302,286],
[234,252,251,0,275,254,236,305,254],
[280,259,265,276,0,250,265,278,264],
[290,278,273,297,301,0,280,294,282],
[284,293,285,315,286,271,0,300,293],
[258,270,249,246,273,257,251,0,247],
[273,293,265,297,287,269,258,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,234,266,257,279,256,281,250],
[282,0,230,243,257,259,227,272,238],
[317,321,0,288,293,297,268,306,261],
[285,308,263,0,272,281,270,287,250],
[294,294,258,279,0,283,280,308,261],
[272,292,254,270,268,0,239,294,267],
[295,324,283,281,271,312,0,293,279],
[270,279,245,264,243,257,258,0,242],
[301,313,290,301,290,284,272,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,251,257,246,237,287,259,293],
[264,0,238,296,263,249,305,278,269],
[300,313,0,296,256,258,315,276,301],
[294,255,255,0,258,252,273,224,266],
[305,288,295,293,0,299,310,270,288],
[314,302,293,299,252,0,297,247,252],
[264,246,236,278,241,254,0,231,255],
[292,273,275,327,281,304,320,0,299],
[258,282,250,285,263,299,296,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,271,267,271,278,272,275,278],
[286,0,267,279,272,285,284,274,281],
[280,284,0,278,274,292,293,296,289],
[284,272,273,0,283,287,278,275,287],
[280,279,277,268,0,280,281,300,291],
[273,266,259,264,271,0,265,287,285],
[279,267,258,273,270,286,0,279,281],
[276,277,255,276,251,264,272,0,281],
[273,270,262,264,260,266,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,286,266,270,277,273,274,276],
[277,0,301,260,278,296,291,289,268],
[265,250,0,270,282,255,281,268,282],
[285,291,281,0,262,283,284,277,284],
[281,273,269,289,0,284,293,276,288],
[274,255,296,268,267,0,265,282,274],
[278,260,270,267,258,286,0,290,286],
[277,262,283,274,275,269,261,0,288],
[275,283,269,267,263,277,265,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,256,282,273,261,259,276,281],
[258,0,259,267,268,263,271,255,272],
[295,292,0,292,287,279,286,290,258],
[269,284,259,0,256,250,280,254,228],
[278,283,264,295,0,267,268,278,255],
[290,288,272,301,284,0,304,280,276],
[292,280,265,271,283,247,0,262,248],
[275,296,261,297,273,271,289,0,268],
[270,279,293,323,296,275,303,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,258,249,276,271,282,285,247],
[290,0,238,229,258,282,250,268,247],
[293,313,0,266,268,298,290,265,286],
[302,322,285,0,268,301,276,279,289],
[275,293,283,283,0,272,265,248,265],
[280,269,253,250,279,0,285,267,244],
[269,301,261,275,286,266,0,266,273],
[266,283,286,272,303,284,285,0,257],
[304,304,265,262,286,307,278,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,296,267,273,265,259,275,298],
[267,0,304,289,256,286,299,300,273],
[255,247,0,287,249,252,263,278,273],
[284,262,264,0,237,257,295,275,277],
[278,295,302,314,0,271,287,308,294],
[286,265,299,294,280,0,298,306,282],
[292,252,288,256,264,253,0,286,260],
[276,251,273,276,243,245,265,0,271],
[253,278,278,274,257,269,291,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,274,283,273,277,267,293,304],
[257,0,235,261,249,251,269,266,286],
[277,316,0,294,274,304,287,335,310],
[268,290,257,0,270,284,286,283,293],
[278,302,277,281,0,270,256,305,289],
[274,300,247,267,281,0,273,310,275],
[284,282,264,265,295,278,0,310,289],
[258,285,216,268,246,241,241,0,268],
[247,265,241,258,262,276,262,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,303,265,293,279,285,288,264],
[250,0,277,222,302,277,277,266,272],
[248,274,0,245,309,273,225,302,262],
[286,329,306,0,350,323,291,284,273],
[258,249,242,201,0,280,208,261,259],
[272,274,278,228,271,0,260,265,266],
[266,274,326,260,343,291,0,319,307],
[263,285,249,267,290,286,232,0,247],
[287,279,289,278,292,285,244,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,277,322,293,286,268,289],
[274,0,248,285,269,246,255,250,244],
[260,303,0,292,312,274,290,308,307],
[274,266,259,0,290,286,285,271,276],
[229,282,239,261,0,242,273,249,300],
[258,305,277,265,309,0,248,302,273],
[265,296,261,266,278,303,0,292,270],
[283,301,243,280,302,249,259,0,273],
[262,307,244,275,251,278,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,261,248,242,267,255,236,257],
[330,0,289,306,262,308,288,274,278],
[290,262,0,278,236,295,262,275,261],
[303,245,273,0,271,276,273,270,279],
[309,289,315,280,0,292,267,280,282],
[284,243,256,275,259,0,243,252,274],
[296,263,289,278,284,308,0,268,285],
[315,277,276,281,271,299,283,0,298],
[294,273,290,272,269,277,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,292,292,278,283,284,319,257],
[288,0,262,238,215,275,257,285,261],
[259,289,0,268,243,317,247,306,280],
[259,313,283,0,272,259,265,297,290],
[273,336,308,279,0,285,297,323,300],
[268,276,234,292,266,0,252,305,289],
[267,294,304,286,254,299,0,296,280],
[232,266,245,254,228,246,255,0,276],
[294,290,271,261,251,262,271,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,266,305,269,280,261,267,269],
[307,0,262,299,302,267,302,294,284],
[285,289,0,321,269,286,288,289,281],
[246,252,230,0,267,261,265,270,255],
[282,249,282,284,0,273,274,279,249],
[271,284,265,290,278,0,268,273,274],
[290,249,263,286,277,283,0,281,251],
[284,257,262,281,272,278,270,0,254],
[282,267,270,296,302,277,300,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,284,266,298,285,293,284,271],
[282,0,289,276,298,282,295,287,275],
[267,262,0,266,286,278,281,279,261],
[285,275,285,0,306,274,275,283,276],
[253,253,265,245,0,262,256,260,262],
[266,269,273,277,289,0,290,277,302],
[258,256,270,276,295,261,0,264,276],
[267,264,272,268,291,274,287,0,261],
[280,276,290,275,289,249,275,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,276,302,279,299,289,275,282],
[249,0,265,307,272,288,300,267,256],
[275,286,0,296,303,291,291,284,291],
[249,244,255,0,275,278,284,250,259],
[272,279,248,276,0,283,284,276,271],
[252,263,260,273,268,0,285,273,278],
[262,251,260,267,267,266,0,258,273],
[276,284,267,301,275,278,293,0,276],
[269,295,260,292,280,273,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,323,303,234,299,317,304,294],
[260,0,280,275,247,260,304,292,298],
[228,271,0,269,215,275,291,297,249],
[248,276,282,0,270,308,288,325,271],
[317,304,336,281,0,296,274,313,289],
[252,291,276,243,255,0,261,273,249],
[234,247,260,263,277,290,0,282,256],
[247,259,254,226,238,278,269,0,266],
[257,253,302,280,262,302,295,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,305,288,302,290,302,270,301],
[263,0,274,266,265,252,283,296,285],
[246,277,0,254,273,283,285,274,288],
[263,285,297,0,307,267,341,286,307],
[249,286,278,244,0,264,252,250,288],
[261,299,268,284,287,0,298,262,302],
[249,268,266,210,299,253,0,246,253],
[281,255,277,265,301,289,305,0,263],
[250,266,263,244,263,249,298,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,256,266,253,269,281,266,288],
[254,0,252,273,226,253,275,253,279],
[295,299,0,300,277,290,306,274,292],
[285,278,251,0,242,266,284,246,307],
[298,325,274,309,0,291,312,279,311],
[282,298,261,285,260,0,279,270,294],
[270,276,245,267,239,272,0,235,275],
[285,298,277,305,272,281,316,0,303],
[263,272,259,244,240,257,276,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,289,277,286,261,273,269,257],
[273,0,309,283,302,283,289,297,288],
[262,242,0,266,278,266,251,275,261],
[274,268,285,0,281,277,282,292,279],
[265,249,273,270,0,270,267,253,263],
[290,268,285,274,281,0,296,300,288],
[278,262,300,269,284,255,0,283,274],
[282,254,276,259,298,251,268,0,266],
[294,263,290,272,288,263,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,218,264,279,224,278,195,275],
[282,0,249,277,261,257,248,240,294],
[333,302,0,324,296,268,290,282,307],
[287,274,227,0,288,258,279,256,267],
[272,290,255,263,0,281,272,221,249],
[327,294,283,293,270,0,269,279,281],
[273,303,261,272,279,282,0,260,276],
[356,311,269,295,330,272,291,0,335],
[276,257,244,284,302,270,275,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,279,286,276,276,257,297,258],
[282,0,297,296,288,291,274,297,294],
[272,254,0,301,276,279,255,281,280],
[265,255,250,0,267,267,259,277,266],
[275,263,275,284,0,296,279,289,278],
[275,260,272,284,255,0,268,288,273],
[294,277,296,292,272,283,0,291,296],
[254,254,270,274,262,263,260,0,260],
[293,257,271,285,273,278,255,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,293,255,288,264,273,253,293],
[275,0,294,276,279,276,267,280,297],
[258,257,0,267,258,276,270,271,293],
[296,275,284,0,259,282,273,278,298],
[263,272,293,292,0,271,265,291,301],
[287,275,275,269,280,0,282,272,290],
[278,284,281,278,286,269,0,285,299],
[298,271,280,273,260,279,266,0,272],
[258,254,258,253,250,261,252,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,267,287,288,269,273,291],
[268,0,256,267,268,241,247,253,268],
[278,295,0,289,286,281,289,263,276],
[284,284,262,0,270,271,255,258,283],
[264,283,265,281,0,257,265,263,285],
[263,310,270,280,294,0,273,249,281],
[282,304,262,296,286,278,0,280,296],
[278,298,288,293,288,302,271,0,281],
[260,283,275,268,266,270,255,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,263,270,253,286,245,293,259],
[288,0,280,279,258,289,255,287,238],
[288,271,0,283,269,279,258,300,240],
[281,272,268,0,265,267,263,284,239],
[298,293,282,286,0,286,286,327,260],
[265,262,272,284,265,0,269,305,238],
[306,296,293,288,265,282,0,319,278],
[258,264,251,267,224,246,232,0,215],
[292,313,311,312,291,313,273,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,281,286,273,285,283,265,260],
[287,0,286,281,271,279,279,266,269],
[270,265,0,268,268,282,272,264,265],
[265,270,283,0,266,283,276,277,275],
[278,280,283,285,0,290,275,277,277],
[266,272,269,268,261,0,258,266,269],
[268,272,279,275,276,293,0,269,273],
[286,285,287,274,274,285,282,0,279],
[291,282,286,276,274,282,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,277,281,289,328,328,321,285],
[317,0,296,241,305,308,300,324,247],
[274,255,0,262,317,268,256,306,267],
[270,310,289,0,287,313,312,318,311],
[262,246,234,264,0,301,290,310,283],
[223,243,283,238,250,0,254,274,214],
[223,251,295,239,261,297,0,336,257],
[230,227,245,233,241,277,215,0,229],
[266,304,284,240,268,337,294,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,260,275,254,278,279,270,254],
[299,0,280,281,277,286,262,266,271],
[291,271,0,275,260,291,281,279,267],
[276,270,276,0,250,274,292,273,269],
[297,274,291,301,0,271,293,295,270],
[273,265,260,277,280,0,298,274,279],
[272,289,270,259,258,253,0,263,255],
[281,285,272,278,256,277,288,0,272],
[297,280,284,282,281,272,296,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,256,256,276,281,292,265],
[276,0,281,250,258,258,275,279,260],
[271,270,0,258,254,243,268,279,257],
[295,301,293,0,293,301,299,316,274],
[295,293,297,258,0,271,283,306,279],
[275,293,308,250,280,0,276,291,252],
[270,276,283,252,268,275,0,295,268],
[259,272,272,235,245,260,256,0,260],
[286,291,294,277,272,299,283,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,294,261,264,256,300,255],
[270,0,275,283,279,283,288,291,283],
[270,276,0,267,259,264,266,276,258],
[257,268,284,0,249,288,263,252,285],
[290,272,292,302,0,288,287,293,299],
[287,268,287,263,263,0,269,272,285],
[295,263,285,288,264,282,0,281,274],
[251,260,275,299,258,279,270,0,269],
[296,268,293,266,252,266,277,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,273,257,309,281,284,275,301],
[269,0,248,260,271,274,270,271,268],
[278,303,0,268,300,263,287,291,311],
[294,291,283,0,315,297,274,295,296],
[242,280,251,236,0,244,251,266,268],
[270,277,288,254,307,0,260,260,293],
[267,281,264,277,300,291,0,286,302],
[276,280,260,256,285,291,265,0,278],
[250,283,240,255,283,258,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,291,270,271,284,264,283,269],
[272,0,273,264,263,272,251,273,253],
[260,278,0,273,277,265,268,273,258],
[281,287,278,0,273,280,247,272,287],
[280,288,274,278,0,311,281,279,269],
[267,279,286,271,240,0,264,267,267],
[287,300,283,304,270,287,0,277,265],
[268,278,278,279,272,284,274,0,276],
[282,298,293,264,282,284,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,268,290,267,261,260,271,284],
[290,0,280,311,264,252,275,285,267],
[283,271,0,312,282,290,303,289,287],
[261,240,239,0,246,239,258,255,259],
[284,287,269,305,0,280,289,283,289],
[290,299,261,312,271,0,296,289,275],
[291,276,248,293,262,255,0,284,270],
[280,266,262,296,268,262,267,0,275],
[267,284,264,292,262,276,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,282,268,261,274,279,262,272],
[273,0,268,277,271,290,274,281,278],
[269,283,0,277,270,276,255,272,273],
[283,274,274,0,277,289,280,267,278],
[290,280,281,274,0,276,278,269,280],
[277,261,275,262,275,0,271,259,281],
[272,277,296,271,273,280,0,271,268],
[289,270,279,284,282,292,280,0,280],
[279,273,278,273,271,270,283,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,267,272,258,259,296,264],
[276,0,263,260,295,245,251,302,255],
[279,288,0,261,261,252,252,282,249],
[284,291,290,0,295,276,276,317,263],
[279,256,290,256,0,248,263,304,255],
[293,306,299,275,303,0,285,314,265],
[292,300,299,275,288,266,0,318,284],
[255,249,269,234,247,237,233,0,236],
[287,296,302,288,296,286,267,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,296,294,277,273,291,293,281],
[264,0,281,277,277,270,281,268,284],
[255,270,0,291,276,284,287,293,269],
[257,274,260,0,247,259,277,269,265],
[274,274,275,304,0,274,283,282,276],
[278,281,267,292,277,0,287,277,286],
[260,270,264,274,268,264,0,277,271],
[258,283,258,282,269,274,274,0,259],
[270,267,282,286,275,265,280,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,254,284,292,283,291,262,273],
[278,0,245,270,275,254,277,268,261],
[297,306,0,279,309,275,292,279,288],
[267,281,272,0,279,263,270,252,263],
[259,276,242,272,0,258,256,251,277],
[268,297,276,288,293,0,293,276,266],
[260,274,259,281,295,258,0,250,273],
[289,283,272,299,300,275,301,0,268],
[278,290,263,288,274,285,278,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,288,274,294,283,226,269,307],
[261,0,217,268,316,294,256,260,249],
[263,334,0,305,310,273,279,290,290],
[277,283,246,0,283,289,244,264,263],
[257,235,241,268,0,248,266,225,268],
[268,257,278,262,303,0,263,247,246],
[325,295,272,307,285,288,0,294,317],
[282,291,261,287,326,304,257,0,287],
[244,302,261,288,283,305,234,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,309,334,345,307,290,288,251],
[244,0,278,320,312,311,304,249,298],
[242,273,0,369,319,321,299,310,306],
[217,231,182,0,231,254,296,228,218],
[206,239,232,320,0,310,293,229,252],
[244,240,230,297,241,0,323,277,251],
[261,247,252,255,258,228,0,258,261],
[263,302,241,323,322,274,293,0,326],
[300,253,245,333,299,300,290,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,256,268,261,293,226,265,264],
[252,0,233,260,253,268,228,265,244],
[295,318,0,299,269,309,285,295,336],
[283,291,252,0,285,291,278,298,274],
[290,298,282,266,0,293,242,285,287],
[258,283,242,260,258,0,212,258,272],
[325,323,266,273,309,339,0,305,308],
[286,286,256,253,266,293,246,0,278],
[287,307,215,277,264,279,243,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,258,279,313,294,321,328,261],
[266,0,260,286,303,277,278,296,267],
[293,291,0,287,312,275,285,311,294],
[272,265,264,0,311,253,304,293,258],
[238,248,239,240,0,245,267,278,264],
[257,274,276,298,306,0,294,280,261],
[230,273,266,247,284,257,0,265,254],
[223,255,240,258,273,271,286,0,255],
[290,284,257,293,287,290,297,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,280,289,279,290,270,262],
[273,0,262,265,277,271,273,271,250],
[276,289,0,305,305,296,300,288,273],
[271,286,246,0,279,273,302,304,269],
[262,274,246,272,0,261,300,276,254],
[272,280,255,278,290,0,284,263,269],
[261,278,251,249,251,267,0,267,245],
[281,280,263,247,275,288,284,0,278],
[289,301,278,282,297,282,306,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,289,281,284,274,290,291,272],
[260,0,259,260,274,255,276,286,272],
[262,292,0,259,263,276,263,273,259],
[270,291,292,0,274,272,283,301,275],
[267,277,288,277,0,274,291,283,261],
[277,296,275,279,277,0,290,288,281],
[261,275,288,268,260,261,0,281,268],
[260,265,278,250,268,263,270,0,261],
[279,279,292,276,290,270,283,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,266,277,275,273,267,285,281],
[274,0,282,276,280,268,278,285,267],
[285,269,0,282,291,263,289,272,271],
[274,275,269,0,278,279,263,268,263],
[276,271,260,273,0,261,272,265,273],
[278,283,288,272,290,0,281,274,281],
[284,273,262,288,279,270,0,296,271],
[266,266,279,283,286,277,255,0,268],
[270,284,280,288,278,270,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,295,277,284,290,289,295,278],
[278,0,282,299,274,287,283,292,293],
[256,269,0,290,273,255,270,269,257],
[274,252,261,0,263,271,257,300,278],
[267,277,278,288,0,273,262,282,273],
[261,264,296,280,278,0,267,289,286],
[262,268,281,294,289,284,0,279,268],
[256,259,282,251,269,262,272,0,267],
[273,258,294,273,278,265,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,258,297,270,281,265,276,252],
[258,0,270,270,278,279,256,253,285],
[293,281,0,282,264,287,258,284,250],
[254,281,269,0,270,273,238,273,264],
[281,273,287,281,0,286,280,281,269],
[270,272,264,278,265,0,229,254,257],
[286,295,293,313,271,322,0,297,285],
[275,298,267,278,270,297,254,0,281],
[299,266,301,287,282,294,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,300,279,255,283,285,278,284],
[258,0,270,259,258,264,260,263,268],
[251,281,0,274,263,259,257,261,265],
[272,292,277,0,272,276,276,255,284],
[296,293,288,279,0,265,277,277,273],
[268,287,292,275,286,0,283,280,269],
[266,291,294,275,274,268,0,249,262],
[273,288,290,296,274,271,302,0,280],
[267,283,286,267,278,282,289,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,292,279,301,281,311,273,314],
[266,0,261,264,277,267,299,267,283],
[259,290,0,280,271,279,282,258,285],
[272,287,271,0,278,282,300,279,290],
[250,274,280,273,0,280,295,256,296],
[270,284,272,269,271,0,281,253,289],
[240,252,269,251,256,270,0,248,267],
[278,284,293,272,295,298,303,0,298],
[237,268,266,261,255,262,284,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,284,303,258,282,294,287,298],
[281,0,290,295,271,268,318,296,286],
[267,261,0,305,271,279,263,282,286],
[248,256,246,0,260,264,283,289,297],
[293,280,280,291,0,266,304,284,267],
[269,283,272,287,285,0,299,283,278],
[257,233,288,268,247,252,0,258,261],
[264,255,269,262,267,268,293,0,263],
[253,265,265,254,284,273,290,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,297,260,249,250,286,267,259],
[284,0,261,270,261,266,296,249,278],
[254,290,0,271,259,276,281,244,264],
[291,281,280,0,271,265,267,246,254],
[302,290,292,280,0,284,278,257,276],
[301,285,275,286,267,0,272,279,266],
[265,255,270,284,273,279,0,273,263],
[284,302,307,305,294,272,278,0,263],
[292,273,287,297,275,285,288,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,297,291,291,299,268,317,321],
[242,0,280,260,279,275,270,269,303],
[254,271,0,287,291,270,287,305,295],
[260,291,264,0,270,280,261,297,297],
[260,272,260,281,0,285,266,297,290],
[252,276,281,271,266,0,266,293,287],
[283,281,264,290,285,285,0,291,290],
[234,282,246,254,254,258,260,0,272],
[230,248,256,254,261,264,261,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,276,260,243,284,250,266,282],
[303,0,302,280,279,293,277,273,285],
[275,249,0,278,259,294,275,266,273],
[291,271,273,0,287,310,277,279,256],
[308,272,292,264,0,279,263,281,266],
[267,258,257,241,272,0,267,279,270],
[301,274,276,274,288,284,0,293,280],
[285,278,285,272,270,272,258,0,266],
[269,266,278,295,285,281,271,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,265,243,266,240,261,276],
[284,0,295,297,276,287,256,268,298],
[285,256,0,274,244,261,244,282,258],
[286,254,277,0,251,254,265,280,272],
[308,275,307,300,0,283,290,289,312],
[285,264,290,297,268,0,268,296,279],
[311,295,307,286,261,283,0,289,282],
[290,283,269,271,262,255,262,0,278],
[275,253,293,279,239,272,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,264,256,277,256,259,271,274],
[292,0,282,268,276,261,273,264,272],
[287,269,0,272,273,259,267,274,267],
[295,283,279,0,279,271,272,272,289],
[274,275,278,272,0,260,279,264,270],
[295,290,292,280,291,0,266,285,286],
[292,278,284,279,272,285,0,277,285],
[280,287,277,279,287,266,274,0,269],
[277,279,284,262,281,265,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,210,259,237,224,237,199,266],
[334,0,260,321,309,299,282,269,290],
[341,291,0,340,254,251,326,343,289],
[292,230,211,0,286,232,245,247,275],
[314,242,297,265,0,309,275,305,300],
[327,252,300,319,242,0,262,280,283],
[314,269,225,306,276,289,0,280,251],
[352,282,208,304,246,271,271,0,251],
[285,261,262,276,251,268,300,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,327,283,283,273,344,277,294],
[289,0,334,275,314,305,320,279,297],
[224,217,0,243,259,268,287,227,250],
[268,276,308,0,273,303,324,261,317],
[268,237,292,278,0,273,325,224,309],
[278,246,283,248,278,0,297,263,309],
[207,231,264,227,226,254,0,197,258],
[274,272,324,290,327,288,354,0,307],
[257,254,301,234,242,242,293,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,295,276,262,272,286,272],
[282,0,295,298,287,296,274,301,281],
[279,256,0,263,260,269,264,287,269],
[256,253,288,0,267,254,267,286,284],
[275,264,291,284,0,292,265,303,263],
[289,255,282,297,259,0,282,299,264],
[279,277,287,284,286,269,0,300,284],
[265,250,264,265,248,252,251,0,260],
[279,270,282,267,288,287,267,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,287,267,263,300,284,294,289],
[289,0,328,270,296,319,300,289,293],
[264,223,0,245,239,265,258,249,274],
[284,281,306,0,269,306,278,282,296],
[288,255,312,282,0,278,267,249,276],
[251,232,286,245,273,0,251,261,253],
[267,251,293,273,284,300,0,293,291],
[257,262,302,269,302,290,258,0,290],
[262,258,277,255,275,298,260,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,248,233,266,273,231,287,264],
[281,0,266,267,270,258,260,297,264],
[303,285,0,275,288,280,285,297,266],
[318,284,276,0,297,279,269,301,302],
[285,281,263,254,0,288,271,286,282],
[278,293,271,272,263,0,280,286,278],
[320,291,266,282,280,271,0,300,288],
[264,254,254,250,265,265,251,0,265],
[287,287,285,249,269,273,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,281,315,249,297,314,270,262],
[260,0,255,240,239,250,274,241,255],
[270,296,0,277,233,303,267,217,237],
[236,311,274,0,251,251,294,271,232],
[302,312,318,300,0,303,268,258,242],
[254,301,248,300,248,0,230,229,238],
[237,277,284,257,283,321,0,275,277],
[281,310,334,280,293,322,276,0,231],
[289,296,314,319,309,313,274,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,267,265,267,277,264,299],
[283,0,273,289,259,274,280,253,295],
[266,278,0,285,255,260,281,272,297],
[284,262,266,0,263,257,286,253,295],
[286,292,296,288,0,284,269,282,316],
[284,277,291,294,267,0,300,261,292],
[274,271,270,265,282,251,0,295,292],
[287,298,279,298,269,290,256,0,315],
[252,256,254,256,235,259,259,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,297,289,250,262,251,265,289],
[278,0,306,277,267,271,283,280,298],
[254,245,0,262,250,249,237,256,264],
[262,274,289,0,255,281,256,298,290],
[301,284,301,296,0,277,275,295,328],
[289,280,302,270,274,0,258,286,309],
[300,268,314,295,276,293,0,273,298],
[286,271,295,253,256,265,278,0,286],
[262,253,287,261,223,242,253,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,259,266,270,266,280,258,242],
[266,0,262,293,260,296,250,294,277],
[292,289,0,243,295,301,269,264,278],
[285,258,308,0,268,276,259,277,246],
[281,291,256,283,0,293,266,271,255],
[285,255,250,275,258,0,255,285,257],
[271,301,282,292,285,296,0,270,246],
[293,257,287,274,280,266,281,0,269],
[309,274,273,305,296,294,305,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,256,270,281,245,223,278,277],
[294,0,283,295,293,289,255,283,278],
[295,268,0,306,321,296,280,298,277],
[281,256,245,0,279,253,262,276,272],
[270,258,230,272,0,251,231,263,250],
[306,262,255,298,300,0,255,289,282],
[328,296,271,289,320,296,0,274,268],
[273,268,253,275,288,262,277,0,244],
[274,273,274,279,301,269,283,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,278,245,258,223,266,251,251],
[303,0,326,255,276,304,312,296,279],
[273,225,0,282,284,241,281,276,262],
[306,296,269,0,310,274,295,273,288],
[293,275,267,241,0,239,267,254,241],
[328,247,310,277,312,0,323,290,292],
[285,239,270,256,284,228,0,271,271],
[300,255,275,278,297,261,280,0,256],
[300,272,289,263,310,259,280,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,270,269,256,265,259,281,265],
[292,0,252,266,259,271,262,289,260],
[281,299,0,281,278,291,264,272,262],
[282,285,270,0,263,264,275,281,274],
[295,292,273,288,0,282,310,318,281],
[286,280,260,287,269,0,262,268,262],
[292,289,287,276,241,289,0,291,265],
[270,262,279,270,233,283,260,0,254],
[286,291,289,277,270,289,286,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,251,266,286,278,286,262,259],
[259,0,251,276,257,244,260,247,234],
[300,300,0,305,290,271,315,293,270],
[285,275,246,0,263,269,290,257,256],
[265,294,261,288,0,279,278,254,291],
[273,307,280,282,272,0,286,245,281],
[265,291,236,261,273,265,0,258,251],
[289,304,258,294,297,306,293,0,258],
[292,317,281,295,260,270,300,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,321,317,277,310,308,285,275],
[182,0,214,244,230,271,182,264,239],
[230,337,0,252,236,238,237,235,306],
[234,307,299,0,202,240,316,286,345],
[274,321,315,349,0,271,266,301,322],
[241,280,313,311,280,0,269,264,328],
[243,369,314,235,285,282,0,270,268],
[266,287,316,265,250,287,281,0,283],
[276,312,245,206,229,223,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,244,299,278,259,253,241],
[284,0,256,270,279,262,245,254,273],
[290,295,0,269,306,289,269,255,266],
[307,281,282,0,289,278,280,257,265],
[252,272,245,262,0,251,246,239,233],
[273,289,262,273,300,0,259,259,266],
[292,306,282,271,305,292,0,277,281],
[298,297,296,294,312,292,274,0,283],
[310,278,285,286,318,285,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,303,260,282,296,302,294],
[267,0,284,294,258,277,290,302,288],
[277,267,0,296,270,286,270,264,292],
[248,257,255,0,246,252,259,259,272],
[291,293,281,305,0,276,297,273,303],
[269,274,265,299,275,0,271,286,292],
[255,261,281,292,254,280,0,291,267],
[249,249,287,292,278,265,260,0,272],
[257,263,259,279,248,259,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,294,294,264,266,264,303,262],
[290,0,278,270,274,257,260,292,245],
[257,273,0,278,243,267,260,299,281],
[257,281,273,0,265,254,258,290,265],
[287,277,308,286,0,268,284,334,287],
[285,294,284,297,283,0,265,313,274],
[287,291,291,293,267,286,0,325,271],
[248,259,252,261,217,238,226,0,220],
[289,306,270,286,264,277,280,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,307,267,270,261,281,297,276],
[305,0,323,285,268,275,290,301,283],
[244,228,0,230,232,240,219,242,257],
[284,266,321,0,276,282,260,306,277],
[281,283,319,275,0,270,296,302,290],
[290,276,311,269,281,0,287,278,292],
[270,261,332,291,255,264,0,298,295],
[254,250,309,245,249,273,253,0,262],
[275,268,294,274,261,259,256,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,279,277,287,293,262,267,286],
[256,0,285,256,265,278,259,288,267],
[272,266,0,251,281,283,276,264,262],
[274,295,300,0,292,264,292,304,293],
[264,286,270,259,0,253,276,276,285],
[258,273,268,287,298,0,298,283,284],
[289,292,275,259,275,253,0,275,290],
[284,263,287,247,275,268,276,0,271],
[265,284,289,258,266,267,261,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,272,272,279,276,287,288,292],
[280,0,260,273,277,256,288,291,297],
[279,291,0,287,279,270,299,293,294],
[279,278,264,0,280,264,280,284,299],
[272,274,272,271,0,271,271,295,305],
[275,295,281,287,280,0,287,302,303],
[264,263,252,271,280,264,0,293,288],
[263,260,258,267,256,249,258,0,279],
[259,254,257,252,246,248,263,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,247,258,252,256,259,273,262],
[289,0,266,301,254,278,283,287,284],
[304,285,0,293,268,275,262,262,289],
[293,250,258,0,246,277,268,244,284],
[299,297,283,305,0,292,271,279,293],
[295,273,276,274,259,0,271,288,282],
[292,268,289,283,280,280,0,281,275],
[278,264,289,307,272,263,270,0,265],
[289,267,262,267,258,269,276,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,284,274,281,285,290,271,311],
[242,0,252,277,249,247,245,257,266],
[267,299,0,274,270,277,287,280,298],
[277,274,277,0,278,274,280,274,269],
[270,302,281,273,0,260,258,268,258],
[266,304,274,277,291,0,267,257,260],
[261,306,264,271,293,284,0,255,270],
[280,294,271,277,283,294,296,0,306],
[240,285,253,282,293,291,281,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,261,268,266,268,271,289,278],
[279,0,273,276,281,278,279,296,275],
[290,278,0,263,273,272,273,283,270],
[283,275,288,0,286,283,284,291,287],
[285,270,278,265,0,275,268,283,261],
[283,273,279,268,276,0,271,281,273],
[280,272,278,267,283,280,0,284,280],
[262,255,268,260,268,270,267,0,263],
[273,276,281,264,290,278,271,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,301,260,259,281,264,297,269],
[262,0,287,268,275,310,295,299,272],
[250,264,0,231,239,255,255,288,264],
[291,283,320,0,270,271,298,314,285],
[292,276,312,281,0,263,269,301,281],
[270,241,296,280,288,0,284,313,288],
[287,256,296,253,282,267,0,286,288],
[254,252,263,237,250,238,265,0,261],
[282,279,287,266,270,263,263,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,272,291,274,277,283,267,303],
[260,0,283,294,302,284,294,268,303],
[279,268,0,293,281,282,301,276,289],
[260,257,258,0,258,268,287,258,291],
[277,249,270,293,0,264,284,277,282],
[274,267,269,283,287,0,284,277,290],
[268,257,250,264,267,267,0,263,262],
[284,283,275,293,274,274,288,0,296],
[248,248,262,260,269,261,289,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,303,275,217,285,280,332,327],
[251,0,277,251,212,265,245,286,307],
[248,274,0,295,276,318,302,260,314],
[276,300,256,0,205,266,260,299,341],
[334,339,275,346,0,328,322,328,358],
[266,286,233,285,223,0,317,308,303],
[271,306,249,291,229,234,0,325,313],
[219,265,291,252,223,243,226,0,276],
[224,244,237,210,193,248,238,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,292,274,289,276,274,280,278],
[279,0,300,300,279,294,276,269,283],
[259,251,0,272,267,247,262,250,262],
[277,251,279,0,269,261,276,250,261],
[262,272,284,282,0,274,277,269,257],
[275,257,304,290,277,0,280,274,272],
[277,275,289,275,274,271,0,256,271],
[271,282,301,301,282,277,295,0,280],
[273,268,289,290,294,279,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,296,305,271,319,280,336],
[268,0,276,239,283,331,255,284,272],
[278,275,0,310,288,255,322,279,324],
[255,312,241,0,274,298,291,299,288],
[246,268,263,277,0,280,275,223,259],
[280,220,296,253,271,0,258,234,243],
[232,296,229,260,276,293,0,274,277],
[271,267,272,252,328,317,277,0,289],
[215,279,227,263,292,308,274,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,313,275,265,290,287,354,286],
[248,0,289,275,290,286,300,286,279],
[238,262,0,256,240,297,235,270,238],
[276,276,295,0,258,255,259,289,272],
[286,261,311,293,0,300,289,333,291],
[261,265,254,296,251,0,270,318,259],
[264,251,316,292,262,281,0,315,270],
[197,265,281,262,218,233,236,0,252],
[265,272,313,279,260,292,281,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,237,245,277,259,255,259,245],
[290,0,264,277,279,266,254,271,280],
[314,287,0,274,313,282,265,270,306],
[306,274,277,0,273,262,279,258,279],
[274,272,238,278,0,258,251,266,271],
[292,285,269,289,293,0,281,282,277],
[296,297,286,272,300,270,0,275,286],
[292,280,281,293,285,269,276,0,278],
[306,271,245,272,280,274,265,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,305,260,316,269,282,309,291],
[280,0,279,260,278,235,288,287,264],
[246,272,0,248,281,250,271,268,243],
[291,291,303,0,298,263,296,287,262],
[235,273,270,253,0,273,276,248,233],
[282,316,301,288,278,0,294,288,269],
[269,263,280,255,275,257,0,277,239],
[242,264,283,264,303,263,274,0,246],
[260,287,308,289,318,282,312,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,263,262,277,279,294,270],
[283,0,293,262,285,279,279,299,276],
[270,258,0,258,278,279,278,286,285],
[288,289,293,0,270,274,297,294,272],
[289,266,273,281,0,290,292,282,284],
[274,272,272,277,261,0,277,286,260],
[272,272,273,254,259,274,0,279,272],
[257,252,265,257,269,265,272,0,254],
[281,275,266,279,267,291,279,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,299,298,290,273,291,288,272],
[287,0,294,303,272,274,290,294,275],
[252,257,0,285,264,288,259,261,250],
[253,248,266,0,259,261,271,261,268],
[261,279,287,292,0,288,292,282,284],
[278,277,263,290,263,0,258,283,282],
[260,261,292,280,259,293,0,282,270],
[263,257,290,290,269,268,269,0,260],
[279,276,301,283,267,269,281,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,251,277,264,276,270,281,290],
[290,0,281,268,274,291,294,276,275],
[300,270,0,273,291,305,277,281,281],
[274,283,278,0,296,306,276,286,282],
[287,277,260,255,0,280,286,281,271],
[275,260,246,245,271,0,273,273,269],
[281,257,274,275,265,278,0,265,269],
[270,275,270,265,270,278,286,0,261],
[261,276,270,269,280,282,282,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,261,291,237,261,252,330,221],
[289,0,203,306,218,267,302,342,251],
[290,348,0,320,280,337,326,353,242],
[260,245,231,0,183,256,289,326,225],
[314,333,271,368,0,321,322,348,302],
[290,284,214,295,230,0,281,272,232],
[299,249,225,262,229,270,0,335,217],
[221,209,198,225,203,279,216,0,239],
[330,300,309,326,249,319,334,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,315,331,235,324,303,245,234],
[264,0,244,364,247,322,289,290,279],
[236,307,0,308,234,281,293,233,250],
[220,187,243,0,216,248,217,233,205],
[316,304,317,335,0,311,292,263,264],
[227,229,270,303,240,0,285,228,218],
[248,262,258,334,259,266,0,262,234],
[306,261,318,318,288,323,289,0,308],
[317,272,301,346,287,333,317,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,266,272,257,289,269,260,279],
[282,0,267,271,287,260,272,259,264],
[285,284,0,284,281,258,274,252,282],
[279,280,267,0,293,260,261,265,256],
[294,264,270,258,0,264,236,261,260],
[262,291,293,291,287,0,292,283,267],
[282,279,277,290,315,259,0,273,260],
[291,292,299,286,290,268,278,0,270],
[272,287,269,295,291,284,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,291,291,307,300,282,291,274],
[262,0,233,247,280,266,246,255,256],
[260,318,0,293,275,280,292,282,280],
[260,304,258,0,277,285,270,274,245],
[244,271,276,274,0,282,264,274,264],
[251,285,271,266,269,0,267,259,271],
[269,305,259,281,287,284,0,269,262],
[260,296,269,277,277,292,282,0,279],
[277,295,271,306,287,280,289,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,302,293,268,273,275,294],
[276,0,279,293,296,272,271,283,285],
[279,272,0,274,303,281,281,270,310],
[249,258,277,0,281,247,277,269,291],
[258,255,248,270,0,267,259,281,281],
[283,279,270,304,284,0,278,282,294],
[278,280,270,274,292,273,0,273,293],
[276,268,281,282,270,269,278,0,277],
[257,266,241,260,270,257,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,303,272,277,283,285,294,324],
[247,0,285,263,268,278,257,275,300],
[248,266,0,237,240,238,252,267,278],
[279,288,314,0,275,284,280,317,315],
[274,283,311,276,0,278,262,280,304],
[268,273,313,267,273,0,291,286,298],
[266,294,299,271,289,260,0,268,292],
[257,276,284,234,271,265,283,0,286],
[227,251,273,236,247,253,259,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,265,280,304,266,266,300,253],
[258,0,258,286,271,271,247,280,273],
[286,293,0,293,285,265,274,319,272],
[271,265,258,0,285,275,274,290,260],
[247,280,266,266,0,279,233,270,276],
[285,280,286,276,272,0,279,297,252],
[285,304,277,277,318,272,0,296,256],
[251,271,232,261,281,254,255,0,232],
[298,278,279,291,275,299,295,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,313,271,261,339,242,291,235],
[296,0,280,293,237,253,290,259,253],
[238,271,0,285,247,273,199,276,249],
[280,258,266,0,261,250,210,265,266],
[290,314,304,290,0,289,251,303,276],
[212,298,278,301,262,0,221,245,280],
[309,261,352,341,300,330,0,327,301],
[260,292,275,286,248,306,224,0,271],
[316,298,302,285,275,271,250,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,268,287,270,287,263,279,293],
[275,0,267,280,270,280,265,247,271],
[283,284,0,275,262,284,257,281,280],
[264,271,276,0,265,266,273,255,260],
[281,281,289,286,0,289,271,273,282],
[264,271,267,285,262,0,255,266,263],
[288,286,294,278,280,296,0,267,270],
[272,304,270,296,278,285,284,0,293],
[258,280,271,291,269,288,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,268,275,283,288,278,265],
[291,0,289,273,291,308,283,271,271],
[285,262,0,282,267,286,281,268,270],
[283,278,269,0,269,273,284,267,263],
[276,260,284,282,0,265,263,263,274],
[268,243,265,278,286,0,266,265,246],
[263,268,270,267,288,285,0,271,278],
[273,280,283,284,288,286,280,0,270],
[286,280,281,288,277,305,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,269,262,265,272,266,270,268],
[277,0,282,277,264,263,267,284,286],
[282,269,0,267,259,255,258,270,279],
[289,274,284,0,262,270,283,284,283],
[286,287,292,289,0,266,275,280,273],
[279,288,296,281,285,0,272,279,271],
[285,284,293,268,276,279,0,284,284],
[281,267,281,267,271,272,267,0,273],
[283,265,272,268,278,280,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,236,273,231,277,248,265,248],
[296,0,268,264,232,279,262,275,260],
[315,283,0,278,229,299,275,294,253],
[278,287,273,0,240,276,264,259,248],
[320,319,322,311,0,327,310,275,293],
[274,272,252,275,224,0,254,265,234],
[303,289,276,287,241,297,0,287,261],
[286,276,257,292,276,286,264,0,263],
[303,291,298,303,258,317,290,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,241,343,242,242,274,344,276],
[305,0,273,309,236,275,204,309,273],
[310,278,0,412,274,347,312,413,413],
[208,242,139,0,206,210,243,275,274],
[309,315,277,345,0,208,311,278,312],
[309,276,204,341,343,0,236,240,344],
[277,347,239,308,240,315,0,311,380],
[207,242,138,276,273,311,240,0,274],
[275,278,138,277,239,207,171,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,273,267,262,256,285,257,269],
[280,0,284,282,258,265,295,273,294],
[278,267,0,299,283,293,301,287,280],
[284,269,252,0,253,250,284,277,246],
[289,293,268,298,0,259,293,269,282],
[295,286,258,301,292,0,318,277,293],
[266,256,250,267,258,233,0,249,272],
[294,278,264,274,282,274,302,0,290],
[282,257,271,305,269,258,279,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,284,275,273,265,269,279,265],
[268,0,252,288,274,273,263,264,258],
[267,299,0,271,281,282,276,279,256],
[276,263,280,0,269,288,272,265,268],
[278,277,270,282,0,273,278,282,263],
[286,278,269,263,278,0,277,273,267],
[282,288,275,279,273,274,0,271,265],
[272,287,272,286,269,278,280,0,276],
[286,293,295,283,288,284,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,274,267,302,286,302,308,332],
[238,0,265,273,267,246,279,207,301],
[277,286,0,256,267,273,289,267,334],
[284,278,295,0,285,310,331,261,328],
[249,284,284,266,0,291,290,259,292],
[265,305,278,241,260,0,302,253,294],
[249,272,262,220,261,249,0,189,294],
[243,344,284,290,292,298,362,0,355],
[219,250,217,223,259,257,257,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,285,267,263,259,258,268,259],
[280,0,280,248,244,264,273,280,246],
[266,271,0,265,243,280,256,253,236],
[284,303,286,0,289,280,273,283,273],
[288,307,308,262,0,292,274,283,289],
[292,287,271,271,259,0,270,280,256],
[293,278,295,278,277,281,0,273,266],
[283,271,298,268,268,271,278,0,273],
[292,305,315,278,262,295,285,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,256,281,271,269,285,280],
[279,0,257,250,249,269,254,273,279],
[277,294,0,266,291,272,275,282,323],
[295,301,285,0,260,278,276,298,282],
[270,302,260,291,0,266,298,295,288],
[280,282,279,273,285,0,274,274,295],
[282,297,276,275,253,277,0,272,304],
[266,278,269,253,256,277,279,0,277],
[271,272,228,269,263,256,247,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 551, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_551.csv", index=False, header=False)
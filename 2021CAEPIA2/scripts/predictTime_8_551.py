
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,269,266,244,273,262,271,271],
[282,0,275,286,282,265,263,275],
[285,276,0,274,270,281,284,270],
[307,265,277,0,269,273,269,279],
[278,269,281,282,0,268,276,275],
[289,286,270,278,283,0,274,269],
[280,288,267,282,275,277,0,282],
[280,276,281,272,276,282,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,269,270,278,275,274,269],
[282,0,268,266,289,306,255,265],
[282,283,0,276,301,293,277,271],
[281,285,275,0,303,278,275,273],
[273,262,250,248,0,278,261,259],
[276,245,258,273,273,0,259,261],
[277,296,274,276,290,292,0,276],
[282,286,280,278,292,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,279,280,290,287,307,283],
[281,0,294,275,303,267,296,271],
[272,257,0,249,288,278,269,254],
[271,276,302,0,292,287,293,278],
[261,248,263,259,0,256,303,246],
[264,284,273,264,295,0,291,270],
[244,255,282,258,248,260,0,246],
[268,280,297,273,305,281,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,254,258,292,247,262,255],
[294,0,274,246,272,269,280,273],
[297,277,0,279,305,257,280,280],
[293,305,272,0,297,292,270,278],
[259,279,246,254,0,268,277,272],
[304,282,294,259,283,0,304,280],
[289,271,271,281,274,247,0,267],
[296,278,271,273,279,271,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,222,292,246,287,281,280],
[264,0,267,242,286,205,267,253],
[329,284,0,280,257,228,268,262],
[259,309,271,0,357,221,251,315],
[305,265,294,194,0,319,274,296],
[264,346,323,330,232,0,294,310],
[270,284,283,300,277,257,0,241],
[271,298,289,236,255,241,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,259,269,263,266,241,245],
[308,0,269,308,322,296,267,288],
[292,282,0,286,300,281,284,265],
[282,243,265,0,276,277,246,276],
[288,229,251,275,0,284,240,252],
[285,255,270,274,267,0,264,267],
[310,284,267,305,311,287,0,284],
[306,263,286,275,299,284,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,282,283,252,267,274,287],
[285,0,276,250,294,258,269,247],
[269,275,0,235,267,281,263,243],
[268,301,316,0,290,304,303,283],
[299,257,284,261,0,260,273,262],
[284,293,270,247,291,0,290,250],
[277,282,288,248,278,261,0,266],
[264,304,308,268,289,301,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,267,268,282,278,269,282],
[255,0,249,236,282,284,260,256],
[284,302,0,280,311,292,277,268],
[283,315,271,0,293,303,278,296],
[269,269,240,258,0,275,279,276],
[273,267,259,248,276,0,272,289],
[282,291,274,273,272,279,0,287],
[269,295,283,255,275,262,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,290,290,284,289,287,291],
[286,0,273,290,281,289,275,290],
[261,278,0,291,279,282,278,266],
[261,261,260,0,263,287,267,272],
[267,270,272,288,0,270,268,268],
[262,262,269,264,281,0,262,277],
[264,276,273,284,283,289,0,271],
[260,261,285,279,283,274,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,272,304,284,315,314,283],
[254,0,251,305,272,268,296,273],
[279,300,0,302,252,308,294,306],
[247,246,249,0,242,280,218,248],
[267,279,299,309,0,268,308,294],
[236,283,243,271,283,0,247,291],
[237,255,257,333,243,304,0,253],
[268,278,245,303,257,260,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,279,270,253,275,295,257],
[264,0,298,265,247,297,264,287],
[272,253,0,286,283,270,270,306],
[281,286,265,0,302,298,253,263],
[298,304,268,249,0,308,283,252],
[276,254,281,253,243,0,258,261],
[256,287,281,298,268,293,0,286],
[294,264,245,288,299,290,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,274,274,280,275,274,275],
[250,0,272,263,269,284,255,279],
[277,279,0,288,270,283,266,290],
[277,288,263,0,294,301,301,307],
[271,282,281,257,0,297,265,296],
[276,267,268,250,254,0,245,273],
[277,296,285,250,286,306,0,279],
[276,272,261,244,255,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,252,252,253,259,281,265],
[271,0,297,266,298,260,288,278],
[299,254,0,263,268,276,283,284],
[299,285,288,0,314,282,290,273],
[298,253,283,237,0,286,237,247],
[292,291,275,269,265,0,228,266],
[270,263,268,261,314,323,0,348],
[286,273,267,278,304,285,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,277,249,281,285,279,268],
[264,0,259,278,269,269,273,289],
[274,292,0,261,281,258,268,283],
[302,273,290,0,297,262,283,310],
[270,282,270,254,0,277,283,271],
[266,282,293,289,274,0,291,289],
[272,278,283,268,268,260,0,272],
[283,262,268,241,280,262,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,298,283,280,271,243],
[277,0,286,294,274,266,285,259],
[271,265,0,289,280,273,262,263],
[253,257,262,0,293,263,272,245],
[268,277,271,258,0,258,252,257],
[271,285,278,288,293,0,289,278],
[280,266,289,279,299,262,0,281],
[308,292,288,306,294,273,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,279,270,273,303,288,283],
[249,0,264,267,265,265,249,260],
[272,287,0,286,285,288,290,264],
[281,284,265,0,249,277,276,249],
[278,286,266,302,0,277,268,289],
[248,286,263,274,274,0,275,267],
[263,302,261,275,283,276,0,246],
[268,291,287,302,262,284,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,314,300,293,275,269,278],
[255,0,285,267,274,273,257,264],
[237,266,0,265,268,264,272,251],
[251,284,286,0,268,299,242,260],
[258,277,283,283,0,301,258,270],
[276,278,287,252,250,0,291,283],
[282,294,279,309,293,260,0,276],
[273,287,300,291,281,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,296,284,290,282,301,303],
[277,0,272,258,271,280,288,313],
[255,279,0,267,278,269,320,311],
[267,293,284,0,289,296,324,312],
[261,280,273,262,0,277,332,300],
[269,271,282,255,274,0,316,296],
[250,263,231,227,219,235,0,247],
[248,238,240,239,251,255,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,253,293,278,247,258,288],
[260,0,257,262,289,265,237,295],
[298,294,0,281,297,283,250,311],
[258,289,270,0,292,269,274,297],
[273,262,254,259,0,236,246,280],
[304,286,268,282,315,0,287,290],
[293,314,301,277,305,264,0,314],
[263,256,240,254,271,261,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,275,265,267,276,281],
[271,0,283,275,274,260,272,297],
[267,268,0,283,272,276,272,287],
[276,276,268,0,254,253,262,296],
[286,277,279,297,0,276,274,317],
[284,291,275,298,275,0,286,297],
[275,279,279,289,277,265,0,289],
[270,254,264,255,234,254,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,244,248,287,234,258,272],
[324,0,342,299,297,288,273,325],
[307,209,0,269,245,252,260,293],
[303,252,282,0,262,251,291,303],
[264,254,306,289,0,286,281,323],
[317,263,299,300,265,0,286,302],
[293,278,291,260,270,265,0,296],
[279,226,258,248,228,249,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,290,287,299,300,318],
[280,0,281,284,260,289,291,314],
[277,270,0,285,269,299,294,324],
[261,267,266,0,264,280,288,289],
[264,291,282,287,0,313,303,327],
[252,262,252,271,238,0,266,282],
[251,260,257,263,248,285,0,304],
[233,237,227,262,224,269,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,296,301,221,282,328,276],
[250,0,194,260,230,187,300,222],
[255,357,0,321,232,286,313,325],
[250,291,230,0,228,189,211,219],
[330,321,319,323,0,228,306,227],
[269,364,265,362,323,0,343,277],
[223,251,238,340,245,208,0,183],
[275,329,226,332,324,274,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,287,327,292,327,285,275],
[221,0,246,295,305,273,267,283],
[264,305,0,311,291,320,273,278],
[224,256,240,0,245,252,275,232],
[259,246,260,306,0,309,274,241],
[224,278,231,299,242,0,230,252],
[266,284,278,276,277,321,0,266],
[276,268,273,319,310,299,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,278,276,273,268,282,286],
[293,0,287,273,274,286,282,282],
[273,264,0,272,270,270,277,267],
[275,278,279,0,259,277,267,282],
[278,277,281,292,0,276,265,296],
[283,265,281,274,275,0,273,286],
[269,269,274,284,286,278,0,287],
[265,269,284,269,255,265,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,255,275,260,246,271,257],
[276,0,278,268,245,259,262,263],
[296,273,0,261,269,256,281,271],
[276,283,290,0,276,260,276,265],
[291,306,282,275,0,281,315,285],
[305,292,295,291,270,0,308,292],
[280,289,270,275,236,243,0,283],
[294,288,280,286,266,259,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,228,353,280,224,258,238],
[354,0,366,316,363,319,273,285],
[323,185,0,246,328,277,261,227],
[198,235,305,0,308,184,242,159],
[271,188,223,243,0,208,211,126],
[327,232,274,367,343,0,276,266],
[293,278,290,309,340,275,0,285],
[313,266,324,392,425,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,313,281,290,273,269],
[271,0,267,283,276,260,248,277],
[275,284,0,282,280,282,294,284],
[238,268,269,0,260,288,247,260],
[270,275,271,291,0,265,240,265],
[261,291,269,263,286,0,276,271],
[278,303,257,304,311,275,0,280],
[282,274,267,291,286,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,261,282,269,253,283,267],
[264,0,276,296,284,261,267,274],
[290,275,0,271,287,279,266,272],
[269,255,280,0,262,253,243,264],
[282,267,264,289,0,279,254,282],
[298,290,272,298,272,0,269,286],
[268,284,285,308,297,282,0,284],
[284,277,279,287,269,265,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,273,264,276,274,270,290],
[279,0,265,273,279,266,259,273],
[278,286,0,283,284,258,280,284],
[287,278,268,0,287,276,279,281],
[275,272,267,264,0,281,280,269],
[277,285,293,275,270,0,275,278],
[281,292,271,272,271,276,0,273],
[261,278,267,270,282,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,248,245,248,274,265,232],
[261,0,233,237,267,258,233,216],
[303,318,0,276,295,266,293,271],
[306,314,275,0,300,294,291,270],
[303,284,256,251,0,279,265,241],
[277,293,285,257,272,0,266,231],
[286,318,258,260,286,285,0,278],
[319,335,280,281,310,320,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,279,274,283,279,273,280],
[291,0,276,269,284,274,267,291],
[272,275,0,258,280,268,264,263],
[277,282,293,0,278,269,280,311],
[268,267,271,273,0,268,258,254],
[272,277,283,282,283,0,284,304],
[278,284,287,271,293,267,0,284],
[271,260,288,240,297,247,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,291,303,263,275,276],
[275,0,261,298,282,262,276,266],
[280,290,0,284,291,274,290,263],
[260,253,267,0,267,268,270,259],
[248,269,260,284,0,276,293,272],
[288,289,277,283,275,0,301,277],
[276,275,261,281,258,250,0,236],
[275,285,288,292,279,274,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,234,288,225,238,286,302],
[350,0,240,311,347,317,343,308],
[317,311,0,377,271,326,375,325],
[263,240,174,0,216,261,268,273],
[326,204,280,335,0,228,371,338],
[313,234,225,290,323,0,323,342],
[265,208,176,283,180,228,0,285],
[249,243,226,278,213,209,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,274,310,281,283,306,291],
[286,0,276,294,267,297,283,307],
[277,275,0,271,247,255,265,271],
[241,257,280,0,260,233,271,254],
[270,284,304,291,0,275,305,267],
[268,254,296,318,276,0,309,267],
[245,268,286,280,246,242,0,256],
[260,244,280,297,284,284,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,269,268,261,259,268,272],
[278,0,257,273,271,261,272,281],
[282,294,0,268,277,274,279,267],
[283,278,283,0,279,261,282,273],
[290,280,274,272,0,282,273,290],
[292,290,277,290,269,0,269,289],
[283,279,272,269,278,282,0,270],
[279,270,284,278,261,262,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,253,322,253,241,253,240],
[354,0,220,313,302,271,312,281],
[298,331,0,258,255,352,279,285],
[229,238,293,0,217,237,255,309],
[298,249,296,334,0,361,246,274],
[310,280,199,314,190,0,236,265],
[298,239,272,296,305,315,0,287],
[311,270,266,242,277,286,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,270,275,255,260,274,292],
[280,0,260,280,280,266,286,279],
[281,291,0,279,280,290,264,284],
[276,271,272,0,262,275,274,274],
[296,271,271,289,0,263,284,281],
[291,285,261,276,288,0,277,261],
[277,265,287,277,267,274,0,269],
[259,272,267,277,270,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,265,295,295,279,279,283],
[257,0,270,266,264,276,273,271],
[286,281,0,292,284,270,267,275],
[256,285,259,0,286,293,266,272],
[256,287,267,265,0,280,266,247],
[272,275,281,258,271,0,269,267],
[272,278,284,285,285,282,0,295],
[268,280,276,279,304,284,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,278,252,265,235,268,274],
[252,0,259,211,234,244,231,288],
[273,292,0,241,245,233,272,277],
[299,340,310,0,291,272,286,302],
[286,317,306,260,0,286,262,292],
[316,307,318,279,265,0,245,296],
[283,320,279,265,289,306,0,301],
[277,263,274,249,259,255,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,266,286,268,276,277],
[288,0,286,257,272,270,301,279],
[280,265,0,254,278,264,274,273],
[285,294,297,0,286,295,300,275],
[265,279,273,265,0,265,265,271],
[283,281,287,256,286,0,270,271],
[275,250,277,251,286,281,0,283],
[274,272,278,276,280,280,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,266,277,245,253,245,250],
[293,0,262,286,286,260,279,265],
[285,289,0,276,275,289,277,289],
[274,265,275,0,264,273,252,261],
[306,265,276,287,0,275,274,281],
[298,291,262,278,276,0,264,272],
[306,272,274,299,277,287,0,276],
[301,286,262,290,270,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,289,286,268,256,267,257],
[306,0,288,259,247,267,287,243],
[262,263,0,254,232,233,304,229],
[265,292,297,0,298,284,303,284],
[283,304,319,253,0,280,302,270],
[295,284,318,267,271,0,291,270],
[284,264,247,248,249,260,0,244],
[294,308,322,267,281,281,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,273,262,283,278,272,273],
[269,0,264,272,288,256,273,286],
[278,287,0,269,286,277,283,271],
[289,279,282,0,273,270,279,256],
[268,263,265,278,0,260,272,255],
[273,295,274,281,291,0,276,281],
[279,278,268,272,279,275,0,264],
[278,265,280,295,296,270,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,255,260,234,276,264,258],
[302,0,304,318,275,308,290,314],
[296,247,0,260,284,300,275,269],
[291,233,291,0,278,306,272,284],
[317,276,267,273,0,331,278,248],
[275,243,251,245,220,0,256,264],
[287,261,276,279,273,295,0,240],
[293,237,282,267,303,287,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,253,298,271,276,275],
[267,0,274,274,304,262,283,280],
[272,277,0,297,289,281,288,277],
[298,277,254,0,315,280,280,290],
[253,247,262,236,0,261,251,280],
[280,289,270,271,290,0,257,275],
[275,268,263,271,300,294,0,292],
[276,271,274,261,271,276,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,251,301,289,282,287,304],
[264,0,275,280,288,287,263,266],
[300,276,0,259,289,274,277,279],
[250,271,292,0,275,283,286,257],
[262,263,262,276,0,267,277,270],
[269,264,277,268,284,0,280,271],
[264,288,274,265,274,271,0,247],
[247,285,272,294,281,280,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,271,294,240,274,294,315],
[308,0,273,305,257,263,281,312],
[280,278,0,295,260,251,278,292],
[257,246,256,0,232,263,264,284],
[311,294,291,319,0,303,263,290],
[277,288,300,288,248,0,300,317],
[257,270,273,287,288,251,0,279],
[236,239,259,267,261,234,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,283,274,305,280,305,266],
[269,0,294,246,281,284,283,280],
[268,257,0,241,256,258,261,261],
[277,305,310,0,275,283,300,282],
[246,270,295,276,0,276,280,266],
[271,267,293,268,275,0,293,265],
[246,268,290,251,271,258,0,257],
[285,271,290,269,285,286,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,249,241,269,241,256,236],
[304,0,273,276,290,291,319,300],
[302,278,0,269,307,275,299,292],
[310,275,282,0,285,281,283,294],
[282,261,244,266,0,272,272,290],
[310,260,276,270,279,0,290,281],
[295,232,252,268,279,261,0,278],
[315,251,259,257,261,270,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,270,257,266,291,269,290],
[281,0,282,270,274,297,277,283],
[281,269,0,248,271,296,296,285],
[294,281,303,0,272,283,286,271],
[285,277,280,279,0,279,272,278],
[260,254,255,268,272,0,265,278],
[282,274,255,265,279,286,0,277],
[261,268,266,280,273,273,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,250,277,264,289,262,287],
[279,0,264,272,264,263,248,264],
[301,287,0,276,269,297,299,320],
[274,279,275,0,268,287,293,286],
[287,287,282,283,0,284,273,290],
[262,288,254,264,267,0,278,298],
[289,303,252,258,278,273,0,271],
[264,287,231,265,261,253,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,223,241,237,227,225,238],
[292,0,274,267,280,270,273,289],
[328,277,0,257,277,278,306,291],
[310,284,294,0,295,260,289,291],
[314,271,274,256,0,250,273,261],
[324,281,273,291,301,0,299,299],
[326,278,245,262,278,252,0,288],
[313,262,260,260,290,252,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,291,276,294,298,309,302],
[279,0,296,274,267,288,323,285],
[260,255,0,287,280,318,309,272],
[275,277,264,0,282,309,269,305],
[257,284,271,269,0,306,289,333],
[253,263,233,242,245,0,276,290],
[242,228,242,282,262,275,0,266],
[249,266,279,246,218,261,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,288,276,260,301,274,292],
[292,0,269,287,267,301,282,299],
[263,282,0,284,266,289,285,308],
[275,264,267,0,276,306,314,323],
[291,284,285,275,0,312,321,280],
[250,250,262,245,239,0,236,278],
[277,269,266,237,230,315,0,276],
[259,252,243,228,271,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,274,285,291,285,283,280],
[286,0,274,289,298,285,283,284],
[277,277,0,274,282,286,278,256],
[266,262,277,0,289,288,268,274],
[260,253,269,262,0,281,269,257],
[266,266,265,263,270,0,270,267],
[268,268,273,283,282,281,0,277],
[271,267,295,277,294,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,251,278,272,286,276,278],
[294,0,282,287,283,293,273,290],
[300,269,0,286,273,305,282,302],
[273,264,265,0,266,273,273,297],
[279,268,278,285,0,283,292,279],
[265,258,246,278,268,0,271,273],
[275,278,269,278,259,280,0,282],
[273,261,249,254,272,278,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,306,300,272,296,272,283],
[256,0,282,286,264,267,262,273],
[245,269,0,273,270,259,252,275],
[251,265,278,0,254,253,256,266],
[279,287,281,297,0,267,279,274],
[255,284,292,298,284,0,280,285],
[279,289,299,295,272,271,0,282],
[268,278,276,285,277,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,298,266,311,289,319,311],
[313,0,297,302,325,275,348,320],
[253,254,0,292,306,268,303,291],
[285,249,259,0,287,259,290,255],
[240,226,245,264,0,274,288,308],
[262,276,283,292,277,0,292,292],
[232,203,248,261,263,259,0,268],
[240,231,260,296,243,259,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,252,289,282,306,328,310],
[298,0,269,274,293,303,303,310],
[299,282,0,277,260,328,319,280],
[262,277,274,0,283,326,295,317],
[269,258,291,268,0,291,269,276],
[245,248,223,225,260,0,265,287],
[223,248,232,256,282,286,0,269],
[241,241,271,234,275,264,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,260,262,275,244,263,268],
[280,0,274,262,289,287,280,257],
[291,277,0,288,295,267,280,261],
[289,289,263,0,264,259,281,267],
[276,262,256,287,0,265,263,250],
[307,264,284,292,286,0,293,278],
[288,271,271,270,288,258,0,267],
[283,294,290,284,301,273,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,271,274,277,262,268,285],
[257,0,266,286,271,293,281,281],
[280,285,0,282,276,272,279,277],
[277,265,269,0,277,269,279,263],
[274,280,275,274,0,274,278,271],
[289,258,279,282,277,0,278,274],
[283,270,272,272,273,273,0,270],
[266,270,274,288,280,277,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,260,285,273,293,279,261],
[289,0,297,285,292,303,300,258],
[291,254,0,281,289,277,287,283],
[266,266,270,0,279,282,276,275],
[278,259,262,272,0,261,257,268],
[258,248,274,269,290,0,295,268],
[272,251,264,275,294,256,0,266],
[290,293,268,276,283,283,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,291,301,275,283,269,259],
[246,0,258,282,248,266,262,247],
[260,293,0,307,293,296,298,257],
[250,269,244,0,248,283,268,257],
[276,303,258,303,0,262,265,262],
[268,285,255,268,289,0,285,266],
[282,289,253,283,286,266,0,293],
[292,304,294,294,289,285,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,267,277,291,257,284,249],
[287,0,293,302,298,269,290,283],
[284,258,0,275,278,270,272,265],
[274,249,276,0,282,245,259,265],
[260,253,273,269,0,265,283,249],
[294,282,281,306,286,0,296,272],
[267,261,279,292,268,255,0,267],
[302,268,286,286,302,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,289,262,277,283,290,284],
[266,0,277,253,276,272,276,274],
[262,274,0,276,259,261,279,258],
[289,298,275,0,275,286,303,279],
[274,275,292,276,0,263,296,269],
[268,279,290,265,288,0,281,275],
[261,275,272,248,255,270,0,273],
[267,277,293,272,282,276,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,258,281,291,273,278,300],
[262,0,269,236,283,271,258,262],
[293,282,0,252,290,275,265,286],
[270,315,299,0,294,286,271,277],
[260,268,261,257,0,256,261,273],
[278,280,276,265,295,0,274,277],
[273,293,286,280,290,277,0,281],
[251,289,265,274,278,274,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,281,231,237,237,211,277],
[337,0,290,318,262,309,293,324],
[270,261,0,255,257,226,244,285],
[320,233,296,0,225,258,215,335],
[314,289,294,326,0,269,259,260],
[314,242,325,293,282,0,258,301],
[340,258,307,336,292,293,0,325],
[274,227,266,216,291,250,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,254,276,273,247,259],
[273,0,277,265,259,254,263,254],
[284,274,0,252,257,268,273,257],
[297,286,299,0,277,280,271,256],
[275,292,294,274,0,286,290,277],
[278,297,283,271,265,0,265,268],
[304,288,278,280,261,286,0,273],
[292,297,294,295,274,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,301,265,293,321,297,272],
[288,0,296,253,267,271,248,304],
[250,255,0,260,257,253,256,263],
[286,298,291,0,285,300,259,291],
[258,284,294,266,0,292,278,309],
[230,280,298,251,259,0,267,284],
[254,303,295,292,273,284,0,304],
[279,247,288,260,242,267,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,274,274,291,262,258,264],
[299,0,254,277,298,282,277,268],
[277,297,0,283,298,279,272,280],
[277,274,268,0,270,280,257,272],
[260,253,253,281,0,251,269,269],
[289,269,272,271,300,0,271,279],
[293,274,279,294,282,280,0,274],
[287,283,271,279,282,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,284,275,274,275,253,273],
[266,0,263,268,273,283,242,266],
[267,288,0,278,266,281,254,269],
[276,283,273,0,266,297,264,280],
[277,278,285,285,0,290,276,266],
[276,268,270,254,261,0,249,256],
[298,309,297,287,275,302,0,286],
[278,285,282,271,285,295,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,276,231,212,250,287,243],
[249,0,285,201,243,224,265,227],
[275,266,0,227,251,249,274,257],
[320,350,324,0,294,266,327,277],
[339,308,300,257,0,303,276,286],
[301,327,302,285,248,0,301,261],
[264,286,277,224,275,250,0,256],
[308,324,294,274,265,290,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,334,270,317,250,303,239],
[193,0,306,208,245,213,281,215],
[217,245,0,224,261,193,203,219],
[281,343,327,0,290,238,259,277],
[234,306,290,261,0,194,270,205],
[301,338,358,313,357,0,357,275],
[248,270,348,292,281,194,0,286],
[312,336,332,274,346,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,270,277,259,313,294,265],
[230,0,260,242,248,257,266,237],
[281,291,0,272,265,289,266,285],
[274,309,279,0,278,303,290,294],
[292,303,286,273,0,320,288,272],
[238,294,262,248,231,0,263,252],
[257,285,285,261,263,288,0,267],
[286,314,266,257,279,299,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,276,266,267,301,270,271],
[296,0,299,286,273,301,278,291],
[275,252,0,301,295,277,259,298],
[285,265,250,0,265,279,259,286],
[284,278,256,286,0,299,274,269],
[250,250,274,272,252,0,237,262],
[281,273,292,292,277,314,0,308],
[280,260,253,265,282,289,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,253,261,292,247,264,259],
[286,0,288,305,291,289,276,260],
[298,263,0,289,315,283,264,243],
[290,246,262,0,284,282,272,277],
[259,260,236,267,0,242,236,262],
[304,262,268,269,309,0,262,284],
[287,275,287,279,315,289,0,268],
[292,291,308,274,289,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,235,285,216,230,252,243],
[307,0,282,289,279,253,264,281],
[316,269,0,302,264,289,299,305],
[266,262,249,0,238,256,255,262],
[335,272,287,313,0,272,281,301],
[321,298,262,295,279,0,294,312],
[299,287,252,296,270,257,0,271],
[308,270,246,289,250,239,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,267,301,259,251,284,272],
[307,0,283,288,292,269,294,276],
[284,268,0,286,270,272,259,277],
[250,263,265,0,260,255,253,264],
[292,259,281,291,0,275,293,273],
[300,282,279,296,276,0,295,271],
[267,257,292,298,258,256,0,277],
[279,275,274,287,278,280,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,237,302,285,314,239,269],
[287,0,350,371,266,337,307,281],
[314,201,0,357,238,311,290,305],
[249,180,194,0,270,284,228,247],
[266,285,313,281,0,290,284,254],
[237,214,240,267,261,0,269,260],
[312,244,261,323,267,282,0,305],
[282,270,246,304,297,291,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,281,280,313,254,271,288],
[261,0,277,252,310,246,225,254],
[270,274,0,279,320,266,276,272],
[271,299,272,0,321,273,282,288],
[238,241,231,230,0,241,215,254],
[297,305,285,278,310,0,273,289],
[280,326,275,269,336,278,0,305],
[263,297,279,263,297,262,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,171,146,198,289,329,198],
[340,0,249,201,325,325,339,263],
[380,302,0,201,325,393,407,331],
[405,350,350,0,247,270,261,179],
[353,226,226,304,0,386,268,226],
[262,226,158,281,165,0,261,274],
[222,212,144,290,283,290,0,420],
[353,288,220,372,325,277,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,239,309,264,251,265,236],
[281,0,277,257,245,221,253,247],
[312,274,0,265,266,274,296,263],
[242,294,286,0,239,249,268,235],
[287,306,285,312,0,250,268,273],
[300,330,277,302,301,0,300,273],
[286,298,255,283,283,251,0,287],
[315,304,288,316,278,278,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,259,259,279,272,259],
[284,0,270,283,296,293,289,269],
[290,281,0,274,284,285,278,270],
[292,268,277,0,271,285,278,258],
[292,255,267,280,0,277,278,278],
[272,258,266,266,274,0,258,277],
[279,262,273,273,273,293,0,259],
[292,282,281,293,273,274,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,303,259,301,279,279,289],
[254,0,277,254,261,259,272,255],
[248,274,0,247,278,258,270,268],
[292,297,304,0,287,284,270,299],
[250,290,273,264,0,243,254,242],
[272,292,293,267,308,0,284,281],
[272,279,281,281,297,267,0,273],
[262,296,283,252,309,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,254,265,281,288,313],
[273,0,259,263,295,252,279,286],
[271,292,0,280,293,296,298,318],
[297,288,271,0,293,268,283,282],
[286,256,258,258,0,257,275,259],
[270,299,255,283,294,0,286,286],
[263,272,253,268,276,265,0,292],
[238,265,233,269,292,265,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,276,277,281,291,270,274],
[269,0,267,266,266,279,264,278],
[275,284,0,295,305,297,298,293],
[274,285,256,0,249,279,258,262],
[270,285,246,302,0,279,262,254],
[260,272,254,272,272,0,258,273],
[281,287,253,293,289,293,0,267],
[277,273,258,289,297,278,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,282,258,320,277,304],
[263,0,246,255,277,288,276,298],
[272,305,0,287,258,301,259,292],
[269,296,264,0,294,293,270,299],
[293,274,293,257,0,305,289,327],
[231,263,250,258,246,0,280,291],
[274,275,292,281,262,271,0,345],
[247,253,259,252,224,260,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,322,289,284,300,273],
[271,0,261,293,261,286,287,281],
[278,290,0,292,244,280,295,279],
[229,258,259,0,245,265,285,269],
[262,290,307,306,0,285,299,308],
[267,265,271,286,266,0,288,290],
[251,264,256,266,252,263,0,226],
[278,270,272,282,243,261,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,276,276,291,258,267,276],
[291,0,290,273,289,275,264,283],
[275,261,0,282,291,293,274,274],
[275,278,269,0,310,270,280,291],
[260,262,260,241,0,288,267,245],
[293,276,258,281,263,0,262,277],
[284,287,277,271,284,289,0,280],
[275,268,277,260,306,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,261,239,256,302,282,269],
[269,0,263,268,224,243,261,236],
[290,288,0,267,228,265,255,266],
[312,283,284,0,279,261,281,259],
[295,327,323,272,0,304,269,267],
[249,308,286,290,247,0,258,301],
[269,290,296,270,282,293,0,272],
[282,315,285,292,284,250,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,295,275,272,262,270],
[275,0,278,290,284,272,269,286],
[284,273,0,279,274,271,280,278],
[256,261,272,0,263,266,248,276],
[276,267,277,288,0,284,263,273],
[279,279,280,285,267,0,255,283],
[289,282,271,303,288,296,0,285],
[281,265,273,275,278,268,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,276,304,269,299,252,289],
[279,0,290,299,288,271,261,277],
[275,261,0,303,242,305,266,304],
[247,252,248,0,248,241,242,236],
[282,263,309,303,0,279,286,313],
[252,280,246,310,272,0,258,249],
[299,290,285,309,265,293,0,312],
[262,274,247,315,238,302,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,303,296,265,288,272,278],
[274,0,292,282,278,278,288,256],
[248,259,0,271,255,257,281,259],
[255,269,280,0,246,244,256,274],
[286,273,296,305,0,271,273,290],
[263,273,294,307,280,0,255,261],
[279,263,270,295,278,296,0,284],
[273,295,292,277,261,290,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,302,306,279,277,275,281],
[263,0,267,277,254,275,278,276],
[249,284,0,271,245,236,265,270],
[245,274,280,0,246,247,275,284],
[272,297,306,305,0,282,294,290],
[274,276,315,304,269,0,289,282],
[276,273,286,276,257,262,0,261],
[270,275,281,267,261,269,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,258,253,250,249,279,295],
[295,0,268,282,293,275,284,303],
[293,283,0,267,288,279,306,305],
[298,269,284,0,281,276,265,278],
[301,258,263,270,0,267,262,275],
[302,276,272,275,284,0,285,283],
[272,267,245,286,289,266,0,258],
[256,248,246,273,276,268,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,281,314,303,287,273,313],
[233,0,224,261,226,247,244,266],
[270,327,0,310,270,260,266,294],
[237,290,241,0,285,277,264,273],
[248,325,281,266,0,252,265,268],
[264,304,291,274,299,0,288,323],
[278,307,285,287,286,263,0,301],
[238,285,257,278,283,228,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,297,278,292,274,303,296],
[273,0,297,275,290,269,291,291],
[254,254,0,269,254,242,255,271],
[273,276,282,0,292,277,292,305],
[259,261,297,259,0,256,278,311],
[277,282,309,274,295,0,293,314],
[248,260,296,259,273,258,0,275],
[255,260,280,246,240,237,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,280,279,299,286,268,275],
[258,0,255,261,260,239,253,255],
[271,296,0,258,274,266,262,277],
[272,290,293,0,283,278,267,289],
[252,291,277,268,0,269,240,259],
[265,312,285,273,282,0,286,294],
[283,298,289,284,311,265,0,278],
[276,296,274,262,292,257,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,258,247,245,255,261,251],
[290,0,271,288,263,254,253,263],
[293,280,0,269,272,278,265,249],
[304,263,282,0,295,253,267,293],
[306,288,279,256,0,270,254,251],
[296,297,273,298,281,0,269,280],
[290,298,286,284,297,282,0,259],
[300,288,302,258,300,271,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,276,264,270,258,264,292],
[285,0,266,266,269,275,283,292],
[275,285,0,272,285,275,251,285],
[287,285,279,0,294,282,271,305],
[281,282,266,257,0,248,254,285],
[293,276,276,269,303,0,273,296],
[287,268,300,280,297,278,0,308],
[259,259,266,246,266,255,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,262,281,296,290,286,282],
[272,0,286,279,277,284,274,271],
[289,265,0,264,290,273,266,277],
[270,272,287,0,290,285,287,272],
[255,274,261,261,0,292,268,266],
[261,267,278,266,259,0,306,267],
[265,277,285,264,283,245,0,287],
[269,280,274,279,285,284,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,279,292,285,267,285],
[271,0,265,275,271,259,256,282],
[270,286,0,281,283,277,284,289],
[272,276,270,0,286,260,258,279],
[259,280,268,265,0,267,274,280],
[266,292,274,291,284,0,265,291],
[284,295,267,293,277,286,0,272],
[266,269,262,272,271,260,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,229,274,294,288,326,282],
[247,0,237,267,313,292,330,289],
[322,314,0,296,333,299,302,270],
[277,284,255,0,308,285,291,263],
[257,238,218,243,0,254,259,258],
[263,259,252,266,297,0,276,283],
[225,221,249,260,292,275,0,229],
[269,262,281,288,293,268,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,284,281,268,283,277,272],
[289,0,281,284,289,258,283,279],
[267,270,0,273,278,265,276,285],
[270,267,278,0,274,267,273,263],
[283,262,273,277,0,284,263,281],
[268,293,286,284,267,0,280,293],
[274,268,275,278,288,271,0,264],
[279,272,266,288,270,258,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,273,283,268,276,273,282],
[265,0,277,294,270,285,279,287],
[278,274,0,301,285,265,277,286],
[268,257,250,0,265,272,269,268],
[283,281,266,286,0,308,281,293],
[275,266,286,279,243,0,271,283],
[278,272,274,282,270,280,0,282],
[269,264,265,283,258,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,288,246,282,253,284,295],
[234,0,284,221,236,239,261,265],
[263,267,0,227,248,257,290,260],
[305,330,324,0,267,284,320,309],
[269,315,303,284,0,275,305,293],
[298,312,294,267,276,0,278,280],
[267,290,261,231,246,273,0,273],
[256,286,291,242,258,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,273,285,262,275,271,272],
[290,0,272,279,287,287,262,265],
[278,279,0,266,290,290,268,286],
[266,272,285,0,299,278,267,284],
[289,264,261,252,0,270,269,256],
[276,264,261,273,281,0,269,259],
[280,289,283,284,282,282,0,271],
[279,286,265,267,295,292,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,286,272,261,276,284],
[270,0,289,281,275,283,274,296],
[262,262,0,280,258,272,261,279],
[265,270,271,0,270,249,255,289],
[279,276,293,281,0,270,284,303],
[290,268,279,302,281,0,264,305],
[275,277,290,296,267,287,0,296],
[267,255,272,262,248,246,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,270,262,273,314,315,281],
[248,0,223,247,237,271,280,237],
[281,328,0,261,282,323,270,226],
[289,304,290,0,322,272,287,283],
[278,314,269,229,0,286,289,279],
[237,280,228,279,265,0,253,217],
[236,271,281,264,262,298,0,230],
[270,314,325,268,272,334,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,299,279,296,270,295,286],
[244,0,263,232,270,254,267,254],
[252,288,0,249,268,262,281,256],
[272,319,302,0,306,259,292,268],
[255,281,283,245,0,245,273,268],
[281,297,289,292,306,0,287,274],
[256,284,270,259,278,264,0,260],
[265,297,295,283,283,277,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,289,243,283,265,275,269],
[273,0,263,260,287,262,287,260],
[262,288,0,255,287,252,283,274],
[308,291,296,0,288,270,293,286],
[268,264,264,263,0,247,262,262],
[286,289,299,281,304,0,295,270],
[276,264,268,258,289,256,0,266],
[282,291,277,265,289,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,222,251,216,96,302,203],
[338,0,299,324,357,217,332,276],
[329,252,0,284,256,349,399,227],
[300,227,267,0,208,247,439,251],
[335,194,295,343,0,211,279,246],
[455,334,202,304,340,0,351,275],
[249,219,152,112,272,200,0,152],
[348,275,324,300,305,276,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,282,262,284,258,285,252],
[313,0,306,258,288,277,290,286],
[269,245,0,254,256,244,281,253],
[289,293,297,0,294,268,321,296],
[267,263,295,257,0,283,317,270],
[293,274,307,283,268,0,296,285],
[266,261,270,230,234,255,0,284],
[299,265,298,255,281,266,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,285,296,281,263,270,285],
[258,0,276,293,303,244,276,280],
[266,275,0,297,302,278,277,290],
[255,258,254,0,249,271,267,273],
[270,248,249,302,0,266,270,274],
[288,307,273,280,285,0,285,284],
[281,275,274,284,281,266,0,284],
[266,271,261,278,277,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,239,271,251,276,241,269],
[239,0,221,274,241,288,282,249],
[312,330,0,274,298,344,323,298],
[280,277,277,0,260,280,258,271],
[300,310,253,291,0,267,305,269],
[275,263,207,271,284,0,228,246],
[310,269,228,293,246,323,0,321],
[282,302,253,280,282,305,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,267,279,260,297,282,314],
[258,0,273,260,261,280,259,296],
[284,278,0,265,284,266,277,287],
[272,291,286,0,286,309,291,294],
[291,290,267,265,0,279,266,310],
[254,271,285,242,272,0,261,292],
[269,292,274,260,285,290,0,291],
[237,255,264,257,241,259,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,251,267,268,257,279,308],
[282,0,263,252,311,237,318,283],
[300,288,0,280,297,273,318,305],
[284,299,271,0,284,299,311,298],
[283,240,254,267,0,261,326,292],
[294,314,278,252,290,0,315,291],
[272,233,233,240,225,236,0,226],
[243,268,246,253,259,260,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,293,274,274,270,275,243],
[261,0,322,224,261,243,258,250],
[258,229,0,215,242,243,233,236],
[277,327,336,0,297,281,300,267],
[277,290,309,254,0,270,296,282],
[281,308,308,270,281,0,292,264],
[276,293,318,251,255,259,0,273],
[308,301,315,284,269,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,300,274,272,263,255],
[280,0,283,295,251,250,255,257],
[282,268,0,275,232,272,251,253],
[251,256,276,0,248,240,251,241],
[277,300,319,303,0,273,272,295],
[279,301,279,311,278,0,278,271],
[288,296,300,300,279,273,0,251],
[296,294,298,310,256,280,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,268,249,261,265,253,258],
[287,0,283,257,286,270,275,259],
[283,268,0,251,269,252,255,250],
[302,294,300,0,287,275,279,274],
[290,265,282,264,0,274,267,256],
[286,281,299,276,277,0,272,274],
[298,276,296,272,284,279,0,283],
[293,292,301,277,295,277,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,275,272,256,284,272],
[278,0,286,279,303,271,288,275],
[275,265,0,287,269,274,292,265],
[276,272,264,0,279,268,273,261],
[279,248,282,272,0,260,274,273],
[295,280,277,283,291,0,289,275],
[267,263,259,278,277,262,0,276],
[279,276,286,290,278,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,276,294,263,285,271,266],
[283,0,271,265,269,271,266,250],
[275,280,0,298,274,301,288,269],
[257,286,253,0,252,271,247,264],
[288,282,277,299,0,291,265,268],
[266,280,250,280,260,0,268,279],
[280,285,263,304,286,283,0,306],
[285,301,282,287,283,272,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,287,274,281,276,273,272],
[269,0,281,256,261,278,271,272],
[264,270,0,258,259,263,272,266],
[277,295,293,0,287,291,293,266],
[270,290,292,264,0,262,281,274],
[275,273,288,260,289,0,276,276],
[278,280,279,258,270,275,0,271],
[279,279,285,285,277,275,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,283,290,275,284,298,306],
[244,0,276,285,257,242,266,275],
[268,275,0,278,287,266,277,309],
[261,266,273,0,287,233,263,242],
[276,294,264,264,0,253,304,289],
[267,309,285,318,298,0,289,281],
[253,285,274,288,247,262,0,257],
[245,276,242,309,262,270,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,316,292,293,263,259,282],
[287,0,273,252,265,258,233,258],
[235,278,0,251,263,241,270,250],
[259,299,300,0,292,291,270,276],
[258,286,288,259,0,277,252,265],
[288,293,310,260,274,0,263,280],
[292,318,281,281,299,288,0,275],
[269,293,301,275,286,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,260,270,254,286,292,259],
[312,0,257,286,286,289,310,282],
[291,294,0,290,265,281,268,231],
[281,265,261,0,281,295,318,274],
[297,265,286,270,0,294,277,229],
[265,262,270,256,257,0,287,233],
[259,241,283,233,274,264,0,269],
[292,269,320,277,322,318,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,270,279,290,278,288],
[275,0,272,282,270,278,283,272],
[269,279,0,278,277,303,285,278],
[281,269,273,0,278,290,286,295],
[272,281,274,273,0,289,285,285],
[261,273,248,261,262,0,270,274],
[273,268,266,265,266,281,0,269],
[263,279,273,256,266,277,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,293,329,265,320,287,302],
[256,0,316,279,270,300,264,302],
[258,235,0,261,267,275,266,256],
[222,272,290,0,279,305,256,304],
[286,281,284,272,0,289,246,305],
[231,251,276,246,262,0,286,236],
[264,287,285,295,305,265,0,280],
[249,249,295,247,246,315,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,290,291,251,317,288,270],
[285,0,283,314,247,309,298,263],
[261,268,0,283,305,297,263,222],
[260,237,268,0,242,283,319,272],
[300,304,246,309,0,264,336,288],
[234,242,254,268,287,0,286,264],
[263,253,288,232,215,265,0,244],
[281,288,329,279,263,287,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,289,277,261,290,295,310],
[265,0,290,277,282,236,297,300],
[262,261,0,260,287,237,351,264],
[274,274,291,0,223,269,363,284],
[290,269,264,328,0,279,302,295],
[261,315,314,282,272,0,338,309],
[256,254,200,188,249,213,0,216],
[241,251,287,267,256,242,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,231,236,228,234,253,288],
[287,0,273,270,277,264,258,259],
[320,278,0,275,255,256,282,286],
[315,281,276,0,286,272,277,285],
[323,274,296,265,0,250,281,292],
[317,287,295,279,301,0,270,329],
[298,293,269,274,270,281,0,271],
[263,292,265,266,259,222,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,224,284,232,274,311,346],
[319,0,213,266,228,298,311,359],
[327,338,0,232,316,289,286,359],
[267,285,319,0,283,301,300,331],
[319,323,235,268,0,339,311,347],
[277,253,262,250,212,0,307,304],
[240,240,265,251,240,244,0,364],
[205,192,192,220,204,247,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,303,276,251,299,241,251],
[256,0,302,264,285,303,243,280],
[248,249,0,229,265,278,247,241],
[275,287,322,0,305,315,253,285],
[300,266,286,246,0,315,259,267],
[252,248,273,236,236,0,260,229],
[310,308,304,298,292,291,0,271],
[300,271,310,266,284,322,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,296,282,272,302,288,288],
[258,0,311,249,271,290,298,252],
[255,240,0,275,264,295,320,249],
[269,302,276,0,275,300,295,270],
[279,280,287,276,0,318,294,274],
[249,261,256,251,233,0,287,239],
[263,253,231,256,257,264,0,226],
[263,299,302,281,277,312,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,296,277,301,291,284,274],
[247,0,267,269,289,260,278,245],
[255,284,0,283,268,266,279,255],
[274,282,268,0,302,279,291,277],
[250,262,283,249,0,259,278,263],
[260,291,285,272,292,0,284,291],
[267,273,272,260,273,267,0,245],
[277,306,296,274,288,260,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,259,282,267,278,248,254],
[283,0,273,278,287,288,298,268],
[292,278,0,286,283,287,273,264],
[269,273,265,0,276,269,252,268],
[284,264,268,275,0,266,258,264],
[273,263,264,282,285,0,268,279],
[303,253,278,299,293,283,0,265],
[297,283,287,283,287,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,256,253,239,276,264,268],
[281,0,243,229,274,264,275,277],
[295,308,0,296,272,290,307,300],
[298,322,255,0,277,301,331,300],
[312,277,279,274,0,282,279,291],
[275,287,261,250,269,0,285,284],
[287,276,244,220,272,266,0,295],
[283,274,251,251,260,267,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,271,332,288,329,280],
[268,0,255,275,269,258,310,254],
[278,296,0,286,314,280,305,259],
[280,276,265,0,318,271,326,266],
[219,282,237,233,0,227,278,235],
[263,293,271,280,324,0,319,280],
[222,241,246,225,273,232,0,246],
[271,297,292,285,316,271,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,264,250,241,260,261,256],
[292,0,267,282,267,288,262,274],
[287,284,0,282,260,278,259,266],
[301,269,269,0,274,276,283,279],
[310,284,291,277,0,272,280,253],
[291,263,273,275,279,0,266,275],
[290,289,292,268,271,285,0,268],
[295,277,285,272,298,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,288,281,260,302,258,235],
[290,0,296,264,262,279,288,295],
[263,255,0,256,270,288,241,274],
[270,287,295,0,289,270,280,266],
[291,289,281,262,0,277,286,270],
[249,272,263,281,274,0,266,270],
[293,263,310,271,265,285,0,283],
[316,256,277,285,281,281,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,301,309,257,303,300,282],
[273,0,298,284,292,269,299,281],
[250,253,0,292,243,234,303,253],
[242,267,259,0,222,287,271,269],
[294,259,308,329,0,274,324,295],
[248,282,317,264,277,0,267,251],
[251,252,248,280,227,284,0,231],
[269,270,298,282,256,300,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,264,290,263,288,252,268],
[293,0,239,312,255,276,253,230],
[287,312,0,295,301,263,297,299],
[261,239,256,0,264,233,255,277],
[288,296,250,287,0,280,272,287],
[263,275,288,318,271,0,276,282],
[299,298,254,296,279,275,0,297],
[283,321,252,274,264,269,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,292,261,275,263,297,288],
[262,0,281,259,256,281,259,273],
[259,270,0,284,274,285,284,268],
[290,292,267,0,261,278,279,287],
[276,295,277,290,0,296,257,269],
[288,270,266,273,255,0,283,264],
[254,292,267,272,294,268,0,282],
[263,278,283,264,282,287,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,273,271,267,267,277,264],
[284,0,280,273,258,280,261,294],
[278,271,0,300,283,274,297,263],
[280,278,251,0,274,248,265,280],
[284,293,268,277,0,282,257,232],
[284,271,277,303,269,0,271,259],
[274,290,254,286,294,280,0,277],
[287,257,288,271,319,292,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,296,320,285,292,291,269],
[278,0,264,295,250,244,262,270],
[255,287,0,293,281,252,274,263],
[231,256,258,0,302,246,279,257],
[266,301,270,249,0,275,303,305],
[259,307,299,305,276,0,288,280],
[260,289,277,272,248,263,0,265],
[282,281,288,294,246,271,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,276,285,284,259,294,286],
[275,0,266,257,276,266,267,273],
[275,285,0,281,275,268,288,262],
[266,294,270,0,264,270,287,274],
[267,275,276,287,0,263,291,272],
[292,285,283,281,288,0,282,267],
[257,284,263,264,260,269,0,262],
[265,278,289,277,279,284,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,280,260,294,275,269,281],
[239,0,264,263,261,251,248,259],
[271,287,0,276,281,273,279,307],
[291,288,275,0,277,259,273,287],
[257,290,270,274,0,283,294,288],
[276,300,278,292,268,0,277,295],
[282,303,272,278,257,274,0,283],
[270,292,244,264,263,256,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,270,302,258,263,243,283],
[281,0,286,273,241,252,242,275],
[281,265,0,261,259,237,247,273],
[249,278,290,0,245,288,262,298],
[293,310,292,306,0,285,283,275],
[288,299,314,263,266,0,261,290],
[308,309,304,289,268,290,0,296],
[268,276,278,253,276,261,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,275,287,259,270,280,283],
[253,0,292,269,274,272,264,241],
[276,259,0,293,262,285,247,279],
[264,282,258,0,241,252,261,266],
[292,277,289,310,0,261,272,284],
[281,279,266,299,290,0,275,265],
[271,287,304,290,279,276,0,269],
[268,310,272,285,267,286,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,255,266,287,281,267,269],
[268,0,280,276,268,279,246,262],
[296,271,0,299,286,278,238,274],
[285,275,252,0,291,292,262,275],
[264,283,265,260,0,281,259,265],
[270,272,273,259,270,0,253,278],
[284,305,313,289,292,298,0,256],
[282,289,277,276,286,273,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,292,260,292,302,302,348],
[226,0,242,256,284,284,222,319],
[259,309,0,285,350,265,280,349],
[291,295,266,0,277,283,266,332],
[259,267,201,274,0,233,234,327],
[249,267,286,268,318,0,265,349],
[249,329,271,285,317,286,0,376],
[203,232,202,219,224,202,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,251,256,264,283,276,264],
[302,0,265,257,286,312,278,275],
[300,286,0,281,266,303,304,295],
[295,294,270,0,274,300,288,292],
[287,265,285,277,0,299,307,288],
[268,239,248,251,252,0,260,251],
[275,273,247,263,244,291,0,269],
[287,276,256,259,263,300,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,282,266,286,287,276,297],
[264,0,279,245,292,266,271,261],
[269,272,0,240,297,260,261,287],
[285,306,311,0,311,287,265,298],
[265,259,254,240,0,270,251,270],
[264,285,291,264,281,0,273,311],
[275,280,290,286,300,278,0,302],
[254,290,264,253,281,240,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,267,270,284,275,277],
[284,0,269,286,280,274,274,282],
[275,282,0,290,288,284,276,272],
[284,265,261,0,274,265,278,272],
[281,271,263,277,0,270,283,272],
[267,277,267,286,281,0,260,274],
[276,277,275,273,268,291,0,278],
[274,269,279,279,279,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,265,275,294,281,277,278],
[280,0,272,284,270,269,265,279],
[286,279,0,275,270,277,284,285],
[276,267,276,0,281,271,272,282],
[257,281,281,270,0,282,277,273],
[270,282,274,280,269,0,273,283],
[274,286,267,279,274,278,0,287],
[273,272,266,269,278,268,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,302,278,263,281,282,290],
[262,0,275,249,262,263,282,289],
[249,276,0,270,260,265,275,285],
[273,302,281,0,276,267,269,285],
[288,289,291,275,0,268,309,297],
[270,288,286,284,283,0,295,281],
[269,269,276,282,242,256,0,262],
[261,262,266,266,254,270,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,263,258,284,260,256,264],
[277,0,284,258,293,262,279,284],
[288,267,0,287,301,283,292,279],
[293,293,264,0,315,292,276,291],
[267,258,250,236,0,248,256,249],
[291,289,268,259,303,0,270,282],
[295,272,259,275,295,281,0,292],
[287,267,272,260,302,269,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,296,273,263,277,324,266],
[257,0,353,368,294,334,289,278],
[255,198,0,275,235,279,230,203],
[278,183,276,0,260,294,228,262],
[288,257,316,291,0,276,308,304],
[274,217,272,257,275,0,264,279],
[227,262,321,323,243,287,0,251],
[285,273,348,289,247,272,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,285,264,260,258,287,287],
[290,0,305,290,266,283,294,311],
[266,246,0,265,269,263,262,279],
[287,261,286,0,274,248,272,282],
[291,285,282,277,0,273,294,305],
[293,268,288,303,278,0,284,287],
[264,257,289,279,257,267,0,269],
[264,240,272,269,246,264,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,275,218,276,209,202,235],
[327,0,325,298,330,270,228,290],
[276,226,0,209,271,200,203,218],
[333,253,342,0,308,248,246,276],
[275,221,280,243,0,213,207,233],
[342,281,351,303,338,0,283,265],
[349,323,348,305,344,268,0,266],
[316,261,333,275,318,286,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,283,271,281,276,282,266],
[278,0,273,291,290,275,296,276],
[268,278,0,267,268,254,265,265],
[280,260,284,0,283,274,301,264],
[270,261,283,268,0,282,284,265],
[275,276,297,277,269,0,289,286],
[269,255,286,250,267,262,0,276],
[285,275,286,287,286,265,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,254,252,255,201,300,252],
[225,0,226,218,277,246,317,295],
[297,325,0,259,220,272,256,281],
[299,333,292,0,256,291,295,290],
[296,274,331,295,0,238,290,277],
[350,305,279,260,313,0,289,315],
[251,234,295,256,261,262,0,301],
[299,256,270,261,274,236,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,272,270,266,251,268,272],
[297,0,292,285,272,281,295,288],
[279,259,0,277,254,258,281,273],
[281,266,274,0,251,259,272,284],
[285,279,297,300,0,265,283,277],
[300,270,293,292,286,0,306,280],
[283,256,270,279,268,245,0,278],
[279,263,278,267,274,271,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,280,277,271,273,274,297],
[309,0,278,287,275,290,270,308],
[271,273,0,288,273,294,270,304],
[274,264,263,0,283,260,276,287],
[280,276,278,268,0,258,275,287],
[278,261,257,291,293,0,286,317],
[277,281,281,275,276,265,0,296],
[254,243,247,264,264,234,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,268,301,253,280,262,258],
[269,0,273,294,269,265,250,279],
[283,278,0,292,270,284,277,260],
[250,257,259,0,247,230,266,244],
[298,282,281,304,0,275,275,276],
[271,286,267,321,276,0,263,286],
[289,301,274,285,276,288,0,279],
[293,272,291,307,275,265,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,299,314,306,267,282,276],
[271,0,270,289,290,282,272,271],
[252,281,0,298,270,267,290,293],
[237,262,253,0,269,232,270,281],
[245,261,281,282,0,268,294,273],
[284,269,284,319,283,0,297,282],
[269,279,261,281,257,254,0,263],
[275,280,258,270,278,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,283,260,254,279,251,284],
[296,0,274,262,265,287,284,283],
[268,277,0,274,264,282,276,273],
[291,289,277,0,267,283,273,290],
[297,286,287,284,0,273,272,284],
[272,264,269,268,278,0,264,294],
[300,267,275,278,279,287,0,288],
[267,268,278,261,267,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,265,322,259,308,289,309],
[265,0,259,281,263,304,241,299],
[286,292,0,275,266,317,271,324],
[229,270,276,0,252,302,230,327],
[292,288,285,299,0,313,266,344],
[243,247,234,249,238,0,240,286],
[262,310,280,321,285,311,0,306],
[242,252,227,224,207,265,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,262,245,268,266,289,264],
[281,0,243,265,250,277,283,257],
[289,308,0,269,266,283,309,290],
[306,286,282,0,266,297,292,279],
[283,301,285,285,0,287,271,273],
[285,274,268,254,264,0,266,267],
[262,268,242,259,280,285,0,259],
[287,294,261,272,278,284,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,289,264,280,256,237,258],
[307,0,292,227,301,307,282,258],
[262,259,0,284,276,314,261,287],
[287,324,267,0,325,334,321,272],
[271,250,275,226,0,294,251,275],
[295,244,237,217,257,0,273,233],
[314,269,290,230,300,278,0,279],
[293,293,264,279,276,318,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,279,273,262,270,276,292],
[234,0,263,269,291,267,253,285],
[272,288,0,273,279,279,246,306],
[278,282,278,0,268,265,273,312],
[289,260,272,283,0,272,256,283],
[281,284,272,286,279,0,267,286],
[275,298,305,278,295,284,0,312],
[259,266,245,239,268,265,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,285,268,278,288,276],
[279,0,290,268,318,282,279,271],
[279,261,0,287,282,260,293,300],
[266,283,264,0,315,266,276,267],
[283,233,269,236,0,218,258,219],
[273,269,291,285,333,0,312,318],
[263,272,258,275,293,239,0,259],
[275,280,251,284,332,233,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,291,259,272,273,251,276],
[295,0,285,269,258,293,252,294],
[260,266,0,267,249,249,250,261],
[292,282,284,0,280,275,265,278],
[279,293,302,271,0,291,284,295],
[278,258,302,276,260,0,270,272],
[300,299,301,286,267,281,0,295],
[275,257,290,273,256,279,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,276,286,276,274,275,270],
[262,0,270,270,286,278,288,271],
[275,281,0,267,283,290,274,266],
[265,281,284,0,264,277,271,261],
[275,265,268,287,0,272,295,281],
[277,273,261,274,279,0,268,275],
[276,263,277,280,256,283,0,276],
[281,280,285,290,270,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,300,306,283,290,270,270],
[287,0,299,294,299,276,278,275],
[251,252,0,280,264,270,271,278],
[245,257,271,0,254,278,260,275],
[268,252,287,297,0,286,259,280],
[261,275,281,273,265,0,271,275],
[281,273,280,291,292,280,0,286],
[281,276,273,276,271,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,292,272,309,292,271,286],
[250,0,271,288,314,260,255,289],
[259,280,0,309,329,303,239,317],
[279,263,242,0,333,257,278,291],
[242,237,222,218,0,241,205,289],
[259,291,248,294,310,0,225,289],
[280,296,312,273,346,326,0,280],
[265,262,234,260,262,262,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,363,225,334,225,424,335],
[216,0,326,214,297,214,325,323],
[188,225,0,198,334,188,385,307],
[326,337,353,0,201,323,325,436],
[217,254,217,350,0,214,216,460],
[326,337,363,228,337,0,335,310],
[127,226,166,226,335,216,0,308],
[216,228,244,115,91,241,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,283,289,279,266,276,299],
[251,0,273,290,254,259,284,274],
[268,278,0,266,255,264,267,282],
[262,261,285,0,234,272,268,259],
[272,297,296,317,0,273,301,305],
[285,292,287,279,278,0,295,263],
[275,267,284,283,250,256,0,264],
[252,277,269,292,246,288,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,266,258,248,289,262,270],
[297,0,306,270,263,304,257,269],
[285,245,0,256,254,268,256,256],
[293,281,295,0,276,285,269,278],
[303,288,297,275,0,314,277,279],
[262,247,283,266,237,0,245,261],
[289,294,295,282,274,306,0,288],
[281,282,295,273,272,290,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,279,284,262,279,280,284],
[289,0,286,279,271,282,285,270],
[272,265,0,279,270,276,289,285],
[267,272,272,0,263,269,281,274],
[289,280,281,288,0,276,274,269],
[272,269,275,282,275,0,286,260],
[271,266,262,270,277,265,0,266],
[267,281,266,277,282,291,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,289,312,346,316,261,287],
[211,0,311,276,293,329,237,259],
[262,240,0,260,301,332,245,238],
[239,275,291,0,207,248,232,234],
[205,258,250,344,0,228,244,270],
[235,222,219,303,323,0,229,254],
[290,314,306,319,307,322,0,255],
[264,292,313,317,281,297,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,259,251,289,270,289],
[273,0,287,276,289,287,278,298],
[276,264,0,269,274,292,273,285],
[292,275,282,0,276,289,267,299],
[300,262,277,275,0,292,278,291],
[262,264,259,262,259,0,271,287],
[281,273,278,284,273,280,0,293],
[262,253,266,252,260,264,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,273,280,274,272,270,289],
[278,0,262,282,272,253,284,273],
[278,289,0,299,276,267,281,288],
[271,269,252,0,266,266,285,261],
[277,279,275,285,0,281,270,271],
[279,298,284,285,270,0,266,276],
[281,267,270,266,281,285,0,283],
[262,278,263,290,280,275,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,276,290,283,262,294],
[269,0,310,285,288,277,286,304],
[263,241,0,271,279,252,277,269],
[275,266,280,0,272,263,276,271],
[261,263,272,279,0,272,271,277],
[268,274,299,288,279,0,281,292],
[289,265,274,275,280,270,0,284],
[257,247,282,280,274,259,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,282,315,242,275,293,244],
[287,0,289,278,278,281,290,267],
[269,262,0,268,249,256,281,235],
[236,273,283,0,265,264,291,232],
[309,273,302,286,0,299,306,273],
[276,270,295,287,252,0,290,276],
[258,261,270,260,245,261,0,229],
[307,284,316,319,278,275,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,262,281,272,265,256],
[282,0,260,248,255,277,269,260],
[271,291,0,268,270,288,283,278],
[289,303,283,0,275,266,251,281],
[270,296,281,276,0,286,295,293],
[279,274,263,285,265,0,262,255],
[286,282,268,300,256,289,0,283],
[295,291,273,270,258,296,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,262,257,257,264,272,279],
[272,0,263,260,252,267,260,259],
[289,288,0,277,275,268,282,285],
[294,291,274,0,272,264,288,279],
[294,299,276,279,0,236,279,280],
[287,284,283,287,315,0,267,252],
[279,291,269,263,272,284,0,277],
[272,292,266,272,271,299,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,281,280,281,243,281,274],
[256,0,278,277,263,274,264,245],
[270,273,0,265,244,283,249,281],
[271,274,286,0,257,266,295,289],
[270,288,307,294,0,282,297,277],
[308,277,268,285,269,0,279,286],
[270,287,302,256,254,272,0,269],
[277,306,270,262,274,265,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,253,240,223,312,180,223],
[274,0,201,210,225,293,174,239],
[298,350,0,250,258,319,254,244],
[311,341,301,0,300,391,279,249],
[328,326,293,251,0,359,302,272],
[239,258,232,160,192,0,233,223],
[371,377,297,272,249,318,0,276],
[328,312,307,302,279,328,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,259,305,294,308,284,296],
[265,0,295,282,295,272,325,292],
[292,256,0,287,267,294,293,304],
[246,269,264,0,239,286,280,282],
[257,256,284,312,0,282,303,287],
[243,279,257,265,269,0,314,286],
[267,226,258,271,248,237,0,272],
[255,259,247,269,264,265,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,297,354,302,387,404,274],
[62,0,158,172,262,181,286,178],
[254,393,0,324,294,333,422,316],
[197,379,227,0,286,280,319,194],
[249,289,257,265,0,287,261,209],
[164,370,218,271,264,0,298,99],
[147,265,129,232,290,253,0,181],
[277,373,235,357,342,452,370,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,251,246,235,218,226,217],
[336,0,333,288,266,319,276,296],
[300,218,0,238,227,252,224,260],
[305,263,313,0,276,270,293,279],
[316,285,324,275,0,287,263,285],
[333,232,299,281,264,0,221,243],
[325,275,327,258,288,330,0,296],
[334,255,291,272,266,308,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,280,298,304,267,305,298],
[256,0,299,270,279,290,248,308],
[271,252,0,272,289,253,293,275],
[253,281,279,0,283,250,292,279],
[247,272,262,268,0,238,290,297],
[284,261,298,301,313,0,298,289],
[246,303,258,259,261,253,0,272],
[253,243,276,272,254,262,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,281,274,260,287,277,281],
[266,0,279,268,272,268,269,287],
[270,272,0,267,277,279,269,285],
[277,283,284,0,264,268,282,288],
[291,279,274,287,0,272,269,288],
[264,283,272,283,279,0,273,276],
[274,282,282,269,282,278,0,304],
[270,264,266,263,263,275,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,279,268,274,273,265],
[273,0,292,305,282,319,290,269],
[279,259,0,296,295,324,289,276],
[272,246,255,0,256,278,249,255],
[283,269,256,295,0,293,282,244],
[277,232,227,273,258,0,269,272],
[278,261,262,302,269,282,0,289],
[286,282,275,296,307,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,259,256,250,269,243,272],
[309,0,298,274,284,279,268,268],
[292,253,0,254,232,238,287,277],
[295,277,297,0,271,274,275,278],
[301,267,319,280,0,265,276,299],
[282,272,313,277,286,0,268,280],
[308,283,264,276,275,283,0,286],
[279,283,274,273,252,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,304,270,299,287,272],
[272,0,275,324,258,309,290,269],
[269,276,0,293,274,283,292,242],
[247,227,258,0,254,246,257,252],
[281,293,277,297,0,294,266,291],
[252,242,268,305,257,0,262,276],
[264,261,259,294,285,289,0,263],
[279,282,309,299,260,275,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,275,281,270,262,263,254],
[275,0,263,287,289,279,286,278],
[276,288,0,284,275,270,259,276],
[270,264,267,0,283,254,275,272],
[281,262,276,268,0,280,273,250],
[289,272,281,297,271,0,280,290],
[288,265,292,276,278,271,0,280],
[297,273,275,279,301,261,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,308,306,234,291,296,276],
[310,0,263,346,292,341,350,299],
[243,288,0,315,270,258,265,280],
[245,205,236,0,272,266,300,232],
[317,259,281,279,0,306,299,217],
[260,210,293,285,245,0,263,233],
[255,201,286,251,252,288,0,235],
[275,252,271,319,334,318,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,286,280,291,281,273,269],
[268,0,286,270,270,275,264,271],
[265,265,0,257,280,254,267,267],
[271,281,294,0,287,275,273,278],
[260,281,271,264,0,270,263,274],
[270,276,297,276,281,0,277,270],
[278,287,284,278,288,274,0,272],
[282,280,284,273,277,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,282,272,310,281,267],
[278,0,278,275,278,300,287,269],
[283,273,0,285,290,316,280,290],
[269,276,266,0,266,309,269,262],
[279,273,261,285,0,285,277,285],
[241,251,235,242,266,0,251,257],
[270,264,271,282,274,300,0,281],
[284,282,261,289,266,294,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,256,245,260,268,259,267],
[301,0,285,283,274,292,273,271],
[295,266,0,268,275,279,273,280],
[306,268,283,0,293,281,280,282],
[291,277,276,258,0,280,272,290],
[283,259,272,270,271,0,268,270],
[292,278,278,271,279,283,0,281],
[284,280,271,269,261,281,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,305,267,378,373,382,308],
[235,0,233,269,333,354,309,263],
[246,318,0,226,270,302,297,226],
[284,282,325,0,322,293,307,240],
[173,218,281,229,0,288,271,253],
[178,197,249,258,263,0,266,216],
[169,242,254,244,280,285,0,209],
[243,288,325,311,298,335,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,268,255,263,269,254,255],
[280,0,262,254,273,259,231,270],
[283,289,0,278,281,262,269,284],
[296,297,273,0,289,279,266,276],
[288,278,270,262,0,267,274,288],
[282,292,289,272,284,0,278,293],
[297,320,282,285,277,273,0,295],
[296,281,267,275,263,258,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,279,308,304,286,261],
[276,0,247,272,285,299,274,262],
[278,304,0,273,288,296,282,278],
[272,279,278,0,303,287,291,289],
[243,266,263,248,0,286,255,241],
[247,252,255,264,265,0,266,244],
[265,277,269,260,296,285,0,268],
[290,289,273,262,310,307,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,286,262,295,293,278,291],
[270,0,289,275,277,297,264,279],
[265,262,0,268,254,289,261,271],
[289,276,283,0,288,306,266,273],
[256,274,297,263,0,275,255,275],
[258,254,262,245,276,0,263,268],
[273,287,290,285,296,288,0,292],
[260,272,280,278,276,283,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,281,271,280,285,256,241],
[287,0,267,268,245,254,291,271],
[270,284,0,276,263,292,309,271],
[280,283,275,0,268,298,262,270],
[271,306,288,283,0,294,287,261],
[266,297,259,253,257,0,237,247],
[295,260,242,289,264,314,0,288],
[310,280,280,281,290,304,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,302,279,266,269,270,267],
[277,0,283,272,275,271,263,290],
[249,268,0,271,250,262,275,275],
[272,279,280,0,259,266,291,246],
[285,276,301,292,0,288,288,274],
[282,280,289,285,263,0,294,264],
[281,288,276,260,263,257,0,266],
[284,261,276,305,277,287,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,287,271,275,294,277,239],
[275,0,302,274,273,272,266,263],
[264,249,0,249,253,290,262,268],
[280,277,302,0,273,324,293,299],
[276,278,298,278,0,292,297,275],
[257,279,261,227,259,0,245,245],
[274,285,289,258,254,306,0,257],
[312,288,283,252,276,306,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,275,284,301,255,268,271],
[266,0,276,275,279,276,283,258],
[276,275,0,276,282,249,270,257],
[267,276,275,0,271,251,279,274],
[250,272,269,280,0,264,282,263],
[296,275,302,300,287,0,294,290],
[283,268,281,272,269,257,0,253],
[280,293,294,277,288,261,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,266,292,300,293,268,277],
[271,0,278,311,285,275,287,291],
[285,273,0,325,295,295,299,314],
[259,240,226,0,269,253,257,267],
[251,266,256,282,0,285,261,286],
[258,276,256,298,266,0,257,276],
[283,264,252,294,290,294,0,284],
[274,260,237,284,265,275,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,262,282,273,274,300,312],
[247,0,238,246,249,262,270,272],
[289,313,0,296,275,296,295,290],
[269,305,255,0,279,262,293,312],
[278,302,276,272,0,271,305,297],
[277,289,255,289,280,0,289,296],
[251,281,256,258,246,262,0,283],
[239,279,261,239,254,255,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,278,300,284,292,279,277],
[283,0,289,296,295,275,264,270],
[273,262,0,294,297,296,260,278],
[251,255,257,0,275,270,262,261],
[267,256,254,276,0,283,248,253],
[259,276,255,281,268,0,254,282],
[272,287,291,289,303,297,0,273],
[274,281,273,290,298,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,290,270,277,277,262,262],
[292,0,306,289,286,275,273,278],
[261,245,0,287,264,279,259,259],
[281,262,264,0,254,270,275,259],
[274,265,287,297,0,276,277,263],
[274,276,272,281,275,0,271,252],
[289,278,292,276,274,280,0,270],
[289,273,292,292,288,299,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,288,242,272,308,284,327],
[309,0,294,293,273,302,267,268],
[263,257,0,258,284,288,273,323],
[309,258,293,0,288,295,236,383],
[279,278,267,263,0,315,236,284],
[243,249,263,256,236,0,252,270],
[267,284,278,315,315,299,0,315],
[224,283,228,168,267,281,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,268,269,259,252,260,245],
[251,0,232,261,270,235,266,272],
[283,319,0,285,284,282,268,263],
[282,290,266,0,265,266,273,259],
[292,281,267,286,0,266,275,290],
[299,316,269,285,285,0,285,281],
[291,285,283,278,276,266,0,278],
[306,279,288,292,261,270,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,296,272,311,294,281,293],
[246,0,242,255,273,251,255,251],
[255,309,0,283,286,297,279,284],
[279,296,268,0,322,310,271,292],
[240,278,265,229,0,269,260,254],
[257,300,254,241,282,0,259,281],
[270,296,272,280,291,292,0,279],
[258,300,267,259,297,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,244,271,237,277,257,280],
[262,0,229,287,232,264,265,281],
[307,322,0,293,279,291,282,270],
[280,264,258,0,269,284,284,275],
[314,319,272,282,0,276,309,271],
[274,287,260,267,275,0,282,264],
[294,286,269,267,242,269,0,317],
[271,270,281,276,280,287,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,283,285,301,336,265,283],
[247,0,233,296,295,314,276,252],
[268,318,0,268,311,352,285,255],
[266,255,283,0,307,277,247,252],
[250,256,240,244,0,275,257,206],
[215,237,199,274,276,0,259,252],
[286,275,266,304,294,292,0,252],
[268,299,296,299,345,299,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,275,276,283,268,283,252],
[290,0,280,288,266,292,282,269],
[276,271,0,305,274,314,294,285],
[275,263,246,0,261,281,271,247],
[268,285,277,290,0,290,283,251],
[283,259,237,270,261,0,245,253],
[268,269,257,280,268,306,0,252],
[299,282,266,304,300,298,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,228,265,228,257,246,234],
[263,0,216,218,211,259,219,246],
[323,335,0,311,280,334,285,267],
[286,333,240,0,237,288,237,247],
[323,340,271,314,0,290,270,307],
[294,292,217,263,261,0,247,247],
[305,332,266,314,281,304,0,248],
[317,305,284,304,244,304,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,303,315,275,293,279,278],
[275,0,256,293,284,289,289,278],
[248,295,0,293,287,323,284,259],
[236,258,258,0,249,289,275,249],
[276,267,264,302,0,288,272,247],
[258,262,228,262,263,0,236,251],
[272,262,267,276,279,315,0,274],
[273,273,292,302,304,300,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,294,266,274,292,270,256],
[299,0,303,295,285,269,293,246],
[257,248,0,243,259,262,245,229],
[285,256,308,0,263,295,289,258],
[277,266,292,288,0,307,288,264],
[259,282,289,256,244,0,259,231],
[281,258,306,262,263,292,0,281],
[295,305,322,293,287,320,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,284,286,273,272,278],
[283,0,274,272,283,279,275,279],
[272,277,0,281,297,287,276,263],
[267,279,270,0,268,267,279,265],
[265,268,254,283,0,254,245,239],
[278,272,264,284,297,0,264,282],
[279,276,275,272,306,287,0,273],
[273,272,288,286,312,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,279,232,247,183,237,239],
[314,0,275,227,268,252,265,291],
[272,276,0,197,266,249,296,288],
[319,324,354,0,293,274,328,272],
[304,283,285,258,0,262,284,265],
[368,299,302,277,289,0,278,265],
[314,286,255,223,267,273,0,276],
[312,260,263,279,286,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,290,276,276,265,254,251],
[277,0,262,282,263,266,264,241],
[261,289,0,275,282,260,259,279],
[275,269,276,0,265,254,259,242],
[275,288,269,286,0,285,275,260],
[286,285,291,297,266,0,259,269],
[297,287,292,292,276,292,0,262],
[300,310,272,309,291,282,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,296,260,293,285,278],
[273,0,293,285,280,284,303,293],
[274,258,0,255,259,228,274,280],
[255,266,296,0,250,268,285,248],
[291,271,292,301,0,271,282,275],
[258,267,323,283,280,0,301,257],
[266,248,277,266,269,250,0,273],
[273,258,271,303,276,294,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,258,259,254,270,269,288],
[271,0,265,281,253,275,269,262],
[293,286,0,272,279,301,293,288],
[292,270,279,0,270,300,273,309],
[297,298,272,281,0,291,266,306],
[281,276,250,251,260,0,264,308],
[282,282,258,278,285,287,0,299],
[263,289,263,242,245,243,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,297,295,276,317,259,310],
[268,0,297,222,206,216,224,246],
[254,254,0,255,235,253,255,287],
[256,329,296,0,276,264,225,285],
[275,345,316,275,0,292,295,336],
[234,335,298,287,259,0,251,329],
[292,327,296,326,256,300,0,326],
[241,305,264,266,215,222,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,308,306,362,303,309,256],
[254,0,239,265,299,320,237,256],
[243,312,0,314,416,254,253,317],
[245,286,237,0,361,274,240,296],
[189,252,135,190,0,188,207,204],
[248,231,297,277,363,0,309,294],
[242,314,298,311,344,242,0,291],
[295,295,234,255,347,257,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,263,297,271,277,290],
[275,0,236,279,276,270,265,276],
[284,315,0,291,305,277,281,265],
[288,272,260,0,277,278,275,270],
[254,275,246,274,0,266,272,301],
[280,281,274,273,285,0,272,275],
[274,286,270,276,279,279,0,297],
[261,275,286,281,250,276,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,266,288,285,243,268,269],
[280,0,295,308,293,295,275,278],
[285,256,0,290,281,262,279,288],
[263,243,261,0,265,271,267,286],
[266,258,270,286,0,236,285,283],
[308,256,289,280,315,0,315,304],
[283,276,272,284,266,236,0,281],
[282,273,263,265,268,247,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,295,281,285,250,289,260],
[273,0,294,257,264,274,249,276],
[256,257,0,247,248,232,241,212],
[270,294,304,0,306,256,273,282],
[266,287,303,245,0,276,277,253],
[301,277,319,295,275,0,285,277],
[262,302,310,278,274,266,0,267],
[291,275,339,269,298,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,286,295,257,296,269,289],
[301,0,280,311,292,303,292,274],
[265,271,0,298,268,300,252,265],
[256,240,253,0,258,274,228,265],
[294,259,283,293,0,309,280,280],
[255,248,251,277,242,0,228,252],
[282,259,299,323,271,323,0,290],
[262,277,286,286,271,299,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,264,260,282,279,269,278],
[254,0,277,264,274,265,243,271],
[287,274,0,255,251,271,259,262],
[291,287,296,0,278,291,245,247],
[269,277,300,273,0,268,219,244],
[272,286,280,260,283,0,286,283],
[282,308,292,306,332,265,0,289],
[273,280,289,304,307,268,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,291,284,280,296,288],
[269,0,272,290,287,277,308,292],
[277,279,0,286,263,289,289,286],
[260,261,265,0,265,269,281,280],
[267,264,288,286,0,288,293,300],
[271,274,262,282,263,0,303,262],
[255,243,262,270,258,248,0,283],
[263,259,265,271,251,289,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,326,276,293,343,368,262],
[233,0,250,259,236,272,302,230],
[225,301,0,246,314,345,296,234],
[275,292,305,0,277,287,262,284],
[258,315,237,274,0,301,296,280],
[208,279,206,264,250,0,272,251],
[183,249,255,289,255,279,0,250],
[289,321,317,267,271,300,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,280,271,285,279,285,278],
[294,0,272,277,292,267,285,277],
[271,279,0,283,290,254,280,265],
[280,274,268,0,274,247,277,273],
[266,259,261,277,0,239,271,272],
[272,284,297,304,312,0,304,304],
[266,266,271,274,280,247,0,267],
[273,274,286,278,279,247,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,255,275,254,250,265,270],
[313,0,273,296,289,292,288,289],
[296,278,0,289,260,266,272,273],
[276,255,262,0,251,256,260,263],
[297,262,291,300,0,272,291,282],
[301,259,285,295,279,0,287,286],
[286,263,279,291,260,264,0,281],
[281,262,278,288,269,265,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,284,281,262,242,270,270],
[300,0,266,259,279,286,290,253],
[267,285,0,266,261,254,273,284],
[270,292,285,0,229,261,232,259],
[289,272,290,322,0,266,276,325],
[309,265,297,290,285,0,285,277],
[281,261,278,319,275,266,0,277],
[281,298,267,292,226,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,222,389,230,305,253,253],
[318,0,313,401,238,235,366,277],
[329,238,0,328,215,293,306,277],
[162,150,223,0,209,148,300,177],
[321,313,336,342,0,312,407,233],
[246,316,258,403,239,0,314,208],
[298,185,245,251,144,237,0,214],
[298,274,274,374,318,343,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,270,271,282,280,272],
[277,0,269,266,259,275,284,262],
[281,282,0,272,277,285,282,274],
[281,285,279,0,264,281,284,278],
[280,292,274,287,0,279,278,281],
[269,276,266,270,272,0,256,268],
[271,267,269,267,273,295,0,268],
[279,289,277,273,270,283,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,259,311,301,298,272,338],
[308,0,298,388,341,293,261,322],
[292,253,0,378,294,355,291,365],
[240,163,173,0,270,256,189,265],
[250,210,257,281,0,285,177,289],
[253,258,196,295,266,0,193,299],
[279,290,260,362,374,358,0,391],
[213,229,186,286,262,252,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,263,276,267,286,285,264],
[261,0,246,260,258,272,287,256],
[288,305,0,270,271,298,314,286],
[275,291,281,0,288,291,307,283],
[284,293,280,263,0,280,293,277],
[265,279,253,260,271,0,303,276],
[266,264,237,244,258,248,0,251],
[287,295,265,268,274,275,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,251,231,274,274,275,262],
[290,0,305,271,316,295,317,291],
[300,246,0,236,288,286,322,269],
[320,280,315,0,315,314,301,271],
[277,235,263,236,0,276,280,249],
[277,256,265,237,275,0,278,245],
[276,234,229,250,271,273,0,256],
[289,260,282,280,302,306,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,242,276,287,270,275,260],
[286,0,248,285,284,280,269,245],
[309,303,0,306,322,286,267,290],
[275,266,245,0,272,304,266,273],
[264,267,229,279,0,277,245,268],
[281,271,265,247,274,0,254,259],
[276,282,284,285,306,297,0,273],
[291,306,261,278,283,292,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,290,279,282,266,280],
[267,0,273,276,271,276,277,260],
[277,278,0,273,286,278,270,271],
[261,275,278,0,255,274,249,276],
[272,280,265,296,0,270,254,284],
[269,275,273,277,281,0,262,287],
[285,274,281,302,297,289,0,285],
[271,291,280,275,267,264,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,284,276,263,299,280,312],
[294,0,297,276,304,259,312,281],
[267,254,0,226,232,249,273,239],
[275,275,325,0,282,298,312,313],
[288,247,319,269,0,292,293,269],
[252,292,302,253,259,0,317,301],
[271,239,278,239,258,234,0,240],
[239,270,312,238,282,250,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,264,264,272,246,288,284],
[291,0,263,279,302,281,324,245],
[287,288,0,273,283,287,302,277],
[287,272,278,0,286,268,296,270],
[279,249,268,265,0,299,299,306],
[305,270,264,283,252,0,293,263],
[263,227,249,255,252,258,0,287],
[267,306,274,281,245,288,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,227,250,235,215,208,214],
[294,0,251,271,263,238,239,248],
[324,300,0,301,279,277,244,269],
[301,280,250,0,251,261,239,234],
[316,288,272,300,0,257,283,287],
[336,313,274,290,294,0,296,310],
[343,312,307,312,268,255,0,285],
[337,303,282,317,264,241,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,280,282,280,289,260,283],
[281,0,286,285,274,258,292,287],
[271,265,0,281,293,275,280,277],
[269,266,270,0,269,252,248,289],
[271,277,258,282,0,271,264,272],
[262,293,276,299,280,0,294,296],
[291,259,271,303,287,257,0,266],
[268,264,274,262,279,255,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,285,281,280,306,271],
[260,0,259,261,276,260,273,244],
[272,292,0,266,268,273,282,252],
[266,290,285,0,273,263,292,268],
[270,275,283,278,0,289,266,277],
[271,291,278,288,262,0,285,262],
[245,278,269,259,285,266,0,247],
[280,307,299,283,274,289,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,270,277,266,275,275,279],
[294,0,263,260,269,252,265,268],
[281,288,0,282,276,283,274,283],
[274,291,269,0,258,258,270,287],
[285,282,275,293,0,267,287,280],
[276,299,268,293,284,0,299,289],
[276,286,277,281,264,252,0,268],
[272,283,268,264,271,262,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,277,241,245,267,249,265],
[291,0,288,265,264,265,266,246],
[274,263,0,273,273,281,277,252],
[310,286,278,0,261,250,280,280],
[306,287,278,290,0,279,264,277],
[284,286,270,301,272,0,259,283],
[302,285,274,271,287,292,0,270],
[286,305,299,271,274,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,286,287,287,271,271],
[270,0,297,284,294,277,272,279],
[273,254,0,282,293,272,269,265],
[265,267,269,0,287,277,276,278],
[264,257,258,264,0,266,262,246],
[264,274,279,274,285,0,261,275],
[280,279,282,275,289,290,0,280],
[280,272,286,273,305,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,281,276,266,274,280,266],
[264,0,280,267,271,273,269,287],
[270,271,0,267,287,271,271,259],
[275,284,284,0,292,281,277,259],
[285,280,264,259,0,257,256,263],
[277,278,280,270,294,0,270,286],
[271,282,280,274,295,281,0,280],
[285,264,292,292,288,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,282,258,280,289,270,267],
[285,0,288,296,293,304,289,267],
[269,263,0,265,280,295,263,266],
[293,255,286,0,287,285,273,276],
[271,258,271,264,0,297,268,254],
[262,247,256,266,254,0,256,245],
[281,262,288,278,283,295,0,266],
[284,284,285,275,297,306,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,365,270,270,295,308,297,259],
[186,0,248,214,206,240,222,213],
[281,303,0,305,280,320,302,267],
[281,337,246,0,287,315,305,318],
[256,345,271,264,0,305,261,284],
[243,311,231,236,246,0,250,230],
[254,329,249,246,290,301,0,261],
[292,338,284,233,267,321,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,251,257,249,292,265,270],
[260,0,270,302,223,305,248,274],
[300,281,0,257,248,328,260,280],
[294,249,294,0,237,307,280,278],
[302,328,303,314,0,310,296,266],
[259,246,223,244,241,0,258,253],
[286,303,291,271,255,293,0,284],
[281,277,271,273,285,298,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,299,301,290,246,255,239],
[264,0,270,260,281,254,259,226],
[252,281,0,297,267,308,288,231],
[250,291,254,0,276,282,261,240],
[261,270,284,275,0,260,261,288],
[305,297,243,269,291,0,281,227],
[296,292,263,290,290,270,0,253],
[312,325,320,311,263,324,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,289,260,289,250,253,275],
[288,0,248,254,265,248,255,261],
[262,303,0,282,278,277,280,276],
[291,297,269,0,301,262,269,262],
[262,286,273,250,0,260,261,245],
[301,303,274,289,291,0,273,272],
[298,296,271,282,290,278,0,285],
[276,290,275,289,306,279,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,207,144,253,137,213,199],
[404,0,298,265,356,170,264,217],
[344,253,0,282,338,301,250,207],
[407,286,269,0,406,231,326,261],
[298,195,213,145,0,124,240,215],
[414,381,250,320,427,0,384,315],
[338,287,301,225,311,167,0,238],
[352,334,344,290,336,236,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,267,305,301,309,301,343],
[255,0,265,260,259,282,288,309],
[284,286,0,248,247,308,274,325],
[246,291,303,0,267,302,271,303],
[250,292,304,284,0,272,257,277],
[242,269,243,249,279,0,265,291],
[250,263,277,280,294,286,0,295],
[208,242,226,248,274,260,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,250,258,246,280,260,271],
[274,0,273,253,265,276,276,281],
[301,278,0,286,260,274,283,277],
[293,298,265,0,292,284,282,290],
[305,286,291,259,0,292,280,278],
[271,275,277,267,259,0,279,289],
[291,275,268,269,271,272,0,281],
[280,270,274,261,273,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,301,292,265,287,271,266],
[262,0,291,302,282,280,266,290],
[250,260,0,272,267,260,259,282],
[259,249,279,0,252,280,247,258],
[286,269,284,299,0,287,279,293],
[264,271,291,271,264,0,267,259],
[280,285,292,304,272,284,0,261],
[285,261,269,293,258,292,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,222,223,266,219,216,244],
[302,0,232,256,278,279,313,260],
[329,319,0,236,242,254,266,239],
[328,295,315,0,302,253,269,286],
[285,273,309,249,0,322,312,245],
[332,272,297,298,229,0,289,287],
[335,238,285,282,239,262,0,303],
[307,291,312,265,306,264,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,139,226,438,200,320,217],
[159,0,69,269,288,226,93,93],
[412,482,0,314,412,273,294,322],
[325,282,237,0,343,368,186,235],
[113,263,139,208,0,165,232,232],
[351,325,278,183,386,0,163,255],
[231,458,257,365,319,388,0,212],
[334,458,229,316,319,296,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,377,158,329,345,171,392,205],
[174,0,174,329,345,345,392,158],
[393,377,0,377,504,393,234,535],
[222,222,174,0,504,393,63,205],
[206,206,47,47,0,206,63,205],
[380,206,158,158,345,0,221,205],
[159,159,317,488,488,330,0,317],
[346,393,16,346,346,346,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,262,271,275,277,270],
[282,0,290,284,282,275,276,279],
[276,261,0,266,265,259,279,275],
[289,267,285,0,277,275,270,272],
[280,269,286,274,0,289,273,287],
[276,276,292,276,262,0,270,283],
[274,275,272,281,278,281,0,277],
[281,272,276,279,264,268,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,269,291,263,257,276],
[274,0,277,292,310,293,283,258],
[259,274,0,271,301,281,260,258],
[282,259,280,0,300,285,264,292],
[260,241,250,251,0,263,241,247],
[288,258,270,266,288,0,275,278],
[294,268,291,287,310,276,0,281],
[275,293,293,259,304,273,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,282,268,274,280,285,298],
[271,0,272,280,279,281,259,287],
[269,279,0,282,268,276,257,281],
[283,271,269,0,291,274,261,273],
[277,272,283,260,0,278,269,271],
[271,270,275,277,273,0,263,288],
[266,292,294,290,282,288,0,292],
[253,264,270,278,280,263,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,260,284,274,267,274,291],
[273,0,291,291,283,281,282,284],
[291,260,0,284,256,269,264,281],
[267,260,267,0,263,279,284,263],
[277,268,295,288,0,289,291,294],
[284,270,282,272,262,0,263,275],
[277,269,287,267,260,288,0,280],
[260,267,270,288,257,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,243,241,240,256,286,238],
[282,0,294,332,282,302,291,259],
[308,257,0,255,310,275,310,249],
[310,219,296,0,244,278,287,292],
[311,269,241,307,0,269,313,267],
[295,249,276,273,282,0,324,269],
[265,260,241,264,238,227,0,257],
[313,292,302,259,284,282,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,289,264,269,222,303,278],
[277,0,293,285,305,262,295,247],
[262,258,0,263,304,239,293,264],
[287,266,288,0,295,258,316,270],
[282,246,247,256,0,249,283,247],
[329,289,312,293,302,0,327,275],
[248,256,258,235,268,224,0,224],
[273,304,287,281,304,276,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,283,270,268,279,277,269],
[297,0,283,294,284,291,271,284],
[268,268,0,270,270,279,283,271],
[281,257,281,0,274,273,270,256],
[283,267,281,277,0,295,279,264],
[272,260,272,278,256,0,268,269],
[274,280,268,281,272,283,0,277],
[282,267,280,295,287,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,296,287,295,269,301,283],
[272,0,273,273,265,285,294,272],
[255,278,0,273,272,270,289,279],
[264,278,278,0,256,265,282,268],
[256,286,279,295,0,263,290,267],
[282,266,281,286,288,0,287,287],
[250,257,262,269,261,264,0,256],
[268,279,272,283,284,264,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,277,283,298,289,319,262],
[239,0,255,229,235,244,261,233],
[274,296,0,285,274,298,304,290],
[268,322,266,0,288,277,303,274],
[253,316,277,263,0,252,292,275],
[262,307,253,274,299,0,307,261],
[232,290,247,248,259,244,0,261],
[289,318,261,277,276,290,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,288,301,264,280,294,283],
[284,0,274,297,285,290,300,279],
[263,277,0,292,284,274,297,272],
[250,254,259,0,257,253,283,256],
[287,266,267,294,0,262,281,291],
[271,261,277,298,289,0,299,285],
[257,251,254,268,270,252,0,273],
[268,272,279,295,260,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,311,239,268,261,299,302],
[302,0,321,273,276,268,303,312],
[240,230,0,215,226,259,296,283],
[312,278,336,0,271,279,317,334],
[283,275,325,280,0,274,333,312],
[290,283,292,272,277,0,325,330],
[252,248,255,234,218,226,0,281],
[249,239,268,217,239,221,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,429,107,229,284,421,328],
[204,0,307,166,187,230,410,329],
[122,244,0,96,166,225,275,243],
[444,385,455,0,258,379,373,341],
[322,364,385,293,0,262,325,263],
[267,321,326,172,289,0,364,214],
[130,141,276,178,226,187,0,182],
[223,222,308,210,288,337,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,289,272,280,261,269,263],
[247,0,272,250,275,264,263,277],
[262,279,0,263,264,260,259,278],
[279,301,288,0,291,283,280,266],
[271,276,287,260,0,290,283,269],
[290,287,291,268,261,0,271,276],
[282,288,292,271,268,280,0,251],
[288,274,273,285,282,275,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,284,277,285,273,277,287],
[278,0,279,284,287,285,290,270],
[267,272,0,272,275,274,275,267],
[274,267,279,0,262,264,289,285],
[266,264,276,289,0,282,278,279],
[278,266,277,287,269,0,273,270],
[274,261,276,262,273,278,0,273],
[264,281,284,266,272,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,272,259,259,269,255],
[283,0,260,277,276,283,267,261],
[297,291,0,293,270,284,272,278],
[279,274,258,0,262,268,283,279],
[292,275,281,289,0,287,275,283],
[292,268,267,283,264,0,267,276],
[282,284,279,268,276,284,0,275],
[296,290,273,272,268,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,297,243,292,287,246,272],
[266,0,300,282,253,286,246,267],
[254,251,0,238,265,265,282,221],
[308,269,313,0,292,295,273,280],
[259,298,286,259,0,282,289,240],
[264,265,286,256,269,0,271,266],
[305,305,269,278,262,280,0,248],
[279,284,330,271,311,285,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,283,281,267,292,288,273],
[286,0,285,260,279,276,291,277],
[268,266,0,273,268,294,289,268],
[270,291,278,0,280,279,301,270],
[284,272,283,271,0,285,290,276],
[259,275,257,272,266,0,266,278],
[263,260,262,250,261,285,0,257],
[278,274,283,281,275,273,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,263,302,320,224,370,197],
[334,0,364,151,241,190,445,150],
[288,187,0,131,137,231,431,137],
[249,400,420,0,418,328,430,262],
[231,310,414,133,0,301,414,281],
[327,361,320,223,250,0,349,252],
[181,106,120,121,137,202,0,135],
[354,401,414,289,270,299,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,291,369,299,342,255,320],
[223,0,254,311,246,264,215,259],
[260,297,0,352,321,310,316,306],
[182,240,199,0,201,205,209,214],
[252,305,230,350,0,300,234,281],
[209,287,241,346,251,0,216,290],
[296,336,235,342,317,335,0,325],
[231,292,245,337,270,261,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,253,275,285,291,275,285],
[285,0,269,280,284,288,280,280],
[298,282,0,280,270,299,288,304],
[276,271,271,0,258,282,263,285],
[266,267,281,293,0,290,274,293],
[260,263,252,269,261,0,264,268],
[276,271,263,288,277,287,0,278],
[266,271,247,266,258,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,257,288,274,291,274,288],
[267,0,269,290,281,276,272,279],
[294,282,0,288,286,286,264,282],
[263,261,263,0,276,273,264,276],
[277,270,265,275,0,269,268,282],
[260,275,265,278,282,0,276,269],
[277,279,287,287,283,275,0,272],
[263,272,269,275,269,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,279,277,273,279,261,274],
[295,0,291,267,289,291,280,285],
[272,260,0,246,268,281,259,278],
[274,284,305,0,305,304,271,283],
[278,262,283,246,0,276,270,269],
[272,260,270,247,275,0,249,260],
[290,271,292,280,281,302,0,297],
[277,266,273,268,282,291,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,302,268,287,290,270],
[268,0,282,281,278,285,273,269],
[271,269,0,298,268,273,296,289],
[249,270,253,0,256,263,270,251],
[283,273,283,295,0,284,298,271],
[264,266,278,288,267,0,289,297],
[261,278,255,281,253,262,0,263],
[281,282,262,300,280,254,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,281,284,302,262,279],
[272,0,276,292,270,298,286,280],
[286,275,0,296,298,287,297,256],
[270,259,255,0,267,292,280,271],
[267,281,253,284,0,262,281,290],
[249,253,264,259,289,0,270,281],
[289,265,254,271,270,281,0,286],
[272,271,295,280,261,270,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,277,276,263,284,266,254],
[267,0,271,259,277,276,288,262],
[274,280,0,290,269,267,261,261],
[275,292,261,0,266,283,276,280],
[288,274,282,285,0,284,275,268],
[267,275,284,268,267,0,273,276],
[285,263,290,275,276,278,0,274],
[297,289,290,271,283,275,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,274,279,257,272,289],
[285,0,280,273,282,263,270,313],
[283,271,0,284,283,278,267,301],
[277,278,267,0,297,277,283,294],
[272,269,268,254,0,280,289,300],
[294,288,273,274,271,0,296,302],
[279,281,284,268,262,255,0,285],
[262,238,250,257,251,249,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,272,239,267,261,273,250],
[310,0,335,305,282,296,341,269],
[279,216,0,251,274,281,275,232],
[312,246,300,0,253,276,322,258],
[284,269,277,298,0,276,300,288],
[290,255,270,275,275,0,291,244],
[278,210,276,229,251,260,0,222],
[301,282,319,293,263,307,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,242,230,234,253,269,266],
[300,0,250,289,249,280,273,272],
[309,301,0,277,254,266,274,284],
[321,262,274,0,246,247,270,289],
[317,302,297,305,0,273,329,310],
[298,271,285,304,278,0,304,298],
[282,278,277,281,222,247,0,292],
[285,279,267,262,241,253,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,277,289,297,276,289],
[278,0,252,291,297,337,272,264],
[271,299,0,260,313,307,241,282],
[274,260,291,0,318,280,261,231],
[262,254,238,233,0,289,247,270],
[254,214,244,271,262,0,239,247],
[275,279,310,290,304,312,0,307],
[262,287,269,320,281,304,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,266,281,279,273,273],
[271,0,270,246,282,259,261,249],
[272,281,0,254,270,251,257,238],
[285,305,297,0,296,280,275,282],
[270,269,281,255,0,263,267,270],
[272,292,300,271,288,0,268,276],
[278,290,294,276,284,283,0,264],
[278,302,313,269,281,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,229,287,241,193,276,211],
[277,0,244,302,257,232,183,248],
[322,307,0,266,331,277,255,291],
[264,249,285,0,203,220,258,235],
[310,294,220,348,0,226,274,268],
[358,319,274,331,325,0,322,318],
[275,368,296,293,277,229,0,312],
[340,303,260,316,283,233,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,282,290,284,283,303],
[281,0,265,276,271,271,279,294],
[276,286,0,297,268,285,277,300],
[269,275,254,0,279,275,266,277],
[261,280,283,272,0,260,269,274],
[267,280,266,276,291,0,269,303],
[268,272,274,285,282,282,0,287],
[248,257,251,274,277,248,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,267,259,275,239,281,284],
[296,0,270,295,294,290,289,309],
[284,281,0,295,328,331,274,305],
[292,256,256,0,288,259,247,307],
[276,257,223,263,0,270,264,281],
[312,261,220,292,281,0,235,294],
[270,262,277,304,287,316,0,276],
[267,242,246,244,270,257,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,248,240,283,253,266,279],
[285,0,274,258,268,274,271,247],
[303,277,0,277,280,263,304,282],
[311,293,274,0,281,265,291,297],
[268,283,271,270,0,262,265,267],
[298,277,288,286,289,0,272,304],
[285,280,247,260,286,279,0,265],
[272,304,269,254,284,247,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,346,205,241,270,309,219],
[379,0,388,247,354,281,311,357],
[205,163,0,208,225,204,187,255],
[346,304,343,0,356,300,328,272],
[310,197,326,195,0,263,245,268],
[281,270,347,251,288,0,333,276],
[242,240,364,223,306,218,0,279],
[332,194,296,279,283,275,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,262,335,300,301,279,268],
[277,0,266,324,289,294,283,272],
[289,285,0,309,289,293,302,273],
[216,227,242,0,271,257,246,249],
[251,262,262,280,0,274,253,242],
[250,257,258,294,277,0,239,249],
[272,268,249,305,298,312,0,278],
[283,279,278,302,309,302,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,298,272,288,287,277,277],
[270,0,283,252,271,270,256,274],
[253,268,0,233,251,259,244,245],
[279,299,318,0,301,281,274,289],
[263,280,300,250,0,240,258,279],
[264,281,292,270,311,0,265,280],
[274,295,307,277,293,286,0,289],
[274,277,306,262,272,271,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,326,264,298,315,302,298],
[244,0,293,243,231,250,231,262],
[225,258,0,201,210,235,231,233],
[287,308,350,0,265,299,302,287],
[253,320,341,286,0,305,280,275],
[236,301,316,252,246,0,234,265],
[249,320,320,249,271,317,0,261],
[253,289,318,264,276,286,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,270,317,282,283,285],
[276,0,273,304,319,296,299,329],
[271,278,0,272,295,283,297,282],
[281,247,279,0,322,279,285,308],
[234,232,256,229,0,284,232,278],
[269,255,268,272,267,0,274,268],
[268,252,254,266,319,277,0,297],
[266,222,269,243,273,283,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,295,307,275,274,274,268],
[261,0,270,272,284,257,266,269],
[256,281,0,278,267,284,284,286],
[244,279,273,0,262,253,261,264],
[276,267,284,289,0,276,278,266],
[277,294,267,298,275,0,271,284],
[277,285,267,290,273,280,0,267],
[283,282,265,287,285,267,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,260,286,274,283,275],
[278,0,278,250,277,281,250,266],
[276,273,0,264,273,270,273,268],
[291,301,287,0,287,283,282,274],
[265,274,278,264,0,271,264,262],
[277,270,281,268,280,0,256,279],
[268,301,278,269,287,295,0,288],
[276,285,283,277,289,272,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,247,257,258,270,275,262],
[306,0,265,267,283,276,278,290],
[304,286,0,289,268,287,304,289],
[294,284,262,0,270,292,268,271],
[293,268,283,281,0,280,284,281],
[281,275,264,259,271,0,273,265],
[276,273,247,283,267,278,0,278],
[289,261,262,280,270,286,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,290,284,269,271,268,284],
[255,0,277,254,259,270,262,267],
[261,274,0,255,270,285,256,285],
[267,297,296,0,283,294,277,294],
[282,292,281,268,0,287,269,278],
[280,281,266,257,264,0,266,275],
[283,289,295,274,282,285,0,281],
[267,284,266,257,273,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,235,241,242,259,183,216],
[312,0,232,261,300,261,256,295],
[316,319,0,271,297,316,278,275],
[310,290,280,0,282,308,246,245],
[309,251,254,269,0,264,245,264],
[292,290,235,243,287,0,214,274],
[368,295,273,305,306,337,0,296],
[335,256,276,306,287,277,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,247,259,260,271,243,257],
[283,0,267,270,266,278,260,272],
[304,284,0,279,271,299,288,263],
[292,281,272,0,260,293,266,284],
[291,285,280,291,0,292,274,284],
[280,273,252,258,259,0,257,254],
[308,291,263,285,277,294,0,280],
[294,279,288,267,267,297,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,247,256,258,286,272,285],
[293,0,281,292,276,300,275,302],
[304,270,0,287,290,298,291,310],
[295,259,264,0,278,286,275,315],
[293,275,261,273,0,295,275,286],
[265,251,253,265,256,0,281,282],
[279,276,260,276,276,270,0,289],
[266,249,241,236,265,269,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,283,261,263,283,261,265],
[305,0,309,323,279,289,268,306],
[268,242,0,250,254,269,262,279],
[290,228,301,0,243,261,253,286],
[288,272,297,308,0,299,277,278],
[268,262,282,290,252,0,287,311],
[290,283,289,298,274,264,0,269],
[286,245,272,265,273,240,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,266,239,195,301,249,232],
[271,0,273,240,206,297,231,250],
[285,278,0,223,206,278,284,256],
[312,311,328,0,262,326,304,267],
[356,345,345,289,0,319,271,336],
[250,254,273,225,232,0,234,258],
[302,320,267,247,280,317,0,294],
[319,301,295,284,215,293,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,257,266,268,295,294,251],
[223,0,242,213,261,274,272,206],
[294,309,0,280,291,321,280,202],
[285,338,271,0,267,301,348,299],
[283,290,260,284,0,277,318,278],
[256,277,230,250,274,0,272,220],
[257,279,271,203,233,279,0,267],
[300,345,349,252,273,331,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,288,267,293,266,270,285],
[291,0,288,269,277,272,285,286],
[263,263,0,282,281,286,269,282],
[284,282,269,0,266,298,274,276],
[258,274,270,285,0,285,267,270],
[285,279,265,253,266,0,281,273],
[281,266,282,277,284,270,0,277],
[266,265,269,275,281,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,305,298,283,259,276],
[274,0,261,282,267,287,244,272],
[262,290,0,301,280,303,274,278],
[246,269,250,0,254,272,236,248],
[253,284,271,297,0,272,268,238],
[268,264,248,279,279,0,268,246],
[292,307,277,315,283,283,0,267],
[275,279,273,303,313,305,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,275,286,275,267,283],
[273,0,266,273,278,279,268,283],
[280,285,0,279,283,271,278,281],
[276,278,272,0,269,292,280,287],
[265,273,268,282,0,275,261,277],
[276,272,280,259,276,0,264,291],
[284,283,273,271,290,287,0,301],
[268,268,270,264,274,260,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,283,294,274,280,280,263],
[275,0,270,284,270,263,267,261],
[268,281,0,303,262,264,268,269],
[257,267,248,0,252,242,266,269],
[277,281,289,299,0,271,273,282],
[271,288,287,309,280,0,291,293],
[271,284,283,285,278,260,0,267],
[288,290,282,282,269,258,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,278,260,291,249,268],
[275,0,264,309,252,277,269,274],
[273,287,0,282,277,310,295,260],
[273,242,269,0,244,266,264,275],
[291,299,274,307,0,308,299,280],
[260,274,241,285,243,0,234,236],
[302,282,256,287,252,317,0,278],
[283,277,291,276,271,315,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,289,280,290,273,282,279],
[251,0,308,270,274,266,276,271],
[262,243,0,260,269,269,266,276],
[271,281,291,0,294,267,259,282],
[261,277,282,257,0,273,244,263],
[278,285,282,284,278,0,262,277],
[269,275,285,292,307,289,0,273],
[272,280,275,269,288,274,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,285,282,283,306,280,295],
[285,0,282,291,281,304,265,287],
[266,269,0,275,280,281,252,265],
[269,260,276,0,266,286,253,267],
[268,270,271,285,0,301,259,273],
[245,247,270,265,250,0,237,264],
[271,286,299,298,292,314,0,307],
[256,264,286,284,278,287,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,268,260,267,268,259,259],
[294,0,294,288,287,294,281,269],
[283,257,0,259,258,263,259,262],
[291,263,292,0,267,284,277,279],
[284,264,293,284,0,281,270,269],
[283,257,288,267,270,0,282,265],
[292,270,292,274,281,269,0,258],
[292,282,289,272,282,286,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,277,297,281,281,283,273],
[288,0,257,286,277,273,289,273],
[274,294,0,282,288,290,285,289],
[254,265,269,0,268,266,267,255],
[270,274,263,283,0,267,260,260],
[270,278,261,285,284,0,280,271],
[268,262,266,284,291,271,0,281],
[278,278,262,296,291,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,287,296,296,301,290,259],
[261,0,299,278,281,303,295,274],
[264,252,0,303,245,294,272,268],
[255,273,248,0,270,265,290,232],
[255,270,306,281,0,276,299,265],
[250,248,257,286,275,0,292,255],
[261,256,279,261,252,259,0,277],
[292,277,283,319,286,296,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,277,285,268,275,276,315],
[264,0,253,256,280,303,291,248],
[274,298,0,301,284,321,310,299],
[266,295,250,0,215,280,253,289],
[283,271,267,336,0,328,344,281],
[276,248,230,271,223,0,261,234],
[275,260,241,298,207,290,0,202],
[236,303,252,262,270,317,349,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,274,262,277,261,254,263],
[283,0,273,283,279,287,283,284],
[277,278,0,270,297,284,284,288],
[289,268,281,0,284,287,274,271],
[274,272,254,267,0,267,270,255],
[290,264,267,264,284,0,272,271],
[297,268,267,277,281,279,0,266],
[288,267,263,280,296,280,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,271,283,320,308,263,289],
[247,0,252,253,277,256,253,249],
[280,299,0,305,329,297,302,269],
[268,298,246,0,287,270,267,269],
[231,274,222,264,0,275,269,220],
[243,295,254,281,276,0,283,260],
[288,298,249,284,282,268,0,234],
[262,302,282,282,331,291,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,311,283,278,274,288,301],
[276,0,307,255,270,263,270,275],
[240,244,0,249,232,258,255,260],
[268,296,302,0,270,284,288,272],
[273,281,319,281,0,271,282,288],
[277,288,293,267,280,0,280,274],
[263,281,296,263,269,271,0,294],
[250,276,291,279,263,277,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,336,288,290,248,280,299],
[248,0,303,312,338,282,302,314],
[215,248,0,303,268,241,237,289],
[263,239,248,0,247,278,223,257],
[261,213,283,304,0,270,258,296],
[303,269,310,273,281,0,276,297],
[271,249,314,328,293,275,0,273],
[252,237,262,294,255,254,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,282,252,267,265,273,257],
[290,0,269,279,291,276,298,275],
[269,282,0,292,279,286,289,294],
[299,272,259,0,297,297,301,265],
[284,260,272,254,0,261,269,281],
[286,275,265,254,290,0,271,264],
[278,253,262,250,282,280,0,255],
[294,276,257,286,270,287,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,300,312,328,279,301,332],
[288,0,261,307,333,288,308,336],
[251,290,0,272,340,245,331,300],
[239,244,279,0,315,258,277,300],
[223,218,211,236,0,221,262,269],
[272,263,306,293,330,0,298,269],
[250,243,220,274,289,253,0,297],
[219,215,251,251,282,282,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,244,276,234,268,265,268],
[273,0,252,268,245,278,275,268],
[307,299,0,280,274,294,307,294],
[275,283,271,0,276,286,280,273],
[317,306,277,275,0,305,299,293],
[283,273,257,265,246,0,263,259],
[286,276,244,271,252,288,0,285],
[283,283,257,278,258,292,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,268,277,274,298,304,266],
[253,0,250,256,269,268,293,266],
[283,301,0,287,294,294,299,263],
[274,295,264,0,290,292,334,293],
[277,282,257,261,0,275,308,263],
[253,283,257,259,276,0,297,274],
[247,258,252,217,243,254,0,274],
[285,285,288,258,288,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,227,223,250,242,206,222],
[333,0,284,313,287,281,274,270],
[324,267,0,281,260,251,265,256],
[328,238,270,0,279,295,290,281],
[301,264,291,272,0,267,266,257],
[309,270,300,256,284,0,291,256],
[345,277,286,261,285,260,0,287],
[329,281,295,270,294,295,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,267,257,276,255,262,257],
[287,0,260,287,287,278,273,289],
[284,291,0,277,280,260,274,293],
[294,264,274,0,293,263,283,285],
[275,264,271,258,0,267,276,287],
[296,273,291,288,284,0,280,281],
[289,278,277,268,275,271,0,273],
[294,262,258,266,264,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,336,336,343,128,128,336,128],
[215,0,215,215,128,215,208,128],
[215,336,0,215,128,215,208,128],
[208,336,336,0,128,128,336,128],
[423,423,423,423,0,215,208,343],
[423,336,336,423,336,0,336,128],
[215,343,343,215,343,215,0,343],
[423,423,423,423,208,423,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,284,272,293,282,274,278],
[256,0,266,247,275,269,250,257],
[267,285,0,276,292,272,277,281],
[279,304,275,0,307,293,266,286],
[258,276,259,244,0,275,251,264],
[269,282,279,258,276,0,272,266],
[277,301,274,285,300,279,0,267],
[273,294,270,265,287,285,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,280,247,238,270,257,263],
[296,0,274,261,288,263,286,260],
[271,277,0,263,286,259,261,264],
[304,290,288,0,291,294,283,274],
[313,263,265,260,0,277,261,268],
[281,288,292,257,274,0,247,253],
[294,265,290,268,290,304,0,289],
[288,291,287,277,283,298,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,272,260,275,284,305,286],
[267,0,267,271,268,260,289,277],
[279,284,0,272,281,273,288,268],
[291,280,279,0,276,269,278,278],
[276,283,270,275,0,277,305,278],
[267,291,278,282,274,0,285,282],
[246,262,263,273,246,266,0,267],
[265,274,283,273,273,269,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,250,267,253,286,242,262],
[300,0,266,269,277,249,263,259],
[301,285,0,284,296,272,290,296],
[284,282,267,0,281,310,268,278],
[298,274,255,270,0,246,284,269],
[265,302,279,241,305,0,294,234],
[309,288,261,283,267,257,0,270],
[289,292,255,273,282,317,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,300,285,260,287,270,303],
[272,0,294,243,268,233,266,295],
[251,257,0,253,210,247,227,247],
[266,308,298,0,284,277,262,283],
[291,283,341,267,0,295,302,314],
[264,318,304,274,256,0,263,298],
[281,285,324,289,249,288,0,297],
[248,256,304,268,237,253,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,272,263,270,291,256,286],
[275,0,271,265,252,284,272,302],
[279,280,0,276,277,295,256,284],
[288,286,275,0,296,294,284,292],
[281,299,274,255,0,287,294,287],
[260,267,256,257,264,0,244,280],
[295,279,295,267,257,307,0,291],
[265,249,267,259,264,271,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,361,316,305,265,269,307],
[264,0,320,257,258,274,227,250],
[190,231,0,270,264,252,217,261],
[235,294,281,0,305,254,233,301],
[246,293,287,246,0,221,232,226],
[286,277,299,297,330,0,256,312],
[282,324,334,318,319,295,0,260],
[244,301,290,250,325,239,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,319,285,282,291,288,274],
[289,0,310,264,279,275,311,267],
[232,241,0,246,275,234,266,250],
[266,287,305,0,324,277,284,277],
[269,272,276,227,0,258,273,271],
[260,276,317,274,293,0,284,283],
[263,240,285,267,278,267,0,269],
[277,284,301,274,280,268,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,272,278,277,277,297,261],
[294,0,256,244,266,287,281,230],
[279,295,0,279,277,280,294,252],
[273,307,272,0,275,324,291,290],
[274,285,274,276,0,309,310,267],
[274,264,271,227,242,0,256,251],
[254,270,257,260,241,295,0,252],
[290,321,299,261,284,300,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,313,232,286,315,241,299],
[334,0,330,296,315,270,251,341],
[238,221,0,255,238,230,210,307],
[319,255,296,0,231,254,240,343],
[265,236,313,320,0,301,308,358],
[236,281,321,297,250,0,164,328],
[310,300,341,311,243,387,0,404],
[252,210,244,208,193,223,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,275,303,295,262,271],
[272,0,290,291,305,258,273,274],
[271,261,0,289,282,275,283,282],
[276,260,262,0,285,283,271,281],
[248,246,269,266,0,272,263,252],
[256,293,276,268,279,0,263,263],
[289,278,268,280,288,288,0,270],
[280,277,269,270,299,288,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,217,246,251,243,217,233],
[337,0,279,294,300,268,288,259],
[334,272,0,276,303,281,294,287],
[305,257,275,0,279,293,253,276],
[300,251,248,272,0,230,265,205],
[308,283,270,258,321,0,268,260],
[334,263,257,298,286,283,0,261],
[318,292,264,275,346,291,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,280,281,288,274,274,275],
[246,0,251,253,247,260,255,250],
[271,300,0,288,279,266,277,283],
[270,298,263,0,278,266,274,275],
[263,304,272,273,0,276,276,288],
[277,291,285,285,275,0,275,281],
[277,296,274,277,275,276,0,288],
[276,301,268,276,263,270,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,250,272,271,271,271,255],
[286,0,296,287,287,285,269,265],
[301,255,0,271,272,269,279,261],
[279,264,280,0,271,280,270,281],
[280,264,279,280,0,278,275,272],
[280,266,282,271,273,0,269,267],
[280,282,272,281,276,282,0,268],
[296,286,290,270,279,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,260,262,274,286,294,265],
[277,0,295,259,313,270,338,311],
[291,256,0,277,276,273,284,301],
[289,292,274,0,336,283,308,348],
[277,238,275,215,0,247,283,292],
[265,281,278,268,304,0,290,291],
[257,213,267,243,268,261,0,299],
[286,240,250,203,259,260,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,231,254,277,284,255,279],
[289,0,253,260,280,284,271,275],
[320,298,0,291,308,292,285,275],
[297,291,260,0,280,280,284,291],
[274,271,243,271,0,271,278,272],
[267,267,259,271,280,0,296,288],
[296,280,266,267,273,255,0,278],
[272,276,276,260,279,263,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,258,277,261,290,302,271],
[296,0,243,239,306,271,278,293],
[293,308,0,247,293,269,309,321],
[274,312,304,0,294,331,330,324],
[290,245,258,257,0,270,269,226],
[261,280,282,220,281,0,294,301],
[249,273,242,221,282,257,0,290],
[280,258,230,227,325,250,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,275,256,261,281,262,264],
[260,0,246,274,247,269,285,309],
[276,305,0,277,277,263,280,291],
[295,277,274,0,291,296,297,319],
[290,304,274,260,0,277,295,281],
[270,282,288,255,274,0,307,298],
[289,266,271,254,256,244,0,309],
[287,242,260,232,270,253,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,287,269,278,299,273,279],
[278,0,297,258,274,292,280,287],
[264,254,0,258,244,280,255,269],
[282,293,293,0,271,309,301,301],
[273,277,307,280,0,297,294,279],
[252,259,271,242,254,0,257,280],
[278,271,296,250,257,294,0,286],
[272,264,282,250,272,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,287,295,280,277,280],
[286,0,260,274,272,279,297,286],
[275,291,0,286,269,261,309,291],
[264,277,265,0,290,277,298,280],
[256,279,282,261,0,256,286,292],
[271,272,290,274,295,0,314,268],
[274,254,242,253,265,237,0,278],
[271,265,260,271,259,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,290,299,268,277,283],
[272,0,255,260,268,242,253,261],
[275,296,0,292,302,271,274,270],
[261,291,259,0,287,260,279,266],
[252,283,249,264,0,267,259,260],
[283,309,280,291,284,0,275,279],
[274,298,277,272,292,276,0,263],
[268,290,281,285,291,272,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,272,283,229,221,357,274],
[260,0,280,265,255,232,334,234],
[279,271,0,308,295,272,364,285],
[268,286,243,0,254,276,280,265],
[322,296,256,297,0,243,323,252],
[330,319,279,275,308,0,366,274],
[194,217,187,271,228,185,0,203],
[277,317,266,286,299,277,348,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,277,284,312,273,257,309],
[243,0,241,237,252,235,268,274],
[274,310,0,255,294,292,253,263],
[267,314,296,0,300,279,272,273],
[239,299,257,251,0,284,271,278],
[278,316,259,272,267,0,293,258],
[294,283,298,279,280,258,0,256],
[242,277,288,278,273,293,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,294,251,287,283,315,298],
[271,0,254,254,268,274,281,293],
[257,297,0,276,280,266,318,295],
[300,297,275,0,275,302,305,326],
[264,283,271,276,0,285,298,318],
[268,277,285,249,266,0,285,295],
[236,270,233,246,253,266,0,290],
[253,258,256,225,233,256,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,255,257,261,278,252,267],
[275,0,248,270,278,266,269,278],
[296,303,0,273,258,270,296,270],
[294,281,278,0,292,279,275,259],
[290,273,293,259,0,273,262,277],
[273,285,281,272,278,0,251,290],
[299,282,255,276,289,300,0,293],
[284,273,281,292,274,261,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,276,278,259,263,263,277],
[283,0,288,281,271,265,270,274],
[275,263,0,279,257,272,254,266],
[273,270,272,0,262,264,279,265],
[292,280,294,289,0,272,294,290],
[288,286,279,287,279,0,272,286],
[288,281,297,272,257,279,0,271],
[274,277,285,286,261,265,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,283,339,287,256,280,291],
[299,0,319,345,281,234,324,262],
[268,232,0,292,252,226,264,256],
[212,206,259,0,163,225,215,221],
[264,270,299,388,0,253,285,238],
[295,317,325,326,298,0,283,271],
[271,227,287,336,266,268,0,263],
[260,289,295,330,313,280,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,325,298,285,280,306,260],
[280,0,310,258,238,272,330,249],
[226,241,0,271,280,216,289,244],
[253,293,280,0,278,304,326,239],
[266,313,271,273,0,334,278,292],
[271,279,335,247,217,0,330,228],
[245,221,262,225,273,221,0,197],
[291,302,307,312,259,323,354,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,280,273,303,280,280],
[271,0,270,272,271,292,267,284],
[273,281,0,245,286,292,273,287],
[271,279,306,0,300,312,319,293],
[278,280,265,251,0,276,261,269],
[248,259,259,239,275,0,266,246],
[271,284,278,232,290,285,0,291],
[271,267,264,258,282,305,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,289,270,291,286,293],
[263,0,274,262,240,274,281,267],
[271,277,0,257,251,279,250,275],
[262,289,294,0,297,298,292,296],
[281,311,300,254,0,258,262,275],
[260,277,272,253,293,0,263,289],
[265,270,301,259,289,288,0,263],
[258,284,276,255,276,262,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,249,229,273,223,231,266],
[318,0,240,261,297,273,288,294],
[302,311,0,292,264,310,264,282],
[322,290,259,0,279,278,254,278],
[278,254,287,272,0,257,264,276],
[328,278,241,273,294,0,232,249],
[320,263,287,297,287,319,0,283],
[285,257,269,273,275,302,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,298,272,281,266,268,271],
[274,0,298,271,238,269,256,291],
[253,253,0,256,274,237,207,245],
[279,280,295,0,262,246,243,263],
[270,313,277,289,0,267,276,254],
[285,282,314,305,284,0,256,305],
[283,295,344,308,275,295,0,307],
[280,260,306,288,297,246,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,288,298,282,309,305,303],
[283,0,284,280,271,293,266,279],
[263,267,0,286,285,266,281,295],
[253,271,265,0,230,273,257,282],
[269,280,266,321,0,288,293,282],
[242,258,285,278,263,0,278,295],
[246,285,270,294,258,273,0,278],
[248,272,256,269,269,256,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,226,361,367,317,243,205],
[190,0,326,268,344,238,355,199],
[325,225,0,190,294,209,254,181],
[190,283,361,0,232,263,324,257],
[184,207,257,319,0,275,259,297],
[234,313,342,288,276,0,304,212],
[308,196,297,227,292,247,0,246],
[346,352,370,294,254,339,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,314,266,201,175,250,231],
[341,0,284,306,249,292,265,199],
[237,267,0,281,255,240,300,198],
[285,245,270,0,236,221,272,224],
[350,302,296,315,0,249,265,234],
[376,259,311,330,302,0,368,302],
[301,286,251,279,286,183,0,216],
[320,352,353,327,317,249,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,346,303,277,288,257,335,284],
[205,0,282,238,264,229,252,259],
[248,269,0,241,270,195,291,255],
[274,313,310,0,333,293,355,276],
[263,287,281,218,0,281,285,242],
[294,322,356,258,270,0,329,320],
[216,299,260,196,266,222,0,248],
[267,292,296,275,309,231,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,278,279,290,265,281,273],
[288,0,278,271,300,271,265,291],
[273,273,0,277,298,257,274,284],
[272,280,274,0,302,277,284,275],
[261,251,253,249,0,260,263,248],
[286,280,294,274,291,0,289,270],
[270,286,277,267,288,262,0,255],
[278,260,267,276,303,281,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,269,273,289,269,275,262],
[289,0,268,270,267,267,280,275],
[282,283,0,265,261,286,263,270],
[278,281,286,0,266,293,279,274],
[262,284,290,285,0,281,289,281],
[282,284,265,258,270,0,275,254],
[276,271,288,272,262,276,0,255],
[289,276,281,277,270,297,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,271,271,287,266,267],
[285,0,280,276,282,296,275,284],
[281,271,0,282,283,287,285,277],
[280,275,269,0,282,294,261,264],
[280,269,268,269,0,283,276,248],
[264,255,264,257,268,0,256,255],
[285,276,266,290,275,295,0,269],
[284,267,274,287,303,296,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,278,252,271,263,276,304],
[265,0,277,251,281,240,254,293],
[273,274,0,266,302,277,293,279],
[299,300,285,0,294,272,281,294],
[280,270,249,257,0,260,272,293],
[288,311,274,279,291,0,279,320],
[275,297,258,270,279,272,0,294],
[247,258,272,257,258,231,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,271,263,288,271,247],
[281,0,284,291,267,298,290,286],
[278,267,0,280,260,290,261,260],
[280,260,271,0,261,272,264,251],
[288,284,291,290,0,300,279,269],
[263,253,261,279,251,0,256,256],
[280,261,290,287,272,295,0,262],
[304,265,291,300,282,295,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,296,276,276,292,278],
[263,0,260,288,256,271,276,257],
[276,291,0,290,271,293,293,275],
[255,263,261,0,262,267,270,251],
[275,295,280,289,0,279,285,276],
[275,280,258,284,272,0,286,263],
[259,275,258,281,266,265,0,255],
[273,294,276,300,275,288,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,230,277,261,275,292,256],
[280,0,289,319,306,271,286,277],
[321,262,0,316,283,285,312,274],
[274,232,235,0,235,262,262,248],
[290,245,268,316,0,272,284,264],
[276,280,266,289,279,0,267,281],
[259,265,239,289,267,284,0,270],
[295,274,277,303,287,270,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,277,296,294,288,273,288],
[270,0,285,291,297,270,278,294],
[274,266,0,281,294,265,266,277],
[255,260,270,0,295,257,279,276],
[257,254,257,256,0,255,272,273],
[263,281,286,294,296,0,291,282],
[278,273,285,272,279,260,0,277],
[263,257,274,275,278,269,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,274,265,251,288,276,256],
[293,0,297,284,273,280,280,289],
[277,254,0,271,267,295,274,269],
[286,267,280,0,263,297,275,263],
[300,278,284,288,0,312,279,265],
[263,271,256,254,239,0,270,258],
[275,271,277,276,272,281,0,240],
[295,262,282,288,286,293,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,251,290,283,277,273,237],
[285,0,284,290,268,282,275,280],
[300,267,0,295,272,284,280,277],
[261,261,256,0,267,262,272,236],
[268,283,279,284,0,277,256,268],
[274,269,267,289,274,0,256,257],
[278,276,271,279,295,295,0,260],
[314,271,274,315,283,294,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,335,254,328,198,312,324],
[311,0,353,295,320,246,324,344],
[216,198,0,267,345,294,236,297],
[297,256,284,0,266,208,266,313],
[223,231,206,285,0,182,247,329],
[353,305,257,343,369,0,342,355],
[239,227,315,285,304,209,0,277],
[227,207,254,238,222,196,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,266,287,282,291,280,279],
[266,0,255,283,290,279,260,277],
[285,296,0,276,275,288,268,273],
[264,268,275,0,290,282,260,259],
[269,261,276,261,0,288,251,259],
[260,272,263,269,263,0,267,268],
[271,291,283,291,300,284,0,284],
[272,274,278,292,292,283,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,317,293,272,270,285,264],
[250,0,277,281,280,282,282,264],
[234,274,0,273,254,248,260,235],
[258,270,278,0,261,274,283,273],
[279,271,297,290,0,262,279,306],
[281,269,303,277,289,0,278,301],
[266,269,291,268,272,273,0,275],
[287,287,316,278,245,250,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,254,269,286,277,303,259],
[282,0,270,273,279,277,315,278],
[297,281,0,292,275,290,291,252],
[282,278,259,0,245,280,295,292],
[265,272,276,306,0,265,303,281],
[274,274,261,271,286,0,308,281],
[248,236,260,256,248,243,0,269],
[292,273,299,259,270,270,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,280,319,275,276,309,261],
[281,0,278,296,258,265,301,257],
[271,273,0,305,280,272,316,275],
[232,255,246,0,251,260,277,248],
[276,293,271,300,0,284,323,262],
[275,286,279,291,267,0,301,284],
[242,250,235,274,228,250,0,253],
[290,294,276,303,289,267,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,283,287,266,264,273,305],
[254,0,275,242,277,250,260,301],
[268,276,0,242,252,259,256,303],
[264,309,309,0,279,280,292,308],
[285,274,299,272,0,302,294,313],
[287,301,292,271,249,0,289,308],
[278,291,295,259,257,262,0,306],
[246,250,248,243,238,243,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,259,274,277,273,288,275],
[286,0,268,266,270,275,272,271],
[292,283,0,269,268,288,282,276],
[277,285,282,0,268,290,293,288],
[274,281,283,283,0,272,276,273],
[278,276,263,261,279,0,271,282],
[263,279,269,258,275,280,0,280],
[276,280,275,263,278,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,262,246,265,255,308,224],
[302,0,320,278,260,266,264,298],
[289,231,0,248,256,259,255,283],
[305,273,303,0,307,301,274,328],
[286,291,295,244,0,259,328,273],
[296,285,292,250,292,0,260,228],
[243,287,296,277,223,291,0,266],
[327,253,268,223,278,323,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,286,280,283,250,290,233],
[272,0,274,242,295,269,272,250],
[265,277,0,261,289,338,270,248],
[271,309,290,0,296,301,280,283],
[268,256,262,255,0,287,271,260],
[301,282,213,250,264,0,275,240],
[261,279,281,271,280,276,0,253],
[318,301,303,268,291,311,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,278,261,253,248,256,277],
[291,0,291,281,278,278,271,286],
[273,260,0,260,266,252,265,268],
[290,270,291,0,263,279,279,294],
[298,273,285,288,0,275,285,283],
[303,273,299,272,276,0,299,299],
[295,280,286,272,266,252,0,262],
[274,265,283,257,268,252,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,230,299,278,279,228,313],
[278,0,251,271,251,275,202,283],
[321,300,0,256,349,282,185,297],
[252,280,295,0,247,247,215,234],
[273,300,202,304,0,300,238,306],
[272,276,269,304,251,0,285,315],
[323,349,366,336,313,266,0,335],
[238,268,254,317,245,236,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,268,309,260,250,310,267],
[255,0,268,276,275,246,318,239],
[283,283,0,285,298,289,318,267],
[242,275,266,0,243,242,328,218],
[291,276,253,308,0,270,334,261],
[301,305,262,309,281,0,310,293],
[241,233,233,223,217,241,0,215],
[284,312,284,333,290,258,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,306,274,253,297,263,284],
[285,0,282,248,288,252,286,283],
[245,269,0,243,253,268,244,264],
[277,303,308,0,288,298,255,288],
[298,263,298,263,0,263,267,278],
[254,299,283,253,288,0,255,300],
[288,265,307,296,284,296,0,312],
[267,268,287,263,273,251,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,238,411,175,198,257,231],
[336,0,297,416,281,242,236,387],
[313,254,0,397,243,264,226,386],
[140,135,154,0,147,280,110,193],
[376,270,308,404,0,353,301,379],
[353,309,287,271,198,0,190,366],
[294,315,325,441,250,361,0,368],
[320,164,165,358,172,185,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,272,307,286,295,260,291],
[257,0,264,299,260,242,257,270],
[279,287,0,307,292,255,293,293],
[244,252,244,0,258,272,252,256],
[265,291,259,293,0,277,282,283],
[256,309,296,279,274,0,321,298],
[291,294,258,299,269,230,0,284],
[260,281,258,295,268,253,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,264,261,257,262,285,270],
[250,0,259,263,265,246,279,299],
[287,292,0,277,257,292,285,289],
[290,288,274,0,273,290,298,305],
[294,286,294,278,0,256,290,307],
[289,305,259,261,295,0,291,303],
[266,272,266,253,261,260,0,264],
[281,252,262,246,244,248,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,207,270,255,323,244,260],
[238,0,230,231,245,321,195,252],
[344,321,0,280,281,326,269,262],
[281,320,271,0,271,284,250,241],
[296,306,270,280,0,269,242,283],
[228,230,225,267,282,0,274,260],
[307,356,282,301,309,277,0,270],
[291,299,289,310,268,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,287,288,250,259,268,262],
[283,0,286,273,265,285,260,279],
[264,265,0,260,255,255,260,254],
[263,278,291,0,260,261,267,256],
[301,286,296,291,0,264,266,292],
[292,266,296,290,287,0,295,275],
[283,291,291,284,285,256,0,287],
[289,272,297,295,259,276,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,278,287,322,268,279],
[270,0,288,255,299,272,287,278],
[270,263,0,257,270,287,271,262],
[273,296,294,0,312,293,298,279],
[264,252,281,239,0,260,276,271],
[229,279,264,258,291,0,257,264],
[283,264,280,253,275,294,0,273],
[272,273,289,272,280,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,311,292,293,291,285,257],
[317,0,300,318,297,325,263,274],
[240,251,0,251,264,248,230,248],
[259,233,300,0,270,286,262,246],
[258,254,287,281,0,294,261,276],
[260,226,303,265,257,0,247,270],
[266,288,321,289,290,304,0,258],
[294,277,303,305,275,281,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,270,257,269,237,236,281],
[295,0,274,277,291,284,272,286],
[281,277,0,262,290,271,272,269],
[294,274,289,0,281,282,285,287],
[282,260,261,270,0,265,269,289],
[314,267,280,269,286,0,271,296],
[315,279,279,266,282,280,0,289],
[270,265,282,264,262,255,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,256,262,295,271,254],
[278,0,286,284,263,283,279,269],
[270,265,0,273,255,265,288,269],
[295,267,278,0,281,265,285,291],
[289,288,296,270,0,281,274,272],
[256,268,286,286,270,0,288,268],
[280,272,263,266,277,263,0,263],
[297,282,282,260,279,283,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,267,281,263,264,279,295],
[290,0,269,272,268,262,284,293],
[284,282,0,294,254,278,291,311],
[270,279,257,0,271,265,285,280],
[288,283,297,280,0,273,292,292],
[287,289,273,286,278,0,296,300],
[272,267,260,266,259,255,0,270],
[256,258,240,271,259,251,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,290,264,272,283,257,270],
[288,0,282,283,265,277,270,277],
[261,269,0,268,272,279,281,262],
[287,268,283,0,267,266,271,265],
[279,286,279,284,0,286,285,264],
[268,274,272,285,265,0,278,277],
[294,281,270,280,266,273,0,265],
[281,274,289,286,287,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,286,291,273,271,283,283],
[274,0,282,284,279,281,279,276],
[265,269,0,278,285,282,287,280],
[260,267,273,0,265,264,274,282],
[278,272,266,286,0,278,298,291],
[280,270,269,287,273,0,287,279],
[268,272,264,277,253,264,0,284],
[268,275,271,269,260,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,271,298,257,257,274,271],
[283,0,305,272,267,308,298,284],
[280,246,0,264,260,250,262,272],
[253,279,287,0,252,247,279,224],
[294,284,291,299,0,285,277,268],
[294,243,301,304,266,0,293,265],
[277,253,289,272,274,258,0,264],
[280,267,279,327,283,286,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,209,280,307,323,305,218],
[356,0,117,317,240,356,303,250],
[342,434,0,393,310,379,310,258],
[271,234,158,0,262,264,249,244],
[244,311,241,289,0,373,283,211],
[228,195,172,287,178,0,347,294],
[246,248,241,302,268,204,0,292],
[333,301,293,307,340,257,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,307,292,306,282,301],
[280,0,254,282,290,300,282,280],
[275,297,0,309,294,312,290,302],
[244,269,242,0,265,256,255,273],
[259,261,257,286,0,314,269,292],
[245,251,239,295,237,0,255,253],
[269,269,261,296,282,296,0,278],
[250,271,249,278,259,298,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,330,289,278,300,282,292],
[281,0,286,279,264,279,291,290],
[221,265,0,259,234,253,273,275],
[262,272,292,0,250,296,267,275],
[273,287,317,301,0,285,294,273],
[251,272,298,255,266,0,280,279],
[269,260,278,284,257,271,0,291],
[259,261,276,276,278,272,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,313,259,307,292,282,268],
[266,0,286,288,282,265,288,283],
[238,265,0,226,281,299,272,277],
[292,263,325,0,300,273,306,277],
[244,269,270,251,0,301,261,263],
[259,286,252,278,250,0,260,255],
[269,263,279,245,290,291,0,274],
[283,268,274,274,288,296,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,233,277,262,265,273,283],
[260,0,271,281,271,274,273,275],
[318,280,0,286,266,292,292,297],
[274,270,265,0,285,256,272,265],
[289,280,285,266,0,284,280,262],
[286,277,259,295,267,0,284,295],
[278,278,259,279,271,267,0,269],
[268,276,254,286,289,256,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,294,336,254,299,293,339],
[292,0,293,251,234,356,315,329],
[257,258,0,275,278,260,223,254],
[215,300,276,0,231,299,182,284],
[297,317,273,320,0,288,244,286],
[252,195,291,252,263,0,255,294],
[258,236,328,369,307,296,0,347],
[212,222,297,267,265,257,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,272,275,286,288,294,281],
[260,0,284,268,295,283,306,307],
[279,267,0,279,274,271,283,268],
[276,283,272,0,262,275,284,284],
[265,256,277,289,0,269,311,279],
[263,268,280,276,282,0,299,273],
[257,245,268,267,240,252,0,260],
[270,244,283,267,272,278,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,282,306,264,299,285],
[272,0,301,256,294,289,289,288],
[271,250,0,283,292,290,263,276],
[269,295,268,0,290,315,267,263],
[245,257,259,261,0,275,278,269],
[287,262,261,236,276,0,254,248],
[252,262,288,284,273,297,0,282],
[266,263,275,288,282,303,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,282,281,275,272,265,265],
[258,0,260,257,257,246,252,261],
[269,291,0,273,276,276,270,286],
[270,294,278,0,275,260,270,289],
[276,294,275,276,0,264,273,280],
[279,305,275,291,287,0,277,290],
[286,299,281,281,278,274,0,287],
[286,290,265,262,271,261,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,311,281,271,261,274],
[266,0,274,297,266,267,253,272],
[269,277,0,289,257,261,254,260],
[240,254,262,0,275,247,243,270],
[270,285,294,276,0,281,265,294],
[280,284,290,304,270,0,276,284],
[290,298,297,308,286,275,0,295],
[277,279,291,281,257,267,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,249,258,260,256,265,272],
[284,0,239,276,257,278,274,285],
[302,312,0,275,276,295,293,294],
[293,275,276,0,253,250,291,278],
[291,294,275,298,0,296,286,301],
[295,273,256,301,255,0,294,288],
[286,277,258,260,265,257,0,271],
[279,266,257,273,250,263,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,256,296,276,292,278,294],
[247,0,237,267,249,262,247,277],
[295,314,0,297,273,313,269,290],
[255,284,254,0,267,274,271,289],
[275,302,278,284,0,284,285,284],
[259,289,238,277,267,0,254,277],
[273,304,282,280,266,297,0,290],
[257,274,261,262,267,274,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,282,294,268,279,304,292],
[264,0,258,279,282,261,278,301],
[269,293,0,281,270,269,288,282],
[257,272,270,0,269,268,303,286],
[283,269,281,282,0,254,294,286],
[272,290,282,283,297,0,315,294],
[247,273,263,248,257,236,0,259],
[259,250,269,265,265,257,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,219,308,262,316,281,308],
[257,0,288,316,303,352,291,332],
[332,263,0,333,279,336,288,267],
[243,235,218,0,283,286,245,339],
[289,248,272,268,0,288,319,334],
[235,199,215,265,263,0,261,280],
[270,260,263,306,232,290,0,353],
[243,219,284,212,217,271,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,291,281,270,274,302,290],
[266,0,287,291,280,278,267,274],
[260,264,0,281,251,280,268,270],
[270,260,270,0,267,276,250,257],
[281,271,300,284,0,290,284,271],
[277,273,271,275,261,0,269,271],
[249,284,283,301,267,282,0,265],
[261,277,281,294,280,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,263,272,245,320,281,313],
[275,0,279,278,274,315,279,311],
[288,272,0,268,258,312,297,309],
[279,273,283,0,259,303,265,280],
[306,277,293,292,0,287,266,302],
[231,236,239,248,264,0,274,245],
[270,272,254,286,285,277,0,278],
[238,240,242,271,249,306,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,250,276,256,263,251,277],
[273,0,268,274,260,266,269,267],
[301,283,0,287,280,269,294,300],
[275,277,264,0,240,247,249,254],
[295,291,271,311,0,281,287,310],
[288,285,282,304,270,0,268,298],
[300,282,257,302,264,283,0,253],
[274,284,251,297,241,253,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,281,272,280,277,270,268],
[300,0,288,297,288,236,265,288],
[270,263,0,260,299,258,281,284],
[279,254,291,0,280,267,256,268],
[271,263,252,271,0,276,269,273],
[274,315,293,284,275,0,292,277],
[281,286,270,295,282,259,0,258],
[283,263,267,283,278,274,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,267,230,236,271,265,239],
[297,0,307,250,253,272,306,302],
[284,244,0,260,242,262,254,258],
[321,301,291,0,245,283,281,276],
[315,298,309,306,0,308,275,299],
[280,279,289,268,243,0,274,238],
[286,245,297,270,276,277,0,241],
[312,249,293,275,252,313,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,270,300,264,268,297],
[271,0,253,271,288,266,273,272],
[267,298,0,284,304,280,286,299],
[281,280,267,0,306,263,257,295],
[251,263,247,245,0,244,260,276],
[287,285,271,288,307,0,275,317],
[283,278,265,294,291,276,0,293],
[254,279,252,256,275,234,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,276,269,258,260,263,289],
[288,0,291,279,267,266,273,274],
[275,260,0,259,262,275,273,270],
[282,272,292,0,267,286,281,273],
[293,284,289,284,0,276,284,273],
[291,285,276,265,275,0,288,268],
[288,278,278,270,267,263,0,281],
[262,277,281,278,278,283,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,276,267,273,263,273,280],
[287,0,271,287,270,275,259,277],
[275,280,0,274,278,297,263,282],
[284,264,277,0,274,276,281,287],
[278,281,273,277,0,268,284,295],
[288,276,254,275,283,0,274,276],
[278,292,288,270,267,277,0,290],
[271,274,269,264,256,275,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,257,255,277,260,257,250],
[271,0,265,262,280,274,253,260],
[294,286,0,280,298,276,268,283],
[296,289,271,0,294,277,279,274],
[274,271,253,257,0,273,259,266],
[291,277,275,274,278,0,276,273],
[294,298,283,272,292,275,0,273],
[301,291,268,277,285,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,263,262,273,273,257,261],
[309,0,262,269,277,286,268,268],
[288,289,0,291,285,271,273,278],
[289,282,260,0,276,293,279,271],
[278,274,266,275,0,289,260,287],
[278,265,280,258,262,0,273,266],
[294,283,278,272,291,278,0,287],
[290,283,273,280,264,285,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,293,378,311,233,313,283],
[283,0,269,346,321,272,246,313],
[258,282,0,331,248,245,275,282],
[173,205,220,0,207,179,216,224],
[240,230,303,344,0,280,244,285],
[318,279,306,372,271,0,309,307],
[238,305,276,335,307,242,0,277],
[268,238,269,327,266,244,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,268,247,282,265,269,296],
[266,0,262,280,278,239,255,264],
[283,289,0,288,295,265,277,284],
[304,271,263,0,284,250,263,265],
[269,273,256,267,0,276,280,279],
[286,312,286,301,275,0,286,302],
[282,296,274,288,271,265,0,286],
[255,287,267,286,272,249,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,284,284,274,268,276,287],
[260,0,270,285,289,280,273,276],
[267,281,0,269,281,291,292,290],
[267,266,282,0,276,279,288,287],
[277,262,270,275,0,274,282,286],
[283,271,260,272,277,0,275,298],
[275,278,259,263,269,276,0,273],
[264,275,261,264,265,253,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,292,303,285,278,287,274],
[252,0,254,271,253,226,273,246],
[259,297,0,290,275,233,269,270],
[248,280,261,0,250,229,258,248],
[266,298,276,301,0,233,261,266],
[273,325,318,322,318,0,309,303],
[264,278,282,293,290,242,0,265],
[277,305,281,303,285,248,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,282,270,278,299,255,300],
[245,0,248,255,244,273,242,268],
[269,303,0,291,297,300,276,301],
[281,296,260,0,268,290,260,288],
[273,307,254,283,0,295,273,301],
[252,278,251,261,256,0,262,277],
[296,309,275,291,278,289,0,303],
[251,283,250,263,250,274,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,251,263,268,278,273,289],
[305,0,316,285,286,269,305,297],
[300,235,0,278,269,266,289,302],
[288,266,273,0,304,262,305,305],
[283,265,282,247,0,303,278,294],
[273,282,285,289,248,0,294,289],
[278,246,262,246,273,257,0,316],
[262,254,249,246,257,262,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,259,285,261,274,276,273],
[285,0,272,296,282,269,288,302],
[292,279,0,307,270,281,279,285],
[266,255,244,0,271,261,279,248],
[290,269,281,280,0,278,297,290],
[277,282,270,290,273,0,286,285],
[275,263,272,272,254,265,0,273],
[278,249,266,303,261,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,336,278,328,313,297,320],
[276,0,287,246,261,272,293,299],
[215,264,0,263,244,229,271,271],
[273,305,288,0,279,289,320,265],
[223,290,307,272,0,252,302,264],
[238,279,322,262,299,0,276,290],
[254,258,280,231,249,275,0,261],
[231,252,280,286,287,261,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,221,255,262,250,284,252],
[309,0,285,274,281,289,305,261],
[330,266,0,275,275,295,274,276],
[296,277,276,0,294,290,284,260],
[289,270,276,257,0,274,264,261],
[301,262,256,261,277,0,265,236],
[267,246,277,267,287,286,0,232],
[299,290,275,291,290,315,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,264,293,289,263,281],
[277,0,259,254,272,264,269,279],
[275,292,0,258,281,277,284,292],
[287,297,293,0,259,290,263,283],
[258,279,270,292,0,268,282,287],
[262,287,274,261,283,0,282,276],
[288,282,267,288,269,269,0,295],
[270,272,259,268,264,275,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,269,292,263,277,250,279],
[290,0,289,299,294,296,264,267],
[282,262,0,283,279,304,268,294],
[259,252,268,0,251,255,250,258],
[288,257,272,300,0,274,266,254],
[274,255,247,296,277,0,266,277],
[301,287,283,301,285,285,0,264],
[272,284,257,293,297,274,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,252,247,251,261,265,231],
[286,0,277,304,235,262,260,244],
[299,274,0,266,256,259,260,250],
[304,247,285,0,273,297,232,240],
[300,316,295,278,0,281,263,258],
[290,289,292,254,270,0,282,277],
[286,291,291,319,288,269,0,282],
[320,307,301,311,293,274,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,275,274,259,282,278,259],
[266,0,264,251,248,291,261,252],
[276,287,0,272,255,293,263,271],
[277,300,279,0,283,292,264,278],
[292,303,296,268,0,303,268,291],
[269,260,258,259,248,0,229,261],
[273,290,288,287,283,322,0,281],
[292,299,280,273,260,290,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,331,298,343,288,319,264],
[256,0,286,271,277,239,275,251],
[220,265,0,244,241,207,263,204],
[253,280,307,0,310,267,317,248],
[208,274,310,241,0,219,261,210],
[263,312,344,284,332,0,287,267],
[232,276,288,234,290,264,0,276],
[287,300,347,303,341,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,302,262,286,255,290,278],
[289,0,297,257,292,285,282,246],
[249,254,0,255,254,259,264,259],
[289,294,296,0,290,279,274,281],
[265,259,297,261,0,267,272,271],
[296,266,292,272,284,0,283,283],
[261,269,287,277,279,268,0,269],
[273,305,292,270,280,268,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,275,265,293,291,282,266],
[299,0,265,281,311,300,295,292],
[276,286,0,297,262,298,279,285],
[286,270,254,0,307,301,318,263],
[258,240,289,244,0,304,296,276],
[260,251,253,250,247,0,254,256],
[269,256,272,233,255,297,0,267],
[285,259,266,288,275,295,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,332,300,267,309,288,281],
[261,0,308,280,256,300,259,258],
[219,243,0,258,249,276,270,251],
[251,271,293,0,229,288,262,258],
[284,295,302,322,0,314,286,272],
[242,251,275,263,237,0,266,269],
[263,292,281,289,265,285,0,264],
[270,293,300,293,279,282,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,284,273,277,288,280,281],
[248,0,280,241,250,263,273,259],
[267,271,0,282,270,278,271,299],
[278,310,269,0,282,276,283,271],
[274,301,281,269,0,296,293,282],
[263,288,273,275,255,0,292,274],
[271,278,280,268,258,259,0,262],
[270,292,252,280,269,277,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,300,272,303,264,284,277],
[279,0,285,270,303,271,282,274],
[251,266,0,270,294,272,263,266],
[279,281,281,0,282,269,270,256],
[248,248,257,269,0,263,247,255],
[287,280,279,282,288,0,272,276],
[267,269,288,281,304,279,0,285],
[274,277,285,295,296,275,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,285,261,251,267,235,260],
[308,0,287,287,300,266,242,273],
[266,264,0,261,238,268,268,258],
[290,264,290,0,259,286,233,249],
[300,251,313,292,0,300,280,266],
[284,285,283,265,251,0,276,240],
[316,309,283,318,271,275,0,283],
[291,278,293,302,285,311,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,391,299,362,340,362,319],
[290,0,438,315,329,344,337,260],
[160,113,0,203,302,279,282,209],
[252,236,348,0,317,369,329,312],
[189,222,249,234,0,234,226,208],
[211,207,272,182,317,0,278,318],
[189,214,269,222,325,273,0,188],
[232,291,342,239,343,233,363,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,282,295,239,265,305,262],
[268,0,282,288,264,272,302,258],
[269,269,0,278,268,292,298,294],
[256,263,273,0,256,261,251,238],
[312,287,283,295,0,298,312,266],
[286,279,259,290,253,0,278,280],
[246,249,253,300,239,273,0,278],
[289,293,257,313,285,271,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,307,290,272,288,290,283],
[271,0,299,282,259,246,278,244],
[244,252,0,264,234,244,274,259],
[261,269,287,0,269,276,294,244],
[279,292,317,282,0,292,309,268],
[263,305,307,275,259,0,281,262],
[261,273,277,257,242,270,0,278],
[268,307,292,307,283,289,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,275,223,222,256,245,258],
[239,0,252,222,263,288,234,227],
[276,299,0,237,268,246,222,251],
[328,329,314,0,282,317,220,285],
[329,288,283,269,0,280,283,269],
[295,263,305,234,271,0,279,244],
[306,317,329,331,268,272,0,310],
[293,324,300,266,282,307,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,265,292,248,278,275,279],
[274,0,257,275,261,267,263,253],
[286,294,0,291,255,282,280,282],
[259,276,260,0,243,286,268,268],
[303,290,296,308,0,295,274,279],
[273,284,269,265,256,0,307,264],
[276,288,271,283,277,244,0,253],
[272,298,269,283,272,287,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,290,283,271,274,291,263],
[264,0,269,265,256,257,277,244],
[261,282,0,277,280,278,284,268],
[268,286,274,0,270,277,289,264],
[280,295,271,281,0,272,285,278],
[277,294,273,274,279,0,296,259],
[260,274,267,262,266,255,0,254],
[288,307,283,287,273,292,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,299,274,288,299,275],
[262,0,278,274,290,280,282,270],
[277,273,0,291,278,282,290,270],
[252,277,260,0,275,279,281,259],
[277,261,273,276,0,271,287,269],
[263,271,269,272,280,0,283,276],
[252,269,261,270,264,268,0,258],
[276,281,281,292,282,275,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,262,265,273,248,269,280],
[275,0,283,280,281,275,268,268],
[289,268,0,260,276,276,259,283],
[286,271,291,0,299,263,250,273],
[278,270,275,252,0,262,267,278],
[303,276,275,288,289,0,282,306],
[282,283,292,301,284,269,0,284],
[271,283,268,278,273,245,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,256,257,254,283,270,273],
[293,0,272,278,276,296,291,303],
[295,279,0,263,264,294,270,297],
[294,273,288,0,276,280,301,304],
[297,275,287,275,0,305,290,303],
[268,255,257,271,246,0,275,271],
[281,260,281,250,261,276,0,290],
[278,248,254,247,248,280,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,273,293,262,270,276,290],
[263,0,267,272,279,274,242,288],
[278,284,0,280,263,289,263,270],
[258,279,271,0,287,266,263,277],
[289,272,288,264,0,257,249,273],
[281,277,262,285,294,0,261,295],
[275,309,288,288,302,290,0,295],
[261,263,281,274,278,256,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,255,268,249,247,241,256],
[298,0,273,294,257,274,273,283],
[296,278,0,294,269,290,271,314],
[283,257,257,0,258,271,266,266],
[302,294,282,293,0,284,266,298],
[304,277,261,280,267,0,282,285],
[310,278,280,285,285,269,0,295],
[295,268,237,285,253,266,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,222,265,233,254,252,227],
[307,0,276,281,251,295,289,277],
[329,275,0,295,271,255,262,278],
[286,270,256,0,242,311,266,274],
[318,300,280,309,0,267,300,315],
[297,256,296,240,284,0,285,264],
[299,262,289,285,251,266,0,247],
[324,274,273,277,236,287,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,263,269,255,274,252,274],
[301,0,276,290,267,303,269,314],
[288,275,0,289,280,299,280,291],
[282,261,262,0,263,266,243,278],
[296,284,271,288,0,291,264,299],
[277,248,252,285,260,0,257,269],
[299,282,271,308,287,294,0,306],
[277,237,260,273,252,282,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,268,285,290,314,303],
[273,0,294,227,249,286,305,298],
[280,257,0,278,242,249,279,299],
[283,324,273,0,288,298,285,343],
[266,302,309,263,0,311,297,318],
[261,265,302,253,240,0,271,267],
[237,246,272,266,254,280,0,317],
[248,253,252,208,233,284,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,244,249,261,257,262,257],
[283,0,276,254,282,271,259,258],
[307,275,0,267,273,270,268,262],
[302,297,284,0,283,277,267,259],
[290,269,278,268,0,274,261,280],
[294,280,281,274,277,0,264,262],
[289,292,283,284,290,287,0,266],
[294,293,289,292,271,289,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,282,266,285,279,264,298],
[268,0,275,263,249,273,262,282],
[269,276,0,282,258,289,271,310],
[285,288,269,0,251,277,278,284],
[266,302,293,300,0,277,278,285],
[272,278,262,274,274,0,265,284],
[287,289,280,273,273,286,0,291],
[253,269,241,267,266,267,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,258,269,248,256,274,277],
[295,0,255,298,269,259,272,272],
[293,296,0,257,248,269,249,259],
[282,253,294,0,267,248,266,282],
[303,282,303,284,0,283,259,300],
[295,292,282,303,268,0,279,285],
[277,279,302,285,292,272,0,270],
[274,279,292,269,251,266,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,360,379,318,333,335,259],
[219,0,296,381,288,288,324,311],
[191,255,0,334,212,277,318,215],
[172,170,217,0,234,174,224,145],
[233,263,339,317,0,272,352,257],
[218,263,274,377,279,0,266,252],
[216,227,233,327,199,285,0,252],
[292,240,336,406,294,299,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,271,286,291,272,280,281],
[248,0,263,272,285,249,261,263],
[280,288,0,286,272,280,271,287],
[265,279,265,0,287,282,277,279],
[260,266,279,264,0,267,272,281],
[279,302,271,269,284,0,285,283],
[271,290,280,274,279,266,0,283],
[270,288,264,272,270,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,242,262,285,260,292,297],
[290,0,260,264,269,256,304,295],
[309,291,0,269,267,278,286,321],
[289,287,282,0,245,286,288,324],
[266,282,284,306,0,281,310,345],
[291,295,273,265,270,0,278,328],
[259,247,265,263,241,273,0,289],
[254,256,230,227,206,223,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,268,285,275,265,264],
[267,0,263,252,278,259,244,281],
[277,288,0,270,293,268,280,268],
[283,299,281,0,293,278,256,293],
[266,273,258,258,0,267,259,276],
[276,292,283,273,284,0,278,306],
[286,307,271,295,292,273,0,290],
[287,270,283,258,275,245,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,293,264,272,286,268,261],
[244,0,279,267,225,254,246,265],
[258,272,0,293,246,265,248,279],
[287,284,258,0,255,258,252,262],
[279,326,305,296,0,291,264,274],
[265,297,286,293,260,0,248,270],
[283,305,303,299,287,303,0,266],
[290,286,272,289,277,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,260,302,306,278,272,272],
[258,0,296,277,282,253,270,273],
[291,255,0,308,306,314,284,305],
[249,274,243,0,269,258,260,300],
[245,269,245,282,0,275,300,298],
[273,298,237,293,276,0,283,268],
[279,281,267,291,251,268,0,274],
[279,278,246,251,253,283,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,228,246,253,252,274,277],
[304,0,286,263,271,269,298,282],
[323,265,0,277,282,274,266,285],
[305,288,274,0,301,281,287,305],
[298,280,269,250,0,258,279,268],
[299,282,277,270,293,0,267,284],
[277,253,285,264,272,284,0,276],
[274,269,266,246,283,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,266,283,240,276,250,239],
[303,0,289,294,282,289,270,269],
[285,262,0,264,262,267,261,255],
[268,257,287,0,268,273,255,255],
[311,269,289,283,0,289,270,276],
[275,262,284,278,262,0,264,259],
[301,281,290,296,281,287,0,274],
[312,282,296,296,275,292,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,300,271,278,251,256,257],
[271,0,288,257,264,260,260,259],
[251,263,0,239,246,249,252,244],
[280,294,312,0,309,288,286,273],
[273,287,305,242,0,264,272,263],
[300,291,302,263,287,0,291,284],
[295,291,299,265,279,260,0,257],
[294,292,307,278,288,267,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,264,299,271,264,290,274],
[289,0,266,308,285,291,268,269],
[287,285,0,283,269,288,315,292],
[252,243,268,0,258,278,250,271],
[280,266,282,293,0,271,289,260],
[287,260,263,273,280,0,284,270],
[261,283,236,301,262,267,0,258],
[277,282,259,280,291,281,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,260,281,252,256,265],
[291,0,287,258,279,265,287,282],
[285,264,0,280,272,295,302,279],
[291,293,271,0,299,276,296,313],
[270,272,279,252,0,276,265,286],
[299,286,256,275,275,0,266,290],
[295,264,249,255,286,285,0,299],
[286,269,272,238,265,261,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,281,281,274,276,320,269],
[254,0,281,256,275,269,279,253],
[270,270,0,281,283,277,283,258],
[270,295,270,0,287,264,310,261],
[277,276,268,264,0,270,314,248],
[275,282,274,287,281,0,303,276],
[231,272,268,241,237,248,0,242],
[282,298,293,290,303,275,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,256,278,241,263,273,294],
[304,0,275,304,263,293,296,279],
[295,276,0,276,275,268,301,294],
[273,247,275,0,283,255,323,276],
[310,288,276,268,0,278,309,276],
[288,258,283,296,273,0,322,284],
[278,255,250,228,242,229,0,253],
[257,272,257,275,275,267,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,351,271,288,257,207,273,272],
[200,0,233,238,248,168,243,148],
[280,318,0,309,303,261,283,298],
[263,313,242,0,225,236,214,238],
[294,303,248,326,0,297,289,279],
[344,383,290,315,254,0,309,303],
[278,308,268,337,262,242,0,274],
[279,403,253,313,272,248,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,288,273,285,271,282,287],
[273,0,285,271,282,276,281,275],
[263,266,0,276,276,258,287,277],
[278,280,275,0,282,265,283,279],
[266,269,275,269,0,257,277,279],
[280,275,293,286,294,0,303,273],
[269,270,264,268,274,248,0,281],
[264,276,274,272,272,278,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,289,265,264,291,298,313],
[251,0,247,251,260,289,246,247],
[262,304,0,268,256,256,258,256],
[286,300,283,0,274,285,271,320],
[287,291,295,277,0,294,275,285],
[260,262,295,266,257,0,284,279],
[253,305,293,280,276,267,0,290],
[238,304,295,231,266,272,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,255,268,267,266,300,272],
[264,0,255,248,270,259,262,276],
[296,296,0,271,277,279,290,285],
[283,303,280,0,284,274,279,296],
[284,281,274,267,0,272,267,277],
[285,292,272,277,279,0,275,294],
[251,289,261,272,284,276,0,283],
[279,275,266,255,274,257,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,286,291,293,305,284,270],
[250,0,254,255,284,269,223,217],
[265,297,0,265,316,319,273,264],
[260,296,286,0,236,309,274,251],
[258,267,235,315,0,281,261,282],
[246,282,232,242,270,0,243,268],
[267,328,278,277,290,308,0,274],
[281,334,287,300,269,283,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,270,281,265,274,286,297],
[299,0,277,293,269,288,280,285],
[281,274,0,294,285,276,287,272],
[270,258,257,0,243,292,290,287],
[286,282,266,308,0,287,278,295],
[277,263,275,259,264,0,276,279],
[265,271,264,261,273,275,0,265],
[254,266,279,264,256,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,308,283,357,233,276,297],
[224,0,290,222,281,252,259,260],
[243,261,0,224,262,260,245,209],
[268,329,327,0,313,262,244,261],
[194,270,289,238,0,243,261,229],
[318,299,291,289,308,0,286,232],
[275,292,306,307,290,265,0,272],
[254,291,342,290,322,319,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,275,267,271,266,278],
[275,0,255,265,258,262,270,280],
[285,296,0,282,281,275,289,281],
[276,286,269,0,266,278,281,294],
[284,293,270,285,0,289,286,303],
[280,289,276,273,262,0,281,280],
[285,281,262,270,265,270,0,292],
[273,271,270,257,248,271,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,286,286,268,302,280,268],
[257,0,268,253,256,283,262,263],
[265,283,0,259,269,262,267,261],
[265,298,292,0,289,299,272,272],
[283,295,282,262,0,292,270,268],
[249,268,289,252,259,0,252,271],
[271,289,284,279,281,299,0,277],
[283,288,290,279,283,280,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,269,248,322,239,195,325],
[363,0,332,289,400,262,336,362],
[282,219,0,317,331,269,267,259],
[303,262,234,0,344,304,334,363],
[229,151,220,207,0,217,232,212],
[312,289,282,247,334,0,251,357],
[356,215,284,217,319,300,0,361],
[226,189,292,188,339,194,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,461,351,336,247,169,233],
[268,0,434,327,364,366,275,364],
[90,117,0,133,141,46,174,214],
[200,224,418,0,235,179,116,244],
[215,187,410,316,0,134,228,284],
[304,185,505,372,417,0,363,399],
[382,276,377,435,323,188,0,394],
[318,187,337,307,267,152,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,284,286,263,294,281],
[280,0,260,279,286,269,281,293],
[267,291,0,287,285,286,297,276],
[267,272,264,0,283,271,296,267],
[265,265,266,268,0,249,269,272],
[288,282,265,280,302,0,298,288],
[257,270,254,255,282,253,0,258],
[270,258,275,284,279,263,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,278,345,301,296,274,348],
[247,0,265,271,289,223,281,315],
[273,286,0,291,239,261,288,327],
[206,280,260,0,223,231,298,300],
[250,262,312,328,0,214,319,311],
[255,328,290,320,337,0,319,360],
[277,270,263,253,232,232,0,345],
[203,236,224,251,240,191,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,306,250,226,287,223,268],
[350,0,297,255,204,288,229,291],
[245,254,0,313,248,290,264,273],
[301,296,238,0,279,259,277,300],
[325,347,303,272,0,341,319,318],
[264,263,261,292,210,0,321,185],
[328,322,287,274,232,230,0,238],
[283,260,278,251,233,366,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,289,294,267,310,259,265],
[288,0,299,254,261,260,247,287],
[262,252,0,266,280,278,224,232],
[257,297,285,0,284,265,267,254],
[284,290,271,267,0,255,271,253],
[241,291,273,286,296,0,243,256],
[292,304,327,284,280,308,0,266],
[286,264,319,297,298,295,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,223,216,253,268,200,223],
[275,0,247,240,244,294,213,264],
[328,304,0,300,325,316,252,286],
[335,311,251,0,278,292,276,277],
[298,307,226,273,0,351,228,261],
[283,257,235,259,200,0,191,253],
[351,338,299,275,323,360,0,292],
[328,287,265,274,290,298,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,290,292,321,301,261,302],
[251,0,260,274,278,279,257,267],
[261,291,0,278,279,269,255,279],
[259,277,273,0,292,293,276,281],
[230,273,272,259,0,289,262,258],
[250,272,282,258,262,0,249,271],
[290,294,296,275,289,302,0,303],
[249,284,272,270,293,280,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,266,267,253,274,288,272],
[290,0,283,273,279,296,272,278],
[285,268,0,273,263,273,286,273],
[284,278,278,0,270,295,291,286],
[298,272,288,281,0,280,280,279],
[277,255,278,256,271,0,271,273],
[263,279,265,260,271,280,0,277],
[279,273,278,265,272,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,276,261,272,277,249,279],
[249,0,263,265,233,235,258,260],
[275,288,0,285,291,310,289,302],
[290,286,266,0,306,295,318,247],
[279,318,260,245,0,257,271,268],
[274,316,241,256,294,0,293,260],
[302,293,262,233,280,258,0,262],
[272,291,249,304,283,291,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,257,249,249,309,293,256],
[274,0,227,224,236,230,257,224],
[294,324,0,256,284,292,344,327],
[302,327,295,0,279,271,320,286],
[302,315,267,272,0,302,336,288],
[242,321,259,280,249,0,331,268],
[258,294,207,231,215,220,0,201],
[295,327,224,265,263,283,350,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,269,277,268,285,269,278],
[279,0,271,276,280,284,258,279],
[282,280,0,283,268,290,267,264],
[274,275,268,0,276,272,276,277],
[283,271,283,275,0,291,294,268],
[266,267,261,279,260,0,286,273],
[282,293,284,275,257,265,0,274],
[273,272,287,274,283,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,256,294,271,292,299,264],
[261,0,253,278,254,237,318,245],
[295,298,0,300,295,260,314,258],
[257,273,251,0,228,274,297,228],
[280,297,256,323,0,296,313,258],
[259,314,291,277,255,0,309,295],
[252,233,237,254,238,242,0,252],
[287,306,293,323,293,256,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,306,343,271,303,257,279],
[290,0,334,297,267,298,308,283],
[245,217,0,289,271,256,301,205],
[208,254,262,0,236,255,242,231],
[280,284,280,315,0,289,282,226],
[248,253,295,296,262,0,259,274],
[294,243,250,309,269,292,0,274],
[272,268,346,320,325,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,262,275,269,272,260,281],
[282,0,259,292,276,285,282,289],
[289,292,0,291,291,302,273,284],
[276,259,260,0,269,290,266,272],
[282,275,260,282,0,286,273,286],
[279,266,249,261,265,0,268,282],
[291,269,278,285,278,283,0,289],
[270,262,267,279,265,269,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,304,260,281,276,293,287],
[269,0,290,272,278,268,274,281],
[247,261,0,253,246,251,266,260],
[291,279,298,0,289,284,288,270],
[270,273,305,262,0,272,290,274],
[275,283,300,267,279,0,297,275],
[258,277,285,263,261,254,0,269],
[264,270,291,281,277,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,253,299,268,267,273,251],
[294,0,276,309,321,294,291,273],
[298,275,0,321,303,295,293,282],
[252,242,230,0,248,242,265,236],
[283,230,248,303,0,254,266,240],
[284,257,256,309,297,0,267,258],
[278,260,258,286,285,284,0,256],
[300,278,269,315,311,293,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,277,278,276,265,267,289],
[244,0,277,244,271,289,266,273],
[274,274,0,244,268,280,273,275],
[273,307,307,0,287,283,291,286],
[275,280,283,264,0,277,278,258],
[286,262,271,268,274,0,269,277],
[284,285,278,260,273,282,0,265],
[262,278,276,265,293,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,343,289,275,299,253,288,278],
[208,0,217,251,240,228,262,239],
[262,334,0,306,285,275,285,320],
[276,300,245,0,292,280,262,275],
[252,311,266,259,0,265,277,291],
[298,323,276,271,286,0,287,301],
[263,289,266,289,274,264,0,295],
[273,312,231,276,260,250,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,292,266,297,268,287],
[280,0,276,277,264,306,285,295],
[276,275,0,288,282,289,270,273],
[259,274,263,0,262,305,264,278],
[285,287,269,289,0,312,284,296],
[254,245,262,246,239,0,248,264],
[283,266,281,287,267,303,0,291],
[264,256,278,273,255,287,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,272,249,274,255,253],
[282,0,289,276,281,273,279,278],
[276,262,0,260,286,282,255,283],
[279,275,291,0,295,261,263,263],
[302,270,265,256,0,250,263,254],
[277,278,269,290,301,0,286,285],
[296,272,296,288,288,265,0,273],
[298,273,268,288,297,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,303,305,253,299,304,320],
[238,0,289,301,248,264,238,297],
[248,262,0,274,272,241,258,273],
[246,250,277,0,274,256,276,312],
[298,303,279,277,0,265,278,293],
[252,287,310,295,286,0,274,291],
[247,313,293,275,273,277,0,290],
[231,254,278,239,258,260,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,320,283,313,281,310,348],
[292,0,273,293,231,280,319,331],
[231,278,0,242,225,269,313,309],
[268,258,309,0,269,239,289,338],
[238,320,326,282,0,302,285,284],
[270,271,282,312,249,0,313,333],
[241,232,238,262,266,238,0,297],
[203,220,242,213,267,218,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,288,284,278,288,295,294],
[279,0,292,289,283,273,266,296],
[263,259,0,274,262,283,277,284],
[267,262,277,0,282,272,274,286],
[273,268,289,269,0,274,276,291],
[263,278,268,279,277,0,275,280],
[256,285,274,277,275,276,0,277],
[257,255,267,265,260,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,263,299,305,299,222,383],
[230,0,249,289,305,297,287,261],
[288,302,0,312,254,272,236,298],
[252,262,239,0,309,215,275,232],
[246,246,297,242,0,265,273,266],
[252,254,279,336,286,0,296,230],
[329,264,315,276,278,255,0,306],
[168,290,253,319,285,321,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,291,287,300,266,287,275],
[253,0,265,258,283,239,279,268],
[260,286,0,277,271,283,270,275],
[264,293,274,0,283,271,300,272],
[251,268,280,268,0,266,274,269],
[285,312,268,280,285,0,276,283],
[264,272,281,251,277,275,0,272],
[276,283,276,279,282,268,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,290,263,293,239,305,207],
[245,0,285,268,263,267,286,234],
[261,266,0,249,248,202,257,165],
[288,283,302,0,230,266,275,246],
[258,288,303,321,0,280,288,260],
[312,284,349,285,271,0,298,289],
[246,265,294,276,263,253,0,226],
[344,317,386,305,291,262,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,281,279,296,275,283],
[281,0,279,271,283,302,294,280],
[276,272,0,289,283,297,279,270],
[270,280,262,0,286,280,291,295],
[272,268,268,265,0,276,255,262],
[255,249,254,271,275,0,278,262],
[276,257,272,260,296,273,0,269],
[268,271,281,256,289,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,277,286,289,288,284,261],
[284,0,273,286,280,306,275,259],
[274,278,0,272,301,284,271,286],
[265,265,279,0,279,290,265,261],
[262,271,250,272,0,261,269,252],
[263,245,267,261,290,0,249,269],
[267,276,280,286,282,302,0,279],
[290,292,265,290,299,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,270,263,279,268,273,262],
[284,0,288,278,265,286,302,279],
[281,263,0,255,281,242,291,257],
[288,273,296,0,280,284,283,283],
[272,286,270,271,0,263,284,262],
[283,265,309,267,288,0,289,262],
[278,249,260,268,267,262,0,242],
[289,272,294,268,289,289,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,240,223,225,262,193,254],
[329,0,306,281,285,277,268,270],
[311,245,0,268,235,291,245,286],
[328,270,283,0,251,276,283,277],
[326,266,316,300,0,330,249,303],
[289,274,260,275,221,0,266,248],
[358,283,306,268,302,285,0,305],
[297,281,265,274,248,303,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,270,275,253,265,281,258],
[282,0,279,285,259,275,289,272],
[281,272,0,274,284,261,287,254],
[276,266,277,0,260,265,283,270],
[298,292,267,291,0,301,281,283],
[286,276,290,286,250,0,264,267],
[270,262,264,268,270,287,0,268],
[293,279,297,281,268,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,310,283,269,269,284,280],
[258,0,302,274,267,264,287,263],
[241,249,0,269,256,251,257,240],
[268,277,282,0,270,272,279,268],
[282,284,295,281,0,263,290,257],
[282,287,300,279,288,0,288,267],
[267,264,294,272,261,263,0,264],
[271,288,311,283,294,284,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,258,298,281,288,302,317],
[265,0,251,324,245,279,294,301],
[293,300,0,309,254,333,266,337],
[253,227,242,0,281,290,266,303],
[270,306,297,270,0,290,276,320],
[263,272,218,261,261,0,277,288],
[249,257,285,285,275,274,0,316],
[234,250,214,248,231,263,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,326,266,281,305,347,308],
[261,0,251,292,228,237,281,283],
[225,300,0,222,265,253,329,273],
[285,259,329,0,275,360,324,258],
[270,323,286,276,0,290,305,267],
[246,314,298,191,261,0,283,269],
[204,270,222,227,246,268,0,267],
[243,268,278,293,284,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,292,293,304,299,296,268],
[251,0,273,280,291,263,278,272],
[259,278,0,268,275,277,270,266],
[258,271,283,0,284,265,288,255],
[247,260,276,267,0,272,283,260],
[252,288,274,286,279,0,280,291],
[255,273,281,263,268,271,0,268],
[283,279,285,296,291,260,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,261,273,295,263,258,252],
[266,0,290,237,259,257,258,289],
[290,261,0,245,278,263,239,270],
[278,314,306,0,309,259,278,306],
[256,292,273,242,0,249,246,266],
[288,294,288,292,302,0,268,302],
[293,293,312,273,305,283,0,274],
[299,262,281,245,285,249,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,192,231,190,275,147,200],
[333,0,281,352,249,376,280,305],
[359,270,0,319,350,323,329,316],
[320,199,232,0,247,206,213,257],
[361,302,201,304,0,399,307,237],
[276,175,228,345,152,0,290,215],
[404,271,222,338,244,261,0,291],
[351,246,235,294,314,336,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,281,255,290,284,277,268],
[277,0,272,247,276,272,277,268],
[270,279,0,288,282,279,271,271],
[296,304,263,0,313,289,283,288],
[261,275,269,238,0,269,245,251],
[267,279,272,262,282,0,255,275],
[274,274,280,268,306,296,0,279],
[283,283,280,263,300,276,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,251,252,253,253,269,267],
[299,0,260,282,285,283,278,285],
[300,291,0,258,279,280,300,282],
[299,269,293,0,287,285,292,293],
[298,266,272,264,0,275,293,269],
[298,268,271,266,276,0,258,281],
[282,273,251,259,258,293,0,281],
[284,266,269,258,282,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,282,275,271,267,265,286],
[261,0,241,249,244,286,288,265],
[269,310,0,260,257,325,317,256],
[276,302,291,0,318,285,270,268],
[280,307,294,233,0,288,310,285],
[284,265,226,266,263,0,275,251],
[286,263,234,281,241,276,0,282],
[265,286,295,283,266,300,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,256,257,259,269,270,263],
[295,0,250,257,275,274,275,256],
[295,301,0,279,283,276,299,275],
[294,294,272,0,271,276,294,282],
[292,276,268,280,0,294,283,292],
[282,277,275,275,257,0,282,278],
[281,276,252,257,268,269,0,265],
[288,295,276,269,259,273,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,276,280,281,282,272,292],
[264,0,276,272,280,278,280,287],
[275,275,0,270,282,286,278,300],
[271,279,281,0,283,291,265,281],
[270,271,269,268,0,264,277,275],
[269,273,265,260,287,0,275,278],
[279,271,273,286,274,276,0,287],
[259,264,251,270,276,273,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,159,342,298,275,277,307],
[314,0,275,359,361,323,334,319],
[392,276,0,328,275,350,311,304],
[209,192,223,0,280,235,210,230],
[253,190,276,271,0,274,272,279],
[276,228,201,316,277,0,240,260],
[274,217,240,341,279,311,0,317],
[244,232,247,321,272,291,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,306,318,276,288,285,269],
[269,0,288,265,243,285,230,263],
[245,263,0,286,253,289,244,217],
[233,286,265,0,279,271,243,220],
[275,308,298,272,0,286,238,235],
[263,266,262,280,265,0,224,254],
[266,321,307,308,313,327,0,281],
[282,288,334,331,316,297,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,303,307,266,278,275,286],
[265,0,264,272,231,254,239,313],
[248,287,0,257,224,272,253,288],
[244,279,294,0,233,292,262,362],
[285,320,327,318,0,252,319,358],
[273,297,279,259,299,0,248,291],
[276,312,298,289,232,303,0,323],
[265,238,263,189,193,260,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,304,267,277,296,262,284],
[300,0,296,277,275,294,288,292],
[247,255,0,270,269,263,265,265],
[284,274,281,0,298,292,289,295],
[274,276,282,253,0,269,275,263],
[255,257,288,259,282,0,265,275],
[289,263,286,262,276,286,0,271],
[267,259,286,256,288,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,280,263,268,291,258,259],
[258,0,240,271,243,266,225,248],
[271,311,0,281,266,300,273,276],
[288,280,270,0,262,256,228,270],
[283,308,285,289,0,289,255,284],
[260,285,251,295,262,0,222,270],
[293,326,278,323,296,329,0,271],
[292,303,275,281,267,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,255,268,275,282,325,310],
[275,0,283,279,285,270,266,321],
[296,268,0,284,261,267,311,268],
[283,272,267,0,292,267,278,263],
[276,266,290,259,0,259,285,324],
[269,281,284,284,292,0,309,313],
[226,285,240,273,266,242,0,283],
[241,230,283,288,227,238,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,309,296,310,276,306,270],
[241,0,281,266,271,262,302,284],
[242,270,0,278,277,231,276,263],
[255,285,273,0,296,225,303,269],
[241,280,274,255,0,255,282,263],
[275,289,320,326,296,0,323,276],
[245,249,275,248,269,228,0,244],
[281,267,288,282,288,275,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,278,296,290,281,263,269],
[276,0,281,285,293,294,268,274],
[273,270,0,296,317,286,287,282],
[255,266,255,0,284,289,273,270],
[261,258,234,267,0,270,259,256],
[270,257,265,262,281,0,267,278],
[288,283,264,278,292,284,0,289],
[282,277,269,281,295,273,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,268,249,192,247,233,172],
[318,0,358,299,292,233,244,227],
[283,193,0,237,259,210,235,164],
[302,252,314,0,262,259,204,257],
[359,259,292,289,0,279,254,260],
[304,318,341,292,272,0,293,272],
[318,307,316,347,297,258,0,293],
[379,324,387,294,291,279,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,285,269,232,252,259,255],
[296,0,328,311,246,291,287,267],
[266,223,0,274,234,250,244,252],
[282,240,277,0,243,266,256,227],
[319,305,317,308,0,292,272,278],
[299,260,301,285,259,0,300,273],
[292,264,307,295,279,251,0,284],
[296,284,299,324,273,278,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,277,287,299,305,260,284],
[253,0,306,271,274,324,268,271],
[274,245,0,271,232,313,242,270],
[264,280,280,0,246,296,258,272],
[252,277,319,305,0,330,299,282],
[246,227,238,255,221,0,225,259],
[291,283,309,293,252,326,0,268],
[267,280,281,279,269,292,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,285,286,278,283,271],
[276,0,259,304,273,273,296,252],
[271,292,0,296,283,278,283,262],
[266,247,255,0,256,254,267,258],
[265,278,268,295,0,275,297,281],
[273,278,273,297,276,0,287,268],
[268,255,268,284,254,264,0,273],
[280,299,289,293,270,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,302,284,300,262,282,295],
[272,0,285,268,283,271,276,276],
[249,266,0,263,265,258,262,267],
[267,283,288,0,290,289,278,293],
[251,268,286,261,0,261,272,268],
[289,280,293,262,290,0,298,284],
[269,275,289,273,279,253,0,259],
[256,275,284,258,283,267,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,277,489,330,343,419,281],
[390,0,165,494,405,439,382,364],
[274,386,0,365,471,310,370,365],
[62,57,186,0,239,62,208,36],
[221,146,80,312,0,146,258,125],
[208,112,241,489,405,0,299,245],
[132,169,181,343,293,252,0,231],
[270,187,186,515,426,306,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,258,256,270,265,259,251],
[293,0,283,263,280,292,276,287],
[293,268,0,260,282,282,279,289],
[295,288,291,0,285,295,285,273],
[281,271,269,266,0,275,281,255],
[286,259,269,256,276,0,260,275],
[292,275,272,266,270,291,0,268],
[300,264,262,278,296,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,300,278,279,274,281,270],
[248,0,279,261,292,280,262,258],
[251,272,0,260,269,269,276,261],
[273,290,291,0,279,278,277,278],
[272,259,282,272,0,285,272,264],
[277,271,282,273,266,0,285,267],
[270,289,275,274,279,266,0,248],
[281,293,290,273,287,284,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,375,258,315,306,331,281],
[204,0,287,230,281,274,269,249],
[176,264,0,258,271,253,293,219],
[293,321,293,0,315,263,317,246],
[236,270,280,236,0,249,255,238],
[245,277,298,288,302,0,312,208],
[220,282,258,234,296,239,0,178],
[270,302,332,305,313,343,373,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,292,276,281,280,277,295],
[276,0,334,269,292,288,292,295],
[259,217,0,281,246,269,258,281],
[275,282,270,0,272,293,281,293],
[270,259,305,279,0,291,259,289],
[271,263,282,258,260,0,252,281],
[274,259,293,270,292,299,0,291],
[256,256,270,258,262,270,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,297,269,274,300,273,285],
[266,0,309,294,286,294,276,292],
[254,242,0,265,277,277,238,271],
[282,257,286,0,255,301,266,266],
[277,265,274,296,0,293,267,261],
[251,257,274,250,258,0,237,270],
[278,275,313,285,284,314,0,284],
[266,259,280,285,290,281,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,279,292,279,277,303,280],
[282,0,280,288,266,271,269,246],
[272,271,0,292,283,320,312,285],
[259,263,259,0,253,249,282,216],
[272,285,268,298,0,283,285,252],
[274,280,231,302,268,0,291,259],
[248,282,239,269,266,260,0,220],
[271,305,266,335,299,292,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,269,254,268,305,284,263],
[260,0,277,278,268,290,277,274],
[282,274,0,275,285,301,290,279],
[297,273,276,0,268,304,291,273],
[283,283,266,283,0,309,278,276],
[246,261,250,247,242,0,262,246],
[267,274,261,260,273,289,0,253],
[288,277,272,278,275,305,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,278,290,279,270,295],
[276,0,272,275,265,268,275,278],
[278,279,0,269,289,289,279,283],
[273,276,282,0,266,276,283,297],
[261,286,262,285,0,268,269,281],
[272,283,262,275,283,0,279,280],
[281,276,272,268,282,272,0,290],
[256,273,268,254,270,271,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,441,259,259,287,297,391],
[332,0,361,249,236,178,176,321],
[110,190,0,230,219,157,118,264],
[292,302,321,0,208,198,257,390],
[292,315,332,343,0,380,216,390],
[264,373,394,353,171,0,109,383],
[254,375,433,294,335,442,0,463],
[160,230,287,161,161,168,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,272,282,275,274,294,282],
[267,0,263,271,267,261,277,278],
[279,288,0,267,291,279,293,284],
[269,280,284,0,283,269,279,272],
[276,284,260,268,0,287,295,293],
[277,290,272,282,264,0,287,284],
[257,274,258,272,256,264,0,284],
[269,273,267,279,258,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,273,259,258,228,240,244],
[320,0,293,301,309,269,288,290],
[278,258,0,276,301,232,269,270],
[292,250,275,0,286,266,285,278],
[293,242,250,265,0,257,275,286],
[323,282,319,285,294,0,272,285],
[311,263,282,266,276,279,0,280],
[307,261,281,273,265,266,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,288,239,223,227,283,275],
[216,0,287,302,317,241,295,232],
[263,264,0,222,290,272,271,250],
[312,249,329,0,256,287,280,296],
[328,234,261,295,0,325,249,231],
[324,310,279,264,226,0,263,213],
[268,256,280,271,302,288,0,196],
[276,319,301,255,320,338,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,273,268,264,264,281],
[274,0,276,257,286,253,256,287],
[268,275,0,277,274,258,266,272],
[278,294,274,0,277,264,277,281],
[283,265,277,274,0,264,286,273],
[287,298,293,287,287,0,266,293],
[287,295,285,274,265,285,0,286],
[270,264,279,270,278,258,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,247,277,288,260,246,279],
[293,0,284,280,280,251,266,269],
[304,267,0,271,283,275,276,278],
[274,271,280,0,276,295,260,281],
[263,271,268,275,0,269,267,264],
[291,300,276,256,282,0,264,288],
[305,285,275,291,284,287,0,265],
[272,282,273,270,287,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,269,261,242,285,259,276],
[301,0,267,265,257,282,267,258],
[282,284,0,280,269,307,285,275],
[290,286,271,0,256,276,276,243],
[309,294,282,295,0,298,284,268],
[266,269,244,275,253,0,262,255],
[292,284,266,275,267,289,0,269],
[275,293,276,308,283,296,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,272,273,273,264,261,264],
[294,0,290,269,284,288,255,275],
[279,261,0,300,286,272,286,266],
[278,282,251,0,297,295,274,285],
[278,267,265,254,0,288,243,257],
[287,263,279,256,263,0,256,263],
[290,296,265,277,308,295,0,295],
[287,276,285,266,294,288,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,283,275,266,270,280,266],
[293,0,274,272,279,273,273,284],
[268,277,0,270,285,266,274,266],
[276,279,281,0,269,290,275,267],
[285,272,266,282,0,267,282,279],
[281,278,285,261,284,0,291,265],
[271,278,277,276,269,260,0,250],
[285,267,285,284,272,286,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,275,285,287,272,276],
[275,0,264,287,283,302,284,286],
[269,287,0,273,264,288,278,269],
[276,264,278,0,290,274,249,270],
[266,268,287,261,0,280,257,265],
[264,249,263,277,271,0,262,271],
[279,267,273,302,294,289,0,285],
[275,265,282,281,286,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,282,271,284,261,267,268],
[269,0,281,265,276,244,271,266],
[269,270,0,268,282,265,261,268],
[280,286,283,0,287,257,287,262],
[267,275,269,264,0,252,253,256],
[290,307,286,294,299,0,290,274],
[284,280,290,264,298,261,0,281],
[283,285,283,289,295,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,299,324,248,330,295,284],
[292,0,208,275,282,251,281,346],
[252,343,0,316,337,279,281,355],
[227,276,235,0,259,229,312,278],
[303,269,214,292,0,264,239,291],
[221,300,272,322,287,0,264,347],
[256,270,270,239,312,287,0,317],
[267,205,196,273,260,204,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,251,290,265,276,276,260],
[273,0,272,313,280,281,277,276],
[300,279,0,305,291,286,297,275],
[261,238,246,0,255,269,254,254],
[286,271,260,296,0,301,277,279],
[275,270,265,282,250,0,263,255],
[275,274,254,297,274,288,0,256],
[291,275,276,297,272,296,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,265,253,258,283,245,227],
[278,0,292,262,311,276,286,262],
[286,259,0,243,275,261,284,277],
[298,289,308,0,313,290,258,248],
[293,240,276,238,0,227,243,233],
[268,275,290,261,324,0,278,243],
[306,265,267,293,308,273,0,246],
[324,289,274,303,318,308,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,298,265,276,277,291,268],
[276,0,287,280,279,275,279,279],
[253,264,0,253,257,252,253,275],
[286,271,298,0,261,265,296,279],
[275,272,294,290,0,267,281,282],
[274,276,299,286,284,0,287,282],
[260,272,298,255,270,264,0,263],
[283,272,276,272,269,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,282,253,281,277,286,277],
[269,0,285,238,242,235,283,253],
[269,266,0,244,296,251,295,266],
[298,313,307,0,277,270,272,259],
[270,309,255,274,0,234,306,227],
[274,316,300,281,317,0,331,300],
[265,268,256,279,245,220,0,242],
[274,298,285,292,324,251,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,246,281,292,357,305,335],
[210,0,169,233,225,302,233,236],
[305,382,0,273,344,389,382,329],
[270,318,278,0,295,322,292,256],
[259,326,207,256,0,376,287,287],
[194,249,162,229,175,0,223,212],
[246,318,169,259,264,328,0,254],
[216,315,222,295,264,339,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,260,265,267,283,288],
[268,0,281,266,281,278,285,275],
[289,270,0,284,278,254,283,270],
[291,285,267,0,285,257,275,274],
[286,270,273,266,0,276,269,285],
[284,273,297,294,275,0,285,288],
[268,266,268,276,282,266,0,277],
[263,276,281,277,266,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,233,267,296,277,270,274],
[284,0,286,269,305,284,285,282],
[318,265,0,289,317,279,289,309],
[284,282,262,0,313,261,293,278],
[255,246,234,238,0,251,245,246],
[274,267,272,290,300,0,299,275],
[281,266,262,258,306,252,0,278],
[277,269,242,273,305,276,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,231,252,268,249,250,247],
[286,0,251,280,269,272,266,258],
[320,300,0,296,299,262,269,278],
[299,271,255,0,260,271,276,266],
[283,282,252,291,0,272,285,264],
[302,279,289,280,279,0,273,279],
[301,285,282,275,266,278,0,265],
[304,293,273,285,287,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,266,272,265,272,277,281],
[264,0,272,274,273,278,266,272],
[285,279,0,280,276,290,276,271],
[279,277,271,0,279,273,283,281],
[286,278,275,272,0,290,273,274],
[279,273,261,278,261,0,277,276],
[274,285,275,268,278,274,0,283],
[270,279,280,270,277,275,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,270,327,306,319,283,271],
[253,0,283,306,271,289,276,244],
[281,268,0,280,284,296,299,260],
[224,245,271,0,248,273,287,259],
[245,280,267,303,0,321,295,294],
[232,262,255,278,230,0,260,239],
[268,275,252,264,256,291,0,244],
[280,307,291,292,257,312,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,274,261,265,274,279],
[275,0,283,288,281,273,272,282],
[284,268,0,286,278,293,257,279],
[277,263,265,0,261,256,267,273],
[290,270,273,290,0,253,282,267],
[286,278,258,295,298,0,291,276],
[277,279,294,284,269,260,0,272],
[272,269,272,278,284,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,277,269,247,252,263],
[281,0,312,296,252,314,291,333],
[276,239,0,235,232,256,225,245],
[274,255,316,0,264,217,254,296],
[282,299,319,287,0,257,240,275],
[304,237,295,334,294,0,258,283],
[299,260,326,297,311,293,0,306],
[288,218,306,255,276,268,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,239,307,289,338,283,283],
[293,0,268,263,267,339,311,295],
[312,283,0,276,284,324,237,263],
[244,288,275,0,259,296,243,221],
[262,284,267,292,0,309,263,234],
[213,212,227,255,242,0,241,170],
[268,240,314,308,288,310,0,261],
[268,256,288,330,317,381,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,269,260,263,261,266,279],
[301,0,294,294,304,271,296,294],
[282,257,0,290,267,278,260,290],
[291,257,261,0,273,281,268,285],
[288,247,284,278,0,268,266,284],
[290,280,273,270,283,0,272,283],
[285,255,291,283,285,279,0,290],
[272,257,261,266,267,268,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,274,258,256,267,283],
[277,0,267,270,272,256,280,276],
[284,284,0,271,274,261,271,269],
[277,281,280,0,275,268,266,259],
[293,279,277,276,0,270,274,277],
[295,295,290,283,281,0,276,272],
[284,271,280,285,277,275,0,280],
[268,275,282,292,274,279,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,245,197,273,273,231,293],
[241,0,262,242,276,251,240,235],
[306,289,0,259,244,312,263,279],
[354,309,292,0,282,286,259,284],
[278,275,307,269,0,272,253,266],
[278,300,239,265,279,0,224,292],
[320,311,288,292,298,327,0,268],
[258,316,272,267,285,259,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,288,278,260,262,269,279],
[273,0,273,253,276,270,269,260],
[263,278,0,276,272,260,263,287],
[273,298,275,0,280,276,295,276],
[291,275,279,271,0,280,284,292],
[289,281,291,275,271,0,270,272],
[282,282,288,256,267,281,0,277],
[272,291,264,275,259,279,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,249,256,259,270,270,267],
[286,0,278,299,278,274,298,300],
[302,273,0,298,255,288,306,288],
[295,252,253,0,249,255,271,266],
[292,273,296,302,0,270,293,298],
[281,277,263,296,281,0,295,298],
[281,253,245,280,258,256,0,257],
[284,251,263,285,253,253,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,297,266,302,295,288,275],
[297,0,266,265,267,254,254,284],
[254,285,0,267,242,257,263,253],
[285,286,284,0,268,273,271,297],
[249,284,309,283,0,269,259,276],
[256,297,294,278,282,0,266,279],
[263,297,288,280,292,285,0,264],
[276,267,298,254,275,272,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,289,289,297,300,282,273],
[256,0,263,249,279,270,249,252],
[262,288,0,276,286,295,270,261],
[262,302,275,0,302,278,283,299],
[254,272,265,249,0,266,260,264],
[251,281,256,273,285,0,274,282],
[269,302,281,268,291,277,0,292],
[278,299,290,252,287,269,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,290,283,283,274,293,277],
[257,0,286,291,289,286,293,265],
[261,265,0,265,282,262,289,283],
[268,260,286,0,289,270,308,268],
[268,262,269,262,0,265,289,258],
[277,265,289,281,286,0,288,265],
[258,258,262,243,262,263,0,259],
[274,286,268,283,293,286,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,301,269,305,308,292,288],
[268,0,254,234,275,257,255,266],
[250,297,0,257,261,287,278,265],
[282,317,294,0,292,292,275,275],
[246,276,290,259,0,284,256,246],
[243,294,264,259,267,0,265,267],
[259,296,273,276,295,286,0,277],
[263,285,286,276,305,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,199,312,335,312,358,351],
[269,0,252,273,154,242,224,155],
[352,299,0,378,231,264,287,268],
[239,278,173,0,266,290,309,242],
[216,397,320,285,0,294,245,306],
[239,309,287,261,257,0,325,211],
[193,327,264,242,306,226,0,209],
[200,396,283,309,245,340,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,275,265,269,287,264,274],
[290,0,279,277,274,288,267,279],
[276,272,0,266,279,279,274,270],
[286,274,285,0,296,293,287,295],
[282,277,272,255,0,283,256,272],
[264,263,272,258,268,0,259,275],
[287,284,277,264,295,292,0,287],
[277,272,281,256,279,276,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,278,276,279,277,266,284],
[280,0,286,290,275,266,289,295],
[273,265,0,276,268,270,261,294],
[275,261,275,0,253,256,255,266],
[272,276,283,298,0,286,281,281],
[274,285,281,295,265,0,267,276],
[285,262,290,296,270,284,0,281],
[267,256,257,285,270,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,309,309,289,250,288,258],
[272,0,313,314,303,260,277,258],
[242,238,0,259,264,260,258,216],
[242,237,292,0,281,229,234,252],
[262,248,287,270,0,233,227,222],
[301,291,291,322,318,0,261,285],
[263,274,293,317,324,290,0,288],
[293,293,335,299,329,266,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,242,257,268,259,262,232],
[287,0,243,290,287,270,260,270],
[309,308,0,283,314,286,267,304],
[294,261,268,0,283,288,274,258],
[283,264,237,268,0,265,303,287],
[292,281,265,263,286,0,282,269],
[289,291,284,277,248,269,0,298],
[319,281,247,293,264,282,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,284,257,267,278,258,248],
[294,0,292,241,287,255,275,286],
[267,259,0,246,258,259,255,271],
[294,310,305,0,285,309,284,262],
[284,264,293,266,0,260,276,286],
[273,296,292,242,291,0,263,248],
[293,276,296,267,275,288,0,276],
[303,265,280,289,265,303,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,268,273,240,285,261,236],
[307,0,234,293,259,314,250,261],
[283,317,0,270,291,305,240,252],
[278,258,281,0,243,287,241,254],
[311,292,260,308,0,319,297,235],
[266,237,246,264,232,0,208,282],
[290,301,311,310,254,343,0,291],
[315,290,299,297,316,269,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,196,0,120,228,189,375],
[417,0,221,281,350,447,432,412],
[355,330,0,166,322,387,298,532],
[551,270,385,0,423,515,363,514],
[431,201,229,128,0,446,338,435],
[323,104,164,36,105,0,165,388],
[362,119,253,188,213,386,0,420],
[176,139,19,37,116,163,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,265,294,278,280,278,280],
[271,0,266,273,281,283,279,315],
[286,285,0,265,295,280,280,289],
[257,278,286,0,283,263,264,308],
[273,270,256,268,0,286,263,286],
[271,268,271,288,265,0,257,286],
[273,272,271,287,288,294,0,298],
[271,236,262,243,265,265,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,252,277,282,280,252,264],
[289,0,304,281,287,283,287,259],
[299,247,0,283,289,264,274,276],
[274,270,268,0,276,306,259,268],
[269,264,262,275,0,293,273,250],
[271,268,287,245,258,0,284,258],
[299,264,277,292,278,267,0,243],
[287,292,275,283,301,293,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,322,314,290,304,274,307],
[277,0,288,288,293,261,298,302],
[229,263,0,292,240,253,253,283],
[237,263,259,0,263,257,265,252],
[261,258,311,288,0,267,282,278],
[247,290,298,294,284,0,284,282],
[277,253,298,286,269,267,0,278],
[244,249,268,299,273,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,265,272,280,264,258,261],
[288,0,300,281,273,284,291,281],
[286,251,0,283,278,276,264,271],
[279,270,268,0,280,275,264,275],
[271,278,273,271,0,270,262,275],
[287,267,275,276,281,0,272,270],
[293,260,287,287,289,279,0,270],
[290,270,280,276,276,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,267,268,283,280,268,290],
[259,0,267,255,276,274,266,259],
[284,284,0,284,280,295,285,274],
[283,296,267,0,286,278,264,272],
[268,275,271,265,0,287,266,252],
[271,277,256,273,264,0,250,263],
[283,285,266,287,285,301,0,277],
[261,292,277,279,299,288,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,277,280,284,275,284],
[279,0,260,298,296,284,264,265],
[268,291,0,266,287,284,281,281],
[274,253,285,0,307,280,258,271],
[271,255,264,244,0,264,232,258],
[267,267,267,271,287,0,281,282],
[276,287,270,293,319,270,0,287],
[267,286,270,280,293,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,246,247,265,256,245,304],
[294,0,278,278,276,271,271,310],
[305,273,0,243,311,274,272,282],
[304,273,308,0,317,305,322,320],
[286,275,240,234,0,296,271,303],
[295,280,277,246,255,0,292,322],
[306,280,279,229,280,259,0,280],
[247,241,269,231,248,229,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,288,280,288,278,280,275],
[254,0,263,262,274,253,252,270],
[263,288,0,264,279,263,253,270],
[271,289,287,0,297,277,272,271],
[263,277,272,254,0,269,249,283],
[273,298,288,274,282,0,279,298],
[271,299,298,279,302,272,0,283],
[276,281,281,280,268,253,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,264,258,248,272,273,263],
[292,0,269,287,284,286,278,292],
[287,282,0,260,265,288,284,282],
[293,264,291,0,285,286,263,283],
[303,267,286,266,0,286,290,297],
[279,265,263,265,265,0,299,260],
[278,273,267,288,261,252,0,271],
[288,259,269,268,254,291,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,295,276,324,234,298,292],
[296,0,281,320,340,290,274,319],
[256,270,0,323,328,285,264,313],
[275,231,228,0,300,246,253,281],
[227,211,223,251,0,220,250,241],
[317,261,266,305,331,0,276,288],
[253,277,287,298,301,275,0,288],
[259,232,238,270,310,263,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,271,266,276,279,273,260],
[279,0,278,274,266,266,293,267],
[280,273,0,264,297,263,277,262],
[285,277,287,0,275,273,291,266],
[275,285,254,276,0,262,273,252],
[272,285,288,278,289,0,280,278],
[278,258,274,260,278,271,0,271],
[291,284,289,285,299,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,275,281,287,277,279],
[275,0,283,275,264,275,282,269],
[278,268,0,251,266,276,269,254],
[276,276,300,0,275,282,270,282],
[270,287,285,276,0,297,282,282],
[264,276,275,269,254,0,286,268],
[274,269,282,281,269,265,0,279],
[272,282,297,269,269,283,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,279,257,262,283,257,287],
[273,0,287,257,261,275,260,283],
[272,264,0,255,241,281,250,270],
[294,294,296,0,270,283,275,304],
[289,290,310,281,0,286,275,287],
[268,276,270,268,265,0,246,302],
[294,291,301,276,276,305,0,273],
[264,268,281,247,264,249,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,268,284,253,261,276,254],
[289,0,280,297,283,286,286,268],
[283,271,0,271,279,273,275,284],
[267,254,280,0,270,253,314,268],
[298,268,272,281,0,260,301,286],
[290,265,278,298,291,0,305,274],
[275,265,276,237,250,246,0,249],
[297,283,267,283,265,277,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,277,276,272,285,277,246],
[250,0,268,248,266,282,282,238],
[274,283,0,274,247,275,266,239],
[275,303,277,0,279,265,302,267],
[279,285,304,272,0,252,298,294],
[266,269,276,286,299,0,286,270],
[274,269,285,249,253,265,0,245],
[305,313,312,284,257,281,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,292,278,231,290,270,293],
[258,0,275,236,267,256,246,291],
[259,276,0,234,254,244,236,263],
[273,315,317,0,276,276,287,307],
[320,284,297,275,0,299,276,289],
[261,295,307,275,252,0,263,282],
[281,305,315,264,275,288,0,303],
[258,260,288,244,262,269,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,294,267,262,296,283,282],
[279,0,268,280,267,327,279,288],
[257,283,0,263,268,285,242,251],
[284,271,288,0,273,281,277,286],
[289,284,283,278,0,323,275,285],
[255,224,266,270,228,0,262,280],
[268,272,309,274,276,289,0,281],
[269,263,300,265,266,271,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,322,272,279,319,338,325],
[251,0,273,265,274,286,303,310],
[229,278,0,291,271,249,304,290],
[279,286,260,0,275,277,284,310],
[272,277,280,276,0,256,286,316],
[232,265,302,274,295,0,297,285],
[213,248,247,267,265,254,0,323],
[226,241,261,241,235,266,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,281,276,263,294,283,280],
[281,0,289,286,263,291,281,281],
[270,262,0,273,250,294,268,265],
[275,265,278,0,277,295,295,288],
[288,288,301,274,0,304,294,296],
[257,260,257,256,247,0,268,270],
[268,270,283,256,257,283,0,275],
[271,270,286,263,255,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,268,256,296,267,287,280],
[279,0,277,266,278,286,290,299],
[283,274,0,260,304,288,287,294],
[295,285,291,0,304,292,268,313],
[255,273,247,247,0,266,261,281],
[284,265,263,259,285,0,262,289],
[264,261,264,283,290,289,0,298],
[271,252,257,238,270,262,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,235,356,56,167,210,412],
[473,0,169,427,352,306,414,346],
[316,382,0,382,304,362,257,323],
[195,124,169,0,124,89,334,136],
[495,199,247,427,0,306,358,424],
[384,245,189,462,245,0,245,325],
[341,137,294,217,193,306,0,273],
[139,205,228,415,127,226,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,277,292,300,286,292,269],
[302,0,237,294,304,291,310,271],
[274,314,0,304,283,258,272,273],
[259,257,247,0,253,256,249,264],
[251,247,268,298,0,269,280,275],
[265,260,293,295,282,0,265,308],
[259,241,279,302,271,286,0,275],
[282,280,278,287,276,243,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,267,275,280,302,299,280],
[270,0,264,273,287,266,284,284],
[284,287,0,282,298,284,274,277],
[276,278,269,0,284,286,289,295],
[271,264,253,267,0,268,254,256],
[249,285,267,265,283,0,273,261],
[252,267,277,262,297,278,0,280],
[271,267,274,256,295,290,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,287,272,261,284,260,271],
[278,0,284,294,281,295,273,276],
[264,267,0,280,262,273,268,270],
[279,257,271,0,260,282,256,261],
[290,270,289,291,0,284,278,277],
[267,256,278,269,267,0,262,271],
[291,278,283,295,273,289,0,289],
[280,275,281,290,274,280,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,236,216,276,254,313,256],
[265,0,243,240,285,251,311,237],
[315,308,0,281,307,267,316,272],
[335,311,270,0,287,317,294,321],
[275,266,244,264,0,276,268,281],
[297,300,284,234,275,0,282,277],
[238,240,235,257,283,269,0,267],
[295,314,279,230,270,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,275,267,254,274,236],
[269,0,297,269,278,270,260,251],
[267,254,0,249,258,243,232,246],
[276,282,302,0,293,264,270,266],
[284,273,293,258,0,244,262,243],
[297,281,308,287,307,0,288,271],
[277,291,319,281,289,263,0,280],
[315,300,305,285,308,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,247,244,254,263,278,239],
[297,0,274,291,284,280,278,276],
[304,277,0,281,275,277,282,278],
[307,260,270,0,293,267,285,259],
[297,267,276,258,0,267,275,262],
[288,271,274,284,284,0,281,254],
[273,273,269,266,276,270,0,257],
[312,275,273,292,289,297,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,280,284,289,286,285,277],
[283,0,268,289,280,282,287,276],
[271,283,0,289,263,271,278,278],
[267,262,262,0,293,306,284,275],
[262,271,288,258,0,293,287,288],
[265,269,280,245,258,0,266,274],
[266,264,273,267,264,285,0,267],
[274,275,273,276,263,277,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,258,268,271,271,271,250],
[279,0,262,265,253,265,275,255],
[293,289,0,275,279,286,299,277],
[283,286,276,0,278,267,287,265],
[280,298,272,273,0,289,291,282],
[280,286,265,284,262,0,290,248],
[280,276,252,264,260,261,0,252],
[301,296,274,286,269,303,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,273,266,252,273,268,259],
[286,0,287,275,280,289,262,284],
[278,264,0,268,265,284,262,267],
[285,276,283,0,291,311,258,276],
[299,271,286,260,0,291,273,262],
[278,262,267,240,260,0,250,245],
[283,289,289,293,278,301,0,273],
[292,267,284,275,289,306,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,284,199,239,238,195,258],
[327,0,304,258,280,241,208,327],
[267,247,0,270,236,261,186,312],
[352,293,281,0,291,305,274,308],
[312,271,315,260,0,278,204,306],
[313,310,290,246,273,0,276,255],
[356,343,365,277,347,275,0,329],
[293,224,239,243,245,296,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,259,264,290,288,262,287],
[280,0,284,291,310,293,275,288],
[292,267,0,286,304,297,267,288],
[287,260,265,0,292,278,277,287],
[261,241,247,259,0,265,242,268],
[263,258,254,273,286,0,269,262],
[289,276,284,274,309,282,0,273],
[264,263,263,264,283,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,258,284,298,279,271,297],
[249,0,241,296,242,261,256,264],
[293,310,0,300,307,226,275,285],
[267,255,251,0,280,250,252,303],
[253,309,244,271,0,274,286,275],
[272,290,325,301,277,0,255,272],
[280,295,276,299,265,296,0,296],
[254,287,266,248,276,279,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,257,280,315,262,282,243],
[324,0,350,314,329,321,270,345],
[294,201,0,225,239,262,260,258],
[271,237,326,0,283,278,270,293],
[236,222,312,268,0,266,264,267],
[289,230,289,273,285,0,243,285],
[269,281,291,281,287,308,0,293],
[308,206,293,258,284,266,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,235,251,264,279,276,267],
[310,0,303,275,288,293,303,276],
[316,248,0,266,269,318,284,265],
[300,276,285,0,310,326,268,290],
[287,263,282,241,0,301,285,270],
[272,258,233,225,250,0,268,245],
[275,248,267,283,266,283,0,265],
[284,275,286,261,281,306,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,272,266,268,268,278,270],
[287,0,257,276,265,265,273,273],
[279,294,0,274,277,269,303,271],
[285,275,277,0,276,276,284,269],
[283,286,274,275,0,266,288,275],
[283,286,282,275,285,0,287,288],
[273,278,248,267,263,264,0,268],
[281,278,280,282,276,263,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,271,273,273,270,268],
[285,0,283,291,276,265,297,276],
[281,268,0,267,281,282,286,281],
[280,260,284,0,269,274,292,248],
[278,275,270,282,0,264,271,267],
[278,286,269,277,287,0,291,276],
[281,254,265,259,280,260,0,265],
[283,275,270,303,284,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,273,258,268,276,249,249],
[298,0,288,274,312,291,274,265],
[278,263,0,257,295,283,249,271],
[293,277,294,0,286,279,277,260],
[283,239,256,265,0,264,251,255],
[275,260,268,272,287,0,252,273],
[302,277,302,274,300,299,0,278],
[302,286,280,291,296,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,252,257,233,268,253,274],
[268,0,258,259,275,299,281,266],
[299,293,0,270,278,287,304,278],
[294,292,281,0,271,286,300,288],
[318,276,273,280,0,288,282,287],
[283,252,264,265,263,0,270,273],
[298,270,247,251,269,281,0,279],
[277,285,273,263,264,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,255,265,216,348,274,201],
[341,0,319,273,247,328,209,200],
[296,232,0,294,357,295,241,278],
[286,278,257,0,301,291,306,321],
[335,304,194,250,0,238,332,220],
[203,223,256,260,313,0,245,186],
[277,342,310,245,219,306,0,202],
[350,351,273,230,331,365,349,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,286,262,268,286,262,266],
[283,0,275,297,273,321,272,277],
[265,276,0,260,244,294,248,291],
[289,254,291,0,270,311,278,271],
[283,278,307,281,0,289,273,300],
[265,230,257,240,262,0,252,283],
[289,279,303,273,278,299,0,282],
[285,274,260,280,251,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,267,259,291,264,285,275],
[274,0,261,258,293,260,266,281],
[284,290,0,276,304,280,258,276],
[292,293,275,0,313,285,274,276],
[260,258,247,238,0,246,252,266],
[287,291,271,266,305,0,302,298],
[266,285,293,277,299,249,0,288],
[276,270,275,275,285,253,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,283,254,283,248,293,273],
[311,0,235,247,266,253,282,261],
[268,316,0,258,274,285,306,282],
[297,304,293,0,287,272,288,286],
[268,285,277,264,0,234,307,253],
[303,298,266,279,317,0,319,286],
[258,269,245,263,244,232,0,243],
[278,290,269,265,298,265,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,269,282,290,226,281,258],
[295,0,296,300,287,276,287,270],
[282,255,0,244,262,253,280,270],
[269,251,307,0,304,239,322,243],
[261,264,289,247,0,227,299,260],
[325,275,298,312,324,0,320,286],
[270,264,271,229,252,231,0,263],
[293,281,281,308,291,265,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,291,311,278,308,314,267],
[235,0,243,268,222,269,267,246],
[260,308,0,284,270,294,316,250],
[240,283,267,0,218,267,298,246],
[273,329,281,333,0,305,309,295],
[243,282,257,284,246,0,286,258],
[237,284,235,253,242,265,0,230],
[284,305,301,305,256,293,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,285,287,292,269,293,290],
[279,0,286,288,297,282,344,266],
[266,265,0,260,315,265,328,254],
[264,263,291,0,291,291,309,260],
[259,254,236,260,0,239,300,252],
[282,269,286,260,312,0,316,291],
[258,207,223,242,251,235,0,232],
[261,285,297,291,299,260,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,272,294,290,273,308,272],
[258,0,248,264,268,265,279,274],
[279,303,0,266,268,262,284,263],
[257,287,285,0,251,247,285,249],
[261,283,283,300,0,274,319,261],
[278,286,289,304,277,0,275,276],
[243,272,267,266,232,276,0,262],
[279,277,288,302,290,275,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,291,322,276,266,292],
[270,0,268,318,288,293,265,294],
[271,283,0,322,279,276,269,271],
[260,233,229,0,271,257,243,256],
[229,263,272,280,0,251,273,276],
[275,258,275,294,300,0,284,271],
[285,286,282,308,278,267,0,277],
[259,257,280,295,275,280,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,240,241,232,270,224,228],
[295,0,269,257,268,284,261,268],
[311,282,0,273,288,279,252,276],
[310,294,278,0,270,296,273,282],
[319,283,263,281,0,295,257,279],
[281,267,272,255,256,0,267,244],
[327,290,299,278,294,284,0,275],
[323,283,275,269,272,307,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,301,284,286,315,346,274],
[262,0,250,296,285,290,290,248],
[250,301,0,292,309,334,313,283],
[267,255,259,0,247,288,298,281],
[265,266,242,304,0,289,298,267],
[236,261,217,263,262,0,278,262],
[205,261,238,253,253,273,0,255],
[277,303,268,270,284,289,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,272,300,278,298,315,296],
[256,0,268,297,228,293,275,299],
[279,283,0,290,242,266,253,276],
[251,254,261,0,230,252,258,268],
[273,323,309,321,0,295,263,321],
[253,258,285,299,256,0,272,298],
[236,276,298,293,288,279,0,282],
[255,252,275,283,230,253,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,277,260,257,268,293,277],
[261,0,259,259,249,280,285,257],
[274,292,0,252,247,287,272,270],
[291,292,299,0,261,286,290,272],
[294,302,304,290,0,293,310,274],
[283,271,264,265,258,0,280,284],
[258,266,279,261,241,271,0,267],
[274,294,281,279,277,267,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,238,221,214,280,235,212],
[245,0,248,309,292,296,278,291],
[313,303,0,269,263,272,310,264],
[330,242,282,0,277,267,309,249],
[337,259,288,274,0,268,291,233],
[271,255,279,284,283,0,273,268],
[316,273,241,242,260,278,0,238],
[339,260,287,302,318,283,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,245,201,247,231,216,268],
[294,0,284,256,246,280,251,302],
[306,267,0,248,264,271,240,261],
[350,295,303,0,247,308,310,283],
[304,305,287,304,0,329,322,257],
[320,271,280,243,222,0,293,296],
[335,300,311,241,229,258,0,312],
[283,249,290,268,294,255,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,286,286,271,294,275,283],
[263,0,283,281,278,276,273,266],
[265,268,0,262,268,274,270,262],
[265,270,289,0,279,273,269,275],
[280,273,283,272,0,278,283,272],
[257,275,277,278,273,0,266,269],
[276,278,281,282,268,285,0,273],
[268,285,289,276,279,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,325,309,246,287,264,277],
[260,0,338,278,262,305,283,279],
[226,213,0,307,206,232,233,237],
[242,273,244,0,233,266,246,250],
[305,289,345,318,0,309,293,268],
[264,246,319,285,242,0,241,228],
[287,268,318,305,258,310,0,284],
[274,272,314,301,283,323,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,282,278,267,282,262,278],
[260,0,274,277,271,268,271,260],
[269,277,0,275,280,285,273,273],
[273,274,276,0,281,260,261,279],
[284,280,271,270,0,274,264,272],
[269,283,266,291,277,0,272,272],
[289,280,278,290,287,279,0,272],
[273,291,278,272,279,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,292,285,263,283,266,281],
[263,0,292,288,246,274,240,289],
[259,259,0,278,245,236,235,254],
[266,263,273,0,270,256,236,264],
[288,305,306,281,0,272,278,285],
[268,277,315,295,279,0,285,297],
[285,311,316,315,273,266,0,293],
[270,262,297,287,266,254,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,262,342,291,279,308,278],
[277,0,254,303,309,263,277,258],
[289,297,0,312,285,290,322,260],
[209,248,239,0,263,242,255,254],
[260,242,266,288,0,270,272,266],
[272,288,261,309,281,0,286,255],
[243,274,229,296,279,265,0,236],
[273,293,291,297,285,296,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,291,285,291,271,288,284],
[286,0,302,281,276,290,261,292],
[260,249,0,274,261,270,255,288],
[266,270,277,0,281,272,270,279],
[260,275,290,270,0,282,271,300],
[280,261,281,279,269,0,274,291],
[263,290,296,281,280,277,0,283],
[267,259,263,272,251,260,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,292,343,297,317,282,331],
[290,0,248,414,287,249,316,293],
[259,303,0,355,328,382,309,286],
[208,137,196,0,229,236,187,222],
[254,264,223,322,0,284,317,266],
[234,302,169,315,267,0,258,261],
[269,235,242,364,234,293,0,280],
[220,258,265,329,285,290,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,247,267,258,273,277,272],
[308,0,279,291,272,294,277,282],
[304,272,0,268,266,287,288,272],
[284,260,283,0,258,288,272,308],
[293,279,285,293,0,267,278,301],
[278,257,264,263,284,0,257,285],
[274,274,263,279,273,294,0,298],
[279,269,279,243,250,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,259,313,349,308,244,248],
[262,0,162,264,342,234,228,279],
[292,389,0,309,373,270,269,355],
[238,287,242,0,286,300,210,321],
[202,209,178,265,0,314,156,300],
[243,317,281,251,237,0,243,292],
[307,323,282,341,395,308,0,236],
[303,272,196,230,251,259,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,263,292,290,270,296,285],
[228,0,253,330,283,276,263,247],
[288,298,0,304,226,293,297,262],
[259,221,247,0,220,259,252,238],
[261,268,325,331,0,282,298,296],
[281,275,258,292,269,0,272,276],
[255,288,254,299,253,279,0,228],
[266,304,289,313,255,275,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,269,290,285,286,300,297],
[251,0,277,251,259,250,279,292],
[282,274,0,239,250,282,310,266],
[261,300,312,0,286,293,316,285],
[266,292,301,265,0,276,320,294],
[265,301,269,258,275,0,286,256],
[251,272,241,235,231,265,0,250],
[254,259,285,266,257,295,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,277,260,280,313,300,257],
[253,0,252,259,249,249,259,202],
[274,299,0,276,256,256,322,281],
[291,292,275,0,273,299,248,229],
[271,302,295,278,0,238,259,275],
[238,302,295,252,313,0,267,253],
[251,292,229,303,292,284,0,239],
[294,349,270,322,276,298,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,298,281,257,263,283,255],
[269,0,272,270,258,280,265,247],
[253,279,0,319,262,291,274,287],
[270,281,232,0,218,263,258,244],
[294,293,289,333,0,283,268,270],
[288,271,260,288,268,0,285,265],
[268,286,277,293,283,266,0,272],
[296,304,264,307,281,286,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,279,300,288,294,295,286],
[279,0,257,294,274,276,288,274],
[272,294,0,269,258,268,269,259],
[251,257,282,0,269,274,273,275],
[263,277,293,282,0,299,315,276],
[257,275,283,277,252,0,264,269],
[256,263,282,278,236,287,0,252],
[265,277,292,276,275,282,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,308,309,296,264,285,284],
[228,0,268,253,257,232,295,261],
[243,283,0,267,277,313,298,292],
[242,298,284,0,299,257,289,266],
[255,294,274,252,0,255,264,252],
[287,319,238,294,296,0,301,281],
[266,256,253,262,287,250,0,270],
[267,290,259,285,299,270,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,264,279,260,273,268,262],
[285,0,263,282,281,288,269,290],
[287,288,0,293,289,273,290,286],
[272,269,258,0,273,267,280,263],
[291,270,262,278,0,287,266,268],
[278,263,278,284,264,0,297,283],
[283,282,261,271,285,254,0,275],
[289,261,265,288,283,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,427,360,325,219,439,314],
[257,0,332,337,64,241,257,257],
[124,219,0,204,16,0,211,124],
[191,214,347,0,276,212,388,212],
[226,487,535,275,0,306,291,414],
[332,310,551,339,245,0,286,314],
[112,294,340,163,260,265,0,300],
[237,294,427,339,137,237,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,231,243,252,234,261,280],
[333,0,282,288,290,299,274,279],
[320,269,0,273,264,273,302,258],
[308,263,278,0,289,282,296,284],
[299,261,287,262,0,262,260,256],
[317,252,278,269,289,0,298,263],
[290,277,249,255,291,253,0,269],
[271,272,293,267,295,288,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,283,292,292,292,286,274],
[276,0,262,270,289,292,259,262],
[268,289,0,291,296,292,255,254],
[259,281,260,0,293,276,250,247],
[259,262,255,258,0,262,248,255],
[259,259,259,275,289,0,261,264],
[265,292,296,301,303,290,0,277],
[277,289,297,304,296,287,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,274,276,276,265,284],
[285,0,272,281,265,269,279,294],
[277,279,0,274,274,273,273,272],
[277,270,277,0,268,282,272,281],
[275,286,277,283,0,291,278,281],
[275,282,278,269,260,0,264,281],
[286,272,278,279,273,287,0,270],
[267,257,279,270,270,270,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,288,281,271,305,308,271],
[284,0,304,283,265,296,289,279],
[263,247,0,241,253,272,263,261],
[270,268,310,0,276,284,271,264],
[280,286,298,275,0,282,305,266],
[246,255,279,267,269,0,297,260],
[243,262,288,280,246,254,0,251],
[280,272,290,287,285,291,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,234,199,224,303,261,226],
[354,0,255,289,288,341,258,313],
[317,296,0,317,243,322,301,287],
[352,262,234,0,284,270,268,288],
[327,263,308,267,0,332,311,328],
[248,210,229,281,219,0,277,227],
[290,293,250,283,240,274,0,304],
[325,238,264,263,223,324,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,238,283,267,245,267,256],
[294,0,278,283,295,268,287,288],
[313,273,0,275,286,284,290,294],
[268,268,276,0,283,283,271,269],
[284,256,265,268,0,276,272,268],
[306,283,267,268,275,0,275,260],
[284,264,261,280,279,276,0,287],
[295,263,257,282,283,291,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,270,272,251,251,272,285],
[286,0,266,285,305,290,281,279],
[281,285,0,324,258,265,259,281],
[279,266,227,0,272,280,265,284],
[300,246,293,279,0,288,281,299],
[300,261,286,271,263,0,284,268],
[279,270,292,286,270,267,0,282],
[266,272,270,267,252,283,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,312,304,278,313,320,282],
[282,0,291,252,286,285,284,263],
[239,260,0,285,272,291,272,279],
[247,299,266,0,276,307,305,277],
[273,265,279,275,0,270,302,298],
[238,266,260,244,281,0,304,269],
[231,267,279,246,249,247,0,239],
[269,288,272,274,253,282,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,256,200,210,289,245,192],
[298,0,318,278,265,304,278,279],
[295,233,0,248,285,295,255,213],
[351,273,303,0,230,275,277,235],
[341,286,266,321,0,282,301,249],
[262,247,256,276,269,0,287,237],
[306,273,296,274,250,264,0,216],
[359,272,338,316,302,314,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,270,253,274,287,264],
[271,0,301,283,271,266,286,251],
[275,250,0,262,250,262,284,256],
[281,268,289,0,249,281,278,268],
[298,280,301,302,0,271,307,291],
[277,285,289,270,280,0,292,259],
[264,265,267,273,244,259,0,272],
[287,300,295,283,260,292,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,264,274,276,286,287],
[270,0,269,270,266,263,271,276],
[278,282,0,283,279,273,286,287],
[287,281,268,0,276,259,277,269],
[277,285,272,275,0,259,283,277],
[275,288,278,292,292,0,283,276],
[265,280,265,274,268,268,0,277],
[264,275,264,282,274,275,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,245,230,218,252,240,258],
[315,0,299,312,234,256,281,288],
[306,252,0,276,251,249,262,278],
[321,239,275,0,282,275,288,288],
[333,317,300,269,0,270,305,279],
[299,295,302,276,281,0,253,298],
[311,270,289,263,246,298,0,298],
[293,263,273,263,272,253,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,262,278,256,248,279,277],
[294,0,265,276,271,271,279,266],
[289,286,0,295,257,269,282,276],
[273,275,256,0,264,270,283,279],
[295,280,294,287,0,258,285,278],
[303,280,282,281,293,0,274,295],
[272,272,269,268,266,277,0,279],
[274,285,275,272,273,256,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,291,268,273,296,271,275],
[277,0,276,272,284,273,269,263],
[260,275,0,260,259,289,273,275],
[283,279,291,0,272,288,278,279],
[278,267,292,279,0,301,274,286],
[255,278,262,263,250,0,261,262],
[280,282,278,273,277,290,0,268],
[276,288,276,272,265,289,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,246,280,291,258,286],
[278,0,266,246,236,268,238,263],
[274,285,0,255,244,303,267,278],
[305,305,296,0,263,306,252,274],
[271,315,307,288,0,306,296,265],
[260,283,248,245,245,0,256,258],
[293,313,284,299,255,295,0,277],
[265,288,273,277,286,293,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,266,225,289,263,273,312],
[301,0,242,263,325,285,258,328],
[285,309,0,233,326,272,305,281],
[326,288,318,0,323,287,275,337],
[262,226,225,228,0,257,261,276],
[288,266,279,264,294,0,289,307],
[278,293,246,276,290,262,0,284],
[239,223,270,214,275,244,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,263,266,273,264,281,278],
[283,0,298,278,286,274,313,284],
[288,253,0,254,268,269,270,277],
[285,273,297,0,285,288,292,306],
[278,265,283,266,0,269,274,268],
[287,277,282,263,282,0,300,275],
[270,238,281,259,277,251,0,277],
[273,267,274,245,283,276,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,270,287,260,273,258,251],
[276,0,266,289,266,287,252,263],
[281,285,0,272,272,265,266,281],
[264,262,279,0,263,266,269,253],
[291,285,279,288,0,269,265,250],
[278,264,286,285,282,0,269,249],
[293,299,285,282,286,282,0,256],
[300,288,270,298,301,302,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,257,269,294,273,274,274],
[281,0,296,298,289,296,273,274],
[294,255,0,274,302,291,279,273],
[282,253,277,0,277,269,272,275],
[257,262,249,274,0,254,262,254],
[278,255,260,282,297,0,256,261],
[277,278,272,279,289,295,0,278],
[277,277,278,276,297,290,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,292,264,251,269,295,274],
[314,0,305,278,268,275,337,272],
[259,246,0,270,237,273,285,262],
[287,273,281,0,287,287,319,273],
[300,283,314,264,0,280,294,285],
[282,276,278,264,271,0,299,285],
[256,214,266,232,257,252,0,269],
[277,279,289,278,266,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,281,261,285,287,258,310],
[193,0,281,245,113,198,247,310],
[270,270,0,248,240,255,266,295],
[290,306,303,0,203,325,264,250],
[266,438,311,348,0,229,310,279],
[264,353,296,226,322,0,286,329],
[293,304,285,287,241,265,0,269],
[241,241,256,301,272,222,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,342,290,335,266,302,281],
[240,0,268,251,277,260,253,262],
[209,283,0,229,276,248,247,245],
[261,300,322,0,296,274,268,290],
[216,274,275,255,0,212,234,253],
[285,291,303,277,339,0,254,279],
[249,298,304,283,317,297,0,299],
[270,289,306,261,298,272,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,281,273,285,278,277,297],
[294,0,298,311,288,253,273,255],
[270,253,0,238,255,258,247,236],
[278,240,313,0,271,236,263,283],
[266,263,296,280,0,245,273,242],
[273,298,293,315,306,0,315,293],
[274,278,304,288,278,236,0,271],
[254,296,315,268,309,258,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,274,272,277,279,284],
[268,0,293,282,292,280,296,298],
[280,258,0,260,284,271,273,274],
[277,269,291,0,284,265,278,279],
[279,259,267,267,0,271,285,280],
[274,271,280,286,280,0,294,297],
[272,255,278,273,266,257,0,271],
[267,253,277,272,271,254,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,323,307,285,289,317,358],
[285,0,327,301,283,271,327,353],
[228,224,0,225,258,253,266,291],
[244,250,326,0,259,281,287,315],
[266,268,293,292,0,268,310,290],
[262,280,298,270,283,0,294,272],
[234,224,285,264,241,257,0,310],
[193,198,260,236,261,279,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,248,246,294,251,269,246],
[310,0,284,271,294,306,277,268],
[303,267,0,255,312,306,259,266],
[305,280,296,0,284,285,256,299],
[257,257,239,267,0,264,259,232],
[300,245,245,266,287,0,243,275],
[282,274,292,295,292,308,0,303],
[305,283,285,252,319,276,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,303,277,258,295,267,264],
[279,0,279,267,259,280,272,278],
[248,272,0,260,270,280,264,277],
[274,284,291,0,279,285,276,278],
[293,292,281,272,0,269,274,274],
[256,271,271,266,282,0,266,275],
[284,279,287,275,277,285,0,275],
[287,273,274,273,277,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,277,266,256,252,298,249],
[292,0,273,302,282,290,304,267],
[274,278,0,287,304,300,310,290],
[285,249,264,0,264,274,281,267],
[295,269,247,287,0,284,312,249],
[299,261,251,277,267,0,287,248],
[253,247,241,270,239,264,0,230],
[302,284,261,284,302,303,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,234,272,249,276,236,237],
[278,0,283,285,276,260,261,273],
[317,268,0,286,311,300,277,288],
[279,266,265,0,246,268,262,279],
[302,275,240,305,0,292,270,286],
[275,291,251,283,259,0,247,272],
[315,290,274,289,281,304,0,288],
[314,278,263,272,265,279,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,305,275,278,280,281],
[276,0,265,279,271,282,278,282],
[271,286,0,293,281,289,281,289],
[246,272,258,0,271,277,259,274],
[276,280,270,280,0,283,283,274],
[273,269,262,274,268,0,266,269],
[271,273,270,292,268,285,0,281],
[270,269,262,277,277,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,305,305,332,305,332,185],
[183,0,183,0,183,156,0,219],
[246,368,0,185,368,341,212,212],
[246,551,366,0,219,341,395,246],
[219,368,183,332,0,524,368,368],
[246,395,210,210,27,0,359,246],
[219,551,339,156,183,192,0,219],
[366,332,339,305,183,305,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,294,292,280,287,305,269],
[271,0,281,279,249,279,292,255],
[257,270,0,280,250,273,294,275],
[259,272,271,0,263,252,295,246],
[271,302,301,288,0,272,316,289],
[264,272,278,299,279,0,280,266],
[246,259,257,256,235,271,0,241],
[282,296,276,305,262,285,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,267,244,260,259,279,280],
[261,0,288,261,291,329,302,331],
[284,263,0,291,262,239,282,306],
[307,290,260,0,286,270,290,270],
[291,260,289,265,0,307,323,269],
[292,222,312,281,244,0,333,312],
[272,249,269,261,228,218,0,260],
[271,220,245,281,282,239,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,294,278,298,279,296,268],
[249,0,281,262,285,260,274,265],
[257,270,0,263,276,264,271,261],
[273,289,288,0,306,295,277,272],
[253,266,275,245,0,257,254,268],
[272,291,287,256,294,0,280,280],
[255,277,280,274,297,271,0,272],
[283,286,290,279,283,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,257,275,238,171,221,235],
[288,0,227,301,228,280,252,283],
[294,324,0,266,284,273,293,283],
[276,250,285,0,235,207,240,278],
[313,323,267,316,0,288,291,314],
[380,271,278,344,263,0,304,318],
[330,299,258,311,260,247,0,303],
[316,268,268,273,237,233,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,250,242,191,265,212,322],
[334,0,274,255,332,332,263,373],
[301,277,0,231,336,283,295,341],
[309,296,320,0,286,290,245,410],
[360,219,215,265,0,250,195,302],
[286,219,268,261,301,0,217,259],
[339,288,256,306,356,334,0,370],
[229,178,210,141,249,292,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,290,309,292,285,294,275],
[258,0,277,272,294,265,280,303],
[261,274,0,266,286,262,272,269],
[242,279,285,0,282,286,282,288],
[259,257,265,269,0,262,266,263],
[266,286,289,265,289,0,282,292],
[257,271,279,269,285,269,0,275],
[276,248,282,263,288,259,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,251,245,261,253,249,254],
[276,0,267,286,265,283,272,256],
[300,284,0,291,293,269,269,276],
[306,265,260,0,256,260,259,265],
[290,286,258,295,0,264,280,274],
[298,268,282,291,287,0,248,309],
[302,279,282,292,271,303,0,279],
[297,295,275,286,277,242,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,272,282,324,264,283,276],
[283,0,309,320,317,280,269,294],
[279,242,0,289,304,267,264,313],
[269,231,262,0,291,264,298,271],
[227,234,247,260,0,252,255,252],
[287,271,284,287,299,0,279,296],
[268,282,287,253,296,272,0,232],
[275,257,238,280,299,255,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,297,285,304,281,269],
[270,0,283,296,279,279,242,277],
[264,268,0,276,284,305,266,271],
[254,255,275,0,291,298,256,277],
[266,272,267,260,0,306,262,274],
[247,272,246,253,245,0,248,279],
[270,309,285,295,289,303,0,289],
[282,274,280,274,277,272,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,296,283,287,284,264,247],
[264,0,295,263,266,279,255,263],
[255,256,0,273,272,263,246,259],
[268,288,278,0,278,247,266,252],
[264,285,279,273,0,258,266,238],
[267,272,288,304,293,0,279,280],
[287,296,305,285,285,272,0,257],
[304,288,292,299,313,271,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,186,241,109,295,215,296],
[336,0,261,155,198,370,284,394],
[365,290,0,284,290,166,365,265],
[310,396,267,0,181,376,396,296],
[442,353,261,370,0,370,347,451],
[256,181,385,175,181,0,365,156],
[336,267,186,155,204,186,0,210],
[255,157,286,255,100,395,341,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,270,281,284,272,269],
[273,0,275,265,264,294,264,251],
[270,276,0,253,269,263,247,260],
[281,286,298,0,265,287,266,267],
[270,287,282,286,0,292,281,276],
[267,257,288,264,259,0,266,265],
[279,287,304,285,270,285,0,283],
[282,300,291,284,275,286,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,277,288,279,303,276],
[267,0,268,268,271,259,284,262],
[278,283,0,304,288,281,307,271],
[274,283,247,0,267,266,275,285],
[263,280,263,284,0,258,296,270],
[272,292,270,285,293,0,306,275],
[248,267,244,276,255,245,0,277],
[275,289,280,266,281,276,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,379,266,346,321,299,200],
[142,0,342,238,209,220,257,174],
[172,209,0,171,249,188,202,99],
[285,313,380,0,298,330,383,235],
[205,342,302,253,0,256,302,289],
[230,331,363,221,295,0,287,286],
[252,294,349,168,249,264,0,215],
[351,377,452,316,262,265,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,289,272,287,293,286,291],
[280,0,283,261,281,278,275,287],
[262,268,0,277,272,274,265,277],
[279,290,274,0,288,286,283,301],
[264,270,279,263,0,274,270,282],
[258,273,277,265,277,0,275,291],
[265,276,286,268,281,276,0,292],
[260,264,274,250,269,260,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,291,288,297,273,278,278],
[280,0,271,284,287,265,274,280],
[260,280,0,290,306,269,286,276],
[263,267,261,0,281,282,263,279],
[254,264,245,270,0,265,241,258],
[278,286,282,269,286,0,279,266],
[273,277,265,288,310,272,0,275],
[273,271,275,272,293,285,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,260,275,268,261,255,270],
[269,0,263,262,275,289,288,258],
[291,288,0,261,287,301,285,280],
[276,289,290,0,299,292,285,266],
[283,276,264,252,0,314,270,250],
[290,262,250,259,237,0,258,246],
[296,263,266,266,281,293,0,291],
[281,293,271,285,301,305,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,311,263,276,280,285,298],
[267,0,323,277,300,315,294,296],
[240,228,0,209,249,259,237,252],
[288,274,342,0,297,306,294,289],
[275,251,302,254,0,317,297,289],
[271,236,292,245,234,0,267,257],
[266,257,314,257,254,284,0,273],
[253,255,299,262,262,294,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,233,267,255,270,266,258],
[288,0,273,283,271,266,263,280],
[318,278,0,285,275,290,281,296],
[284,268,266,0,289,276,267,278],
[296,280,276,262,0,283,271,278],
[281,285,261,275,268,0,263,277],
[285,288,270,284,280,288,0,282],
[293,271,255,273,273,274,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,295,267,281,277,282,300],
[267,0,254,253,266,240,253,266],
[256,297,0,262,260,270,254,264],
[284,298,289,0,280,287,273,289],
[270,285,291,271,0,267,271,282],
[274,311,281,264,284,0,283,299],
[269,298,297,278,280,268,0,277],
[251,285,287,262,269,252,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,231,283,266,225,274,295],
[232,0,300,305,296,260,298,279],
[320,251,0,324,282,281,298,272],
[268,246,227,0,226,209,288,265],
[285,255,269,325,0,196,291,326],
[326,291,270,342,355,0,327,364],
[277,253,253,263,260,224,0,274],
[256,272,279,286,225,187,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,270,281,274,291,294,275],
[271,0,279,279,292,280,300,282],
[281,272,0,285,288,287,296,265],
[270,272,266,0,272,257,289,269],
[277,259,263,279,0,277,287,268],
[260,271,264,294,274,0,289,278],
[257,251,255,262,264,262,0,248],
[276,269,286,282,283,273,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,280,248,278,289,276],
[278,0,268,304,283,270,285,269],
[287,283,0,284,273,256,310,257],
[271,247,267,0,251,268,266,240],
[303,268,278,300,0,278,287,269],
[273,281,295,283,273,0,297,285],
[262,266,241,285,264,254,0,256],
[275,282,294,311,282,266,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,264,268,277,277,259,272],
[291,0,287,275,284,273,273,278],
[287,264,0,268,287,282,266,287],
[283,276,283,0,292,272,251,283],
[274,267,264,259,0,279,281,285],
[274,278,269,279,272,0,251,285],
[292,278,285,300,270,300,0,285],
[279,273,264,268,266,266,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,288,255,261,282,261,302],
[296,0,298,312,300,266,304,317],
[263,253,0,307,274,252,251,295],
[296,239,244,0,252,250,240,287],
[290,251,277,299,0,235,269,293],
[269,285,299,301,316,0,322,304],
[290,247,300,311,282,229,0,294],
[249,234,256,264,258,247,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,270,277,266,263,275,284],
[267,0,265,280,266,275,252,268],
[281,286,0,279,273,283,283,279],
[274,271,272,0,281,294,265,281],
[285,285,278,270,0,264,279,298],
[288,276,268,257,287,0,256,291],
[276,299,268,286,272,295,0,299],
[267,283,272,270,253,260,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,232,206,133,194,311,251],
[237,0,214,279,194,207,218,257],
[319,337,0,271,226,210,309,291],
[345,272,280,0,313,259,309,290],
[418,357,325,238,0,293,316,292],
[357,344,341,292,258,0,304,296],
[240,333,242,242,235,247,0,279],
[300,294,260,261,259,255,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,266,281,282,279,290,286],
[232,0,257,250,250,245,243,237],
[285,294,0,269,273,263,251,265],
[270,301,282,0,269,258,257,276],
[269,301,278,282,0,284,273,268],
[272,306,288,293,267,0,264,286],
[261,308,300,294,278,287,0,289],
[265,314,286,275,283,265,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,306,284,307,297,272,317],
[276,0,275,287,297,297,278,275],
[245,276,0,272,311,276,268,289],
[267,264,279,0,277,296,254,276],
[244,254,240,274,0,261,256,278],
[254,254,275,255,290,0,253,288],
[279,273,283,297,295,298,0,283],
[234,276,262,275,273,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,234,232,227,255,205,256],
[271,0,243,239,241,251,239,297],
[317,308,0,267,276,308,272,329],
[319,312,284,0,258,293,260,276],
[324,310,275,293,0,315,286,315],
[296,300,243,258,236,0,242,292],
[346,312,279,291,265,309,0,295],
[295,254,222,275,236,259,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,270,280,258,268,264,270],
[274,0,288,276,275,269,277,276],
[281,263,0,278,270,268,265,266],
[271,275,273,0,280,275,280,283],
[293,276,281,271,0,281,284,288],
[283,282,283,276,270,0,276,277],
[287,274,286,271,267,275,0,277],
[281,275,285,268,263,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,282,268,261,245,287,250],
[270,0,285,272,278,289,281,264],
[269,266,0,258,269,236,295,266],
[283,279,293,0,279,267,272,278],
[290,273,282,272,0,257,272,268],
[306,262,315,284,294,0,304,281],
[264,270,256,279,279,247,0,252],
[301,287,285,273,283,270,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,277,287,276,271,278,283],
[269,0,293,292,290,299,296,289],
[274,258,0,276,278,263,272,265],
[264,259,275,0,260,271,275,258],
[275,261,273,291,0,281,292,287],
[280,252,288,280,270,0,295,284],
[273,255,279,276,259,256,0,270],
[268,262,286,293,264,267,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,279,289,296,268,288,286],
[255,0,273,286,283,280,274,285],
[272,278,0,279,285,304,277,282],
[262,265,272,0,267,259,271,273],
[255,268,266,284,0,258,263,281],
[283,271,247,292,293,0,290,259],
[263,277,274,280,288,261,0,272],
[265,266,269,278,270,292,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,285,271,278,284,291,295],
[267,0,265,272,264,280,285,280],
[266,286,0,283,271,291,276,286],
[280,279,268,0,265,273,274,286],
[273,287,280,286,0,288,278,286],
[267,271,260,278,263,0,263,280],
[260,266,275,277,273,288,0,259],
[256,271,265,265,265,271,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,264,288,260,263,278,280],
[265,0,270,276,267,276,279,265],
[287,281,0,302,273,278,289,270],
[263,275,249,0,245,264,272,271],
[291,284,278,306,0,271,289,276],
[288,275,273,287,280,0,281,268],
[273,272,262,279,262,270,0,262],
[271,286,281,280,275,283,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,277,263,276,235,295],
[271,0,266,268,296,264,257,279],
[267,285,0,243,278,273,243,301],
[274,283,308,0,255,288,271,259],
[288,255,273,296,0,292,250,261],
[275,287,278,263,259,0,280,285],
[316,294,308,280,301,271,0,271],
[256,272,250,292,290,266,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,258,288,284,285,290,299],
[259,0,274,290,260,276,263,256],
[293,277,0,272,276,274,259,295],
[263,261,279,0,272,254,253,276],
[267,291,275,279,0,274,266,290],
[266,275,277,297,277,0,266,274],
[261,288,292,298,285,285,0,289],
[252,295,256,275,261,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,278,272,265,274,268,265],
[294,0,268,292,278,297,273,268],
[273,283,0,281,276,279,277,283],
[279,259,270,0,273,258,274,282],
[286,273,275,278,0,272,280,270],
[277,254,272,293,279,0,264,250],
[283,278,274,277,271,287,0,269],
[286,283,268,269,281,301,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,274,269,254,268,279,253],
[294,0,283,290,260,281,274,282],
[277,268,0,282,265,263,273,260],
[282,261,269,0,253,264,266,253],
[297,291,286,298,0,289,295,275],
[283,270,288,287,262,0,288,250],
[272,277,278,285,256,263,0,257],
[298,269,291,298,276,301,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,270,286,267,255,259,259],
[295,0,289,299,291,270,291,267],
[281,262,0,287,294,281,276,271],
[265,252,264,0,265,255,266,244],
[284,260,257,286,0,262,286,256],
[296,281,270,296,289,0,302,277],
[292,260,275,285,265,249,0,262],
[292,284,280,307,295,274,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,294,298,289,279,286,284],
[284,0,294,304,299,276,280,271],
[257,257,0,291,267,253,271,275],
[253,247,260,0,270,262,262,270],
[262,252,284,281,0,257,282,260],
[272,275,298,289,294,0,299,274],
[265,271,280,289,269,252,0,278],
[267,280,276,281,291,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,272,275,274,294,269],
[271,0,260,287,298,266,263,267],
[273,291,0,290,282,278,307,270],
[279,264,261,0,259,262,271,258],
[276,253,269,292,0,270,303,284],
[277,285,273,289,281,0,307,275],
[257,288,244,280,248,244,0,267],
[282,284,281,293,267,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,285,257,251,277,267,281],
[291,0,265,268,258,291,299,261],
[266,286,0,259,289,279,301,292],
[294,283,292,0,269,281,290,285],
[300,293,262,282,0,285,295,267],
[274,260,272,270,266,0,291,265],
[284,252,250,261,256,260,0,277],
[270,290,259,266,284,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,263,273,261,263,273,256],
[284,0,268,275,270,277,286,287],
[288,283,0,286,277,286,275,277],
[278,276,265,0,270,274,273,272],
[290,281,274,281,0,285,271,270],
[288,274,265,277,266,0,267,277],
[278,265,276,278,280,284,0,267],
[295,264,274,279,281,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,275,258,278,267,268,279],
[268,0,267,279,281,283,276,291],
[276,284,0,269,270,262,247,264],
[293,272,282,0,289,280,281,282],
[273,270,281,262,0,277,267,275],
[284,268,289,271,274,0,254,275],
[283,275,304,270,284,297,0,288],
[272,260,287,269,276,276,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,288,259,263,263,284,285],
[275,0,257,267,269,260,278,274],
[263,294,0,263,266,265,256,293],
[292,284,288,0,266,272,267,286],
[288,282,285,285,0,262,267,282],
[288,291,286,279,289,0,268,310],
[267,273,295,284,284,283,0,279],
[266,277,258,265,269,241,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,228,229,265,255,232,229],
[318,0,285,255,294,299,279,273],
[323,266,0,265,278,299,247,286],
[322,296,286,0,307,299,285,275],
[286,257,273,244,0,288,266,273],
[296,252,252,252,263,0,243,262],
[319,272,304,266,285,308,0,292],
[322,278,265,276,278,289,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,273,248,262,266,261,276],
[279,0,270,257,253,261,265,257],
[278,281,0,272,277,279,283,279],
[303,294,279,0,285,283,269,274],
[289,298,274,266,0,279,270,264],
[285,290,272,268,272,0,279,265],
[290,286,268,282,281,272,0,275],
[275,294,272,277,287,286,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,258,290,271,311,282,301],
[258,0,257,281,288,298,264,289],
[293,294,0,293,289,286,274,306],
[261,270,258,0,259,281,250,282],
[280,263,262,292,0,289,276,287],
[240,253,265,270,262,0,233,267],
[269,287,277,301,275,318,0,301],
[250,262,245,269,264,284,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,439,263,385,345,297,261],
[91,0,175,259,215,175,87,219],
[112,376,0,202,238,253,297,295],
[288,292,349,0,383,307,261,349],
[166,336,313,168,0,351,347,351],
[206,376,298,244,200,0,429,376],
[254,464,254,290,204,122,0,424],
[290,332,256,202,200,175,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,260,269,261,263,248,260],
[283,0,287,275,293,285,274,286],
[291,264,0,264,271,272,260,279],
[282,276,287,0,278,277,282,274],
[290,258,280,273,0,282,274,278],
[288,266,279,274,269,0,261,264],
[303,277,291,269,277,290,0,294],
[291,265,272,277,273,287,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,270,257,256,268,272],
[279,0,282,273,279,263,271,261],
[277,269,0,283,289,269,268,275],
[281,278,268,0,260,255,275,268],
[294,272,262,291,0,281,263,284],
[295,288,282,296,270,0,279,284],
[283,280,283,276,288,272,0,275],
[279,290,276,283,267,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,269,297,269,287,239,273],
[227,0,263,264,235,273,250,259],
[282,288,0,236,250,268,270,263],
[254,287,315,0,259,295,270,295],
[282,316,301,292,0,279,259,292],
[264,278,283,256,272,0,283,283],
[312,301,281,281,292,268,0,270],
[278,292,288,256,259,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,252,268,365,298,180,382],
[219,0,230,218,274,218,181,308],
[299,321,0,266,290,244,225,385],
[283,333,285,0,290,205,218,331],
[186,277,261,261,0,199,164,297],
[253,333,307,346,352,0,284,366],
[371,370,326,333,387,267,0,377],
[169,243,166,220,254,185,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,309,274,301,280,291,289],
[255,0,292,279,290,271,274,267],
[242,259,0,256,258,252,264,273],
[277,272,295,0,284,254,279,270],
[250,261,293,267,0,238,251,266],
[271,280,299,297,313,0,279,273],
[260,277,287,272,300,272,0,277],
[262,284,278,281,285,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,283,294,294,315,289,275],
[258,0,276,269,294,274,298,290],
[268,275,0,287,288,287,290,281],
[257,282,264,0,279,299,278,266],
[257,257,263,272,0,261,255,256],
[236,277,264,252,290,0,271,282],
[262,253,261,273,296,280,0,270],
[276,261,270,285,295,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,261,308,293,297,273,300],
[270,0,256,291,259,288,266,302],
[290,295,0,297,268,299,289,298],
[243,260,254,0,290,298,255,301],
[258,292,283,261,0,287,266,296],
[254,263,252,253,264,0,250,289],
[278,285,262,296,285,301,0,306],
[251,249,253,250,255,262,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,250,268,267,276,261,280],
[255,0,269,273,250,273,276,260],
[301,282,0,298,269,281,284,308],
[283,278,253,0,275,259,272,278],
[284,301,282,276,0,269,276,280],
[275,278,270,292,282,0,261,276],
[290,275,267,279,275,290,0,283],
[271,291,243,273,271,275,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,289,296,277,272,291,281],
[310,0,317,306,270,305,298,301],
[262,234,0,270,263,251,261,276],
[255,245,281,0,257,259,285,278],
[274,281,288,294,0,304,288,299],
[279,246,300,292,247,0,297,282],
[260,253,290,266,263,254,0,277],
[270,250,275,273,252,269,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,298,313,219,240,211,274],
[260,0,261,325,284,286,279,266],
[253,290,0,298,219,309,230,261],
[238,226,253,0,202,242,182,155],
[332,267,332,349,0,316,284,304],
[311,265,242,309,235,0,228,256],
[340,272,321,369,267,323,0,231],
[277,285,290,396,247,295,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,260,278,310,243,308,253],
[294,0,270,182,326,274,296,277],
[291,281,0,261,320,247,320,313],
[273,369,290,0,351,336,332,267],
[241,225,231,200,0,239,271,211],
[308,277,304,215,312,0,291,255],
[243,255,231,219,280,260,0,262],
[298,274,238,284,340,296,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,269,281,287,306,274,257],
[235,0,264,285,268,277,283,262],
[282,287,0,285,275,278,292,269],
[270,266,266,0,265,288,286,296],
[264,283,276,286,0,287,287,275],
[245,274,273,263,264,0,271,268],
[277,268,259,265,264,280,0,262],
[294,289,282,255,276,283,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,270,284,306,293,309,319],
[255,0,266,258,272,279,283,271],
[281,285,0,256,291,288,341,293],
[267,293,295,0,302,237,314,297],
[245,279,260,249,0,227,261,278],
[258,272,263,314,324,0,310,306],
[242,268,210,237,290,241,0,291],
[232,280,258,254,273,245,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,296,282,281,277,266],
[286,0,275,286,269,264,256,284],
[275,276,0,290,281,269,287,296],
[255,265,261,0,261,260,256,252],
[269,282,270,290,0,273,265,270],
[270,287,282,291,278,0,292,294],
[274,295,264,295,286,259,0,280],
[285,267,255,299,281,257,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,279,268,274,273,278,280],
[269,0,267,271,260,258,278,264],
[272,284,0,255,281,263,273,256],
[283,280,296,0,278,266,278,271],
[277,291,270,273,0,263,265,261],
[278,293,288,285,288,0,278,262],
[273,273,278,273,286,273,0,269],
[271,287,295,280,290,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,278,285,280,280,298,252],
[255,0,269,287,258,264,285,269],
[273,282,0,288,294,281,287,279],
[266,264,263,0,275,278,284,252],
[271,293,257,276,0,286,268,277],
[271,287,270,273,265,0,269,267],
[253,266,264,267,283,282,0,276],
[299,282,272,299,274,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,235,256,263,265,302,256],
[282,0,275,268,263,263,275,236],
[316,276,0,304,289,255,293,279],
[295,283,247,0,293,267,285,284],
[288,288,262,258,0,289,303,251],
[286,288,296,284,262,0,295,251],
[249,276,258,266,248,256,0,244],
[295,315,272,267,300,300,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,321,279,285,277,289],
[277,0,267,311,288,282,277,275],
[273,284,0,308,281,286,281,284],
[230,240,243,0,257,256,227,239],
[272,263,270,294,0,297,261,281],
[266,269,265,295,254,0,256,283],
[274,274,270,324,290,295,0,297],
[262,276,267,312,270,268,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,251,265,258,262,260,262],
[300,0,288,294,278,304,290,268],
[300,263,0,300,275,289,271,282],
[286,257,251,0,269,292,266,269],
[293,273,276,282,0,260,272,262],
[289,247,262,259,291,0,276,247],
[291,261,280,285,279,275,0,271],
[289,283,269,282,289,304,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,296,300,305,271,294],
[267,0,256,256,256,258,276,264],
[272,295,0,284,265,288,285,281],
[255,295,267,0,289,287,295,269],
[251,295,286,262,0,268,264,291],
[246,293,263,264,283,0,271,279],
[280,275,266,256,287,280,0,256],
[257,287,270,282,260,272,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,285,285,280,258,285],
[274,0,264,278,262,257,268,250],
[273,287,0,253,263,272,272,276],
[266,273,298,0,285,262,278,270],
[266,289,288,266,0,268,269,260],
[271,294,279,289,283,0,273,274],
[293,283,279,273,282,278,0,281],
[266,301,275,281,291,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,292,288,279,275,270,293],
[247,0,271,263,256,262,276,283],
[259,280,0,267,266,269,266,267],
[263,288,284,0,286,279,270,285],
[272,295,285,265,0,264,266,272],
[276,289,282,272,287,0,270,291],
[281,275,285,281,285,281,0,274],
[258,268,284,266,279,260,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,270,269,248,257,261,261],
[288,0,292,300,285,280,273,283],
[281,259,0,292,259,270,284,269],
[282,251,259,0,248,260,257,264],
[303,266,292,303,0,279,297,287],
[294,271,281,291,272,0,280,272],
[290,278,267,294,254,271,0,272],
[290,268,282,287,264,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,276,273,266,257,254,261],
[297,0,285,287,262,261,263,251],
[275,266,0,287,276,277,263,257],
[278,264,264,0,271,267,263,263],
[285,289,275,280,0,282,271,277],
[294,290,274,284,269,0,283,279],
[297,288,288,288,280,268,0,283],
[290,300,294,288,274,272,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,186,307,346,186,222,215],
[275,0,192,278,331,134,219,244],
[365,359,0,423,405,216,297,340],
[244,273,128,0,192,194,238,156],
[205,220,146,359,0,185,220,182],
[365,417,335,357,366,0,226,303],
[329,332,254,313,331,325,0,294],
[336,307,211,395,369,248,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,306,308,283,261,304,309],
[244,0,279,261,266,248,273,282],
[245,272,0,271,252,261,278,260],
[243,290,280,0,251,253,286,297],
[268,285,299,300,0,279,290,288],
[290,303,290,298,272,0,307,292],
[247,278,273,265,261,244,0,271],
[242,269,291,254,263,259,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,207,256,278,240,199,281],
[314,0,269,300,272,344,287,319],
[344,282,0,260,282,314,293,268],
[295,251,291,0,222,317,249,286],
[273,279,269,329,0,332,257,308],
[311,207,237,234,219,0,264,218],
[352,264,258,302,294,287,0,261],
[270,232,283,265,243,333,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,280,292,313,262,276,266],
[269,0,263,287,290,278,245,243],
[271,288,0,281,268,281,305,268],
[259,264,270,0,300,283,276,260],
[238,261,283,251,0,256,256,220],
[289,273,270,268,295,0,272,258],
[275,306,246,275,295,279,0,281],
[285,308,283,291,331,293,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,255,268,286,261,258,258],
[278,0,277,289,282,261,266,249],
[296,274,0,264,282,270,280,277],
[283,262,287,0,281,292,265,277],
[265,269,269,270,0,264,247,259],
[290,290,281,259,287,0,270,266],
[293,285,271,286,304,281,0,273],
[293,302,274,274,292,285,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,268,285,275,296,264],
[269,0,263,253,292,251,309,266],
[263,288,0,269,253,241,254,262],
[283,298,282,0,290,274,338,261],
[266,259,298,261,0,280,307,278],
[276,300,310,277,271,0,315,275],
[255,242,297,213,244,236,0,253],
[287,285,289,290,273,276,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,385,277,336,305,288],
[276,0,315,300,271,288,275,226],
[263,236,0,348,280,260,263,247],
[166,251,203,0,230,246,227,239],
[274,280,271,321,0,249,271,304],
[215,263,291,305,302,0,295,237],
[246,276,288,324,280,256,0,209],
[263,325,304,312,247,314,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,261,280,274,302,285,317],
[266,0,277,270,279,292,286,296],
[290,274,0,262,264,288,277,279],
[271,281,289,0,282,300,284,298],
[277,272,287,269,0,279,280,295],
[249,259,263,251,272,0,279,280],
[266,265,274,267,271,272,0,296],
[234,255,272,253,256,271,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,296,290,283,275,309,305],
[242,0,295,273,290,284,275,253],
[255,256,0,274,289,294,289,300],
[261,278,277,0,269,264,268,254],
[268,261,262,282,0,278,262,305],
[276,267,257,287,273,0,282,299],
[242,276,262,283,289,269,0,283],
[246,298,251,297,246,252,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,264,269,263,266,263,265],
[284,0,258,294,260,299,254,256],
[287,293,0,291,275,267,281,264],
[282,257,260,0,268,274,274,250],
[288,291,276,283,0,283,280,267],
[285,252,284,277,268,0,265,253],
[288,297,270,277,271,286,0,277],
[286,295,287,301,284,298,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,272,268,275,268,284],
[273,0,258,271,264,266,267,277],
[271,293,0,267,281,286,275,287],
[279,280,284,0,267,287,263,283],
[283,287,270,284,0,299,285,278],
[276,285,265,264,252,0,262,272],
[283,284,276,288,266,289,0,279],
[267,274,264,268,273,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,298,294,297,269,285,293],
[254,0,291,274,287,271,289,272],
[253,260,0,254,273,248,267,267],
[257,277,297,0,282,284,282,277],
[254,264,278,269,0,261,279,268],
[282,280,303,267,290,0,275,276],
[266,262,284,269,272,276,0,277],
[258,279,284,274,283,275,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,289,296,277,290,294],
[276,0,277,268,275,291,290,290],
[275,274,0,278,280,281,282,281],
[262,283,273,0,288,286,266,276],
[255,276,271,263,0,276,264,272],
[274,260,270,265,275,0,269,282],
[261,261,269,285,287,282,0,283],
[257,261,270,275,279,269,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,287,286,279,270,264,283],
[287,0,287,302,287,281,266,314],
[264,264,0,256,280,277,274,291],
[265,249,295,0,270,279,279,284],
[272,264,271,281,0,285,255,270],
[281,270,274,272,266,0,267,281],
[287,285,277,272,296,284,0,281],
[268,237,260,267,281,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,270,267,282,289,290,290],
[254,0,282,266,283,277,283,293],
[281,269,0,277,280,291,288,292],
[284,285,274,0,285,272,298,287],
[269,268,271,266,0,277,273,292],
[262,274,260,279,274,0,274,289],
[261,268,263,253,278,277,0,278],
[261,258,259,264,259,262,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,251,252,248,241,241,237],
[281,0,279,250,252,245,274,261],
[300,272,0,247,248,256,282,265],
[299,301,304,0,254,249,260,278],
[303,299,303,297,0,268,296,268],
[310,306,295,302,283,0,317,275],
[310,277,269,291,255,234,0,258],
[314,290,286,273,283,276,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,260,273,245,256,268,271],
[237,0,244,195,217,245,241,271],
[291,307,0,295,249,282,286,311],
[278,356,256,0,259,268,292,301],
[306,334,302,292,0,304,271,334],
[295,306,269,283,247,0,239,261],
[283,310,265,259,280,312,0,321],
[280,280,240,250,217,290,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,250,244,257,261,262,262],
[273,0,271,264,258,252,265,247],
[301,280,0,248,283,261,287,278],
[307,287,303,0,273,251,304,236],
[294,293,268,278,0,268,295,264],
[290,299,290,300,283,0,296,263],
[289,286,264,247,256,255,0,240],
[289,304,273,315,287,288,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,295,296,277,277,274,279],
[260,0,275,267,266,266,266,269],
[256,276,0,265,253,258,268,278],
[255,284,286,0,266,265,264,289],
[274,285,298,285,0,287,284,285],
[274,285,293,286,264,0,282,285],
[277,285,283,287,267,269,0,276],
[272,282,273,262,266,266,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,260,266,285,266,309,283],
[268,0,269,280,273,268,288,276],
[291,282,0,265,261,256,275,292],
[285,271,286,0,264,290,317,298],
[266,278,290,287,0,316,274,255],
[285,283,295,261,235,0,261,261],
[242,263,276,234,277,290,0,274],
[268,275,259,253,296,290,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,279,271,284,284,265,308],
[246,0,278,261,257,260,258,279],
[272,273,0,285,283,279,262,292],
[280,290,266,0,288,281,291,307],
[267,294,268,263,0,273,269,296],
[267,291,272,270,278,0,267,305],
[286,293,289,260,282,284,0,306],
[243,272,259,244,255,246,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,267,274,272,304,317,271],
[269,0,272,239,233,228,297,292],
[284,279,0,267,270,237,308,295],
[277,312,284,0,278,267,295,311],
[279,318,281,273,0,269,336,297],
[247,323,314,284,282,0,313,282],
[234,254,243,256,215,238,0,271],
[280,259,256,240,254,269,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,263,265,290,281,279],
[272,0,286,271,272,276,279,270],
[269,265,0,258,264,270,276,274],
[288,280,293,0,276,291,275,282],
[286,279,287,275,0,291,273,270],
[261,275,281,260,260,0,278,267],
[270,272,275,276,278,273,0,281],
[272,281,277,269,281,284,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,275,279,275,281,255,252],
[284,0,273,286,282,265,288,265],
[276,278,0,289,277,272,289,268],
[272,265,262,0,252,266,254,262],
[276,269,274,299,0,267,256,265],
[270,286,279,285,284,0,278,279],
[296,263,262,297,295,273,0,282],
[299,286,283,289,286,272,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,311,243,310,247,276,280],
[271,0,262,265,302,228,272,246],
[240,289,0,222,271,262,253,281],
[308,286,329,0,314,283,263,301],
[241,249,280,237,0,223,233,233],
[304,323,289,268,328,0,292,293],
[275,279,298,288,318,259,0,273],
[271,305,270,250,318,258,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,275,280,272,272,290,289],
[268,0,282,277,278,267,284,292],
[276,269,0,261,284,277,283,288],
[271,274,290,0,272,280,289,298],
[279,273,267,279,0,267,283,283],
[279,284,274,271,284,0,300,285],
[261,267,268,262,268,251,0,283],
[262,259,263,253,268,266,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,256,281,302,255,328,297],
[282,0,311,227,256,194,304,277],
[295,240,0,274,254,252,328,256],
[270,324,277,0,321,285,320,290],
[249,295,297,230,0,242,304,254],
[296,357,299,266,309,0,319,273],
[223,247,223,231,247,232,0,256],
[254,274,295,261,297,278,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,304,276,275,271,282,277],
[272,0,277,273,287,272,271,273],
[247,274,0,269,241,251,251,258],
[275,278,282,0,280,256,267,278],
[276,264,310,271,0,277,276,300],
[280,279,300,295,274,0,262,275],
[269,280,300,284,275,289,0,272],
[274,278,293,273,251,276,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,285,258,270,280,289,250],
[292,0,282,284,281,280,286,255],
[266,269,0,253,259,272,292,280],
[293,267,298,0,307,328,276,285],
[281,270,292,244,0,295,295,275],
[271,271,279,223,256,0,261,233],
[262,265,259,275,256,290,0,277],
[301,296,271,266,276,318,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,286,313,221,268,217],
[272,0,259,242,287,260,227,184],
[284,292,0,280,333,294,253,273],
[265,309,271,0,412,338,309,225],
[238,264,218,139,0,233,255,193],
[330,291,257,213,318,0,238,229],
[283,324,298,242,296,313,0,286],
[334,367,278,326,358,322,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,275,291,298,318,297,254],
[332,0,314,357,293,257,324,276],
[276,237,0,280,303,275,265,209],
[260,194,271,0,250,283,316,217],
[253,258,248,301,0,240,277,222],
[233,294,276,268,311,0,240,196],
[254,227,286,235,274,311,0,203],
[297,275,342,334,329,355,348,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,293,291,269,248,283,265],
[307,0,329,310,291,274,281,268],
[258,222,0,280,264,229,270,250],
[260,241,271,0,264,244,278,267],
[282,260,287,287,0,259,250,268],
[303,277,322,307,292,0,268,262],
[268,270,281,273,301,283,0,298],
[286,283,301,284,283,289,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,281,307,305,289,307,274],
[255,0,263,274,284,264,278,265],
[270,288,0,293,274,271,293,257],
[244,277,258,0,282,268,287,258],
[246,267,277,269,0,262,270,250],
[262,287,280,283,289,0,276,276],
[244,273,258,264,281,275,0,247],
[277,286,294,293,301,275,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,303,196,254,331,346,272],
[314,0,276,261,274,269,323,255],
[248,275,0,188,140,179,187,258],
[355,290,363,0,259,407,256,333],
[297,277,411,292,0,272,323,324],
[220,282,372,144,279,0,202,264],
[205,228,364,295,228,349,0,245],
[279,296,293,218,227,287,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,303,284,274,258,301,286],
[261,0,288,258,269,243,293,287],
[248,263,0,232,259,242,301,282],
[267,293,319,0,292,276,315,289],
[277,282,292,259,0,259,320,282],
[293,308,309,275,292,0,324,304],
[250,258,250,236,231,227,0,257],
[265,264,269,262,269,247,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,261,247,287,254,257,252],
[288,0,274,243,283,296,265,279],
[290,277,0,271,294,257,234,258],
[304,308,280,0,321,278,287,269],
[264,268,257,230,0,245,273,267],
[297,255,294,273,306,0,270,284],
[294,286,317,264,278,281,0,264],
[299,272,293,282,284,267,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,207,189,241,205,238,287],
[273,0,291,215,321,257,268,262],
[344,260,0,286,361,301,303,341],
[362,336,265,0,385,192,262,332],
[310,230,190,166,0,203,264,325],
[346,294,250,359,348,0,326,227],
[313,283,248,289,287,225,0,252],
[264,289,210,219,226,324,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,279,269,288,269,285],
[268,0,244,263,242,274,254,282],
[271,307,0,278,276,289,279,300],
[272,288,273,0,279,274,275,294],
[282,309,275,272,0,277,291,305],
[263,277,262,277,274,0,273,300],
[282,297,272,276,260,278,0,302],
[266,269,251,257,246,251,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,308,284,305,290,250,312],
[273,0,290,275,326,291,288,308],
[243,261,0,275,312,297,243,296],
[267,276,276,0,280,266,260,286],
[246,225,239,271,0,259,231,245],
[261,260,254,285,292,0,235,293],
[301,263,308,291,320,316,0,300],
[239,243,255,265,306,258,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,258,259,278,283,274],
[274,0,268,280,282,275,298,286],
[279,283,0,269,285,279,293,298],
[293,271,282,0,275,282,300,293],
[292,269,266,276,0,292,297,278],
[273,276,272,269,259,0,284,279],
[268,253,258,251,254,267,0,282],
[277,265,253,258,273,272,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,195,268,178,200,218,239],
[250,0,227,393,268,316,250,255],
[356,324,0,243,305,246,347,317],
[283,158,308,0,256,224,254,237],
[373,283,246,295,0,198,257,306],
[351,235,305,327,353,0,293,270],
[333,301,204,297,294,258,0,193],
[312,296,234,314,245,281,358,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,309,230,284,271,222,278],
[217,0,261,213,241,256,206,233],
[242,290,0,244,214,284,217,229],
[321,338,307,0,290,323,254,294],
[267,310,337,261,0,288,321,265],
[280,295,267,228,263,0,238,226],
[329,345,334,297,230,313,0,267],
[273,318,322,257,286,325,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,278,282,300,291,277,275],
[247,0,260,278,253,266,253,246],
[273,291,0,272,254,271,262,248],
[269,273,279,0,273,264,250,256],
[251,298,297,278,0,273,265,269],
[260,285,280,287,278,0,271,268],
[274,298,289,301,286,280,0,278],
[276,305,303,295,282,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,261,292,302,276,289,291],
[247,0,283,260,282,258,271,262],
[290,268,0,281,294,274,262,283],
[259,291,270,0,312,257,272,261],
[249,269,257,239,0,247,280,253],
[275,293,277,294,304,0,287,268],
[262,280,289,279,271,264,0,252],
[260,289,268,290,298,283,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,287,279,287,274,299,282],
[219,0,275,261,252,267,282,235],
[264,276,0,288,253,290,265,262],
[272,290,263,0,256,266,228,268],
[264,299,298,295,0,288,287,260],
[277,284,261,285,263,0,250,292],
[252,269,286,323,264,301,0,270],
[269,316,289,283,291,259,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,285,282,264,280,280,272],
[285,0,267,278,266,257,260,275],
[266,284,0,275,269,271,271,262],
[269,273,276,0,263,270,268,280],
[287,285,282,288,0,278,277,266],
[271,294,280,281,273,0,289,280],
[271,291,280,283,274,262,0,273],
[279,276,289,271,285,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,238,304,270,307,266,243],
[286,0,214,248,230,256,226,211],
[313,337,0,288,280,417,246,289],
[247,303,263,0,212,260,315,233],
[281,321,271,339,0,262,269,285],
[244,295,134,291,289,0,233,193],
[285,325,305,236,282,318,0,259],
[308,340,262,318,266,358,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,282,286,261,302,286,277],
[258,0,281,275,261,262,271,264],
[269,270,0,278,271,264,270,261],
[265,276,273,0,265,279,270,261],
[290,290,280,286,0,288,275,275],
[249,289,287,272,263,0,279,267],
[265,280,281,281,276,272,0,283],
[274,287,290,290,276,284,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,280,277,261,260,291],
[273,0,269,287,285,256,263,283],
[266,282,0,277,274,278,263,290],
[271,264,274,0,272,268,257,299],
[274,266,277,279,0,260,269,293],
[290,295,273,283,291,0,285,296],
[291,288,288,294,282,266,0,302],
[260,268,261,252,258,255,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,266,281,287,289,283],
[275,0,272,266,262,272,288,285],
[271,279,0,279,290,274,279,293],
[285,285,272,0,280,293,282,289],
[270,289,261,271,0,266,294,284],
[264,279,277,258,285,0,277,282],
[262,263,272,269,257,274,0,280],
[268,266,258,262,267,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,283,277,274,286,273],
[274,0,281,283,277,278,279,279],
[273,270,0,281,264,271,279,265],
[268,268,270,0,272,263,269,259],
[274,274,287,279,0,282,291,264],
[277,273,280,288,269,0,276,267],
[265,272,272,282,260,275,0,256],
[278,272,286,292,287,284,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,270,264,276,269,275],
[278,0,273,274,285,284,286,285],
[280,278,0,283,287,269,277,283],
[281,277,268,0,269,261,268,292],
[287,266,264,282,0,297,286,282],
[275,267,282,290,254,0,268,272],
[282,265,274,283,265,283,0,283],
[276,266,268,259,269,279,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,288,269,294,280,286,274],
[270,0,276,275,283,275,283,268],
[263,275,0,254,270,285,276,258],
[282,276,297,0,282,271,282,277],
[257,268,281,269,0,275,278,264],
[271,276,266,280,276,0,276,278],
[265,268,275,269,273,275,0,273],
[277,283,293,274,287,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,317,287,293,310,270,276],
[269,0,300,267,274,280,262,276],
[234,251,0,253,245,256,237,250],
[264,284,298,0,271,274,250,267],
[258,277,306,280,0,273,269,278],
[241,271,295,277,278,0,255,261],
[281,289,314,301,282,296,0,261],
[275,275,301,284,273,290,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,323,294,274,293,292,294],
[279,0,306,271,289,293,280,282],
[228,245,0,268,243,250,211,260],
[257,280,283,0,263,264,240,273],
[277,262,308,288,0,283,262,260],
[258,258,301,287,268,0,243,281],
[259,271,340,311,289,308,0,290],
[257,269,291,278,291,270,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,267,268,291,332,248,276],
[302,0,321,271,270,313,272,332],
[284,230,0,274,280,299,266,308],
[283,280,277,0,317,302,256,300],
[260,281,271,234,0,300,256,275],
[219,238,252,249,251,0,277,263],
[303,279,285,295,295,274,0,291],
[275,219,243,251,276,288,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,274,265,299,271,250,272],
[297,0,274,295,295,282,306,288],
[277,277,0,276,293,280,269,288],
[286,256,275,0,307,270,292,282],
[252,256,258,244,0,267,273,263],
[280,269,271,281,284,0,290,245],
[301,245,282,259,278,261,0,276],
[279,263,263,269,288,306,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,316,296,270,287,299,284],
[257,0,286,279,246,286,294,226],
[235,265,0,277,276,290,284,241],
[255,272,274,0,235,262,283,230],
[281,305,275,316,0,297,289,261],
[264,265,261,289,254,0,265,254],
[252,257,267,268,262,286,0,256],
[267,325,310,321,290,297,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,283,265,294,263,276,291],
[256,0,288,256,296,272,256,311],
[268,263,0,280,274,270,264,297],
[286,295,271,0,275,276,290,301],
[257,255,277,276,0,262,278,274],
[288,279,281,275,289,0,280,303],
[275,295,287,261,273,271,0,285],
[260,240,254,250,277,248,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,304,282,264,275,289,286],
[273,0,288,295,274,272,293,278],
[247,263,0,277,264,272,274,278],
[269,256,274,0,263,272,269,285],
[287,277,287,288,0,280,295,274],
[276,279,279,279,271,0,283,289],
[262,258,277,282,256,268,0,261],
[265,273,273,266,277,262,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,281,291,293,265,260,282],
[290,0,294,305,291,269,296,289],
[270,257,0,264,272,285,254,280],
[260,246,287,0,290,287,243,287],
[258,260,279,261,0,269,259,247],
[286,282,266,264,282,0,277,277],
[291,255,297,308,292,274,0,293],
[269,262,271,264,304,274,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,277,274,262,257,268,262],
[299,0,298,305,273,294,304,267],
[274,253,0,293,260,274,294,279],
[277,246,258,0,243,257,260,276],
[289,278,291,308,0,265,297,273],
[294,257,277,294,286,0,273,266],
[283,247,257,291,254,278,0,256],
[289,284,272,275,278,285,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,270,269,292,308,297,283],
[250,0,261,275,266,266,285,279],
[281,290,0,292,269,306,259,278],
[282,276,259,0,258,288,298,291],
[259,285,282,293,0,301,286,287],
[243,285,245,263,250,0,252,254],
[254,266,292,253,265,299,0,254],
[268,272,273,260,264,297,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,262,251,264,284,248,313],
[228,0,328,256,265,305,283,301],
[289,223,0,302,243,300,213,285],
[300,295,249,0,267,283,290,344],
[287,286,308,284,0,319,211,321],
[267,246,251,268,232,0,237,319],
[303,268,338,261,340,314,0,354],
[238,250,266,207,230,232,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,284,284,288,280,271,291],
[281,0,293,264,273,287,277,305],
[267,258,0,264,273,276,268,287],
[267,287,287,0,280,281,272,290],
[263,278,278,271,0,274,273,288],
[271,264,275,270,277,0,285,279],
[280,274,283,279,278,266,0,301],
[260,246,264,261,263,272,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,291,280,283,285,291,269],
[273,0,306,285,272,311,298,272],
[260,245,0,263,260,279,263,278],
[271,266,288,0,260,297,263,262],
[268,279,291,291,0,291,293,286],
[266,240,272,254,260,0,278,261],
[260,253,288,288,258,273,0,271],
[282,279,273,289,265,290,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,300,281,247,329,255,280],
[267,0,273,287,238,280,246,268],
[251,278,0,267,257,294,224,260],
[270,264,284,0,275,298,288,262],
[304,313,294,276,0,305,246,312],
[222,271,257,253,246,0,226,248],
[296,305,327,263,305,325,0,295],
[271,283,291,289,239,303,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,288,268,286,270,276],
[267,0,262,279,279,281,276,269],
[268,289,0,284,268,288,266,287],
[263,272,267,0,269,276,269,267],
[283,272,283,282,0,284,271,272],
[265,270,263,275,267,0,261,253],
[281,275,285,282,280,290,0,290],
[275,282,264,284,279,298,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,284,296,267,277,280,297],
[279,0,264,288,247,269,264,276],
[267,287,0,267,276,267,275,279],
[255,263,284,0,268,270,269,279],
[284,304,275,283,0,283,281,293],
[274,282,284,281,268,0,283,297],
[271,287,276,282,270,268,0,291],
[254,275,272,272,258,254,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,262,248,264,255,257,234],
[291,0,244,263,256,277,260,254],
[289,307,0,267,278,289,275,279],
[303,288,284,0,299,294,295,273],
[287,295,273,252,0,276,244,260],
[296,274,262,257,275,0,269,273],
[294,291,276,256,307,282,0,290],
[317,297,272,278,291,278,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,282,279,271,284,293,289],
[262,0,257,269,261,282,273,276],
[269,294,0,279,288,275,298,293],
[272,282,272,0,273,268,270,289],
[280,290,263,278,0,285,289,288],
[267,269,276,283,266,0,276,280],
[258,278,253,281,262,275,0,283],
[262,275,258,262,263,271,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,262,290,274,278,275],
[275,0,273,267,274,269,261,264],
[278,278,0,270,273,288,272,271],
[289,284,281,0,281,275,290,284],
[261,277,278,270,0,276,282,277],
[277,282,263,276,275,0,296,271],
[273,290,279,261,269,255,0,270],
[276,287,280,267,274,280,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,274,283,276,271,300],
[272,0,275,268,262,278,279,282],
[276,276,0,264,267,286,253,287],
[277,283,287,0,282,286,263,292],
[268,289,284,269,0,281,266,292],
[275,273,265,265,270,0,268,281],
[280,272,298,288,285,283,0,311],
[251,269,264,259,259,270,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,244,256,278,261,238,232],
[294,0,261,282,315,270,260,301],
[307,290,0,276,314,256,287,296],
[295,269,275,0,271,284,235,246],
[273,236,237,280,0,249,275,260],
[290,281,295,267,302,0,271,296],
[313,291,264,316,276,280,0,279],
[319,250,255,305,291,255,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,261,249,267,268,272,262],
[283,0,272,281,295,281,279,286],
[290,279,0,278,299,303,273,280],
[302,270,273,0,295,274,279,291],
[284,256,252,256,0,244,259,253],
[283,270,248,277,307,0,276,289],
[279,272,278,272,292,275,0,278],
[289,265,271,260,298,262,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,304,304,259,256,281,260],
[262,0,295,302,255,244,253,247],
[247,256,0,291,227,239,246,247],
[247,249,260,0,240,214,256,232],
[292,296,324,311,0,276,294,270],
[295,307,312,337,275,0,321,285],
[270,298,305,295,257,230,0,264],
[291,304,304,319,281,266,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,270,257,277,263,265,276],
[295,0,290,291,295,281,276,271],
[281,261,0,278,268,274,303,266],
[294,260,273,0,289,270,303,275],
[274,256,283,262,0,269,284,268],
[288,270,277,281,282,0,293,276],
[286,275,248,248,267,258,0,270],
[275,280,285,276,283,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,272,295,282,269,288,280],
[262,0,289,284,261,238,287,240],
[279,262,0,293,268,271,260,257],
[256,267,258,0,241,239,268,251],
[269,290,283,310,0,276,297,268],
[282,313,280,312,275,0,295,280],
[263,264,291,283,254,256,0,249],
[271,311,294,300,283,271,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,272,275,252,297,273,264],
[302,0,278,297,274,296,294,285],
[279,273,0,298,289,280,299,296],
[276,254,253,0,262,280,279,249],
[299,277,262,289,0,290,276,285],
[254,255,271,271,261,0,274,261],
[278,257,252,272,275,277,0,260],
[287,266,255,302,266,290,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,291,284,291,273,297,303],
[264,0,261,274,290,276,291,275],
[260,290,0,273,278,265,299,280],
[267,277,278,0,271,277,290,269],
[260,261,273,280,0,273,279,272],
[278,275,286,274,278,0,287,290],
[254,260,252,261,272,264,0,265],
[248,276,271,282,279,261,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,258,269,264,282,270,238],
[289,0,292,283,283,279,284,271],
[293,259,0,285,279,273,284,263],
[282,268,266,0,274,259,265,277],
[287,268,272,277,0,267,287,268],
[269,272,278,292,284,0,290,274],
[281,267,267,286,264,261,0,252],
[313,280,288,274,283,277,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,267,279,277,254,281,281],
[284,0,270,286,286,273,279,264],
[284,281,0,299,270,276,276,285],
[272,265,252,0,262,276,270,255],
[274,265,281,289,0,233,262,269],
[297,278,275,275,318,0,280,264],
[270,272,275,281,289,271,0,263],
[270,287,266,296,282,287,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,275,293,283,270,301,287],
[290,0,266,313,284,270,303,302],
[276,285,0,296,293,281,298,274],
[258,238,255,0,301,254,288,280],
[268,267,258,250,0,247,269,272],
[281,281,270,297,304,0,275,292],
[250,248,253,263,282,276,0,279],
[264,249,277,271,279,259,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,264,266,279,270,283,276],
[262,0,249,242,258,262,266,245],
[287,302,0,278,287,299,310,272],
[285,309,273,0,292,300,293,273],
[272,293,264,259,0,286,296,270],
[281,289,252,251,265,0,277,276],
[268,285,241,258,255,274,0,255],
[275,306,279,278,281,275,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,281,292,278,281,297,275],
[268,0,274,277,270,273,289,254],
[270,277,0,267,265,273,289,272],
[259,274,284,0,281,283,281,277],
[273,281,286,270,0,270,301,271],
[270,278,278,268,281,0,292,282],
[254,262,262,270,250,259,0,268],
[276,297,279,274,280,269,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,289,276,293,274,283],
[272,0,279,290,263,282,272,292],
[274,272,0,276,292,281,284,296],
[262,261,275,0,272,262,275,289],
[275,288,259,279,0,294,278,290],
[258,269,270,289,257,0,261,302],
[277,279,267,276,273,290,0,301],
[268,259,255,262,261,249,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,270,271,275,304,260,282],
[275,0,267,291,260,285,261,267],
[281,284,0,303,270,270,264,284],
[280,260,248,0,258,271,277,256],
[276,291,281,293,0,284,270,284],
[247,266,281,280,267,0,253,289],
[291,290,287,274,281,298,0,295],
[269,284,267,295,267,262,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,279,269,241,275,265,267],
[296,0,293,271,274,276,259,298],
[272,258,0,264,256,275,263,285],
[282,280,287,0,276,299,266,297],
[310,277,295,275,0,274,279,312],
[276,275,276,252,277,0,261,290],
[286,292,288,285,272,290,0,295],
[284,253,266,254,239,261,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,285,251,260,238,274,252],
[266,0,276,261,278,290,289,255],
[266,275,0,251,277,258,269,256],
[300,290,300,0,312,272,299,283],
[291,273,274,239,0,263,271,261],
[313,261,293,279,288,0,276,289],
[277,262,282,252,280,275,0,265],
[299,296,295,268,290,262,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,275,293,245,235,293,211],
[284,0,311,279,291,203,264,228],
[276,240,0,298,279,259,281,237],
[258,272,253,0,303,263,319,224],
[306,260,272,248,0,281,288,233],
[316,348,292,288,270,0,285,289],
[258,287,270,232,263,266,0,252],
[340,323,314,327,318,262,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,290,288,281,275,293,272],
[253,0,286,277,284,275,260,276],
[261,265,0,274,284,260,265,263],
[263,274,277,0,303,272,288,277],
[270,267,267,248,0,256,271,269],
[276,276,291,279,295,0,270,271],
[258,291,286,263,280,281,0,263],
[279,275,288,274,282,280,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,267,254,262,265,252],
[282,0,267,282,282,283,284,279],
[277,284,0,276,279,257,283,256],
[284,269,275,0,284,257,282,254],
[297,269,272,267,0,242,289,278],
[289,268,294,294,309,0,297,274],
[286,267,268,269,262,254,0,278],
[299,272,295,297,273,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,249,311,306,248,248,250],
[269,0,267,335,317,279,314,294],
[302,284,0,389,334,324,324,275],
[240,216,162,0,284,222,228,230],
[245,234,217,267,0,292,253,229],
[303,272,227,329,259,0,280,247],
[303,237,227,323,298,271,0,241],
[301,257,276,321,322,304,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,282,275,294,268,270,292],
[259,0,272,262,291,264,268,253],
[269,279,0,286,295,284,258,264],
[276,289,265,0,290,271,276,280],
[257,260,256,261,0,249,248,271],
[283,287,267,280,302,0,266,292],
[281,283,293,275,303,285,0,292],
[259,298,287,271,280,259,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,288,302,270,279,293,267],
[239,0,265,289,281,254,241,291],
[263,286,0,257,258,274,280,298],
[249,262,294,0,300,269,275,273],
[281,270,293,251,0,256,277,299],
[272,297,277,282,295,0,274,279],
[258,310,271,276,274,277,0,304],
[284,260,253,278,252,272,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,282,279,272,277,287,276],
[243,0,259,252,252,235,256,267],
[269,292,0,272,250,292,274,281],
[272,299,279,0,282,265,272,296],
[279,299,301,269,0,279,289,289],
[274,316,259,286,272,0,277,285],
[264,295,277,279,262,274,0,273],
[275,284,270,255,262,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,243,269,208,251,227,202],
[302,0,342,289,291,260,284,235],
[308,209,0,229,242,232,206,134],
[282,262,322,0,236,248,217,253],
[343,260,309,315,0,288,237,252],
[300,291,319,303,263,0,276,311],
[324,267,345,334,314,275,0,303],
[349,316,417,298,299,240,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,267,236,212,212,258,239],
[339,0,273,265,262,289,289,294],
[284,278,0,250,220,251,261,264],
[315,286,301,0,286,293,275,309],
[339,289,331,265,0,275,285,320],
[339,262,300,258,276,0,296,293],
[293,262,290,276,266,255,0,298],
[312,257,287,242,231,258,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,243,268,262,296,305,271],
[288,0,301,282,277,310,283,259],
[308,250,0,284,290,288,292,277],
[283,269,267,0,286,271,282,255],
[289,274,261,265,0,281,288,287],
[255,241,263,280,270,0,259,253],
[246,268,259,269,263,292,0,263],
[280,292,274,296,264,298,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,259,289,286,259,255,254],
[271,0,275,276,264,274,274,271],
[292,276,0,299,263,272,306,274],
[262,275,252,0,265,273,262,266],
[265,287,288,286,0,308,296,268],
[292,277,279,278,243,0,293,261],
[296,277,245,289,255,258,0,276],
[297,280,277,285,283,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,291,280,277,315,307,271],
[247,0,250,238,245,265,274,248],
[260,301,0,282,276,286,292,268],
[271,313,269,0,282,279,293,265],
[274,306,275,269,0,300,288,282],
[236,286,265,272,251,0,266,251],
[244,277,259,258,263,285,0,254],
[280,303,283,286,269,300,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,280,291,287,274,303,289],
[260,0,270,283,279,291,264,279],
[271,281,0,299,290,288,268,273],
[260,268,252,0,285,260,277,255],
[264,272,261,266,0,278,282,257],
[277,260,263,291,273,0,287,288],
[248,287,283,274,269,264,0,280],
[262,272,278,296,294,263,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,281,268,260,268,290,271],
[262,0,278,271,271,255,270,264],
[270,273,0,259,255,255,261,262],
[283,280,292,0,280,254,280,282],
[291,280,296,271,0,280,297,289],
[283,296,296,297,271,0,307,292],
[261,281,290,271,254,244,0,278],
[280,287,289,269,262,259,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,293,298,294,273,280,266],
[272,0,305,288,290,303,286,258],
[258,246,0,285,304,289,307,278],
[253,263,266,0,314,271,286,294],
[257,261,247,237,0,246,256,259],
[278,248,262,280,305,0,273,275],
[271,265,244,265,295,278,0,253],
[285,293,273,257,292,276,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,256,273,270,275,275,255],
[282,0,261,281,281,267,294,281],
[295,290,0,284,282,288,307,275],
[278,270,267,0,281,277,289,258],
[281,270,269,270,0,281,277,253],
[276,284,263,274,270,0,287,259],
[276,257,244,262,274,264,0,238],
[296,270,276,293,298,292,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,280,296,265,267,279,287],
[246,0,236,256,252,251,252,262],
[271,315,0,290,282,294,291,293],
[255,295,261,0,261,237,265,256],
[286,299,269,290,0,258,254,273],
[284,300,257,314,293,0,286,288],
[272,299,260,286,297,265,0,277],
[264,289,258,295,278,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,279,315,266,292,303],
[278,0,289,255,295,262,266,317],
[283,262,0,233,282,235,260,297],
[272,296,318,0,265,278,308,281],
[236,256,269,286,0,203,279,302],
[285,289,316,273,348,0,290,312],
[259,285,291,243,272,261,0,286],
[248,234,254,270,249,239,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,285,300,286,273,285,282],
[280,0,303,296,299,268,302,304],
[266,248,0,263,277,277,304,255],
[251,255,288,0,291,266,279,275],
[265,252,274,260,0,246,286,268],
[278,283,274,285,305,0,297,280],
[266,249,247,272,265,254,0,263],
[269,247,296,276,283,271,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,282,280,264,286,292,279],
[271,0,289,298,265,283,287,248],
[269,262,0,293,257,264,277,253],
[271,253,258,0,251,267,268,246],
[287,286,294,300,0,288,295,269],
[265,268,287,284,263,0,289,268],
[259,264,274,283,256,262,0,244],
[272,303,298,305,282,283,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,264,289,281,281,287,284],
[276,0,278,296,268,279,290,269],
[287,273,0,283,276,269,291,281],
[262,255,268,0,258,259,265,269],
[270,283,275,293,0,281,282,287],
[270,272,282,292,270,0,290,295],
[264,261,260,286,269,261,0,266],
[267,282,270,282,264,256,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,275,265,276,281,281,284],
[265,0,270,272,261,271,254,273],
[276,281,0,272,271,267,278,293],
[286,279,279,0,285,280,273,275],
[275,290,280,266,0,280,264,267],
[270,280,284,271,271,0,273,280],
[270,297,273,278,287,278,0,275],
[267,278,258,276,284,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,273,266,291,274,284],
[270,0,293,265,304,259,265,255],
[271,258,0,251,276,244,274,263],
[278,286,300,0,276,236,268,297],
[285,247,275,275,0,255,277,272],
[260,292,307,315,296,0,288,277],
[277,286,277,283,274,263,0,251],
[267,296,288,254,279,274,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,266,279,270,284,277],
[263,0,257,265,260,271,267,275],
[272,294,0,261,279,259,274,279],
[285,286,290,0,271,279,289,266],
[272,291,272,280,0,262,272,264],
[281,280,292,272,289,0,270,282],
[267,284,277,262,279,281,0,263],
[274,276,272,285,287,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,112,190,132,67,306,203],
[321,0,184,186,236,114,302,188],
[439,367,0,380,282,263,349,174],
[361,365,171,0,367,238,196,330],
[419,315,269,184,0,271,253,208],
[484,437,288,313,280,0,382,233],
[245,249,202,355,298,169,0,249],
[348,363,377,221,343,318,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,279,292,278,259,298,275],
[264,0,280,279,268,273,286,288],
[272,271,0,276,252,262,280,277],
[259,272,275,0,271,270,285,281],
[273,283,299,280,0,283,295,285],
[292,278,289,281,268,0,301,291],
[253,265,271,266,256,250,0,259],
[276,263,274,270,266,260,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,266,274,268,270,279,300],
[286,0,277,288,268,275,272,301],
[285,274,0,295,284,267,288,288],
[277,263,256,0,263,253,272,280],
[283,283,267,288,0,282,292,292],
[281,276,284,298,269,0,287,298],
[272,279,263,279,259,264,0,286],
[251,250,263,271,259,253,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,336,355,428,345,346,270],
[138,0,96,126,350,55,95,145],
[215,455,0,376,377,308,346,229],
[196,425,175,0,319,319,415,269],
[123,201,174,232,0,191,286,308],
[206,496,243,232,360,0,367,435],
[205,456,205,136,265,184,0,185],
[281,406,322,282,243,116,366,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,264,255,261,234,279,261],
[275,0,297,300,274,286,293,268],
[287,254,0,249,270,262,252,260],
[296,251,302,0,262,244,277,261],
[290,277,281,289,0,270,286,280],
[317,265,289,307,281,0,285,278],
[272,258,299,274,265,266,0,279],
[290,283,291,290,271,273,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,260,267,300,278,269,280],
[263,0,270,265,265,274,265,267],
[291,281,0,285,294,276,275,290],
[284,286,266,0,258,272,282,293],
[251,286,257,293,0,271,267,282],
[273,277,275,279,280,0,282,296],
[282,286,276,269,284,269,0,262],
[271,284,261,258,269,255,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,258,293,258,270,242,249],
[301,0,288,293,251,264,281,246],
[293,263,0,310,265,271,253,259],
[258,258,241,0,256,251,240,220],
[293,300,286,295,0,262,264,283],
[281,287,280,300,289,0,254,264],
[309,270,298,311,287,297,0,276],
[302,305,292,331,268,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,260,334,279,266,338,280],
[231,0,262,280,266,264,277,289],
[291,289,0,264,350,306,294,313],
[217,271,287,0,314,317,286,321],
[272,285,201,237,0,260,258,322],
[285,287,245,234,291,0,216,320],
[213,274,257,265,293,335,0,304],
[271,262,238,230,229,231,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,316,333,233,258,302,293],
[305,0,295,282,250,252,311,273],
[235,256,0,249,235,201,290,247],
[218,269,302,0,260,271,316,249],
[318,301,316,291,0,265,318,276],
[293,299,350,280,286,0,277,266],
[249,240,261,235,233,274,0,262],
[258,278,304,302,275,285,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,301,268,282,258,316,325],
[261,0,262,217,299,278,269,266],
[250,289,0,250,279,286,333,282],
[283,334,301,0,279,248,320,257],
[269,252,272,272,0,228,315,260],
[293,273,265,303,323,0,305,250],
[235,282,218,231,236,246,0,233],
[226,285,269,294,291,301,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,306,284,292,290,274,252],
[273,0,286,273,253,253,264,262],
[245,265,0,264,248,296,238,250],
[267,278,287,0,264,290,277,288],
[259,298,303,287,0,289,293,271],
[261,298,255,261,262,0,250,258],
[277,287,313,274,258,301,0,254],
[299,289,301,263,280,293,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,300,389,267,389,320,341],
[218,0,239,246,280,318,235,237],
[251,312,0,304,279,323,261,214],
[162,305,247,0,219,243,217,214],
[284,271,272,332,0,307,238,299],
[162,233,228,308,244,0,258,264],
[231,316,290,334,313,293,0,304],
[210,314,337,337,252,287,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,271,289,271,322,298],
[277,0,263,276,267,282,255,286],
[276,288,0,260,277,273,309,265],
[280,275,291,0,291,283,284,288],
[262,284,274,260,0,255,267,281],
[280,269,278,268,296,0,311,290],
[229,296,242,267,284,240,0,256],
[253,265,286,263,270,261,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,272,292,269,299,283],
[274,0,288,284,264,282,287,294],
[270,263,0,265,277,272,278,278],
[279,267,286,0,272,270,295,287],
[259,287,274,279,0,263,264,288],
[282,269,279,281,288,0,297,296],
[252,264,273,256,287,254,0,269],
[268,257,273,264,263,255,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,286,295,304,274,317,276],
[251,0,276,285,296,276,271,271],
[265,275,0,283,283,285,292,287],
[256,266,268,0,266,262,261,250],
[247,255,268,285,0,279,283,252],
[277,275,266,289,272,0,251,264],
[234,280,259,290,268,300,0,253],
[275,280,264,301,299,287,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,255,269,253,255,254,256],
[276,0,284,274,254,283,262,288],
[296,267,0,294,281,300,278,288],
[282,277,257,0,264,299,260,275],
[298,297,270,287,0,272,295,288],
[296,268,251,252,279,0,277,267],
[297,289,273,291,256,274,0,266],
[295,263,263,276,263,284,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,276,287,269,276,236,272],
[296,0,254,303,243,276,251,272],
[275,297,0,317,276,291,260,285],
[264,248,234,0,228,262,238,252],
[282,308,275,323,0,301,279,276],
[275,275,260,289,250,0,246,253],
[315,300,291,313,272,305,0,302],
[279,279,266,299,275,298,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,269,271,265,274,287,256],
[274,0,261,271,258,275,274,271],
[282,290,0,272,272,280,276,288],
[280,280,279,0,277,279,279,272],
[286,293,279,274,0,278,281,281],
[277,276,271,272,273,0,273,270],
[264,277,275,272,270,278,0,268],
[295,280,263,279,270,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,255,268,261,270,273,279],
[272,0,259,262,270,272,269,272],
[296,292,0,275,260,279,267,283],
[283,289,276,0,264,281,279,281],
[290,281,291,287,0,283,268,284],
[281,279,272,270,268,0,262,263],
[278,282,284,272,283,289,0,284],
[272,279,268,270,267,288,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,313,276,286,295,274,282],
[265,0,285,289,279,281,286,272],
[238,266,0,259,259,270,241,254],
[275,262,292,0,270,291,272,271],
[265,272,292,281,0,271,273,272],
[256,270,281,260,280,0,271,280],
[277,265,310,279,278,280,0,285],
[269,279,297,280,279,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,326,239,115,434,364,326],
[312,0,125,87,242,263,375,304],
[225,426,0,320,302,407,470,361],
[312,464,231,0,275,263,470,307],
[436,309,249,276,0,436,502,399],
[117,288,144,288,115,0,342,144],
[187,176,81,81,49,209,0,193],
[225,247,190,244,152,407,358,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,282,274,287,268,295,266],
[282,0,289,287,278,259,280,272],
[269,262,0,266,262,235,259,244],
[277,264,285,0,266,255,262,256],
[264,273,289,285,0,277,290,269],
[283,292,316,296,274,0,287,282],
[256,271,292,289,261,264,0,273],
[285,279,307,295,282,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,272,270,250,278,279,299],
[266,0,276,244,259,251,260,307],
[279,275,0,303,291,272,298,314],
[281,307,248,0,270,293,266,349],
[301,292,260,281,0,299,277,309],
[273,300,279,258,252,0,244,332],
[272,291,253,285,274,307,0,322],
[252,244,237,202,242,219,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,274,270,291,273,269,275],
[277,0,264,268,269,290,271,273],
[277,287,0,276,257,291,257,267],
[281,283,275,0,273,278,289,284],
[260,282,294,278,0,277,269,272],
[278,261,260,273,274,0,264,264],
[282,280,294,262,282,287,0,281],
[276,278,284,267,279,287,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,290,289,252,300,290,263],
[269,0,312,288,275,304,318,252],
[261,239,0,261,237,312,280,281],
[262,263,290,0,255,270,268,262],
[299,276,314,296,0,290,334,275],
[251,247,239,281,261,0,268,287],
[261,233,271,283,217,283,0,259],
[288,299,270,289,276,264,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,282,272,272,280,289,282],
[287,0,288,276,267,286,278,295],
[269,263,0,274,255,279,267,288],
[279,275,277,0,288,266,277,296],
[279,284,296,263,0,263,291,270],
[271,265,272,285,288,0,277,291],
[262,273,284,274,260,274,0,281],
[269,256,263,255,281,260,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,260,258,258,284,251,280],
[300,0,268,288,280,289,264,292],
[291,283,0,266,271,297,269,303],
[293,263,285,0,278,304,289,293],
[293,271,280,273,0,277,274,287],
[267,262,254,247,274,0,241,276],
[300,287,282,262,277,310,0,301],
[271,259,248,258,264,275,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,296,281,286,262,255,276],
[266,0,284,291,285,275,278,284],
[255,267,0,281,278,275,276,294],
[270,260,270,0,272,274,281,276],
[265,266,273,279,0,258,245,281],
[289,276,276,277,293,0,269,277],
[296,273,275,270,306,282,0,281],
[275,267,257,275,270,274,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,269,273,266,283,278,254],
[294,0,290,287,294,295,282,263],
[282,261,0,271,267,283,268,254],
[278,264,280,0,277,279,284,276],
[285,257,284,274,0,280,282,266],
[268,256,268,272,271,0,275,249],
[273,269,283,267,269,276,0,266],
[297,288,297,275,285,302,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,304,282,302,270,270,289],
[276,0,290,281,301,253,278,267],
[247,261,0,256,283,243,232,243],
[269,270,295,0,276,279,281,272],
[249,250,268,275,0,243,243,237],
[281,298,308,272,308,0,276,274],
[281,273,319,270,308,275,0,262],
[262,284,308,279,314,277,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,297,256,262,254,309,243],
[299,0,294,313,250,295,288,278],
[254,257,0,250,267,248,276,222],
[295,238,301,0,249,270,271,248],
[289,301,284,302,0,269,302,288],
[297,256,303,281,282,0,296,260],
[242,263,275,280,249,255,0,249],
[308,273,329,303,263,291,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,291,292,274,281,277,282],
[278,0,279,271,259,279,271,278],
[260,272,0,275,268,271,262,268],
[259,280,276,0,277,280,282,286],
[277,292,283,274,0,296,279,281],
[270,272,280,271,255,0,268,280],
[274,280,289,269,272,283,0,271],
[269,273,283,265,270,271,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,275,251,259,271,285],
[278,0,302,255,247,275,294,277],
[275,249,0,280,239,285,253,288],
[276,296,271,0,239,280,267,302],
[300,304,312,312,0,301,275,317],
[292,276,266,271,250,0,257,295],
[280,257,298,284,276,294,0,308],
[266,274,263,249,234,256,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,276,273,279,264,282],
[281,0,270,295,272,298,267,296],
[269,281,0,258,276,303,277,281],
[275,256,293,0,287,296,256,299],
[278,279,275,264,0,274,286,296],
[272,253,248,255,277,0,262,264],
[287,284,274,295,265,289,0,282],
[269,255,270,252,255,287,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,247,199,272,239,238,207],
[352,0,327,323,355,332,267,325],
[304,224,0,208,327,304,301,300],
[352,228,343,0,360,376,298,356],
[279,196,224,191,0,275,190,233],
[312,219,247,175,276,0,240,253],
[313,284,250,253,361,311,0,349],
[344,226,251,195,318,298,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,269,302,273,316,311,263],
[270,0,265,298,264,298,291,278],
[282,286,0,286,286,305,292,268],
[249,253,265,0,271,277,303,267],
[278,287,265,280,0,272,300,282],
[235,253,246,274,279,0,266,289],
[240,260,259,248,251,285,0,258],
[288,273,283,284,269,262,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,290,280,287,276,286,250],
[272,0,253,281,266,272,254,268],
[261,298,0,266,281,265,266,258],
[271,270,285,0,273,279,272,289],
[264,285,270,278,0,269,265,259],
[275,279,286,272,282,0,262,266],
[265,297,285,279,286,289,0,271],
[301,283,293,262,292,285,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,282,269,266,278,279,269],
[270,0,282,279,274,286,289,277],
[269,269,0,264,277,289,269,262],
[282,272,287,0,292,289,279,297],
[285,277,274,259,0,294,276,276],
[273,265,262,262,257,0,274,266],
[272,262,282,272,275,277,0,276],
[282,274,289,254,275,285,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,274,274,295,262,261,308],
[277,0,265,285,286,292,274,274],
[277,286,0,270,285,277,246,257],
[277,266,281,0,286,266,281,284],
[256,265,266,265,0,270,259,270],
[289,259,274,285,281,0,282,281],
[290,277,305,270,292,269,0,278],
[243,277,294,267,281,270,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,266,262,283,285,303,268],
[257,0,262,245,285,286,284,274],
[285,289,0,263,292,306,305,295],
[289,306,288,0,295,304,313,270],
[268,266,259,256,0,285,298,263],
[266,265,245,247,266,0,279,262],
[248,267,246,238,253,272,0,273],
[283,277,256,281,288,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,282,287,278,282,273,268],
[293,0,278,300,282,276,274,274],
[269,273,0,276,279,265,261,265],
[264,251,275,0,266,270,284,275],
[273,269,272,285,0,277,279,269],
[269,275,286,281,274,0,288,269],
[278,277,290,267,272,263,0,278],
[283,277,286,276,282,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,258,291,309,286,284,315],
[240,0,245,291,280,264,265,276],
[293,306,0,339,323,278,264,288],
[260,260,212,0,295,249,268,293],
[242,271,228,256,0,251,296,280],
[265,287,273,302,300,0,268,303],
[267,286,287,283,255,283,0,278],
[236,275,263,258,271,248,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,287,274,262,261,260],
[274,0,279,288,269,259,283,289],
[268,272,0,274,264,265,270,255],
[264,263,277,0,247,274,255,260],
[277,282,287,304,0,272,274,269],
[289,292,286,277,279,0,269,272],
[290,268,281,296,277,282,0,264],
[291,262,296,291,282,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,246,281,261,270,289,282],
[263,0,284,259,274,244,284,268],
[305,267,0,276,288,287,286,293],
[270,292,275,0,270,274,297,289],
[290,277,263,281,0,269,326,291],
[281,307,264,277,282,0,310,302],
[262,267,265,254,225,241,0,272],
[269,283,258,262,260,249,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,218,205,246,264,252,318],
[242,0,246,197,285,219,247,243],
[333,305,0,259,278,293,276,294],
[346,354,292,0,332,253,205,272],
[305,266,273,219,0,220,224,252],
[287,332,258,298,331,0,287,322],
[299,304,275,346,327,264,0,325],
[233,308,257,279,299,229,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,259,264,271,245,277,230],
[284,0,269,259,281,257,289,225],
[292,282,0,291,286,276,265,245],
[287,292,260,0,293,258,300,282],
[280,270,265,258,0,265,267,234],
[306,294,275,293,286,0,306,275],
[274,262,286,251,284,245,0,243],
[321,326,306,269,317,276,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,291,301,288,308,244,255],
[257,0,288,246,306,276,252,266],
[260,263,0,275,276,289,247,249],
[250,305,276,0,304,271,283,272],
[263,245,275,247,0,277,245,247],
[243,275,262,280,274,0,228,230],
[307,299,304,268,306,323,0,295],
[296,285,302,279,304,321,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,260,287,281,290,262,261],
[266,0,270,287,273,269,267,251],
[291,281,0,293,268,282,276,262],
[264,264,258,0,273,282,273,247],
[270,278,283,278,0,283,253,276],
[261,282,269,269,268,0,268,268],
[289,284,275,278,298,283,0,280],
[290,300,289,304,275,283,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,291,284,277,263,279,281],
[275,0,286,265,272,284,273,276],
[260,265,0,268,273,256,255,258],
[267,286,283,0,279,263,256,280],
[274,279,278,272,0,283,280,279],
[288,267,295,288,268,0,265,291],
[272,278,296,295,271,286,0,295],
[270,275,293,271,272,260,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,281,284,287,280,276,254],
[277,0,283,288,274,273,286,270],
[270,268,0,275,274,272,283,258],
[267,263,276,0,282,264,287,272],
[264,277,277,269,0,268,275,264],
[271,278,279,287,283,0,285,287],
[275,265,268,264,276,266,0,263],
[297,281,293,279,287,264,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,264,273,307,270,278,280],
[290,0,266,270,296,276,268,295],
[287,285,0,280,284,281,273,294],
[278,281,271,0,292,283,277,290],
[244,255,267,259,0,267,271,278],
[281,275,270,268,284,0,275,286],
[273,283,278,274,280,276,0,281],
[271,256,257,261,273,265,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,279,250,288,320,244,317],
[246,0,263,296,305,293,226,241],
[272,288,0,354,303,236,206,326],
[301,255,197,0,251,275,210,346],
[263,246,248,300,0,247,238,303],
[231,258,315,276,304,0,281,308],
[307,325,345,341,313,270,0,279],
[234,310,225,205,248,243,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,265,259,264,265,275,275],
[284,0,274,283,276,276,293,277],
[286,277,0,282,269,296,300,298],
[292,268,269,0,278,298,289,274],
[287,275,282,273,0,288,284,279],
[286,275,255,253,263,0,263,281],
[276,258,251,262,267,288,0,272],
[276,274,253,277,272,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,302,266,305,273,299,271],
[253,0,243,282,243,273,250,284],
[249,308,0,252,294,279,230,295],
[285,269,299,0,284,280,272,306],
[246,308,257,267,0,260,255,278],
[278,278,272,271,291,0,278,273],
[252,301,321,279,296,273,0,282],
[280,267,256,245,273,278,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,266,295,278,283,282],
[273,0,292,257,284,281,282,307],
[257,259,0,276,248,255,280,294],
[285,294,275,0,274,290,295,292],
[256,267,303,277,0,291,288,291],
[273,270,296,261,260,0,262,266],
[268,269,271,256,263,289,0,276],
[269,244,257,259,260,285,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,269,307,285,317,281,287],
[242,0,311,282,271,324,294,288],
[282,240,0,241,260,293,264,234],
[244,269,310,0,272,285,265,229],
[266,280,291,279,0,320,271,282],
[234,227,258,266,231,0,235,207],
[270,257,287,286,280,316,0,224],
[264,263,317,322,269,344,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,283,279,292,269,272,292],
[296,0,282,303,266,293,274,275],
[268,269,0,289,263,265,260,276],
[272,248,262,0,271,261,249,243],
[259,285,288,280,0,266,274,264],
[282,258,286,290,285,0,291,302],
[279,277,291,302,277,260,0,288],
[259,276,275,308,287,249,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,292,280,296,296,295,270],
[254,0,287,278,293,279,285,256],
[259,264,0,273,286,275,257,254],
[271,273,278,0,264,249,265,256],
[255,258,265,287,0,278,284,276],
[255,272,276,302,273,0,305,270],
[256,266,294,286,267,246,0,276],
[281,295,297,295,275,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,230,246,213,247,289,308],
[292,0,219,243,275,253,320,291],
[321,332,0,292,261,304,334,350],
[305,308,259,0,317,298,338,347],
[338,276,290,234,0,348,302,290],
[304,298,247,253,203,0,287,283],
[262,231,217,213,249,264,0,290],
[243,260,201,204,261,268,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,294,280,298,292,292,273],
[269,0,266,262,294,259,265,288],
[257,285,0,270,276,277,273,283],
[271,289,281,0,274,275,273,294],
[253,257,275,277,0,248,270,275],
[259,292,274,276,303,0,279,280],
[259,286,278,278,281,272,0,292],
[278,263,268,257,276,271,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,262,239,278,282,300,255],
[281,0,256,261,279,267,260,251],
[289,295,0,278,298,298,301,269],
[312,290,273,0,280,285,295,283],
[273,272,253,271,0,281,268,261],
[269,284,253,266,270,0,272,258],
[251,291,250,256,283,279,0,262],
[296,300,282,268,290,293,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,281,293,259,299,291,270],
[268,0,287,282,268,255,276,251],
[270,264,0,291,266,289,276,274],
[258,269,260,0,268,266,263,262],
[292,283,285,283,0,273,284,278],
[252,296,262,285,278,0,274,289],
[260,275,275,288,267,277,0,263],
[281,300,277,289,273,262,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,289,288,280,288,288,273],
[272,0,280,263,283,276,282,286],
[262,271,0,266,256,255,270,263],
[263,288,285,0,279,273,279,274],
[271,268,295,272,0,279,276,284],
[263,275,296,278,272,0,262,271],
[263,269,281,272,275,289,0,275],
[278,265,288,277,267,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,286,290,279,267,274],
[283,0,249,283,296,284,301,280],
[272,302,0,287,307,282,277,303],
[265,268,264,0,274,266,279,242],
[261,255,244,277,0,257,250,253],
[272,267,269,285,294,0,292,287],
[284,250,274,272,301,259,0,279],
[277,271,248,309,298,264,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,269,262,241,318,275],
[275,0,329,324,276,246,308,314],
[267,222,0,267,252,221,240,272],
[282,227,284,0,241,277,289,240],
[289,275,299,310,0,273,294,278],
[310,305,330,274,278,0,312,276],
[233,243,311,262,257,239,0,278],
[276,237,279,311,273,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,263,249,288,284,281,282],
[288,0,265,272,261,279,279,296],
[288,286,0,271,288,299,283,297],
[302,279,280,0,271,286,282,304],
[263,290,263,280,0,278,287,304],
[267,272,252,265,273,0,249,285],
[270,272,268,269,264,302,0,301],
[269,255,254,247,247,266,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,287,281,285,261,286,271],
[283,0,289,279,279,274,263,280],
[264,262,0,239,260,272,285,261],
[270,272,312,0,264,292,258,272],
[266,272,291,287,0,274,277,256],
[290,277,279,259,277,0,258,253],
[265,288,266,293,274,293,0,293],
[280,271,290,279,295,298,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,270,266,273,283,284,278],
[253,0,263,239,262,253,255,272],
[281,288,0,268,265,285,271,275],
[285,312,283,0,261,275,285,298],
[278,289,286,290,0,271,297,301],
[268,298,266,276,280,0,284,297],
[267,296,280,266,254,267,0,262],
[273,279,276,253,250,254,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,271,269,293,278,278,279],
[266,0,278,261,283,251,287,281],
[280,273,0,268,278,269,287,287],
[282,290,283,0,289,274,293,268],
[258,268,273,262,0,267,268,271],
[273,300,282,277,284,0,275,277],
[273,264,264,258,283,276,0,276],
[272,270,264,283,280,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,273,276,289,280,306,284],
[259,0,265,278,275,290,279,266],
[278,286,0,284,305,293,287,264],
[275,273,267,0,274,270,296,288],
[262,276,246,277,0,248,259,250],
[271,261,258,281,303,0,274,268],
[245,272,264,255,292,277,0,249],
[267,285,287,263,301,283,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,282,286,261,259,291,282],
[276,0,280,278,264,250,259,264],
[269,271,0,298,257,252,263,260],
[265,273,253,0,248,249,258,255],
[290,287,294,303,0,259,300,274],
[292,301,299,302,292,0,261,290],
[260,292,288,293,251,290,0,265],
[269,287,291,296,277,261,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,232,237,273,302,385,263],
[253,0,246,273,253,295,262,279],
[319,305,0,310,258,262,349,266],
[314,278,241,0,281,278,331,217],
[278,298,293,270,0,294,314,250],
[249,256,289,273,257,0,293,266],
[166,289,202,220,237,258,0,213],
[288,272,285,334,301,285,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,255,267,252,241,260,266],
[283,0,239,283,279,263,280,268],
[296,312,0,270,307,243,293,277],
[284,268,281,0,307,277,287,262],
[299,272,244,244,0,258,254,257],
[310,288,308,274,293,0,286,288],
[291,271,258,264,297,265,0,274],
[285,283,274,289,294,263,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,275,295,276,268,283,280],
[285,0,279,289,275,286,293,283],
[276,272,0,298,276,291,285,286],
[256,262,253,0,273,265,274,257],
[275,276,275,278,0,277,286,265],
[283,265,260,286,274,0,293,277],
[268,258,266,277,265,258,0,254],
[271,268,265,294,286,274,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,243,276,278,249,235,224],
[308,0,278,277,267,268,249,290],
[308,273,0,285,294,294,278,262],
[275,274,266,0,298,278,262,272],
[273,284,257,253,0,267,268,261],
[302,283,257,273,284,0,279,278],
[316,302,273,289,283,272,0,272],
[327,261,289,279,290,273,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,322,283,352,331,264,313],
[272,0,256,254,280,312,212,284],
[229,295,0,262,315,319,242,272],
[268,297,289,0,301,289,283,246],
[199,271,236,250,0,275,203,232],
[220,239,232,262,276,0,199,224],
[287,339,309,268,348,352,0,307],
[238,267,279,305,319,327,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,264,271,276,273,258,266],
[270,0,268,267,278,268,260,257],
[287,283,0,272,297,274,263,259],
[280,284,279,0,299,274,277,266],
[275,273,254,252,0,252,258,252],
[278,283,277,277,299,0,262,261],
[293,291,288,274,293,289,0,279],
[285,294,292,285,299,290,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,290,284,289,277,285,274],
[274,0,277,278,275,280,272,281],
[261,274,0,265,262,254,251,254],
[267,273,286,0,275,266,265,284],
[262,276,289,276,0,272,259,271],
[274,271,297,285,279,0,257,276],
[266,279,300,286,292,294,0,280],
[277,270,297,267,280,275,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,228,275,268,255,276,255],
[308,0,274,311,289,290,285,278],
[323,277,0,279,314,297,291,270],
[276,240,272,0,276,278,253,254],
[283,262,237,275,0,279,278,265],
[296,261,254,273,272,0,242,259],
[275,266,260,298,273,309,0,275],
[296,273,281,297,286,292,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,257,275,254,251,268,255],
[279,0,272,263,272,256,273,250],
[294,279,0,269,275,257,278,260],
[276,288,282,0,274,257,261,278],
[297,279,276,277,0,265,282,285],
[300,295,294,294,286,0,302,269],
[283,278,273,290,269,249,0,259],
[296,301,291,273,266,282,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,280,304,289,334,279,270],
[296,0,301,295,274,283,274,322],
[271,250,0,272,300,296,298,273],
[247,256,279,0,267,261,241,258],
[262,277,251,284,0,298,308,296],
[217,268,255,290,253,0,220,246],
[272,277,253,310,243,331,0,290],
[281,229,278,293,255,305,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,248,281,273,258,244,268],
[290,0,270,309,287,281,277,289],
[303,281,0,293,268,263,266,271],
[270,242,258,0,241,261,262,255],
[278,264,283,310,0,263,260,268],
[293,270,288,290,288,0,283,288],
[307,274,285,289,291,268,0,292],
[283,262,280,296,283,263,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,346,309,215,347,284,379],
[310,0,308,316,277,318,254,336],
[205,243,0,230,179,219,273,259],
[242,235,321,0,252,250,291,316],
[336,274,372,299,0,324,350,380],
[204,233,332,301,227,0,253,281],
[267,297,278,260,201,298,0,290],
[172,215,292,235,171,270,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,269,272,260,283,273,266],
[285,0,293,295,275,290,277,280],
[282,258,0,278,274,282,269,271],
[279,256,273,0,272,253,265,272],
[291,276,277,279,0,271,275,268],
[268,261,269,298,280,0,287,273],
[278,274,282,286,276,264,0,273],
[285,271,280,279,283,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,289,310,304,305,295,260],
[289,0,273,301,310,313,298,290],
[262,278,0,311,274,284,272,248],
[241,250,240,0,268,263,272,252],
[247,241,277,283,0,280,273,255],
[246,238,267,288,271,0,257,259],
[256,253,279,279,278,294,0,260],
[291,261,303,299,296,292,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,267,279,305,327,291,289],
[268,0,261,273,310,302,275,286],
[284,290,0,274,328,303,283,288],
[272,278,277,0,315,304,300,288],
[246,241,223,236,0,307,275,245],
[224,249,248,247,244,0,253,223],
[260,276,268,251,276,298,0,260],
[262,265,263,263,306,328,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,277,292,307,296,267,271],
[253,0,254,282,289,289,239,265],
[274,297,0,286,303,283,277,308],
[259,269,265,0,276,274,255,259],
[244,262,248,275,0,259,261,238],
[255,262,268,277,292,0,254,257],
[284,312,274,296,290,297,0,278],
[280,286,243,292,313,294,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,269,256,262,258,266,287],
[278,0,271,274,266,272,282,281],
[282,280,0,282,256,275,271,259],
[295,277,269,0,262,246,273,277],
[289,285,295,289,0,285,293,275],
[293,279,276,305,266,0,297,293],
[285,269,280,278,258,254,0,279],
[264,270,292,274,276,258,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,267,271,281,237,300,286],
[295,0,265,292,255,278,271,310],
[284,286,0,282,256,281,302,302],
[280,259,269,0,257,257,311,283],
[270,296,295,294,0,261,342,331],
[314,273,270,294,290,0,310,299],
[251,280,249,240,209,241,0,281],
[265,241,249,268,220,252,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,266,282,304,276,313,296],
[252,0,262,259,264,262,278,255],
[285,289,0,273,294,281,300,271],
[269,292,278,0,287,267,275,282],
[247,287,257,264,0,245,267,280],
[275,289,270,284,306,0,324,301],
[238,273,251,276,284,227,0,251],
[255,296,280,269,271,250,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,279,265,297,304,286,274],
[280,0,259,239,287,293,266,256],
[272,292,0,268,270,302,296,270],
[286,312,283,0,274,312,302,320],
[254,264,281,277,0,313,316,271],
[247,258,249,239,238,0,287,246],
[265,285,255,249,235,264,0,281],
[277,295,281,231,280,305,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,181,344,257,260,364,239],
[275,0,266,305,270,321,304,273],
[370,285,0,259,278,215,345,301],
[207,246,292,0,217,163,251,262],
[294,281,273,334,0,246,277,261],
[291,230,336,388,305,0,435,309],
[187,247,206,300,274,116,0,248],
[312,278,250,289,290,242,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,253,273,257,250,281,260],
[284,0,286,288,283,267,318,270],
[298,265,0,283,286,259,316,291],
[278,263,268,0,263,259,295,269],
[294,268,265,288,0,272,293,264],
[301,284,292,292,279,0,328,275],
[270,233,235,256,258,223,0,260],
[291,281,260,282,287,276,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,281,296,297,281,283],
[278,0,276,270,290,282,311,286],
[280,275,0,279,291,291,282,291],
[270,281,272,0,290,280,283,288],
[255,261,260,261,0,273,287,273],
[254,269,260,271,278,0,286,287],
[270,240,269,268,264,265,0,281],
[268,265,260,263,278,264,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,258,266,256,267,250],
[271,0,261,276,290,281,280,272],
[274,290,0,280,307,263,271,269],
[293,275,271,0,298,295,274,291],
[285,261,244,253,0,264,282,245],
[295,270,288,256,287,0,273,279],
[284,271,280,277,269,278,0,271],
[301,279,282,260,306,272,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,314,301,335,277,340,264],
[228,0,291,284,283,253,262,289],
[237,260,0,182,253,251,194,211],
[250,267,369,0,268,238,320,263],
[216,268,298,283,0,234,290,281],
[274,298,300,313,317,0,276,265],
[211,289,357,231,261,275,0,244],
[287,262,340,288,270,286,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,296,309,291,285,282,284],
[280,0,300,300,274,276,279,289],
[255,251,0,265,255,260,252,266],
[242,251,286,0,253,259,257,265],
[260,277,296,298,0,281,300,299],
[266,275,291,292,270,0,285,302],
[269,272,299,294,251,266,0,303],
[267,262,285,286,252,249,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,236,301,264,261,252,265],
[218,0,255,262,245,235,232,250],
[315,296,0,317,288,247,286,277],
[250,289,234,0,278,230,263,288],
[287,306,263,273,0,253,248,283],
[290,316,304,321,298,0,239,290],
[299,319,265,288,303,312,0,284],
[286,301,274,263,268,261,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,209,329,262,239,309,253],
[266,0,297,302,288,240,318,323],
[342,254,0,321,328,279,356,355],
[222,249,230,0,276,198,276,272],
[289,263,223,275,0,311,347,262],
[312,311,272,353,240,0,369,317],
[242,233,195,275,204,182,0,212],
[298,228,196,279,289,234,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,265,243,257,279,263,262],
[295,0,289,290,305,286,255,296],
[286,262,0,244,258,262,256,278],
[308,261,307,0,296,281,285,273],
[294,246,293,255,0,276,254,284],
[272,265,289,270,275,0,282,300],
[288,296,295,266,297,269,0,296],
[289,255,273,278,267,251,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,258,274,232,334,199,300],
[430,0,351,261,328,326,292,371],
[293,200,0,271,257,197,198,281],
[277,290,280,0,254,389,218,315],
[319,223,294,297,0,336,280,285],
[217,225,354,162,215,0,132,279],
[352,259,353,333,271,419,0,285],
[251,180,270,236,266,272,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,285,270,256,275,292],
[283,0,272,286,294,269,284,281],
[270,279,0,277,276,291,296,296],
[266,265,274,0,287,279,294,293],
[281,257,275,264,0,271,268,284],
[295,282,260,272,280,0,274,305],
[276,267,255,257,283,277,0,275],
[259,270,255,258,267,246,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,276,299,226,274,249,277],
[259,0,302,312,264,317,232,328],
[275,249,0,262,303,282,261,260],
[252,239,289,0,244,276,290,282],
[325,287,248,307,0,281,270,325],
[277,234,269,275,270,0,267,252],
[302,319,290,261,281,284,0,261],
[274,223,291,269,226,299,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,299,286,277,280,269,282],
[279,0,285,271,265,288,282,271],
[252,266,0,273,257,269,258,259],
[265,280,278,0,260,258,257,252],
[274,286,294,291,0,295,278,279],
[271,263,282,293,256,0,269,262],
[282,269,293,294,273,282,0,264],
[269,280,292,299,272,289,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,269,283,283,288,296,284],
[255,0,280,281,277,252,301,316],
[282,271,0,290,279,302,290,299],
[268,270,261,0,257,259,300,256],
[268,274,272,294,0,289,308,290],
[263,299,249,292,262,0,280,259],
[255,250,261,251,243,271,0,262],
[267,235,252,295,261,292,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,267,276,289,284,265],
[277,0,283,278,279,270,299,278],
[269,268,0,271,261,274,273,277],
[284,273,280,0,268,291,275,286],
[275,272,290,283,0,298,301,272],
[262,281,277,260,253,0,284,258],
[267,252,278,276,250,267,0,267],
[286,273,274,265,279,293,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,282,269,270,279,298,269],
[268,0,254,290,287,299,308,282],
[269,297,0,283,283,291,314,291],
[282,261,268,0,289,295,301,281],
[281,264,268,262,0,273,293,275],
[272,252,260,256,278,0,280,255],
[253,243,237,250,258,271,0,258],
[282,269,260,270,276,296,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,281,272,295,277,275,283],
[266,0,276,280,281,294,284,276],
[270,275,0,273,270,289,266,265],
[279,271,278,0,262,276,288,273],
[256,270,281,289,0,282,275,295],
[274,257,262,275,269,0,286,270],
[276,267,285,263,276,265,0,288],
[268,275,286,278,256,281,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,283,299,273,285,319,269],
[265,0,227,268,256,275,319,243],
[268,324,0,260,293,305,370,317],
[252,283,291,0,316,249,314,237],
[278,295,258,235,0,277,291,250],
[266,276,246,302,274,0,278,231],
[232,232,181,237,260,273,0,214],
[282,308,234,314,301,320,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,262,292,289,280,282],
[270,0,281,279,290,265,274,292],
[264,270,0,260,267,258,268,268],
[289,272,291,0,269,281,297,284],
[259,261,284,282,0,283,276,294],
[262,286,293,270,268,0,269,272],
[271,277,283,254,275,282,0,279],
[269,259,283,267,257,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,265,293,295,273,285,286],
[289,0,262,283,272,278,291,261],
[286,289,0,288,284,266,272,281],
[258,268,263,0,268,270,259,262],
[256,279,267,283,0,270,265,267],
[278,273,285,281,281,0,272,281],
[266,260,279,292,286,279,0,275],
[265,290,270,289,284,270,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,240,281,272,261,271,284],
[301,0,272,283,282,269,291,276],
[311,279,0,288,275,306,283,317],
[270,268,263,0,244,274,267,272],
[279,269,276,307,0,288,273,293],
[290,282,245,277,263,0,268,297],
[280,260,268,284,278,283,0,282],
[267,275,234,279,258,254,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,251,278,218,270,257,258],
[273,0,259,277,275,272,257,249],
[300,292,0,253,290,274,296,276],
[273,274,298,0,272,295,277,316],
[333,276,261,279,0,275,277,317],
[281,279,277,256,276,0,261,288],
[294,294,255,274,274,290,0,327],
[293,302,275,235,234,263,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,314,285,281,265,269,281],
[269,0,283,279,267,269,262,271],
[237,268,0,260,274,256,254,265],
[266,272,291,0,256,248,271,272],
[270,284,277,295,0,264,277,268],
[286,282,295,303,287,0,278,264],
[282,289,297,280,274,273,0,271],
[270,280,286,279,283,287,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,256,275,261,235,270,249],
[300,0,268,282,275,237,293,282],
[295,283,0,292,279,252,285,270],
[276,269,259,0,275,273,259,244],
[290,276,272,276,0,231,305,273],
[316,314,299,278,320,0,316,244],
[281,258,266,292,246,235,0,237],
[302,269,281,307,278,307,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,265,271,265,267,276,267],
[301,0,257,269,296,282,265,265],
[286,294,0,294,272,300,281,297],
[280,282,257,0,260,275,269,273],
[286,255,279,291,0,261,295,258],
[284,269,251,276,290,0,279,264],
[275,286,270,282,256,272,0,251],
[284,286,254,278,293,287,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,274,300,294,299,276,317],
[258,0,269,271,267,264,276,293],
[277,282,0,277,263,271,274,273],
[251,280,274,0,264,272,260,267],
[257,284,288,287,0,257,252,278],
[252,287,280,279,294,0,282,265],
[275,275,277,291,299,269,0,288],
[234,258,278,284,273,286,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,351,310,350,312,271,297],
[245,0,316,278,311,302,270,282],
[200,235,0,270,264,251,278,253],
[241,273,281,0,305,287,272,275],
[201,240,287,246,0,238,269,280],
[239,249,300,264,313,0,257,315],
[280,281,273,279,282,294,0,278],
[254,269,298,276,271,236,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,267,303,286,290,288,266],
[258,0,271,257,287,280,279,274],
[284,280,0,296,279,286,275,292],
[248,294,255,0,281,295,275,276],
[265,264,272,270,0,272,256,266],
[261,271,265,256,279,0,253,276],
[263,272,276,276,295,298,0,267],
[285,277,259,275,285,275,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,281,275,293,264,272],
[267,0,254,249,264,286,260,270],
[268,297,0,269,273,281,290,267],
[270,302,282,0,292,295,303,285],
[276,287,278,259,0,291,294,267],
[258,265,270,256,260,0,281,255],
[287,291,261,248,257,270,0,269],
[279,281,284,266,284,296,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,281,289,290,285,274,266],
[258,0,257,274,288,287,279,276],
[270,294,0,271,280,298,270,263],
[262,277,280,0,279,296,262,261],
[261,263,271,272,0,286,282,262],
[266,264,253,255,265,0,255,246],
[277,272,281,289,269,296,0,271],
[285,275,288,290,289,305,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,265,277,278,279,287,275],
[263,0,274,265,267,277,276,265],
[286,277,0,274,269,277,283,283],
[274,286,277,0,286,278,283,270],
[273,284,282,265,0,264,273,288],
[272,274,274,273,287,0,270,276],
[264,275,268,268,278,281,0,275],
[276,286,268,281,263,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,309,263,295,272,273,268],
[275,0,307,275,270,262,282,285],
[242,244,0,260,243,253,257,233],
[288,276,291,0,288,268,286,262],
[256,281,308,263,0,267,259,264],
[279,289,298,283,284,0,275,271],
[278,269,294,265,292,276,0,284],
[283,266,318,289,287,280,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,282,312,273,282,302,284],
[257,0,274,263,249,262,284,274],
[269,277,0,304,282,266,265,286],
[239,288,247,0,240,247,253,260],
[278,302,269,311,0,290,268,282],
[269,289,285,304,261,0,268,280],
[249,267,286,298,283,283,0,280],
[267,277,265,291,269,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,220,236,248,247,240,258],
[297,0,289,263,290,281,303,297],
[331,262,0,262,292,279,299,272],
[315,288,289,0,314,295,334,246],
[303,261,259,237,0,247,285,302],
[304,270,272,256,304,0,302,234],
[311,248,252,217,266,249,0,265],
[293,254,279,305,249,317,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,270,300,274,284,267,291],
[293,0,270,302,300,273,274,287],
[281,281,0,306,253,280,287,312],
[251,249,245,0,278,258,246,288],
[277,251,298,273,0,278,271,278],
[267,278,271,293,273,0,297,308],
[284,277,264,305,280,254,0,329],
[260,264,239,263,273,243,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,252,246,274,286,299,250],
[274,0,266,318,288,289,282,250],
[299,285,0,266,222,274,260,276],
[305,233,285,0,233,311,262,265],
[277,263,329,318,0,325,315,261],
[265,262,277,240,226,0,255,245],
[252,269,291,289,236,296,0,266],
[301,301,275,286,290,306,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,282,288,283,237,320,263],
[230,0,237,260,257,226,275,247],
[269,314,0,293,283,270,305,284],
[263,291,258,0,265,257,278,248],
[268,294,268,286,0,235,311,252],
[314,325,281,294,316,0,303,261],
[231,276,246,273,240,248,0,221],
[288,304,267,303,299,290,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,283,280,307,245,245,270],
[287,0,345,267,323,289,269,264],
[268,206,0,232,257,224,209,206],
[271,284,319,0,312,265,258,278],
[244,228,294,239,0,224,210,240],
[306,262,327,286,327,0,262,273],
[306,282,342,293,341,289,0,275],
[281,287,345,273,311,278,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,263,283,252,270,262,255],
[287,0,281,290,265,282,289,256],
[288,270,0,287,284,278,275,282],
[268,261,264,0,260,256,274,274],
[299,286,267,291,0,257,275,263],
[281,269,273,295,294,0,282,292],
[289,262,276,277,276,269,0,264],
[296,295,269,277,288,259,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,268,278,277,277,270,258],
[304,0,291,288,290,273,287,282],
[283,260,0,271,285,272,285,282],
[273,263,280,0,283,270,264,265],
[274,261,266,268,0,274,269,272],
[274,278,279,281,277,0,296,276],
[281,264,266,287,282,255,0,278],
[293,269,269,286,279,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,269,285,262,283,280,276],
[255,0,260,271,244,287,251,245],
[282,291,0,276,297,304,277,260],
[266,280,275,0,270,283,273,243],
[289,307,254,281,0,268,288,253],
[268,264,247,268,283,0,266,267],
[271,300,274,278,263,285,0,268],
[275,306,291,308,298,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,267,263,252,271,273,259],
[267,0,262,296,260,268,249,275],
[284,289,0,293,252,285,263,241],
[288,255,258,0,257,276,250,263],
[299,291,299,294,0,283,282,272],
[280,283,266,275,268,0,270,268],
[278,302,288,301,269,281,0,307],
[292,276,310,288,279,283,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,278,275,278,256,262,259],
[289,0,261,277,287,277,271,261],
[273,290,0,281,281,267,283,283],
[276,274,270,0,270,267,271,268],
[273,264,270,281,0,280,276,278],
[295,274,284,284,271,0,283,268],
[289,280,268,280,275,268,0,269],
[292,290,268,283,273,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,290,287,272,286,282,278],
[264,0,253,275,281,245,261,270],
[261,298,0,295,275,269,268,269],
[264,276,256,0,278,275,275,267],
[279,270,276,273,0,262,276,281],
[265,306,282,276,289,0,280,287],
[269,290,283,276,275,271,0,287],
[273,281,282,284,270,264,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,297,286,326,272,277,282],
[257,0,247,278,285,267,241,252],
[254,304,0,280,311,265,247,262],
[265,273,271,0,299,272,266,243],
[225,266,240,252,0,241,232,214],
[279,284,286,279,310,0,291,263],
[274,310,304,285,319,260,0,285],
[269,299,289,308,337,288,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,296,288,265,292,271,288],
[275,0,278,281,265,279,285,274],
[255,273,0,284,263,253,270,260],
[263,270,267,0,271,273,266,262],
[286,286,288,280,0,286,271,293],
[259,272,298,278,265,0,284,260],
[280,266,281,285,280,267,0,252],
[263,277,291,289,258,291,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,301,281,284,276,302,320],
[276,0,276,276,242,283,254,259],
[250,275,0,248,248,275,246,305],
[270,275,303,0,278,287,279,296],
[267,309,303,273,0,313,286,306],
[275,268,276,264,238,0,239,264],
[249,297,305,272,265,312,0,301],
[231,292,246,255,245,287,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,326,312,295,292,312,273],
[271,0,285,291,292,261,287,299],
[225,266,0,282,263,285,287,276],
[239,260,269,0,266,259,270,263],
[256,259,288,285,0,256,304,297],
[259,290,266,292,295,0,318,347],
[239,264,264,281,247,233,0,264],
[278,252,275,288,254,204,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,279,274,276,278,261],
[267,0,259,263,262,272,276,262],
[272,292,0,267,276,266,293,266],
[272,288,284,0,274,267,270,280],
[277,289,275,277,0,279,274,277],
[275,279,285,284,272,0,271,271],
[273,275,258,281,277,280,0,277],
[290,289,285,271,274,280,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,282,296,295,291,239,274],
[255,0,238,240,254,252,236,284],
[269,313,0,284,272,270,264,269],
[255,311,267,0,299,296,295,263],
[256,297,279,252,0,247,269,253],
[260,299,281,255,304,0,254,252],
[312,315,287,256,282,297,0,268],
[277,267,282,288,298,299,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,284,277,273,296,274],
[271,0,281,282,261,273,298,276],
[272,270,0,271,277,264,296,268],
[267,269,280,0,264,277,289,263],
[274,290,274,287,0,263,295,277],
[278,278,287,274,288,0,306,282],
[255,253,255,262,256,245,0,266],
[277,275,283,288,274,269,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,294,275,293,273,306],
[265,0,265,277,270,275,266,318],
[281,286,0,270,300,300,278,303],
[257,274,281,0,244,261,247,280],
[276,281,251,307,0,290,306,308],
[258,276,251,290,261,0,284,305],
[278,285,273,304,245,267,0,300],
[245,233,248,271,243,246,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,274,298,313,281,284,257],
[253,0,230,268,292,268,271,251],
[277,321,0,313,290,280,317,271],
[253,283,238,0,279,248,282,254],
[238,259,261,272,0,231,271,255],
[270,283,271,303,320,0,296,293],
[267,280,234,269,280,255,0,251],
[294,300,280,297,296,258,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,275,275,264,269,277],
[271,0,281,267,265,275,262,284],
[278,270,0,262,271,263,270,282],
[276,284,289,0,274,271,280,267],
[276,286,280,277,0,279,272,271],
[287,276,288,280,272,0,276,278],
[282,289,281,271,279,275,0,290],
[274,267,269,284,280,273,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,252,255,233,269,226,201],
[310,0,295,289,270,295,268,283],
[299,256,0,260,268,276,271,248],
[296,262,291,0,288,278,284,270],
[318,281,283,263,0,281,264,274],
[282,256,275,273,270,0,261,259],
[325,283,280,267,287,290,0,256],
[350,268,303,281,277,292,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,283,278,284,283,275,293],
[257,0,274,261,294,279,273,257],
[268,277,0,280,279,269,278,267],
[273,290,271,0,289,286,287,277],
[267,257,272,262,0,280,260,265],
[268,272,282,265,271,0,281,272],
[276,278,273,264,291,270,0,274],
[258,294,284,274,286,279,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,321,264,255,297,250,345],
[286,0,299,300,230,294,302,297],
[230,252,0,231,231,264,228,277],
[287,251,320,0,302,246,290,303],
[296,321,320,249,0,283,248,322],
[254,257,287,305,268,0,276,312],
[301,249,323,261,303,275,0,280],
[206,254,274,248,229,239,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,240,271,257,255,258,264],
[309,0,280,304,302,286,282,270],
[311,271,0,302,313,269,284,257],
[280,247,249,0,268,268,273,229],
[294,249,238,283,0,256,238,230],
[296,265,282,283,295,0,268,277],
[293,269,267,278,313,283,0,279],
[287,281,294,322,321,274,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,262,298,294,273,285,328],
[266,0,347,325,303,285,303,305],
[289,204,0,272,287,237,274,295],
[253,226,279,0,324,289,242,281],
[257,248,264,227,0,230,203,299],
[278,266,314,262,321,0,252,284],
[266,248,277,309,348,299,0,305],
[223,246,256,270,252,267,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,303,265,273,276,312,322],
[270,0,296,268,280,284,290,312],
[248,255,0,266,268,265,243,284],
[286,283,285,0,270,292,259,311],
[278,271,283,281,0,288,268,288],
[275,267,286,259,263,0,255,289],
[239,261,308,292,283,296,0,297],
[229,239,267,240,263,262,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,280,266,276,286,275],
[275,0,291,256,277,292,274,268],
[272,260,0,269,258,267,249,249],
[271,295,282,0,249,286,266,267],
[285,274,293,302,0,299,289,285],
[275,259,284,265,252,0,266,262],
[265,277,302,285,262,285,0,284],
[276,283,302,284,266,289,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,271,287,292,281,322,296],
[202,0,275,232,238,214,256,249],
[280,276,0,280,310,261,278,252],
[264,319,271,0,298,264,295,254],
[259,313,241,253,0,262,271,252],
[270,337,290,287,289,0,259,281],
[229,295,273,256,280,292,0,248],
[255,302,299,297,299,270,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,291,270,284,259,283,270],
[285,0,274,285,284,289,280,280],
[260,277,0,268,271,267,285,276],
[281,266,283,0,269,290,274,274],
[267,267,280,282,0,274,290,279],
[292,262,284,261,277,0,289,286],
[268,271,266,277,261,262,0,281],
[281,271,275,277,272,265,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,273,270,284,271,265,277],
[258,0,254,271,262,266,244,257],
[278,297,0,276,280,293,259,252],
[281,280,275,0,257,282,279,288],
[267,289,271,294,0,288,255,271],
[280,285,258,269,263,0,284,273],
[286,307,292,272,296,267,0,300],
[274,294,299,263,280,278,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,296,249,281,274,280,275],
[304,0,302,275,292,288,266,276],
[255,249,0,243,254,283,285,289],
[302,276,308,0,297,307,293,269],
[270,259,297,254,0,261,285,280],
[277,263,268,244,290,0,291,275],
[271,285,266,258,266,260,0,264],
[276,275,262,282,271,276,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,265,269,269,276,275,284],
[275,0,273,275,266,271,286,274],
[286,278,0,273,275,262,277,276],
[282,276,278,0,281,277,284,274],
[282,285,276,270,0,284,292,277],
[275,280,289,274,267,0,282,274],
[276,265,274,267,259,269,0,260],
[267,277,275,277,274,277,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,278,283,275,240,299,290],
[296,0,310,281,273,248,329,310],
[273,241,0,275,278,257,309,303],
[268,270,276,0,249,260,332,278],
[276,278,273,302,0,285,331,308],
[311,303,294,291,266,0,311,318],
[252,222,242,219,220,240,0,285],
[261,241,248,273,243,233,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,293,279,303,277,291,306],
[280,0,296,285,300,259,271,289],
[258,255,0,272,270,258,272,252],
[272,266,279,0,270,257,272,287],
[248,251,281,281,0,265,276,281],
[274,292,293,294,286,0,291,286],
[260,280,279,279,275,260,0,267],
[245,262,299,264,270,265,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,273,275,91,367,182,273],
[182,0,183,182,91,91,91,272],
[278,368,0,275,91,368,93,365],
[276,369,276,0,276,185,276,366],
[460,460,460,275,0,369,369,460],
[184,460,183,366,182,0,91,365],
[369,460,458,275,182,460,0,459],
[278,279,186,185,91,186,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,435,195,435,278,277,315],
[236,0,355,193,317,239,314,313],
[116,196,0,78,197,200,157,157],
[356,358,473,0,396,319,274,355],
[116,234,354,155,0,273,315,197],
[273,312,351,232,278,0,274,313],
[274,237,394,277,236,277,0,318],
[236,238,394,196,354,238,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,293,281,269,289,284],
[282,0,249,263,269,257,287,262],
[275,302,0,303,301,306,271,272],
[258,288,248,0,274,262,266,276],
[270,282,250,277,0,259,278,270],
[282,294,245,289,292,0,287,291],
[262,264,280,285,273,264,0,268],
[267,289,279,275,281,260,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,271,287,279,272,237],
[279,0,287,257,301,274,287,279],
[268,264,0,266,268,273,262,247],
[280,294,285,0,276,304,269,262],
[264,250,283,275,0,283,271,240],
[272,277,278,247,268,0,257,246],
[279,264,289,282,280,294,0,266],
[314,272,304,289,311,305,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,159,196,196,274,198,275],
[274,0,277,234,313,276,355,274],
[392,274,0,313,313,313,314,313],
[355,317,238,0,236,276,394,276],
[355,238,238,315,0,275,317,236],
[277,275,238,275,276,0,356,277],
[353,196,237,157,234,195,0,235],
[276,277,238,275,315,274,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,305,352,298,278,328],
[264,0,304,326,327,313,296,328],
[283,247,0,300,299,374,306,276],
[246,225,251,0,283,290,273,250],
[199,224,252,268,0,299,226,239],
[253,238,177,261,252,0,234,262],
[273,255,245,278,325,317,0,307],
[223,223,275,301,312,289,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,254,251,255,223,273,257],
[289,0,262,263,256,257,311,290],
[297,289,0,293,268,282,303,261],
[300,288,258,0,253,247,283,249],
[296,295,283,298,0,250,313,268],
[328,294,269,304,301,0,303,300],
[278,240,248,268,238,248,0,277],
[294,261,290,302,283,251,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,268,262,278,272,301,267],
[260,0,272,254,260,292,278,255],
[283,279,0,276,271,284,281,260],
[289,297,275,0,303,278,299,277],
[273,291,280,248,0,265,296,243],
[279,259,267,273,286,0,305,280],
[250,273,270,252,255,246,0,272],
[284,296,291,274,308,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,273,306,296,271,277,302],
[305,0,291,308,281,266,268,280],
[278,260,0,262,258,272,268,289],
[245,243,289,0,261,270,257,254],
[255,270,293,290,0,299,283,271],
[280,285,279,281,252,0,284,274],
[274,283,283,294,268,267,0,284],
[249,271,262,297,280,277,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,295,273,272,264,277,292],
[272,0,282,280,281,273,267,296],
[256,269,0,250,268,270,256,260],
[278,271,301,0,282,268,272,292],
[279,270,283,269,0,276,268,272],
[287,278,281,283,275,0,260,287],
[274,284,295,279,283,291,0,285],
[259,255,291,259,279,264,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,265,276,287,283,285,281],
[275,0,276,282,274,291,298,305],
[286,275,0,262,274,285,282,297],
[275,269,289,0,268,286,274,285],
[264,277,277,283,0,276,277,297],
[268,260,266,265,275,0,269,297],
[266,253,269,277,274,282,0,294],
[270,246,254,266,254,254,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,292,260,292,276,324,285],
[264,0,259,233,294,311,308,286],
[259,292,0,311,295,297,303,310],
[291,318,240,0,300,320,296,283],
[259,257,256,251,0,273,272,279],
[275,240,254,231,278,0,309,254],
[227,243,248,255,279,242,0,259],
[266,265,241,268,272,297,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,296,286,273,283,284,291],
[277,0,284,291,285,297,270,280],
[255,267,0,280,277,268,283,245],
[265,260,271,0,252,290,278,266],
[278,266,274,299,0,310,304,253],
[268,254,283,261,241,0,270,258],
[267,281,268,273,247,281,0,270],
[260,271,306,285,298,293,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,282,271,265,280,274],
[273,0,275,302,254,279,267,291],
[270,276,0,299,268,309,267,298],
[269,249,252,0,276,255,274,293],
[280,297,283,275,0,283,267,283],
[286,272,242,296,268,0,261,265],
[271,284,284,277,284,290,0,287],
[277,260,253,258,268,286,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,292,327,326,326,273,358],
[263,0,277,365,327,310,329,260],
[259,274,0,292,293,292,307,273],
[224,186,259,0,295,254,241,255],
[225,224,258,256,0,242,240,326],
[225,241,259,297,309,0,243,238],
[278,222,244,310,311,308,0,325],
[193,291,278,296,225,313,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,284,284,267,292,285,260],
[238,0,287,256,288,345,287,317],
[267,264,0,312,212,345,213,290],
[267,295,239,0,242,296,268,296],
[284,263,339,309,0,343,256,261],
[259,206,206,255,208,0,206,207],
[266,264,338,283,295,345,0,263],
[291,234,261,255,290,344,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,284,295,288,323,283,326],
[281,0,298,241,246,264,258,326],
[267,253,0,231,268,262,236,313],
[256,310,320,0,281,300,254,302],
[263,305,283,270,0,274,245,328],
[228,287,289,251,277,0,268,328],
[268,293,315,297,306,283,0,328],
[225,225,238,249,223,223,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,287,297,280,274,283,266],
[281,0,270,288,269,254,268,270],
[264,281,0,280,287,259,243,272],
[254,263,271,0,295,258,263,265],
[271,282,264,256,0,261,253,275],
[277,297,292,293,290,0,271,311],
[268,283,308,288,298,280,0,298],
[285,281,279,286,276,240,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,276,273,295,288,288,267],
[285,0,310,290,300,271,297,295],
[275,241,0,261,287,275,282,261],
[278,261,290,0,298,288,302,289],
[256,251,264,253,0,271,256,263],
[263,280,276,263,280,0,284,263],
[263,254,269,249,295,267,0,256],
[284,256,290,262,288,288,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,265,278,269,283,253],
[264,0,232,267,262,234,246,264],
[283,319,0,272,270,276,275,282],
[286,284,279,0,283,265,277,280],
[273,289,281,268,0,270,272,254],
[282,317,275,286,281,0,294,265],
[268,305,276,274,279,257,0,276],
[298,287,269,271,297,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,262,258,283,274,229,270],
[243,0,331,228,269,282,254,249],
[289,220,0,300,268,274,261,281],
[293,323,251,0,318,260,296,305],
[268,282,283,233,0,279,264,260],
[277,269,277,291,272,0,284,224],
[322,297,290,255,287,267,0,235],
[281,302,270,246,291,327,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,295,294,245,274,234,250],
[309,0,313,333,259,323,290,319],
[256,238,0,270,297,265,238,293],
[257,218,281,0,214,263,260,284],
[306,292,254,337,0,314,244,303],
[277,228,286,288,237,0,234,297],
[317,261,313,291,307,317,0,313],
[301,232,258,267,248,254,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,268,272,278,289,268,302],
[266,0,266,263,273,291,273,306],
[283,285,0,271,276,295,281,304],
[279,288,280,0,271,287,283,305],
[273,278,275,280,0,278,265,302],
[262,260,256,264,273,0,267,294],
[283,278,270,268,286,284,0,314],
[249,245,247,246,249,257,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,299,287,269,286,300,308],
[261,0,248,286,254,266,272,275],
[252,303,0,288,286,294,292,270],
[264,265,263,0,265,271,294,287],
[282,297,265,286,0,285,299,281],
[265,285,257,280,266,0,264,284],
[251,279,259,257,252,287,0,260],
[243,276,281,264,270,267,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,297,263,281,294,259,288],
[294,0,296,278,277,279,266,294],
[254,255,0,232,229,244,266,252],
[288,273,319,0,293,291,265,282],
[270,274,322,258,0,278,284,286],
[257,272,307,260,273,0,291,263],
[292,285,285,286,267,260,0,288],
[263,257,299,269,265,288,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,279,272,254,277,284],
[274,0,283,267,272,261,274,271],
[273,268,0,254,254,252,268,277],
[272,284,297,0,278,265,281,272],
[279,279,297,273,0,282,279,300],
[297,290,299,286,269,0,302,305],
[274,277,283,270,272,249,0,280],
[267,280,274,279,251,246,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,271,286,287,300,293,283],
[264,0,264,284,274,287,281,285],
[280,287,0,272,277,295,283,291],
[265,267,279,0,284,275,286,277],
[264,277,274,267,0,283,294,294],
[251,264,256,276,268,0,276,264],
[258,270,268,265,257,275,0,270],
[268,266,260,274,257,287,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,277,275,297,309,279,309],
[262,0,265,259,259,285,247,305],
[274,286,0,268,281,292,258,296],
[276,292,283,0,262,285,267,303],
[254,292,270,289,0,291,268,307],
[242,266,259,266,260,0,226,290],
[272,304,293,284,283,325,0,323],
[242,246,255,248,244,261,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,264,286,281,283,261],
[277,0,273,263,273,283,274,261],
[267,278,0,260,280,283,277,269],
[287,288,291,0,275,297,273,296],
[265,278,271,276,0,273,284,281],
[270,268,268,254,278,0,272,262],
[268,277,274,278,267,279,0,270],
[290,290,282,255,270,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,256,245,310,268,281,311],
[289,0,268,281,312,273,263,314],
[295,283,0,292,302,270,263,302],
[306,270,259,0,323,280,296,306],
[241,239,249,228,0,219,240,285],
[283,278,281,271,332,0,286,309],
[270,288,288,255,311,265,0,315],
[240,237,249,245,266,242,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,252,245,302,279,312,282],
[273,0,286,285,315,289,335,296],
[299,265,0,263,299,279,315,283],
[306,266,288,0,315,307,331,339],
[249,236,252,236,0,253,311,281],
[272,262,272,244,298,0,324,281],
[239,216,236,220,240,227,0,249],
[269,255,268,212,270,270,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,295,285,298,268,258,257],
[257,0,275,236,290,256,278,274],
[256,276,0,255,283,269,287,264],
[266,315,296,0,299,270,276,290],
[253,261,268,252,0,261,245,261],
[283,295,282,281,290,0,298,270],
[293,273,264,275,306,253,0,266],
[294,277,287,261,290,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,275,256,274,289,277,260],
[287,0,293,307,283,332,296,238],
[276,258,0,305,299,324,312,263],
[295,244,246,0,250,300,316,280],
[277,268,252,301,0,295,283,243],
[262,219,227,251,256,0,254,218],
[274,255,239,235,268,297,0,265],
[291,313,288,271,308,333,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,297,310,275,260,282,294],
[269,0,311,294,270,270,268,304],
[254,240,0,270,233,246,234,256],
[241,257,281,0,246,267,255,260],
[276,281,318,305,0,259,266,306],
[291,281,305,284,292,0,270,284],
[269,283,317,296,285,281,0,293],
[257,247,295,291,245,267,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,268,291,256,282,272,285],
[300,0,278,306,267,330,286,304],
[283,273,0,294,254,264,270,274],
[260,245,257,0,250,248,238,255],
[295,284,297,301,0,315,268,262],
[269,221,287,303,236,0,269,265],
[279,265,281,313,283,282,0,270],
[266,247,277,296,289,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,263,284,283,272,269],
[280,0,276,261,270,279,275,290],
[267,275,0,278,283,258,278,275],
[288,290,273,0,267,277,291,277],
[267,281,268,284,0,282,279,276],
[268,272,293,274,269,0,281,272],
[279,276,273,260,272,270,0,287],
[282,261,276,274,275,279,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,294,278,295,286,255,257],
[254,0,270,275,237,287,241,238],
[257,281,0,260,255,264,238,231],
[273,276,291,0,274,289,267,255],
[256,314,296,277,0,289,276,274],
[265,264,287,262,262,0,251,261],
[296,310,313,284,275,300,0,280],
[294,313,320,296,277,290,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,270,269,289,285,274,271],
[289,0,271,286,286,279,292,280],
[281,280,0,270,292,290,283,280],
[282,265,281,0,288,279,278,276],
[262,265,259,263,0,273,253,260],
[266,272,261,272,278,0,273,282],
[277,259,268,273,298,278,0,267],
[280,271,271,275,291,269,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,273,274,269,290,257,285],
[250,0,258,265,259,268,243,251],
[278,293,0,295,265,271,271,305],
[277,286,256,0,282,288,266,270],
[282,292,286,269,0,290,268,293],
[261,283,280,263,261,0,239,294],
[294,308,280,285,283,312,0,275],
[266,300,246,281,258,257,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,283,279,308,297,279,292],
[280,0,300,246,330,310,318,291],
[268,251,0,271,262,287,232,312],
[272,305,280,0,273,259,259,270],
[243,221,289,278,0,275,285,255],
[254,241,264,292,276,0,250,300],
[272,233,319,292,266,301,0,303],
[259,260,239,281,296,251,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,264,284,260,256,282,265],
[285,0,271,285,275,255,280,265],
[287,280,0,291,275,275,281,294],
[267,266,260,0,266,264,266,269],
[291,276,276,285,0,266,283,283],
[295,296,276,287,285,0,293,272],
[269,271,270,285,268,258,0,262],
[286,286,257,282,268,279,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,246,228,246,261,253,238],
[277,0,266,280,273,277,274,247],
[305,285,0,283,274,265,306,283],
[323,271,268,0,277,272,282,278],
[305,278,277,274,0,278,291,272],
[290,274,286,279,273,0,286,267],
[298,277,245,269,260,265,0,269],
[313,304,268,273,279,284,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,259,250,240,253,246,242],
[323,0,278,281,271,264,283,252],
[292,273,0,270,244,230,255,234],
[301,270,281,0,290,280,275,231],
[311,280,307,261,0,278,280,256],
[298,287,321,271,273,0,276,241],
[305,268,296,276,271,275,0,278],
[309,299,317,320,295,310,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,268,257,272,265,280,274],
[251,0,256,284,258,249,268,281],
[283,295,0,280,264,266,277,276],
[294,267,271,0,252,273,272,287],
[279,293,287,299,0,257,282,285],
[286,302,285,278,294,0,296,270],
[271,283,274,279,269,255,0,286],
[277,270,275,264,266,281,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,267,250,269,282,265,293],
[270,0,276,272,261,289,275,283],
[284,275,0,275,272,297,278,282],
[301,279,276,0,277,261,280,263],
[282,290,279,274,0,272,261,283],
[269,262,254,290,279,0,263,276],
[286,276,273,271,290,288,0,286],
[258,268,269,288,268,275,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,282,296,288,285,286],
[281,0,248,286,288,277,281,288],
[279,303,0,303,291,260,293,283],
[269,265,248,0,276,271,287,266],
[255,263,260,275,0,276,291,285],
[263,274,291,280,275,0,282,296],
[266,270,258,264,260,269,0,286],
[265,263,268,285,266,255,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,268,297,276,326,295,294],
[270,0,265,292,277,339,277,301],
[283,286,0,289,308,335,274,299],
[254,259,262,0,285,302,288,297],
[275,274,243,266,0,306,295,303],
[225,212,216,249,245,0,210,250],
[256,274,277,263,256,341,0,283],
[257,250,252,254,248,301,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,266,296,239,297,316],
[275,0,263,267,323,252,262,285],
[278,288,0,250,329,295,267,306],
[285,284,301,0,305,265,264,294],
[255,228,222,246,0,248,256,233],
[312,299,256,286,303,0,271,308],
[254,289,284,287,295,280,0,277],
[235,266,245,257,318,243,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,273,282,262,281,254,266],
[295,0,316,309,277,334,262,287],
[278,235,0,277,243,290,266,254],
[269,242,274,0,226,264,265,251],
[289,274,308,325,0,336,275,278],
[270,217,261,287,215,0,250,237],
[297,289,285,286,276,301,0,265],
[285,264,297,300,273,314,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,245,250,260,268,268],
[281,0,275,281,272,261,286,281],
[282,276,0,276,279,277,288,265],
[306,270,275,0,271,302,289,291],
[301,279,272,280,0,284,274,291],
[291,290,274,249,267,0,287,271],
[283,265,263,262,277,264,0,283],
[283,270,286,260,260,280,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,264,276,289,311,272,285],
[297,0,276,288,299,321,275,313],
[287,275,0,288,296,295,287,283],
[275,263,263,0,271,295,295,274],
[262,252,255,280,0,321,293,280],
[240,230,256,256,230,0,245,253],
[279,276,264,256,258,306,0,282],
[266,238,268,277,271,298,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,273,278,276,274,284,287],
[264,0,262,270,253,261,252,273],
[278,289,0,284,262,268,274,289],
[273,281,267,0,262,278,262,268],
[275,298,289,289,0,273,289,288],
[277,290,283,273,278,0,271,290],
[267,299,277,289,262,280,0,278],
[264,278,262,283,263,261,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,291,284,279,287,295,300],
[282,0,271,300,259,253,314,287],
[260,280,0,268,261,246,285,261],
[267,251,283,0,261,266,288,283],
[272,292,290,290,0,266,310,281],
[264,298,305,285,285,0,309,302],
[256,237,266,263,241,242,0,266],
[251,264,290,268,270,249,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,182,273,184,320,366,319],
[278,0,274,367,277,369,321,366],
[369,277,0,276,276,323,366,273],
[278,184,275,0,277,278,367,412],
[367,274,275,274,0,412,367,320],
[231,182,228,273,139,0,413,320],
[185,230,185,184,184,138,0,228],
[232,185,278,139,231,231,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,288,298,272,305,317,243],
[294,0,313,322,245,294,303,284],
[263,238,0,303,243,268,271,232],
[253,229,248,0,195,257,260,219],
[279,306,308,356,0,295,311,248],
[246,257,283,294,256,0,300,254],
[234,248,280,291,240,251,0,227],
[308,267,319,332,303,297,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,288,298,244,264,263],
[274,0,269,261,277,269,265,257],
[266,282,0,258,276,280,245,275],
[263,290,293,0,289,269,309,288],
[253,274,275,262,0,264,260,277],
[307,282,271,282,287,0,278,260],
[287,286,306,242,291,273,0,270],
[288,294,276,263,274,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,248,266,253,256,264,251],
[276,0,280,284,283,273,273,254],
[303,271,0,285,271,287,264,292],
[285,267,266,0,274,270,266,254],
[298,268,280,277,0,283,274,250],
[295,278,264,281,268,0,276,266],
[287,278,287,285,277,275,0,254],
[300,297,259,297,301,285,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,274,277,282,302,287,279],
[296,0,292,271,308,321,307,302],
[277,259,0,277,270,331,289,303],
[274,280,274,0,253,341,312,317],
[269,243,281,298,0,298,311,300],
[249,230,220,210,253,0,258,284],
[264,244,262,239,240,293,0,261],
[272,249,248,234,251,267,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,300,266,289,281,293,282],
[244,0,249,262,276,270,252,296],
[251,302,0,279,282,283,264,268],
[285,289,272,0,285,271,309,280],
[262,275,269,266,0,253,269,307],
[270,281,268,280,298,0,268,296],
[258,299,287,242,282,283,0,282],
[269,255,283,271,244,255,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,250,277,287,293,260,263],
[285,0,275,263,259,292,275,289],
[301,276,0,286,301,336,292,273],
[274,288,265,0,291,319,291,254],
[264,292,250,260,0,292,274,266],
[258,259,215,232,259,0,236,244],
[291,276,259,260,277,315,0,258],
[288,262,278,297,285,307,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,220,332,220,329,219,439],
[110,0,220,220,330,220,329,439],
[331,331,0,331,551,219,441,551],
[219,331,220,0,439,439,329,439],
[331,221,0,112,0,219,441,551],
[222,331,332,112,332,0,441,551],
[332,222,110,222,110,110,0,330],
[112,112,0,112,0,0,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,261,275,255,264,278],
[281,0,302,268,285,265,281,276],
[276,249,0,264,257,238,265,253],
[290,283,287,0,271,256,272,262],
[276,266,294,280,0,261,278,266],
[296,286,313,295,290,0,278,269],
[287,270,286,279,273,273,0,270],
[273,275,298,289,285,282,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,259,267,271,267,275,254],
[264,0,267,256,281,254,259,258],
[292,284,0,291,264,292,294,279],
[284,295,260,0,258,282,268,238],
[280,270,287,293,0,276,270,269],
[284,297,259,269,275,0,289,261],
[276,292,257,283,281,262,0,254],
[297,293,272,313,282,290,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,301,279,306,269,309],
[277,0,269,258,300,278,286,287],
[267,282,0,258,286,278,253,288],
[250,293,293,0,278,319,231,296],
[272,251,265,273,0,300,238,278],
[245,273,273,232,251,0,254,282],
[282,265,298,320,313,297,0,295],
[242,264,263,255,273,269,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,263,273,245,248,252,259],
[296,0,264,270,269,276,267,261],
[288,287,0,289,274,305,273,283],
[278,281,262,0,268,283,270,278],
[306,282,277,283,0,282,268,270],
[303,275,246,268,269,0,264,258],
[299,284,278,281,283,287,0,273],
[292,290,268,273,281,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,278,272,241,239,254,272],
[280,0,312,259,262,236,287,283],
[273,239,0,268,228,218,232,234],
[279,292,283,0,269,229,247,235],
[310,289,323,282,0,273,294,306],
[312,315,333,322,278,0,317,261],
[297,264,319,304,257,234,0,220],
[279,268,317,316,245,290,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,245,286,246,263,265,250],
[290,0,257,251,233,270,255,255],
[306,294,0,252,260,269,254,289],
[265,300,299,0,297,289,309,302],
[305,318,291,254,0,304,267,291],
[288,281,282,262,247,0,278,307],
[286,296,297,242,284,273,0,282],
[301,296,262,249,260,244,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,287,265,285,262,280,270],
[284,0,296,283,275,274,278,276],
[264,255,0,266,263,261,257,268],
[286,268,285,0,260,267,268,286],
[266,276,288,291,0,293,274,287],
[289,277,290,284,258,0,273,269],
[271,273,294,283,277,278,0,280],
[281,275,283,265,264,282,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,292,270,277,288,288,273],
[257,0,279,278,272,278,266,276],
[259,272,0,274,261,264,254,265],
[281,273,277,0,268,261,271,280],
[274,279,290,283,0,278,274,268],
[263,273,287,290,273,0,277,277],
[263,285,297,280,277,274,0,271],
[278,275,286,271,283,274,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,306,272,210,245,210,256],
[386,0,326,321,277,232,257,318],
[245,225,0,305,199,212,258,254],
[279,230,246,0,274,228,254,287],
[341,274,352,277,0,293,259,363],
[306,319,339,323,258,0,302,257],
[341,294,293,297,292,249,0,336],
[295,233,297,264,188,294,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,282,266,294,271,269,280],
[260,0,254,237,275,238,237,239],
[269,297,0,285,269,263,284,284],
[285,314,266,0,301,274,248,254],
[257,276,282,250,0,256,276,282],
[280,313,288,277,295,0,255,272],
[282,314,267,303,275,296,0,274],
[271,312,267,297,269,279,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,296,292,273,276,292,315],
[261,0,294,285,272,251,286,306],
[255,257,0,266,272,243,276,270],
[259,266,285,0,292,266,269,316],
[278,279,279,259,0,248,286,322],
[275,300,308,285,303,0,300,330],
[259,265,275,282,265,251,0,316],
[236,245,281,235,229,221,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,266,258,275,269,280,258],
[268,0,253,271,277,261,278,266],
[285,298,0,281,300,302,283,274],
[293,280,270,0,267,282,278,278],
[276,274,251,284,0,279,277,263],
[282,290,249,269,272,0,286,259],
[271,273,268,273,274,265,0,274],
[293,285,277,273,288,292,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,280,273,307,301,283,276],
[318,0,282,287,325,297,286,273],
[271,269,0,231,269,242,259,276],
[278,264,320,0,297,274,287,287],
[244,226,282,254,0,246,241,266],
[250,254,309,277,305,0,289,261],
[268,265,292,264,310,262,0,277],
[275,278,275,264,285,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,275,286,277,274,278,277],
[279,0,277,264,288,284,282,277],
[276,274,0,272,276,272,296,268],
[265,287,279,0,290,281,291,279],
[274,263,275,261,0,273,282,273],
[277,267,279,270,278,0,296,267],
[273,269,255,260,269,255,0,278],
[274,274,283,272,278,284,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,274,265,287,290,284,304],
[240,0,255,244,257,261,243,239],
[277,296,0,280,279,297,223,272],
[286,307,271,0,288,283,278,288],
[264,294,272,263,0,279,248,246],
[261,290,254,268,272,0,278,301],
[267,308,328,273,303,273,0,306],
[247,312,279,263,305,250,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,265,271,256,268,303,237],
[298,0,277,246,286,287,328,256],
[286,274,0,274,290,293,315,261],
[280,305,277,0,269,278,313,277],
[295,265,261,282,0,287,307,233],
[283,264,258,273,264,0,306,272],
[248,223,236,238,244,245,0,218],
[314,295,290,274,318,279,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,274,277,312,306,251,268],
[268,0,279,319,311,305,276,300],
[277,272,0,309,290,291,271,266],
[274,232,242,0,289,272,242,273],
[239,240,261,262,0,277,266,254],
[245,246,260,279,274,0,256,257],
[300,275,280,309,285,295,0,301],
[283,251,285,278,297,294,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,298,303,296,275,313,283],
[272,0,312,305,334,294,314,310],
[253,239,0,272,280,255,277,257],
[248,246,279,0,265,253,281,263],
[255,217,271,286,0,262,272,269],
[276,257,296,298,289,0,301,278],
[238,237,274,270,279,250,0,261],
[268,241,294,288,282,273,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,247,298,268,293,281,284],
[256,0,245,256,266,270,270,252],
[304,306,0,277,285,279,274,268],
[253,295,274,0,261,301,266,269],
[283,285,266,290,0,303,296,260],
[258,281,272,250,248,0,247,266],
[270,281,277,285,255,304,0,242],
[267,299,283,282,291,285,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,284,287,289,281,275,272],
[274,0,277,296,272,269,279,282],
[267,274,0,285,284,272,268,259],
[264,255,266,0,256,256,276,258],
[262,279,267,295,0,266,268,268],
[270,282,279,295,285,0,286,276],
[276,272,283,275,283,265,0,266],
[279,269,292,293,283,275,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,261,271,275,273,286,276],
[270,0,261,262,281,262,264,276],
[290,290,0,275,283,285,276,291],
[280,289,276,0,288,274,281,290],
[276,270,268,263,0,285,273,291],
[278,289,266,277,266,0,284,273],
[265,287,275,270,278,267,0,282],
[275,275,260,261,260,278,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,293,281,295,285,274,288],
[246,0,263,248,256,260,257,246],
[258,288,0,271,260,262,264,271],
[270,303,280,0,284,275,269,271],
[256,295,291,267,0,280,293,263],
[266,291,289,276,271,0,277,311],
[277,294,287,282,258,274,0,288],
[263,305,280,280,288,240,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,384,330,441,385,165,275],
[332,0,386,276,386,331,331,165],
[167,165,0,221,276,277,166,220],
[221,275,330,0,385,330,165,330],
[110,165,275,166,0,220,165,109],
[166,220,274,221,331,0,110,220],
[386,220,385,386,386,441,0,274],
[276,386,331,221,442,331,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,278,267,288,260,237,262],
[244,0,275,286,262,288,259,290],
[273,276,0,250,279,243,242,262],
[284,265,301,0,283,238,273,244],
[263,289,272,268,0,239,260,260],
[291,263,308,313,312,0,309,292],
[314,292,309,278,291,242,0,258],
[289,261,289,307,291,259,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,284,290,290,270,295,285],
[242,0,265,299,270,255,280,289],
[267,286,0,292,262,277,290,307],
[261,252,259,0,279,252,289,259],
[261,281,289,272,0,277,299,294],
[281,296,274,299,274,0,294,279],
[256,271,261,262,252,257,0,266],
[266,262,244,292,257,272,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,261,277,283,301,276,282],
[262,0,282,280,273,282,276,255],
[290,269,0,275,275,295,290,290],
[274,271,276,0,289,301,291,281],
[268,278,276,262,0,275,282,270],
[250,269,256,250,276,0,278,269],
[275,275,261,260,269,273,0,251],
[269,296,261,270,281,282,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,285,308,274,279,278,304],
[228,0,238,302,237,239,237,284],
[266,313,0,297,262,270,268,271],
[243,249,254,0,248,238,265,255],
[277,314,289,303,0,265,282,296],
[272,312,281,313,286,0,280,281],
[273,314,283,286,269,271,0,298],
[247,267,280,296,255,270,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,289,252,275,235,238,255],
[303,0,296,276,282,303,245,302],
[262,255,0,266,261,252,227,250],
[299,275,285,0,267,269,256,283],
[276,269,290,284,0,279,279,272],
[316,248,299,282,272,0,275,282],
[313,306,324,295,272,276,0,289],
[296,249,301,268,279,269,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,278,275,294,287,272],
[278,0,299,271,267,286,292,283],
[270,252,0,251,265,262,273,272],
[273,280,300,0,277,258,285,280],
[276,284,286,274,0,282,297,289],
[257,265,289,293,269,0,286,281],
[264,259,278,266,254,265,0,260],
[279,268,279,271,262,270,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,274,272,287,266,294,268],
[268,0,280,281,314,268,291,284],
[277,271,0,271,287,269,312,273],
[279,270,280,0,292,287,298,275],
[264,237,264,259,0,249,266,263],
[285,283,282,264,302,0,296,291],
[257,260,239,253,285,255,0,262],
[283,267,278,276,288,260,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,279,277,285,265,262,280],
[281,0,295,298,298,244,291,281],
[272,256,0,290,284,253,243,269],
[274,253,261,0,296,257,263,255],
[266,253,267,255,0,243,278,247],
[286,307,298,294,308,0,283,273],
[289,260,308,288,273,268,0,275],
[271,270,282,296,304,278,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,310,285,284,289,268,286],
[268,0,303,284,296,278,284,292],
[241,248,0,249,234,256,242,236],
[266,267,302,0,269,293,257,278],
[267,255,317,282,0,271,273,265],
[262,273,295,258,280,0,242,267],
[283,267,309,294,278,309,0,276],
[265,259,315,273,286,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,287,271,273,297,249,266],
[290,0,274,295,269,274,271,285],
[264,277,0,293,291,294,243,279],
[280,256,258,0,274,257,276,286],
[278,282,260,277,0,276,242,276],
[254,277,257,294,275,0,256,267],
[302,280,308,275,309,295,0,306],
[285,266,272,265,275,284,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,281,276,263,290,266,245],
[251,0,279,253,247,279,261,236],
[270,272,0,251,246,292,259,251],
[275,298,300,0,271,310,297,283],
[288,304,305,280,0,303,265,272],
[261,272,259,241,248,0,244,242],
[285,290,292,254,286,307,0,261],
[306,315,300,268,279,309,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,275,279,278,266,286,289],
[285,0,292,278,287,273,274,285],
[276,259,0,287,276,261,275,273],
[272,273,264,0,276,281,287,288],
[273,264,275,275,0,273,270,279],
[285,278,290,270,278,0,280,282],
[265,277,276,264,281,271,0,281],
[262,266,278,263,272,269,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,276,288,257,261,274,277],
[304,0,278,298,296,274,305,299],
[275,273,0,286,256,270,284,274],
[263,253,265,0,260,265,268,261],
[294,255,295,291,0,298,286,279],
[290,277,281,286,253,0,309,278],
[277,246,267,283,265,242,0,267],
[274,252,277,290,272,273,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,269,265,277,271,276,285],
[247,0,271,273,261,298,262,272],
[282,280,0,277,273,287,287,279],
[286,278,274,0,245,268,259,274],
[274,290,278,306,0,290,276,275],
[280,253,264,283,261,0,280,269],
[275,289,264,292,275,271,0,282],
[266,279,272,277,276,282,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,318,183,320,180,183,318],
[230,0,364,229,412,275,276,318],
[233,187,0,186,277,94,186,273],
[368,322,365,0,322,227,228,319],
[231,139,274,229,0,230,185,273],
[371,276,457,324,321,0,275,411],
[368,275,365,323,366,276,0,319],
[233,233,278,232,278,140,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,275,278,269,268,266,296],
[279,0,273,274,282,283,272,305],
[276,278,0,276,277,260,264,296],
[273,277,275,0,275,247,251,297],
[282,269,274,276,0,254,259,278],
[283,268,291,304,297,0,288,318],
[285,279,287,300,292,263,0,288],
[255,246,255,254,273,233,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,253,238,268,272,245,251],
[323,0,300,278,309,285,274,266],
[298,251,0,248,264,277,274,277],
[313,273,303,0,307,306,298,299],
[283,242,287,244,0,286,273,278],
[279,266,274,245,265,0,269,268],
[306,277,277,253,278,282,0,290],
[300,285,274,252,273,283,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,285,294,285,294,269,268],
[275,0,288,281,264,283,280,256],
[266,263,0,273,287,295,260,250],
[257,270,278,0,282,294,277,247],
[266,287,264,269,0,275,249,253],
[257,268,256,257,276,0,245,252],
[282,271,291,274,302,306,0,279],
[283,295,301,304,298,299,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,263,275,266,315,304,257],
[280,0,250,257,248,307,273,253],
[288,301,0,279,264,272,278,277],
[276,294,272,0,264,345,301,264],
[285,303,287,287,0,336,313,271],
[236,244,279,206,215,0,249,238],
[247,278,273,250,238,302,0,253],
[294,298,274,287,280,313,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,278,257,272,267,269,260],
[284,0,275,267,272,266,272,286],
[273,276,0,273,287,277,258,271],
[294,284,278,0,282,271,282,263],
[279,279,264,269,0,273,281,271],
[284,285,274,280,278,0,265,290],
[282,279,293,269,270,286,0,291],
[291,265,280,288,280,261,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,260,259,266,250,252,238],
[288,0,268,263,271,246,269,258],
[291,283,0,294,309,273,303,278],
[292,288,257,0,306,259,293,264],
[285,280,242,245,0,239,270,269],
[301,305,278,292,312,0,279,274],
[299,282,248,258,281,272,0,234],
[313,293,273,287,282,277,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,277,270,288,269,262],
[275,0,271,272,291,307,289,266],
[269,280,0,270,296,300,280,261],
[274,279,281,0,293,289,274,276],
[281,260,255,258,0,285,260,263],
[263,244,251,262,266,0,255,254],
[282,262,271,277,291,296,0,261],
[289,285,290,275,288,297,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,265,257,276,286,254,283],
[295,0,269,265,289,286,284,287],
[286,282,0,269,272,287,281,296],
[294,286,282,0,290,301,256,262],
[275,262,279,261,0,279,272,294],
[265,265,264,250,272,0,271,253],
[297,267,270,295,279,280,0,275],
[268,264,255,289,257,298,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,287,302,284,258,300,277],
[262,0,268,284,265,265,294,248],
[264,283,0,295,284,274,271,237],
[249,267,256,0,265,251,258,251],
[267,286,267,286,0,277,291,276],
[293,286,277,300,274,0,311,258],
[251,257,280,293,260,240,0,252],
[274,303,314,300,275,293,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,241,282,263,280,238,286],
[287,0,273,280,278,294,260,288],
[310,278,0,293,273,311,288,296],
[269,271,258,0,268,283,261,271],
[288,273,278,283,0,307,269,285],
[271,257,240,268,244,0,243,276],
[313,291,263,290,282,308,0,297],
[265,263,255,280,266,275,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,283,265,231,282,296,270],
[285,0,283,274,267,275,291,288],
[268,268,0,246,259,257,276,297],
[286,277,305,0,279,275,298,305],
[320,284,292,272,0,281,281,306],
[269,276,294,276,270,0,301,300],
[255,260,275,253,270,250,0,282],
[281,263,254,246,245,251,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,267,274,265,272,296,273],
[257,0,275,249,273,238,272,248],
[284,276,0,239,251,247,267,259],
[277,302,312,0,269,270,284,291],
[286,278,300,282,0,292,311,273],
[279,313,304,281,259,0,309,267],
[255,279,284,267,240,242,0,250],
[278,303,292,260,278,284,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,291,314,300,224,280],
[260,0,263,216,244,245,231,253],
[272,288,0,295,295,323,283,300],
[260,335,256,0,307,336,266,247],
[237,307,256,244,0,245,253,254],
[251,306,228,215,306,0,239,288],
[327,320,268,285,298,312,0,303],
[271,298,251,304,297,263,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,279,270,239,268,240,313],
[277,0,236,276,326,282,299,312],
[272,315,0,315,259,259,338,300],
[281,275,236,0,216,268,281,312],
[312,225,292,335,0,268,352,324],
[283,269,292,283,283,0,323,312],
[311,252,213,270,199,228,0,304],
[238,239,251,239,227,239,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,355,261,287,357,333,237,358],
[196,0,265,194,288,314,242,264],
[290,286,0,340,265,335,289,289],
[264,357,211,0,237,356,310,263],
[194,263,286,314,0,310,219,263],
[218,237,216,195,241,0,240,216],
[314,309,262,241,332,311,0,263],
[193,287,262,288,288,335,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,286,291,292,277,272],
[267,0,284,282,282,294,284,269],
[268,267,0,268,275,281,257,279],
[265,269,283,0,301,291,277,291],
[260,269,276,250,0,267,247,246],
[259,257,270,260,284,0,256,268],
[274,267,294,274,304,295,0,287],
[279,282,272,260,305,283,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,276,275,294,279,276,274],
[262,0,258,273,266,251,273,267],
[275,293,0,281,290,287,289,290],
[276,278,270,0,277,272,273,286],
[257,285,261,274,0,259,264,275],
[272,300,264,279,292,0,300,280],
[275,278,262,278,287,251,0,281],
[277,284,261,265,276,271,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,281,275,281,306,311,271],
[249,0,276,269,313,286,301,278],
[270,275,0,275,301,257,322,293],
[276,282,276,0,295,280,296,258],
[270,238,250,256,0,273,302,284],
[245,265,294,271,278,0,282,276],
[240,250,229,255,249,269,0,246],
[280,273,258,293,267,275,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,300,283,289,297,305,271],
[270,0,278,278,262,294,276,279],
[251,273,0,267,261,282,281,265],
[268,273,284,0,268,289,299,276],
[262,289,290,283,0,284,295,281],
[254,257,269,262,267,0,283,256],
[246,275,270,252,256,268,0,256],
[280,272,286,275,270,295,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,233,303,292,309,308,228],
[272,0,239,274,265,286,300,260],
[318,312,0,338,322,315,301,256],
[248,277,213,0,263,242,299,223],
[259,286,229,288,0,293,308,272],
[242,265,236,309,258,0,297,303],
[243,251,250,252,243,254,0,240],
[323,291,295,328,279,248,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,256,291,284,243,284,244],
[280,0,256,254,335,278,287,264],
[295,295,0,275,291,285,313,277],
[260,297,276,0,323,292,323,300],
[267,216,260,228,0,214,268,269],
[308,273,266,259,337,0,307,303],
[267,264,238,228,283,244,0,286],
[307,287,274,251,282,248,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,315,318,239,318,276,276],
[351,0,310,233,272,393,273,392],
[236,241,0,197,276,318,315,237],
[233,318,354,0,277,354,277,316],
[312,279,275,274,0,276,276,315],
[233,158,233,197,275,0,237,277],
[275,278,236,274,275,314,0,275],
[275,159,314,235,236,274,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,291,269,293,285,278,285],
[282,0,291,262,275,263,285,297],
[260,260,0,263,262,249,253,278],
[282,289,288,0,287,268,278,278],
[258,276,289,264,0,268,266,279],
[266,288,302,283,283,0,290,299],
[273,266,298,273,285,261,0,266],
[266,254,273,273,272,252,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,289,287,289,258,297],
[285,0,260,251,374,299,308,309],
[281,291,0,264,311,298,283,304],
[262,300,287,0,307,266,250,286],
[264,177,240,244,0,261,194,274],
[262,252,253,285,290,0,251,244],
[293,243,268,301,357,300,0,302],
[254,242,247,265,277,307,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,296,258,295,256,220,253],
[261,0,373,258,445,184,223,408],
[255,178,0,257,255,145,181,363],
[293,293,294,0,329,257,329,329],
[256,106,296,222,0,143,219,218],
[295,367,406,294,408,0,261,367],
[331,328,370,222,332,290,0,366],
[298,143,188,222,333,184,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,268,289,298,271,274,258],
[258,0,268,278,285,260,266,254],
[283,283,0,273,243,250,277,289],
[262,273,278,0,261,239,251,251],
[253,266,308,290,0,243,287,253],
[280,291,301,312,308,0,295,273],
[277,285,274,300,264,256,0,236],
[293,297,262,300,298,278,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,294,256,279,288,287,275],
[244,0,253,249,260,276,273,253],
[257,298,0,281,266,292,275,294],
[295,302,270,0,275,304,296,284],
[272,291,285,276,0,288,294,273],
[263,275,259,247,263,0,262,262],
[264,278,276,255,257,289,0,267],
[276,298,257,267,278,289,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,288,289,273,260,273,273],
[252,0,275,268,272,259,259,268],
[263,276,0,276,268,275,252,268],
[262,283,275,0,258,250,282,276],
[278,279,283,293,0,268,260,280],
[291,292,276,301,283,0,283,270],
[278,292,299,269,291,268,0,276],
[278,283,283,275,271,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,213,220,243,216,180,222],
[350,0,293,311,273,325,255,315],
[338,258,0,282,287,306,280,308],
[331,240,269,0,269,276,282,312],
[308,278,264,282,0,271,276,286],
[335,226,245,275,280,0,302,335],
[371,296,271,269,275,249,0,308],
[329,236,243,239,265,216,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,295,288,272,286,304,271],
[257,0,282,261,265,257,275,269],
[256,269,0,266,268,267,269,285],
[263,290,285,0,262,265,294,295],
[279,286,283,289,0,274,302,282],
[265,294,284,286,277,0,283,298],
[247,276,282,257,249,268,0,264],
[280,282,266,256,269,253,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,234,249,257,267,262,266],
[304,0,274,277,287,277,308,297],
[317,277,0,271,288,283,315,291],
[302,274,280,0,290,308,307,298],
[294,264,263,261,0,268,297,254],
[284,274,268,243,283,0,279,286],
[289,243,236,244,254,272,0,274],
[285,254,260,253,297,265,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,311,295,294,285,305,270],
[225,0,289,239,247,234,250,254],
[240,262,0,268,269,257,270,255],
[256,312,283,0,267,260,308,277],
[257,304,282,284,0,261,288,260],
[266,317,294,291,290,0,278,255],
[246,301,281,243,263,273,0,264],
[281,297,296,274,291,296,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,300,287,273,308,305,291],
[272,0,284,312,302,296,283,262],
[251,267,0,322,291,299,323,272],
[264,239,229,0,252,246,269,249],
[278,249,260,299,0,275,299,296],
[243,255,252,305,276,0,255,257],
[246,268,228,282,252,296,0,265],
[260,289,279,302,255,294,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,343,303,294,282,322,230],
[270,0,257,286,260,304,318,243],
[208,294,0,253,239,261,309,239],
[248,265,298,0,233,263,314,290],
[257,291,312,318,0,311,337,248],
[269,247,290,288,240,0,294,278],
[229,233,242,237,214,257,0,264],
[321,308,312,261,303,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,278,329,273,325,263,270],
[255,0,260,303,276,294,276,254],
[273,291,0,294,270,315,256,269],
[222,248,257,0,257,276,251,222],
[278,275,281,294,0,325,287,257],
[226,257,236,275,226,0,233,233],
[288,275,295,300,264,318,0,276],
[281,297,282,329,294,318,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,183,183,185,183,183,183],
[368,0,366,366,368,551,368,183],
[368,185,0,183,185,551,185,368],
[368,185,368,0,185,368,185,185],
[366,183,366,366,0,366,183,183],
[368,0,0,183,185,0,185,183],
[368,183,366,366,368,366,0,183],
[368,368,183,366,368,368,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,289,284,266,237,276,292],
[255,0,266,261,263,286,268,292],
[262,285,0,241,255,271,293,284],
[267,290,310,0,268,297,307,311],
[285,288,296,283,0,260,273,310],
[314,265,280,254,291,0,258,295],
[275,283,258,244,278,293,0,278],
[259,259,267,240,241,256,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,459,185,368,367,367,460],
[275,0,367,276,275,91,91,275],
[92,184,0,93,275,92,0,184],
[366,275,458,0,367,366,366,275],
[183,276,276,184,0,183,91,184],
[184,460,459,185,368,0,0,369],
[184,460,551,185,460,551,0,369],
[91,276,367,276,367,182,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,266,265,241,293,314],
[281,0,268,248,276,276,323,298],
[286,283,0,261,286,266,287,308],
[285,303,290,0,268,294,306,305],
[286,275,265,283,0,252,300,283],
[310,275,285,257,299,0,289,302],
[258,228,264,245,251,262,0,274],
[237,253,243,246,268,249,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,266,261,284,284,270,283],
[287,0,265,250,253,261,274,267],
[285,286,0,289,271,282,284,276],
[290,301,262,0,281,302,272,288],
[267,298,280,270,0,284,273,275],
[267,290,269,249,267,0,262,288],
[281,277,267,279,278,289,0,295],
[268,284,275,263,276,263,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,263,261,272,263,273],
[289,0,267,270,278,270,278,268],
[289,284,0,267,280,280,269,279],
[288,281,284,0,274,263,271,270],
[290,273,271,277,0,265,270,272],
[279,281,271,288,286,0,262,270],
[288,273,282,280,281,289,0,274],
[278,283,272,281,279,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,299,293,280,269,282,289],
[285,0,275,267,273,276,265,268],
[252,276,0,274,283,255,269,264],
[258,284,277,0,299,269,257,267],
[271,278,268,252,0,280,260,255],
[282,275,296,282,271,0,272,261],
[269,286,282,294,291,279,0,278],
[262,283,287,284,296,290,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,288,221,223,307,239,260],
[315,0,344,328,312,319,249,299],
[263,207,0,298,236,286,250,271],
[330,223,253,0,236,250,260,235],
[328,239,315,315,0,332,316,248],
[244,232,265,301,219,0,234,204],
[312,302,301,291,235,317,0,256],
[291,252,280,316,303,347,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,277,278,276,272,269,280],
[255,0,264,268,275,269,256,270],
[274,287,0,282,278,269,276,262],
[273,283,269,0,263,285,268,273],
[275,276,273,288,0,265,255,257],
[279,282,282,266,286,0,269,271],
[282,295,275,283,296,282,0,271],
[271,281,289,278,294,280,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,260,282,291,281,274,293],
[268,0,263,278,280,289,294,271],
[291,288,0,281,278,310,284,274],
[269,273,270,0,273,276,285,257],
[260,271,273,278,0,275,281,263],
[270,262,241,275,276,0,279,240],
[277,257,267,266,270,272,0,259],
[258,280,277,294,288,311,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,287,267,268,262,271,277],
[282,0,295,273,277,263,279,280],
[264,256,0,252,260,245,263,267],
[284,278,299,0,270,274,282,272],
[283,274,291,281,0,281,287,282],
[289,288,306,277,270,0,275,284],
[280,272,288,269,264,276,0,272],
[274,271,284,279,269,267,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,249,280,254,265,248,260],
[287,0,258,278,268,295,277,247],
[302,293,0,298,269,293,278,268],
[271,273,253,0,264,265,254,241],
[297,283,282,287,0,286,275,276],
[286,256,258,286,265,0,236,267],
[303,274,273,297,276,315,0,272],
[291,304,283,310,275,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,292,284,288,287,269,263],
[249,0,289,274,282,273,251,269],
[259,262,0,284,275,282,268,264],
[267,277,267,0,271,291,253,284],
[263,269,276,280,0,283,265,258],
[264,278,269,260,268,0,255,276],
[282,300,283,298,286,296,0,270],
[288,282,287,267,293,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,267,273,276,276,272,260],
[302,0,284,279,277,292,276,266],
[284,267,0,266,280,279,276,291],
[278,272,285,0,264,265,280,267],
[275,274,271,287,0,266,291,281],
[275,259,272,286,285,0,284,275],
[279,275,275,271,260,267,0,270],
[291,285,260,284,270,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,270,279,290,287,272,283],
[274,0,278,261,274,276,272,275],
[281,273,0,289,289,274,263,282],
[272,290,262,0,288,288,283,288],
[261,277,262,263,0,280,240,271],
[264,275,277,263,271,0,275,281],
[279,279,288,268,311,276,0,279],
[268,276,269,263,280,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,282,273,309,280,285,307],
[265,0,285,256,295,267,264,276],
[269,266,0,275,285,282,275,285],
[278,295,276,0,308,286,295,275],
[242,256,266,243,0,234,258,259],
[271,284,269,265,317,0,265,285],
[266,287,276,256,293,286,0,278],
[244,275,266,276,292,266,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,293,254,295,289,253,299],
[269,0,335,289,334,292,273,368],
[258,216,0,196,298,253,223,276],
[297,262,355,0,281,334,283,359],
[256,217,253,270,0,262,225,327],
[262,259,298,217,289,0,252,318],
[298,278,328,268,326,299,0,305],
[252,183,275,192,224,233,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,345,254,322,275,300,321],
[235,0,276,302,210,280,299,299],
[206,275,0,211,228,229,276,275],
[297,249,340,0,343,250,228,227],
[229,341,323,208,0,207,252,322],
[276,271,322,301,344,0,344,299],
[251,252,275,323,299,207,0,342],
[230,252,276,324,229,252,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,279,274,279,272,283,269],
[253,0,252,262,254,272,258,260],
[272,299,0,280,286,272,272,277],
[277,289,271,0,265,265,263,265],
[272,297,265,286,0,287,276,272],
[279,279,279,286,264,0,266,264],
[268,293,279,288,275,285,0,269],
[282,291,274,286,279,287,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,254,255,254,286,275,258],
[255,0,247,239,246,266,261,243],
[297,304,0,293,292,294,320,275],
[296,312,258,0,274,280,308,290],
[297,305,259,277,0,284,287,282],
[265,285,257,271,267,0,276,259],
[276,290,231,243,264,275,0,261],
[293,308,276,261,269,292,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,270,290,256,262,289,270],
[268,0,254,280,257,280,282,285],
[281,297,0,290,262,266,278,294],
[261,271,261,0,275,268,275,286],
[295,294,289,276,0,294,264,311],
[289,271,285,283,257,0,274,299],
[262,269,273,276,287,277,0,285],
[281,266,257,265,240,252,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,299,285,268,296,300,306],
[290,0,324,321,282,325,271,325],
[252,227,0,271,266,268,246,270],
[266,230,280,0,249,254,232,265],
[283,269,285,302,0,308,269,312],
[255,226,283,297,243,0,250,294],
[251,280,305,319,282,301,0,304],
[245,226,281,286,239,257,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,294,292,290,283,291,253],
[285,0,283,309,297,275,277,283],
[257,268,0,283,279,285,283,255],
[259,242,268,0,272,267,265,253],
[261,254,272,279,0,259,270,263],
[268,276,266,284,292,0,274,256],
[260,274,268,286,281,277,0,248],
[298,268,296,298,288,295,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,249,262,293,264,273,277],
[281,0,264,289,280,269,280,288],
[302,287,0,303,311,273,315,307],
[289,262,248,0,284,257,299,290],
[258,271,240,267,0,280,280,265],
[287,282,278,294,271,0,298,285],
[278,271,236,252,271,253,0,269],
[274,263,244,261,286,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,273,289,282,264,281],
[284,0,276,290,307,274,277,297],
[285,275,0,275,306,274,276,301],
[278,261,276,0,295,283,266,286],
[262,244,245,256,0,231,245,251],
[269,277,277,268,320,0,294,303],
[287,274,275,285,306,257,0,301],
[270,254,250,265,300,248,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,283,266,285,329,302,308],
[239,0,285,239,257,261,249,273],
[268,266,0,267,264,292,277,272],
[285,312,284,0,292,300,274,296],
[266,294,287,259,0,308,269,280],
[222,290,259,251,243,0,258,265],
[249,302,274,277,282,293,0,297],
[243,278,279,255,271,286,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,305,281,303,289,274,267],
[259,0,274,265,248,244,252,250],
[246,277,0,267,276,245,254,235],
[270,286,284,0,261,281,271,261],
[248,303,275,290,0,285,277,275],
[262,307,306,270,266,0,273,290],
[277,299,297,280,274,278,0,264],
[284,301,316,290,276,261,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,292,319,305,315,305,298],
[279,0,216,258,244,253,282,257],
[259,335,0,286,282,316,298,301],
[232,293,265,0,233,251,311,286],
[246,307,269,318,0,216,294,279],
[236,298,235,300,335,0,282,253],
[246,269,253,240,257,269,0,299],
[253,294,250,265,272,298,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,271,277,279,281,279],
[263,0,278,274,273,282,286,280],
[276,273,0,270,282,267,281,276],
[280,277,281,0,281,269,289,288],
[274,278,269,270,0,276,272,263],
[272,269,284,282,275,0,270,270],
[270,265,270,262,279,281,0,272],
[272,271,275,263,288,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,298,306,270,262,272],
[276,0,271,265,287,278,285,264],
[279,280,0,285,315,282,293,267],
[253,286,266,0,316,269,301,247],
[245,264,236,235,0,262,233,214],
[281,273,269,282,289,0,259,284],
[289,266,258,250,318,292,0,241],
[279,287,284,304,337,267,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,308,331,345,303,244,306],
[234,0,300,290,254,268,263,272],
[243,251,0,313,208,296,216,278],
[220,261,238,0,266,319,245,257],
[206,297,343,285,0,300,277,321],
[248,283,255,232,251,0,273,292],
[307,288,335,306,274,278,0,286],
[245,279,273,294,230,259,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,278,289,283,280,278,261],
[292,0,280,295,299,291,294,271],
[273,271,0,297,309,305,294,280],
[262,256,254,0,274,279,251,247],
[268,252,242,277,0,263,263,263],
[271,260,246,272,288,0,277,256],
[273,257,257,300,288,274,0,264],
[290,280,271,304,288,295,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,199,235,270,277,246,290],
[322,0,293,270,283,332,294,355],
[352,258,0,313,278,289,251,368],
[316,281,238,0,245,274,263,308],
[281,268,273,306,0,286,250,298],
[274,219,262,277,265,0,231,293],
[305,257,300,288,301,320,0,348],
[261,196,183,243,253,258,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,261,269,293,279,271,280],
[283,0,280,272,298,274,239,261],
[290,271,0,294,303,297,277,298],
[282,279,257,0,292,305,273,302],
[258,253,248,259,0,280,252,263],
[272,277,254,246,271,0,243,279],
[280,312,274,278,299,308,0,289],
[271,290,253,249,288,272,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,283,305,278,268,285,285],
[264,0,275,271,252,265,264,275],
[268,276,0,292,278,283,291,280],
[246,280,259,0,261,257,278,275],
[273,299,273,290,0,282,295,301],
[283,286,268,294,269,0,283,286],
[266,287,260,273,256,268,0,280],
[266,276,271,276,250,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,259,267,228,227,252,255],
[317,0,293,299,298,259,272,267],
[292,258,0,264,292,265,287,308],
[284,252,287,0,258,235,233,260],
[323,253,259,293,0,281,267,271],
[324,292,286,316,270,0,283,296],
[299,279,264,318,284,268,0,296],
[296,284,243,291,280,255,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,265,286,277,283,279,258],
[259,0,297,282,297,283,249,283],
[286,254,0,279,280,258,283,266],
[265,269,272,0,261,267,256,268],
[274,254,271,290,0,263,268,279],
[268,268,293,284,288,0,255,283],
[272,302,268,295,283,296,0,276],
[293,268,285,283,272,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,278,266,255,248,293],
[279,0,260,285,265,271,279,274],
[277,291,0,273,288,284,281,290],
[273,266,278,0,260,261,268,292],
[285,286,263,291,0,260,260,282],
[296,280,267,290,291,0,286,306],
[303,272,270,283,291,265,0,297],
[258,277,261,259,269,245,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,317,299,281,280,275],
[273,0,279,319,293,297,290,274],
[266,272,0,310,299,281,284,298],
[234,232,241,0,234,248,244,242],
[252,258,252,317,0,261,254,260],
[270,254,270,303,290,0,267,282],
[271,261,267,307,297,284,0,278],
[276,277,253,309,291,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,262,274,279,274,274],
[276,0,279,286,280,268,288,275],
[278,272,0,263,273,275,297,288],
[289,265,288,0,276,272,279,271],
[277,271,278,275,0,264,274,280],
[272,283,276,279,287,0,280,286],
[277,263,254,272,277,271,0,272],
[277,276,263,280,271,265,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,273,282,293,275,271],
[278,0,279,247,286,256,257,264],
[271,272,0,280,283,274,265,271],
[278,304,271,0,281,276,290,271],
[269,265,268,270,0,265,271,265],
[258,295,277,275,286,0,266,272],
[276,294,286,261,280,285,0,276],
[280,287,280,280,286,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,266,270,268,289,264],
[283,0,275,288,289,284,278,260],
[283,276,0,272,270,257,273,269],
[285,263,279,0,263,259,266,258],
[281,262,281,288,0,270,295,269],
[283,267,294,292,281,0,285,280],
[262,273,278,285,256,266,0,269],
[287,291,282,293,282,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,277,310,306,269,276,284],
[282,0,250,310,284,261,256,263],
[274,301,0,326,331,307,269,315],
[241,241,225,0,276,257,265,268],
[245,267,220,275,0,221,253,278],
[282,290,244,294,330,0,280,276],
[275,295,282,286,298,271,0,284],
[267,288,236,283,273,275,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,263,276,269,274,279,274],
[297,0,302,294,276,281,307,274],
[288,249,0,280,266,278,303,272],
[275,257,271,0,281,256,293,284],
[282,275,285,270,0,270,306,287],
[277,270,273,295,281,0,271,288],
[272,244,248,258,245,280,0,275],
[277,277,279,267,264,263,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,261,282,268,258,248,264],
[307,0,275,306,292,271,277,291],
[290,276,0,326,316,294,271,298],
[269,245,225,0,278,270,237,262],
[283,259,235,273,0,286,244,270],
[293,280,257,281,265,0,256,296],
[303,274,280,314,307,295,0,286],
[287,260,253,289,281,255,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,275,279,269,279,280,259],
[284,0,265,279,264,281,276,284],
[276,286,0,277,277,280,269,262],
[272,272,274,0,261,273,264,250],
[282,287,274,290,0,286,274,278],
[272,270,271,278,265,0,275,259],
[271,275,282,287,277,276,0,269],
[292,267,289,301,273,292,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,260,277,273,260,256,241],
[290,0,270,287,290,280,280,264],
[291,281,0,274,294,269,292,312],
[274,264,277,0,275,288,269,271],
[278,261,257,276,0,272,259,267],
[291,271,282,263,279,0,273,285],
[295,271,259,282,292,278,0,282],
[310,287,239,280,284,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,251,289,280,251,230,280],
[269,0,237,276,277,271,244,267],
[300,314,0,259,265,283,236,308],
[262,275,292,0,289,265,284,252],
[271,274,286,262,0,266,238,294],
[300,280,268,286,285,0,272,284],
[321,307,315,267,313,279,0,298],
[271,284,243,299,257,267,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,236,431,200,278,237,395],
[275,0,235,275,236,278,394,275],
[315,316,0,353,238,159,275,314],
[120,276,198,0,161,240,236,238],
[351,315,313,390,0,354,353,273],
[273,273,392,311,197,0,273,272],
[314,157,276,315,198,278,0,276],
[156,276,237,313,278,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,230,248,250,255,264,246],
[321,0,248,301,271,281,286,259],
[321,303,0,292,302,310,319,271],
[303,250,259,0,277,280,302,282],
[301,280,249,274,0,286,287,255],
[296,270,241,271,265,0,286,274],
[287,265,232,249,264,265,0,253],
[305,292,280,269,296,277,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,277,283,272,303,266,269],
[279,0,290,278,269,289,279,301],
[274,261,0,277,275,281,281,272],
[268,273,274,0,277,285,274,273],
[279,282,276,274,0,304,263,292],
[248,262,270,266,247,0,260,265],
[285,272,270,277,288,291,0,286],
[282,250,279,278,259,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,295,297,269,275,212,317],
[273,0,291,361,232,318,275,275],
[256,260,0,260,235,240,239,281],
[254,190,291,0,232,259,214,257],
[282,319,316,319,0,298,276,256],
[276,233,311,292,253,0,254,274],
[339,276,312,337,275,297,0,314],
[234,276,270,294,295,277,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,308,281,207,210,308,257],
[326,0,395,258,275,257,363,294],
[243,156,0,229,209,245,331,210],
[270,293,322,0,291,361,358,271],
[344,276,342,260,0,296,331,292],
[341,294,306,190,255,0,361,293],
[243,188,220,193,220,190,0,206],
[294,257,341,280,259,258,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,264,281,252,298,281,285],
[284,0,289,304,272,299,302,265],
[287,262,0,286,272,287,302,260],
[270,247,265,0,241,262,271,268],
[299,279,279,310,0,275,314,298],
[253,252,264,289,276,0,283,287],
[270,249,249,280,237,268,0,290],
[266,286,291,283,253,264,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,329,110,222,109,219,0],
[332,0,332,332,112,222,222,332],
[222,219,0,220,222,221,222,112],
[441,219,331,0,331,221,331,222],
[329,439,329,220,0,329,439,220],
[442,329,330,330,222,0,330,330],
[332,329,329,220,112,221,0,332],
[551,219,439,329,331,221,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,296,282,268,261,269,277],
[297,0,286,284,292,297,294,259],
[255,265,0,268,278,274,274,260],
[269,267,283,0,275,272,293,260],
[283,259,273,276,0,276,278,268],
[290,254,277,279,275,0,292,262],
[282,257,277,258,273,259,0,266],
[274,292,291,291,283,289,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,285,266,284,282,281,304],
[267,0,284,283,292,283,286,294],
[266,267,0,268,264,263,283,284],
[285,268,283,0,262,256,276,278],
[267,259,287,289,0,260,275,283],
[269,268,288,295,291,0,276,290],
[270,265,268,275,276,275,0,285],
[247,257,267,273,268,261,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,343,298,263,337,309,339,301],
[208,0,215,268,278,286,248,269],
[253,336,0,276,327,321,279,248],
[288,283,275,0,303,276,295,259],
[214,273,224,248,0,246,255,257],
[242,265,230,275,305,0,193,276],
[212,303,272,256,296,358,0,327],
[250,282,303,292,294,275,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,295,256,272,276,276,273],
[292,0,288,290,270,277,264,261],
[256,263,0,277,252,272,284,276],
[295,261,274,0,262,267,291,290],
[279,281,299,289,0,265,293,280],
[275,274,279,284,286,0,280,279],
[275,287,267,260,258,271,0,271],
[278,290,275,261,271,272,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,275,289,264,284,269,268],
[288,0,293,287,297,303,278,269],
[276,258,0,289,282,276,283,261],
[262,264,262,0,265,249,259,256],
[287,254,269,286,0,276,274,280],
[267,248,275,302,275,0,268,250],
[282,273,268,292,277,283,0,251],
[283,282,290,295,271,301,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,257,331,338,302,264,318],
[252,0,251,306,266,251,279,248],
[294,300,0,303,261,302,274,251],
[220,245,248,0,255,240,272,297],
[213,285,290,296,0,298,274,298],
[249,300,249,311,253,0,286,287],
[287,272,277,279,277,265,0,302],
[233,303,300,254,253,264,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,266,274,270,277,266,297],
[300,0,272,284,280,295,298,292],
[285,279,0,279,266,271,280,274],
[277,267,272,0,258,276,284,284],
[281,271,285,293,0,284,286,307],
[274,256,280,275,267,0,273,276],
[285,253,271,267,265,278,0,284],
[254,259,277,267,244,275,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,280,281,255,274,285,290],
[248,0,294,281,260,272,256,272],
[271,257,0,250,239,237,274,213],
[270,270,301,0,257,298,232,229],
[296,291,312,294,0,300,261,252],
[277,279,314,253,251,0,307,234],
[266,295,277,319,290,244,0,283],
[261,279,338,322,299,317,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,306,270,238,281,305,241],
[279,0,277,274,245,257,337,285],
[245,274,0,280,255,253,280,259],
[281,277,271,0,265,275,324,278],
[313,306,296,286,0,303,295,264],
[270,294,298,276,248,0,278,252],
[246,214,271,227,256,273,0,218],
[310,266,292,273,287,299,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,282,260,256,268,259],
[263,0,290,295,303,275,289,289],
[271,261,0,251,227,254,281,246],
[269,256,300,0,243,243,292,281],
[291,248,324,308,0,290,300,282],
[295,276,297,308,261,0,270,281],
[283,262,270,259,251,281,0,295],
[292,262,305,270,269,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,275,284,271,268,280,291],
[264,0,275,273,277,285,274,277],
[276,276,0,288,262,268,267,274],
[267,278,263,0,274,263,285,274],
[280,274,289,277,0,276,272,271],
[283,266,283,288,275,0,277,284],
[271,277,284,266,279,274,0,277],
[260,274,277,277,280,267,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,268,253,263,284,286,245],
[259,0,255,267,271,293,271,256],
[283,296,0,267,279,284,280,272],
[298,284,284,0,272,287,280,278],
[288,280,272,279,0,284,305,269],
[267,258,267,264,267,0,268,243],
[265,280,271,271,246,283,0,270],
[306,295,279,273,282,308,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,260,283,298,266,271,269],
[276,0,285,284,278,259,280,279],
[291,266,0,268,277,252,269,289],
[268,267,283,0,288,248,295,291],
[253,273,274,263,0,272,264,288],
[285,292,299,303,279,0,270,295],
[280,271,282,256,287,281,0,299],
[282,272,262,260,263,256,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,285,285,280,277,258,288],
[243,0,243,269,264,245,245,242],
[266,308,0,249,271,274,264,267],
[266,282,302,0,276,267,289,289],
[271,287,280,275,0,263,269,282],
[274,306,277,284,288,0,239,280],
[293,306,287,262,282,312,0,292],
[263,309,284,262,269,271,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,241,244,273,271,262,280],
[296,0,266,274,302,290,268,272],
[310,285,0,264,300,294,296,292],
[307,277,287,0,297,285,269,275],
[278,249,251,254,0,285,268,272],
[280,261,257,266,266,0,255,261],
[289,283,255,282,283,296,0,292],
[271,279,259,276,279,290,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,266,255,275,268,276,295],
[254,0,272,239,253,268,270,270],
[285,279,0,259,283,290,263,270],
[296,312,292,0,278,270,294,268],
[276,298,268,273,0,264,298,280],
[283,283,261,281,287,0,294,295],
[275,281,288,257,253,257,0,269],
[256,281,281,283,271,256,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,286,285,275,272,293,290],
[280,0,276,276,272,273,278,259],
[265,275,0,275,276,265,262,283],
[266,275,276,0,264,294,278,278],
[276,279,275,287,0,288,305,283],
[279,278,286,257,263,0,278,258],
[258,273,289,273,246,273,0,280],
[261,292,268,273,268,293,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,272,275,283,293,286,271],
[256,0,262,259,255,259,264,269],
[279,289,0,260,290,274,257,281],
[276,292,291,0,284,272,282,278],
[268,296,261,267,0,269,264,262],
[258,292,277,279,282,0,258,270],
[265,287,294,269,287,293,0,275],
[280,282,270,273,289,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,281,311,307,321,305,312],
[277,0,269,285,284,307,294,302],
[270,282,0,319,284,323,312,299],
[240,266,232,0,278,322,260,264],
[244,267,267,273,0,283,301,274],
[230,244,228,229,268,0,258,252],
[246,257,239,291,250,293,0,267],
[239,249,252,287,277,299,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,306,273,280,303,294,284],
[262,0,281,283,245,272,294,265],
[245,270,0,272,243,278,275,285],
[278,268,279,0,275,292,276,267],
[271,306,308,276,0,287,293,283],
[248,279,273,259,264,0,291,268],
[257,257,276,275,258,260,0,271],
[267,286,266,284,268,283,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,255,257,276,268,279,284],
[286,0,284,292,270,254,271,293],
[296,267,0,297,280,261,294,281],
[294,259,254,0,281,273,280,290],
[275,281,271,270,0,272,269,290],
[283,297,290,278,279,0,259,287],
[272,280,257,271,282,292,0,307],
[267,258,270,261,261,264,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,299,270,265,274,245,271],
[271,0,279,275,264,275,256,257],
[252,272,0,243,253,241,233,230],
[281,276,308,0,269,281,288,281],
[286,287,298,282,0,273,262,256],
[277,276,310,270,278,0,264,263],
[306,295,318,263,289,287,0,255],
[280,294,321,270,295,288,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,275,250,305,281,299],
[282,0,289,278,274,298,258,319],
[277,262,0,263,266,303,270,280],
[276,273,288,0,262,305,252,286],
[301,277,285,289,0,302,271,284],
[246,253,248,246,249,0,257,273],
[270,293,281,299,280,294,0,309],
[252,232,271,265,267,278,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,264,303,304,290,316,304],
[255,0,255,269,293,241,274,268],
[287,296,0,291,305,278,272,296],
[248,282,260,0,304,252,301,288],
[247,258,246,247,0,221,267,251],
[261,310,273,299,330,0,299,287],
[235,277,279,250,284,252,0,280],
[247,283,255,263,300,264,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,261,275,264,277,270,285],
[264,0,270,269,274,283,285,279],
[290,281,0,278,282,293,268,272],
[276,282,273,0,276,278,271,286],
[287,277,269,275,0,283,273,282],
[274,268,258,273,268,0,258,280],
[281,266,283,280,278,293,0,294],
[266,272,279,265,269,271,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,271,277,290,264,284,287],
[239,0,273,273,264,221,285,260],
[280,278,0,262,290,214,301,300],
[274,278,289,0,296,283,326,296],
[261,287,261,255,0,276,277,288],
[287,330,337,268,275,0,298,303],
[267,266,250,225,274,253,0,267],
[264,291,251,255,263,248,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,295,274,291,286,286,275],
[243,0,249,264,241,261,265,236],
[256,302,0,278,255,268,274,263],
[277,287,273,0,262,278,281,266],
[260,310,296,289,0,285,289,267],
[265,290,283,273,266,0,281,276],
[265,286,277,270,262,270,0,269],
[276,315,288,285,284,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,250,263,280,278,281,252],
[272,0,283,287,300,279,287,273],
[301,268,0,293,290,287,300,290],
[288,264,258,0,296,289,285,265],
[271,251,261,255,0,271,277,265],
[273,272,264,262,280,0,279,265],
[270,264,251,266,274,272,0,259],
[299,278,261,286,286,286,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,263,291,295,281,275,293],
[278,0,290,301,293,267,283,289],
[288,261,0,299,291,293,294,298],
[260,250,252,0,287,273,264,253],
[256,258,260,264,0,249,267,258],
[270,284,258,278,302,0,279,279],
[276,268,257,287,284,272,0,284],
[258,262,253,298,293,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,262,266,283,275,277],
[272,0,300,285,281,293,291,274],
[276,251,0,255,272,282,277,261],
[289,266,296,0,269,285,279,279],
[285,270,279,282,0,277,278,277],
[268,258,269,266,274,0,265,257],
[276,260,274,272,273,286,0,268],
[274,277,290,272,274,294,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,257,240,275,254,271,254],
[285,0,285,258,284,279,289,285],
[294,266,0,235,267,240,284,255],
[311,293,316,0,309,265,299,276],
[276,267,284,242,0,239,273,270],
[297,272,311,286,312,0,290,293],
[280,262,267,252,278,261,0,268],
[297,266,296,275,281,258,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,284,292,276,290,260,286],
[263,0,273,260,260,278,253,281],
[267,278,0,273,264,265,244,300],
[259,291,278,0,284,290,281,315],
[275,291,287,267,0,279,253,302],
[261,273,286,261,272,0,277,285],
[291,298,307,270,298,274,0,316],
[265,270,251,236,249,266,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,377,302,278,271,284],
[271,0,247,319,286,286,291,252],
[270,304,0,333,295,267,283,295],
[174,232,218,0,231,270,201,239],
[249,265,256,320,0,277,244,250],
[273,265,284,281,274,0,233,271],
[280,260,268,350,307,318,0,282],
[267,299,256,312,301,280,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,316,290,276,299,288,297],
[276,0,292,269,268,294,294,278],
[235,259,0,246,249,268,265,257],
[261,282,305,0,272,298,295,275],
[275,283,302,279,0,294,277,276],
[252,257,283,253,257,0,271,253],
[263,257,286,256,274,280,0,274],
[254,273,294,276,275,298,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,293,287,284,263,257,255],
[287,0,285,267,301,269,260,255],
[258,266,0,256,265,264,258,271],
[264,284,295,0,264,274,286,254],
[267,250,286,287,0,269,241,275],
[288,282,287,277,282,0,254,260],
[294,291,293,265,310,297,0,299],
[296,296,280,297,276,291,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,246,264,275,269,264,247],
[295,0,289,280,268,295,277,255],
[305,262,0,299,264,291,292,263],
[287,271,252,0,260,295,257,251],
[276,283,287,291,0,271,300,279],
[282,256,260,256,280,0,291,217],
[287,274,259,294,251,260,0,251],
[304,296,288,300,272,334,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,280,277,281,289,261,295],
[254,0,282,269,274,276,250,277],
[271,269,0,236,271,252,247,258],
[274,282,315,0,312,269,268,315],
[270,277,280,239,0,254,283,268],
[262,275,299,282,297,0,272,279],
[290,301,304,283,268,279,0,293],
[256,274,293,236,283,272,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,268,293,246,267,241],
[281,0,246,252,263,255,272,234],
[269,305,0,279,291,306,303,304],
[283,299,272,0,294,301,322,317],
[258,288,260,257,0,275,267,259],
[305,296,245,250,276,0,300,267],
[284,279,248,229,284,251,0,229],
[310,317,247,234,292,284,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,270,256,276,253,282,293],
[299,0,285,276,267,287,270,293],
[281,266,0,246,269,271,255,272],
[295,275,305,0,285,300,291,309],
[275,284,282,266,0,264,264,290],
[298,264,280,251,287,0,279,269],
[269,281,296,260,287,272,0,304],
[258,258,279,242,261,282,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,259,265,262,251,271,276],
[289,0,272,304,274,295,311,300],
[292,279,0,278,275,259,321,289],
[286,247,273,0,264,248,287,300],
[289,277,276,287,0,270,292,300],
[300,256,292,303,281,0,306,289],
[280,240,230,264,259,245,0,275],
[275,251,262,251,251,262,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,268,257,290,288,278,277],
[273,0,264,249,275,269,267,269],
[283,287,0,271,295,272,262,267],
[294,302,280,0,285,283,273,290],
[261,276,256,266,0,256,266,274],
[263,282,279,268,295,0,283,273],
[273,284,289,278,285,268,0,289],
[274,282,284,261,277,278,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,247,265,284,255,258],
[274,0,284,247,288,268,245,277],
[289,267,0,252,281,274,264,275],
[304,304,299,0,301,295,281,275],
[286,263,270,250,0,282,249,281],
[267,283,277,256,269,0,249,258],
[296,306,287,270,302,302,0,273],
[293,274,276,276,270,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,458,368,275,183,275,275],
[183,0,183,369,183,183,183,183],
[93,368,0,368,368,276,368,275],
[183,182,183,0,274,183,183,183],
[276,368,183,277,0,183,275,275],
[368,368,275,368,368,0,369,275],
[276,368,183,368,276,182,0,366],
[276,368,276,368,276,276,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,256,293,258,282,251,263],
[293,0,272,280,258,261,265,283],
[295,279,0,288,275,273,277,310],
[258,271,263,0,253,270,250,267],
[293,293,276,298,0,301,275,295],
[269,290,278,281,250,0,250,265],
[300,286,274,301,276,301,0,302],
[288,268,241,284,256,286,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,289,276,288,267,277],
[275,0,282,291,268,290,275,261],
[273,269,0,287,268,278,269,263],
[262,260,264,0,254,266,257,238],
[275,283,283,297,0,296,272,276],
[263,261,273,285,255,0,269,252],
[284,276,282,294,279,282,0,272],
[274,290,288,313,275,299,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,259,275,263,257,272],
[283,0,278,258,253,256,250,248],
[278,273,0,253,243,263,262,255],
[292,293,298,0,281,282,272,271],
[276,298,308,270,0,285,268,273],
[288,295,288,269,266,0,280,261],
[294,301,289,279,283,271,0,281],
[279,303,296,280,278,290,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,298,303,275,302,267,265],
[278,0,290,306,263,279,297,270],
[253,261,0,278,258,280,262,217],
[248,245,273,0,265,246,256,246],
[276,288,293,286,0,276,281,253],
[249,272,271,305,275,0,303,276],
[284,254,289,295,270,248,0,250],
[286,281,334,305,298,275,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,284,292,278,273,261,258],
[287,0,285,293,275,278,260,275],
[267,266,0,262,266,263,264,256],
[259,258,289,0,289,280,276,280],
[273,276,285,262,0,289,265,272],
[278,273,288,271,262,0,265,269],
[290,291,287,275,286,286,0,272],
[293,276,295,271,279,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,265,362,234,331,285,238],
[350,0,288,363,250,348,347,321],
[286,263,0,315,293,363,314,332],
[189,188,236,0,249,281,269,271],
[317,301,258,302,0,427,316,287],
[220,203,188,270,124,0,234,224],
[266,204,237,282,235,317,0,254],
[313,230,219,280,264,327,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,282,275,281,280,283,283],
[291,0,293,266,289,276,272,319],
[269,258,0,262,269,252,262,268],
[276,285,289,0,286,300,274,269],
[270,262,282,265,0,272,277,280],
[271,275,299,251,279,0,250,276],
[268,279,289,277,274,301,0,294],
[268,232,283,282,271,275,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,459,277,185,93,368,368],
[366,0,551,185,276,184,551,275],
[92,0,0,185,185,93,367,184],
[274,366,366,0,274,275,366,275],
[366,275,366,277,0,368,366,275],
[458,367,458,276,183,0,367,275],
[183,0,184,185,185,184,0,184],
[183,276,367,276,276,276,367,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,271,277,242,266,240,286],
[341,0,323,298,311,339,308,271],
[280,228,0,264,293,261,279,289],
[274,253,287,0,283,286,256,261],
[309,240,258,268,0,247,280,282],
[285,212,290,265,304,0,292,274],
[311,243,272,295,271,259,0,268],
[265,280,262,290,269,277,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,287,278,289,261,273,258],
[282,0,313,272,282,295,270,260],
[264,238,0,268,253,278,253,248],
[273,279,283,0,283,284,266,278],
[262,269,298,268,0,271,254,277],
[290,256,273,267,280,0,280,267],
[278,281,298,285,297,271,0,278],
[293,291,303,273,274,284,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,252,236,268,254,277,259],
[305,0,250,243,274,211,265,257],
[299,301,0,270,300,280,299,280],
[315,308,281,0,323,274,292,303],
[283,277,251,228,0,262,280,257],
[297,340,271,277,289,0,292,290],
[274,286,252,259,271,259,0,297],
[292,294,271,248,294,261,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,264,297,272,248,263,281],
[286,0,293,308,280,284,274,309],
[287,258,0,283,276,272,266,298],
[254,243,268,0,291,263,272,266],
[279,271,275,260,0,266,276,298],
[303,267,279,288,285,0,286,264],
[288,277,285,279,275,265,0,304],
[270,242,253,285,253,287,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,282,264,311,290,294,295],
[252,0,250,288,280,285,288,296],
[269,301,0,288,284,287,314,289],
[287,263,263,0,291,286,290,296],
[240,271,267,260,0,268,263,288],
[261,266,264,265,283,0,267,285],
[257,263,237,261,288,284,0,287],
[256,255,262,255,263,266,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,269,256,265,276,267,266],
[285,0,276,279,287,266,277,261],
[282,275,0,302,272,282,277,262],
[295,272,249,0,267,269,280,277],
[286,264,279,284,0,267,273,262],
[275,285,269,282,284,0,254,266],
[284,274,274,271,278,297,0,277],
[285,290,289,274,289,285,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,303,273,295,299,290,300],
[258,0,271,241,271,254,257,282],
[248,280,0,252,273,273,255,302],
[278,310,299,0,270,281,279,302],
[256,280,278,281,0,262,274,274],
[252,297,278,270,289,0,274,286],
[261,294,296,272,277,277,0,295],
[251,269,249,249,277,265,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,262,261,271,285,260],
[270,0,282,257,255,243,283,252],
[276,269,0,266,260,257,284,263],
[289,294,285,0,258,271,277,262],
[290,296,291,293,0,271,302,287],
[280,308,294,280,280,0,293,274],
[266,268,267,274,249,258,0,261],
[291,299,288,289,264,277,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,287,276,295,301,252,244],
[290,0,295,272,307,284,276,287],
[264,256,0,267,277,261,238,230],
[275,279,284,0,288,283,240,248],
[256,244,274,263,0,262,232,244],
[250,267,290,268,289,0,234,247],
[299,275,313,311,319,317,0,276],
[307,264,321,303,307,304,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,269,316,311,275,275,288],
[248,0,274,283,276,276,262,286],
[282,277,0,293,274,261,267,278],
[235,268,258,0,269,263,259,280],
[240,275,277,282,0,259,262,281],
[276,275,290,288,292,0,278,286],
[276,289,284,292,289,273,0,286],
[263,265,273,271,270,265,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,292,257,290,277,281,289],
[255,0,269,246,257,255,253,253],
[259,282,0,251,276,268,259,267],
[294,305,300,0,280,274,271,276],
[261,294,275,271,0,285,269,277],
[274,296,283,277,266,0,284,291],
[270,298,292,280,282,267,0,294],
[262,298,284,275,274,260,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,277,296,284,286,285,275],
[289,0,269,305,291,286,288,302],
[274,282,0,308,277,283,282,280],
[255,246,243,0,254,270,254,268],
[267,260,274,297,0,291,291,280],
[265,265,268,281,260,0,263,274],
[266,263,269,297,260,288,0,273],
[276,249,271,283,271,277,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,260,282,286,292,275,273],
[272,0,294,300,316,297,311,298],
[291,257,0,262,306,278,268,292],
[269,251,289,0,285,297,281,282],
[265,235,245,266,0,266,246,248],
[259,254,273,254,285,0,282,269],
[276,240,283,270,305,269,0,276],
[278,253,259,269,303,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,292,312,288,247,278,300],
[261,0,260,272,224,232,248,268],
[259,291,0,289,245,226,246,282],
[239,279,262,0,257,219,261,283],
[263,327,306,294,0,261,278,299],
[304,319,325,332,290,0,275,307],
[273,303,305,290,273,276,0,302],
[251,283,269,268,252,244,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,308,301,307,280,260],
[273,0,253,304,264,276,265,232],
[288,298,0,286,243,301,285,281],
[243,247,265,0,283,310,258,248],
[250,287,308,268,0,278,274,261],
[244,275,250,241,273,0,252,229],
[271,286,266,293,277,299,0,253],
[291,319,270,303,290,322,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,212,207,200,216,251,227],
[380,0,324,351,263,275,356,344],
[339,227,0,334,244,286,300,277],
[344,200,217,0,206,202,288,261],
[351,288,307,345,0,258,347,331],
[335,276,265,349,293,0,372,316],
[300,195,251,263,204,179,0,241],
[324,207,274,290,220,235,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,230,289,243,259,249,288],
[317,0,283,323,275,292,314,346],
[321,268,0,293,314,248,281,316],
[262,228,258,0,264,279,228,310],
[308,276,237,287,0,254,242,300],
[292,259,303,272,297,0,259,302],
[302,237,270,323,309,292,0,294],
[263,205,235,241,251,249,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,250,289,309,336,257,275],
[306,0,291,278,313,324,253,256],
[301,260,0,280,276,271,220,270],
[262,273,271,0,288,285,234,282],
[242,238,275,263,0,334,233,236],
[215,227,280,266,217,0,200,215],
[294,298,331,317,318,351,0,262],
[276,295,281,269,315,336,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,277,282,296,310,288,268],
[251,0,245,260,286,273,282,267],
[274,306,0,276,323,280,281,269],
[269,291,275,0,291,281,292,279],
[255,265,228,260,0,301,246,270],
[241,278,271,270,250,0,256,257],
[263,269,270,259,305,295,0,269],
[283,284,282,272,281,294,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,263,272,246,240,282,256],
[262,0,264,254,248,218,226,252],
[288,287,0,282,252,252,245,240],
[279,297,269,0,246,254,261,241],
[305,303,299,305,0,297,255,265],
[311,333,299,297,254,0,266,277],
[269,325,306,290,296,285,0,266],
[295,299,311,310,286,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,293,281,276,272,262],
[275,0,264,296,275,280,266,265],
[284,287,0,290,293,269,280,269],
[258,255,261,0,262,271,242,282],
[270,276,258,289,0,286,262,286],
[275,271,282,280,265,0,278,286],
[279,285,271,309,289,273,0,285],
[289,286,282,269,265,265,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,267,305,268,272,271,263],
[310,0,271,312,314,277,337,268],
[284,280,0,265,232,286,287,278],
[246,239,286,0,294,278,253,239],
[283,237,319,257,0,291,277,226],
[279,274,265,273,260,0,294,251],
[280,214,264,298,274,257,0,296],
[288,283,273,312,325,300,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,251,270,258,275,272,285],
[278,0,297,286,272,289,292,282],
[300,254,0,298,270,289,279,296],
[281,265,253,0,276,288,271,280],
[293,279,281,275,0,280,282,292],
[276,262,262,263,271,0,267,272],
[279,259,272,280,269,284,0,280],
[266,269,255,271,259,279,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,264,270,287,305,277,285],
[256,0,270,291,273,264,274,252],
[287,281,0,288,285,295,273,287],
[281,260,263,0,260,307,292,268],
[264,278,266,291,0,277,262,266],
[246,287,256,244,274,0,246,260],
[274,277,278,259,289,305,0,259],
[266,299,264,283,285,291,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,248,268,247,269,247,280],
[298,0,277,270,280,295,272,298],
[303,274,0,272,281,298,271,297],
[283,281,279,0,274,316,278,298],
[304,271,270,277,0,284,267,282],
[282,256,253,235,267,0,269,279],
[304,279,280,273,284,282,0,258],
[271,253,254,253,269,272,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,265,260,275,283,254,263],
[277,0,286,286,275,252,254,258],
[286,265,0,280,301,276,273,263],
[291,265,271,0,285,273,284,282],
[276,276,250,266,0,260,266,272],
[268,299,275,278,291,0,288,266],
[297,297,278,267,285,263,0,292],
[288,293,288,269,279,285,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,299,307,284,294,303,275],
[266,0,302,290,286,331,301,258],
[252,249,0,275,268,284,256,256],
[244,261,276,0,265,281,271,252],
[267,265,283,286,0,294,261,260],
[257,220,267,270,257,0,257,220],
[248,250,295,280,290,294,0,280],
[276,293,295,299,291,331,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,272,264,264,296,295,250],
[291,0,288,280,273,292,252,266],
[279,263,0,259,264,290,263,230],
[287,271,292,0,279,302,260,269],
[287,278,287,272,0,318,272,278],
[255,259,261,249,233,0,221,261],
[256,299,288,291,279,330,0,287],
[301,285,321,282,273,290,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,256,268,269,268,259,266],
[283,0,258,287,286,275,277,286],
[295,293,0,296,271,295,284,297],
[283,264,255,0,274,279,274,277],
[282,265,280,277,0,282,292,293],
[283,276,256,272,269,0,261,279],
[292,274,267,277,259,290,0,282],
[285,265,254,274,258,272,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,284,273,261,264,270],
[277,0,264,270,269,267,264,261],
[279,287,0,249,257,256,265,266],
[267,281,302,0,281,256,279,270],
[278,282,294,270,0,284,280,267],
[290,284,295,295,267,0,255,268],
[287,287,286,272,271,296,0,293],
[281,290,285,281,284,283,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,255,273,274,273,262,255],
[284,0,271,273,302,276,281,267],
[296,280,0,274,321,278,265,290],
[278,278,277,0,292,281,270,272],
[277,249,230,259,0,258,265,246],
[278,275,273,270,293,0,281,275],
[289,270,286,281,286,270,0,271],
[296,284,261,279,305,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,282,254,273,260,261,259],
[246,0,288,264,280,271,268,264],
[269,263,0,255,248,233,246,259],
[297,287,296,0,283,260,276,259],
[278,271,303,268,0,269,276,256],
[291,280,318,291,282,0,295,275],
[290,283,305,275,275,256,0,294],
[292,287,292,292,295,276,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,344,206,208,276,206,276],
[344,0,206,136,138,206,138,344],
[207,345,0,204,70,136,275,344],
[345,415,347,0,140,275,344,414],
[343,413,481,411,0,411,411,274],
[275,345,415,276,140,0,413,414],
[345,413,276,207,140,138,0,344],
[275,207,207,137,277,137,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,282,267,278,293,294],
[276,0,260,262,251,254,278,270],
[276,291,0,275,273,273,301,307],
[269,289,276,0,278,264,285,279],
[284,300,278,273,0,291,292,302],
[273,297,278,287,260,0,324,288],
[258,273,250,266,259,227,0,284],
[257,281,244,272,249,263,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,291,264,296,276,275,277],
[236,0,292,264,292,276,333,276],
[260,259,0,273,319,319,243,321],
[287,287,278,0,279,279,257,244],
[255,259,232,272,0,274,251,239],
[275,275,232,272,277,0,254,265],
[276,218,308,294,300,297,0,262],
[274,275,230,307,312,286,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,265,258,264,274,259,265],
[266,0,276,255,285,255,266,283],
[286,275,0,258,285,270,277,280],
[293,296,293,0,270,272,285,261],
[287,266,266,281,0,268,272,291],
[277,296,281,279,283,0,259,289],
[292,285,274,266,279,292,0,283],
[286,268,271,290,260,262,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,292,289,277,277,275,269],
[261,0,265,284,250,284,260,254],
[259,286,0,266,266,261,275,260],
[262,267,285,0,258,283,276,268],
[274,301,285,293,0,283,280,280],
[274,267,290,268,268,0,267,262],
[276,291,276,275,271,284,0,250],
[282,297,291,283,271,289,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,266,288,257,273,268,260],
[269,0,264,264,246,267,265,268],
[285,287,0,281,273,272,273,271],
[263,287,270,0,261,272,265,260],
[294,305,278,290,0,274,279,270],
[278,284,279,279,277,0,264,265],
[283,286,278,286,272,287,0,276],
[291,283,280,291,281,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,253,252,263,254,242,255],
[314,0,273,280,296,287,287,281],
[298,278,0,267,286,287,289,275],
[299,271,284,0,290,284,290,273],
[288,255,265,261,0,260,278,252],
[297,264,264,267,291,0,284,276],
[309,264,262,261,273,267,0,281],
[296,270,276,278,299,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,277,270,282,266,264],
[281,0,281,291,272,299,271,295],
[284,270,0,282,277,282,282,281],
[274,260,269,0,271,281,291,301],
[281,279,274,280,0,289,285,292],
[269,252,269,270,262,0,253,284],
[285,280,269,260,266,298,0,283],
[287,256,270,250,259,267,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,266,274,285,287,291,274],
[287,0,284,301,256,298,286,297],
[285,267,0,284,279,275,302,286],
[277,250,267,0,282,277,292,278],
[266,295,272,269,0,265,273,262],
[264,253,276,274,286,0,279,278],
[260,265,249,259,278,272,0,266],
[277,254,265,273,289,273,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,292,294,288,249,264,269],
[259,0,316,290,303,258,280,264],
[259,235,0,274,269,267,260,265],
[257,261,277,0,264,272,261,281],
[263,248,282,287,0,283,277,279],
[302,293,284,279,268,0,285,274],
[287,271,291,290,274,266,0,264],
[282,287,286,270,272,277,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,343,328,324,316,241,286,298],
[208,0,274,258,272,278,219,264],
[223,277,0,306,271,268,253,252],
[227,293,245,0,248,247,231,223],
[235,279,280,303,0,225,303,223],
[310,273,283,304,326,0,296,293],
[265,332,298,320,248,255,0,238],
[253,287,299,328,328,258,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,259,266,262,278,284],
[268,0,276,280,268,282,297,281],
[289,275,0,285,261,256,287,269],
[292,271,266,0,278,268,276,290],
[285,283,290,273,0,268,288,296],
[289,269,295,283,283,0,302,276],
[273,254,264,275,263,249,0,256],
[267,270,282,261,255,275,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,277,269,306,274,255,335],
[257,0,268,275,277,220,250,283],
[274,283,0,266,262,231,288,298],
[282,276,285,0,269,257,241,302],
[245,274,289,282,0,269,284,269],
[277,331,320,294,282,0,267,332],
[296,301,263,310,267,284,0,287],
[216,268,253,249,282,219,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,278,279,260,261,274],
[278,0,279,272,264,282,266,282],
[270,272,0,287,280,266,265,286],
[273,279,264,0,273,260,275,265],
[272,287,271,278,0,253,259,289],
[291,269,285,291,298,0,286,283],
[290,285,286,276,292,265,0,285],
[277,269,265,286,262,268,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,274,274,293,288,279,267],
[255,0,272,251,273,260,258,251],
[277,279,0,261,268,258,260,261],
[277,300,290,0,279,276,280,262],
[258,278,283,272,0,257,267,260],
[263,291,293,275,294,0,278,277],
[272,293,291,271,284,273,0,268],
[284,300,290,289,291,274,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,234,236,285,283,208,261],
[315,0,283,234,233,258,233,311],
[317,268,0,266,262,366,319,339],
[315,317,285,0,290,393,211,366],
[266,318,289,261,0,286,264,262],
[268,293,185,158,265,0,239,266],
[343,318,232,340,287,312,0,339],
[290,240,212,185,289,285,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,329,285,305,316,310,294],
[279,0,346,262,279,291,279,291],
[222,205,0,248,263,195,252,224],
[266,289,303,0,281,233,228,278],
[246,272,288,270,0,261,277,262],
[235,260,356,318,290,0,309,276],
[241,272,299,323,274,242,0,246],
[257,260,327,273,289,275,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,353,354,312,284,307,272,304],
[198,0,311,320,212,271,236,205],
[197,240,0,274,253,227,277,265],
[239,231,277,0,286,301,246,238],
[267,339,298,265,0,251,248,237],
[244,280,324,250,300,0,294,229],
[279,315,274,305,303,257,0,287],
[247,346,286,313,314,322,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,283,288,274,243,289,266],
[283,0,292,286,263,274,290,271],
[268,259,0,262,261,273,274,280],
[263,265,289,0,273,276,286,266],
[277,288,290,278,0,272,311,260],
[308,277,278,275,279,0,291,278],
[262,261,277,265,240,260,0,247],
[285,280,271,285,291,273,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,253,259,223,243,259,218],
[307,0,289,257,203,308,294,290],
[298,262,0,192,276,279,348,255],
[292,294,359,0,259,278,259,307],
[328,348,275,292,0,377,345,310],
[308,243,272,273,174,0,278,219],
[292,257,203,292,206,273,0,239],
[333,261,296,244,241,332,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,336,274,331,329,276,357],
[307,0,362,195,197,336,224,279],
[215,189,0,328,302,246,245,300],
[277,356,223,0,221,387,304,329],
[220,354,249,330,0,357,271,331],
[222,215,305,164,194,0,273,303],
[275,327,306,247,280,278,0,358],
[194,272,251,222,220,248,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,310,278,294,300,275,315],
[262,0,278,273,287,290,266,306],
[241,273,0,243,256,257,255,285],
[273,278,308,0,295,286,281,301],
[257,264,295,256,0,284,283,310],
[251,261,294,265,267,0,258,306],
[276,285,296,270,268,293,0,312],
[236,245,266,250,241,245,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,265,300,286,255,281,299],
[266,0,289,301,288,272,279,278],
[286,262,0,283,278,265,290,287],
[251,250,268,0,248,237,257,262],
[265,263,273,303,0,244,261,288],
[296,279,286,314,307,0,270,293],
[270,272,261,294,290,281,0,278],
[252,273,264,289,263,258,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,288,261,294,300,283],
[275,0,311,282,294,308,309,277],
[267,240,0,289,256,273,272,279],
[263,269,262,0,249,280,250,257],
[290,257,295,302,0,296,283,270],
[257,243,278,271,255,0,252,265],
[251,242,279,301,268,299,0,286],
[268,274,272,294,281,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,298,280,253,272,272,280],
[277,0,279,280,258,280,277,277],
[253,272,0,269,243,265,278,276],
[271,271,282,0,259,265,265,274],
[298,293,308,292,0,280,275,285],
[279,271,286,286,271,0,260,274],
[279,274,273,286,276,291,0,271],
[271,274,275,277,266,277,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,290,271,265,274,280,273],
[269,0,237,233,262,267,269,241],
[261,314,0,284,274,274,280,279],
[280,318,267,0,270,287,277,274],
[286,289,277,281,0,270,259,265],
[277,284,277,264,281,0,282,259],
[271,282,271,274,292,269,0,255],
[278,310,272,277,286,292,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,300,280,287,298,290,271],
[239,0,289,280,272,272,273,261],
[251,262,0,267,262,301,297,260],
[271,271,284,0,292,298,254,252],
[264,279,289,259,0,310,297,288],
[253,279,250,253,241,0,229,251],
[261,278,254,297,254,322,0,243],
[280,290,291,299,263,300,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,243,255,273,249,250,256],
[285,0,283,284,275,270,293,277],
[308,268,0,308,312,297,274,293],
[296,267,243,0,275,279,256,283],
[278,276,239,276,0,257,257,257],
[302,281,254,272,294,0,290,278],
[301,258,277,295,294,261,0,270],
[295,274,258,268,294,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,221,188,190,286,237,191],
[284,0,203,236,251,282,280,265],
[330,348,0,330,268,397,266,251],
[363,315,221,0,281,320,267,266],
[361,300,283,270,0,382,249,249],
[265,269,154,231,169,0,173,188],
[314,271,285,284,302,378,0,285],
[360,286,300,285,302,363,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,280,290,289,290,284,274],
[256,0,281,270,271,279,285,254],
[271,270,0,271,278,291,273,279],
[261,281,280,0,277,285,283,271],
[262,280,273,274,0,270,294,268],
[261,272,260,266,281,0,270,266],
[267,266,278,268,257,281,0,257],
[277,297,272,280,283,285,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,281,245,235,256,259,266],
[268,0,267,232,239,264,269,234],
[270,284,0,268,242,234,250,257],
[306,319,283,0,272,258,259,274],
[316,312,309,279,0,281,275,286],
[295,287,317,293,270,0,283,282],
[292,282,301,292,276,268,0,285],
[285,317,294,277,265,269,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,290,324,268,307,270,277],
[289,0,267,328,258,307,310,285],
[261,284,0,306,284,283,285,287],
[227,223,245,0,235,234,251,256],
[283,293,267,316,0,306,292,306],
[244,244,268,317,245,0,287,281],
[281,241,266,300,259,264,0,285],
[274,266,264,295,245,270,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,282,279,266,254,293,255],
[314,0,301,319,290,275,294,281],
[269,250,0,296,264,244,272,250],
[272,232,255,0,281,253,305,251],
[285,261,287,270,0,250,285,265],
[297,276,307,298,301,0,317,265],
[258,257,279,246,266,234,0,259],
[296,270,301,300,286,286,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,274,272,268,281,259],
[280,0,255,258,309,293,270,279],
[280,296,0,287,297,267,295,282],
[277,293,264,0,295,300,285,270],
[279,242,254,256,0,265,251,275],
[283,258,284,251,286,0,299,278],
[270,281,256,266,300,252,0,276],
[292,272,269,281,276,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,272,254,280,286,271,271],
[271,0,269,284,268,281,292,278],
[279,282,0,278,281,283,286,258],
[297,267,273,0,281,283,282,275],
[271,283,270,270,0,302,289,269],
[265,270,268,268,249,0,285,275],
[280,259,265,269,262,266,0,253],
[280,273,293,276,282,276,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,248,302,253,302,286,277],
[234,0,246,258,256,232,325,329],
[303,305,0,315,296,278,273,304],
[249,293,236,0,227,276,248,251],
[298,295,255,324,0,255,294,366],
[249,319,273,275,296,0,299,304],
[265,226,278,303,257,252,0,292],
[274,222,247,300,185,247,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,282,291,267,289,293,297],
[271,0,263,276,268,273,275,268],
[269,288,0,293,275,290,282,287],
[260,275,258,0,252,245,255,249],
[284,283,276,299,0,279,266,266],
[262,278,261,306,272,0,276,279],
[258,276,269,296,285,275,0,251],
[254,283,264,302,285,272,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,283,293,274,306,270,270],
[256,0,265,259,255,279,251,255],
[268,286,0,279,274,294,288,273],
[258,292,272,0,280,299,254,251],
[277,296,277,271,0,311,255,286],
[245,272,257,252,240,0,246,234],
[281,300,263,297,296,305,0,282],
[281,296,278,300,265,317,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,308,308,290,314,320,343],
[320,0,259,230,243,278,290,353],
[243,292,0,290,249,259,235,277],
[243,321,261,0,310,307,262,306],
[261,308,302,241,0,310,300,318],
[237,273,292,244,241,0,303,275],
[231,261,316,289,251,248,0,324],
[208,198,274,245,233,276,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,279,277,273,308,272,276],
[259,0,309,287,269,274,270,286],
[272,242,0,247,272,266,248,249],
[274,264,304,0,284,284,281,269],
[278,282,279,267,0,298,296,288],
[243,277,285,267,253,0,269,266],
[279,281,303,270,255,282,0,285],
[275,265,302,282,263,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,296,280,256,280,293,291],
[253,0,264,251,256,237,269,231],
[255,287,0,266,278,223,265,269],
[271,300,285,0,279,250,295,270],
[295,295,273,272,0,267,290,248],
[271,314,328,301,284,0,312,259],
[258,282,286,256,261,239,0,260],
[260,320,282,281,303,292,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,289,275,298,282,247,280],
[287,0,296,259,302,279,285,280],
[262,255,0,267,272,271,271,280],
[276,292,284,0,308,310,270,285],
[253,249,279,243,0,276,264,274],
[269,272,280,241,275,0,260,263],
[304,266,280,281,287,291,0,295],
[271,271,271,266,277,288,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,294,292,275,295,294,288],
[238,0,273,250,273,274,278,270],
[257,278,0,271,273,275,270,275],
[259,301,280,0,305,303,261,306],
[276,278,278,246,0,278,271,286],
[256,277,276,248,273,0,275,281],
[257,273,281,290,280,276,0,272],
[263,281,276,245,265,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,277,301,244,271,281,255],
[234,0,248,262,213,271,240,246],
[274,303,0,298,266,297,261,280],
[250,289,253,0,259,285,251,242],
[307,338,285,292,0,334,281,269],
[280,280,254,266,217,0,272,247],
[270,311,290,300,270,279,0,289],
[296,305,271,309,282,304,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,282,266,270,271,266,254],
[269,0,271,280,257,260,277,277],
[269,280,0,263,256,272,262,260],
[285,271,288,0,272,263,269,246],
[281,294,295,279,0,274,273,286],
[280,291,279,288,277,0,294,272],
[285,274,289,282,278,257,0,248],
[297,274,291,305,265,279,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,291,308,284,271,280,297],
[259,0,272,272,286,278,277,297],
[260,279,0,281,285,275,273,285],
[243,279,270,0,267,247,258,265],
[267,265,266,284,0,277,268,282],
[280,273,276,304,274,0,268,303],
[271,274,278,293,283,283,0,294],
[254,254,266,286,269,248,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,282,266,251,279,246,274],
[257,0,240,265,246,270,253,229],
[269,311,0,287,276,311,278,259],
[285,286,264,0,286,290,258,258],
[300,305,275,265,0,302,264,258],
[272,281,240,261,249,0,257,258],
[305,298,273,293,287,294,0,292],
[277,322,292,293,293,293,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,273,259,289,241,256,252],
[260,0,251,284,294,243,296,280],
[278,300,0,271,296,281,279,247],
[292,267,280,0,317,255,299,240],
[262,257,255,234,0,263,254,213],
[310,308,270,296,288,0,312,279],
[295,255,272,252,297,239,0,268],
[299,271,304,311,338,272,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,282,293,292,268,268],
[275,0,277,270,286,270,282,266],
[271,274,0,256,289,278,278,271],
[269,281,295,0,300,294,294,298],
[258,265,262,251,0,252,255,258],
[259,281,273,257,299,0,278,258],
[283,269,273,257,296,273,0,264],
[283,285,280,253,293,293,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,224,255,247,272,235,228],
[240,0,201,264,244,245,241,288],
[327,350,0,329,290,310,273,299],
[296,287,222,0,267,273,262,275],
[304,307,261,284,0,266,278,307],
[279,306,241,278,285,0,254,328],
[316,310,278,289,273,297,0,277],
[323,263,252,276,244,223,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,224,245,222,232,245,250],
[304,0,256,240,267,276,236,306],
[327,295,0,282,245,268,312,253],
[306,311,269,0,272,281,296,287],
[329,284,306,279,0,281,244,267],
[319,275,283,270,270,0,266,288],
[306,315,239,255,307,285,0,317],
[301,245,298,264,284,263,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,279,285,280,256,277,257],
[285,0,294,280,265,276,284,289],
[272,257,0,276,266,263,261,267],
[266,271,275,0,265,263,260,263],
[271,286,285,286,0,283,257,270],
[295,275,288,288,268,0,284,271],
[274,267,290,291,294,267,0,265],
[294,262,284,288,281,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,298,282,282,283,272,285],
[263,0,288,271,258,275,258,272],
[253,263,0,255,256,268,249,263],
[269,280,296,0,269,267,284,296],
[269,293,295,282,0,286,271,284],
[268,276,283,284,265,0,274,281],
[279,293,302,267,280,277,0,287],
[266,279,288,255,267,270,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,265,272,273,265,272,271],
[247,0,274,245,271,259,248,265],
[286,277,0,292,276,269,283,287],
[279,306,259,0,287,254,289,280],
[278,280,275,264,0,260,260,277],
[286,292,282,297,291,0,274,293],
[279,303,268,262,291,277,0,264],
[280,286,264,271,274,258,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,285,274,275,281,281,255],
[289,0,298,254,257,298,260,273],
[266,253,0,268,249,266,271,264],
[277,297,283,0,296,310,272,305],
[276,294,302,255,0,287,275,349],
[270,253,285,241,264,0,274,240],
[270,291,280,279,276,277,0,268],
[296,278,287,246,202,311,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,266,307,259,270,254,291],
[268,0,262,295,235,265,271,276],
[285,289,0,314,276,292,275,289],
[244,256,237,0,261,238,251,275],
[292,316,275,290,0,278,291,291],
[281,286,259,313,273,0,270,289],
[297,280,276,300,260,281,0,296],
[260,275,262,276,260,262,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,280,275,267,275,249,311],
[287,0,288,290,263,269,283,304],
[271,263,0,287,263,266,254,288],
[276,261,264,0,262,277,251,279],
[284,288,288,289,0,298,265,317],
[276,282,285,274,253,0,266,299],
[302,268,297,300,286,285,0,315],
[240,247,263,272,234,252,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,311,274,285,279,281],
[280,0,279,272,277,281,288,281],
[276,272,0,289,279,290,273,288],
[240,279,262,0,278,279,282,267],
[277,274,272,273,0,277,264,265],
[266,270,261,272,274,0,288,258],
[272,263,278,269,287,263,0,259],
[270,270,263,284,286,293,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,291,259,283,283,285,287],
[290,0,270,270,271,280,287,291],
[260,281,0,279,281,295,284,270],
[292,281,272,0,285,289,284,292],
[268,280,270,266,0,278,278,270],
[268,271,256,262,273,0,271,264],
[266,264,267,267,273,280,0,288],
[264,260,281,259,281,287,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,291,270,270,269,267,280],
[275,0,276,270,283,271,268,289],
[260,275,0,252,256,281,278,257],
[281,281,299,0,277,272,281,288],
[281,268,295,274,0,283,280,284],
[282,280,270,279,268,0,276,280],
[284,283,273,270,271,275,0,267],
[271,262,294,263,267,271,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,274,260,263,264,272],
[273,0,262,281,261,259,263,278],
[284,289,0,278,274,286,289,285],
[277,270,273,0,260,269,277,271],
[291,290,277,291,0,278,272,280],
[288,292,265,282,273,0,278,289],
[287,288,262,274,279,273,0,283],
[279,273,266,280,271,262,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,253,256,267,269,283,269],
[276,0,271,267,292,278,261,263],
[298,280,0,307,276,281,270,286],
[295,284,244,0,266,296,249,268],
[284,259,275,285,0,290,271,269],
[282,273,270,255,261,0,265,273],
[268,290,281,302,280,286,0,283],
[282,288,265,283,282,278,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,264,237,265,245,272,269],
[303,0,290,274,282,261,296,275],
[287,261,0,253,271,266,281,283],
[314,277,298,0,274,281,290,298],
[286,269,280,277,0,260,292,293],
[306,290,285,270,291,0,293,300],
[279,255,270,261,259,258,0,277],
[282,276,268,253,258,251,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,277,227,277,278,204,251],
[326,0,224,328,402,354,253,322],
[274,327,0,378,427,402,302,323],
[324,223,173,0,250,280,150,249],
[274,149,124,301,0,229,204,323],
[273,197,149,271,322,0,200,349],
[347,298,249,401,347,351,0,374],
[300,229,228,302,228,202,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,275,314,339,327,307,283],
[222,0,268,288,247,271,296,286],
[276,283,0,279,261,264,290,275],
[237,263,272,0,262,273,272,237],
[212,304,290,289,0,280,263,266],
[224,280,287,278,271,0,281,254],
[244,255,261,279,288,270,0,243],
[268,265,276,314,285,297,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,263,257,271,270,287,274],
[292,0,269,270,281,279,295,284],
[288,282,0,282,288,275,290,291],
[294,281,269,0,296,291,319,302],
[280,270,263,255,0,252,278,281],
[281,272,276,260,299,0,306,302],
[264,256,261,232,273,245,0,270],
[277,267,260,249,270,249,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,336,340,289,291,354,298],
[291,0,300,313,304,260,307,297],
[215,251,0,266,266,281,245,215],
[211,238,285,0,253,231,232,208],
[262,247,285,298,0,262,240,222],
[260,291,270,320,289,0,290,279],
[197,244,306,319,311,261,0,236],
[253,254,336,343,329,272,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,267,279,283,290,268,281],
[265,0,272,275,288,288,277,279],
[284,279,0,265,264,283,296,273],
[272,276,286,0,288,292,285,275],
[268,263,287,263,0,284,288,261],
[261,263,268,259,267,0,257,274],
[283,274,255,266,263,294,0,263],
[270,272,278,276,290,277,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,292,264,301,280,300,286],
[264,0,267,270,270,285,298,265],
[259,284,0,256,283,265,280,272],
[287,281,295,0,290,274,307,285],
[250,281,268,261,0,276,279,266],
[271,266,286,277,275,0,294,273],
[251,253,271,244,272,257,0,237],
[265,286,279,266,285,278,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,299,283,303,289,296,266],
[233,0,245,248,288,270,270,245],
[252,306,0,268,285,305,297,259],
[268,303,283,0,329,268,289,276],
[248,263,266,222,0,280,259,241],
[262,281,246,283,271,0,283,257],
[255,281,254,262,292,268,0,253],
[285,306,292,275,310,294,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,267,289,289,257,287],
[274,0,272,258,273,275,277,284],
[270,279,0,257,276,286,280,295],
[284,293,294,0,270,316,292,310],
[262,278,275,281,0,269,276,278],
[262,276,265,235,282,0,266,289],
[294,274,271,259,275,285,0,276],
[264,267,256,241,273,262,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,307,298,291,291,285,309],
[294,0,273,276,265,305,267,303],
[244,278,0,270,264,288,259,281],
[253,275,281,0,250,277,245,265],
[260,286,287,301,0,285,272,286],
[260,246,263,274,266,0,304,281],
[266,284,292,306,279,247,0,309],
[242,248,270,286,265,270,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,267,278,282,278,286,261],
[276,0,258,280,265,278,288,253],
[284,293,0,302,297,294,294,266],
[273,271,249,0,269,265,276,274],
[269,286,254,282,0,275,298,282],
[273,273,257,286,276,0,291,272],
[265,263,257,275,253,260,0,265],
[290,298,285,277,269,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,279,272,260,253,256,260],
[280,0,268,282,266,264,263,259],
[272,283,0,272,265,265,239,273],
[279,269,279,0,279,274,263,281],
[291,285,286,272,0,273,282,274],
[298,287,286,277,278,0,282,270],
[295,288,312,288,269,269,0,288],
[291,292,278,270,277,281,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,326,280,273,295,314,325],
[249,0,295,250,278,314,296,309],
[225,256,0,211,278,264,287,258],
[271,301,340,0,300,262,312,306],
[278,273,273,251,0,290,310,282],
[256,237,287,289,261,0,294,256],
[237,255,264,239,241,257,0,268],
[226,242,293,245,269,295,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,260,282,253,281,271],
[270,0,268,269,296,273,265,279],
[273,283,0,291,314,260,282,278],
[291,282,260,0,303,278,268,276],
[269,255,237,248,0,255,253,271],
[298,278,291,273,296,0,260,292],
[270,286,269,283,298,291,0,288],
[280,272,273,275,280,259,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,277,283,281,282,266,285],
[268,0,275,271,267,298,251,271],
[274,276,0,262,257,285,255,284],
[268,280,289,0,276,297,271,279],
[270,284,294,275,0,291,278,267],
[269,253,266,254,260,0,252,268],
[285,300,296,280,273,299,0,298],
[266,280,267,272,284,283,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,283,244,302,293,238,283],
[321,0,318,282,331,273,291,316],
[268,233,0,250,289,220,263,252],
[307,269,301,0,351,326,308,314],
[249,220,262,200,0,249,246,265],
[258,278,331,225,302,0,287,313],
[313,260,288,243,305,264,0,275],
[268,235,299,237,286,238,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,287,282,273,292,281,277],
[273,0,274,270,265,280,268,285],
[264,277,0,275,266,290,257,292],
[269,281,276,0,250,291,283,286],
[278,286,285,301,0,284,272,298],
[259,271,261,260,267,0,259,265],
[270,283,294,268,279,292,0,288],
[274,266,259,265,253,286,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,277,249,276,271,272],
[272,0,282,273,273,269,282,278],
[268,269,0,261,260,254,262,272],
[274,278,290,0,263,274,281,280],
[302,278,291,288,0,278,275,287],
[275,282,297,277,273,0,267,294],
[280,269,289,270,276,284,0,290],
[279,273,279,271,264,257,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,206,412,343,206,206,343],
[277,0,414,207,207,139,207,206],
[345,137,0,206,274,207,137,206],
[139,344,345,0,275,139,276,205],
[208,344,277,276,0,208,277,138],
[345,412,344,412,343,0,275,274],
[345,344,414,275,274,276,0,275],
[208,345,345,346,413,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,291,247,275,273,280,298],
[276,0,283,241,262,243,250,270],
[260,268,0,265,248,282,248,271],
[304,310,286,0,282,264,283,278],
[276,289,303,269,0,264,280,283],
[278,308,269,287,287,0,260,297],
[271,301,303,268,271,291,0,272],
[253,281,280,273,268,254,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,266,272,271,263,271],
[278,0,273,264,274,280,287,278],
[283,278,0,277,283,289,281,269],
[285,287,274,0,302,279,303,262],
[279,277,268,249,0,261,265,255],
[280,271,262,272,290,0,269,257],
[288,264,270,248,286,282,0,260],
[280,273,282,289,296,294,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,257,245,254,269,268],
[275,0,271,259,252,256,271,256],
[285,280,0,267,250,269,299,274],
[294,292,284,0,286,274,293,273],
[306,299,301,265,0,282,294,293],
[297,295,282,277,269,0,298,307],
[282,280,252,258,257,253,0,261],
[283,295,277,278,258,244,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,284,273,285,267,268,284],
[249,0,261,261,249,247,271,250],
[267,290,0,262,267,275,268,251],
[278,290,289,0,282,263,258,273],
[266,302,284,269,0,265,256,262],
[284,304,276,288,286,0,266,262],
[283,280,283,293,295,285,0,273],
[267,301,300,278,289,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,275,303,286,264,300,276],
[224,0,245,237,241,219,262,238],
[276,306,0,320,255,269,269,279],
[248,314,231,0,238,259,292,294],
[265,310,296,313,0,295,265,273],
[287,332,282,292,256,0,283,278],
[251,289,282,259,286,268,0,278],
[275,313,272,257,278,273,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,280,258,289,247,279,279],
[292,0,295,281,270,278,275,278],
[271,256,0,263,275,259,258,248],
[293,270,288,0,274,254,269,254],
[262,281,276,277,0,254,266,276],
[304,273,292,297,297,0,278,268],
[272,276,293,282,285,273,0,250],
[272,273,303,297,275,283,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,283,298,288,274,268,264],
[298,0,293,308,294,295,283,266],
[268,258,0,279,275,278,260,251],
[253,243,272,0,267,264,250,250],
[263,257,276,284,0,271,261,242],
[277,256,273,287,280,0,254,249],
[283,268,291,301,290,297,0,282],
[287,285,300,301,309,302,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,254,235,264,249,256,296],
[314,0,265,253,315,273,240,301],
[297,286,0,254,279,251,261,290],
[316,298,297,0,318,287,268,299],
[287,236,272,233,0,243,228,275],
[302,278,300,264,308,0,295,299],
[295,311,290,283,323,256,0,302],
[255,250,261,252,276,252,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,291,282,257,259,290,275],
[280,0,289,294,263,278,299,286],
[260,262,0,271,253,253,287,252],
[269,257,280,0,243,251,299,278],
[294,288,298,308,0,263,320,282],
[292,273,298,300,288,0,302,270],
[261,252,264,252,231,249,0,256],
[276,265,299,273,269,281,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,278,271,279,264,291,271],
[303,0,285,288,299,273,293,265],
[273,266,0,281,278,269,289,284],
[280,263,270,0,284,295,269,285],
[272,252,273,267,0,296,294,281],
[287,278,282,256,255,0,291,279],
[260,258,262,282,257,260,0,277],
[280,286,267,266,270,272,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,273,266,275,277,264,271],
[280,0,248,259,276,263,261,282],
[278,303,0,261,272,289,284,274],
[285,292,290,0,291,270,280,287],
[276,275,279,260,0,282,271,282],
[274,288,262,281,269,0,273,272],
[287,290,267,271,280,278,0,284],
[280,269,277,264,269,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,252,264,279,269,264,270],
[286,0,274,269,279,287,263,287],
[299,277,0,269,286,279,282,300],
[287,282,282,0,285,289,261,287],
[272,272,265,266,0,267,271,277],
[282,264,272,262,284,0,268,261],
[287,288,269,290,280,283,0,292],
[281,264,251,264,274,290,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,275,274,282,282,249,268],
[269,0,295,273,267,293,272,271],
[276,256,0,281,273,255,286,265],
[277,278,270,0,273,267,261,267],
[269,284,278,278,0,288,273,276],
[269,258,296,284,263,0,282,277],
[302,279,265,290,278,269,0,271],
[283,280,286,284,275,274,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,272,292,264,273,265],
[270,0,266,276,258,261,243,251],
[271,285,0,293,307,297,297,251],
[279,275,258,0,232,243,250,269],
[259,293,244,319,0,273,237,253],
[287,290,254,308,278,0,289,280],
[278,308,254,301,314,262,0,264],
[286,300,300,282,298,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,272,289,288,277,275],
[263,0,257,271,277,264,262,282],
[279,294,0,286,278,291,274,287],
[279,280,265,0,269,280,273,275],
[262,274,273,282,0,275,278,291],
[263,287,260,271,276,0,273,282],
[274,289,277,278,273,278,0,286],
[276,269,264,276,260,269,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,284,292,285,259,252],
[282,0,262,285,265,293,274,254],
[283,289,0,282,289,264,275,280],
[267,266,269,0,272,284,263,270],
[259,286,262,279,0,270,306,256],
[266,258,287,267,281,0,251,272],
[292,277,276,288,245,300,0,274],
[299,297,271,281,295,279,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,274,253,270,274,267],
[272,0,268,266,262,265,282,261],
[286,283,0,293,269,279,292,272],
[277,285,258,0,259,268,274,287],
[298,289,282,292,0,271,288,281],
[281,286,272,283,280,0,264,275],
[277,269,259,277,263,287,0,268],
[284,290,279,264,270,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,293,292,285,283,265,299],
[259,0,292,298,298,270,283,294],
[258,259,0,297,283,274,250,291],
[259,253,254,0,255,255,236,265],
[266,253,268,296,0,289,255,282],
[268,281,277,296,262,0,251,282],
[286,268,301,315,296,300,0,302],
[252,257,260,286,269,269,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,288,263,284,287,280,270],
[259,0,272,266,277,284,269,264],
[263,279,0,259,277,286,261,230],
[288,285,292,0,265,303,292,281],
[267,274,274,286,0,293,283,265],
[264,267,265,248,258,0,282,258],
[271,282,290,259,268,269,0,258],
[281,287,321,270,286,293,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,369,369,277,185,369,367],
[182,0,366,367,275,275,182,275],
[182,185,0,367,93,93,0,275],
[182,184,184,0,184,92,184,274],
[274,276,458,367,0,277,184,182],
[366,276,458,459,274,0,184,182],
[182,369,551,367,367,367,0,367],
[184,276,276,277,369,369,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,283,288,285,272,297],
[278,0,259,257,298,291,297,287],
[277,292,0,284,281,289,269,282],
[268,294,267,0,301,280,278,309],
[263,253,270,250,0,278,265,288],
[266,260,262,271,273,0,254,283],
[279,254,282,273,286,297,0,293],
[254,264,269,242,263,268,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,290,257,278,247,269,274],
[269,0,307,277,298,297,275,275],
[261,244,0,261,286,239,257,268],
[294,274,290,0,281,252,282,275],
[273,253,265,270,0,263,270,254],
[304,254,312,299,288,0,299,294],
[282,276,294,269,281,252,0,267],
[277,276,283,276,297,257,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,271,260,263,258,269,252],
[284,0,290,270,259,277,275,268],
[280,261,0,260,257,252,275,258],
[291,281,291,0,275,275,272,275],
[288,292,294,276,0,262,288,282],
[293,274,299,276,289,0,291,270],
[282,276,276,279,263,260,0,263],
[299,283,293,276,269,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,289,290,265,278,295,283],
[259,0,283,267,258,263,270,281],
[262,268,0,268,285,265,284,291],
[261,284,283,0,262,260,278,261],
[286,293,266,289,0,279,272,287],
[273,288,286,291,272,0,296,281],
[256,281,267,273,279,255,0,290],
[268,270,260,290,264,270,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,290,302,275,309,263,255],
[294,0,266,281,257,258,236,270],
[261,285,0,274,302,225,235,312],
[249,270,277,0,229,238,258,250],
[276,294,249,322,0,262,276,296],
[242,293,326,313,289,0,251,291],
[288,315,316,293,275,300,0,312],
[296,281,239,301,255,260,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,259,250,263,266,275],
[277,0,276,275,285,290,293,289],
[281,275,0,275,277,288,287,292],
[292,276,276,0,273,281,270,283],
[301,266,274,278,0,279,288,292],
[288,261,263,270,272,0,267,277],
[285,258,264,281,263,284,0,262],
[276,262,259,268,259,274,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,274,271,283,277,276],
[273,0,265,276,260,268,255,257],
[270,286,0,274,276,266,273,267],
[277,275,277,0,257,262,252,273],
[280,291,275,294,0,272,272,285],
[268,283,285,289,279,0,276,259],
[274,296,278,299,279,275,0,278],
[275,294,284,278,266,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,242,278,278,278,287,279],
[294,0,269,276,289,289,285,294],
[309,282,0,271,308,298,294,294],
[273,275,280,0,313,309,303,317],
[273,262,243,238,0,265,283,277],
[273,262,253,242,286,0,282,272],
[264,266,257,248,268,269,0,285],
[272,257,257,234,274,279,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,302,273,287,282,275,289],
[277,0,302,284,281,273,270,284],
[249,249,0,262,267,286,275,277],
[278,267,289,0,285,275,279,275],
[264,270,284,266,0,282,259,275],
[269,278,265,276,269,0,279,269],
[276,281,276,272,292,272,0,285],
[262,267,274,276,276,282,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,272,247,328,232,229,241],
[300,0,322,279,350,252,220,248],
[279,229,0,233,323,254,268,266],
[304,272,318,0,343,288,282,294],
[223,201,228,208,0,235,205,199],
[319,299,297,263,316,0,338,336],
[322,331,283,269,346,213,0,270],
[310,303,285,257,352,215,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,207,345,227,273,280,184],
[273,0,248,250,344,178,296,203],
[344,303,0,346,343,279,254,231],
[206,301,205,0,297,275,253,229],
[324,207,208,254,0,297,322,232],
[278,373,272,276,254,0,322,250],
[271,255,297,298,229,229,0,277],
[367,348,320,322,319,301,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,223,240,307,258,274,344],
[278,0,274,223,310,262,262,312],
[328,277,0,309,328,260,262,350],
[311,328,242,0,276,328,291,295],
[244,241,223,275,0,265,280,207],
[293,289,291,223,286,0,276,279],
[277,289,289,260,271,275,0,206],
[207,239,201,256,344,272,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,263,303,279,271,290,297],
[264,0,282,258,273,268,289,289],
[288,269,0,279,281,273,313,284],
[248,293,272,0,275,265,268,280],
[272,278,270,276,0,292,296,315],
[280,283,278,286,259,0,271,285],
[261,262,238,283,255,280,0,263],
[254,262,267,271,236,266,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,309,322,276,277,267,259],
[283,0,300,352,273,291,307,310],
[242,251,0,236,189,260,300,247],
[229,199,315,0,277,258,294,260],
[275,278,362,274,0,310,251,270],
[274,260,291,293,241,0,285,240],
[284,244,251,257,300,266,0,238],
[292,241,304,291,281,311,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,264,269,274,286,262,271],
[284,0,256,275,270,273,265,254],
[287,295,0,302,296,275,279,292],
[282,276,249,0,262,257,267,248],
[277,281,255,289,0,271,251,274],
[265,278,276,294,280,0,245,280],
[289,286,272,284,300,306,0,280],
[280,297,259,303,277,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,314,248,277,296,265,278],
[243,0,275,254,225,284,236,263],
[237,276,0,221,225,250,250,263],
[303,297,330,0,289,290,257,311],
[274,326,326,262,0,294,321,317],
[255,267,301,261,257,0,273,293],
[286,315,301,294,230,278,0,297],
[273,288,288,240,234,258,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,366,274,366,182,366,460],
[183,0,457,183,457,182,184,184],
[185,94,0,0,274,185,278,186],
[277,368,551,0,274,459,369,369],
[185,94,277,277,0,276,278,278],
[369,369,366,92,275,0,184,278],
[185,367,273,182,273,367,0,276],
[91,367,365,182,273,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,285,274,281,302,278,283],
[293,0,268,314,249,316,291,258],
[266,283,0,292,264,270,291,253],
[277,237,259,0,230,255,291,247],
[270,302,287,321,0,331,321,282],
[249,235,281,296,220,0,267,277],
[273,260,260,260,230,284,0,261],
[268,293,298,304,269,274,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,260,254,282,258,266],
[270,0,277,275,267,285,263,273],
[277,274,0,272,277,294,282,282],
[291,276,279,0,262,272,250,257],
[297,284,274,289,0,297,269,266],
[269,266,257,279,254,0,268,272],
[293,288,269,301,282,283,0,273],
[285,278,269,294,285,279,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,305,276,244,269,274,289],
[295,0,293,229,262,213,296,293],
[246,258,0,233,219,221,265,271],
[275,322,318,0,287,239,344,294],
[307,289,332,264,0,275,310,292],
[282,338,330,312,276,0,260,293],
[277,255,286,207,241,291,0,266],
[262,258,280,257,259,258,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,288,259,271,292,283,289],
[263,0,280,244,254,272,257,276],
[263,271,0,247,243,244,253,270],
[292,307,304,0,282,300,272,282],
[280,297,308,269,0,281,285,291],
[259,279,307,251,270,0,269,287],
[268,294,298,279,266,282,0,285],
[262,275,281,269,260,264,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,283,269,286,281,273,280],
[265,0,266,276,259,262,262,256],
[268,285,0,261,281,297,285,277],
[282,275,290,0,267,284,278,282],
[265,292,270,284,0,310,278,274],
[270,289,254,267,241,0,263,267],
[278,289,266,273,273,288,0,259],
[271,295,274,269,277,284,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,249,251,271,259,263,252],
[259,0,256,247,284,249,258,261],
[302,295,0,271,305,268,279,276],
[300,304,280,0,296,259,281,289],
[280,267,246,255,0,238,266,260],
[292,302,283,292,313,0,271,284],
[288,293,272,270,285,280,0,288],
[299,290,275,262,291,267,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,266,289,279,267,290,268],
[290,0,268,284,271,277,270,244],
[285,283,0,278,274,271,268,262],
[262,267,273,0,276,283,263,251],
[272,280,277,275,0,255,262,267],
[284,274,280,268,296,0,277,271],
[261,281,283,288,289,274,0,279],
[283,307,289,300,284,280,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,278,266,286,280,263,271],
[281,0,268,281,294,270,278,279],
[273,283,0,273,301,278,294,284],
[285,270,278,0,284,264,293,276],
[265,257,250,267,0,241,268,268],
[271,281,273,287,310,0,279,282],
[288,273,257,258,283,272,0,273],
[280,272,267,275,283,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,302,334,291,253,308,327],
[221,0,264,323,269,247,281,341],
[249,287,0,318,305,261,262,315],
[217,228,233,0,308,260,262,306],
[260,282,246,243,0,277,291,350],
[298,304,290,291,274,0,324,369],
[243,270,289,289,260,227,0,319],
[224,210,236,245,201,182,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,312,307,267,304,310,302],
[252,0,281,257,249,268,259,275],
[239,270,0,286,250,259,289,251],
[244,294,265,0,259,284,273,250],
[284,302,301,292,0,286,267,290],
[247,283,292,267,265,0,262,266],
[241,292,262,278,284,289,0,264],
[249,276,300,301,261,285,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,335,258,303,253,306,298],
[239,0,287,261,284,260,263,216],
[216,264,0,231,312,256,272,216],
[293,290,320,0,289,281,259,278],
[248,267,239,262,0,247,204,253],
[298,291,295,270,304,0,298,255],
[245,288,279,292,347,253,0,246],
[253,335,335,273,298,296,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,301,297,278,288,283,265],
[252,0,275,276,271,267,268,269],
[250,276,0,274,256,278,279,258],
[254,275,277,0,254,290,286,266],
[273,280,295,297,0,283,285,268],
[263,284,273,261,268,0,284,287],
[268,283,272,265,266,267,0,271],
[286,282,293,285,283,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,244,247,296,271,251,312],
[320,0,324,266,313,271,304,331],
[307,227,0,238,305,261,278,288],
[304,285,313,0,315,274,273,333],
[255,238,246,236,0,207,239,277],
[280,280,290,277,344,0,269,299],
[300,247,273,278,312,282,0,282],
[239,220,263,218,274,252,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,263,271,261,246,264,264],
[279,0,281,273,264,262,257,243],
[288,270,0,294,284,270,275,284],
[280,278,257,0,253,288,257,249],
[290,287,267,298,0,245,283,260],
[305,289,281,263,306,0,282,287],
[287,294,276,294,268,269,0,275],
[287,308,267,302,291,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,249,239,258,283,256,277],
[273,0,249,245,249,276,254,276],
[302,302,0,276,274,275,257,274],
[312,306,275,0,283,315,300,306],
[293,302,277,268,0,274,259,290],
[268,275,276,236,277,0,251,289],
[295,297,294,251,292,300,0,285],
[274,275,277,245,261,262,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,264,284,279,264,255,247],
[305,0,253,286,292,290,282,260],
[287,298,0,279,300,271,276,283],
[267,265,272,0,275,272,271,275],
[272,259,251,276,0,259,243,252],
[287,261,280,279,292,0,250,250],
[296,269,275,280,308,301,0,258],
[304,291,268,276,299,301,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,297,237,298,284,280,264],
[244,0,278,226,276,260,270,240],
[254,273,0,228,282,263,262,240],
[314,325,323,0,319,298,268,271],
[253,275,269,232,0,261,260,246],
[267,291,288,253,290,0,254,277],
[271,281,289,283,291,297,0,236],
[287,311,311,280,305,274,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,273,278,269,302,293,279],
[312,0,294,292,294,306,284,263],
[278,257,0,287,288,311,269,282],
[273,259,264,0,262,295,275,273],
[282,257,263,289,0,304,275,296],
[249,245,240,256,247,0,249,254],
[258,267,282,276,276,302,0,290],
[272,288,269,278,255,297,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,287,291,298,266,287],
[268,0,262,273,299,266,256,258],
[273,289,0,265,299,281,263,278],
[264,278,286,0,309,284,273,276],
[260,252,252,242,0,254,257,259],
[253,285,270,267,297,0,278,269],
[285,295,288,278,294,273,0,273],
[264,293,273,275,292,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,269,257,271,275,273,264],
[264,0,260,246,257,264,256,237],
[282,291,0,266,289,276,272,265],
[294,305,285,0,268,287,280,277],
[280,294,262,283,0,280,272,249],
[276,287,275,264,271,0,267,263],
[278,295,279,271,279,284,0,278],
[287,314,286,274,302,288,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,266,262,270,265,250],
[287,0,277,264,247,268,263,267],
[286,274,0,279,259,254,276,269],
[285,287,272,0,272,275,266,283],
[289,304,292,279,0,265,274,275],
[281,283,297,276,286,0,279,274],
[286,288,275,285,277,272,0,277],
[301,284,282,268,276,277,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,273,276,242,269,257,281],
[285,0,269,218,232,280,241,285],
[278,282,0,270,255,259,274,248],
[275,333,281,0,278,310,289,268],
[309,319,296,273,0,280,263,308],
[282,271,292,241,271,0,267,296],
[294,310,277,262,288,284,0,277],
[270,266,303,283,243,255,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,253,287,255,288,277,258],
[265,0,291,257,276,273,296,253],
[298,260,0,275,285,307,301,259],
[264,294,276,0,263,265,279,272],
[296,275,266,288,0,283,284,282],
[263,278,244,286,268,0,259,252],
[274,255,250,272,267,292,0,263],
[293,298,292,279,269,299,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,281,264,300,293,294,289],
[220,0,270,233,280,248,247,259],
[270,281,0,241,268,258,262,281],
[287,318,310,0,311,275,304,332],
[251,271,283,240,0,255,240,270],
[258,303,293,276,296,0,252,292],
[257,304,289,247,311,299,0,281],
[262,292,270,219,281,259,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,245,323,289,237,281,246],
[257,0,223,296,261,197,270,261],
[306,328,0,331,310,258,302,270],
[228,255,220,0,219,221,245,232],
[262,290,241,332,0,265,299,284],
[314,354,293,330,286,0,304,257],
[270,281,249,306,252,247,0,287],
[305,290,281,319,267,294,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,260,226,249,268,270,235],
[319,0,275,273,289,310,273,281],
[291,276,0,267,281,255,245,280],
[325,278,284,0,303,311,306,266],
[302,262,270,248,0,277,262,252],
[283,241,296,240,274,0,271,279],
[281,278,306,245,289,280,0,271],
[316,270,271,285,299,272,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,279,293,279,297,299],
[267,0,291,286,281,267,292,298],
[277,260,0,270,283,282,294,272],
[272,265,281,0,263,268,290,287],
[258,270,268,288,0,276,270,295],
[272,284,269,283,275,0,275,308],
[254,259,257,261,281,276,0,294],
[252,253,279,264,256,243,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,267,262,262,280,257,244],
[261,0,252,263,303,305,282,265],
[284,299,0,280,302,301,273,282],
[289,288,271,0,310,330,287,289],
[289,248,249,241,0,272,264,258],
[271,246,250,221,279,0,265,226],
[294,269,278,264,287,286,0,297],
[307,286,269,262,293,325,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,286,289,293,293,280,299],
[276,0,294,293,295,283,272,297],
[265,257,0,275,285,277,266,283],
[262,258,276,0,275,280,272,292],
[258,256,266,276,0,269,243,274],
[258,268,274,271,282,0,258,284],
[271,279,285,279,308,293,0,292],
[252,254,268,259,277,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,278,278,286,276,249,263],
[280,0,289,271,303,287,275,290],
[273,262,0,270,306,276,287,272],
[273,280,281,0,288,273,275,277],
[265,248,245,263,0,261,261,262],
[275,264,275,278,290,0,288,267],
[302,276,264,276,290,263,0,278],
[288,261,279,274,289,284,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,245,310,287,314,266,310],
[287,0,362,269,339,364,340,311],
[306,189,0,213,263,238,264,287],
[241,282,338,0,338,288,338,334],
[264,212,288,213,0,240,264,284],
[237,187,313,263,311,0,289,287],
[285,211,287,213,287,262,0,332],
[241,240,264,217,267,264,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,279,295,280,291,272,281],
[253,0,263,282,255,292,249,252],
[272,288,0,305,258,305,271,295],
[256,269,246,0,258,286,254,244],
[271,296,293,293,0,300,279,267],
[260,259,246,265,251,0,252,249],
[279,302,280,297,272,299,0,264],
[270,299,256,307,284,302,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,297,257,281,287,257,267],
[264,0,249,273,272,299,224,243],
[254,302,0,272,294,297,261,230],
[294,278,279,0,304,297,263,288],
[270,279,257,247,0,255,238,252],
[264,252,254,254,296,0,253,250],
[294,327,290,288,313,298,0,275],
[284,308,321,263,299,301,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,269,288,279,272,271,277],
[268,0,276,292,283,271,263,293],
[282,275,0,295,280,276,275,289],
[263,259,256,0,254,259,264,264],
[272,268,271,297,0,268,259,259],
[279,280,275,292,283,0,267,285],
[280,288,276,287,292,284,0,268],
[274,258,262,287,292,266,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,295,286,285,314,265,273],
[286,0,274,273,304,268,272,277],
[256,277,0,271,281,299,246,270],
[265,278,280,0,303,288,292,275],
[266,247,270,248,0,252,251,237],
[237,283,252,263,299,0,266,253],
[286,279,305,259,300,285,0,277],
[278,274,281,276,314,298,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,267,265,282,268,289,281],
[263,0,268,264,262,267,273,248],
[284,283,0,262,281,284,278,272],
[286,287,289,0,293,315,299,269],
[269,289,270,258,0,292,279,259],
[283,284,267,236,259,0,261,249],
[262,278,273,252,272,290,0,251],
[270,303,279,282,292,302,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,279,263,286,304,280,295],
[276,0,294,284,274,303,274,280],
[272,257,0,244,255,280,248,270],
[288,267,307,0,276,303,258,292],
[265,277,296,275,0,287,255,269],
[247,248,271,248,264,0,239,285],
[271,277,303,293,296,312,0,287],
[256,271,281,259,282,266,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,285,232,238,312,254,291],
[252,0,277,264,228,287,264,285],
[266,274,0,283,263,264,284,317],
[319,287,268,0,309,278,289,286],
[313,323,288,242,0,310,295,279],
[239,264,287,273,241,0,292,296],
[297,287,267,262,256,259,0,259],
[260,266,234,265,272,255,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,277,293,299,287,273,308],
[298,0,269,296,285,283,311,306],
[274,282,0,290,281,274,289,284],
[258,255,261,0,277,264,278,286],
[252,266,270,274,0,303,283,291],
[264,268,277,287,248,0,283,284],
[278,240,262,273,268,268,0,300],
[243,245,267,265,260,267,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,274,283,274,272,275],
[273,0,265,267,266,293,260,264],
[274,286,0,271,259,255,280,278],
[277,284,280,0,255,289,270,270],
[268,285,292,296,0,262,297,273],
[277,258,296,262,289,0,255,268],
[279,291,271,281,254,296,0,287],
[276,287,273,281,278,283,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,284,290,270,284,286,287],
[270,0,288,282,282,277,291,290],
[267,263,0,293,279,258,291,291],
[261,269,258,0,252,269,266,273],
[281,269,272,299,0,274,286,289],
[267,274,293,282,277,0,287,280],
[265,260,260,285,265,264,0,270],
[264,261,260,278,262,271,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,302,268,274,278,304,269],
[280,0,303,254,289,322,309,281],
[249,248,0,292,280,288,304,251],
[283,297,259,0,326,294,322,271],
[277,262,271,225,0,281,289,226],
[273,229,263,257,270,0,290,260],
[247,242,247,229,262,261,0,245],
[282,270,300,280,325,291,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,274,289,249,256,252,272],
[304,0,287,268,260,277,280,316],
[277,264,0,262,265,261,258,284],
[262,283,289,0,287,282,251,287],
[302,291,286,264,0,279,266,302],
[295,274,290,269,272,0,244,286],
[299,271,293,300,285,307,0,286],
[279,235,267,264,249,265,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,275,277,290,258,287],
[273,0,302,279,288,273,278,292],
[257,249,0,261,255,253,255,274],
[276,272,290,0,285,272,269,298],
[274,263,296,266,0,273,260,265],
[261,278,298,279,278,0,273,284],
[293,273,296,282,291,278,0,281],
[264,259,277,253,286,267,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,239,242,239,243,267,248],
[281,0,263,254,250,252,271,272],
[312,288,0,276,267,259,299,290],
[309,297,275,0,270,295,291,280],
[312,301,284,281,0,273,278,283],
[308,299,292,256,278,0,305,286],
[284,280,252,260,273,246,0,290],
[303,279,261,271,268,265,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,264,265,276,243,284,286],
[295,0,302,262,278,255,302,310],
[287,249,0,253,287,257,279,287],
[286,289,298,0,282,254,304,287],
[275,273,264,269,0,274,273,291],
[308,296,294,297,277,0,294,266],
[267,249,272,247,278,257,0,277],
[265,241,264,264,260,285,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,249,250,259,265,255,256],
[292,0,256,288,274,287,272,296],
[302,295,0,290,290,296,270,301],
[301,263,261,0,259,277,266,285],
[292,277,261,292,0,294,261,275],
[286,264,255,274,257,0,291,285],
[296,279,281,285,290,260,0,278],
[295,255,250,266,276,266,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,302,269,271,283,277,277],
[276,0,268,254,274,274,289,261],
[249,283,0,244,267,264,253,240],
[282,297,307,0,272,294,271,289],
[280,277,284,279,0,279,267,260],
[268,277,287,257,272,0,250,261],
[274,262,298,280,284,301,0,289],
[274,290,311,262,291,290,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,263,250,236,257,266,257],
[304,0,299,288,277,275,275,298],
[288,252,0,285,237,259,264,284],
[301,263,266,0,263,259,251,288],
[315,274,314,288,0,279,295,310],
[294,276,292,292,272,0,288,307],
[285,276,287,300,256,263,0,306],
[294,253,267,263,241,244,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,282,283,274,269,260],
[277,0,264,290,298,262,259,255],
[283,287,0,287,279,284,258,279],
[269,261,264,0,278,236,269,268],
[268,253,272,273,0,267,255,252],
[277,289,267,315,284,0,280,255],
[282,292,293,282,296,271,0,265],
[291,296,272,283,299,296,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,291,258,323,249,308,273],
[261,0,308,319,317,299,301,282],
[260,243,0,252,318,244,252,232],
[293,232,299,0,314,282,284,252],
[228,234,233,237,0,226,248,250],
[302,252,307,269,325,0,294,255],
[243,250,299,267,303,257,0,269],
[278,269,319,299,301,296,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,272,301,266,278,281,286],
[249,0,260,262,257,264,254,274],
[279,291,0,286,254,291,281,277],
[250,289,265,0,250,261,273,272],
[285,294,297,301,0,274,274,263],
[273,287,260,290,277,0,271,282],
[270,297,270,278,277,280,0,275],
[265,277,274,279,288,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,228,290,267,275,251,254],
[319,0,286,364,294,314,255,322],
[323,265,0,326,251,257,288,310],
[261,187,225,0,251,211,227,250],
[284,257,300,300,0,254,287,297],
[276,237,294,340,297,0,288,309],
[300,296,263,324,264,263,0,317],
[297,229,241,301,254,242,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,317,276,258,259,280,270],
[261,0,308,276,278,274,258,276],
[234,243,0,250,262,265,245,249],
[275,275,301,0,253,256,264,272],
[293,273,289,298,0,289,293,287],
[292,277,286,295,262,0,288,272],
[271,293,306,287,258,263,0,278],
[281,275,302,279,264,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,212,244,259,266,246,255],
[272,0,249,247,247,284,274,280],
[339,302,0,288,287,275,297,292],
[307,304,263,0,282,287,294,295],
[292,304,264,269,0,270,290,309],
[285,267,276,264,281,0,255,287],
[305,277,254,257,261,296,0,253],
[296,271,259,256,242,264,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,250,281,250,262,264,278],
[258,0,252,295,264,263,248,253],
[301,299,0,296,282,283,272,279],
[270,256,255,0,252,255,259,262],
[301,287,269,299,0,285,291,272],
[289,288,268,296,266,0,271,265],
[287,303,279,292,260,280,0,267],
[273,298,272,289,279,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,319,274,298,307,354,323],
[253,0,243,256,260,292,327,241],
[232,308,0,263,286,278,344,276],
[277,295,288,0,268,280,335,255],
[253,291,265,283,0,280,308,280],
[244,259,273,271,271,0,316,264],
[197,224,207,216,243,235,0,224],
[228,310,275,296,271,287,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,288,278,270,271,280,276],
[257,0,277,279,246,268,264,279],
[263,274,0,271,262,268,279,283],
[273,272,280,0,284,289,264,286],
[281,305,289,267,0,294,271,281],
[280,283,283,262,257,0,273,295],
[271,287,272,287,280,278,0,272],
[275,272,268,265,270,256,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,259,268,271,268,277,278],
[263,0,267,285,266,261,261,257],
[292,284,0,282,267,279,278,272],
[283,266,269,0,282,274,271,267],
[280,285,284,269,0,274,263,274],
[283,290,272,277,277,0,283,287],
[274,290,273,280,288,268,0,281],
[273,294,279,284,277,264,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,265,267,264,272,266,283],
[264,0,245,255,240,261,251,239],
[286,306,0,275,273,267,264,266],
[284,296,276,0,273,309,283,297],
[287,311,278,278,0,298,274,266],
[279,290,284,242,253,0,267,273],
[285,300,287,268,277,284,0,271],
[268,312,285,254,285,278,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,266,273,289,282,280,299],
[278,0,278,270,291,283,272,312],
[285,273,0,280,286,289,279,295],
[278,281,271,0,307,296,275,299],
[262,260,265,244,0,289,266,296],
[269,268,262,255,262,0,258,267],
[271,279,272,276,285,293,0,260],
[252,239,256,252,255,284,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,283,271,266,280,281],
[282,0,275,279,249,291,269,293],
[277,276,0,275,254,287,276,299],
[268,272,276,0,254,301,255,270],
[280,302,297,297,0,295,274,297],
[285,260,264,250,256,0,275,285],
[271,282,275,296,277,276,0,277],
[270,258,252,281,254,266,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,260,245,252,282,264],
[281,0,273,281,265,251,284,293],
[286,278,0,253,258,276,289,295],
[291,270,298,0,284,281,298,274],
[306,286,293,267,0,283,276,290],
[299,300,275,270,268,0,283,307],
[269,267,262,253,275,268,0,279],
[287,258,256,277,261,244,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,275,266,270,292,255],
[282,0,278,274,269,283,297,260],
[275,273,0,274,276,280,281,278],
[276,277,277,0,255,278,281,262],
[285,282,275,296,0,293,302,260],
[281,268,271,273,258,0,282,249],
[259,254,270,270,249,269,0,247],
[296,291,273,289,291,302,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,271,288,285,287,271,291],
[279,0,254,288,276,280,261,297],
[280,297,0,292,270,296,277,290],
[263,263,259,0,244,257,251,264],
[266,275,281,307,0,279,262,296],
[264,271,255,294,272,0,263,280],
[280,290,274,300,289,288,0,278],
[260,254,261,287,255,271,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,282,287,244,287,254,271],
[258,0,255,275,279,278,267,267],
[269,296,0,279,280,262,273,250],
[264,276,272,0,266,313,232,243],
[307,272,271,285,0,311,288,245],
[264,273,289,238,240,0,264,277],
[297,284,278,319,263,287,0,265],
[280,284,301,308,306,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,287,300,262,279,270,301],
[278,0,275,278,268,266,289,284],
[264,276,0,275,263,271,266,275],
[251,273,276,0,248,267,266,261],
[289,283,288,303,0,271,288,305],
[272,285,280,284,280,0,268,287],
[281,262,285,285,263,283,0,266],
[250,267,276,290,246,264,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,243,233,273,266,282,226],
[307,0,292,268,289,296,281,285],
[308,259,0,265,299,269,280,247],
[318,283,286,0,285,314,288,275],
[278,262,252,266,0,284,294,258],
[285,255,282,237,267,0,271,272],
[269,270,271,263,257,280,0,267],
[325,266,304,276,293,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,293,304,285,284,277,269],
[246,0,264,296,289,267,259,287],
[258,287,0,285,273,281,265,277],
[247,255,266,0,255,251,257,265],
[266,262,278,296,0,280,256,268],
[267,284,270,300,271,0,269,279],
[274,292,286,294,295,282,0,288],
[282,264,274,286,283,272,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,241,276,243,257,250,278],
[291,0,273,261,269,280,274,272],
[310,278,0,293,265,269,291,259],
[275,290,258,0,307,275,273,257],
[308,282,286,244,0,269,282,265],
[294,271,282,276,282,0,294,281],
[301,277,260,278,269,257,0,246],
[273,279,292,294,286,270,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,291,267,284,269,269,264],
[275,0,309,260,272,288,292,288],
[260,242,0,251,274,261,269,272],
[284,291,300,0,264,285,296,287],
[267,279,277,287,0,281,284,275],
[282,263,290,266,270,0,299,285],
[282,259,282,255,267,252,0,265],
[287,263,279,264,276,266,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,306,295,299,312,269,285],
[227,0,256,255,241,257,256,256],
[245,295,0,263,293,300,307,290],
[256,296,288,0,277,305,274,297],
[252,310,258,274,0,273,269,288],
[239,294,251,246,278,0,233,226],
[282,295,244,277,282,318,0,252],
[266,295,261,254,263,325,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,254,277,285,235,300,285],
[273,0,281,310,293,301,290,261],
[297,270,0,312,310,276,272,264],
[274,241,239,0,264,291,243,256],
[266,258,241,287,0,271,250,261],
[316,250,275,260,280,0,267,280],
[251,261,279,308,301,284,0,229],
[266,290,287,295,290,271,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,300,249,243,253,285,301],
[267,0,272,217,209,233,265,255],
[251,279,0,240,251,255,264,268],
[302,334,311,0,220,262,284,302],
[308,342,300,331,0,313,272,332],
[298,318,296,289,238,0,295,322],
[266,286,287,267,279,256,0,312],
[250,296,283,249,219,229,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,250,286,284,259,285,272],
[282,0,244,265,289,271,272,259],
[301,307,0,297,312,289,273,288],
[265,286,254,0,279,267,258,275],
[267,262,239,272,0,259,262,258],
[292,280,262,284,292,0,269,278],
[266,279,278,293,289,282,0,286],
[279,292,263,276,293,273,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,286,282,284,307,270,296],
[267,0,270,260,282,288,293,286],
[265,281,0,230,238,265,255,263],
[269,291,321,0,286,268,280,281],
[267,269,313,265,0,299,285,298],
[244,263,286,283,252,0,270,285],
[281,258,296,271,266,281,0,279],
[255,265,288,270,253,266,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,275,297,277,282,298,283],
[292,0,290,293,268,261,286,272],
[276,261,0,280,267,268,280,283],
[254,258,271,0,265,253,268,275],
[274,283,284,286,0,236,284,253],
[269,290,283,298,315,0,266,276],
[253,265,271,283,267,285,0,271],
[268,279,268,276,298,275,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,247,288,280,267,303,285],
[269,0,277,287,289,271,275,266],
[304,274,0,297,320,284,279,275],
[263,264,254,0,286,274,282,256],
[271,262,231,265,0,267,269,238],
[284,280,267,277,284,0,271,267],
[248,276,272,269,282,280,0,254],
[266,285,276,295,313,284,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,295,267,263,296,296,282],
[265,0,253,262,271,257,286,261],
[256,298,0,274,260,293,283,276],
[284,289,277,0,305,311,283,275],
[288,280,291,246,0,270,303,292],
[255,294,258,240,281,0,249,274],
[255,265,268,268,248,302,0,287],
[269,290,275,276,259,277,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,254,249,247,270,256,276],
[275,0,252,262,262,290,280,280],
[297,299,0,281,269,292,279,275],
[302,289,270,0,283,277,259,279],
[304,289,282,268,0,291,282,275],
[281,261,259,274,260,0,286,272],
[295,271,272,292,269,265,0,291],
[275,271,276,272,276,279,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,236,264,255,295,259,237],
[276,0,305,278,276,286,268,279],
[315,246,0,276,278,267,217,276],
[287,273,275,0,256,270,255,261],
[296,275,273,295,0,302,271,268],
[256,265,284,281,249,0,230,261],
[292,283,334,296,280,321,0,269],
[314,272,275,290,283,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,278,248,271,261,258,275],
[303,0,292,288,317,295,302,275],
[273,259,0,261,283,283,291,278],
[303,263,290,0,298,319,292,263],
[280,234,268,253,0,262,265,274],
[290,256,268,232,289,0,277,254],
[293,249,260,259,286,274,0,274],
[276,276,273,288,277,297,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,262,302,260,281,281,271],
[284,0,271,283,275,271,290,295],
[289,280,0,290,282,274,281,271],
[249,268,261,0,250,257,258,270],
[291,276,269,301,0,294,273,275],
[270,280,277,294,257,0,269,260],
[270,261,270,293,278,282,0,263],
[280,256,280,281,276,291,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,301,323,255,280,281,271],
[266,0,284,266,285,264,258,260],
[250,267,0,288,264,270,275,274],
[228,285,263,0,283,249,261,279],
[296,266,287,268,0,263,307,275],
[271,287,281,302,288,0,298,296],
[270,293,276,290,244,253,0,254],
[280,291,277,272,276,255,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,254,269,288,281,270,275],
[285,0,277,286,269,280,271,284],
[297,274,0,274,267,296,270,284],
[282,265,277,0,267,263,272,275],
[263,282,284,284,0,264,276,288],
[270,271,255,288,287,0,279,290],
[281,280,281,279,275,272,0,281],
[276,267,267,276,263,261,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,292,281,265,266,269,276],
[259,0,283,267,257,269,261,281],
[259,268,0,284,255,241,248,282],
[270,284,267,0,250,258,248,268],
[286,294,296,301,0,291,281,270],
[285,282,310,293,260,0,277,293],
[282,290,303,303,270,274,0,316],
[275,270,269,283,281,258,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,267,317,300,289,278,304],
[265,0,298,308,301,269,271,285],
[284,253,0,304,292,269,289,271],
[234,243,247,0,264,232,241,251],
[251,250,259,287,0,248,251,261],
[262,282,282,319,303,0,266,278],
[273,280,262,310,300,285,0,294],
[247,266,280,300,290,273,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,302,279,295,299,274,286],
[266,0,276,270,268,257,263,279],
[249,275,0,274,287,287,250,289],
[272,281,277,0,282,264,247,270],
[256,283,264,269,0,272,267,278],
[252,294,264,287,279,0,277,280],
[277,288,301,304,284,274,0,277],
[265,272,262,281,273,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,247,268,252,252,283,253],
[287,0,253,265,251,259,271,241],
[304,298,0,296,296,275,300,296],
[283,286,255,0,283,248,285,284],
[299,300,255,268,0,269,280,264],
[299,292,276,303,282,0,287,275],
[268,280,251,266,271,264,0,256],
[298,310,255,267,287,276,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,287,268,257,271,284],
[278,0,252,272,272,278,259,288],
[280,299,0,267,252,261,264,263],
[264,279,284,0,256,254,266,252],
[283,279,299,295,0,283,266,308],
[294,273,290,297,268,0,279,285],
[280,292,287,285,285,272,0,296],
[267,263,288,299,243,266,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,278,267,275,260,269,253],
[272,0,269,276,275,280,270,281],
[273,282,0,269,275,259,261,245],
[284,275,282,0,282,278,289,254],
[276,276,276,269,0,259,257,257],
[291,271,292,273,292,0,292,271],
[282,281,290,262,294,259,0,264],
[298,270,306,297,294,280,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,267,255,254,247,253,243],
[290,0,295,283,287,273,269,284],
[284,256,0,265,273,274,276,277],
[296,268,286,0,278,263,275,274],
[297,264,278,273,0,270,270,273],
[304,278,277,288,281,0,269,275],
[298,282,275,276,281,282,0,284],
[308,267,274,277,278,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,283,288,289,292,286,293],
[316,0,282,279,305,264,261,325],
[268,269,0,242,248,257,244,307],
[263,272,309,0,304,342,291,328],
[262,246,303,247,0,314,307,303],
[259,287,294,209,237,0,275,268],
[265,290,307,260,244,276,0,281],
[258,226,244,223,248,283,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,300,275,295,272,299,287],
[279,0,276,283,301,273,285,281],
[251,275,0,275,278,275,274,285],
[276,268,276,0,284,276,284,293],
[256,250,273,267,0,268,271,262],
[279,278,276,275,283,0,286,281],
[252,266,277,267,280,265,0,269],
[264,270,266,258,289,270,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,256,287,297,276,285,286],
[271,0,261,257,253,258,265,261],
[295,290,0,273,288,275,265,282],
[264,294,278,0,269,281,276,263],
[254,298,263,282,0,280,286,268],
[275,293,276,270,271,0,260,278],
[266,286,286,275,265,291,0,266],
[265,290,269,288,283,273,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,265,260,275,256,266,248],
[292,0,260,285,301,276,302,293],
[286,291,0,254,300,259,289,269],
[291,266,297,0,301,299,310,290],
[276,250,251,250,0,241,258,251],
[295,275,292,252,310,0,292,255],
[285,249,262,241,293,259,0,254],
[303,258,282,261,300,296,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,269,276,265,291,275,256],
[304,0,283,259,280,297,296,279],
[282,268,0,263,267,282,246,261],
[275,292,288,0,291,320,289,271],
[286,271,284,260,0,304,289,259],
[260,254,269,231,247,0,263,242],
[276,255,305,262,262,288,0,259],
[295,272,290,280,292,309,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,292,305,276,279,288],
[283,0,272,295,275,300,278,303],
[272,279,0,308,298,274,282,289],
[259,256,243,0,279,275,250,254],
[246,276,253,272,0,263,275,281],
[275,251,277,276,288,0,257,277],
[272,273,269,301,276,294,0,288],
[263,248,262,297,270,274,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,287,274,279,293,294,287],
[248,0,254,270,265,247,274,272],
[264,297,0,284,281,294,309,298],
[277,281,267,0,271,266,259,283],
[272,286,270,280,0,290,282,289],
[258,304,257,285,261,0,283,290],
[257,277,242,292,269,268,0,283],
[264,279,253,268,262,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,266,298,278,272,324,295],
[268,0,263,273,279,277,278,288],
[285,288,0,299,289,269,320,324],
[253,278,252,0,258,264,271,268],
[273,272,262,293,0,309,302,305],
[279,274,282,287,242,0,293,292],
[227,273,231,280,249,258,0,298],
[256,263,227,283,246,259,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,296,270,260,296,278,275],
[306,0,306,288,287,274,311,319],
[255,245,0,262,277,262,277,284],
[281,263,289,0,275,298,274,276],
[291,264,274,276,0,264,254,279],
[255,277,289,253,287,0,291,303],
[273,240,274,277,297,260,0,297],
[276,232,267,275,272,248,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,265,275,253,254,266,261],
[299,0,281,299,276,282,273,273],
[286,270,0,281,248,264,262,263],
[276,252,270,0,264,265,259,267],
[298,275,303,287,0,278,272,278],
[297,269,287,286,273,0,274,283],
[285,278,289,292,279,277,0,275],
[290,278,288,284,273,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,250,267,268,292,277,254],
[292,0,286,294,270,293,281,296],
[301,265,0,292,316,328,323,279],
[284,257,259,0,273,287,279,272],
[283,281,235,278,0,282,308,264],
[259,258,223,264,269,0,269,269],
[274,270,228,272,243,282,0,255],
[297,255,272,279,287,282,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,265,298,277,259,247,255],
[297,0,259,294,287,244,287,283],
[286,292,0,296,276,267,279,260],
[253,257,255,0,272,248,277,254],
[274,264,275,279,0,270,270,267],
[292,307,284,303,281,0,293,262],
[304,264,272,274,281,258,0,255],
[296,268,291,297,284,289,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,275,292,285,266,274,258],
[284,0,290,290,304,280,287,264],
[276,261,0,265,274,287,253,271],
[259,261,286,0,306,271,278,287],
[266,247,277,245,0,273,284,269],
[285,271,264,280,278,0,270,265],
[277,264,298,273,267,281,0,277],
[293,287,280,264,282,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,291,289,285,290,235,261],
[273,0,244,263,294,259,254,266],
[260,307,0,300,289,286,289,314],
[262,288,251,0,294,266,265,271],
[266,257,262,257,0,275,246,242],
[261,292,265,285,276,0,252,308],
[316,297,262,286,305,299,0,310],
[290,285,237,280,309,243,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,274,0,136,413,274,139],
[551,0,274,139,275,413,413,139],
[277,277,0,277,413,275,413,277],
[551,412,274,0,551,413,413,413],
[415,276,138,0,0,413,138,139],
[138,138,276,138,138,0,138,138],
[277,138,138,138,413,413,0,277],
[412,412,274,138,412,413,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,284,281,281,305,275,278],
[248,0,277,263,250,304,290,268],
[267,274,0,263,249,278,271,273],
[270,288,288,0,249,312,292,287],
[270,301,302,302,0,313,291,298],
[246,247,273,239,238,0,239,256],
[276,261,280,259,260,312,0,271],
[273,283,278,264,253,295,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,280,273,272,253,275,298],
[285,0,264,280,278,276,289,268],
[271,287,0,301,283,286,287,299],
[278,271,250,0,249,287,292,278],
[279,273,268,302,0,276,292,277],
[298,275,265,264,275,0,315,282],
[276,262,264,259,259,236,0,254],
[253,283,252,273,274,269,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,294,294,274,293,291],
[269,0,275,273,258,272,284,295],
[263,276,0,279,282,268,287,292],
[257,278,272,0,265,275,292,299],
[257,293,269,286,0,283,273,269],
[277,279,283,276,268,0,285,294],
[258,267,264,259,278,266,0,284],
[260,256,259,252,282,257,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,304,263,283,269,283,284],
[270,0,296,268,280,271,293,281],
[247,255,0,245,260,252,263,263],
[288,283,306,0,274,294,291,297],
[268,271,291,277,0,275,275,278],
[282,280,299,257,276,0,281,274],
[268,258,288,260,276,270,0,275],
[267,270,288,254,273,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,320,276,265,265,263,264],
[296,0,296,276,292,270,278,278],
[231,255,0,247,243,248,245,266],
[275,275,304,0,284,280,281,274],
[286,259,308,267,0,276,282,267],
[286,281,303,271,275,0,279,286],
[288,273,306,270,269,272,0,267],
[287,273,285,277,284,265,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,304,277,304,297,302,290],
[276,0,307,247,274,267,266,253],
[247,244,0,239,258,235,262,239],
[274,304,312,0,297,267,302,273],
[247,277,293,254,0,273,283,267],
[254,284,316,284,278,0,289,286],
[249,285,289,249,268,262,0,267],
[261,298,312,278,284,265,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,285,277,299,289,269,278],
[248,0,267,243,300,261,236,283],
[266,284,0,266,299,276,294,290],
[274,308,285,0,319,288,275,269],
[252,251,252,232,0,246,238,260],
[262,290,275,263,305,0,272,270],
[282,315,257,276,313,279,0,274],
[273,268,261,282,291,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,275,279,268,285,281,293],
[315,0,271,307,263,307,281,304],
[276,280,0,280,245,306,268,279],
[272,244,271,0,253,304,272,289],
[283,288,306,298,0,316,262,308],
[266,244,245,247,235,0,237,248],
[270,270,283,279,289,314,0,286],
[258,247,272,262,243,303,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,237,231,248,238,270,251],
[299,0,278,271,280,287,291,268],
[314,273,0,248,268,288,285,276],
[320,280,303,0,308,287,299,273],
[303,271,283,243,0,288,288,264],
[313,264,263,264,263,0,286,262],
[281,260,266,252,263,265,0,254],
[300,283,275,278,287,289,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,233,300,278,301,210,251],
[302,0,254,185,209,231,209,228],
[318,297,0,276,321,346,255,319],
[251,366,275,0,324,347,345,345],
[273,342,230,227,0,252,319,364],
[250,320,205,204,299,0,297,252],
[341,342,296,206,232,254,0,319],
[300,323,232,206,187,299,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,285,267,258,226,234,245],
[317,0,278,274,290,266,254,288],
[266,273,0,269,280,228,264,262],
[284,277,282,0,288,270,278,283],
[293,261,271,263,0,255,225,284],
[325,285,323,281,296,0,270,278],
[317,297,287,273,326,281,0,293],
[306,263,289,268,267,273,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,276,271,270,297,287],
[274,0,283,267,287,283,293,295],
[279,268,0,293,287,251,265,290],
[275,284,258,0,290,256,276,303],
[280,264,264,261,0,256,269,275],
[281,268,300,295,295,0,268,307],
[254,258,286,275,282,283,0,265],
[264,256,261,248,276,244,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,291,288,269,273,302,302],
[263,0,261,269,267,288,264,246],
[260,290,0,296,288,278,304,285],
[263,282,255,0,280,288,281,268],
[282,284,263,271,0,303,304,309],
[278,263,273,263,248,0,289,298],
[249,287,247,270,247,262,0,268],
[249,305,266,283,242,253,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,289,284,272,290,254,291],
[261,0,283,267,251,308,268,264],
[262,268,0,284,262,270,255,273],
[267,284,267,0,252,275,265,277],
[279,300,289,299,0,280,259,288],
[261,243,281,276,271,0,276,265],
[297,283,296,286,292,275,0,267],
[260,287,278,274,263,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,228,306,277,256,293,224],
[264,0,263,290,258,255,314,283],
[323,288,0,316,290,276,319,262],
[245,261,235,0,269,233,283,228],
[274,293,261,282,0,264,312,258],
[295,296,275,318,287,0,323,260],
[258,237,232,268,239,228,0,218],
[327,268,289,323,293,291,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,248,263,268,257,279,262],
[291,0,290,268,282,272,283,289],
[303,261,0,276,277,284,308,271],
[288,283,275,0,279,273,301,280],
[283,269,274,272,0,305,272,287],
[294,279,267,278,246,0,250,269],
[272,268,243,250,279,301,0,289],
[289,262,280,271,264,282,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,247,243,271,324,256,264],
[302,0,269,255,302,334,282,268],
[304,282,0,266,333,339,304,281],
[308,296,285,0,335,320,271,318],
[280,249,218,216,0,293,262,261],
[227,217,212,231,258,0,232,238],
[295,269,247,280,289,319,0,266],
[287,283,270,233,290,313,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,285,258,274,263,279,255],
[294,0,279,285,273,272,292,271],
[266,272,0,260,275,268,272,271],
[293,266,291,0,262,274,289,277],
[277,278,276,289,0,277,291,267],
[288,279,283,277,274,0,282,268],
[272,259,279,262,260,269,0,257],
[296,280,280,274,284,283,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,291,302,306,284,273,276],
[256,0,296,279,325,282,282,307],
[260,255,0,271,284,254,279,264],
[249,272,280,0,314,269,276,276],
[245,226,267,237,0,252,231,252],
[267,269,297,282,299,0,279,302],
[278,269,272,275,320,272,0,297],
[275,244,287,275,299,249,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,302,273,305,292,272,314],
[248,0,309,278,305,245,274,283],
[249,242,0,258,310,252,244,298],
[278,273,293,0,292,261,262,283],
[246,246,241,259,0,243,257,262],
[259,306,299,290,308,0,283,290],
[279,277,307,289,294,268,0,298],
[237,268,253,268,289,261,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,308,289,275,289,288,314],
[246,0,279,251,248,283,252,270],
[243,272,0,250,259,270,271,295],
[262,300,301,0,278,286,274,300],
[276,303,292,273,0,282,274,304],
[262,268,281,265,269,0,276,287],
[263,299,280,277,277,275,0,282],
[237,281,256,251,247,264,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,282,253,263,275,290,271],
[290,0,300,284,270,294,288,296],
[269,251,0,261,259,281,292,269],
[298,267,290,0,306,307,290,296],
[288,281,292,245,0,267,278,300],
[276,257,270,244,284,0,282,300],
[261,263,259,261,273,269,0,278],
[280,255,282,255,251,251,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,265,301,275,300,310,281],
[258,0,230,304,286,266,295,241],
[286,321,0,297,273,309,317,292],
[250,247,254,0,262,266,250,240],
[276,265,278,289,0,294,303,243],
[251,285,242,285,257,0,307,256],
[241,256,234,301,248,244,0,236],
[270,310,259,311,308,295,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,245,275,281,258,289,277],
[300,0,294,272,283,287,283,305],
[306,257,0,280,282,274,281,290],
[276,279,271,0,328,294,269,296],
[270,268,269,223,0,259,270,274],
[293,264,277,257,292,0,298,303],
[262,268,270,282,281,253,0,261],
[274,246,261,255,277,248,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,263,283,289,286,265,289],
[276,0,271,284,280,307,290,270],
[288,280,0,286,286,316,268,275],
[268,267,265,0,269,294,253,267],
[262,271,265,282,0,293,266,295],
[265,244,235,257,258,0,228,246],
[286,261,283,298,285,323,0,274],
[262,281,276,284,256,305,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,269,251,254,274,255,262],
[277,0,271,245,271,266,255,259],
[282,280,0,261,269,268,279,280],
[300,306,290,0,285,282,272,292],
[297,280,282,266,0,298,284,281],
[277,285,283,269,253,0,275,284],
[296,296,272,279,267,276,0,283],
[289,292,271,259,270,267,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,288,277,267,271,278,270],
[280,0,282,268,272,268,276,275],
[263,269,0,260,273,271,267,262],
[274,283,291,0,274,280,282,286],
[284,279,278,277,0,277,265,272],
[280,283,280,271,274,0,277,274],
[273,275,284,269,286,274,0,280],
[281,276,289,265,279,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,278,281,305,281,263,301],
[254,0,258,270,295,281,261,274],
[273,293,0,281,298,286,260,276],
[270,281,270,0,314,279,260,299],
[246,256,253,237,0,261,225,262],
[270,270,265,272,290,0,279,298],
[288,290,291,291,326,272,0,302],
[250,277,275,252,289,253,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,271,272,273,270,291,268],
[271,0,271,277,269,267,264,263],
[280,280,0,281,280,273,284,279],
[279,274,270,0,268,273,277,271],
[278,282,271,283,0,280,272,286],
[281,284,278,278,271,0,279,270],
[260,287,267,274,279,272,0,266],
[283,288,272,280,265,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,245,253,253,259,252,259],
[293,0,280,281,275,281,284,275],
[306,271,0,287,283,287,291,277],
[298,270,264,0,285,288,280,280],
[298,276,268,266,0,291,291,266],
[292,270,264,263,260,0,276,278],
[299,267,260,271,260,275,0,273],
[292,276,274,271,285,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,298,273,259,292,312,262],
[277,0,275,283,279,289,293,264],
[253,276,0,259,242,275,280,242],
[278,268,292,0,279,267,292,245],
[292,272,309,272,0,276,294,283],
[259,262,276,284,275,0,294,277],
[239,258,271,259,257,257,0,252],
[289,287,309,306,268,274,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,268,241,272,271,250,248],
[330,0,288,301,306,317,307,271],
[283,263,0,300,250,302,278,266],
[310,250,251,0,238,304,258,271],
[279,245,301,313,0,283,291,290],
[280,234,249,247,268,0,255,248],
[301,244,273,293,260,296,0,264],
[303,280,285,280,261,303,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,310,302,268,328,261,301],
[251,0,293,291,261,321,281,255],
[241,258,0,265,262,325,257,259],
[249,260,286,0,291,332,267,256],
[283,290,289,260,0,317,273,282],
[223,230,226,219,234,0,223,233],
[290,270,294,284,278,328,0,247],
[250,296,292,295,269,318,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,291,275,281,292,277,291],
[266,0,281,277,275,273,270,266],
[260,270,0,265,258,261,265,269],
[276,274,286,0,282,269,255,282],
[270,276,293,269,0,277,260,287],
[259,278,290,282,274,0,290,274],
[274,281,286,296,291,261,0,293],
[260,285,282,269,264,277,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,258,278,298,303,298,266],
[291,0,257,242,277,279,311,270],
[293,294,0,273,312,333,322,295],
[273,309,278,0,291,302,312,286],
[253,274,239,260,0,284,286,252],
[248,272,218,249,267,0,279,250],
[253,240,229,239,265,272,0,242],
[285,281,256,265,299,301,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,306,282,320,262,288,297],
[235,0,275,252,284,244,268,263],
[245,276,0,247,282,272,234,268],
[269,299,304,0,254,283,248,273],
[231,267,269,297,0,263,264,265],
[289,307,279,268,288,0,317,279],
[263,283,317,303,287,234,0,291],
[254,288,283,278,286,272,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,262,274,290,280,294],
[283,0,269,268,253,274,255,271],
[283,282,0,278,277,293,267,293],
[289,283,273,0,264,291,273,290],
[277,298,274,287,0,290,278,290],
[261,277,258,260,261,0,257,267],
[271,296,284,278,273,294,0,289],
[257,280,258,261,261,284,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,294,292,314,311,281,304],
[283,0,265,276,304,298,266,303],
[257,286,0,287,306,293,272,282],
[259,275,264,0,307,271,257,286],
[237,247,245,244,0,253,245,258],
[240,253,258,280,298,0,266,282],
[270,285,279,294,306,285,0,306],
[247,248,269,265,293,269,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,276,257,276,280,257,262],
[291,0,279,276,285,298,262,302],
[275,272,0,259,281,267,255,268],
[294,275,292,0,280,293,283,274],
[275,266,270,271,0,278,270,273],
[271,253,284,258,273,0,263,263],
[294,289,296,268,281,288,0,281],
[289,249,283,277,278,288,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,304,290,275,266,285,283],
[264,0,284,286,262,277,277,266],
[247,267,0,273,271,265,271,249],
[261,265,278,0,273,278,258,275],
[276,289,280,278,0,273,269,262],
[285,274,286,273,278,0,282,271],
[266,274,280,293,282,269,0,277],
[268,285,302,276,289,280,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,309,276,282,283,256,270],
[272,0,294,258,293,287,258,285],
[242,257,0,240,259,252,228,235],
[275,293,311,0,275,272,278,287],
[269,258,292,276,0,298,236,276],
[268,264,299,279,253,0,257,269],
[295,293,323,273,315,294,0,283],
[281,266,316,264,275,282,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,247,238,246,271,259,249],
[302,0,285,315,293,319,275,243],
[304,266,0,298,281,328,300,233],
[313,236,253,0,284,309,241,258],
[305,258,270,267,0,313,275,232],
[280,232,223,242,238,0,266,196],
[292,276,251,310,276,285,0,277],
[302,308,318,293,319,355,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,274,273,275,312,313,195],
[235,0,158,197,197,315,274,157],
[277,393,0,278,272,314,316,276],
[278,354,273,0,274,273,356,233],
[276,354,279,277,0,356,317,199],
[239,236,237,278,195,0,237,158],
[238,277,235,195,234,314,0,195],
[356,394,275,318,352,393,356,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,277,255,271,275,247,248],
[290,0,281,290,300,275,260,250],
[274,270,0,270,288,273,266,268],
[296,261,281,0,275,270,255,260],
[280,251,263,276,0,279,277,263],
[276,276,278,281,272,0,258,275],
[304,291,285,296,274,293,0,278],
[303,301,283,291,288,276,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,300,272,324,267,280,308],
[271,0,290,266,331,274,297,295],
[251,261,0,267,301,255,279,274],
[279,285,284,0,300,265,272,296],
[227,220,250,251,0,228,249,255],
[284,277,296,286,323,0,255,291],
[271,254,272,279,302,296,0,280],
[243,256,277,255,296,260,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,286,293,279,269,279,290],
[270,0,274,288,259,262,265,288],
[265,277,0,283,277,257,260,293],
[258,263,268,0,256,267,264,281],
[272,292,274,295,0,278,283,284],
[282,289,294,284,273,0,289,292],
[272,286,291,287,268,262,0,282],
[261,263,258,270,267,259,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,243,299,293,265,308,265],
[275,0,273,315,320,302,326,293],
[308,278,0,287,306,275,307,304],
[252,236,264,0,324,292,288,255],
[258,231,245,227,0,227,280,265],
[286,249,276,259,324,0,287,293],
[243,225,244,263,271,264,0,273],
[286,258,247,296,286,258,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,256,253,241,268,270],
[274,0,289,285,275,253,269,266],
[269,262,0,274,282,262,267,260],
[295,266,277,0,292,266,256,272],
[298,276,269,259,0,254,260,276],
[310,298,289,285,297,0,290,275],
[283,282,284,295,291,261,0,264],
[281,285,291,279,275,276,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,258,311,286,259,288,271],
[266,0,286,302,318,264,255,322],
[293,265,0,275,264,284,259,312],
[240,249,276,0,251,277,242,259],
[265,233,287,300,0,250,256,261],
[292,287,267,274,301,0,281,270],
[263,296,292,309,295,270,0,296],
[280,229,239,292,290,281,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,246,259,260,218,246,244],
[300,0,255,282,267,267,308,281],
[305,296,0,280,258,269,265,286],
[292,269,271,0,274,261,267,252],
[291,284,293,277,0,260,294,278],
[333,284,282,290,291,0,305,274],
[305,243,286,284,257,246,0,293],
[307,270,265,299,273,277,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,301,279,304,278,287],
[280,0,269,291,291,314,302,322],
[267,282,0,303,269,283,277,301],
[250,260,248,0,253,271,270,299],
[272,260,282,298,0,301,290,296],
[247,237,268,280,250,0,270,282],
[273,249,274,281,261,281,0,270],
[264,229,250,252,255,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,263,261,264,258,272,260],
[295,0,269,285,289,283,278,284],
[288,282,0,269,289,272,276,279],
[290,266,282,0,274,269,279,279],
[287,262,262,277,0,261,275,281],
[293,268,279,282,290,0,287,292],
[279,273,275,272,276,264,0,263],
[291,267,272,272,270,259,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,301,285,264,281,283],
[274,0,266,266,288,271,281,262],
[260,285,0,294,280,277,281,279],
[250,285,257,0,267,258,266,275],
[266,263,271,284,0,257,265,273],
[287,280,274,293,294,0,293,290],
[270,270,270,285,286,258,0,274],
[268,289,272,276,278,261,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,264,258,257,261,278],
[281,0,286,257,264,276,267,254],
[276,265,0,260,266,266,282,262],
[287,294,291,0,263,283,296,271],
[293,287,285,288,0,282,298,270],
[294,275,285,268,269,0,298,286],
[290,284,269,255,253,253,0,277],
[273,297,289,280,281,265,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,286,260,281,291,263,265],
[298,0,284,274,296,288,271,284],
[265,267,0,262,269,284,258,277],
[291,277,289,0,288,288,278,268],
[270,255,282,263,0,272,255,257],
[260,263,267,263,279,0,259,256],
[288,280,293,273,296,292,0,289],
[286,267,274,283,294,295,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,268,241,233,268,267,272],
[295,0,296,290,274,304,275,290],
[283,255,0,266,229,277,252,281],
[310,261,285,0,277,281,277,289],
[318,277,322,274,0,320,280,282],
[283,247,274,270,231,0,273,274],
[284,276,299,274,271,278,0,277],
[279,261,270,262,269,277,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,228,260,287,287,344,288],
[324,0,233,294,347,206,348,235],
[323,318,0,292,261,350,434,289],
[291,257,259,0,375,349,373,258],
[264,204,290,176,0,261,347,231],
[264,345,201,202,290,0,287,202],
[207,203,117,178,204,264,0,144],
[263,316,262,293,320,349,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,263,318,311,308,293,295],
[244,0,257,272,305,251,252,268],
[288,294,0,305,331,306,271,279],
[233,279,246,0,287,272,273,268],
[240,246,220,264,0,253,241,241],
[243,300,245,279,298,0,270,278],
[258,299,280,278,310,281,0,290],
[256,283,272,283,310,273,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,254,258,261,277,279,273],
[276,0,275,271,270,282,282,288],
[297,276,0,273,258,275,289,282],
[293,280,278,0,273,283,277,282],
[290,281,293,278,0,269,302,279],
[274,269,276,268,282,0,296,271],
[272,269,262,274,249,255,0,286],
[278,263,269,269,272,280,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,263,276,298,287,289,281],
[272,0,272,243,257,279,239,268],
[288,279,0,250,277,270,279,267],
[275,308,301,0,277,287,256,282],
[253,294,274,274,0,265,291,277],
[264,272,281,264,286,0,278,264],
[262,312,272,295,260,273,0,288],
[270,283,284,269,274,287,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,279,270,264,291,273],
[275,0,267,287,278,277,287,269],
[269,284,0,279,257,272,280,273],
[272,264,272,0,249,256,263,248],
[281,273,294,302,0,278,300,279],
[287,274,279,295,273,0,294,261],
[260,264,271,288,251,257,0,251],
[278,282,278,303,272,290,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,304,298,273,303,274,272],
[284,0,289,300,282,251,296,269],
[247,262,0,267,256,219,260,262],
[253,251,284,0,261,218,251,267],
[278,269,295,290,0,259,293,306],
[248,300,332,333,292,0,288,332],
[277,255,291,300,258,263,0,279],
[279,282,289,284,245,219,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,293,278,238,294,277,249],
[189,0,261,285,215,258,228,211],
[258,290,0,253,217,299,239,224],
[273,266,298,0,283,328,306,278],
[313,336,334,268,0,323,265,319],
[257,293,252,223,228,0,210,239],
[274,323,312,245,286,341,0,294],
[302,340,327,273,232,312,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,269,271,270,274,265,272],
[269,0,287,305,297,280,275,293],
[282,264,0,274,262,272,264,293],
[280,246,277,0,257,264,258,285],
[281,254,289,294,0,263,274,283],
[277,271,279,287,288,0,285,297],
[286,276,287,293,277,266,0,279],
[279,258,258,266,268,254,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,284,275,284,259,278,317],
[294,0,268,295,294,273,311,337],
[267,283,0,299,284,268,305,320],
[276,256,252,0,276,282,284,296],
[267,257,267,275,0,255,273,312],
[292,278,283,269,296,0,293,321],
[273,240,246,267,278,258,0,311],
[234,214,231,255,239,230,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,276,262,240,280,285,282],
[295,0,275,283,267,289,269,300],
[275,276,0,287,278,310,258,297],
[289,268,264,0,235,291,276,292],
[311,284,273,316,0,300,287,307],
[271,262,241,260,251,0,239,267],
[266,282,293,275,264,312,0,304],
[269,251,254,259,244,284,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,252,277,270,294,264,259],
[305,0,268,274,283,299,284,275],
[299,283,0,275,263,291,285,268],
[274,277,276,0,280,308,278,278],
[281,268,288,271,0,299,291,267],
[257,252,260,243,252,0,263,251],
[287,267,266,273,260,288,0,254],
[292,276,283,273,284,300,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,266,285,275,291,303,275],
[278,0,272,317,284,290,284,299],
[285,279,0,284,277,276,305,272],
[266,234,267,0,253,256,263,264],
[276,267,274,298,0,294,286,282],
[260,261,275,295,257,0,281,282],
[248,267,246,288,265,270,0,277],
[276,252,279,287,269,269,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,286,244,275,241,249,243],
[331,0,316,230,267,261,276,315],
[265,235,0,258,283,213,245,290],
[307,321,293,0,262,278,249,290],
[276,284,268,289,0,363,329,303],
[310,290,338,273,188,0,211,275],
[302,275,306,302,222,340,0,294],
[308,236,261,261,248,276,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,254,282,307,297,297,294],
[234,0,255,247,285,243,260,244],
[297,296,0,297,331,269,286,336],
[269,304,254,0,307,296,294,326],
[244,266,220,244,0,312,236,271],
[254,308,282,255,239,0,236,256],
[254,291,265,257,315,315,0,269],
[257,307,215,225,280,295,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,266,301,272,290,260,286],
[251,0,247,282,244,300,253,225],
[285,304,0,280,272,334,263,256],
[250,269,271,0,243,302,248,248],
[279,307,279,308,0,322,271,297],
[261,251,217,249,229,0,247,216],
[291,298,288,303,280,304,0,247],
[265,326,295,303,254,335,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,299,255,294,274,275],
[271,0,266,283,254,283,275,270],
[270,285,0,292,294,304,282,280],
[252,268,259,0,245,287,267,269],
[296,297,257,306,0,294,292,306],
[257,268,247,264,257,0,266,273],
[277,276,269,284,259,285,0,273],
[276,281,271,282,245,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,262,281,280,285,288,275],
[282,0,275,291,298,315,292,269],
[289,276,0,268,308,304,294,293],
[270,260,283,0,269,284,292,267],
[271,253,243,282,0,289,258,279],
[266,236,247,267,262,0,231,269],
[263,259,257,259,293,320,0,268],
[276,282,258,284,272,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,275,256,265,271,291,295],
[304,0,270,292,292,278,286,308],
[276,281,0,275,274,269,275,290],
[295,259,276,0,282,271,288,283],
[286,259,277,269,0,270,281,286],
[280,273,282,280,281,0,285,293],
[260,265,276,263,270,266,0,294],
[256,243,261,268,265,258,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,338,295,275,295,312,271,292],
[213,0,186,274,234,278,227,260],
[256,365,0,377,311,338,301,334],
[276,277,174,0,252,266,257,278],
[256,317,240,299,0,254,237,240],
[239,273,213,285,297,0,255,274],
[280,324,250,294,314,296,0,261],
[259,291,217,273,311,277,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,293,264,281,287,266,288],
[283,0,293,278,279,293,272,282],
[258,258,0,263,274,272,279,266],
[287,273,288,0,287,281,270,280],
[270,272,277,264,0,289,275,285],
[264,258,279,270,262,0,242,265],
[285,279,272,281,276,309,0,286],
[263,269,285,271,266,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,268,284,260,271,249],
[277,0,270,284,292,275,276,277],
[268,281,0,286,290,282,267,246],
[283,267,265,0,251,249,253,253],
[267,259,261,300,0,269,282,256],
[291,276,269,302,282,0,275,275],
[280,275,284,298,269,276,0,257],
[302,274,305,298,295,276,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,296,271,272,267,291],
[270,0,290,302,293,274,280,303],
[262,261,0,307,279,258,266,300],
[255,249,244,0,245,224,251,254],
[280,258,272,306,0,276,270,292],
[279,277,293,327,275,0,282,293],
[284,271,285,300,281,269,0,297],
[260,248,251,297,259,258,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,275,299,288,279,277,290],
[256,0,245,272,277,272,269,263],
[276,306,0,303,290,270,275,286],
[252,279,248,0,270,262,238,264],
[263,274,261,281,0,269,239,281],
[272,279,281,289,282,0,286,291],
[274,282,276,313,312,265,0,283],
[261,288,265,287,270,260,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,260,252,282,273,282],
[274,0,280,275,278,272,287,303],
[269,271,0,258,249,274,272,294],
[291,276,293,0,272,283,282,316],
[299,273,302,279,0,292,283,306],
[269,279,277,268,259,0,274,278],
[278,264,279,269,268,277,0,301],
[269,248,257,235,245,273,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,257,267,267,257,261,248],
[288,0,294,265,278,284,285,276],
[294,257,0,286,265,258,247,256],
[284,286,265,0,264,261,267,279],
[284,273,286,287,0,275,276,272],
[294,267,293,290,276,0,268,272],
[290,266,304,284,275,283,0,268],
[303,275,295,272,279,279,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,284,285,290,286,288],
[283,0,265,290,275,296,263,254],
[272,286,0,298,275,297,279,290],
[267,261,253,0,244,275,264,263],
[266,276,276,307,0,295,290,278],
[261,255,254,276,256,0,253,269],
[265,288,272,287,261,298,0,289],
[263,297,261,288,273,282,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,272,276,279,270,287,251],
[283,0,275,296,284,306,289,279],
[279,276,0,286,281,272,282,271],
[275,255,265,0,260,256,273,288],
[272,267,270,291,0,273,288,277],
[281,245,279,295,278,0,281,277],
[264,262,269,278,263,270,0,269],
[300,272,280,263,274,274,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,296,267,277,260,286,287],
[258,0,274,283,274,281,274,286],
[255,277,0,250,267,240,249,282],
[284,268,301,0,238,264,274,265],
[274,277,284,313,0,276,292,266],
[291,270,311,287,275,0,284,281],
[265,277,302,277,259,267,0,302],
[264,265,269,286,285,270,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,286,284,262,331,262,282],
[158,0,313,268,198,288,243,200],
[265,238,0,305,259,222,241,215],
[267,283,246,0,283,291,221,242],
[289,353,292,268,0,245,266,220],
[220,263,329,260,306,0,243,239],
[289,308,310,330,285,308,0,262],
[269,351,336,309,331,312,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,260,271,273,257,277],
[284,0,304,294,272,284,279,288],
[277,247,0,264,259,261,251,274],
[291,257,287,0,261,265,262,280],
[280,279,292,290,0,280,274,278],
[278,267,290,286,271,0,284,287],
[294,272,300,289,277,267,0,297],
[274,263,277,271,273,264,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,318,318,377,205,290,286],
[262,0,291,261,408,293,261,290],
[233,260,0,291,348,291,349,292],
[233,290,260,0,349,293,260,259],
[174,143,203,202,0,173,262,258],
[346,258,260,258,378,0,261,257],
[261,290,202,291,289,290,0,229],
[265,261,259,292,293,294,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,267,279,276,286,297,271],
[266,0,275,270,270,284,289,280],
[284,276,0,276,263,314,281,268],
[272,281,275,0,269,298,280,291],
[275,281,288,282,0,297,277,295],
[265,267,237,253,254,0,276,265],
[254,262,270,271,274,275,0,265],
[280,271,283,260,256,286,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,286,283,266,278,266,285],
[276,0,288,292,281,271,280,280],
[265,263,0,287,254,263,254,268],
[268,259,264,0,262,253,264,260],
[285,270,297,289,0,283,280,284],
[273,280,288,298,268,0,286,279],
[285,271,297,287,271,265,0,274],
[266,271,283,291,267,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,265,279,252,267,320,264],
[260,0,266,286,269,262,294,268],
[286,285,0,282,288,230,325,251],
[272,265,269,0,234,260,299,265],
[299,282,263,317,0,318,324,301],
[284,289,321,291,233,0,312,273],
[231,257,226,252,227,239,0,243],
[287,283,300,286,250,278,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,286,309,273,288,298],
[270,0,259,270,293,266,282,289],
[278,292,0,271,306,279,283,298],
[265,281,280,0,291,259,289,287],
[242,258,245,260,0,244,256,263],
[278,285,272,292,307,0,305,293],
[263,269,268,262,295,246,0,272],
[253,262,253,264,288,258,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,260,299,269,269,288,273],
[270,0,240,264,248,247,283,259],
[291,311,0,273,258,269,326,266],
[252,287,278,0,281,276,298,290],
[282,303,293,270,0,280,317,285],
[282,304,282,275,271,0,313,283],
[263,268,225,253,234,238,0,257],
[278,292,285,261,266,268,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,260,292,258,287,265],
[268,0,291,277,319,287,291,304],
[280,260,0,260,303,277,289,285],
[291,274,291,0,315,280,276,285],
[259,232,248,236,0,225,261,248],
[293,264,274,271,326,0,277,269],
[264,260,262,275,290,274,0,286],
[286,247,266,266,303,282,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,270,290,286,287,282,281],
[258,0,281,288,282,273,266,272],
[281,270,0,277,283,289,283,280],
[261,263,274,0,284,260,269,255],
[265,269,268,267,0,264,265,270],
[264,278,262,291,287,0,275,265],
[269,285,268,282,286,276,0,276],
[270,279,271,296,281,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,286,249,251,309,283,321],
[288,0,281,287,254,318,259,337],
[265,270,0,245,262,289,254,308],
[302,264,306,0,311,326,290,325],
[300,297,289,240,0,280,255,323],
[242,233,262,225,271,0,239,290],
[268,292,297,261,296,312,0,337],
[230,214,243,226,228,261,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,293,312,253,268,290,265],
[275,0,316,308,285,261,309,220],
[258,235,0,296,280,231,268,266],
[239,243,255,0,264,231,281,169],
[298,266,271,287,0,316,242,257],
[283,290,320,320,235,0,251,277],
[261,242,283,270,309,300,0,193],
[286,331,285,382,294,274,358,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,289,260,273,263,274,287],
[282,0,288,266,295,289,299,299],
[262,263,0,258,288,266,279,290],
[291,285,293,0,298,271,304,282],
[278,256,263,253,0,254,262,294],
[288,262,285,280,297,0,291,300],
[277,252,272,247,289,260,0,302],
[264,252,261,269,257,251,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,339,278,275,277,340,339],
[244,0,246,338,307,274,341,278],
[212,305,0,336,244,276,247,215],
[273,213,215,0,216,277,154,245],
[276,244,307,335,0,336,306,336],
[274,277,275,274,215,0,247,306],
[211,210,304,397,245,304,0,213],
[212,273,336,306,215,245,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,261,265,285,271,288,257],
[282,0,267,255,286,255,283,261],
[290,284,0,254,293,273,286,278],
[286,296,297,0,280,294,279,267],
[266,265,258,271,0,288,278,247],
[280,296,278,257,263,0,277,260],
[263,268,265,272,273,274,0,241],
[294,290,273,284,304,291,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,289,277,267,270,268,278],
[268,0,260,271,259,247,271,254],
[262,291,0,283,288,263,292,287],
[274,280,268,0,262,266,275,252],
[284,292,263,289,0,255,291,251],
[281,304,288,285,296,0,286,267],
[283,280,259,276,260,265,0,270],
[273,297,264,299,300,284,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,309,279,264,316,249,277],
[296,0,273,271,303,281,281,273],
[242,278,0,278,267,260,271,263],
[272,280,273,0,309,285,291,278],
[287,248,284,242,0,210,263,278],
[235,270,291,266,341,0,251,242],
[302,270,280,260,288,300,0,296],
[274,278,288,273,273,309,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,231,265,295,283,266,282],
[226,0,226,248,286,274,246,246],
[320,325,0,317,333,274,287,285],
[286,303,234,0,287,271,246,253],
[256,265,218,264,0,255,247,254],
[268,277,277,280,296,0,256,272],
[285,305,264,305,304,295,0,284],
[269,305,266,298,297,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,263,257,266,251,248,261],
[293,0,288,267,296,265,266,265],
[288,263,0,256,276,243,264,280],
[294,284,295,0,303,260,267,269],
[285,255,275,248,0,249,267,267],
[300,286,308,291,302,0,274,277],
[303,285,287,284,284,277,0,273],
[290,286,271,282,284,274,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,281,281,285,277,277,250],
[255,0,269,259,264,252,242,252],
[270,282,0,273,282,260,277,266],
[270,292,278,0,280,243,269,262],
[266,287,269,271,0,266,256,243],
[274,299,291,308,285,0,277,276],
[274,309,274,282,295,274,0,280],
[301,299,285,289,308,275,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,314,275,284,257,305,298],
[285,0,294,268,207,226,280,245],
[237,257,0,226,215,178,268,225],
[276,283,325,0,304,252,311,309],
[267,344,336,247,0,300,309,289],
[294,325,373,299,251,0,307,293],
[246,271,283,240,242,244,0,276],
[253,306,326,242,262,258,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,319,247,277,302,310,309],
[239,0,284,221,243,289,262,282],
[232,267,0,223,217,269,226,247],
[304,330,328,0,263,309,295,316],
[274,308,334,288,0,303,285,292],
[249,262,282,242,248,0,294,265],
[241,289,325,256,266,257,0,262],
[242,269,304,235,259,286,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,268,278,279,282,288,280],
[267,0,263,267,259,277,269,283],
[283,288,0,287,267,297,308,286],
[273,284,264,0,271,267,292,278],
[272,292,284,280,0,278,294,298],
[269,274,254,284,273,0,286,278],
[263,282,243,259,257,265,0,267],
[271,268,265,273,253,273,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,288,288,258,273,287,269],
[281,0,292,282,265,278,279,257],
[263,259,0,278,259,251,271,270],
[263,269,273,0,269,256,272,278],
[293,286,292,282,0,271,281,278],
[278,273,300,295,280,0,294,280],
[264,272,280,279,270,257,0,262],
[282,294,281,273,273,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,283,293,314,253,275,271],
[300,0,300,296,318,302,268,295],
[268,251,0,287,313,267,282,277],
[258,255,264,0,305,240,281,277],
[237,233,238,246,0,245,235,282],
[298,249,284,311,306,0,256,267],
[276,283,269,270,316,295,0,295],
[280,256,274,274,269,284,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,279,297,282,263,262],
[280,0,291,253,285,275,283,273],
[274,260,0,271,293,281,287,274],
[272,298,280,0,302,289,289,267],
[254,266,258,249,0,263,251,272],
[269,276,270,262,288,0,277,290],
[288,268,264,262,300,274,0,277],
[289,278,277,284,279,261,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,252,312,266,263,255,287],
[234,0,245,269,250,241,210,274],
[299,306,0,306,273,258,280,305],
[239,282,245,0,246,244,259,267],
[285,301,278,305,0,277,274,296],
[288,310,293,307,274,0,276,292],
[296,341,271,292,277,275,0,319],
[264,277,246,284,255,259,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,272,250,275,280,276,275],
[265,0,281,244,287,282,258,265],
[279,270,0,276,283,294,288,288],
[301,307,275,0,294,288,280,300],
[276,264,268,257,0,275,272,284],
[271,269,257,263,276,0,274,250],
[275,293,263,271,279,277,0,282],
[276,286,263,251,267,301,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,287,257,296,291,296,289],
[245,0,271,251,266,276,270,258],
[264,280,0,262,273,290,273,283],
[294,300,289,0,303,282,298,274],
[255,285,278,248,0,284,280,272],
[260,275,261,269,267,0,276,251],
[255,281,278,253,271,275,0,259],
[262,293,268,277,279,300,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,262,260,280,260,256,285],
[282,0,265,258,271,259,271,271],
[289,286,0,261,279,264,260,280],
[291,293,290,0,285,271,279,273],
[271,280,272,266,0,267,257,285],
[291,292,287,280,284,0,286,275],
[295,280,291,272,294,265,0,286],
[266,280,271,278,266,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,286,292,299,287,263],
[268,0,249,292,290,297,281,254],
[273,302,0,308,287,303,287,278],
[265,259,243,0,277,264,256,248],
[259,261,264,274,0,300,282,269],
[252,254,248,287,251,0,278,256],
[264,270,264,295,269,273,0,266],
[288,297,273,303,282,295,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,285,260,287,263,300,302],
[248,0,261,247,261,260,279,308],
[266,290,0,276,276,297,284,281],
[291,304,275,0,291,273,281,303],
[264,290,275,260,0,277,295,300],
[288,291,254,278,274,0,292,288],
[251,272,267,270,256,259,0,261],
[249,243,270,248,251,263,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,268,278,281,256,275,269],
[290,0,296,290,279,275,274,271],
[283,255,0,267,268,268,255,250],
[273,261,284,0,270,266,264,260],
[270,272,283,281,0,272,252,258],
[295,276,283,285,279,0,291,264],
[276,277,296,287,299,260,0,285],
[282,280,301,291,293,287,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,251,261,265,285,263,277],
[250,0,251,259,253,260,249,251],
[300,300,0,284,277,303,279,274],
[290,292,267,0,276,279,269,274],
[286,298,274,275,0,295,269,261],
[266,291,248,272,256,0,251,245],
[288,302,272,282,282,300,0,277],
[274,300,277,277,290,306,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,253,269,264,306,283,267],
[286,0,279,268,244,289,285,267],
[298,272,0,247,279,306,277,267],
[282,283,304,0,268,313,277,297],
[287,307,272,283,0,289,262,289],
[245,262,245,238,262,0,230,246],
[268,266,274,274,289,321,0,252],
[284,284,284,254,262,305,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,269,273,279,270,257,287],
[271,0,262,268,263,278,257,285],
[282,289,0,286,281,304,264,284],
[278,283,265,0,264,275,265,276],
[272,288,270,287,0,282,288,277],
[281,273,247,276,269,0,256,282],
[294,294,287,286,263,295,0,302],
[264,266,267,275,274,269,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,293,273,277,272,275,292],
[288,0,282,278,272,285,269,293],
[258,269,0,270,269,257,251,265],
[278,273,281,0,273,250,264,284],
[274,279,282,278,0,275,280,298],
[279,266,294,301,276,0,269,286],
[276,282,300,287,271,282,0,288],
[259,258,286,267,253,265,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,255,268,246,268,226,276],
[294,0,299,270,258,313,278,291],
[296,252,0,280,236,292,250,263],
[283,281,271,0,222,270,261,245],
[305,293,315,329,0,323,261,335],
[283,238,259,281,228,0,237,303],
[325,273,301,290,290,314,0,295],
[275,260,288,306,216,248,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,330,304,312,280,279,269],
[289,0,336,296,291,295,281,260],
[221,215,0,232,243,232,217,240],
[247,255,319,0,295,277,242,271],
[239,260,308,256,0,266,271,254],
[271,256,319,274,285,0,252,261],
[272,270,334,309,280,299,0,276],
[282,291,311,280,297,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,269,279,280,284,282,290],
[266,0,281,271,271,278,274,284],
[282,270,0,265,268,294,273,294],
[272,280,286,0,292,303,287,291],
[271,280,283,259,0,290,287,278],
[267,273,257,248,261,0,272,265],
[269,277,278,264,264,279,0,286],
[261,267,257,260,273,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,274,305,338,309,216,340],
[214,0,273,273,400,371,336,431],
[277,278,0,276,340,279,216,249],
[246,278,275,0,339,341,339,370],
[213,151,211,212,0,180,244,214],
[242,180,272,210,371,0,243,308],
[335,215,335,212,307,308,0,339],
[211,120,302,181,337,243,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,260,264,261,265,253,260],
[253,0,245,275,251,251,242,272],
[291,306,0,296,289,279,274,295],
[287,276,255,0,278,266,275,286],
[290,300,262,273,0,275,273,287],
[286,300,272,285,276,0,281,283],
[298,309,277,276,278,270,0,298],
[291,279,256,265,264,268,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,296,296,264,303,268,286],
[273,0,280,283,283,296,284,277],
[255,271,0,270,256,262,272,283],
[255,268,281,0,277,283,271,278],
[287,268,295,274,0,283,277,274],
[248,255,289,268,268,0,273,260],
[283,267,279,280,274,278,0,271],
[265,274,268,273,277,291,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,274,287,270,282,264,270],
[275,0,246,271,263,287,269,270],
[277,305,0,273,294,302,282,296],
[264,280,278,0,275,293,304,295],
[281,288,257,276,0,273,261,303],
[269,264,249,258,278,0,264,279],
[287,282,269,247,290,287,0,264],
[281,281,255,256,248,272,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,304,324,321,313,264,339],
[233,0,262,265,284,258,261,267],
[247,289,0,294,299,278,279,270],
[227,286,257,0,289,262,270,250],
[230,267,252,262,0,259,270,277],
[238,293,273,289,292,0,263,280],
[287,290,272,281,281,288,0,275],
[212,284,281,301,274,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,274,311,262,266,294],
[272,0,289,272,284,264,270,302],
[285,262,0,273,304,285,262,289],
[277,279,278,0,303,256,250,262],
[240,267,247,248,0,229,254,263],
[289,287,266,295,322,0,285,297],
[285,281,289,301,297,266,0,287],
[257,249,262,289,288,254,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,261,282,271,275,265,260],
[269,0,270,279,272,273,257,260],
[290,281,0,274,288,281,276,265],
[269,272,277,0,265,286,280,273],
[280,279,263,286,0,283,281,259],
[276,278,270,265,268,0,274,277],
[286,294,275,271,270,277,0,275],
[291,291,286,278,292,274,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,288,286,259,275,277,278],
[275,0,311,309,292,315,268,290],
[263,240,0,278,218,271,290,257],
[265,242,273,0,270,279,247,243],
[292,259,333,281,0,279,275,272],
[276,236,280,272,272,0,264,255],
[274,283,261,304,276,287,0,281],
[273,261,294,308,279,296,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,277,279,254,278,266,274],
[291,0,285,291,281,266,261,281],
[274,266,0,257,268,271,257,257],
[272,260,294,0,269,270,258,280],
[297,270,283,282,0,291,277,269],
[273,285,280,281,260,0,260,262],
[285,290,294,293,274,291,0,276],
[277,270,294,271,282,289,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,269,268,315,272,265],
[273,0,276,250,277,328,269,299],
[274,275,0,229,279,310,277,271],
[282,301,322,0,277,312,275,289],
[283,274,272,274,0,299,252,262],
[236,223,241,239,252,0,273,260],
[279,282,274,276,299,278,0,292],
[286,252,280,262,289,291,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,271,281,308,289,302,303],
[285,0,271,287,285,270,275,284],
[280,280,0,270,281,283,269,310],
[270,264,281,0,286,269,274,282],
[243,266,270,265,0,256,267,268],
[262,281,268,282,295,0,268,290],
[249,276,282,277,284,283,0,294],
[248,267,241,269,283,261,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,237,293,280,260,324,256],
[228,0,230,281,232,229,209,226],
[314,321,0,344,260,272,260,232],
[258,270,207,0,245,229,259,225],
[271,319,291,306,0,239,317,270],
[291,322,279,322,312,0,302,233],
[227,342,291,292,234,249,0,289],
[295,325,319,326,281,318,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,308,273,283,293,285,283],
[255,0,267,253,276,285,275,275],
[243,284,0,272,284,283,281,278],
[278,298,279,0,290,291,269,285],
[268,275,267,261,0,288,271,274],
[258,266,268,260,263,0,271,285],
[266,276,270,282,280,280,0,281],
[268,276,273,266,277,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,267,288,292,276,280,260],
[284,0,267,275,279,256,292,254],
[284,284,0,272,322,294,309,288],
[263,276,279,0,295,312,289,269],
[259,272,229,256,0,270,270,250],
[275,295,257,239,281,0,288,248],
[271,259,242,262,281,263,0,248],
[291,297,263,282,301,303,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,280,290,268,283,272,278],
[280,0,283,284,262,252,262,276],
[271,268,0,285,274,257,275,270],
[261,267,266,0,266,255,265,257],
[283,289,277,285,0,269,268,271],
[268,299,294,296,282,0,281,288],
[279,289,276,286,283,270,0,283],
[273,275,281,294,280,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,284,282,293,283,269],
[271,0,264,283,274,263,273,273],
[277,287,0,285,294,275,290,275],
[267,268,266,0,275,274,271,265],
[269,277,257,276,0,277,276,276],
[258,288,276,277,274,0,285,283],
[268,278,261,280,275,266,0,267],
[282,278,276,286,275,268,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,253,279,263,271,253],
[272,0,273,237,292,259,294,272],
[284,278,0,265,280,259,234,269],
[298,314,286,0,303,272,286,278],
[272,259,271,248,0,263,251,260],
[288,292,292,279,288,0,264,296],
[280,257,317,265,300,287,0,269],
[298,279,282,273,291,255,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,270,261,276,299,273,287],
[262,0,277,280,263,278,270,266],
[281,274,0,272,288,276,290,275],
[290,271,279,0,283,272,306,269],
[275,288,263,268,0,273,310,268],
[252,273,275,279,278,0,284,275],
[278,281,261,245,241,267,0,248],
[264,285,276,282,283,276,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,284,275,270,284,293,271],
[251,0,266,249,259,267,246,270],
[267,285,0,278,275,290,271,286],
[276,302,273,0,276,287,264,283],
[281,292,276,275,0,291,276,273],
[267,284,261,264,260,0,265,261],
[258,305,280,287,275,286,0,291],
[280,281,265,268,278,290,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,355,359,194,289,293,291],
[228,0,258,326,292,323,261,292],
[196,293,0,294,230,228,260,229],
[192,225,257,0,192,223,226,258],
[357,259,321,359,0,290,326,258],
[262,228,323,328,261,0,292,262],
[258,290,291,325,225,259,0,322],
[260,259,322,293,293,289,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,333,320,275,294,257,320],
[218,0,276,272,256,246,273,284],
[218,275,0,241,247,282,283,290],
[231,279,310,0,297,255,256,319],
[276,295,304,254,0,283,273,312],
[257,305,269,296,268,0,280,326],
[294,278,268,295,278,271,0,322],
[231,267,261,232,239,225,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,273,266,288,270,249],
[272,0,268,250,266,264,264,254],
[274,283,0,279,275,282,281,284],
[278,301,272,0,286,293,288,272],
[285,285,276,265,0,281,280,267],
[263,287,269,258,270,0,282,280],
[281,287,270,263,271,269,0,279],
[302,297,267,279,284,271,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,279,289,279,271,262],
[283,0,284,292,261,306,270,283],
[278,267,0,273,265,289,279,268],
[272,259,278,0,253,283,257,281],
[262,290,286,298,0,296,269,274],
[272,245,262,268,255,0,263,269],
[280,281,272,294,282,288,0,272],
[289,268,283,270,277,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,287,280,257,257,289,247],
[266,0,301,282,300,262,289,294],
[264,250,0,251,262,249,255,251],
[271,269,300,0,281,265,300,283],
[294,251,289,270,0,276,261,275],
[294,289,302,286,275,0,282,281],
[262,262,296,251,290,269,0,265],
[304,257,300,268,276,270,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,304,314,284,273,276,312],
[268,0,284,303,287,277,281,316],
[247,267,0,275,292,265,262,297],
[237,248,276,0,274,254,260,273],
[267,264,259,277,0,271,265,304],
[278,274,286,297,280,0,271,314],
[275,270,289,291,286,280,0,300],
[239,235,254,278,247,237,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,284,273,305,288,279,291],
[270,0,281,283,309,300,301,288],
[267,270,0,239,276,289,258,279],
[278,268,312,0,299,288,285,288],
[246,242,275,252,0,271,245,236],
[263,251,262,263,280,0,272,272],
[272,250,293,266,306,279,0,252],
[260,263,272,263,315,279,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,300,343,308,250,271],
[268,0,273,274,302,260,255,242],
[280,278,0,273,326,272,278,287],
[251,277,278,0,297,252,263,250],
[208,249,225,254,0,260,186,265],
[243,291,279,299,291,0,252,252],
[301,296,273,288,365,299,0,297],
[280,309,264,301,286,299,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,273,275,267,261,264,255],
[286,0,243,267,255,258,265,265],
[278,308,0,291,257,261,278,277],
[276,284,260,0,256,248,238,257],
[284,296,294,295,0,275,265,291],
[290,293,290,303,276,0,290,268],
[287,286,273,313,286,261,0,265],
[296,286,274,294,260,283,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,292,257,276,296,300,273],
[294,0,308,273,275,301,334,291],
[259,243,0,236,257,279,266,262],
[294,278,315,0,267,303,327,270],
[275,276,294,284,0,282,301,273],
[255,250,272,248,269,0,279,248],
[251,217,285,224,250,272,0,242],
[278,260,289,281,278,303,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,294,257,248,272,285,267],
[278,0,306,267,293,266,281,271],
[257,245,0,240,257,272,245,256],
[294,284,311,0,301,306,318,272],
[303,258,294,250,0,288,299,279],
[279,285,279,245,263,0,290,272],
[266,270,306,233,252,261,0,268],
[284,280,295,279,272,279,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,289,301,276,273,248,297],
[291,0,271,286,254,252,262,269],
[262,280,0,293,269,248,263,287],
[250,265,258,0,257,280,270,246],
[275,297,282,294,0,261,285,283],
[278,299,303,271,290,0,275,290],
[303,289,288,281,266,276,0,270],
[254,282,264,305,268,261,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,298,259,275,270,279,311],
[260,0,275,257,260,259,270,275],
[253,276,0,271,259,268,259,261],
[292,294,280,0,280,269,276,286],
[276,291,292,271,0,290,269,298],
[281,292,283,282,261,0,289,294],
[272,281,292,275,282,262,0,288],
[240,276,290,265,253,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,247,291,293,266,292,301],
[211,0,244,304,288,261,247,340],
[304,307,0,285,295,252,268,296],
[260,247,266,0,253,253,248,268],
[258,263,256,298,0,281,319,323],
[285,290,299,298,270,0,315,337],
[259,304,283,303,232,236,0,274],
[250,211,255,283,228,214,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,218,198,254,198,231,280],
[287,0,222,245,283,247,205,237],
[333,329,0,261,248,310,315,272],
[353,306,290,0,225,266,238,239],
[297,268,303,326,0,266,305,282],
[353,304,241,285,285,0,256,295],
[320,346,236,313,246,295,0,300],
[271,314,279,312,269,256,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,305,279,284,274,265],
[272,0,269,281,271,250,263,246],
[269,282,0,305,290,289,278,276],
[246,270,246,0,271,268,248,258],
[272,280,261,280,0,242,262,274],
[267,301,262,283,309,0,270,259],
[277,288,273,303,289,281,0,274],
[286,305,275,293,277,292,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,281,268,279,282,285,293],
[287,0,316,272,303,281,286,299],
[270,235,0,278,265,262,270,267],
[283,279,273,0,286,274,303,294],
[272,248,286,265,0,264,273,275],
[269,270,289,277,287,0,295,300],
[266,265,281,248,278,256,0,281],
[258,252,284,257,276,251,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,274,273,287,259,269,271],
[259,0,268,274,276,273,280,285],
[277,283,0,284,287,272,273,273],
[278,277,267,0,268,268,257,277],
[264,275,264,283,0,257,275,261],
[292,278,279,283,294,0,277,249],
[282,271,278,294,276,274,0,281],
[280,266,278,274,290,302,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,262,282,265,274,275,268],
[253,0,271,263,276,268,273,291],
[289,280,0,267,274,276,276,278],
[269,288,284,0,266,271,275,282],
[286,275,277,285,0,269,277,298],
[277,283,275,280,282,0,299,293],
[276,278,275,276,274,252,0,290],
[283,260,273,269,253,258,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,277,277,258,285,271,258],
[298,0,258,302,292,307,278,285],
[274,293,0,304,261,285,287,261],
[274,249,247,0,253,267,270,257],
[293,259,290,298,0,282,279,269],
[266,244,266,284,269,0,272,287],
[280,273,264,281,272,279,0,281],
[293,266,290,294,282,264,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,249,263,265,257,274,255],
[287,0,263,279,279,278,293,268],
[302,288,0,281,273,295,291,271],
[288,272,270,0,272,273,287,280],
[286,272,278,279,0,277,282,280],
[294,273,256,278,274,0,273,269],
[277,258,260,264,269,278,0,269],
[296,283,280,271,271,282,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,294,267,278,300,294],
[265,0,276,289,272,281,297,267],
[266,275,0,292,258,278,301,281],
[257,262,259,0,261,272,281,255],
[284,279,293,290,0,284,301,273],
[273,270,273,279,267,0,281,266],
[251,254,250,270,250,270,0,260],
[257,284,270,296,278,285,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,251,259,254,249,301,221],
[289,0,269,299,308,285,299,243],
[300,282,0,282,246,273,304,281],
[292,252,269,0,283,268,283,249],
[297,243,305,268,0,276,300,258],
[302,266,278,283,275,0,256,258],
[250,252,247,268,251,295,0,271],
[330,308,270,302,293,293,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,290,258,249,278,265],
[270,0,279,297,276,259,280,283],
[278,272,0,308,271,262,282,294],
[261,254,243,0,251,259,255,270],
[293,275,280,300,0,285,290,283],
[302,292,289,292,266,0,292,313],
[273,271,269,296,261,259,0,273],
[286,268,257,281,268,238,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,274,281,262,288,254,272],
[291,0,280,274,274,283,280,267],
[277,271,0,276,276,289,264,262],
[270,277,275,0,255,293,252,272],
[289,277,275,296,0,290,279,282],
[263,268,262,258,261,0,277,248],
[297,271,287,299,272,274,0,277],
[279,284,289,279,269,303,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,250,252,263,262,243,262],
[288,0,283,282,283,290,263,287],
[301,268,0,274,260,300,262,282],
[299,269,277,0,279,270,271,270],
[288,268,291,272,0,292,278,287],
[289,261,251,281,259,0,262,247],
[308,288,289,280,273,289,0,287],
[289,264,269,281,264,304,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,285,303,277,275,287,296],
[279,0,260,299,263,271,284,275],
[266,291,0,321,259,280,286,301],
[248,252,230,0,237,233,259,268],
[274,288,292,314,0,270,293,314],
[276,280,271,318,281,0,304,316],
[264,267,265,292,258,247,0,281],
[255,276,250,283,237,235,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,274,266,286,247,258,290],
[283,0,286,291,281,262,302,272],
[277,265,0,271,269,298,291,290],
[285,260,280,0,258,287,270,275],
[265,270,282,293,0,269,265,297],
[304,289,253,264,282,0,290,307],
[293,249,260,281,286,261,0,267],
[261,279,261,276,254,244,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,293,311,302,294,303,270],
[273,0,268,296,298,303,258,275],
[258,283,0,283,271,291,250,287],
[240,255,268,0,300,300,270,292],
[249,253,280,251,0,304,266,297],
[257,248,260,251,247,0,262,277],
[248,293,301,281,285,289,0,281],
[281,276,264,259,254,274,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,264,265,283,268,276],
[282,0,273,278,278,277,273,268],
[293,278,0,278,273,285,280,281],
[287,273,273,0,288,280,290,286],
[286,273,278,263,0,293,273,281],
[268,274,266,271,258,0,267,288],
[283,278,271,261,278,284,0,284],
[275,283,270,265,270,263,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,290,294,303,273,293,281],
[254,0,277,266,272,266,292,261],
[261,274,0,263,282,264,283,270],
[257,285,288,0,284,284,286,284],
[248,279,269,267,0,278,282,279],
[278,285,287,267,273,0,290,282],
[258,259,268,265,269,261,0,266],
[270,290,281,267,272,269,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,230,278,284,268,282,287],
[270,0,234,268,261,244,284,273],
[321,317,0,303,285,261,298,267],
[273,283,248,0,277,276,302,286],
[267,290,266,274,0,304,264,282],
[283,307,290,275,247,0,250,286],
[269,267,253,249,287,301,0,290],
[264,278,284,265,269,265,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,370,430,305,184,182,183,366],
[181,0,368,181,61,182,184,243],
[121,183,0,184,184,181,120,243],
[246,370,367,0,310,245,306,429],
[367,490,367,241,0,362,366,366],
[369,369,370,306,189,0,306,369],
[368,367,431,245,185,245,0,304],
[185,308,308,122,185,182,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,282,263,259,261,260,264],
[284,0,287,269,271,262,276,292],
[269,264,0,271,253,260,259,261],
[288,282,280,0,280,276,275,280],
[292,280,298,271,0,280,282,289],
[290,289,291,275,271,0,278,284],
[291,275,292,276,269,273,0,260],
[287,259,290,271,262,267,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,275,257,264,269,275,266],
[279,0,282,271,275,275,273,270],
[276,269,0,278,282,285,274,268],
[294,280,273,0,284,295,301,289],
[287,276,269,267,0,288,286,279],
[282,276,266,256,263,0,275,268],
[276,278,277,250,265,276,0,265],
[285,281,283,262,272,283,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,279,303,303,275,274],
[271,0,285,287,295,293,280,262],
[270,266,0,273,265,281,258,265],
[272,264,278,0,288,279,266,280],
[248,256,286,263,0,280,256,261],
[248,258,270,272,271,0,252,255],
[276,271,293,285,295,299,0,270],
[277,289,286,271,290,296,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,270,243,289,287,299],
[273,0,288,255,259,258,244,277],
[257,263,0,266,249,257,251,269],
[281,296,285,0,286,290,265,311],
[308,292,302,265,0,291,270,288],
[262,293,294,261,260,0,251,284],
[264,307,300,286,281,300,0,284],
[252,274,282,240,263,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,280,269,272,246,283,271],
[279,0,302,261,291,270,306,288],
[271,249,0,253,268,248,272,266],
[282,290,298,0,269,286,297,287],
[279,260,283,282,0,262,277,295],
[305,281,303,265,289,0,301,285],
[268,245,279,254,274,250,0,272],
[280,263,285,264,256,266,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,273,299,277,309,275,316],
[263,0,275,265,241,303,252,279],
[278,276,0,285,252,282,287,268],
[252,286,266,0,266,292,307,327],
[274,310,299,285,0,309,309,303],
[242,248,269,259,242,0,259,269],
[276,299,264,244,242,292,0,298],
[235,272,283,224,248,282,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,242,277,224,286,232,251],
[299,0,290,293,280,290,270,279],
[309,261,0,290,269,276,251,291],
[274,258,261,0,277,281,278,259],
[327,271,282,274,0,258,275,313],
[265,261,275,270,293,0,255,281],
[319,281,300,273,276,296,0,293],
[300,272,260,292,238,270,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,289,283,272,326,281,296],
[238,0,266,293,263,300,272,281],
[262,285,0,289,264,313,288,290],
[268,258,262,0,267,297,256,275],
[279,288,287,284,0,299,289,273],
[225,251,238,254,252,0,277,257],
[270,279,263,295,262,274,0,291],
[255,270,261,276,278,294,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,239,236,253,222,220,242],
[310,0,287,282,266,236,285,290],
[312,264,0,268,284,280,292,295],
[315,269,283,0,261,263,263,256],
[298,285,267,290,0,256,253,278],
[329,315,271,288,295,0,280,290],
[331,266,259,288,298,271,0,292],
[309,261,256,295,273,261,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,273,296,309,284,298,282],
[262,0,257,267,287,251,281,264],
[278,294,0,286,304,255,278,283],
[255,284,265,0,287,257,255,263],
[242,264,247,264,0,240,266,256],
[267,300,296,294,311,0,268,292],
[253,270,273,296,285,283,0,271],
[269,287,268,288,295,259,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,277,290,266,293,290],
[270,0,288,255,289,272,290,270],
[270,263,0,241,284,255,237,248],
[274,296,310,0,315,291,311,299],
[261,262,267,236,0,244,240,267],
[285,279,296,260,307,0,294,283],
[258,261,314,240,311,257,0,286],
[261,281,303,252,284,268,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,301,287,276,285,260,285],
[279,0,303,287,260,298,281,273],
[250,248,0,272,244,271,243,261],
[264,264,279,0,259,269,251,268],
[275,291,307,292,0,298,273,286],
[266,253,280,282,253,0,253,256],
[291,270,308,300,278,298,0,283],
[266,278,290,283,265,295,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,257,243,268,251,278,280],
[290,0,253,263,279,286,262,329],
[294,298,0,285,290,297,274,329],
[308,288,266,0,284,300,277,333],
[283,272,261,267,0,279,307,328],
[300,265,254,251,272,0,282,313],
[273,289,277,274,244,269,0,307],
[271,222,222,218,223,238,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,291,222,310,264,258,263],
[247,0,243,290,277,261,263,244],
[260,308,0,255,295,280,297,299],
[329,261,296,0,271,261,335,265],
[241,274,256,280,0,238,273,287],
[287,290,271,290,313,0,282,317],
[293,288,254,216,278,269,0,294],
[288,307,252,286,264,234,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,273,271,264,245,270,269],
[266,0,247,280,265,235,284,279],
[278,304,0,312,303,253,281,300],
[280,271,239,0,279,259,296,244],
[287,286,248,272,0,254,282,271],
[306,316,298,292,297,0,290,272],
[281,267,270,255,269,261,0,273],
[282,272,251,307,280,279,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,265,264,287,271,284,280],
[300,0,290,264,278,261,265,301],
[286,261,0,230,286,270,263,279],
[287,287,321,0,272,279,275,318],
[264,273,265,279,0,290,224,277],
[280,290,281,272,261,0,256,260],
[267,286,288,276,327,295,0,313],
[271,250,272,233,274,291,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,264,280,270,265,277,259],
[287,0,302,280,278,292,272,270],
[287,249,0,269,269,277,274,271],
[271,271,282,0,279,275,261,282],
[281,273,282,272,0,294,270,274],
[286,259,274,276,257,0,271,261],
[274,279,277,290,281,280,0,283],
[292,281,280,269,277,290,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,270,295,286,305,289,281],
[242,0,270,245,260,270,282,249],
[281,281,0,264,279,270,286,261],
[256,306,287,0,288,266,285,265],
[265,291,272,263,0,282,270,255],
[246,281,281,285,269,0,276,257],
[262,269,265,266,281,275,0,246],
[270,302,290,286,296,294,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,291,323,271,216,240,226],
[287,0,253,310,269,255,306,283],
[260,298,0,283,276,262,292,275],
[228,241,268,0,255,274,276,230],
[280,282,275,296,0,252,316,228],
[335,296,289,277,299,0,294,263],
[311,245,259,275,235,257,0,271],
[325,268,276,321,323,288,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,353,294,298,354,251,328,268],
[198,0,278,324,290,254,310,267],
[257,273,0,325,302,285,285,279],
[253,227,226,0,264,201,295,231],
[197,261,249,287,0,227,282,232],
[300,297,266,350,324,0,307,267],
[223,241,266,256,269,244,0,210],
[283,284,272,320,319,284,341,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,258,289,234,259,265,245],
[301,0,298,304,251,265,283,291],
[293,253,0,288,275,276,299,271],
[262,247,263,0,230,283,259,240],
[317,300,276,321,0,271,300,299],
[292,286,275,268,280,0,301,273],
[286,268,252,292,251,250,0,265],
[306,260,280,311,252,278,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,258,255,269,296,263],
[281,0,276,265,272,259,284,274],
[286,275,0,276,273,276,266,281],
[293,286,275,0,275,276,280,291],
[296,279,278,276,0,267,282,289],
[282,292,275,275,284,0,285,273],
[255,267,285,271,269,266,0,257],
[288,277,270,260,262,278,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,259,271,282,253,261,284],
[293,0,293,264,289,269,284,297],
[292,258,0,267,247,282,255,272],
[280,287,284,0,286,274,295,295],
[269,262,304,265,0,265,291,289],
[298,282,269,277,286,0,293,295],
[290,267,296,256,260,258,0,306],
[267,254,279,256,262,256,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,274,263,265,275,280,267],
[263,0,253,257,266,258,272,261],
[277,298,0,263,283,286,293,262],
[288,294,288,0,277,272,290,287],
[286,285,268,274,0,281,310,278],
[276,293,265,279,270,0,289,268],
[271,279,258,261,241,262,0,258],
[284,290,289,264,273,283,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,310,292,347,272,328,309],
[297,0,237,256,294,257,314,291],
[241,314,0,277,295,296,295,275],
[259,295,274,0,259,295,275,332],
[204,257,256,292,0,259,277,311],
[279,294,255,256,292,0,311,308],
[223,237,256,276,274,240,0,298],
[242,260,276,219,240,243,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,282,281,298,255,294,293],
[263,0,262,278,255,282,291,316],
[269,289,0,304,275,278,291,294],
[270,273,247,0,268,275,289,282],
[253,296,276,283,0,279,291,316],
[296,269,273,276,272,0,292,285],
[257,260,260,262,260,259,0,301],
[258,235,257,269,235,266,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,269,282,273,255,288,279],
[276,0,274,278,282,273,285,271],
[282,277,0,279,278,270,284,281],
[269,273,272,0,269,276,289,281],
[278,269,273,282,0,259,281,269],
[296,278,281,275,292,0,274,262],
[263,266,267,262,270,277,0,265],
[272,280,270,270,282,289,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,294,313,284,307,247,278],
[270,0,288,280,307,269,284,287],
[257,263,0,271,311,253,281,265],
[238,271,280,0,293,268,251,251],
[267,244,240,258,0,215,248,235],
[244,282,298,283,336,0,267,303],
[304,267,270,300,303,284,0,285],
[273,264,286,300,316,248,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,265,280,267,288,271,294],
[303,0,265,284,296,290,292,283],
[286,286,0,295,273,264,290,299],
[271,267,256,0,235,274,274,265],
[284,255,278,316,0,276,288,300],
[263,261,287,277,275,0,273,292],
[280,259,261,277,263,278,0,300],
[257,268,252,286,251,259,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,272,246,289,265,260,267],
[275,0,300,282,278,275,287,285],
[279,251,0,262,266,266,275,272],
[305,269,289,0,307,285,290,283],
[262,273,285,244,0,267,280,274],
[286,276,285,266,284,0,278,288],
[291,264,276,261,271,273,0,278],
[284,266,279,268,277,263,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,262,274,281,283,266],
[277,0,277,267,281,272,266,277],
[275,274,0,278,290,269,264,259],
[289,284,273,0,284,284,268,272],
[277,270,261,267,0,283,266,262],
[270,279,282,267,268,0,269,278],
[268,285,287,283,285,282,0,276],
[285,274,292,279,289,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,267,273,258,252,266,277],
[287,0,284,284,289,284,271,291],
[284,267,0,271,246,249,269,281],
[278,267,280,0,262,246,261,282],
[293,262,305,289,0,252,276,304],
[299,267,302,305,299,0,289,291],
[285,280,282,290,275,262,0,289],
[274,260,270,269,247,260,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,310,276,285,281,261,282],
[243,0,277,271,237,269,266,263],
[241,274,0,259,250,283,258,266],
[275,280,292,0,261,274,287,286],
[266,314,301,290,0,287,285,295],
[270,282,268,277,264,0,292,277],
[290,285,293,264,266,259,0,286],
[269,288,285,265,256,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,260,296,264,288,273,278],
[279,0,246,280,262,270,267,277],
[291,305,0,294,295,296,296,275],
[255,271,257,0,254,266,266,274],
[287,289,256,297,0,277,290,287],
[263,281,255,285,274,0,292,272],
[278,284,255,285,261,259,0,267],
[273,274,276,277,264,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,308,268,256,288,258,312],
[302,0,308,253,271,307,277,298],
[243,243,0,218,246,243,255,288],
[283,298,333,0,248,250,291,320],
[295,280,305,303,0,258,284,335],
[263,244,308,301,293,0,284,309],
[293,274,296,260,267,267,0,311],
[239,253,263,231,216,242,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,302,400,302,252,452,352],
[401,0,251,301,402,452,452,401],
[249,300,0,300,301,351,450,350],
[151,250,251,0,302,252,352,251],
[249,149,250,249,0,249,299,350],
[299,99,200,299,302,0,450,351],
[99,99,101,199,252,101,0,251],
[199,150,201,300,201,200,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,298,242,302,251,278,290],
[288,0,317,277,309,270,261,287],
[253,234,0,201,238,234,250,285],
[309,274,350,0,315,295,292,318],
[249,242,313,236,0,273,254,293],
[300,281,317,256,278,0,291,328],
[273,290,301,259,297,260,0,305],
[261,264,266,233,258,223,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,218,273,256,277,271,316],
[247,0,263,276,237,214,208,259],
[333,288,0,260,258,265,264,274],
[278,275,291,0,230,263,289,289],
[295,314,293,321,0,258,290,313],
[274,337,286,288,293,0,282,323],
[280,343,287,262,261,269,0,295],
[235,292,277,262,238,228,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,260,284,293,235,255,284],
[275,0,265,301,289,280,276,292],
[291,286,0,328,283,239,286,279],
[267,250,223,0,207,222,222,272],
[258,262,268,344,0,286,231,268],
[316,271,312,329,265,0,274,288],
[296,275,265,329,320,277,0,299],
[267,259,272,279,283,263,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,283,293,266,268,292],
[276,0,259,268,271,265,279,287],
[267,292,0,280,304,273,274,282],
[268,283,271,0,284,263,274,277],
[258,280,247,267,0,280,278,274],
[285,286,278,288,271,0,295,299],
[283,272,277,277,273,256,0,274],
[259,264,269,274,277,252,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,295,272,276,293,284],
[275,0,281,268,266,269,287,268],
[269,270,0,267,251,289,285,272],
[256,283,284,0,260,292,290,282],
[279,285,300,291,0,273,288,304],
[275,282,262,259,278,0,270,277],
[258,264,266,261,263,281,0,266],
[267,283,279,269,247,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,326,262,295,294,162,292],
[323,0,294,292,259,261,195,324],
[225,257,0,322,290,290,257,322],
[289,259,229,0,225,164,224,355],
[256,292,261,326,0,196,163,324],
[257,290,261,387,355,0,321,354],
[389,356,294,327,388,230,0,453],
[259,227,229,196,227,197,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,273,330,293,349,336,326],
[222,0,239,280,240,270,263,282],
[278,312,0,301,271,335,310,314],
[221,271,250,0,226,318,296,264],
[258,311,280,325,0,301,285,261],
[202,281,216,233,250,0,257,261],
[215,288,241,255,266,294,0,293],
[225,269,237,287,290,290,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,278,293,289,286,274,284],
[280,0,250,265,263,272,271,293],
[273,301,0,304,277,305,263,283],
[258,286,247,0,258,270,280,281],
[262,288,274,293,0,298,305,287],
[265,279,246,281,253,0,275,293],
[277,280,288,271,246,276,0,281],
[267,258,268,270,264,258,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,249,245,231,252,251,225],
[269,0,280,268,257,276,259,265],
[302,271,0,289,257,294,262,252],
[306,283,262,0,288,270,240,252],
[320,294,294,263,0,321,276,276],
[299,275,257,281,230,0,267,254],
[300,292,289,311,275,284,0,238],
[326,286,299,299,275,297,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,279,286,284,272,295],
[281,0,260,256,273,290,284,288],
[286,291,0,272,278,281,289,301],
[272,295,279,0,289,293,284,306],
[265,278,273,262,0,293,272,288],
[267,261,270,258,258,0,268,294],
[279,267,262,267,279,283,0,293],
[256,263,250,245,263,257,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,276,269,290,291,299,278],
[255,0,289,282,282,285,298,268],
[275,262,0,263,281,289,283,258],
[282,269,288,0,280,295,291,269],
[261,269,270,271,0,264,287,256],
[260,266,262,256,287,0,288,259],
[252,253,268,260,264,263,0,240],
[273,283,293,282,295,292,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,254,302,275,299,343,383],
[211,0,253,234,296,276,299,340],
[297,298,0,257,254,362,345,341],
[249,317,294,0,272,382,383,358],
[276,255,297,279,0,362,302,298],
[252,275,189,169,189,0,256,316],
[208,252,206,168,249,295,0,292],
[168,211,210,193,253,235,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,272,278,295,277,280,287],
[252,0,257,273,256,253,254,255],
[279,294,0,275,283,287,271,303],
[273,278,276,0,274,283,258,292],
[256,295,268,277,0,270,251,278],
[274,298,264,268,281,0,239,292],
[271,297,280,293,300,312,0,294],
[264,296,248,259,273,259,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,306,301,268,275,279,260],
[244,0,272,271,271,266,261,261],
[245,279,0,300,288,304,282,252],
[250,280,251,0,267,268,243,256],
[283,280,263,284,0,256,250,240],
[276,285,247,283,295,0,283,274],
[272,290,269,308,301,268,0,282],
[291,290,299,295,311,277,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,329,347,342,321,342,274],
[197,0,284,296,289,268,307,278],
[222,267,0,298,265,267,286,277],
[204,255,253,0,298,232,282,274],
[209,262,286,253,0,264,317,273],
[230,283,284,319,287,0,298,304],
[209,244,265,269,234,253,0,256],
[277,273,274,277,278,247,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,268,239,266,257,271,258],
[279,0,283,282,278,273,271,281],
[283,268,0,278,279,274,281,273],
[312,269,273,0,290,294,286,294],
[285,273,272,261,0,275,254,261],
[294,278,277,257,276,0,273,264],
[280,280,270,265,297,278,0,287],
[293,270,278,257,290,287,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,283,292,267,295,257,300],
[248,0,266,269,266,289,259,271],
[268,285,0,261,284,281,284,306],
[259,282,290,0,272,284,263,298],
[284,285,267,279,0,281,283,290],
[256,262,270,267,270,0,277,293],
[294,292,267,288,268,274,0,298],
[251,280,245,253,261,258,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,279,217,274,248,254,269],
[307,0,322,270,293,251,283,299],
[272,229,0,248,266,245,262,276],
[334,281,303,0,289,251,279,305],
[277,258,285,262,0,257,270,277],
[303,300,306,300,294,0,272,311],
[297,268,289,272,281,279,0,303],
[282,252,275,246,274,240,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,268,288,280,276,274,280],
[274,0,275,291,263,276,276,286],
[283,276,0,278,277,268,287,294],
[263,260,273,0,252,274,267,284],
[271,288,274,299,0,285,287,280],
[275,275,283,277,266,0,286,282],
[277,275,264,284,264,265,0,288],
[271,265,257,267,271,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,285,297,263,265,275,267],
[284,0,289,276,267,287,273,272],
[266,262,0,262,252,268,263,247],
[254,275,289,0,259,264,263,265],
[288,284,299,292,0,273,280,270],
[286,264,283,287,278,0,273,277],
[276,278,288,288,271,278,0,278],
[284,279,304,286,281,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,273,296,264,285,288,300],
[263,0,274,295,260,253,281,297],
[278,277,0,284,260,268,282,296],
[255,256,267,0,257,262,272,276],
[287,291,291,294,0,274,303,297],
[266,298,283,289,277,0,291,299],
[263,270,269,279,248,260,0,275],
[251,254,255,275,254,252,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,322,312,333,271,296,269],
[291,0,268,286,317,290,303,281],
[229,283,0,250,247,242,242,250],
[239,265,301,0,297,267,287,214],
[218,234,304,254,0,261,255,236],
[280,261,309,284,290,0,281,239],
[255,248,309,264,296,270,0,228],
[282,270,301,337,315,312,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,253,274,279,249,260,295],
[264,0,244,254,271,243,278,307],
[298,307,0,286,286,272,304,306],
[277,297,265,0,269,280,287,296],
[272,280,265,282,0,249,264,271],
[302,308,279,271,302,0,297,307],
[291,273,247,264,287,254,0,314],
[256,244,245,255,280,244,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,286,280,271,281,282],
[276,0,268,286,274,281,283,283],
[277,283,0,269,289,282,273,284],
[265,265,282,0,279,275,272,296],
[271,277,262,272,0,272,279,287],
[280,270,269,276,279,0,306,289],
[270,268,278,279,272,245,0,280],
[269,268,267,255,264,262,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,275,313,308,286,294,283],
[260,0,265,282,294,264,263,273],
[276,286,0,296,271,254,294,274],
[238,269,255,0,256,255,247,244],
[243,257,280,295,0,261,285,281],
[265,287,297,296,290,0,273,276],
[257,288,257,304,266,278,0,264],
[268,278,277,307,270,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,276,272,281,294,284,314],
[241,0,265,265,257,273,259,282],
[275,286,0,269,277,270,287,300],
[279,286,282,0,290,273,285,300],
[270,294,274,261,0,285,274,281],
[257,278,281,278,266,0,269,272],
[267,292,264,266,277,282,0,283],
[237,269,251,251,270,279,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,255,274,279,260,257,266],
[296,0,275,299,297,278,284,284],
[296,276,0,283,283,267,270,279],
[277,252,268,0,274,270,271,265],
[272,254,268,277,0,256,262,265],
[291,273,284,281,295,0,273,289],
[294,267,281,280,289,278,0,278],
[285,267,272,286,286,262,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,299,276,277,285,288],
[280,0,286,296,244,252,280,274],
[282,265,0,297,260,247,274,265],
[252,255,254,0,241,232,245,272],
[275,307,291,310,0,266,296,278],
[274,299,304,319,285,0,311,271],
[266,271,277,306,255,240,0,274],
[263,277,286,279,273,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,271,266,272,275,282],
[275,0,277,286,266,279,289,280],
[284,274,0,283,263,273,277,268],
[280,265,268,0,270,274,286,265],
[285,285,288,281,0,291,275,295],
[279,272,278,277,260,0,256,271],
[276,262,274,265,276,295,0,279],
[269,271,283,286,256,280,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,263,269,266,279,257,268],
[311,0,274,288,297,298,268,303],
[288,277,0,263,279,282,255,270],
[282,263,288,0,285,287,278,297],
[285,254,272,266,0,278,263,281],
[272,253,269,264,273,0,251,278],
[294,283,296,273,288,300,0,291],
[283,248,281,254,270,273,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,263,277,295,270,289],
[273,0,271,273,278,291,273,281],
[288,280,0,273,292,297,283,304],
[288,278,278,0,292,305,270,316],
[274,273,259,259,0,289,272,288],
[256,260,254,246,262,0,265,292],
[281,278,268,281,279,286,0,292],
[262,270,247,235,263,259,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,211,244,283,261,259,269],
[313,0,278,258,274,307,222,253],
[340,273,0,294,323,288,275,259],
[307,293,257,0,283,256,265,282],
[268,277,228,268,0,263,269,259],
[290,244,263,295,288,0,294,273],
[292,329,276,286,282,257,0,273],
[282,298,292,269,292,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,281,304,292,305,293,271],
[268,0,299,297,291,292,253,278],
[270,252,0,288,280,283,301,277],
[247,254,263,0,288,251,259,250],
[259,260,271,263,0,304,236,269],
[246,259,268,300,247,0,234,227],
[258,298,250,292,315,317,0,269],
[280,273,274,301,282,324,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,280,289,280,280,268,273],
[267,0,282,258,272,274,269,264],
[271,269,0,271,272,271,266,265],
[262,293,280,0,287,282,266,277],
[271,279,279,264,0,272,271,285],
[271,277,280,269,279,0,281,272],
[283,282,285,285,280,270,0,289],
[278,287,286,274,266,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,270,292,283,273,289,273],
[286,0,265,269,280,267,304,258],
[281,286,0,283,279,274,297,284],
[259,282,268,0,260,267,277,255],
[268,271,272,291,0,287,281,272],
[278,284,277,284,264,0,284,283],
[262,247,254,274,270,267,0,253],
[278,293,267,296,279,268,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,277,282,270,277,253,254],
[298,0,292,291,283,291,280,275],
[274,259,0,271,266,289,260,254],
[269,260,280,0,270,284,272,273],
[281,268,285,281,0,294,274,283],
[274,260,262,267,257,0,254,268],
[298,271,291,279,277,297,0,259],
[297,276,297,278,268,283,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,291,264,265,287,295,276],
[266,0,304,272,284,285,297,273],
[260,247,0,282,279,280,265,260],
[287,279,269,0,277,299,299,287],
[286,267,272,274,0,300,304,295],
[264,266,271,252,251,0,271,269],
[256,254,286,252,247,280,0,271],
[275,278,291,264,256,282,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,252,286,288,237,275,264],
[323,0,281,279,303,284,280,254],
[299,270,0,259,298,293,288,288],
[265,272,292,0,271,277,265,282],
[263,248,253,280,0,257,270,265],
[314,267,258,274,294,0,294,286],
[276,271,263,286,281,257,0,282],
[287,297,263,269,286,265,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,268,265,281,242,225,260],
[294,0,257,297,296,270,279,277],
[283,294,0,293,310,276,273,281],
[286,254,258,0,289,250,245,256],
[270,255,241,262,0,255,252,232],
[309,281,275,301,296,0,300,279],
[326,272,278,306,299,251,0,269],
[291,274,270,295,319,272,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,256,281,247,272,263,267],
[269,0,260,261,257,266,281,276],
[295,291,0,284,276,266,298,278],
[270,290,267,0,282,278,293,271],
[304,294,275,269,0,284,279,282],
[279,285,285,273,267,0,271,293],
[288,270,253,258,272,280,0,257],
[284,275,273,280,269,258,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,270,279,312,282,278,243],
[315,0,323,314,327,274,288,282],
[281,228,0,273,299,278,234,240],
[272,237,278,0,321,288,246,258],
[239,224,252,230,0,230,232,204],
[269,277,273,263,321,0,269,241],
[273,263,317,305,319,282,0,263],
[308,269,311,293,347,310,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,291,284,271,295,259,268],
[272,0,267,276,279,276,251,264],
[260,284,0,268,286,289,276,297],
[267,275,283,0,257,280,270,304],
[280,272,265,294,0,268,291,275],
[256,275,262,271,283,0,265,279],
[292,300,275,281,260,286,0,305],
[283,287,254,247,276,272,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,295,265,270,264,294,275],
[303,0,274,268,288,275,293,277],
[256,277,0,265,291,276,273,270],
[286,283,286,0,289,275,303,281],
[281,263,260,262,0,256,273,258],
[287,276,275,276,295,0,290,267],
[257,258,278,248,278,261,0,270],
[276,274,281,270,293,284,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,279,300,249,304,300,267],
[286,0,323,279,298,338,266,321],
[272,228,0,282,276,321,288,279],
[251,272,269,0,272,302,259,268],
[302,253,275,279,0,283,291,259],
[247,213,230,249,268,0,265,249],
[251,285,263,292,260,286,0,276],
[284,230,272,283,292,302,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,353,315,349,295,258,316],
[284,0,355,269,305,265,283,361],
[198,196,0,254,276,249,255,282],
[236,282,297,0,294,289,263,310],
[202,246,275,257,0,222,262,305],
[256,286,302,262,329,0,282,289],
[293,268,296,288,289,269,0,279],
[235,190,269,241,246,262,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,276,286,274,267,286,276],
[265,0,260,280,282,283,288,271],
[275,291,0,280,261,278,271,276],
[265,271,271,0,258,286,256,254],
[277,269,290,293,0,293,273,292],
[284,268,273,265,258,0,272,261],
[265,263,280,295,278,279,0,257],
[275,280,275,297,259,290,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,272,291,276,288,290,315],
[235,0,254,244,271,254,249,270],
[279,297,0,272,286,295,286,285],
[260,307,279,0,284,291,274,291],
[275,280,265,267,0,259,290,275],
[263,297,256,260,292,0,276,273],
[261,302,265,277,261,275,0,279],
[236,281,266,260,276,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,318,299,286,263,346,270],
[282,0,357,273,257,291,299,278],
[233,194,0,217,226,214,240,237],
[252,278,334,0,310,301,314,274],
[265,294,325,241,0,260,282,290],
[288,260,337,250,291,0,307,326],
[205,252,311,237,269,244,0,255],
[281,273,314,277,261,225,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,229,240,235,259,228,252],
[333,0,243,253,246,270,334,275],
[322,308,0,282,274,288,289,299],
[311,298,269,0,289,269,308,308],
[316,305,277,262,0,278,323,283],
[292,281,263,282,273,0,275,295],
[323,217,262,243,228,276,0,266],
[299,276,252,243,268,256,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,270,271,266,292,268,278],
[284,0,253,266,273,288,257,267],
[281,298,0,277,270,297,272,274],
[280,285,274,0,283,285,284,280],
[285,278,281,268,0,295,288,288],
[259,263,254,266,256,0,267,263],
[283,294,279,267,263,284,0,296],
[273,284,277,271,263,288,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,260,257,285,305,303,257],
[273,0,260,269,274,289,308,257],
[291,291,0,298,303,290,305,260],
[294,282,253,0,275,282,290,297],
[266,277,248,276,0,297,271,285],
[246,262,261,269,254,0,275,264],
[248,243,246,261,280,276,0,229],
[294,294,291,254,266,287,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,284,267,274,267,262,275],
[264,0,270,288,273,277,276,275],
[267,281,0,283,272,254,252,281],
[284,263,268,0,274,256,263,273],
[277,278,279,277,0,261,246,271],
[284,274,297,295,290,0,278,290],
[289,275,299,288,305,273,0,284],
[276,276,270,278,280,261,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,263,282,276,299,301,293],
[265,0,278,281,275,300,291,275],
[288,273,0,275,272,346,300,295],
[269,270,276,0,284,316,327,286],
[275,276,279,267,0,310,310,263],
[252,251,205,235,241,0,277,247],
[250,260,251,224,241,274,0,239],
[258,276,256,265,288,304,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,279,272,282,294,274,297],
[265,0,262,271,270,288,258,288],
[272,289,0,249,271,268,258,284],
[279,280,302,0,273,283,291,289],
[269,281,280,278,0,288,265,287],
[257,263,283,268,263,0,267,296],
[277,293,293,260,286,284,0,298],
[254,263,267,262,264,255,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,294,272,271,290,277,289],
[260,0,290,260,294,290,262,285],
[257,261,0,278,267,285,250,281],
[279,291,273,0,244,301,255,256],
[280,257,284,307,0,301,264,282],
[261,261,266,250,250,0,247,287],
[274,289,301,296,287,304,0,304],
[262,266,270,295,269,264,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,284,264,287,256,268,264],
[288,0,286,276,282,279,271,267],
[267,265,0,248,273,261,250,272],
[287,275,303,0,288,278,294,291],
[264,269,278,263,0,263,283,289],
[295,272,290,273,288,0,273,282],
[283,280,301,257,268,278,0,281],
[287,284,279,260,262,269,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,266,273,289,283,297,296],
[290,0,275,254,260,281,284,294],
[285,276,0,258,275,294,289,286],
[278,297,293,0,264,294,287,269],
[262,291,276,287,0,304,289,271],
[268,270,257,257,247,0,278,276],
[254,267,262,264,262,273,0,271],
[255,257,265,282,280,275,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,308,348,226,253,277,266],
[300,0,201,326,262,271,309,325],
[243,350,0,352,316,228,300,240],
[203,225,199,0,174,200,216,195],
[325,289,235,377,0,324,326,309],
[298,280,323,351,227,0,256,254],
[274,242,251,335,225,295,0,241],
[285,226,311,356,242,297,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,292,268,271,254,254,263],
[282,0,268,289,275,286,282,281],
[259,283,0,284,241,243,271,262],
[283,262,267,0,237,269,280,273],
[280,276,310,314,0,271,309,288],
[297,265,308,282,280,0,268,281],
[297,269,280,271,242,283,0,279],
[288,270,289,278,263,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,282,282,267,269,302,277],
[276,0,284,288,252,274,289,275],
[269,267,0,262,260,268,261,265],
[269,263,289,0,278,276,273,272],
[284,299,291,273,0,269,301,277],
[282,277,283,275,282,0,297,272],
[249,262,290,278,250,254,0,265],
[274,276,286,279,274,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,298,262,303,304,302,321],
[272,0,349,287,320,320,294,281],
[253,202,0,219,261,238,250,239],
[289,264,332,0,257,288,287,304],
[248,231,290,294,0,302,287,286],
[247,231,313,263,249,0,290,258],
[249,257,301,264,264,261,0,297],
[230,270,312,247,265,293,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,276,275,285,271,282,275],
[254,0,250,273,255,271,266,259],
[275,301,0,282,287,300,284,276],
[276,278,269,0,293,264,275,274],
[266,296,264,258,0,263,282,248],
[280,280,251,287,288,0,277,260],
[269,285,267,276,269,274,0,273],
[276,292,275,277,303,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,302,286,271,271,310,269],
[270,0,275,277,275,263,289,259],
[249,276,0,275,268,264,258,246],
[265,274,276,0,262,289,297,271],
[280,276,283,289,0,273,284,278],
[280,288,287,262,278,0,285,269],
[241,262,293,254,267,266,0,259],
[282,292,305,280,273,282,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,291,310,296,307,269,297],
[262,0,277,285,286,303,274,244],
[260,274,0,298,270,276,272,279],
[241,266,253,0,256,255,260,243],
[255,265,281,295,0,283,290,280],
[244,248,275,296,268,0,265,263],
[282,277,279,291,261,286,0,282],
[254,307,272,308,271,288,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,276,292,275,283,269],
[270,0,291,291,293,298,279,274],
[277,260,0,269,279,283,255,274],
[275,260,282,0,306,293,259,287],
[259,258,272,245,0,267,264,277],
[276,253,268,258,284,0,290,279],
[268,272,296,292,287,261,0,303],
[282,277,277,264,274,272,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,258,273,251,246,261,273],
[248,0,259,263,262,274,277,253],
[293,292,0,302,277,275,285,281],
[278,288,249,0,256,252,279,261],
[300,289,274,295,0,282,316,272],
[305,277,276,299,269,0,278,264],
[290,274,266,272,235,273,0,258],
[278,298,270,290,279,287,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,257,267,312,294,301,284],
[267,0,300,241,309,273,307,288],
[294,251,0,260,292,272,239,281],
[284,310,291,0,285,271,255,293],
[239,242,259,266,0,236,299,251],
[257,278,279,280,315,0,283,277],
[250,244,312,296,252,268,0,253],
[267,263,270,258,300,274,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,260,291,276,256,263,317],
[274,0,283,270,256,298,252,344],
[291,268,0,246,264,275,271,308],
[260,281,305,0,251,268,281,312],
[275,295,287,300,0,291,241,312],
[295,253,276,283,260,0,260,287],
[288,299,280,270,310,291,0,339],
[234,207,243,239,239,264,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,264,254,240,270,281],
[278,0,259,262,291,278,278,285],
[283,292,0,279,262,266,294,312],
[287,289,272,0,274,280,280,292],
[297,260,289,277,0,274,282,292],
[311,273,285,271,277,0,289,298],
[281,273,257,271,269,262,0,288],
[270,266,239,259,259,253,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,264,279,267,283,266,267],
[250,0,270,281,263,245,245,255],
[287,281,0,288,260,281,263,264],
[272,270,263,0,276,276,263,250],
[284,288,291,275,0,261,269,270],
[268,306,270,275,290,0,279,262],
[285,306,288,288,282,272,0,279],
[284,296,287,301,281,289,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,286,262,267,254,278,269],
[262,0,287,263,263,250,254,266],
[265,264,0,268,258,255,279,248],
[289,288,283,0,278,278,285,271],
[284,288,293,273,0,274,282,282],
[297,301,296,273,277,0,286,282],
[273,297,272,266,269,265,0,264],
[282,285,303,280,269,269,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,178,176,115,260,148,120],
[346,0,238,261,288,229,203,206],
[373,313,0,203,284,199,257,230],
[375,290,348,0,317,348,346,236],
[436,263,267,234,0,293,206,322],
[291,322,352,203,258,0,230,266],
[403,348,294,205,345,321,0,352],
[431,345,321,315,229,285,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,267,272,282,271,263,271],
[291,0,278,280,306,275,251,272],
[284,273,0,280,292,279,278,270],
[279,271,271,0,292,277,268,284],
[269,245,259,259,0,248,245,262],
[280,276,272,274,303,0,288,275],
[288,300,273,283,306,263,0,293],
[280,279,281,267,289,276,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,296,297,299,269,283,284],
[270,0,293,304,311,278,287,279],
[255,258,0,256,269,259,255,283],
[254,247,295,0,272,259,275,267],
[252,240,282,279,0,253,268,257],
[282,273,292,292,298,0,306,282],
[268,264,296,276,283,245,0,240],
[267,272,268,284,294,269,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,277,349,313,280,139,208],
[307,0,278,346,347,246,211,207],
[274,273,0,245,345,175,240,206],
[202,205,306,0,274,172,136,205],
[238,204,206,277,0,246,103,173],
[271,305,376,379,305,0,306,341],
[412,340,311,415,448,245,0,345],
[343,344,345,346,378,210,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,330,294,304,276,290,290],
[286,0,323,286,310,257,288,244],
[221,228,0,245,248,193,240,255],
[257,265,306,0,325,263,291,275],
[247,241,303,226,0,208,292,211],
[275,294,358,288,343,0,329,259],
[261,263,311,260,259,222,0,241],
[261,307,296,276,340,292,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,279,282,280,259,282],
[274,0,295,268,275,285,282,264],
[271,256,0,269,299,274,274,277],
[272,283,282,0,276,273,272,248],
[269,276,252,275,0,239,264,237],
[271,266,277,278,312,0,236,265],
[292,269,277,279,287,315,0,256],
[269,287,274,303,314,286,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,309,283,253,197,298,268],
[288,0,298,263,294,277,324,284],
[242,253,0,245,292,299,292,228],
[268,288,306,0,304,231,267,265],
[298,257,259,247,0,238,233,246],
[354,274,252,320,313,0,266,278],
[253,227,259,284,318,285,0,264],
[283,267,323,286,305,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,282,288,289,291,269,284],
[280,0,270,283,289,286,274,263],
[269,281,0,286,291,281,284,274],
[263,268,265,0,270,297,280,280],
[262,262,260,281,0,262,279,285],
[260,265,270,254,289,0,278,262],
[282,277,267,271,272,273,0,263],
[267,288,277,271,266,289,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,265,262,265,267,261,260],
[289,0,266,272,265,275,266,284],
[286,285,0,268,293,285,281,300],
[289,279,283,0,282,279,274,289],
[286,286,258,269,0,281,277,261],
[284,276,266,272,270,0,275,262],
[290,285,270,277,274,276,0,279],
[291,267,251,262,290,289,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,259,265,258,270,253,273],
[313,0,282,245,287,259,267,277],
[292,269,0,242,290,247,282,278],
[286,306,309,0,276,288,258,302],
[293,264,261,275,0,270,251,272],
[281,292,304,263,281,0,267,299],
[298,284,269,293,300,284,0,294],
[278,274,273,249,279,252,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,320,304,277,274,304,296],
[234,0,253,264,231,232,255,229],
[231,298,0,287,256,255,268,240],
[247,287,264,0,264,254,265,240],
[274,320,295,287,0,269,289,273],
[277,319,296,297,282,0,271,268],
[247,296,283,286,262,280,0,243],
[255,322,311,311,278,283,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,338,294,300,306,310,258,305],
[213,0,257,250,243,268,256,289],
[257,294,0,279,257,266,263,280],
[251,301,272,0,277,299,272,299],
[245,308,294,274,0,307,277,308],
[241,283,285,252,244,0,239,277],
[293,295,288,279,274,312,0,299],
[246,262,271,252,243,274,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,276,271,283,283,289,277],
[260,0,269,289,275,283,292,268],
[275,282,0,300,295,286,285,271],
[280,262,251,0,267,272,291,263],
[268,276,256,284,0,278,282,254],
[268,268,265,279,273,0,288,255],
[262,259,266,260,269,263,0,266],
[274,283,280,288,297,296,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,269,280,285,290,266,263],
[282,0,274,270,267,272,266,266],
[282,277,0,289,293,296,279,270],
[271,281,262,0,272,258,258,277],
[266,284,258,279,0,271,282,250],
[261,279,255,293,280,0,272,277],
[285,285,272,293,269,279,0,272],
[288,285,281,274,301,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,287,276,283,307,301],
[277,0,270,274,268,282,292,282],
[267,281,0,288,275,276,289,274],
[264,277,263,0,267,275,288,283],
[275,283,276,284,0,278,286,289],
[268,269,275,276,273,0,280,275],
[244,259,262,263,265,271,0,269],
[250,269,277,268,262,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,244,253,261,260,266,262],
[301,0,288,281,289,288,272,285],
[307,263,0,288,278,297,287,284],
[298,270,263,0,271,278,266,278],
[290,262,273,280,0,268,279,263],
[291,263,254,273,283,0,271,262],
[285,279,264,285,272,280,0,267],
[289,266,267,273,288,289,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,249,286,278,258,267,279],
[286,0,248,306,287,249,270,279],
[302,303,0,299,309,274,284,287],
[265,245,252,0,280,250,250,259],
[273,264,242,271,0,237,255,266],
[293,302,277,301,314,0,272,288],
[284,281,267,301,296,279,0,271],
[272,272,264,292,285,263,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,263,264,263,253,270,245],
[288,0,257,272,274,281,292,281],
[288,294,0,295,272,297,294,275],
[287,279,256,0,263,267,289,269],
[288,277,279,288,0,269,297,266],
[298,270,254,284,282,0,283,262],
[281,259,257,262,254,268,0,270],
[306,270,276,282,285,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,239,293,195,278,241,193],
[284,0,293,309,286,320,259,284],
[312,258,0,270,252,234,237,243],
[258,242,281,0,272,270,231,207],
[356,265,299,279,0,268,245,264],
[273,231,317,281,283,0,272,267],
[310,292,314,320,306,279,0,256],
[358,267,308,344,287,284,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,275,286,288,292,280],
[288,0,265,302,291,299,300,268],
[280,286,0,278,302,296,308,272],
[276,249,273,0,285,286,294,265],
[265,260,249,266,0,267,292,250],
[263,252,255,265,284,0,297,252],
[259,251,243,257,259,254,0,242],
[271,283,279,286,301,299,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,288,269,278,273,269,299],
[267,0,283,270,274,269,274,280],
[263,268,0,282,257,264,282,261],
[282,281,269,0,263,276,271,279],
[273,277,294,288,0,275,275,283],
[278,282,287,275,276,0,272,277],
[282,277,269,280,276,279,0,301],
[252,271,290,272,268,274,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,273,288,267,274,271],
[277,0,278,275,294,277,287,270],
[276,273,0,260,270,259,244,257],
[278,276,291,0,268,269,244,262],
[263,257,281,283,0,264,257,253],
[284,274,292,282,287,0,278,259],
[277,264,307,307,294,273,0,292],
[280,281,294,289,298,292,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,270,278,273,259,279],
[272,0,290,268,284,275,273,275],
[269,261,0,266,277,275,277,268],
[281,283,285,0,272,284,274,281],
[273,267,274,279,0,261,266,254],
[278,276,276,267,290,0,271,265],
[292,278,274,277,285,280,0,263],
[272,276,283,270,297,286,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,245,299,282,295,297,295],
[269,0,213,257,251,269,245,240],
[306,338,0,292,250,281,316,271],
[252,294,259,0,250,279,258,275],
[269,300,301,301,0,290,296,278],
[256,282,270,272,261,0,295,271],
[254,306,235,293,255,256,0,285],
[256,311,280,276,273,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,264,271,289,283,236,259],
[292,0,229,247,317,293,317,249],
[287,322,0,240,261,284,274,242],
[280,304,311,0,325,270,286,284],
[262,234,290,226,0,216,235,240],
[268,258,267,281,335,0,293,280],
[315,234,277,265,316,258,0,259],
[292,302,309,267,311,271,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,279,251,255,263,280,243],
[294,0,309,259,274,274,294,243],
[272,242,0,227,228,248,263,233],
[300,292,324,0,274,310,297,279],
[296,277,323,277,0,287,290,265],
[288,277,303,241,264,0,282,272],
[271,257,288,254,261,269,0,258],
[308,308,318,272,286,279,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,294,295,290,294,294,259],
[255,0,294,271,289,294,283,279],
[257,257,0,277,275,267,264,280],
[256,280,274,0,289,295,261,277],
[261,262,276,262,0,260,263,253],
[257,257,284,256,291,0,252,279],
[257,268,287,290,288,299,0,269],
[292,272,271,274,298,272,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,286,272,300,294,288,276],
[286,0,295,279,322,284,296,270],
[265,256,0,275,286,263,277,253],
[279,272,276,0,291,292,285,268],
[251,229,265,260,0,283,268,233],
[257,267,288,259,268,0,281,252],
[263,255,274,266,283,270,0,256],
[275,281,298,283,318,299,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,294,280,290,227,227,261],
[242,0,300,263,237,206,251,253],
[257,251,0,259,239,216,202,245],
[271,288,292,0,258,218,254,237],
[261,314,312,293,0,260,280,269],
[324,345,335,333,291,0,256,310],
[324,300,349,297,271,295,0,298],
[290,298,306,314,282,241,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,343,312,274,295,305,291],
[331,0,332,367,243,277,295,298],
[208,219,0,205,275,188,241,260],
[239,184,346,0,225,255,222,223],
[277,308,276,326,0,257,290,275],
[256,274,363,296,294,0,292,314],
[246,256,310,329,261,259,0,295],
[260,253,291,328,276,237,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,276,288,289,271,286],
[269,0,276,265,275,281,267,280],
[277,275,0,276,298,292,288,277],
[275,286,275,0,282,263,270,291],
[263,276,253,269,0,263,271,277],
[262,270,259,288,288,0,264,281],
[280,284,263,281,280,287,0,294],
[265,271,274,260,274,270,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,297,296,298,274,275,272],
[261,0,257,270,277,249,262,252],
[254,294,0,269,280,259,272,247],
[255,281,282,0,296,271,281,275],
[253,274,271,255,0,261,270,249],
[277,302,292,280,290,0,268,280],
[276,289,279,270,281,283,0,270],
[279,299,304,276,302,271,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,280,290,270,309,287,273],
[245,0,240,277,254,292,271,259],
[271,311,0,269,279,308,293,276],
[261,274,282,0,247,280,281,279],
[281,297,272,304,0,311,295,276],
[242,259,243,271,240,0,256,251],
[264,280,258,270,256,295,0,273],
[278,292,275,272,275,300,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,290,283,253,254,227,304],
[307,0,294,315,282,284,270,325],
[261,257,0,289,287,267,264,282],
[268,236,262,0,263,254,237,265],
[298,269,264,288,0,267,281,275],
[297,267,284,297,284,0,264,276],
[324,281,287,314,270,287,0,320],
[247,226,269,286,276,275,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,235,234,266,266,277,254],
[297,0,270,259,295,297,266,268],
[316,281,0,260,304,294,281,299],
[317,292,291,0,319,305,265,288],
[285,256,247,232,0,273,261,262],
[285,254,257,246,278,0,269,272],
[274,285,270,286,290,282,0,284],
[297,283,252,263,289,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,283,280,284,260,281,274],
[271,0,280,282,285,276,294,271],
[268,271,0,271,279,273,285,273],
[271,269,280,0,290,262,280,273],
[267,266,272,261,0,264,288,258],
[291,275,278,289,287,0,296,280],
[270,257,266,271,263,255,0,264],
[277,280,278,278,293,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,268,289,274,277,292,274],
[271,0,301,269,266,280,297,278],
[283,250,0,270,277,273,287,261],
[262,282,281,0,272,291,287,293],
[277,285,274,279,0,287,280,274],
[274,271,278,260,264,0,286,284],
[259,254,264,264,271,265,0,259],
[277,273,290,258,277,267,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,301,296,327,324,316,222],
[286,0,331,327,253,265,331,310],
[250,220,0,322,265,264,268,191],
[255,224,229,0,252,254,226,195],
[224,298,286,299,0,253,269,239],
[227,286,287,297,298,0,270,192],
[235,220,283,325,282,281,0,221],
[329,241,360,356,312,359,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,251,250,292,286,263,265],
[272,0,261,263,287,267,263,257],
[300,290,0,294,286,296,268,277],
[301,288,257,0,279,291,252,253],
[259,264,265,272,0,303,266,258],
[265,284,255,260,248,0,258,251],
[288,288,283,299,285,293,0,274],
[286,294,274,298,293,300,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,294,260,308,291,301,263],
[272,0,284,260,283,290,298,270],
[257,267,0,276,292,279,302,264],
[291,291,275,0,298,274,294,283],
[243,268,259,253,0,275,255,246],
[260,261,272,277,276,0,282,257],
[250,253,249,257,296,269,0,244],
[288,281,287,268,305,294,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,257,273,269,264,302],
[264,0,282,272,288,288,269,281],
[283,269,0,257,269,272,267,279],
[294,279,294,0,274,286,281,302],
[278,263,282,277,0,282,264,277],
[282,263,279,265,269,0,274,290],
[287,282,284,270,287,277,0,298],
[249,270,272,249,274,261,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,293,271,291,284,267,271],
[278,0,274,283,284,278,280,287],
[258,277,0,280,281,282,280,283],
[280,268,271,0,275,283,261,265],
[260,267,270,276,0,281,271,290],
[267,273,269,268,270,0,274,289],
[284,271,271,290,280,277,0,291],
[280,264,268,286,261,262,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,284,273,290,274,280,258],
[283,0,282,277,285,274,286,252],
[267,269,0,280,291,269,286,278],
[278,274,271,0,270,274,278,264],
[261,266,260,281,0,267,270,253],
[277,277,282,277,284,0,302,271],
[271,265,265,273,281,249,0,267],
[293,299,273,287,298,280,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,331,264,286,285,262,284],
[217,0,287,170,243,217,262,335],
[220,264,0,267,292,240,287,267],
[287,381,284,0,287,236,285,263],
[265,308,259,264,0,260,330,336],
[266,334,311,315,291,0,262,266],
[289,289,264,266,221,289,0,290],
[267,216,284,288,215,285,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,277,264,289,316,270,290],
[305,0,295,294,269,271,258,282],
[274,256,0,282,287,272,259,280],
[287,257,269,0,269,282,270,268],
[262,282,264,282,0,271,252,253],
[235,280,279,269,280,0,276,295],
[281,293,292,281,299,275,0,284],
[261,269,271,283,298,256,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,269,269,308,288,268,291],
[267,0,236,281,270,251,252,260],
[282,315,0,281,299,269,276,282],
[282,270,270,0,268,259,271,287],
[243,281,252,283,0,233,264,271],
[263,300,282,292,318,0,283,284],
[283,299,275,280,287,268,0,286],
[260,291,269,264,280,267,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,263,291,275,260,276,270],
[287,0,285,279,281,285,288,258],
[288,266,0,256,238,250,266,244],
[260,272,295,0,308,279,263,249],
[276,270,313,243,0,268,251,260],
[291,266,301,272,283,0,282,279],
[275,263,285,288,300,269,0,312],
[281,293,307,302,291,272,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,250,253,268,260,252,277],
[305,0,284,251,286,271,259,259],
[301,267,0,256,275,256,271,264],
[298,300,295,0,273,273,287,281],
[283,265,276,278,0,264,263,251],
[291,280,295,278,287,0,276,273],
[299,292,280,264,288,275,0,266],
[274,292,287,270,300,278,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,281,263,265,267,264,274],
[275,0,268,259,304,290,275,283],
[270,283,0,280,291,284,287,285],
[288,292,271,0,295,296,288,300],
[286,247,260,256,0,281,280,255],
[284,261,267,255,270,0,266,265],
[287,276,264,263,271,285,0,279],
[277,268,266,251,296,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,270,257,243,280,290,295],
[287,0,255,258,271,298,279,309],
[281,296,0,262,262,285,274,283],
[294,293,289,0,282,273,292,302],
[308,280,289,269,0,299,287,295],
[271,253,266,278,252,0,277,271],
[261,272,277,259,264,274,0,278],
[256,242,268,249,256,280,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,295,285,290,295,286],
[277,0,260,266,285,271,273,264],
[276,291,0,298,278,273,290,289],
[256,285,253,0,296,280,295,282],
[266,266,273,255,0,269,278,275],
[261,280,278,271,282,0,272,287],
[256,278,261,256,273,279,0,275],
[265,287,262,269,276,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,256,240,261,285,258],
[282,0,254,266,250,250,293,254],
[276,297,0,283,251,277,280,243],
[295,285,268,0,281,261,270,276],
[311,301,300,270,0,301,304,292],
[290,301,274,290,250,0,296,249],
[266,258,271,281,247,255,0,254],
[293,297,308,275,259,302,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,279,263,253,281,281,282],
[258,0,268,262,289,282,277,271],
[272,283,0,249,268,284,274,256],
[288,289,302,0,287,294,284,273],
[298,262,283,264,0,302,276,278],
[270,269,267,257,249,0,268,254],
[270,274,277,267,275,283,0,262],
[269,280,295,278,273,297,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,269,278,277,275,283,287],
[269,0,276,273,272,271,300,276],
[282,275,0,264,266,278,284,272],
[273,278,287,0,280,284,296,294],
[274,279,285,271,0,292,302,288],
[276,280,273,267,259,0,287,284],
[268,251,267,255,249,264,0,267],
[264,275,279,257,263,267,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,312,315,286,281,301,265],
[275,0,295,303,288,266,291,289],
[239,256,0,285,256,261,300,241],
[236,248,266,0,258,230,231,229],
[265,263,295,293,0,268,275,254],
[270,285,290,321,283,0,276,263],
[250,260,251,320,276,275,0,252],
[286,262,310,322,297,288,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,248,290,259,272,281],
[278,0,258,291,271,265,266,271],
[275,293,0,274,289,257,256,300],
[303,260,277,0,297,276,296,316],
[261,280,262,254,0,247,261,271],
[292,286,294,275,304,0,289,287],
[279,285,295,255,290,262,0,279],
[270,280,251,235,280,264,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,301,292,279,266,261,273],
[268,0,286,272,282,289,274,262],
[250,265,0,280,259,269,245,275],
[259,279,271,0,278,280,272,287],
[272,269,292,273,0,274,283,281],
[285,262,282,271,277,0,273,274],
[290,277,306,279,268,278,0,293],
[278,289,276,264,270,277,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,283,281,277,308,292],
[278,0,264,277,286,291,295,287],
[272,287,0,273,288,286,284,309],
[268,274,278,0,272,281,276,296],
[270,265,263,279,0,265,285,281],
[274,260,265,270,286,0,294,287],
[243,256,267,275,266,257,0,275],
[259,264,242,255,270,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,318,269,285,290,278,285],
[280,0,338,311,275,278,296,289],
[233,213,0,248,247,230,262,230],
[282,240,303,0,241,269,305,275],
[266,276,304,310,0,281,278,289],
[261,273,321,282,270,0,289,266],
[273,255,289,246,273,262,0,255],
[266,262,321,276,262,285,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,304,271,289,283,268],
[270,0,284,283,261,277,293,288],
[278,267,0,294,276,300,303,293],
[247,268,257,0,260,250,262,271],
[280,290,275,291,0,301,305,292],
[262,274,251,301,250,0,277,286],
[268,258,248,289,246,274,0,261],
[283,263,258,280,259,265,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,282,325,311,323,275,287],
[238,0,271,282,294,297,267,273],
[269,280,0,299,293,307,280,292],
[226,269,252,0,274,275,266,255],
[240,257,258,277,0,297,269,272],
[228,254,244,276,254,0,250,248],
[276,284,271,285,282,301,0,285],
[264,278,259,296,279,303,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,275,268,254,266,269,253],
[297,0,293,259,297,277,290,302],
[276,258,0,266,260,282,278,265],
[283,292,285,0,258,274,282,271],
[297,254,291,293,0,294,281,256],
[285,274,269,277,257,0,268,268],
[282,261,273,269,270,283,0,255],
[298,249,286,280,295,283,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,241,231,283,265,265,268],
[287,0,261,257,273,282,241,286],
[310,290,0,287,271,294,345,309],
[320,294,264,0,289,263,341,335],
[268,278,280,262,0,302,257,265],
[286,269,257,288,249,0,284,315],
[286,310,206,210,294,267,0,319],
[283,265,242,216,286,236,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,258,250,273,257,253,272],
[283,0,259,256,280,272,259,271],
[293,292,0,276,285,281,274,287],
[301,295,275,0,306,293,273,296],
[278,271,266,245,0,269,263,273],
[294,279,270,258,282,0,278,266],
[298,292,277,278,288,273,0,285],
[279,280,264,255,278,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,285,263,285,265,279,279],
[267,0,265,280,283,268,281,281],
[266,286,0,269,275,275,277,262],
[288,271,282,0,278,264,273,274],
[266,268,276,273,0,264,260,287],
[286,283,276,287,287,0,282,269],
[272,270,274,278,291,269,0,278],
[272,270,289,277,264,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,233,304,291,237,250,296],
[282,0,267,302,280,266,259,303],
[318,284,0,314,314,309,274,332],
[247,249,237,0,292,235,237,287],
[260,271,237,259,0,269,263,299],
[314,285,242,316,282,0,278,295],
[301,292,277,314,288,273,0,285],
[255,248,219,264,252,256,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,284,284,258,276,286,265],
[256,0,273,274,281,267,244,269],
[267,278,0,254,239,263,287,268],
[267,277,297,0,279,254,271,267],
[293,270,312,272,0,259,264,276],
[275,284,288,297,292,0,282,301],
[265,307,264,280,287,269,0,293],
[286,282,283,284,275,250,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,267,267,289,251,258,261],
[303,0,288,315,310,310,268,282],
[284,263,0,273,296,281,269,254],
[284,236,278,0,286,275,249,263],
[262,241,255,265,0,265,252,256],
[300,241,270,276,286,0,262,257],
[293,283,282,302,299,289,0,270],
[290,269,297,288,295,294,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,278,292,303,275,295,309],
[252,0,283,282,253,280,279,285],
[273,268,0,253,270,264,273,303],
[259,269,298,0,298,255,272,288],
[248,298,281,253,0,285,277,302],
[276,271,287,296,266,0,304,284],
[256,272,278,279,274,247,0,289],
[242,266,248,263,249,267,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,228,288,275,269,269,224],
[297,0,255,272,327,279,264,316],
[323,296,0,309,296,287,271,275],
[263,279,242,0,286,249,267,236],
[276,224,255,265,0,268,260,225],
[282,272,264,302,283,0,283,291],
[282,287,280,284,291,268,0,274],
[327,235,276,315,326,260,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,242,272,267,247,263,246],
[284,0,260,264,276,266,265,256],
[309,291,0,279,278,290,277,262],
[279,287,272,0,273,277,277,265],
[284,275,273,278,0,290,255,277],
[304,285,261,274,261,0,271,271],
[288,286,274,274,296,280,0,270],
[305,295,289,286,274,280,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,275,251,284,278,284],
[271,0,292,280,260,275,267,283],
[274,259,0,263,240,269,257,270],
[276,271,288,0,268,285,268,282],
[300,291,311,283,0,275,293,298],
[267,276,282,266,276,0,259,276],
[273,284,294,283,258,292,0,285],
[267,268,281,269,253,275,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,262,286,291,253,269,271],
[278,0,292,293,301,275,294,286],
[289,259,0,277,302,265,285,281],
[265,258,274,0,294,277,274,285],
[260,250,249,257,0,249,246,264],
[298,276,286,274,302,0,282,298],
[282,257,266,277,305,269,0,280],
[280,265,270,266,287,253,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,297,267,302,312,282,330],
[230,0,245,216,261,251,245,260],
[254,306,0,239,280,294,267,301],
[284,335,312,0,303,326,272,304],
[249,290,271,248,0,276,252,274],
[239,300,257,225,275,0,265,268],
[269,306,284,279,299,286,0,307],
[221,291,250,247,277,283,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,266,272,261,247,256,255],
[294,0,277,283,296,278,262,293],
[285,274,0,279,263,262,285,261],
[279,268,272,0,278,284,271,280],
[290,255,288,273,0,251,258,273],
[304,273,289,267,300,0,260,276],
[295,289,266,280,293,291,0,280],
[296,258,290,271,278,275,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,284,263,299,286,257],
[268,0,256,284,277,286,265,261],
[271,295,0,279,278,299,289,283],
[267,267,272,0,274,288,277,266],
[288,274,273,277,0,282,293,272],
[252,265,252,263,269,0,268,259],
[265,286,262,274,258,283,0,259],
[294,290,268,285,279,292,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,285,269,268,261,291,283],
[268,0,289,297,236,278,275,267],
[266,262,0,285,263,268,296,288],
[282,254,266,0,258,249,279,270],
[283,315,288,293,0,268,300,277],
[290,273,283,302,283,0,277,280],
[260,276,255,272,251,274,0,264],
[268,284,263,281,274,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,280,258,255,253,268,267],
[300,0,295,281,285,288,273,301],
[271,256,0,272,274,253,268,277],
[293,270,279,0,287,275,269,283],
[296,266,277,264,0,284,273,308],
[298,263,298,276,267,0,269,291],
[283,278,283,282,278,282,0,264],
[284,250,274,268,243,260,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,271,275,289,279,269,276],
[276,0,267,267,286,287,270,257],
[280,284,0,284,286,292,270,274],
[276,284,267,0,286,277,263,280],
[262,265,265,265,0,262,267,267],
[272,264,259,274,289,0,267,267],
[282,281,281,288,284,284,0,267],
[275,294,277,271,284,284,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,268,312,356,330,268,245],
[262,0,198,286,350,284,225,242],
[283,353,0,353,306,328,330,266],
[239,265,198,0,306,219,201,243],
[195,201,245,245,0,242,178,244],
[221,267,223,332,309,0,177,264],
[283,326,221,350,373,374,0,286],
[306,309,285,308,307,287,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,281,258,278,242,250,249],
[285,0,290,244,283,256,281,266],
[270,261,0,251,278,245,243,238],
[293,307,300,0,271,281,281,291],
[273,268,273,280,0,258,270,254],
[309,295,306,270,293,0,277,280],
[301,270,308,270,281,274,0,266],
[302,285,313,260,297,271,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,264,303,273,286,295,263],
[275,0,281,308,290,274,298,288],
[287,270,0,298,271,269,289,289],
[248,243,253,0,271,263,262,270],
[278,261,280,280,0,275,289,264],
[265,277,282,288,276,0,308,278],
[256,253,262,289,262,243,0,257],
[288,263,262,281,287,273,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,272,258,256,287,265,256],
[315,0,281,263,265,301,250,281],
[279,270,0,247,252,256,247,245],
[293,288,304,0,276,283,269,269],
[295,286,299,275,0,272,277,274],
[264,250,295,268,279,0,265,271],
[286,301,304,282,274,286,0,274],
[295,270,306,282,277,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,294,291,283,276,279,275],
[287,0,283,294,280,265,290,281],
[257,268,0,294,263,264,303,258],
[260,257,257,0,262,267,256,238],
[268,271,288,289,0,271,275,245],
[275,286,287,284,280,0,291,284],
[272,261,248,295,276,260,0,262],
[276,270,293,313,306,267,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,302,258,298,297,285,299],
[242,0,282,280,288,288,273,294],
[249,269,0,259,272,286,258,267],
[293,271,292,0,326,315,281,263],
[253,263,279,225,0,272,253,248],
[254,263,265,236,279,0,258,231],
[266,278,293,270,298,293,0,303],
[252,257,284,288,303,320,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,273,277,270,255,261,277],
[293,0,279,296,300,268,282,284],
[278,272,0,309,300,278,266,288],
[274,255,242,0,281,256,273,273],
[281,251,251,270,0,256,258,274],
[296,283,273,295,295,0,298,290],
[290,269,285,278,293,253,0,277],
[274,267,263,278,277,261,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,268,275,270,253,275,265],
[266,0,279,274,283,261,286,280],
[283,272,0,276,270,268,284,273],
[276,277,275,0,278,286,281,274],
[281,268,281,273,0,265,293,278],
[298,290,283,265,286,0,284,270],
[276,265,267,270,258,267,0,265],
[286,271,278,277,273,281,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,268,266,269,296,298,305],
[269,0,277,280,279,314,309,323],
[283,274,0,266,258,299,293,314],
[285,271,285,0,293,303,293,318],
[282,272,293,258,0,277,312,293],
[255,237,252,248,274,0,312,290],
[253,242,258,258,239,239,0,257],
[246,228,237,233,258,261,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,248,236,231,231,241,246],
[319,0,323,291,296,285,284,246],
[303,228,0,280,286,272,276,255],
[315,260,271,0,261,257,257,242],
[320,255,265,290,0,272,264,277],
[320,266,279,294,279,0,293,248],
[310,267,275,294,287,258,0,249],
[305,305,296,309,274,303,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,265,278,285,262,275,272],
[250,0,247,260,240,257,247,254],
[286,304,0,285,271,296,270,259],
[273,291,266,0,294,287,253,284],
[266,311,280,257,0,269,281,271],
[289,294,255,264,282,0,285,281],
[276,304,281,298,270,266,0,272],
[279,297,292,267,280,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,275,264,285,275,261],
[278,0,278,287,270,279,274,283],
[280,273,0,271,283,280,280,274],
[276,264,280,0,260,262,273,269],
[287,281,268,291,0,282,272,265],
[266,272,271,289,269,0,282,274],
[276,277,271,278,279,269,0,281],
[290,268,277,282,286,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,278,274,288,264,299],
[281,0,282,252,265,298,291,282],
[276,269,0,279,270,293,289,278],
[273,299,272,0,274,326,302,328],
[277,286,281,277,0,271,268,287],
[263,253,258,225,280,0,292,265],
[287,260,262,249,283,259,0,287],
[252,269,273,223,264,286,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,271,293,277,271,269,282],
[297,0,298,323,290,279,308,269],
[280,253,0,314,282,260,285,277],
[258,228,237,0,255,233,253,239],
[274,261,269,296,0,260,296,287],
[280,272,291,318,291,0,298,307],
[282,243,266,298,255,253,0,265],
[269,282,274,312,264,244,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,249,244,265,262,254],
[279,0,274,287,277,278,300,274],
[285,277,0,275,274,303,294,291],
[302,264,276,0,267,301,304,273],
[307,274,277,284,0,294,280,259],
[286,273,248,250,257,0,258,255],
[289,251,257,247,271,293,0,288],
[297,277,260,278,292,296,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,295,271,277,287,279,273],
[251,0,274,261,237,263,254,265],
[256,277,0,272,262,270,247,271],
[280,290,279,0,274,275,285,260],
[274,314,289,277,0,309,260,283],
[264,288,281,276,242,0,253,287],
[272,297,304,266,291,298,0,295],
[278,286,280,291,268,264,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,281,250,256,275,278,253],
[288,0,301,275,274,296,279,274],
[270,250,0,269,270,265,275,260],
[301,276,282,0,289,279,284,268],
[295,277,281,262,0,282,280,263],
[276,255,286,272,269,0,264,279],
[273,272,276,267,271,287,0,252],
[298,277,291,283,288,272,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,283,244,272,278,283,282],
[305,0,303,276,297,317,271,326],
[268,248,0,212,251,281,267,265],
[307,275,339,0,276,287,308,301],
[279,254,300,275,0,298,300,279],
[273,234,270,264,253,0,291,248],
[268,280,284,243,251,260,0,280],
[269,225,286,250,272,303,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,271,292,254,276,293,266],
[269,0,281,305,297,294,306,298],
[280,270,0,279,281,298,309,295],
[259,246,272,0,262,269,289,282],
[297,254,270,289,0,269,323,302],
[275,257,253,282,282,0,297,277],
[258,245,242,262,228,254,0,253],
[285,253,256,269,249,274,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,247,262,233,264,290,246],
[296,0,256,242,245,259,297,274],
[304,295,0,269,271,283,318,282],
[289,309,282,0,269,291,322,290],
[318,306,280,282,0,272,315,285],
[287,292,268,260,279,0,288,281],
[261,254,233,229,236,263,0,222],
[305,277,269,261,266,270,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,290,283,284,291,273,287],
[265,0,273,283,269,280,273,272],
[261,278,0,272,283,277,268,280],
[268,268,279,0,272,281,279,267],
[267,282,268,279,0,271,280,280],
[260,271,274,270,280,0,265,271],
[278,278,283,272,271,286,0,270],
[264,279,271,284,271,280,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,287,260,274,254,280,262],
[274,0,264,263,287,262,286,295],
[264,287,0,275,293,248,268,277],
[291,288,276,0,266,277,293,267],
[277,264,258,285,0,300,298,273],
[297,289,303,274,251,0,291,274],
[271,265,283,258,253,260,0,259],
[289,256,274,284,278,277,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,264,279,278,276,275,296],
[267,0,263,267,246,286,264,309],
[287,288,0,262,271,299,277,290],
[272,284,289,0,268,290,262,296],
[273,305,280,283,0,281,283,302],
[275,265,252,261,270,0,268,291],
[276,287,274,289,268,283,0,299],
[255,242,261,255,249,260,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,298,295,300,280,289,280],
[288,0,268,262,279,273,279,266],
[253,283,0,270,285,269,285,265],
[256,289,281,0,292,262,282,286],
[251,272,266,259,0,272,274,258],
[271,278,282,289,279,0,291,247],
[262,272,266,269,277,260,0,240],
[271,285,286,265,293,304,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,258,279,284,260,268,261],
[295,0,270,281,270,257,279,259],
[293,281,0,287,291,276,269,268],
[272,270,264,0,272,258,265,265],
[267,281,260,279,0,266,290,244],
[291,294,275,293,285,0,274,286],
[283,272,282,286,261,277,0,275],
[290,292,283,286,307,265,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,299,300,257,289,335,275],
[269,0,265,291,265,260,295,277],
[252,286,0,251,238,243,294,271],
[251,260,300,0,278,246,311,284],
[294,286,313,273,0,317,345,301],
[262,291,308,305,234,0,300,264],
[216,256,257,240,206,251,0,244],
[276,274,280,267,250,287,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,267,275,270,282,277,272],
[280,0,271,290,272,270,278,272],
[284,280,0,303,259,284,269,286],
[276,261,248,0,250,278,265,273],
[281,279,292,301,0,277,274,291],
[269,281,267,273,274,0,274,277],
[274,273,282,286,277,277,0,276],
[279,279,265,278,260,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,283,274,284,279,326,276],
[297,0,270,252,300,297,326,226],
[268,281,0,249,303,272,301,260],
[277,299,302,0,283,277,303,248],
[267,251,248,268,0,233,274,256],
[272,254,279,274,318,0,280,285],
[225,225,250,248,277,271,0,263],
[275,325,291,303,295,266,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,286,262,260,262,272,271],
[285,0,302,270,293,276,290,273],
[265,249,0,263,270,255,262,249],
[289,281,288,0,278,270,279,258],
[291,258,281,273,0,262,265,266],
[289,275,296,281,289,0,284,290],
[279,261,289,272,286,267,0,271],
[280,278,302,293,285,261,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,263,261,261,264,250],
[285,0,282,258,283,276,268,270],
[277,269,0,274,284,267,275,265],
[288,293,277,0,292,270,282,263],
[290,268,267,259,0,260,268,262],
[290,275,284,281,291,0,270,271],
[287,283,276,269,283,281,0,276],
[301,281,286,288,289,280,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,309,254,273,268,278],
[269,0,258,244,272,262,245,276],
[263,293,0,280,285,261,256,278],
[242,307,271,0,305,233,239,281],
[297,279,266,246,0,277,247,271],
[278,289,290,318,274,0,277,276],
[283,306,295,312,304,274,0,294],
[273,275,273,270,280,275,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,297,278,253,280,282,288],
[278,0,319,281,283,303,267,289],
[254,232,0,264,301,299,281,261],
[273,270,287,0,290,282,282,285],
[298,268,250,261,0,319,283,266],
[271,248,252,269,232,0,275,248],
[269,284,270,269,268,276,0,275],
[263,262,290,266,285,303,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,228,343,288,309,252,250],
[288,0,287,381,242,346,301,313],
[323,264,0,331,297,287,278,273],
[208,170,220,0,240,252,208,218],
[263,309,254,311,0,273,241,244],
[242,205,264,299,278,0,256,255],
[299,250,273,343,310,295,0,262],
[301,238,278,333,307,296,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,277,270,297,300,285],
[268,0,309,282,281,291,278,260],
[271,242,0,235,266,268,271,242],
[274,269,316,0,296,289,311,274],
[281,270,285,255,0,289,272,258],
[254,260,283,262,262,0,280,268],
[251,273,280,240,279,271,0,258],
[266,291,309,277,293,283,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,289,273,289,274,295,269],
[273,0,305,289,289,281,282,267],
[262,246,0,275,279,256,282,260],
[278,262,276,0,281,275,281,284],
[262,262,272,270,0,277,278,240],
[277,270,295,276,274,0,287,291],
[256,269,269,270,273,264,0,253],
[282,284,291,267,311,260,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,264,268,256,260,269,266],
[256,0,262,288,259,236,253,252],
[287,289,0,300,288,261,277,272],
[283,263,251,0,269,248,259,254],
[295,292,263,282,0,271,272,275],
[291,315,290,303,280,0,282,261],
[282,298,274,292,279,269,0,293],
[285,299,279,297,276,290,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,303,287,263,284,292,279],
[287,0,286,262,264,254,277,278],
[248,265,0,246,264,253,268,269],
[264,289,305,0,260,272,286,275],
[288,287,287,291,0,264,296,309],
[267,297,298,279,287,0,273,292],
[259,274,283,265,255,278,0,295],
[272,273,282,276,242,259,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,290,332,274,307,286,287],
[211,0,265,229,309,218,273,287],
[261,286,0,264,288,220,235,299],
[219,322,287,0,312,266,276,320],
[277,242,263,239,0,216,202,273],
[244,333,331,285,335,0,289,321],
[265,278,316,275,349,262,0,321],
[264,264,252,231,278,230,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,276,265,270,277,268,286],
[275,0,269,264,254,305,267,287],
[275,282,0,299,278,283,292,281],
[286,287,252,0,245,300,265,293],
[281,297,273,306,0,291,266,291],
[274,246,268,251,260,0,255,241],
[283,284,259,286,285,296,0,265],
[265,264,270,258,260,310,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,301,298,344,302,308,279],
[288,0,242,272,334,282,314,301],
[250,309,0,291,326,282,295,286],
[253,279,260,0,303,277,297,283],
[207,217,225,248,0,246,244,215],
[249,269,269,274,305,0,266,279],
[243,237,256,254,307,285,0,274],
[272,250,265,268,336,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,295,278,281,278,299,260],
[276,0,280,239,287,245,253,250],
[256,271,0,285,279,251,249,267],
[273,312,266,0,273,283,260,244],
[270,264,272,278,0,248,291,267],
[273,306,300,268,303,0,304,287],
[252,298,302,291,260,247,0,267],
[291,301,284,307,284,264,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,287,273,265,286,278,265],
[283,0,284,272,270,280,278,289],
[264,267,0,292,269,288,277,289],
[278,279,259,0,262,288,287,285],
[286,281,282,289,0,257,284,274],
[265,271,263,263,294,0,292,284],
[273,273,274,264,267,259,0,273],
[286,262,262,266,277,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,311,262,263,268,242],
[274,0,295,294,295,265,286,278],
[280,256,0,281,295,256,259,285],
[240,257,270,0,259,259,256,254],
[289,256,256,292,0,267,262,266],
[288,286,295,292,284,0,276,255],
[283,265,292,295,289,275,0,292],
[309,273,266,297,285,296,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,271,281,275,289,253,277],
[272,0,271,286,288,287,273,281],
[280,280,0,290,274,286,278,274],
[270,265,261,0,293,288,250,266],
[276,263,277,258,0,268,259,266],
[262,264,265,263,283,0,256,260],
[298,278,273,301,292,295,0,290],
[274,270,277,285,285,291,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,250,278,268,270,282,295],
[271,0,296,272,269,286,305,312],
[301,255,0,263,297,261,308,288],
[273,279,288,0,279,278,299,282],
[283,282,254,272,0,248,272,286],
[281,265,290,273,303,0,322,291],
[269,246,243,252,279,229,0,284],
[256,239,263,269,265,260,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,295,296,303,281,267,267],
[260,0,286,284,282,257,241,272],
[256,265,0,280,296,280,267,280],
[255,267,271,0,297,304,299,279],
[248,269,255,254,0,269,248,269],
[270,294,271,247,282,0,263,269],
[284,310,284,252,303,288,0,279],
[284,279,271,272,282,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,291,284,261,279,270,282],
[270,0,275,289,269,263,276,277],
[260,276,0,282,283,252,273,279],
[267,262,269,0,268,244,279,273],
[290,282,268,283,0,272,270,260],
[272,288,299,307,279,0,278,266],
[281,275,278,272,281,273,0,265],
[269,274,272,278,291,285,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,277,272,260,277,290,273],
[294,0,270,269,281,301,289,286],
[274,281,0,276,260,278,274,269],
[279,282,275,0,261,289,302,291],
[291,270,291,290,0,295,296,286],
[274,250,273,262,256,0,260,281],
[261,262,277,249,255,291,0,281],
[278,265,282,260,265,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,263,292,293,257,272,278],
[283,0,262,289,302,251,254,277],
[288,289,0,284,287,296,274,271],
[259,262,267,0,298,280,277,281],
[258,249,264,253,0,253,256,272],
[294,300,255,271,298,0,266,272],
[279,297,277,274,295,285,0,287],
[273,274,280,270,279,279,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,281,261,277,299,279,263],
[276,0,265,265,279,271,268,280],
[270,286,0,264,283,283,265,277],
[290,286,287,0,289,288,271,285],
[274,272,268,262,0,284,272,291],
[252,280,268,263,267,0,273,279],
[272,283,286,280,279,278,0,261],
[288,271,274,266,260,272,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,279,273,264,274,268,268],
[289,0,283,284,258,258,276,265],
[272,268,0,265,266,252,254,256],
[278,267,286,0,275,272,285,257],
[287,293,285,276,0,291,285,260],
[277,293,299,279,260,0,275,276],
[283,275,297,266,266,276,0,265],
[283,286,295,294,291,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,227,251,211,175,209,213],
[413,0,302,286,266,281,302,268],
[324,249,0,286,229,228,265,287],
[300,265,265,0,246,210,248,249],
[340,285,322,305,0,268,304,342],
[376,270,323,341,283,0,342,289],
[342,249,286,303,247,209,0,252],
[338,283,264,302,209,262,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,251,292,279,256,283,290],
[275,0,288,275,279,257,277,277],
[300,263,0,277,286,271,267,257],
[259,276,274,0,291,258,256,257],
[272,272,265,260,0,252,272,266],
[295,294,280,293,299,0,299,270],
[268,274,284,295,279,252,0,266],
[261,274,294,294,285,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,243,273,268,271,264,273],
[272,0,263,271,245,238,262,239],
[308,288,0,294,257,276,263,276],
[278,280,257,0,259,242,234,244],
[283,306,294,292,0,248,284,272],
[280,313,275,309,303,0,265,271],
[287,289,288,317,267,286,0,257],
[278,312,275,307,279,280,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,333,357,236,273,257,312],
[294,0,336,295,256,298,278,208],
[218,215,0,214,215,240,218,171],
[194,256,337,0,217,301,194,254],
[315,295,336,334,0,340,298,275],
[278,253,311,250,211,0,276,271],
[294,273,333,357,253,275,0,207],
[239,343,380,297,276,280,344,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,284,291,286,280,267],
[283,0,274,277,284,288,278,278],
[272,277,0,273,293,276,269,259],
[267,274,278,0,272,299,276,265],
[260,267,258,279,0,284,250,270],
[265,263,275,252,267,0,278,272],
[271,273,282,275,301,273,0,258],
[284,273,292,286,281,279,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,299,321,279,309,258,291],
[232,0,233,264,196,295,206,222],
[252,318,0,269,246,292,288,308],
[230,287,282,0,216,313,276,291],
[272,355,305,335,0,330,280,358],
[242,256,259,238,221,0,222,247],
[293,345,263,275,271,329,0,338],
[260,329,243,260,193,304,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,296,288,283,263,283,315],
[265,0,274,289,272,271,272,283],
[255,277,0,271,264,258,262,265],
[263,262,280,0,281,253,277,272],
[268,279,287,270,0,259,267,283],
[288,280,293,298,292,0,272,301],
[268,279,289,274,284,279,0,293],
[236,268,286,279,268,250,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,256,229,256,249,271,292],
[285,0,233,210,287,249,262,274],
[295,318,0,243,257,266,259,278],
[322,341,308,0,280,290,272,283],
[295,264,294,271,0,293,309,275],
[302,302,285,261,258,0,256,265],
[280,289,292,279,242,295,0,271],
[259,277,273,268,276,286,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,277,340,221,313,294,308],
[256,0,251,316,264,259,268,306],
[274,300,0,328,285,333,314,309],
[211,235,223,0,227,217,246,292],
[330,287,266,324,0,305,314,345],
[238,292,218,334,246,0,279,304],
[257,283,237,305,237,272,0,271],
[243,245,242,259,206,247,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,326,198,267,331,238,175],
[263,0,261,173,221,285,239,199],
[225,290,0,199,223,243,218,153],
[353,378,352,0,270,418,330,311],
[284,330,328,281,0,327,326,217],
[220,266,308,133,224,0,198,178],
[313,312,333,221,225,353,0,203],
[376,352,398,240,334,373,348,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,162,206,229,138,163,230],
[367,0,272,273,324,274,298,206],
[389,279,0,254,254,229,211,301],
[345,278,297,0,323,252,254,275],
[322,227,297,228,0,181,255,275],
[413,277,322,299,370,0,323,231],
[388,253,340,297,296,228,0,227],
[321,345,250,276,276,320,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,251,259,268,264,233,284],
[290,0,261,276,242,263,272,276],
[300,290,0,284,272,286,281,293],
[292,275,267,0,269,278,266,286],
[283,309,279,282,0,278,274,292],
[287,288,265,273,273,0,272,271],
[318,279,270,285,277,279,0,278],
[267,275,258,265,259,280,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,278,269,283,252,255],
[289,0,276,274,288,292,304,256],
[289,275,0,265,276,297,285,267],
[273,277,286,0,274,293,311,269],
[282,263,275,277,0,287,287,283],
[268,259,254,258,264,0,279,270],
[299,247,266,240,264,272,0,246],
[296,295,284,282,268,281,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,283,269,278,276,271,281],
[278,0,266,291,270,294,275,277],
[268,285,0,266,285,279,260,295],
[282,260,285,0,275,273,270,284],
[273,281,266,276,0,271,282,279],
[275,257,272,278,280,0,282,284],
[280,276,291,281,269,269,0,290],
[270,274,256,267,272,267,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,257,268,287,295,265,284],
[271,0,259,270,259,275,278,261],
[294,292,0,282,273,286,293,281],
[283,281,269,0,273,279,259,275],
[264,292,278,278,0,301,292,279],
[256,276,265,272,250,0,253,265],
[286,273,258,292,259,298,0,275],
[267,290,270,276,272,286,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,283,271,276,285,273,280],
[296,0,321,274,305,301,290,296],
[268,230,0,271,286,273,256,285],
[280,277,280,0,298,302,275,298],
[275,246,265,253,0,294,267,275],
[266,250,278,249,257,0,267,267],
[278,261,295,276,284,284,0,281],
[271,255,266,253,276,284,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,273,268,277,292,282],
[271,0,270,269,256,275,267,270],
[278,281,0,257,267,279,278,279],
[278,282,294,0,273,282,283,277],
[283,295,284,278,0,293,295,273],
[274,276,272,269,258,0,282,280],
[259,284,273,268,256,269,0,280],
[269,281,272,274,278,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,252,244,250,249,272,292],
[284,0,265,271,276,274,291,301],
[299,286,0,248,287,301,315,308],
[307,280,303,0,290,275,303,321],
[301,275,264,261,0,283,294,281],
[302,277,250,276,268,0,276,284],
[279,260,236,248,257,275,0,279],
[259,250,243,230,270,267,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,267,272,271,278,267,282],
[274,0,270,282,282,281,298,283],
[284,281,0,295,273,282,286,289],
[279,269,256,0,272,279,271,283],
[280,269,278,279,0,284,278,286],
[273,270,269,272,267,0,281,284],
[284,253,265,280,273,270,0,288],
[269,268,262,268,265,267,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,303,272,280,282,291,304],
[271,0,294,268,294,274,279,297],
[248,257,0,239,294,247,264,276],
[279,283,312,0,308,275,286,304],
[271,257,257,243,0,252,257,260],
[269,277,304,276,299,0,287,305],
[260,272,287,265,294,264,0,254],
[247,254,275,247,291,246,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,268,288,292,252,275,256],
[302,0,299,273,297,279,296,290],
[283,252,0,277,284,268,273,268],
[263,278,274,0,280,255,272,258],
[259,254,267,271,0,259,263,255],
[299,272,283,296,292,0,296,293],
[276,255,278,279,288,255,0,260],
[295,261,283,293,296,258,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,242,248,243,268,245,252],
[298,0,264,280,254,275,275,269],
[309,287,0,285,265,281,252,291],
[303,271,266,0,280,272,281,261],
[308,297,286,271,0,288,278,276],
[283,276,270,279,263,0,277,267],
[306,276,299,270,273,274,0,266],
[299,282,260,290,275,284,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,257,267,261,277,275,273],
[296,0,288,249,268,283,287,281],
[294,263,0,281,292,281,283,272],
[284,302,270,0,295,292,285,289],
[290,283,259,256,0,299,306,293],
[274,268,270,259,252,0,271,259],
[276,264,268,266,245,280,0,260],
[278,270,279,262,258,292,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,300,284,275,284,284,274],
[277,0,273,293,258,265,271,293],
[251,278,0,271,254,249,259,279],
[267,258,280,0,281,270,284,314],
[276,293,297,270,0,293,248,312],
[267,286,302,281,258,0,258,308],
[267,280,292,267,303,293,0,313],
[277,258,272,237,239,243,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,251,251,274,250,254,195],
[302,0,272,266,320,247,234,251],
[300,279,0,273,286,306,257,272],
[300,285,278,0,305,259,221,237],
[277,231,265,246,0,233,233,280],
[301,304,245,292,318,0,209,221],
[297,317,294,330,318,342,0,275],
[356,300,279,314,271,330,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,291,289,307,258,283,309],
[299,0,294,270,308,266,271,303],
[260,257,0,265,296,285,266,305],
[262,281,286,0,266,257,282,287],
[244,243,255,285,0,273,266,270],
[293,285,266,294,278,0,287,290],
[268,280,285,269,285,264,0,285],
[242,248,246,264,281,261,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,281,305,275,277,277,279],
[253,0,265,291,275,271,260,274],
[270,286,0,277,261,262,271,289],
[246,260,274,0,257,277,233,263],
[276,276,290,294,0,272,275,309],
[274,280,289,274,279,0,275,298],
[274,291,280,318,276,276,0,297],
[272,277,262,288,242,253,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,259,261,276,257,265,271],
[289,0,272,278,288,260,272,268],
[292,279,0,307,288,259,271,294],
[290,273,244,0,275,271,274,276],
[275,263,263,276,0,277,278,265],
[294,291,292,280,274,0,285,271],
[286,279,280,277,273,266,0,269],
[280,283,257,275,286,280,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,311,233,225,285,238,248],
[316,0,338,300,267,350,289,305],
[240,213,0,226,260,267,225,244],
[318,251,325,0,280,311,258,242],
[326,284,291,271,0,312,252,272],
[266,201,284,240,239,0,180,237],
[313,262,326,293,299,371,0,264],
[303,246,307,309,279,314,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,265,281,278,301,272,270],
[263,0,277,273,295,297,274,268],
[286,274,0,266,301,285,253,270],
[270,278,285,0,302,291,264,276],
[273,256,250,249,0,286,252,244],
[250,254,266,260,265,0,249,253],
[279,277,298,287,299,302,0,273],
[281,283,281,275,307,298,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,273,294,287,264,251,285],
[258,0,262,290,299,294,274,292],
[278,289,0,309,281,282,271,302],
[257,261,242,0,289,256,258,264],
[264,252,270,262,0,248,249,242],
[287,257,269,295,303,0,284,297],
[300,277,280,293,302,267,0,286],
[266,259,249,287,309,254,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,280,279,272,283,292,254],
[267,0,279,272,271,268,273,256],
[271,272,0,275,273,279,275,268],
[272,279,276,0,279,278,279,255],
[279,280,278,272,0,282,285,283],
[268,283,272,273,269,0,279,257],
[259,278,276,272,266,272,0,264],
[297,295,283,296,268,294,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,307,283,268,299,285,298],
[265,0,279,275,269,281,256,272],
[244,272,0,258,251,266,234,253],
[268,276,293,0,271,285,236,280],
[283,282,300,280,0,296,254,299],
[252,270,285,266,255,0,254,264],
[266,295,317,315,297,297,0,301],
[253,279,298,271,252,287,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,269,292,285,278,283,286],
[257,0,267,295,288,266,266,271],
[282,284,0,284,284,278,259,281],
[259,256,267,0,266,272,256,261],
[266,263,267,285,0,263,258,259],
[273,285,273,279,288,0,265,275],
[268,285,292,295,293,286,0,282],
[265,280,270,290,292,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,284,276,263,280,266,291],
[278,0,286,272,276,271,282,300],
[267,265,0,280,272,275,269,286],
[275,279,271,0,259,271,267,295],
[288,275,279,292,0,287,286,303],
[271,280,276,280,264,0,275,280],
[285,269,282,284,265,276,0,296],
[260,251,265,256,248,271,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,250,282,266,285,240,271],
[274,0,268,295,280,283,275,285],
[301,283,0,296,298,284,275,294],
[269,256,255,0,264,281,243,264],
[285,271,253,287,0,261,285,277],
[266,268,267,270,290,0,244,292],
[311,276,276,308,266,307,0,302],
[280,266,257,287,274,259,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,276,284,273,302,290,295],
[259,0,247,237,262,266,287,273],
[275,304,0,293,267,301,297,282],
[267,314,258,0,279,267,300,282],
[278,289,284,272,0,276,308,286],
[249,285,250,284,275,0,286,274],
[261,264,254,251,243,265,0,273],
[256,278,269,269,265,277,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,273,265,278,259,290,310],
[282,0,282,293,267,279,306,287],
[278,269,0,288,278,288,294,285],
[286,258,263,0,291,266,272,287],
[273,284,273,260,0,294,283,282],
[292,272,263,285,257,0,292,278],
[261,245,257,279,268,259,0,274],
[241,264,266,264,269,273,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,264,259,277,268,273,287],
[289,0,268,270,263,256,281,279],
[287,283,0,277,285,264,274,271],
[292,281,274,0,268,259,294,289],
[274,288,266,283,0,268,284,273],
[283,295,287,292,283,0,275,288],
[278,270,277,257,267,276,0,255],
[264,272,280,262,278,263,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_551.csv", index=False, header=False)
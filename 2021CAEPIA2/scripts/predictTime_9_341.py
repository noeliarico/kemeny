
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,185,124,150,148,169,138,197,169],
[156,0,160,136,156,177,192,202,146],
[217,181,0,178,170,202,210,260,181],
[191,205,163,0,201,196,203,242,181],
[193,185,171,140,0,162,152,212,191],
[172,164,139,145,179,0,183,247,182],
[203,149,131,138,189,158,0,225,146],
[144,139,81,99,129,94,116,0,122],
[172,195,160,160,150,159,195,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,128,162,128,163,210,206,152],
[121,0,121,156,119,132,216,75,194],
[213,220,0,248,130,179,254,200,262],
[179,185,93,0,141,86,240,140,111],
[213,222,211,200,0,144,279,131,159],
[178,209,162,255,197,0,276,178,189],
[131,125,87,101,62,65,0,119,113],
[135,266,141,201,210,163,222,0,226],
[189,147,79,230,182,152,228,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,182,184,183,174,185,180,166],
[170,0,177,171,165,166,172,175,164],
[159,164,0,167,160,155,164,165,155],
[157,170,174,0,168,176,178,171,169],
[158,176,181,173,0,181,176,176,173],
[167,175,186,165,160,0,165,173,151],
[156,169,177,163,165,176,0,162,165],
[161,166,176,170,165,168,179,0,151],
[175,177,186,172,168,190,176,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,158,157,171,182,183,140,204],
[155,0,129,160,131,154,163,129,174],
[183,212,0,178,145,184,202,170,199],
[184,181,163,0,154,181,180,150,176],
[170,210,196,187,0,200,175,174,193],
[159,187,157,160,141,0,163,132,173],
[158,178,139,161,166,178,0,136,164],
[201,212,171,191,167,209,205,0,194],
[137,167,142,165,148,168,177,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,168,181,180,171,184,181,177],
[157,0,176,180,169,172,180,188,187],
[173,165,0,178,166,185,177,182,182],
[160,161,163,0,173,168,177,163,174],
[161,172,175,168,0,176,177,179,173],
[170,169,156,173,165,0,167,179,169],
[157,161,164,164,164,174,0,162,180],
[160,153,159,178,162,162,179,0,175],
[164,154,159,167,168,172,161,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,172,166,185,173,178,164],
[172,0,175,172,172,178,169,195,182],
[171,166,0,169,170,178,169,186,162],
[169,169,172,0,163,187,164,182,160],
[175,169,171,178,0,170,175,175,160],
[156,163,163,154,171,0,159,174,158],
[168,172,172,177,166,182,0,194,174],
[163,146,155,159,166,167,147,0,159],
[177,159,179,181,181,183,167,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,169,183,185,173,186,160,161],
[180,0,172,176,184,169,181,164,173],
[172,169,0,181,176,170,177,162,173],
[158,165,160,0,179,167,174,157,150],
[156,157,165,162,0,170,165,148,140],
[168,172,171,174,171,0,171,160,152],
[155,160,164,167,176,170,0,153,147],
[181,177,179,184,193,181,188,0,160],
[180,168,168,191,201,189,194,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,235,167,206,176,278,239,245],
[174,0,231,174,125,157,223,205,149],
[106,110,0,118,110,158,181,175,140],
[174,167,223,0,138,121,235,169,210],
[135,216,231,203,0,225,211,206,229],
[165,184,183,220,116,0,217,183,214],
[63,118,160,106,130,124,0,138,127],
[102,136,166,172,135,158,203,0,159],
[96,192,201,131,112,127,214,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,162,157,152,176,150,164],
[172,0,180,159,161,171,183,177,172],
[171,161,0,153,171,155,192,137,172],
[179,182,188,0,169,172,185,155,162],
[184,180,170,172,0,156,189,164,175],
[189,170,186,169,185,0,178,146,184],
[165,158,149,156,152,163,0,169,162],
[191,164,204,186,177,195,172,0,164],
[177,169,169,179,166,157,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,187,234,187,174,201,158,161],
[168,0,224,224,177,165,131,197,112],
[154,117,0,213,173,155,129,195,105],
[107,117,128,0,119,177,151,174,137],
[154,164,168,222,0,173,192,239,139],
[167,176,186,164,168,0,109,137,134],
[140,210,212,190,149,232,0,270,181],
[183,144,146,167,102,204,71,0,102],
[180,229,236,204,202,207,160,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,182,221,155,183,188,134,198],
[142,0,146,181,104,170,124,123,201],
[159,195,0,207,182,202,161,184,216],
[120,160,134,0,115,167,164,119,165],
[186,237,159,226,0,233,185,172,164],
[158,171,139,174,108,0,134,134,186],
[153,217,180,177,156,207,0,159,190],
[207,218,157,222,169,207,182,0,209],
[143,140,125,176,177,155,151,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,157,164,154,162,160,168,145],
[186,0,170,158,166,176,159,183,156],
[184,171,0,181,154,160,152,166,164],
[177,183,160,0,158,161,151,181,159],
[187,175,187,183,0,164,190,187,167],
[179,165,181,180,177,0,184,182,174],
[181,182,189,190,151,157,0,193,165],
[173,158,175,160,154,159,148,0,145],
[196,185,177,182,174,167,176,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,169,161,149,152,155,130,153],
[197,0,188,183,165,160,179,177,192],
[172,153,0,201,158,152,154,151,170],
[180,158,140,0,138,138,151,152,161],
[192,176,183,203,0,133,177,160,148],
[189,181,189,203,208,0,198,181,162],
[186,162,187,190,164,143,0,141,178],
[211,164,190,189,181,160,200,0,188],
[188,149,171,180,193,179,163,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,166,165,160,165,169,171,164],
[181,0,168,164,157,160,167,180,179],
[175,173,0,170,164,182,158,182,168],
[176,177,171,0,170,168,179,190,174],
[181,184,177,171,0,171,184,184,170],
[176,181,159,173,170,0,165,178,168],
[172,174,183,162,157,176,0,182,171],
[170,161,159,151,157,163,159,0,178],
[177,162,173,167,171,173,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,175,183,174,157,175,172,174],
[162,0,175,184,164,156,188,176,164],
[166,166,0,181,162,162,167,167,155],
[158,157,160,0,163,153,165,172,175],
[167,177,179,178,0,164,160,170,152],
[184,185,179,188,177,0,178,174,166],
[166,153,174,176,181,163,0,165,162],
[169,165,174,169,171,167,176,0,172],
[167,177,186,166,189,175,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,166,156,194,144,124,143,152],
[197,0,184,180,204,165,152,176,159],
[175,157,0,164,192,134,150,158,133],
[185,161,177,0,216,167,136,156,164],
[147,137,149,125,0,139,125,133,141],
[197,176,207,174,202,0,172,156,157],
[217,189,191,205,216,169,0,202,163],
[198,165,183,185,208,185,139,0,184],
[189,182,208,177,200,184,178,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,170,180,184,182,174,188,186],
[178,0,160,183,184,168,174,187,159],
[171,181,0,183,169,178,178,180,171],
[161,158,158,0,167,163,168,163,164],
[157,157,172,174,0,168,165,164,187],
[159,173,163,178,173,0,175,174,167],
[167,167,163,173,176,166,0,155,166],
[153,154,161,178,177,167,186,0,175],
[155,182,170,177,154,174,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,204,164,170,178,175,168,156],
[162,0,180,166,164,189,177,165,178],
[137,161,0,157,162,173,174,139,153],
[177,175,184,0,176,184,176,163,163],
[171,177,179,165,0,169,184,164,165],
[163,152,168,157,172,0,159,153,146],
[166,164,167,165,157,182,0,148,179],
[173,176,202,178,177,188,193,0,167],
[185,163,188,178,176,195,162,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,207,167,166,145,183,152,165],
[170,0,179,182,158,159,173,167,180],
[134,162,0,141,135,136,165,149,144],
[174,159,200,0,173,167,189,180,163],
[175,183,206,168,0,177,187,173,167],
[196,182,205,174,164,0,189,168,175],
[158,168,176,152,154,152,0,153,158],
[189,174,192,161,168,173,188,0,182],
[176,161,197,178,174,166,183,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,170,150,161,170,148,170],
[175,0,165,177,155,181,166,161,148],
[164,176,0,166,133,163,152,169,140],
[171,164,175,0,164,165,155,165,147],
[191,186,208,177,0,184,176,169,190],
[180,160,178,176,157,0,185,180,174],
[171,175,189,186,165,156,0,152,150],
[193,180,172,176,172,161,189,0,162],
[171,193,201,194,151,167,191,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,177,171,175,163,186,151,178],
[197,0,167,163,185,163,179,185,199],
[164,174,0,194,165,157,179,184,186],
[170,178,147,0,162,166,176,161,158],
[166,156,176,179,0,166,164,168,172],
[178,178,184,175,175,0,199,169,180],
[155,162,162,165,177,142,0,160,179],
[190,156,157,180,173,172,181,0,176],
[163,142,155,183,169,161,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,157,123,165,147,136,165,156],
[147,0,162,140,169,140,128,152,146],
[184,179,0,172,168,169,137,174,170],
[218,201,169,0,213,205,180,181,196],
[176,172,173,128,0,192,155,141,205],
[194,201,172,136,149,0,168,171,201],
[205,213,204,161,186,173,0,191,230],
[176,189,167,160,200,170,150,0,173],
[185,195,171,145,136,140,111,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,0,84,0,0,220,136,220],
[220,0,84,84,84,84,220,220,220],
[341,257,0,220,220,136,220,136,220],
[257,257,121,0,121,257,341,257,341],
[341,257,121,220,0,257,341,136,341],
[341,257,205,84,84,0,220,136,220],
[121,121,121,0,0,121,0,136,341],
[205,121,205,84,205,205,205,0,341],
[121,121,121,0,0,121,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,169,177,165,188,177,177,171],
[150,0,161,165,164,181,154,158,159],
[172,180,0,166,159,198,157,176,181],
[164,176,175,0,177,188,157,171,169],
[176,177,182,164,0,178,172,174,170],
[153,160,143,153,163,0,153,163,158],
[164,187,184,184,169,188,0,173,170],
[164,183,165,170,167,178,168,0,171],
[170,182,160,172,171,183,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,172,210,163,211,183,180,195],
[165,0,167,187,172,187,155,174,173],
[169,174,0,198,158,198,159,169,195],
[131,154,143,0,144,168,162,153,170],
[178,169,183,197,0,196,165,183,182],
[130,154,143,173,145,0,140,149,155],
[158,186,182,179,176,201,0,187,188],
[161,167,172,188,158,192,154,0,185],
[146,168,146,171,159,186,153,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,167,173,183,162,179,182,184],
[175,0,182,189,183,189,174,191,154],
[174,159,0,166,160,188,172,179,151],
[168,152,175,0,168,157,161,186,152],
[158,158,181,173,0,185,176,182,141],
[179,152,153,184,156,0,170,168,134],
[162,167,169,180,165,171,0,188,158],
[159,150,162,155,159,173,153,0,145],
[157,187,190,189,200,207,183,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,198,170,186,181,179,169,186],
[167,0,175,170,183,168,170,171,164],
[143,166,0,152,163,149,154,167,174],
[171,171,189,0,173,167,166,182,172],
[155,158,178,168,0,151,151,152,165],
[160,173,192,174,190,0,165,175,170],
[162,171,187,175,190,176,0,173,178],
[172,170,174,159,189,166,168,0,175],
[155,177,167,169,176,171,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,174,146,183,172,160,154],
[157,0,174,170,164,177,158,146,143],
[166,167,0,160,154,165,150,166,158],
[167,171,181,0,160,177,176,151,148],
[195,177,187,181,0,161,170,173,174],
[158,164,176,164,180,0,171,164,174],
[169,183,191,165,171,170,0,144,147],
[181,195,175,190,168,177,197,0,167],
[187,198,183,193,167,167,194,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,188,177,197,170,200,172,204],
[165,0,162,208,190,189,170,175,183],
[153,179,0,179,154,158,175,144,158],
[164,133,162,0,173,154,136,129,152],
[144,151,187,168,0,150,172,149,186],
[171,152,183,187,191,0,154,169,185],
[141,171,166,205,169,187,0,166,177],
[169,166,197,212,192,172,175,0,168],
[137,158,183,189,155,156,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,199,163,151,192,190,159,193],
[197,0,204,174,145,150,190,172,183],
[142,137,0,149,134,135,103,169,176],
[178,167,192,0,141,146,159,201,146],
[190,196,207,200,0,133,154,181,157],
[149,191,206,195,208,0,200,210,164],
[151,151,238,182,187,141,0,185,152],
[182,169,172,140,160,131,156,0,154],
[148,158,165,195,184,177,189,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,154,163,166,170,170,139],
[172,0,175,157,169,191,184,173,142],
[175,166,0,156,171,179,161,174,171],
[187,184,185,0,193,187,184,194,168],
[178,172,170,148,0,168,156,159,163],
[175,150,162,154,173,0,175,158,153],
[171,157,180,157,185,166,0,160,161],
[171,168,167,147,182,183,181,0,152],
[202,199,170,173,178,188,180,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,164,162,206,166,187,149],
[163,0,162,169,171,185,197,174,173],
[168,179,0,160,149,174,161,144,190],
[177,172,181,0,157,212,187,182,185],
[179,170,192,184,0,191,175,176,179],
[135,156,167,129,150,0,127,147,147],
[175,144,180,154,166,214,0,160,147],
[154,167,197,159,165,194,181,0,155],
[192,168,151,156,162,194,194,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,197,179,187,171,198,179],
[171,0,170,175,173,178,159,189,174],
[164,171,0,187,180,164,160,175,165],
[144,166,154,0,163,165,157,173,162],
[162,168,161,178,0,171,156,172,166],
[154,163,177,176,170,0,164,168,166],
[170,182,181,184,185,177,0,185,171],
[143,152,166,168,169,173,156,0,156],
[162,167,176,179,175,175,170,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,159,162,171,172,165,172],
[179,0,178,167,170,174,182,175,168],
[176,163,0,161,169,187,183,170,177],
[182,174,180,0,162,176,182,187,169],
[179,171,172,179,0,174,171,161,177],
[170,167,154,165,167,0,167,157,172],
[169,159,158,159,170,174,0,164,166],
[176,166,171,154,180,184,177,0,172],
[169,173,164,172,164,169,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,164,171,190,193,154,202,174],
[153,0,169,172,178,162,158,176,150],
[177,172,0,177,203,184,165,171,162],
[170,169,164,0,188,156,140,155,149],
[151,163,138,153,0,178,145,141,142],
[148,179,157,185,163,0,123,161,153],
[187,183,176,201,196,218,0,178,157],
[139,165,170,186,200,180,163,0,155],
[167,191,179,192,199,188,184,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,149,174,190,174,166,160],
[173,0,170,151,149,207,143,163,167],
[168,171,0,133,143,187,153,166,159],
[192,190,208,0,164,212,180,191,187],
[167,192,198,177,0,184,175,193,184],
[151,134,154,129,157,0,147,173,161],
[167,198,188,161,166,194,0,176,168],
[175,178,175,150,148,168,165,0,174],
[181,174,182,154,157,180,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,181,189,126,184,207,129,173],
[191,0,126,175,125,172,192,135,275],
[160,215,0,254,213,237,247,203,256],
[152,166,87,0,124,158,175,155,165],
[215,216,128,217,0,248,152,228,283],
[157,169,104,183,93,0,181,138,193],
[134,149,94,166,189,160,0,88,181],
[212,206,138,186,113,203,253,0,255],
[168,66,85,176,58,148,160,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,180,160,183,191,192,192,182],
[151,0,139,164,186,167,161,164,125],
[161,202,0,175,177,178,190,166,161],
[181,177,166,0,185,177,162,168,151],
[158,155,164,156,0,164,143,152,148],
[150,174,163,164,177,0,142,175,131],
[149,180,151,179,198,199,0,167,182],
[149,177,175,173,189,166,174,0,159],
[159,216,180,190,193,210,159,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,171,176,169,167,177,180],
[161,0,180,177,164,191,165,181,182],
[162,161,0,166,154,180,174,173,180],
[170,164,175,0,175,177,166,201,190],
[165,177,187,166,0,190,182,193,187],
[172,150,161,164,151,0,169,183,182],
[174,176,167,175,159,172,0,186,177],
[164,160,168,140,148,158,155,0,171],
[161,159,161,151,154,159,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,142,145,150,179,131,190,166],
[189,0,166,176,162,198,165,182,189],
[199,175,0,173,158,211,177,185,177],
[196,165,168,0,173,181,155,185,139],
[191,179,183,168,0,201,175,202,186],
[162,143,130,160,140,0,133,160,146],
[210,176,164,186,166,208,0,198,181],
[151,159,156,156,139,181,143,0,161],
[175,152,164,202,155,195,160,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,190,178,158,158,160,177,151],
[149,0,138,134,158,141,162,169,150],
[151,203,0,209,188,168,189,195,191],
[163,207,132,0,171,188,188,187,171],
[183,183,153,170,0,183,155,150,173],
[183,200,173,153,158,0,172,160,166],
[181,179,152,153,186,169,0,174,167],
[164,172,146,154,191,181,167,0,180],
[190,191,150,170,168,175,174,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,179,183,182,173,174,189,163],
[159,0,167,179,174,164,188,161,163],
[162,174,0,172,165,157,163,174,144],
[158,162,169,0,155,154,182,164,142],
[159,167,176,186,0,162,179,176,176],
[168,177,184,187,179,0,191,184,162],
[167,153,178,159,162,150,0,169,144],
[152,180,167,177,165,157,172,0,140],
[178,178,197,199,165,179,197,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,171,185,191,177,87,163,130],
[239,0,182,219,200,211,184,161,180],
[170,159,0,197,163,204,109,102,164],
[156,122,144,0,124,141,125,115,110],
[150,141,178,217,0,142,96,154,121],
[164,130,137,200,199,0,108,119,120],
[254,157,232,216,245,233,0,174,192],
[178,180,239,226,187,222,167,0,199],
[211,161,177,231,220,221,149,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,167,174,165,188,166,179,166],
[175,0,157,171,171,175,172,162,163],
[174,184,0,183,171,190,164,168,170],
[167,170,158,0,169,182,166,170,177],
[176,170,170,172,0,179,155,174,173],
[153,166,151,159,162,0,164,169,165],
[175,169,177,175,186,177,0,184,174],
[162,179,173,171,167,172,157,0,176],
[175,178,171,164,168,176,167,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,152,178,160,146,173,174,174],
[177,0,180,180,168,158,173,179,177],
[189,161,0,183,171,155,195,179,176],
[163,161,158,0,158,158,183,166,169],
[181,173,170,183,0,172,185,177,172],
[195,183,186,183,169,0,191,188,196],
[168,168,146,158,156,150,0,169,158],
[167,162,162,175,164,153,172,0,169],
[167,164,165,172,169,145,183,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,168,167,151,150,161,176,160],
[185,0,164,153,142,163,174,176,169],
[173,177,0,173,143,157,160,168,163],
[174,188,168,0,160,177,202,174,188],
[190,199,198,181,0,166,195,184,162],
[191,178,184,164,175,0,191,174,164],
[180,167,181,139,146,150,0,166,180],
[165,165,173,167,157,167,175,0,202],
[181,172,178,153,179,177,161,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,182,282,184,181,227,210,209],
[197,0,157,236,153,212,203,164,240],
[159,184,0,217,237,238,250,157,289],
[59,105,124,0,105,203,155,156,219],
[157,188,104,236,0,203,169,149,261],
[160,129,103,138,138,0,122,145,181],
[114,138,91,186,172,219,0,136,247],
[131,177,184,185,192,196,205,0,214],
[132,101,52,122,80,160,94,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,198,248,199,135,195,99,224],
[119,0,124,93,121,144,108,79,134],
[143,217,0,208,158,119,165,100,179],
[93,248,133,0,98,130,102,110,201],
[142,220,183,243,0,150,144,134,209],
[206,197,222,211,191,0,195,125,229],
[146,233,176,239,197,146,0,178,213],
[242,262,241,231,207,216,163,0,255],
[117,207,162,140,132,112,128,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,156,159,154,150,170,157,161],
[179,0,166,173,170,167,181,173,165],
[185,175,0,173,168,179,175,185,174],
[182,168,168,0,175,167,179,179,167],
[187,171,173,166,0,162,180,165,176],
[191,174,162,174,179,0,182,168,180],
[171,160,166,162,161,159,0,171,163],
[184,168,156,162,176,173,170,0,167],
[180,176,167,174,165,161,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,233,202,228,180,183,166,194],
[131,0,170,155,148,163,133,135,148],
[108,171,0,196,199,144,152,136,171],
[139,186,145,0,191,174,172,135,167],
[113,193,142,150,0,159,170,186,183],
[161,178,197,167,182,0,171,180,160],
[158,208,189,169,171,170,0,144,180],
[175,206,205,206,155,161,197,0,183],
[147,193,170,174,158,181,161,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,186,186,190,201,240,185,151],
[164,0,234,198,224,253,240,238,218],
[155,107,0,265,301,161,249,226,145],
[155,143,76,0,288,202,237,167,202],
[151,117,40,53,0,118,190,28,104],
[140,88,180,139,223,0,293,205,196],
[101,101,92,104,151,48,0,80,98],
[156,103,115,174,313,136,261,0,175],
[190,123,196,139,237,145,243,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,202,100,188,169,164,176,155],
[188,0,274,172,168,191,204,263,245],
[139,67,0,130,113,34,125,43,121],
[241,169,211,0,248,218,211,185,180],
[153,173,228,93,0,164,176,181,244],
[172,150,307,123,177,0,142,163,180],
[177,137,216,130,165,199,0,95,172],
[165,78,298,156,160,178,246,0,224],
[186,96,220,161,97,161,169,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,187,196,197,206,169,204,198],
[171,0,160,166,179,175,166,171,190],
[154,181,0,186,185,175,149,164,181],
[145,175,155,0,166,163,155,158,176],
[144,162,156,175,0,147,171,184,180],
[135,166,166,178,194,0,176,156,197],
[172,175,192,186,170,165,0,189,177],
[137,170,177,183,157,185,152,0,184],
[143,151,160,165,161,144,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,121,144,155,134,140,94,141],
[191,0,144,107,180,166,146,115,161],
[220,197,0,130,209,171,173,148,194],
[197,234,211,0,201,197,168,163,174],
[186,161,132,140,0,160,148,172,163],
[207,175,170,144,181,0,176,156,164],
[201,195,168,173,193,165,0,170,184],
[247,226,193,178,169,185,171,0,176],
[200,180,147,167,178,177,157,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,165,169,169,171,170,166,161],
[188,0,186,176,181,179,162,182,186],
[176,155,0,175,176,171,175,178,176],
[172,165,166,0,172,165,173,161,168],
[172,160,165,169,0,163,157,167,170],
[170,162,170,176,178,0,160,164,166],
[171,179,166,168,184,181,0,178,175],
[175,159,163,180,174,177,163,0,170],
[180,155,165,173,171,175,166,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,181,189,197,183,198,187,168],
[153,0,154,158,170,162,171,165,148],
[160,187,0,181,187,175,190,185,174],
[152,183,160,0,193,177,184,170,172],
[144,171,154,148,0,163,169,174,151],
[158,179,166,164,178,0,189,175,165],
[143,170,151,157,172,152,0,162,141],
[154,176,156,171,167,166,179,0,163],
[173,193,167,169,190,176,200,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,170,185,177,166,164,154,170],
[194,0,170,184,186,193,155,174,163],
[171,171,0,185,201,181,156,158,185],
[156,157,156,0,177,166,172,150,168],
[164,155,140,164,0,170,149,151,177],
[175,148,160,175,171,0,171,171,165],
[177,186,185,169,192,170,0,178,185],
[187,167,183,191,190,170,163,0,182],
[171,178,156,173,164,176,156,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,174,168,166,184,194,169,170],
[167,0,169,147,167,170,179,166,176],
[167,172,0,167,162,176,180,161,165],
[173,194,174,0,175,188,197,171,166],
[175,174,179,166,0,180,177,176,180],
[157,171,165,153,161,0,177,166,164],
[147,162,161,144,164,164,0,158,176],
[172,175,180,170,165,175,183,0,178],
[171,165,176,175,161,177,165,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,182,143,168,139,159,148,125],
[163,0,185,185,175,157,183,169,119],
[159,156,0,153,166,159,172,150,101],
[198,156,188,0,149,164,160,186,128],
[173,166,175,192,0,188,170,143,132],
[202,184,182,177,153,0,161,158,117],
[182,158,169,181,171,180,0,167,172],
[193,172,191,155,198,183,174,0,136],
[216,222,240,213,209,224,169,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,137,178,209,195,197,190,184],
[130,0,161,155,174,113,191,123,161],
[204,180,0,201,212,218,164,228,234],
[163,186,140,0,158,157,142,175,209],
[132,167,129,183,0,147,161,175,204],
[146,228,123,184,194,0,175,165,219],
[144,150,177,199,180,166,0,182,199],
[151,218,113,166,166,176,159,0,178],
[157,180,107,132,137,122,142,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,173,184,159,168,173,166],
[176,0,171,177,172,168,175,179,165],
[174,170,0,186,172,155,163,161,171],
[168,164,155,0,165,152,153,159,152],
[157,169,169,176,0,160,162,165,169],
[182,173,186,189,181,0,170,171,188],
[173,166,178,188,179,171,0,175,184],
[168,162,180,182,176,170,166,0,176],
[175,176,170,189,172,153,157,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,193,157,153,171,151,163],
[173,0,185,197,174,165,175,161,163],
[169,156,0,173,169,161,175,167,171],
[148,144,168,0,155,155,169,159,165],
[184,167,172,186,0,175,187,172,157],
[188,176,180,186,166,0,171,180,168],
[170,166,166,172,154,170,0,168,176],
[190,180,174,182,169,161,173,0,176],
[178,178,170,176,184,173,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,205,171,197,178,177,178,176],
[176,0,212,185,193,180,182,169,173],
[136,129,0,147,166,133,156,128,148],
[170,156,194,0,171,163,164,149,156],
[144,148,175,170,0,158,159,132,156],
[163,161,208,178,183,0,188,170,165],
[164,159,185,177,182,153,0,157,169],
[163,172,213,192,209,171,184,0,167],
[165,168,193,185,185,176,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,173,174,187,164,147,189,165],
[186,0,174,170,184,163,166,165,155],
[168,167,0,173,177,165,172,159,158],
[167,171,168,0,166,156,155,162,177],
[154,157,164,175,0,146,157,161,142],
[177,178,176,185,195,0,151,178,195],
[194,175,169,186,184,190,0,178,161],
[152,176,182,179,180,163,163,0,152],
[176,186,183,164,199,146,180,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,141,148,138,222,168,165,128],
[154,0,136,177,102,168,93,139,136],
[200,205,0,164,191,193,179,178,198],
[193,164,177,0,149,173,180,192,199],
[203,239,150,192,0,203,186,186,202],
[119,173,148,168,138,0,165,148,176],
[173,248,162,161,155,176,0,162,187],
[176,202,163,149,155,193,179,0,130],
[213,205,143,142,139,165,154,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,184,160,159,170,158,162,168],
[188,0,196,160,191,175,170,177,181],
[157,145,0,157,166,153,170,159,158],
[181,181,184,0,185,191,175,164,191],
[182,150,175,156,0,171,159,159,170],
[171,166,188,150,170,0,163,182,179],
[183,171,171,166,182,178,0,174,188],
[179,164,182,177,182,159,167,0,171],
[173,160,183,150,171,162,153,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,147,131,158,174,133,164,155],
[181,0,160,134,147,178,137,148,158],
[194,181,0,163,175,193,172,158,163],
[210,207,178,0,182,183,145,181,168],
[183,194,166,159,0,163,141,169,181],
[167,163,148,158,178,0,149,169,163],
[208,204,169,196,200,192,0,181,163],
[177,193,183,160,172,172,160,0,175],
[186,183,178,173,160,178,178,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,172,167,165,168,161,175,165],
[165,0,168,165,169,159,168,153,160],
[169,173,0,164,159,170,171,167,159],
[174,176,177,0,183,163,170,173,179],
[176,172,182,158,0,174,175,174,175],
[173,182,171,178,167,0,184,174,174],
[180,173,170,171,166,157,0,169,173],
[166,188,174,168,167,167,172,0,158],
[176,181,182,162,166,167,168,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,160,145,152,150,152,155,174],
[195,0,174,180,170,182,189,203,184],
[181,167,0,164,172,175,180,186,190],
[196,161,177,0,200,188,205,201,220],
[189,171,169,141,0,154,166,182,170],
[191,159,166,153,187,0,161,179,187],
[189,152,161,136,175,180,0,166,163],
[186,138,155,140,159,162,175,0,177],
[167,157,151,121,171,154,178,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,186,165,164,191,185,185,170],
[133,0,171,147,161,160,159,168,147],
[155,170,0,165,133,153,179,151,152],
[176,194,176,0,149,171,191,181,175],
[177,180,208,192,0,160,186,188,179],
[150,181,188,170,181,0,181,179,179],
[156,182,162,150,155,160,0,179,161],
[156,173,190,160,153,162,162,0,151],
[171,194,189,166,162,162,180,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,172,177,177,180,171,175,160],
[155,0,160,165,173,158,154,165,175],
[169,181,0,188,188,186,165,176,161],
[164,176,153,0,152,166,146,142,166],
[164,168,153,189,0,183,157,166,163],
[161,183,155,175,158,0,167,159,162],
[170,187,176,195,184,174,0,166,185],
[166,176,165,199,175,182,175,0,171],
[181,166,180,175,178,179,156,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,173,154,165,169,157,147],
[160,0,173,160,179,163,169,158,159],
[164,168,0,153,164,148,162,166,157],
[168,181,188,0,177,172,177,168,178],
[187,162,177,164,0,157,172,175,160],
[176,178,193,169,184,0,178,174,170],
[172,172,179,164,169,163,0,163,159],
[184,183,175,173,166,167,178,0,163],
[194,182,184,163,181,171,182,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,152,171,150,193,167,154,171],
[164,0,170,118,162,186,168,153,146],
[189,171,0,165,193,212,177,182,179],
[170,223,176,0,183,199,192,158,173],
[191,179,148,158,0,194,153,164,176],
[148,155,129,142,147,0,164,138,140],
[174,173,164,149,188,177,0,164,169],
[187,188,159,183,177,203,177,0,178],
[170,195,162,168,165,201,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,151,175,161,187,190,141,186],
[188,0,178,196,169,180,186,171,152],
[190,163,0,193,167,175,197,157,175],
[166,145,148,0,148,159,172,148,170],
[180,172,174,193,0,193,192,164,176],
[154,161,166,182,148,0,198,152,151],
[151,155,144,169,149,143,0,148,157],
[200,170,184,193,177,189,193,0,186],
[155,189,166,171,165,190,184,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,178,190,162,177,164,188,171],
[152,0,151,175,160,181,159,174,189],
[163,190,0,181,165,167,169,178,174],
[151,166,160,0,175,160,179,163,168],
[179,181,176,166,0,167,182,178,180],
[164,160,174,181,174,0,168,180,186],
[177,182,172,162,159,173,0,156,177],
[153,167,163,178,163,161,185,0,178],
[170,152,167,173,161,155,164,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,174,174,186,180,148,160],
[169,0,158,167,175,178,176,154,173],
[185,183,0,165,185,185,181,160,176],
[167,174,176,0,184,182,187,167,171],
[167,166,156,157,0,178,167,155,165],
[155,163,156,159,163,0,175,159,162],
[161,165,160,154,174,166,0,143,166],
[193,187,181,174,186,182,198,0,164],
[181,168,165,170,176,179,175,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,187,148,163,170,174,184,140],
[190,0,223,179,168,186,184,193,180],
[154,118,0,128,121,143,152,186,118],
[193,162,213,0,183,181,193,200,182],
[178,173,220,158,0,160,199,179,153],
[171,155,198,160,181,0,178,207,156],
[167,157,189,148,142,163,0,178,134],
[157,148,155,141,162,134,163,0,129],
[201,161,223,159,188,185,207,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,174,158,162,169,155,176],
[174,0,163,177,159,169,169,163,170],
[168,178,0,180,164,159,168,166,171],
[167,164,161,0,155,148,161,155,170],
[183,182,177,186,0,165,165,173,175],
[179,172,182,193,176,0,176,170,172],
[172,172,173,180,176,165,0,169,177],
[186,178,175,186,168,171,172,0,180],
[165,171,170,171,166,169,164,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,176,171,177,171,161,189,188],
[184,0,192,192,185,183,170,195,191],
[165,149,0,165,170,162,179,175,169],
[170,149,176,0,163,168,172,181,157],
[164,156,171,178,0,174,161,182,176],
[170,158,179,173,167,0,175,182,186],
[180,171,162,169,180,166,0,181,181],
[152,146,166,160,159,159,160,0,163],
[153,150,172,184,165,155,160,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,171,150,184,152,190,166],
[171,0,205,171,172,159,179,174,173],
[159,136,0,169,151,154,191,172,168],
[170,170,172,0,166,156,173,159,176],
[191,169,190,175,0,180,175,195,181],
[157,182,187,185,161,0,149,194,185],
[189,162,150,168,166,192,0,174,190],
[151,167,169,182,146,147,167,0,178],
[175,168,173,165,160,156,151,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,155,155,176,169,158,175],
[159,0,162,146,156,177,153,150,166],
[164,179,0,169,161,171,163,168,175],
[186,195,172,0,175,179,183,175,170],
[186,185,180,166,0,185,169,175,177],
[165,164,170,162,156,0,167,156,169],
[172,188,178,158,172,174,0,163,173],
[183,191,173,166,166,185,178,0,175],
[166,175,166,171,164,172,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,191,177,180,185,168,180,181],
[168,0,178,166,180,179,165,170,170],
[150,163,0,154,171,165,165,156,166],
[164,175,187,0,173,163,158,153,167],
[161,161,170,168,0,173,170,166,170],
[156,162,176,178,168,0,153,175,172],
[173,176,176,183,171,188,0,164,185],
[161,171,185,188,175,166,177,0,173],
[160,171,175,174,171,169,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,166,151,181,174,169,159,163],
[197,0,191,162,188,179,190,180,165],
[175,150,0,162,175,173,168,183,166],
[190,179,179,0,193,180,193,165,181],
[160,153,166,148,0,159,178,159,166],
[167,162,168,161,182,0,174,189,169],
[172,151,173,148,163,167,0,161,174],
[182,161,158,176,182,152,180,0,175],
[178,176,175,160,175,172,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,172,163,186,176,175,192,179],
[161,0,180,198,162,174,177,186,178],
[169,161,0,186,160,182,182,198,177],
[178,143,155,0,160,155,170,152,171],
[155,179,181,181,0,174,195,190,181],
[165,167,159,186,167,0,189,179,176],
[166,164,159,171,146,152,0,184,167],
[149,155,143,189,151,162,157,0,173],
[162,163,164,170,160,165,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,174,157,168,156,150,191,182],
[181,0,167,171,167,175,182,195,183],
[167,174,0,162,163,170,157,162,174],
[184,170,179,0,172,166,176,179,179],
[173,174,178,169,0,162,190,199,187],
[185,166,171,175,179,0,178,173,178],
[191,159,184,165,151,163,0,182,172],
[150,146,179,162,142,168,159,0,141],
[159,158,167,162,154,163,169,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,105,136,138,170,150,183,121],
[166,0,131,173,154,161,189,153,187],
[236,210,0,170,169,157,211,201,157],
[205,168,171,0,164,168,211,204,167],
[203,187,172,177,0,149,201,186,133],
[171,180,184,173,192,0,193,151,203],
[191,152,130,130,140,148,0,162,99],
[158,188,140,137,155,190,179,0,160],
[220,154,184,174,208,138,242,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,196,182,157,190,171,174],
[159,0,165,187,169,151,200,177,170],
[165,176,0,183,180,173,205,200,165],
[145,154,158,0,152,135,166,153,160],
[159,172,161,189,0,152,179,157,149],
[184,190,168,206,189,0,193,192,190],
[151,141,136,175,162,148,0,146,143],
[170,164,141,188,184,149,195,0,172],
[167,171,176,181,192,151,198,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,174,185,186,188,191,178],
[164,0,180,178,167,177,180,175,176],
[171,161,0,189,176,182,172,179,157],
[167,163,152,0,155,171,170,176,162],
[156,174,165,186,0,171,191,180,165],
[155,164,159,170,170,0,166,181,160],
[153,161,169,171,150,175,0,176,162],
[150,166,162,165,161,160,165,0,167],
[163,165,184,179,176,181,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,155,171,160,149,168,160],
[178,0,163,159,142,162,170,173,158],
[178,178,0,168,177,189,183,182,180],
[186,182,173,0,165,177,168,189,159],
[170,199,164,176,0,180,185,184,170],
[181,179,152,164,161,0,181,186,157],
[192,171,158,173,156,160,0,176,169],
[173,168,159,152,157,155,165,0,160],
[181,183,161,182,171,184,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,188,178,175,185,163,183],
[164,0,161,189,165,188,190,166,160],
[171,180,0,175,163,171,159,154,172],
[153,152,166,0,169,175,156,151,170],
[163,176,178,172,0,165,169,158,180],
[166,153,170,166,176,0,181,142,171],
[156,151,182,185,172,160,0,164,174],
[178,175,187,190,183,199,177,0,166],
[158,181,169,171,161,170,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,192,195,172,192,162,173,159],
[163,0,159,184,194,196,171,188,180],
[149,182,0,191,193,206,156,172,166],
[146,157,150,0,173,206,167,193,160],
[169,147,148,168,0,184,155,178,132],
[149,145,135,135,157,0,142,162,124],
[179,170,185,174,186,199,0,212,183],
[168,153,169,148,163,179,129,0,148],
[182,161,175,181,209,217,158,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,172,172,164,173,151,202,171],
[149,0,109,150,140,146,135,172,134],
[169,232,0,138,159,165,169,182,95],
[169,191,203,0,171,175,213,207,148],
[177,201,182,170,0,172,174,194,150],
[168,195,176,166,169,0,204,189,136],
[190,206,172,128,167,137,0,183,151],
[139,169,159,134,147,152,158,0,125],
[170,207,246,193,191,205,190,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,164,169,197,179,186,178],
[156,0,177,160,172,162,165,180,179],
[167,164,0,144,167,161,165,170,173],
[177,181,197,0,178,185,159,181,180],
[172,169,174,163,0,173,155,176,174],
[144,179,180,156,168,0,157,179,170],
[162,176,176,182,186,184,0,182,176],
[155,161,171,160,165,162,159,0,170],
[163,162,168,161,167,171,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,157,163,170,167,156,171,168],
[179,0,170,178,169,182,161,174,176],
[184,171,0,172,172,166,172,182,180],
[178,163,169,0,172,177,167,175,180],
[171,172,169,169,0,167,164,176,168],
[174,159,175,164,174,0,174,170,162],
[185,180,169,174,177,167,0,191,176],
[170,167,159,166,165,171,150,0,159],
[173,165,161,161,173,179,165,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,167,164,162,159,181,179],
[168,0,171,163,171,178,156,173,186],
[175,170,0,180,172,171,166,197,171],
[174,178,161,0,183,174,177,204,175],
[177,170,169,158,0,171,176,203,186],
[179,163,170,167,170,0,193,194,184],
[182,185,175,164,165,148,0,176,177],
[160,168,144,137,138,147,165,0,169],
[162,155,170,166,155,157,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,149,203,175,166,178,163,203],
[165,0,175,195,167,196,210,208,222],
[192,166,0,211,174,176,195,218,202],
[138,146,130,0,165,176,169,164,180],
[166,174,167,176,0,204,153,203,195],
[175,145,165,165,137,0,171,177,211],
[163,131,146,172,188,170,0,215,199],
[178,133,123,177,138,164,126,0,180],
[138,119,139,161,146,130,142,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,154,180,172,175,163,177,160],
[181,0,168,190,184,183,177,172,176],
[187,173,0,191,173,184,160,172,170],
[161,151,150,0,169,174,146,159,158],
[169,157,168,172,0,175,174,172,170],
[166,158,157,167,166,0,161,165,156],
[178,164,181,195,167,180,0,176,175],
[164,169,169,182,169,176,165,0,167],
[181,165,171,183,171,185,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,175,185,182,202,189,167,174],
[185,0,200,184,184,190,177,154,186],
[166,141,0,200,185,200,179,163,171],
[156,157,141,0,163,213,145,158,164],
[159,157,156,178,0,190,168,163,172],
[139,151,141,128,151,0,134,162,150],
[152,164,162,196,173,207,0,184,192],
[174,187,178,183,178,179,157,0,164],
[167,155,170,177,169,191,149,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,152,181,163,164,165,174,181],
[153,0,150,165,156,162,157,173,171],
[189,191,0,181,179,185,185,170,183],
[160,176,160,0,162,168,175,162,174],
[178,185,162,179,0,162,166,169,182],
[177,179,156,173,179,0,160,167,172],
[176,184,156,166,175,181,0,161,184],
[167,168,171,179,172,174,180,0,169],
[160,170,158,167,159,169,157,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,149,184,192,165,176,191,176],
[164,0,153,183,207,154,184,169,146],
[192,188,0,205,215,184,181,185,167],
[157,158,136,0,173,170,146,172,149],
[149,134,126,168,0,150,134,136,128],
[176,187,157,171,191,0,168,184,151],
[165,157,160,195,207,173,0,177,151],
[150,172,156,169,205,157,164,0,168],
[165,195,174,192,213,190,190,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,166,172,175,187,179,197],
[175,0,153,163,170,167,172,165,189],
[159,188,0,176,181,172,182,184,197],
[175,178,165,0,178,174,174,165,186],
[169,171,160,163,0,175,192,190,172],
[166,174,169,167,166,0,170,177,182],
[154,169,159,167,149,171,0,168,164],
[162,176,157,176,151,164,173,0,186],
[144,152,144,155,169,159,177,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,164,194,182,165,168,163],
[162,0,154,142,178,182,158,167,139],
[175,187,0,172,196,192,178,172,170],
[177,199,169,0,189,191,179,177,173],
[147,163,145,152,0,169,154,156,159],
[159,159,149,150,172,0,165,158,173],
[176,183,163,162,187,176,0,179,166],
[173,174,169,164,185,183,162,0,171],
[178,202,171,168,182,168,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,191,173,170,168,148,156,182],
[161,0,192,164,158,162,133,110,168],
[150,149,0,144,131,162,134,107,145],
[168,177,197,0,158,178,157,153,190],
[171,183,210,183,0,201,172,145,191],
[173,179,179,163,140,0,115,142,144],
[193,208,207,184,169,226,0,176,194],
[185,231,234,188,196,199,165,0,216],
[159,173,196,151,150,197,147,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,175,164,166,168,151,177],
[178,0,177,181,174,165,180,185,177],
[169,164,0,176,159,182,173,162,190],
[166,160,165,0,147,162,183,161,168],
[177,167,182,194,0,177,185,180,179],
[175,176,159,179,164,0,180,155,171],
[173,161,168,158,156,161,0,148,182],
[190,156,179,180,161,186,193,0,184],
[164,164,151,173,162,170,159,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,192,222,197,228,161,202,247],
[88,0,186,201,169,179,128,157,213],
[149,155,0,233,174,174,171,129,169],
[119,140,108,0,139,167,135,163,189],
[144,172,167,202,0,242,185,152,280],
[113,162,167,174,99,0,138,156,198],
[180,213,170,206,156,203,0,130,186],
[139,184,212,178,189,185,211,0,236],
[94,128,172,152,61,143,155,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,140,68,123,184,79,169,199],
[191,0,175,127,148,300,191,221,246],
[201,166,0,99,146,188,144,214,199],
[273,214,242,0,214,241,165,270,325],
[218,193,195,127,0,227,86,184,227],
[157,41,153,100,114,0,164,184,202],
[262,150,197,176,255,177,0,258,325],
[172,120,127,71,157,157,83,0,183],
[142,95,142,16,114,139,16,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,181,173,183,182,168,184],
[164,0,166,178,161,173,177,173,174],
[171,175,0,177,170,164,171,162,174],
[160,163,164,0,156,159,174,158,179],
[168,180,171,185,0,169,181,164,171],
[158,168,177,182,172,0,169,171,183],
[159,164,170,167,160,172,0,169,175],
[173,168,179,183,177,170,172,0,178],
[157,167,167,162,170,158,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,146,175,154,155,158,145,158],
[184,0,170,167,169,170,170,160,159],
[195,171,0,198,173,169,181,175,177],
[166,174,143,0,167,153,169,154,160],
[187,172,168,174,0,165,176,150,168],
[186,171,172,188,176,0,174,171,168],
[183,171,160,172,165,167,0,157,169],
[196,181,166,187,191,170,184,0,165],
[183,182,164,181,173,173,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,166,295,326,310,274,197,236],
[76,0,127,205,302,287,326,205,220],
[175,214,0,286,286,175,250,78,204],
[46,136,55,0,282,214,230,39,177],
[15,39,55,59,0,121,265,15,137],
[31,54,166,127,220,0,192,8,204],
[67,15,91,111,76,149,0,60,111],
[144,136,263,302,326,333,281,0,244],
[105,121,137,164,204,137,230,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,251,124,318,261,221,187,150],
[153,0,188,109,145,153,217,99,142],
[90,153,0,71,189,173,233,77,198],
[217,232,270,0,272,254,245,198,137],
[23,196,152,69,0,164,164,22,85],
[80,188,168,87,177,0,272,93,198],
[120,124,108,96,177,69,0,63,165],
[154,242,264,143,319,248,278,0,217],
[191,199,143,204,256,143,176,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,182,191,186,193,157,188,164],
[159,0,152,149,154,168,165,162,165],
[159,189,0,187,162,177,171,183,152],
[150,192,154,0,184,171,170,171,148],
[155,187,179,157,0,180,173,173,169],
[148,173,164,170,161,0,158,163,162],
[184,176,170,171,168,183,0,191,172],
[153,179,158,170,168,178,150,0,177],
[177,176,189,193,172,179,169,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,174,139,175,162,166,173],
[177,0,166,177,157,176,161,161,173],
[172,175,0,175,146,168,162,161,192],
[167,164,166,0,159,166,162,162,173],
[202,184,195,182,0,197,167,182,199],
[166,165,173,175,144,0,154,155,177],
[179,180,179,179,174,187,0,166,181],
[175,180,180,179,159,186,175,0,190],
[168,168,149,168,142,164,160,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,149,162,158,178,160,169,155],
[190,0,182,184,180,194,173,180,164],
[192,159,0,178,174,197,176,173,182],
[179,157,163,0,168,170,153,177,154],
[183,161,167,173,0,180,171,182,162],
[163,147,144,171,161,0,147,156,149],
[181,168,165,188,170,194,0,173,171],
[172,161,168,164,159,185,168,0,149],
[186,177,159,187,179,192,170,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,199,163,170,198,182,188,176],
[193,0,178,179,157,183,175,175,181],
[142,163,0,159,152,182,157,171,156],
[178,162,182,0,168,164,147,185,180],
[171,184,189,173,0,181,160,175,179],
[143,158,159,177,160,0,134,142,152],
[159,166,184,194,181,207,0,185,166],
[153,166,170,156,166,199,156,0,155],
[165,160,185,161,162,189,175,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,152,162,182,141,181,157,178],
[165,0,155,181,182,143,158,153,179],
[189,186,0,178,194,150,179,148,171],
[179,160,163,0,175,158,173,174,169],
[159,159,147,166,0,135,149,145,172],
[200,198,191,183,206,0,186,165,194],
[160,183,162,168,192,155,0,141,156],
[184,188,193,167,196,176,200,0,178],
[163,162,170,172,169,147,185,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,177,165,165,160,194,173],
[182,0,165,185,162,156,156,188,171],
[180,176,0,175,168,180,173,180,158],
[164,156,166,0,143,158,146,194,166],
[176,179,173,198,0,183,167,179,195],
[176,185,161,183,158,0,158,186,170],
[181,185,168,195,174,183,0,169,189],
[147,153,161,147,162,155,172,0,138],
[168,170,183,175,146,171,152,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,188,185,167,180,172,184,169],
[161,0,172,163,155,166,151,166,151],
[153,169,0,158,143,167,137,160,150],
[156,178,183,0,163,173,155,173,148],
[174,186,198,178,0,179,162,170,181],
[161,175,174,168,162,0,152,164,166],
[169,190,204,186,179,189,0,194,177],
[157,175,181,168,171,177,147,0,164],
[172,190,191,193,160,175,164,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,153,162,165,155,145,181,147],
[159,0,162,144,160,162,156,171,146],
[188,179,0,161,153,161,161,179,154],
[179,197,180,0,173,177,161,197,169],
[176,181,188,168,0,165,171,190,164],
[186,179,180,164,176,0,182,200,182],
[196,185,180,180,170,159,0,191,180],
[160,170,162,144,151,141,150,0,130],
[194,195,187,172,177,159,161,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,202,177,189,173,163,170,181],
[154,0,207,176,182,163,183,176,171],
[139,134,0,179,171,170,173,152,146],
[164,165,162,0,188,140,166,149,182],
[152,159,170,153,0,141,163,160,161],
[168,178,171,201,200,0,194,189,201],
[178,158,168,175,178,147,0,159,166],
[171,165,189,192,181,152,182,0,170],
[160,170,195,159,180,140,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,165,165,162,162,164,157,162],
[185,0,164,186,184,173,182,180,175],
[176,177,0,177,180,173,169,177,160],
[176,155,164,0,177,162,167,159,158],
[179,157,161,164,0,163,163,162,167],
[179,168,168,179,178,0,171,162,171],
[177,159,172,174,178,170,0,157,169],
[184,161,164,182,179,179,184,0,171],
[179,166,181,183,174,170,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,160,154,171,161,171,149,160],
[185,0,169,169,176,156,156,156,150],
[181,172,0,174,176,162,177,169,170],
[187,172,167,0,188,175,169,172,167],
[170,165,165,153,0,159,157,164,157],
[180,185,179,166,182,0,168,159,187],
[170,185,164,172,184,173,0,147,152],
[192,185,172,169,177,182,194,0,177],
[181,191,171,174,184,154,189,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,169,166,179,173,160,174],
[176,0,177,179,177,198,173,167,189],
[174,164,0,177,167,182,155,165,184],
[172,162,164,0,160,176,172,160,178],
[175,164,174,181,0,186,173,172,200],
[162,143,159,165,155,0,163,151,165],
[168,168,186,169,168,178,0,159,181],
[181,174,176,181,169,190,182,0,187],
[167,152,157,163,141,176,160,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,173,165,203,179,177,164],
[162,0,185,203,175,188,192,173,178],
[176,156,0,184,167,183,169,159,154],
[168,138,157,0,155,193,169,162,162],
[176,166,174,186,0,200,178,177,179],
[138,153,158,148,141,0,174,159,140],
[162,149,172,172,163,167,0,165,171],
[164,168,182,179,164,182,176,0,180],
[177,163,187,179,162,201,170,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,188,228,156,164,166,96,206],
[158,0,163,105,161,141,149,157,177],
[153,178,0,167,177,116,179,135,191],
[113,236,174,0,169,133,189,159,163],
[185,180,164,172,0,131,169,141,164],
[177,200,225,208,210,0,139,191,159],
[175,192,162,152,172,202,0,200,166],
[245,184,206,182,200,150,141,0,177],
[135,164,150,178,177,182,175,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,170,147,179,156,162,144,161],
[144,0,178,165,176,157,172,154,162],
[171,163,0,153,152,162,158,150,160],
[194,176,188,0,175,154,203,162,165],
[162,165,189,166,0,170,182,176,174],
[185,184,179,187,171,0,188,169,168],
[179,169,183,138,159,153,0,184,160],
[197,187,191,179,165,172,157,0,202],
[180,179,181,176,167,173,181,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,178,163,174,175,182,171],
[160,0,161,153,154,164,156,161,144],
[171,180,0,173,169,176,167,172,169],
[163,188,168,0,157,161,159,178,167],
[178,187,172,184,0,169,172,184,178],
[167,177,165,180,172,0,160,168,171],
[166,185,174,182,169,181,0,183,177],
[159,180,169,163,157,173,158,0,156],
[170,197,172,174,163,170,164,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,198,181,175,175,176,181],
[164,0,168,197,170,153,190,171,158],
[171,173,0,190,174,159,181,155,162],
[143,144,151,0,145,145,160,152,153],
[160,171,167,196,0,170,205,159,189],
[166,188,182,196,171,0,185,162,153],
[166,151,160,181,136,156,0,154,153],
[165,170,186,189,182,179,187,0,183],
[160,183,179,188,152,188,188,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,150,171,171,166,165,174,176],
[171,0,156,183,148,146,176,188,155],
[191,185,0,188,176,162,173,175,180],
[170,158,153,0,164,171,180,178,176],
[170,193,165,177,0,165,163,181,166],
[175,195,179,170,176,0,174,203,176],
[176,165,168,161,178,167,0,196,178],
[167,153,166,163,160,138,145,0,162],
[165,186,161,165,175,165,163,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,213,189,168,183,196,180,175],
[149,0,190,178,138,175,182,170,145],
[128,151,0,188,158,164,174,157,123],
[152,163,153,0,137,159,171,144,118],
[173,203,183,204,0,149,171,154,167],
[158,166,177,182,192,0,176,177,149],
[145,159,167,170,170,165,0,144,145],
[161,171,184,197,187,164,197,0,153],
[166,196,218,223,174,192,196,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,184,174,156,118,140,236,200],
[194,0,133,183,179,176,186,199,146],
[157,208,0,160,187,211,185,200,187],
[167,158,181,0,233,204,182,214,179],
[185,162,154,108,0,158,107,242,154],
[223,165,130,137,183,0,92,206,126],
[201,155,156,159,234,249,0,239,203],
[105,142,141,127,99,135,102,0,136],
[141,195,154,162,187,215,138,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,192,171,174,195,166,144,153],
[142,0,167,141,149,169,174,166,140],
[149,174,0,147,163,174,152,150,161],
[170,200,194,0,171,205,165,182,172],
[167,192,178,170,0,187,166,167,178],
[146,172,167,136,154,0,142,152,124],
[175,167,189,176,175,199,0,189,162],
[197,175,191,159,174,189,152,0,148],
[188,201,180,169,163,217,179,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,155,173,169,193,152,159,181],
[197,0,198,190,171,196,159,190,193],
[186,143,0,157,173,180,153,168,163],
[168,151,184,0,178,195,160,147,160],
[172,170,168,163,0,191,149,185,177],
[148,145,161,146,150,0,147,164,155],
[189,182,188,181,192,194,0,166,171],
[182,151,173,194,156,177,175,0,170],
[160,148,178,181,164,186,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,155,149,172,141,140,156,177],
[177,0,173,168,161,161,178,174,182],
[186,168,0,151,162,160,140,164,192],
[192,173,190,0,189,173,183,156,200],
[169,180,179,152,0,152,189,145,177],
[200,180,181,168,189,0,182,176,197],
[201,163,201,158,152,159,0,157,188],
[185,167,177,185,196,165,184,0,186],
[164,159,149,141,164,144,153,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,136,108,187,161,173,185,147],
[159,0,164,145,159,170,140,149,184],
[205,177,0,169,194,207,205,191,199],
[233,196,172,0,213,169,168,170,163],
[154,182,147,128,0,169,165,159,184],
[180,171,134,172,172,0,167,162,163],
[168,201,136,173,176,174,0,190,184],
[156,192,150,171,182,179,151,0,186],
[194,157,142,178,157,178,157,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,192,216,214,145,212,195,185],
[196,0,162,205,209,212,222,209,181],
[149,179,0,190,134,169,150,125,183],
[125,136,151,0,104,163,143,140,145],
[127,132,207,237,0,138,240,149,130],
[196,129,172,178,203,0,147,180,202],
[129,119,191,198,101,194,0,125,157],
[146,132,216,201,192,161,216,0,172],
[156,160,158,196,211,139,184,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,157,163,162,162,172,169],
[164,0,165,171,170,165,151,167,169],
[174,176,0,176,168,162,152,175,175],
[184,170,165,0,166,176,172,181,180],
[178,171,173,175,0,169,172,188,177],
[179,176,179,165,172,0,155,173,168],
[179,190,189,169,169,186,0,183,182],
[169,174,166,160,153,168,158,0,169],
[172,172,166,161,164,173,159,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,138,241,241,138,219,267,160],
[219,0,219,241,155,219,219,181,241],
[203,122,0,241,241,305,181,267,241],
[100,100,100,0,138,138,100,100,124],
[100,186,100,203,0,138,181,100,86],
[203,122,36,203,203,0,217,167,203],
[122,122,160,241,160,124,0,86,160],
[74,160,74,241,241,174,255,0,160],
[181,100,100,217,255,138,181,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,79,57,151,132,96,118,129],
[249,0,242,158,233,253,262,206,230],
[262,99,0,237,213,157,249,147,175],
[284,183,104,0,264,152,277,174,182],
[190,108,128,77,0,98,133,92,103],
[209,88,184,189,243,0,145,204,230],
[245,79,92,64,208,196,0,112,105],
[223,135,194,167,249,137,229,0,149],
[212,111,166,159,238,111,236,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,157,192,176,168,175,157,158],
[169,0,150,173,163,163,161,166,164],
[184,191,0,187,166,182,186,167,169],
[149,168,154,0,157,145,164,159,169],
[165,178,175,184,0,166,165,180,176],
[173,178,159,196,175,0,173,160,173],
[166,180,155,177,176,168,0,166,164],
[184,175,174,182,161,181,175,0,184],
[183,177,172,172,165,168,177,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,168,169,176,169,171,182],
[178,0,183,175,178,167,163,162,179],
[178,158,0,176,172,166,169,170,192],
[173,166,165,0,178,175,170,160,184],
[172,163,169,163,0,162,168,158,174],
[165,174,175,166,179,0,165,167,190],
[172,178,172,171,173,176,0,163,194],
[170,179,171,181,183,174,178,0,178],
[159,162,149,157,167,151,147,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,158,166,184,161,166,166],
[163,0,172,172,175,188,165,174,172],
[167,169,0,159,166,176,162,177,185],
[183,169,182,0,177,185,175,180,169],
[175,166,175,164,0,173,168,178,166],
[157,153,165,156,168,0,162,154,176],
[180,176,179,166,173,179,0,181,168],
[175,167,164,161,163,187,160,0,163],
[175,169,156,172,175,165,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,167,147,170,170,172,176],
[162,0,166,166,148,177,166,165,183],
[160,175,0,176,160,178,150,180,173],
[174,175,165,0,151,169,165,164,176],
[194,193,181,190,0,167,179,180,182],
[171,164,163,172,174,0,159,169,171],
[171,175,191,176,162,182,0,186,179],
[169,176,161,177,161,172,155,0,175],
[165,158,168,165,159,170,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,182,169,172,173,168,163],
[162,0,172,171,160,182,169,174,164],
[173,169,0,179,171,161,179,176,165],
[159,170,162,0,175,162,185,161,163],
[172,181,170,166,0,173,181,167,161],
[169,159,180,179,168,0,179,164,173],
[168,172,162,156,160,162,0,156,160],
[173,167,165,180,174,177,185,0,174],
[178,177,176,178,180,168,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,187,159,171,160,162,175,172],
[175,0,202,167,168,188,183,194,177],
[154,139,0,160,160,166,154,166,151],
[182,174,181,0,171,183,161,196,187],
[170,173,181,170,0,171,178,179,174],
[181,153,175,158,170,0,162,181,171],
[179,158,187,180,163,179,0,189,168],
[166,147,175,145,162,160,152,0,165],
[169,164,190,154,167,170,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,153,189,183,168,184,210],
[170,0,162,188,200,208,168,195,195],
[176,179,0,161,202,177,203,245,186],
[188,153,180,0,187,173,177,238,164],
[152,141,139,154,0,156,139,190,172],
[158,133,164,168,185,0,183,222,173],
[173,173,138,164,202,158,0,168,183],
[157,146,96,103,151,119,173,0,147],
[131,146,155,177,169,168,158,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,162,142,169,152,179,153],
[176,0,167,187,171,169,148,161,155],
[179,174,0,206,163,181,175,180,175],
[179,154,135,0,166,173,155,175,146],
[199,170,178,175,0,171,171,175,186],
[172,172,160,168,170,0,158,171,149],
[189,193,166,186,170,183,0,182,159],
[162,180,161,166,166,170,159,0,168],
[188,186,166,195,155,192,182,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,170,177,173,177,169,168],
[169,0,169,175,184,169,186,179,176],
[163,172,0,165,169,172,171,159,160],
[171,166,176,0,182,174,170,164,174],
[164,157,172,159,0,166,175,182,173],
[168,172,169,167,175,0,179,166,169],
[164,155,170,171,166,162,0,162,160],
[172,162,182,177,159,175,179,0,169],
[173,165,181,167,168,172,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,169,172,155,199,178,200],
[171,0,168,149,166,171,168,157,203],
[180,173,0,159,181,157,193,178,179],
[172,192,182,0,192,177,204,169,207],
[169,175,160,149,0,165,167,179,180],
[186,170,184,164,176,0,198,181,195],
[142,173,148,137,174,143,0,147,168],
[163,184,163,172,162,160,194,0,185],
[141,138,162,134,161,146,173,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,172,141,159,143,179,154,170],
[187,0,200,184,171,189,200,171,161],
[169,141,0,172,163,181,186,161,154],
[200,157,169,0,171,189,178,158,167],
[182,170,178,170,0,205,186,166,171],
[198,152,160,152,136,0,179,145,148],
[162,141,155,163,155,162,0,153,152],
[187,170,180,183,175,196,188,0,181],
[171,180,187,174,170,193,189,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,181,159,165,167,178,161,163],
[164,0,179,164,180,172,168,168,175],
[160,162,0,158,173,181,154,178,161],
[182,177,183,0,181,192,173,176,168],
[176,161,168,160,0,180,166,179,165],
[174,169,160,149,161,0,152,162,168],
[163,173,187,168,175,189,0,176,175],
[180,173,163,165,162,179,165,0,168],
[178,166,180,173,176,173,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,172,167,171,159,177,171],
[175,0,181,160,168,179,160,166,176],
[171,160,0,169,159,170,174,166,172],
[169,181,172,0,170,169,165,173,174],
[174,173,182,171,0,181,165,176,177],
[170,162,171,172,160,0,159,179,174],
[182,181,167,176,176,182,0,188,183],
[164,175,175,168,165,162,153,0,170],
[170,165,169,167,164,167,158,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,175,165,165,167,176,169],
[163,0,171,177,162,168,169,175,174],
[163,170,0,172,174,162,169,178,169],
[166,164,169,0,145,156,157,171,166],
[176,179,167,196,0,166,180,184,182],
[176,173,179,185,175,0,159,180,170],
[174,172,172,184,161,182,0,182,177],
[165,166,163,170,157,161,159,0,164],
[172,167,172,175,159,171,164,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,163,168,164,160,160,144],
[178,0,161,197,174,165,186,161,186],
[170,180,0,143,190,177,168,167,151],
[178,144,198,0,185,151,203,177,169],
[173,167,151,156,0,159,169,170,175],
[177,176,164,190,182,0,200,173,165],
[181,155,173,138,172,141,0,155,156],
[181,180,174,164,171,168,186,0,164],
[197,155,190,172,166,176,185,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,174,173,181,178,162,161,173],
[149,0,149,169,152,160,172,158,176],
[167,192,0,184,190,167,182,166,182],
[168,172,157,0,176,155,174,163,180],
[160,189,151,165,0,151,171,165,176],
[163,181,174,186,190,0,182,188,191],
[179,169,159,167,170,159,0,179,188],
[180,183,175,178,176,153,162,0,169],
[168,165,159,161,165,150,153,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,176,167,167,178,163,171],
[174,0,175,174,172,162,166,170,187],
[180,166,0,183,178,168,181,178,183],
[165,167,158,0,158,166,179,171,180],
[174,169,163,183,0,178,172,171,169],
[174,179,173,175,163,0,175,182,175],
[163,175,160,162,169,166,0,160,184],
[178,171,163,170,170,159,181,0,182],
[170,154,158,161,172,166,157,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,172,143,149,171,167,164],
[166,0,169,176,165,160,168,155,167],
[173,172,0,177,157,157,175,167,164],
[169,165,164,0,148,162,168,161,163],
[198,176,184,193,0,170,171,170,176],
[192,181,184,179,171,0,174,174,169],
[170,173,166,173,170,167,0,153,180],
[174,186,174,180,171,167,188,0,187],
[177,174,177,178,165,172,161,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,150,159,146,160,207,169,125],
[186,0,177,185,187,185,210,181,164],
[191,164,0,190,169,165,211,165,178],
[182,156,151,0,169,173,180,167,140],
[195,154,172,172,0,178,191,173,134],
[181,156,176,168,163,0,211,188,152],
[134,131,130,161,150,130,0,136,132],
[172,160,176,174,168,153,205,0,180],
[216,177,163,201,207,189,209,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,183,190,183,185,169,141,159],
[150,0,171,180,157,169,161,154,160],
[158,170,0,189,168,169,169,158,172],
[151,161,152,0,165,153,160,134,149],
[158,184,173,176,0,184,161,157,164],
[156,172,172,188,157,0,170,167,154],
[172,180,172,181,180,171,0,144,162],
[200,187,183,207,184,174,197,0,167],
[182,181,169,192,177,187,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,184,153,185,168,181,168,175],
[160,0,155,159,160,164,186,172,167],
[157,186,0,172,174,195,208,166,163],
[188,182,169,0,188,188,194,177,188],
[156,181,167,153,0,168,171,161,168],
[173,177,146,153,173,0,178,162,185],
[160,155,133,147,170,163,0,168,143],
[173,169,175,164,180,179,173,0,184],
[166,174,178,153,173,156,198,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,177,181,188,198,183,205,159],
[178,0,162,186,175,161,167,203,191],
[164,179,0,150,145,187,180,214,159],
[160,155,191,0,176,190,163,210,168],
[153,166,196,165,0,161,178,219,146],
[143,180,154,151,180,0,156,204,141],
[158,174,161,178,163,185,0,203,189],
[136,138,127,131,122,137,138,0,184],
[182,150,182,173,195,200,152,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,112,125,118,184,147,127,142],
[177,0,141,123,151,184,205,153,128],
[229,200,0,135,160,145,179,141,136],
[216,218,206,0,189,207,217,188,159],
[223,190,181,152,0,162,203,151,150],
[157,157,196,134,179,0,161,133,124],
[194,136,162,124,138,180,0,122,121],
[214,188,200,153,190,208,219,0,180],
[199,213,205,182,191,217,220,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,150,174,156,164,166,147,146],
[178,0,162,182,164,177,168,168,163],
[191,179,0,180,174,165,177,173,144],
[167,159,161,0,144,150,158,155,146],
[185,177,167,197,0,173,174,175,176],
[177,164,176,191,168,0,168,175,160],
[175,173,164,183,167,173,0,174,145],
[194,173,168,186,166,166,167,0,157],
[195,178,197,195,165,181,196,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,181,181,177,178,171,171],
[160,0,178,172,165,175,166,170,178],
[173,163,0,170,173,166,175,169,174],
[160,169,171,0,172,169,191,165,167],
[160,176,168,169,0,169,173,172,174],
[164,166,175,172,172,0,185,172,162],
[163,175,166,150,168,156,0,171,165],
[170,171,172,176,169,169,170,0,163],
[170,163,167,174,167,179,176,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,170,185,176,167,179,174],
[171,0,174,169,176,179,178,170,172],
[175,167,0,190,183,189,172,176,182],
[171,172,151,0,177,172,158,169,175],
[156,165,158,164,0,166,168,170,167],
[165,162,152,169,175,0,171,176,175],
[174,163,169,183,173,170,0,165,175],
[162,171,165,172,171,165,176,0,172],
[167,169,159,166,174,166,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,182,184,166,174,184,191,184],
[159,0,175,170,176,159,174,163,162],
[159,166,0,173,170,168,180,174,167],
[157,171,168,0,179,171,181,172,159],
[175,165,171,162,0,163,193,172,173],
[167,182,173,170,178,0,186,187,161],
[157,167,161,160,148,155,0,171,148],
[150,178,167,169,169,154,170,0,166],
[157,179,174,182,168,180,193,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,163,160,174,177,168,170],
[163,0,173,157,167,176,164,157,157],
[167,168,0,161,159,179,172,155,163],
[178,184,180,0,181,187,167,161,176],
[181,174,182,160,0,185,175,170,166],
[167,165,162,154,156,0,172,138,167],
[164,177,169,174,166,169,0,164,168],
[173,184,186,180,171,203,177,0,170],
[171,184,178,165,175,174,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,211,190,187,180,174,157,171],
[177,0,214,196,141,154,186,154,171],
[130,127,0,132,130,129,159,139,119],
[151,145,209,0,155,138,166,129,170],
[154,200,211,186,0,202,195,168,195],
[161,187,212,203,139,0,180,163,196],
[167,155,182,175,146,161,0,184,165],
[184,187,202,212,173,178,157,0,198],
[170,170,222,171,146,145,176,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,158,162,172,139,136,200],
[179,0,227,219,180,165,197,197,201],
[169,114,0,148,132,211,168,153,153],
[183,122,193,0,151,227,167,193,197],
[179,161,209,190,0,184,200,164,197],
[169,176,130,114,157,0,134,156,166],
[202,144,173,174,141,207,0,129,181],
[205,144,188,148,177,185,212,0,182],
[141,140,188,144,144,175,160,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,210,204,250,159,230,181,207],
[126,0,122,123,210,151,103,114,202],
[131,219,0,198,206,185,186,172,190],
[137,218,143,0,199,109,190,123,213],
[91,131,135,142,0,172,135,146,164],
[182,190,156,232,169,0,160,185,212],
[111,238,155,151,206,181,0,131,182],
[160,227,169,218,195,156,210,0,182],
[134,139,151,128,177,129,159,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,171,180,159,180,159,156],
[159,0,159,166,172,162,171,144,160],
[174,182,0,178,179,170,177,171,166],
[170,175,163,0,167,157,173,161,159],
[161,169,162,174,0,153,172,153,154],
[182,179,171,184,188,0,191,167,180],
[161,170,164,168,169,150,0,150,163],
[182,197,170,180,188,174,191,0,172],
[185,181,175,182,187,161,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,152,162,167,167,156,180,166],
[190,0,169,206,178,160,178,193,176],
[189,172,0,191,178,162,160,177,162],
[179,135,150,0,162,166,158,171,144],
[174,163,163,179,0,164,153,177,161],
[174,181,179,175,177,0,164,172,152],
[185,163,181,183,188,177,0,161,167],
[161,148,164,170,164,169,180,0,144],
[175,165,179,197,180,189,174,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,160,168,169,169,184,138,171],
[154,0,125,155,153,160,154,141,159],
[181,216,0,176,180,180,191,165,185],
[173,186,165,0,176,168,181,146,198],
[172,188,161,165,0,192,162,171,172],
[172,181,161,173,149,0,166,160,176],
[157,187,150,160,179,175,0,141,165],
[203,200,176,195,170,181,200,0,195],
[170,182,156,143,169,165,176,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,163,171,187,185,157,178],
[168,0,161,173,148,151,193,181,143],
[176,180,0,163,176,160,208,196,154],
[178,168,178,0,164,160,196,177,173],
[170,193,165,177,0,184,224,191,175],
[154,190,181,181,157,0,218,172,176],
[156,148,133,145,117,123,0,144,154],
[184,160,145,164,150,169,197,0,161],
[163,198,187,168,166,165,187,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,181,160,158,174,167,178],
[167,0,165,168,172,157,170,177,184],
[178,176,0,183,182,175,171,164,187],
[160,173,158,0,158,151,174,161,186],
[181,169,159,183,0,169,176,172,199],
[183,184,166,190,172,0,164,182,183],
[167,171,170,167,165,177,0,184,182],
[174,164,177,180,169,159,157,0,188],
[163,157,154,155,142,158,159,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,176,173,153,158,158,164],
[171,0,174,176,161,193,173,166,157],
[171,167,0,171,169,209,191,180,188],
[165,165,170,0,181,173,185,165,167],
[168,180,172,160,0,183,178,177,144],
[188,148,132,168,158,0,168,154,138],
[183,168,150,156,163,173,0,160,160],
[183,175,161,176,164,187,181,0,179],
[177,184,153,174,197,203,181,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,181,154,146,154,174,170,176],
[194,0,163,174,176,189,192,156,184],
[160,178,0,154,157,187,185,161,157],
[187,167,187,0,182,177,176,159,182],
[195,165,184,159,0,183,205,185,182],
[187,152,154,164,158,0,185,151,175],
[167,149,156,165,136,156,0,152,157],
[171,185,180,182,156,190,189,0,176],
[165,157,184,159,159,166,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,196,186,188,158,149,204,190],
[159,0,190,170,188,156,175,178,179],
[145,151,0,184,154,139,157,178,143],
[155,171,157,0,170,161,155,178,185],
[153,153,187,171,0,129,135,162,133],
[183,185,202,180,212,0,189,203,155],
[192,166,184,186,206,152,0,195,178],
[137,163,163,163,179,138,146,0,172],
[151,162,198,156,208,186,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,154,176,174,173,179,175],
[176,0,176,164,166,184,183,174,168],
[172,165,0,155,171,167,188,176,170],
[187,177,186,0,177,165,183,189,169],
[165,175,170,164,0,173,162,172,159],
[167,157,174,176,168,0,175,181,167],
[168,158,153,158,179,166,0,173,162],
[162,167,165,152,169,160,168,0,164],
[166,173,171,172,182,174,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,170,206,190,171,180,192],
[176,0,155,177,217,182,185,181,159],
[165,186,0,172,199,185,190,178,186],
[171,164,169,0,185,174,176,165,174],
[135,124,142,156,0,155,153,155,138],
[151,159,156,167,186,0,157,159,163],
[170,156,151,165,188,184,0,161,158],
[161,160,163,176,186,182,180,0,173],
[149,182,155,167,203,178,183,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,142,148,152,124,147,175,160],
[191,0,163,163,155,146,174,189,160],
[199,178,0,184,170,179,187,186,173],
[193,178,157,0,160,146,173,186,177],
[189,186,171,181,0,162,184,178,166],
[217,195,162,195,179,0,176,195,182],
[194,167,154,168,157,165,0,170,164],
[166,152,155,155,163,146,171,0,167],
[181,181,168,164,175,159,177,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,164,162,161,118,171,119,163],
[179,0,170,167,188,126,188,136,152],
[177,171,0,168,191,158,178,141,162],
[179,174,173,0,173,155,190,172,174],
[180,153,150,168,0,147,162,124,158],
[223,215,183,186,194,0,193,170,178],
[170,153,163,151,179,148,0,124,149],
[222,205,200,169,217,171,217,0,178],
[178,189,179,167,183,163,192,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,209,188,167,200,212,209,193],
[150,0,217,182,186,187,188,193,183],
[132,124,0,141,135,152,125,155,122],
[153,159,200,0,167,169,155,161,183],
[174,155,206,174,0,154,187,184,186],
[141,154,189,172,187,0,166,148,173],
[129,153,216,186,154,175,0,166,151],
[132,148,186,180,157,193,175,0,145],
[148,158,219,158,155,168,190,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,203,169,196,205,192,205,203],
[151,0,183,168,194,182,158,177,161],
[138,158,0,151,144,177,144,159,168],
[172,173,190,0,183,178,167,197,183],
[145,147,197,158,0,156,135,183,162],
[136,159,164,163,185,0,151,171,164],
[149,183,197,174,206,190,0,181,198],
[136,164,182,144,158,170,160,0,167],
[138,180,173,158,179,177,143,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,185,166,193,200,177,210,184],
[155,0,162,155,167,160,145,196,179],
[156,179,0,164,170,158,170,175,177],
[175,186,177,0,199,167,175,187,168],
[148,174,171,142,0,115,128,159,143],
[141,181,183,174,226,0,148,178,175],
[164,196,171,166,213,193,0,178,189],
[131,145,166,154,182,163,163,0,151],
[157,162,164,173,198,166,152,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,170,163,171,171,157,169,179],
[150,0,156,164,164,165,157,166,162],
[171,185,0,170,172,166,181,162,187],
[178,177,171,0,159,148,168,173,187],
[170,177,169,182,0,171,183,163,160],
[170,176,175,193,170,0,167,176,191],
[184,184,160,173,158,174,0,173,169],
[172,175,179,168,178,165,168,0,171],
[162,179,154,154,181,150,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,152,180,175,172,170,176,157],
[184,0,160,191,184,171,188,171,172],
[189,181,0,199,185,181,191,178,166],
[161,150,142,0,154,167,164,160,139],
[166,157,156,187,0,163,174,167,161],
[169,170,160,174,178,0,170,173,151],
[171,153,150,177,167,171,0,161,165],
[165,170,163,181,174,168,180,0,168],
[184,169,175,202,180,190,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,154,143,145,154,148,150,159],
[181,0,174,161,170,166,171,145,169],
[187,167,0,154,151,165,165,156,173],
[198,180,187,0,186,162,186,173,190],
[196,171,190,155,0,183,185,148,181],
[187,175,176,179,158,0,167,163,180],
[193,170,176,155,156,174,0,164,184],
[191,196,185,168,193,178,177,0,195],
[182,172,168,151,160,161,157,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,189,152,164,161,175,179,172],
[194,0,198,166,185,193,187,183,184],
[152,143,0,149,176,159,149,154,160],
[189,175,192,0,174,181,189,167,186],
[177,156,165,167,0,185,168,166,170],
[180,148,182,160,156,0,168,156,166],
[166,154,192,152,173,173,0,159,171],
[162,158,187,174,175,185,182,0,180],
[169,157,181,155,171,175,170,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,171,168,165,172,160,176],
[172,0,175,175,180,161,180,175,186],
[173,166,0,177,176,170,163,172,173],
[170,166,164,0,174,170,160,159,171],
[173,161,165,167,0,166,161,168,177],
[176,180,171,171,175,0,173,166,188],
[169,161,178,181,180,168,0,172,175],
[181,166,169,182,173,175,169,0,180],
[165,155,168,170,164,153,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,209,161,181,182,168,197,159],
[136,0,166,160,155,146,161,175,149],
[132,175,0,148,152,144,141,179,152],
[180,181,193,0,174,162,161,204,165],
[160,186,189,167,0,158,159,172,149],
[159,195,197,179,183,0,166,201,177],
[173,180,200,180,182,175,0,203,161],
[144,166,162,137,169,140,138,0,139],
[182,192,189,176,192,164,180,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,152,163,133,302,235,171,250],
[122,0,78,118,90,169,137,89,128],
[189,263,0,189,110,259,173,209,243],
[178,223,152,0,182,261,229,184,209],
[208,251,231,159,0,266,250,160,214],
[39,172,82,80,75,0,197,75,188],
[106,204,168,112,91,144,0,95,166],
[170,252,132,157,181,266,246,0,214],
[91,213,98,132,127,153,175,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,175,161,173,174,170,163,168],
[158,0,161,152,158,175,152,160,151],
[166,180,0,173,184,176,162,165,170],
[180,189,168,0,180,174,151,163,164],
[168,183,157,161,0,167,172,169,162],
[167,166,165,167,174,0,170,173,159],
[171,189,179,190,169,171,0,181,172],
[178,181,176,178,172,168,160,0,179],
[173,190,171,177,179,182,169,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,169,167,184,174,173,150,165],
[181,0,166,178,172,177,175,188,181],
[172,175,0,175,166,187,186,164,182],
[174,163,166,0,189,178,174,153,173],
[157,169,175,152,0,167,176,161,171],
[167,164,154,163,174,0,162,170,185],
[168,166,155,167,165,179,0,170,179],
[191,153,177,188,180,171,171,0,162],
[176,160,159,168,170,156,162,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,221,193,206,183,184,194,203],
[171,0,182,168,167,160,181,163,158],
[120,159,0,161,133,150,158,132,170],
[148,173,180,0,165,162,176,175,170],
[135,174,208,176,0,188,172,169,204],
[158,181,191,179,153,0,164,192,180],
[157,160,183,165,169,177,0,178,185],
[147,178,209,166,172,149,163,0,174],
[138,183,171,171,137,161,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,179,174,160,175,178,169,184],
[150,0,165,168,149,172,150,157,158],
[162,176,0,174,166,150,156,151,161],
[167,173,167,0,157,171,177,161,162],
[181,192,175,184,0,181,178,163,169],
[166,169,191,170,160,0,160,156,184],
[163,191,185,164,163,181,0,171,173],
[172,184,190,180,178,185,170,0,170],
[157,183,180,179,172,157,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,178,185,163,178,174,172,159],
[161,0,171,190,167,176,172,175,164],
[163,170,0,168,161,167,159,158,164],
[156,151,173,0,162,166,180,154,149],
[178,174,180,179,0,193,170,170,169],
[163,165,174,175,148,0,167,177,167],
[167,169,182,161,171,174,0,179,161],
[169,166,183,187,171,164,162,0,171],
[182,177,177,192,172,174,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,177,144,177,187,202,174,167],
[199,0,168,168,186,194,193,186,215],
[164,173,0,140,152,174,175,121,156],
[197,173,201,0,214,193,210,168,196],
[164,155,189,127,0,179,167,144,160],
[154,147,167,148,162,0,177,154,169],
[139,148,166,131,174,164,0,135,142],
[167,155,220,173,197,187,206,0,179],
[174,126,185,145,181,172,199,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,180,180,149,176,177,174,181],
[181,0,184,182,178,190,165,184,204],
[161,157,0,175,160,177,182,150,185],
[161,159,166,0,163,196,176,154,175],
[192,163,181,178,0,182,195,158,172],
[165,151,164,145,159,0,160,151,170],
[164,176,159,165,146,181,0,157,160],
[167,157,191,187,183,190,184,0,200],
[160,137,156,166,169,171,181,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,156,173,194,186,196,178,170],
[188,0,172,179,176,203,194,159,197],
[185,169,0,184,191,175,181,178,179],
[168,162,157,0,177,168,170,169,161],
[147,165,150,164,0,179,168,150,170],
[155,138,166,173,162,0,168,157,148],
[145,147,160,171,173,173,0,167,155],
[163,182,163,172,191,184,174,0,201],
[171,144,162,180,171,193,186,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,179,169,168,168,179,171,174],
[187,0,189,181,180,175,185,186,169],
[162,152,0,177,160,165,164,169,168],
[172,160,164,0,167,166,165,168,175],
[173,161,181,174,0,170,176,183,166],
[173,166,176,175,171,0,188,175,170],
[162,156,177,176,165,153,0,166,171],
[170,155,172,173,158,166,175,0,164],
[167,172,173,166,175,171,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,172,168,164,155,166,164,168],
[159,0,167,175,150,173,148,143,161],
[169,174,0,155,161,161,157,155,175],
[173,166,186,0,175,164,162,171,182],
[177,191,180,166,0,178,193,185,186],
[186,168,180,177,163,0,173,171,187],
[175,193,184,179,148,168,0,181,165],
[177,198,186,170,156,170,160,0,180],
[173,180,166,159,155,154,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,150,158,139,170,160,159,143],
[177,0,165,165,170,172,165,160,173],
[191,176,0,182,171,165,182,180,168],
[183,176,159,0,162,161,183,175,164],
[202,171,170,179,0,160,187,181,167],
[171,169,176,180,181,0,188,164,168],
[181,176,159,158,154,153,0,165,150],
[182,181,161,166,160,177,176,0,165],
[198,168,173,177,174,173,191,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,153,163,166,172,163,172],
[174,0,180,180,157,170,167,172,179],
[174,161,0,161,166,151,161,163,166],
[188,161,180,0,171,167,180,173,171],
[178,184,175,170,0,171,180,180,171],
[175,171,190,174,170,0,190,161,180],
[169,174,180,161,161,151,0,156,162],
[178,169,178,168,161,180,185,0,185],
[169,162,175,170,170,161,179,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,157,190,179,186,169,167],
[174,0,172,165,177,174,167,174,155],
[162,169,0,152,172,170,158,146,137],
[184,176,189,0,189,187,165,170,158],
[151,164,169,152,0,155,157,142,153],
[162,167,171,154,186,0,171,151,144],
[155,174,183,176,184,170,0,156,158],
[172,167,195,171,199,190,185,0,171],
[174,186,204,183,188,197,183,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,179,151,165,167,158,159],
[171,0,169,166,175,175,188,155,179],
[174,172,0,181,174,187,185,171,168],
[162,175,160,0,168,168,177,163,151],
[190,166,167,173,0,165,179,157,173],
[176,166,154,173,176,0,175,154,166],
[174,153,156,164,162,166,0,149,155],
[183,186,170,178,184,187,192,0,184],
[182,162,173,190,168,175,186,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,173,199,165,182,199,145],
[171,0,172,159,202,183,172,173,182],
[179,169,0,193,203,160,163,189,173],
[168,182,148,0,170,177,182,188,148],
[142,139,138,171,0,156,149,159,133],
[176,158,181,164,185,0,173,201,185],
[159,169,178,159,192,168,0,161,152],
[142,168,152,153,182,140,180,0,172],
[196,159,168,193,208,156,189,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,183,168,167,172,167,169,182],
[187,0,197,164,174,164,163,160,166],
[158,144,0,165,165,155,139,179,169],
[173,177,176,0,165,178,170,168,165],
[174,167,176,176,0,157,175,162,164],
[169,177,186,163,184,0,167,176,184],
[174,178,202,171,166,174,0,165,184],
[172,181,162,173,179,165,176,0,169],
[159,175,172,176,177,157,157,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,202,161,190,159,197,187,195],
[162,0,186,153,154,148,162,168,152],
[139,155,0,112,161,129,153,155,176],
[180,188,229,0,172,157,191,219,177],
[151,187,180,169,0,154,173,173,151],
[182,193,212,184,187,0,207,190,166],
[144,179,188,150,168,134,0,185,173],
[154,173,186,122,168,151,156,0,149],
[146,189,165,164,190,175,168,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,160,158,148,177,160,190,173],
[165,0,182,167,167,192,183,208,194],
[181,159,0,165,187,196,186,192,195],
[183,174,176,0,170,177,178,198,189],
[193,174,154,171,0,214,184,190,202],
[164,149,145,164,127,0,170,152,172],
[181,158,155,163,157,171,0,172,171],
[151,133,149,143,151,189,169,0,163],
[168,147,146,152,139,169,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,242,191,180,226,173,186,189],
[172,0,165,154,149,181,153,147,170],
[99,176,0,138,159,129,142,146,170],
[150,187,203,0,157,181,133,136,170],
[161,192,182,184,0,202,221,146,166],
[115,160,212,160,139,0,148,135,170],
[168,188,199,208,120,193,0,126,148],
[155,194,195,205,195,206,215,0,209],
[152,171,171,171,175,171,193,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,177,178,173,192,164,164,181],
[189,0,196,193,193,177,174,161,205],
[164,145,0,161,178,194,135,157,170],
[163,148,180,0,180,174,161,157,181],
[168,148,163,161,0,174,152,177,185],
[149,164,147,167,167,0,143,157,181],
[177,167,206,180,189,198,0,181,187],
[177,180,184,184,164,184,160,0,201],
[160,136,171,160,156,160,154,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,171,186,206,164,177,195,190],
[153,0,154,170,161,130,170,183,173],
[170,187,0,200,186,180,169,197,189],
[155,171,141,0,162,155,173,189,159],
[135,180,155,179,0,153,153,194,169],
[177,211,161,186,188,0,197,213,207],
[164,171,172,168,188,144,0,181,164],
[146,158,144,152,147,128,160,0,155],
[151,168,152,182,172,134,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,164,176,174,176,196,176],
[180,0,163,168,190,183,187,177,195],
[174,178,0,170,184,181,177,183,193],
[177,173,171,0,190,180,184,169,187],
[165,151,157,151,0,174,181,162,175],
[167,158,160,161,167,0,178,180,176],
[165,154,164,157,160,163,0,174,165],
[145,164,158,172,179,161,167,0,180],
[165,146,148,154,166,165,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,154,157,164,148,151,177],
[173,0,170,171,176,173,165,174,176],
[163,171,0,168,171,166,165,176,168],
[187,170,173,0,182,172,164,167,180],
[184,165,170,159,0,162,166,174,179],
[177,168,175,169,179,0,177,151,176],
[193,176,176,177,175,164,0,163,167],
[190,167,165,174,167,190,178,0,186],
[164,165,173,161,162,165,174,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,145,50,211,131,67,105,152],
[207,0,218,170,264,179,214,147,212],
[196,123,0,159,186,106,158,161,208],
[291,171,182,0,231,179,164,164,186],
[130,77,155,110,0,173,137,130,184],
[210,162,235,162,168,0,140,140,169],
[274,127,183,177,204,201,0,140,212],
[236,194,180,177,211,201,201,0,152],
[189,129,133,155,157,172,129,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,212,189,166,173,177,172],
[170,0,188,202,181,173,211,177,188],
[172,153,0,193,182,185,188,165,182],
[129,139,148,0,153,140,177,149,159],
[152,160,159,188,0,156,187,162,171],
[175,168,156,201,185,0,184,165,178],
[168,130,153,164,154,157,0,149,145],
[164,164,176,192,179,176,192,0,192],
[169,153,159,182,170,163,196,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,177,168,171,170,171,176],
[171,0,169,165,162,169,164,169,163],
[173,172,0,165,165,180,173,184,177],
[164,176,176,0,174,173,174,184,173],
[173,179,176,167,0,168,174,194,172],
[170,172,161,168,173,0,158,173,172],
[171,177,168,167,167,183,0,178,166],
[170,172,157,157,147,168,163,0,160],
[165,178,164,168,169,169,175,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,171,196,187,142,136,153,148],
[188,0,135,209,200,161,145,204,162],
[170,206,0,176,193,159,169,180,171],
[145,132,165,0,192,139,138,154,158],
[154,141,148,149,0,148,161,157,130],
[199,180,182,202,193,0,138,183,175],
[205,196,172,203,180,203,0,167,170],
[188,137,161,187,184,158,174,0,168],
[193,179,170,183,211,166,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,185,179,168,168,169,165,176],
[155,0,176,165,168,155,155,157,175],
[156,165,0,160,155,152,150,161,168],
[162,176,181,0,161,164,163,150,167],
[173,173,186,180,0,164,175,158,182],
[173,186,189,177,177,0,164,173,181],
[172,186,191,178,166,177,0,166,172],
[176,184,180,191,183,168,175,0,191],
[165,166,173,174,159,160,169,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,173,156,179,158,165,166],
[176,0,173,172,152,169,157,154,165],
[173,168,0,152,148,184,159,154,173],
[168,169,189,0,162,175,168,153,159],
[185,189,193,179,0,186,158,178,187],
[162,172,157,166,155,0,155,158,158],
[183,184,182,173,183,186,0,165,163],
[176,187,187,188,163,183,176,0,180],
[175,176,168,182,154,183,178,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,168,165,160,196,184,155],
[161,0,166,175,183,152,182,180,172],
[179,175,0,183,163,147,188,179,146],
[173,166,158,0,184,175,176,185,180],
[176,158,178,157,0,131,167,175,149],
[181,189,194,166,210,0,195,176,182],
[145,159,153,165,174,146,0,152,150],
[157,161,162,156,166,165,189,0,151],
[186,169,195,161,192,159,191,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,162,158,165,171,166,150,162],
[179,0,172,159,186,166,178,150,174],
[179,169,0,176,178,172,180,177,163],
[183,182,165,0,187,190,190,177,177],
[176,155,163,154,0,165,176,156,168],
[170,175,169,151,176,0,179,158,172],
[175,163,161,151,165,162,0,157,157],
[191,191,164,164,185,183,184,0,182],
[179,167,178,164,173,169,184,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,173,176,177,163,169,156,170],
[182,0,165,186,181,167,168,170,172],
[168,176,0,186,178,170,165,173,176],
[165,155,155,0,159,161,152,164,157],
[164,160,163,182,0,165,169,165,174],
[178,174,171,180,176,0,174,156,175],
[172,173,176,189,172,167,0,168,180],
[185,171,168,177,176,185,173,0,179],
[171,169,165,184,167,166,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,169,172,164,160,178,170,173],
[157,0,153,150,160,159,164,160,150],
[172,188,0,166,165,162,169,162,174],
[169,191,175,0,183,180,177,173,165],
[177,181,176,158,0,160,178,172,172],
[181,182,179,161,181,0,172,178,180],
[163,177,172,164,163,169,0,173,167],
[171,181,179,168,169,163,168,0,162],
[168,191,167,176,169,161,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,183,184,177,171,168,179,171],
[173,0,192,188,186,183,175,177,169],
[158,149,0,176,157,168,161,175,155],
[157,153,165,0,168,179,164,172,167],
[164,155,184,173,0,173,164,172,164],
[170,158,173,162,168,0,157,176,169],
[173,166,180,177,177,184,0,170,164],
[162,164,166,169,169,165,171,0,157],
[170,172,186,174,177,172,177,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,165,162,163,168,169,159,167],
[192,0,185,161,167,173,169,161,180],
[176,156,0,165,153,179,164,158,161],
[179,180,176,0,172,181,175,167,183],
[178,174,188,169,0,185,172,172,179],
[173,168,162,160,156,0,167,162,160],
[172,172,177,166,169,174,0,158,175],
[182,180,183,174,169,179,183,0,181],
[174,161,180,158,162,181,166,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,146,169,182,168,165,168,172],
[181,0,155,181,191,176,165,172,193],
[195,186,0,184,194,162,194,155,173],
[172,160,157,0,198,166,147,146,151],
[159,150,147,143,0,122,133,134,136],
[173,165,179,175,219,0,171,173,170],
[176,176,147,194,208,170,0,159,161],
[173,169,186,195,207,168,182,0,168],
[169,148,168,190,205,171,180,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,158,143,221,141,169,179,179],
[214,0,212,167,200,195,190,160,196],
[183,129,0,159,184,138,208,170,153],
[198,174,182,0,182,154,175,205,183],
[120,141,157,159,0,107,126,171,145],
[200,146,203,187,234,0,215,234,165],
[172,151,133,166,215,126,0,218,192],
[162,181,171,136,170,107,123,0,137],
[162,145,188,158,196,176,149,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,188,200,170,178,174,192,188],
[161,0,181,167,167,163,142,165,174],
[153,160,0,172,166,171,148,164,171],
[141,174,169,0,141,163,163,169,176],
[171,174,175,200,0,186,149,181,177],
[163,178,170,178,155,0,155,179,175],
[167,199,193,178,192,186,0,187,194],
[149,176,177,172,160,162,154,0,163],
[153,167,170,165,164,166,147,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,169,161,167,168,175,167,175],
[158,0,181,161,168,174,175,178,168],
[172,160,0,156,164,173,180,166,174],
[180,180,185,0,169,196,170,188,174],
[174,173,177,172,0,180,180,180,170],
[173,167,168,145,161,0,169,164,162],
[166,166,161,171,161,172,0,178,157],
[174,163,175,153,161,177,163,0,165],
[166,173,167,167,171,179,184,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,184,189,202,185,173,166,177],
[122,0,177,154,151,135,132,150,141],
[157,164,0,173,165,179,166,160,165],
[152,187,168,0,172,179,164,158,160],
[139,190,176,169,0,187,178,172,161],
[156,206,162,162,154,0,150,166,150],
[168,209,175,177,163,191,0,170,150],
[175,191,181,183,169,175,171,0,136],
[164,200,176,181,180,191,191,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,159,173,162,170,192,161,193],
[189,0,165,171,171,168,186,168,186],
[182,176,0,176,179,163,198,186,204],
[168,170,165,0,168,170,180,167,195],
[179,170,162,173,0,169,179,157,185],
[171,173,178,171,172,0,201,167,199],
[149,155,143,161,162,140,0,148,191],
[180,173,155,174,184,174,193,0,196],
[148,155,137,146,156,142,150,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,144,135,180,152,161,170],
[175,0,152,167,146,176,157,166,173],
[175,189,0,167,154,196,166,175,190],
[197,174,174,0,177,193,164,177,195],
[206,195,187,164,0,194,181,182,203],
[161,165,145,148,147,0,152,154,170],
[189,184,175,177,160,189,0,178,185],
[180,175,166,164,159,187,163,0,173],
[171,168,151,146,138,171,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,172,142,142,182,140,160,163],
[205,0,206,186,194,211,206,183,155],
[169,135,0,166,171,140,150,181,187],
[199,155,175,0,164,160,138,201,181],
[199,147,170,177,0,178,147,181,152],
[159,130,201,181,163,0,166,197,179],
[201,135,191,203,194,175,0,201,201],
[181,158,160,140,160,144,140,0,148],
[178,186,154,160,189,162,140,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,189,187,168,184,165,179],
[160,0,178,186,171,167,166,171,165],
[160,163,0,177,179,163,166,164,162],
[152,155,164,0,169,163,174,161,154],
[154,170,162,172,0,161,149,149,145],
[173,174,178,178,180,0,176,164,175],
[157,175,175,167,192,165,0,153,172],
[176,170,177,180,192,177,188,0,165],
[162,176,179,187,196,166,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,155,127,131,137,131,119,120],
[183,0,157,207,184,181,155,173,212],
[186,184,0,199,182,146,175,179,219],
[214,134,142,0,189,198,200,137,197],
[210,157,159,152,0,171,171,148,162],
[204,160,195,143,170,0,162,177,202],
[210,186,166,141,170,179,0,132,166],
[222,168,162,204,193,164,209,0,211],
[221,129,122,144,179,139,175,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,157,156,166,152,191,186,189],
[163,0,193,188,167,182,184,186,173],
[184,148,0,182,170,180,200,191,170],
[185,153,159,0,177,168,184,171,151],
[175,174,171,164,0,164,167,179,165],
[189,159,161,173,177,0,158,182,176],
[150,157,141,157,174,183,0,136,167],
[155,155,150,170,162,159,205,0,163],
[152,168,171,190,176,165,174,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,184,169,173,169,185,180,173],
[160,0,169,163,171,173,178,171,165],
[157,172,0,155,171,161,170,156,156],
[172,178,186,0,174,175,184,170,170],
[168,170,170,167,0,170,173,181,174],
[172,168,180,166,171,0,176,171,165],
[156,163,171,157,168,165,0,181,167],
[161,170,185,171,160,170,160,0,157],
[168,176,185,171,167,176,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,177,161,169,174,170,171,173],
[174,0,176,170,167,173,164,169,167],
[164,165,0,170,180,173,167,163,158],
[180,171,171,0,161,178,168,174,169],
[172,174,161,180,0,171,160,168,165],
[167,168,168,163,170,0,161,174,154],
[171,177,174,173,181,180,0,172,149],
[170,172,178,167,173,167,169,0,158],
[168,174,183,172,176,187,192,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,191,170,168,165,177,169],
[170,0,191,186,178,186,172,184,178],
[170,150,0,180,164,158,159,170,163],
[150,155,161,0,161,164,155,159,177],
[171,163,177,180,0,167,170,160,177],
[173,155,183,177,174,0,161,169,172],
[176,169,182,186,171,180,0,188,175],
[164,157,171,182,181,172,153,0,173],
[172,163,178,164,164,169,166,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,166,159,171,174,167,175],
[167,0,181,165,163,166,162,150,154],
[170,160,0,156,154,175,165,171,156],
[175,176,185,0,157,169,171,173,159],
[182,178,187,184,0,178,197,174,155],
[170,175,166,172,163,0,164,157,160],
[167,179,176,170,144,177,0,166,162],
[174,191,170,168,167,184,175,0,179],
[166,187,185,182,186,181,179,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,177,179,186,158,170,165,177],
[182,0,175,163,186,175,180,168,180],
[164,166,0,178,179,169,182,179,178],
[162,178,163,0,185,170,185,165,183],
[155,155,162,156,0,154,167,169,165],
[183,166,172,171,187,0,177,181,193],
[171,161,159,156,174,164,0,175,181],
[176,173,162,176,172,160,166,0,179],
[164,161,163,158,176,148,160,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,179,169,181,163,179,181,186],
[175,0,176,197,192,182,181,206,169],
[162,165,0,177,179,171,143,167,185],
[172,144,164,0,166,170,157,157,163],
[160,149,162,175,0,169,156,151,162],
[178,159,170,171,172,0,168,174,178],
[162,160,198,184,185,173,0,196,189],
[160,135,174,184,190,167,145,0,160],
[155,172,156,178,179,163,152,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,179,178,217,162,172,203,172],
[149,0,174,178,174,175,168,199,174],
[162,167,0,187,160,171,168,180,175],
[163,163,154,0,161,188,158,186,158],
[124,167,181,180,0,154,163,179,160],
[179,166,170,153,187,0,185,190,176],
[169,173,173,183,178,156,0,176,197],
[138,142,161,155,162,151,165,0,141],
[169,167,166,183,181,165,144,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,162,212,220,249,209,174,191],
[124,0,141,175,169,186,163,127,158],
[179,200,0,165,194,212,188,154,184],
[129,166,176,0,173,189,173,187,155],
[121,172,147,168,0,200,172,166,145],
[92,155,129,152,141,0,136,132,134],
[132,178,153,168,169,205,0,141,137],
[167,214,187,154,175,209,200,0,201],
[150,183,157,186,196,207,204,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,171,174,186,197,166,180,190],
[155,0,153,179,163,190,159,175,177],
[170,188,0,179,187,186,183,167,180],
[167,162,162,0,164,176,155,169,170],
[155,178,154,177,0,183,162,174,161],
[144,151,155,165,158,0,151,171,162],
[175,182,158,186,179,190,0,188,190],
[161,166,174,172,167,170,153,0,185],
[151,164,161,171,180,179,151,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,174,165,168,167,183,167],
[176,0,170,166,184,166,156,176,170],
[176,171,0,177,173,182,167,182,174],
[167,175,164,0,180,171,169,168,170],
[176,157,168,161,0,166,174,168,175],
[173,175,159,170,175,0,176,177,166],
[174,185,174,172,167,165,0,175,163],
[158,165,159,173,173,164,166,0,174],
[174,171,167,171,166,175,178,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,140,161,160,177,150,151,150],
[180,0,157,169,169,166,179,159,158],
[201,184,0,186,177,196,187,165,174],
[180,172,155,0,166,177,174,163,166],
[181,172,164,175,0,178,174,174,164],
[164,175,145,164,163,0,178,155,143],
[191,162,154,167,167,163,0,157,146],
[190,182,176,178,167,186,184,0,168],
[191,183,167,175,177,198,195,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,168,229,229,256,189,190,245],
[101,0,123,144,163,126,120,105,188],
[173,218,0,159,182,179,98,177,183],
[112,197,182,0,187,189,128,167,179],
[112,178,159,154,0,183,104,162,159],
[85,215,162,152,158,0,108,161,196],
[152,221,243,213,237,233,0,188,210],
[151,236,164,174,179,180,153,0,173],
[96,153,158,162,182,145,131,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,171,174,177,176,170,162],
[172,0,174,162,163,164,180,172,168],
[167,167,0,182,172,171,171,176,177],
[170,179,159,0,149,171,177,175,162],
[167,178,169,192,0,177,190,168,180],
[164,177,170,170,164,0,185,174,181],
[165,161,170,164,151,156,0,165,157],
[171,169,165,166,173,167,176,0,160],
[179,173,164,179,161,160,184,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,172,146,149,164,167,153,137],
[184,0,174,167,125,163,186,175,179],
[169,167,0,173,150,180,207,164,157],
[195,174,168,0,188,192,183,201,182],
[192,216,191,153,0,200,223,191,203],
[177,178,161,149,141,0,197,182,180],
[174,155,134,158,118,144,0,119,145],
[188,166,177,140,150,159,222,0,169],
[204,162,184,159,138,161,196,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,148,159,154,159,159,133,149],
[202,0,144,181,172,161,180,144,196],
[193,197,0,160,151,155,191,172,187],
[182,160,181,0,172,171,199,151,198],
[187,169,190,169,0,170,184,151,174],
[182,180,186,170,171,0,198,173,179],
[182,161,150,142,157,143,0,134,140],
[208,197,169,190,190,168,207,0,193],
[192,145,154,143,167,162,201,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,152,205,193,178,173,188,156],
[174,0,155,193,168,177,185,179,174],
[189,186,0,212,170,179,179,191,191],
[136,148,129,0,160,141,139,161,152],
[148,173,171,181,0,163,180,168,177],
[163,164,162,200,178,0,171,185,182],
[168,156,162,202,161,170,0,188,182],
[153,162,150,180,173,156,153,0,175],
[185,167,150,189,164,159,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,186,171,180,166,172,164,167],
[174,0,186,149,180,161,167,148,158],
[155,155,0,173,186,158,169,158,173],
[170,192,168,0,182,181,172,164,168],
[161,161,155,159,0,152,171,156,153],
[175,180,183,160,189,0,175,164,179],
[169,174,172,169,170,166,0,175,149],
[177,193,183,177,185,177,166,0,165],
[174,183,168,173,188,162,192,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,169,172,185,175,177,176],
[168,0,155,168,177,168,163,172,172],
[165,186,0,174,193,170,162,172,171],
[172,173,167,0,176,187,167,164,164],
[169,164,148,165,0,171,172,163,172],
[156,173,171,154,170,0,154,170,164],
[166,178,179,174,169,187,0,171,170],
[164,169,169,177,178,171,170,0,165],
[165,169,170,177,169,177,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,157,157,153,163,190,175,150],
[164,0,165,169,156,157,183,169,166],
[184,176,0,168,169,163,174,167,168],
[184,172,173,0,178,170,171,167,172],
[188,185,172,163,0,179,194,170,171],
[178,184,178,171,162,0,192,180,168],
[151,158,167,170,147,149,0,160,163],
[166,172,174,174,171,161,181,0,170],
[191,175,173,169,170,173,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,165,171,164,176,173,162,167],
[182,0,164,149,178,186,174,170,168],
[176,177,0,153,169,177,158,185,165],
[170,192,188,0,189,187,172,181,178],
[177,163,172,152,0,192,169,160,155],
[165,155,164,154,149,0,158,166,152],
[168,167,183,169,172,183,0,188,165],
[179,171,156,160,181,175,153,0,161],
[174,173,176,163,186,189,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,184,158,172,193,176,183,167],
[163,0,187,181,175,178,180,177,161],
[157,154,0,182,186,176,183,171,153],
[183,160,159,0,168,178,177,174,155],
[169,166,155,173,0,180,181,162,153],
[148,163,165,163,161,0,169,160,158],
[165,161,158,164,160,172,0,173,153],
[158,164,170,167,179,181,168,0,171],
[174,180,188,186,188,183,188,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,166,188,164,180,182,197],
[178,0,186,169,189,179,184,201,192],
[168,155,0,167,174,155,175,177,163],
[175,172,174,0,192,163,182,208,180],
[153,152,167,149,0,165,150,186,182],
[177,162,186,178,176,0,176,201,166],
[161,157,166,159,191,165,0,178,165],
[159,140,164,133,155,140,163,0,152],
[144,149,178,161,159,175,176,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,188,176,167,172,181,192,181],
[159,0,176,182,161,169,185,193,186],
[153,165,0,173,159,175,170,169,188],
[165,159,168,0,170,163,160,172,170],
[174,180,182,171,0,165,181,197,191],
[169,172,166,178,176,0,167,177,173],
[160,156,171,181,160,174,0,161,168],
[149,148,172,169,144,164,180,0,175],
[160,155,153,171,150,168,173,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,166,165,158,175,160,170],
[174,0,184,150,176,163,177,149,168],
[172,157,0,159,171,172,170,159,172],
[175,191,182,0,193,164,191,173,187],
[176,165,170,148,0,149,164,153,157],
[183,178,169,177,192,0,180,171,180],
[166,164,171,150,177,161,0,171,169],
[181,192,182,168,188,170,170,0,168],
[171,173,169,154,184,161,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,198,170,183,210,181,190],
[175,0,184,197,171,167,201,182,194],
[159,157,0,177,169,165,167,183,174],
[143,144,164,0,160,144,181,164,176],
[171,170,172,181,0,170,197,173,193],
[158,174,176,197,171,0,184,186,196],
[131,140,174,160,144,157,0,167,177],
[160,159,158,177,168,155,174,0,185],
[151,147,167,165,148,145,164,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,172,166,157,175,168,180],
[174,0,166,170,161,161,184,167,190],
[163,175,0,167,166,175,180,186,175],
[169,171,174,0,163,161,162,176,177],
[175,180,175,178,0,174,165,178,175],
[184,180,166,180,167,0,176,174,188],
[166,157,161,179,176,165,0,175,167],
[173,174,155,165,163,167,166,0,156],
[161,151,166,164,166,153,174,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,165,172,191,166,169,186],
[171,0,177,178,180,186,168,169,181],
[173,164,0,180,174,191,177,171,170],
[176,163,161,0,163,188,163,158,170],
[169,161,167,178,0,187,174,165,182],
[150,155,150,153,154,0,142,162,169],
[175,173,164,178,167,199,0,170,188],
[172,172,170,183,176,179,171,0,184],
[155,160,171,171,159,172,153,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,153,154,167,158,174,163,175],
[166,0,170,156,158,135,152,157,170],
[188,171,0,196,187,183,179,167,178],
[187,185,145,0,162,149,149,141,195],
[174,183,154,179,0,159,171,146,180],
[183,206,158,192,182,0,177,187,203],
[167,189,162,192,170,164,0,156,175],
[178,184,174,200,195,154,185,0,209],
[166,171,163,146,161,138,166,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,168,175,180,189,160,184],
[168,0,177,167,171,179,179,165,180],
[164,164,0,151,179,159,171,160,167],
[173,174,190,0,178,170,184,178,182],
[166,170,162,163,0,170,166,164,167],
[161,162,182,171,171,0,165,155,178],
[152,162,170,157,175,176,0,158,178],
[181,176,181,163,177,186,183,0,180],
[157,161,174,159,174,163,163,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,191,162,160,168,172,200,225],
[194,0,192,226,202,182,192,103,202],
[150,149,0,106,169,198,119,142,142],
[179,115,235,0,126,215,213,148,177],
[181,139,172,215,0,217,187,175,220],
[173,159,143,126,124,0,186,166,173],
[169,149,222,128,154,155,0,172,209],
[141,238,199,193,166,175,169,0,191],
[116,139,199,164,121,168,132,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,166,162,155,176,167,173],
[166,0,166,146,188,168,154,181,164],
[179,175,0,180,193,182,167,188,159],
[175,195,161,0,175,174,168,168,178],
[179,153,148,166,0,173,158,158,165],
[186,173,159,167,168,0,159,177,173],
[165,187,174,173,183,182,0,167,163],
[174,160,153,173,183,164,174,0,163],
[168,177,182,163,176,168,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,162,125,165,170,172,167,165],
[137,0,160,126,172,162,133,156,170],
[179,181,0,172,220,225,173,215,144],
[216,215,169,0,196,206,128,190,190],
[176,169,121,145,0,134,157,158,139],
[171,179,116,135,207,0,153,179,171],
[169,208,168,213,184,188,0,205,174],
[174,185,126,151,183,162,136,0,154],
[176,171,197,151,202,170,167,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,142,146,154,152,163,157,172],
[183,0,161,159,157,170,171,180,184],
[199,180,0,146,171,178,175,185,199],
[195,182,195,0,198,174,173,167,190],
[187,184,170,143,0,164,153,163,177],
[189,171,163,167,177,0,163,171,192],
[178,170,166,168,188,178,0,171,198],
[184,161,156,174,178,170,170,0,163],
[169,157,142,151,164,149,143,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,196,171,166,168,183,170],
[177,0,177,187,170,185,167,160,158],
[168,164,0,181,152,159,172,169,163],
[145,154,160,0,143,158,155,155,149],
[170,171,189,198,0,190,181,181,178],
[175,156,182,183,151,0,164,155,167],
[173,174,169,186,160,177,0,182,167],
[158,181,172,186,160,186,159,0,166],
[171,183,178,192,163,174,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,214,181,198,258,154,171,207],
[122,0,155,184,103,243,129,164,128],
[127,186,0,189,139,241,156,191,155],
[160,157,152,0,83,183,160,146,118],
[143,238,202,258,0,262,212,183,197],
[83,98,100,158,79,0,95,83,113],
[187,212,185,181,129,246,0,179,174],
[170,177,150,195,158,258,162,0,181],
[134,213,186,223,144,228,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,177,181,178,169,183,190,175],
[162,0,171,180,166,173,177,175,173],
[164,170,0,182,178,174,175,193,169],
[160,161,159,0,158,155,161,174,167],
[163,175,163,183,0,162,180,177,177],
[172,168,167,186,179,0,186,179,177],
[158,164,166,180,161,155,0,179,159],
[151,166,148,167,164,162,162,0,162],
[166,168,172,174,164,164,182,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,167,167,153,163,159,175],
[179,0,169,167,145,151,136,169,166],
[167,172,0,169,155,156,144,150,137],
[174,174,172,0,149,155,148,173,159],
[174,196,186,192,0,182,175,177,142],
[188,190,185,186,159,0,155,173,181],
[178,205,197,193,166,186,0,181,166],
[182,172,191,168,164,168,160,0,172],
[166,175,204,182,199,160,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,163,166,173,166,163,173],
[185,0,159,168,162,184,174,172,172],
[178,182,0,173,163,173,184,164,171],
[178,173,168,0,167,171,186,160,180],
[175,179,178,174,0,182,179,173,169],
[168,157,168,170,159,0,176,169,168],
[175,167,157,155,162,165,0,167,161],
[178,169,177,181,168,172,174,0,168],
[168,169,170,161,172,173,180,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,165,175,165,149,165,176,158],
[156,0,159,188,158,174,159,175,173],
[176,182,0,176,182,175,178,169,163],
[166,153,165,0,160,151,165,177,147],
[176,183,159,181,0,159,171,185,169],
[192,167,166,190,182,0,184,203,187],
[176,182,163,176,170,157,0,189,178],
[165,166,172,164,156,138,152,0,156],
[183,168,178,194,172,154,163,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,163,163,157,174,176,173,158],
[174,0,162,156,155,165,149,168,144],
[178,179,0,174,156,178,164,178,157],
[178,185,167,0,159,182,165,172,166],
[184,186,185,182,0,189,170,182,166],
[167,176,163,159,152,0,158,183,161],
[165,192,177,176,171,183,0,182,174],
[168,173,163,169,159,158,159,0,157],
[183,197,184,175,175,180,167,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,159,124,117,142,193,138,149],
[201,0,176,133,153,145,210,159,139],
[182,165,0,150,163,110,187,158,198],
[217,208,191,0,169,153,242,178,138],
[224,188,178,172,0,159,198,215,160],
[199,196,231,188,182,0,259,164,187],
[148,131,154,99,143,82,0,147,135],
[203,182,183,163,126,177,194,0,143],
[192,202,143,203,181,154,206,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,189,199,185,187,184,189],
[167,0,187,188,185,177,176,170,180],
[178,154,0,171,187,177,167,179,186],
[152,153,170,0,179,174,175,184,199],
[142,156,154,162,0,153,162,170,161],
[156,164,164,167,188,0,171,178,182],
[154,165,174,166,179,170,0,169,186],
[157,171,162,157,171,163,172,0,181],
[152,161,155,142,180,159,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,165,149,134,164,167,175,158],
[174,0,151,160,171,160,171,178,159],
[176,190,0,166,148,145,180,178,159],
[192,181,175,0,163,182,183,186,163],
[207,170,193,178,0,189,190,190,176],
[177,181,196,159,152,0,193,180,151],
[174,170,161,158,151,148,0,185,162],
[166,163,163,155,151,161,156,0,146],
[183,182,182,178,165,190,179,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,171,188,183,167,179,188,179],
[156,0,173,180,199,183,168,188,169],
[170,168,0,175,192,153,176,187,169],
[153,161,166,0,185,156,172,172,157],
[158,142,149,156,0,161,161,163,155],
[174,158,188,185,180,0,191,188,177],
[162,173,165,169,180,150,0,172,164],
[153,153,154,169,178,153,169,0,166],
[162,172,172,184,186,164,177,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,183,215,192,194,191,247,156],
[119,0,155,175,183,187,165,181,161],
[158,186,0,170,202,192,194,203,149],
[126,166,171,0,134,203,161,227,145],
[149,158,139,207,0,179,188,237,181],
[147,154,149,138,162,0,158,200,128],
[150,176,147,180,153,183,0,194,145],
[94,160,138,114,104,141,147,0,132],
[185,180,192,196,160,213,196,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,161,152,160,172,162,176],
[166,0,195,182,159,168,152,170,181],
[163,146,0,158,164,141,138,163,169],
[180,159,183,0,157,141,174,165,182],
[189,182,177,184,0,168,187,189,180],
[181,173,200,200,173,0,166,169,207],
[169,189,203,167,154,175,0,176,200],
[179,171,178,176,152,172,165,0,186],
[165,160,172,159,161,134,141,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,175,181,176,162,169,168],
[163,0,151,177,171,163,157,155,159],
[162,190,0,186,178,181,158,164,155],
[166,164,155,0,148,150,133,132,140],
[160,170,163,193,0,157,169,152,158],
[165,178,160,191,184,0,145,164,173],
[179,184,183,208,172,196,0,175,161],
[172,186,177,209,189,177,166,0,173],
[173,182,186,201,183,168,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,163,189,164,168,170,185],
[167,0,163,169,176,152,171,157,163],
[174,178,0,167,177,149,156,161,173],
[178,172,174,0,178,178,171,166,177],
[152,165,164,163,0,158,164,162,168],
[177,189,192,163,183,0,162,166,168],
[173,170,185,170,177,179,0,174,173],
[171,184,180,175,179,175,167,0,189],
[156,178,168,164,173,173,168,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,153,177,192,161,160,155,155],
[185,0,176,175,177,164,187,188,167],
[188,165,0,188,183,155,182,175,174],
[164,166,153,0,171,142,156,145,164],
[149,164,158,170,0,158,151,159,146],
[180,177,186,199,183,0,172,168,179],
[181,154,159,185,190,169,0,169,152],
[186,153,166,196,182,173,172,0,156],
[186,174,167,177,195,162,189,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,170,159,175,172,167,170],
[168,0,170,163,153,177,182,153,171],
[182,171,0,171,154,180,164,175,164],
[171,178,170,0,164,203,174,158,173],
[182,188,187,177,0,185,175,170,167],
[166,164,161,138,156,0,167,158,171],
[169,159,177,167,166,174,0,150,164],
[174,188,166,183,171,183,191,0,187],
[171,170,177,168,174,170,177,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,169,171,172,146,165,173,165],
[161,0,164,176,160,162,164,172,170],
[172,177,0,184,158,164,164,163,155],
[170,165,157,0,156,161,168,170,152],
[169,181,183,185,0,189,169,186,173],
[195,179,177,180,152,0,179,184,179],
[176,177,177,173,172,162,0,185,177],
[168,169,178,171,155,157,156,0,170],
[176,171,186,189,168,162,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,168,157,154,187,163,174,156],
[183,0,167,170,170,193,172,203,180],
[173,174,0,170,159,183,153,172,160],
[184,171,171,0,192,198,161,165,184],
[187,171,182,149,0,192,178,205,165],
[154,148,158,143,149,0,147,166,132],
[178,169,188,180,163,194,0,207,179],
[167,138,169,176,136,175,134,0,135],
[185,161,181,157,176,209,162,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,187,180,171,171,157,165,194],
[164,0,170,183,159,162,158,158,182],
[154,171,0,150,148,148,151,157,166],
[161,158,191,0,153,165,164,161,183],
[170,182,193,188,0,167,171,169,182],
[170,179,193,176,174,0,179,168,176],
[184,183,190,177,170,162,0,174,194],
[176,183,184,180,172,173,167,0,179],
[147,159,175,158,159,165,147,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,218,193,156,167,185,204,184],
[145,0,195,167,157,161,174,176,171],
[123,146,0,140,142,135,158,149,157],
[148,174,201,0,153,158,167,162,151],
[185,184,199,188,0,168,192,181,184],
[174,180,206,183,173,0,213,210,170],
[156,167,183,174,149,128,0,157,173],
[137,165,192,179,160,131,184,0,175],
[157,170,184,190,157,171,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,162,172,169,182,172,173,167],
[167,0,180,176,176,175,179,185,172],
[179,161,0,179,181,172,175,175,165],
[169,165,162,0,161,168,165,170,169],
[172,165,160,180,0,175,164,178,168],
[159,166,169,173,166,0,168,165,168],
[169,162,166,176,177,173,0,159,164],
[168,156,166,171,163,176,182,0,159],
[174,169,176,172,173,173,177,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,160,184,182,183,163,163],
[174,0,171,164,180,177,177,162,160],
[175,170,0,162,189,177,187,169,176],
[181,177,179,0,185,181,178,183,163],
[157,161,152,156,0,169,176,156,166],
[159,164,164,160,172,0,174,160,158],
[158,164,154,163,165,167,0,165,156],
[178,179,172,158,185,181,176,0,176],
[178,181,165,178,175,183,185,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,196,188,158,190,195,153,197],
[169,0,187,169,170,186,188,179,119],
[145,154,0,194,160,169,197,178,166],
[153,172,147,0,125,164,112,88,149],
[183,171,181,216,0,195,168,147,159],
[151,155,172,177,146,0,153,160,170],
[146,153,144,229,173,188,0,187,147],
[188,162,163,253,194,181,154,0,176],
[144,222,175,192,182,171,194,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,187,170,190,186,176,176],
[164,0,164,179,182,173,189,185,186],
[173,177,0,172,163,185,184,180,179],
[154,162,169,0,170,175,186,171,162],
[171,159,178,171,0,162,184,168,179],
[151,168,156,166,179,0,180,175,160],
[155,152,157,155,157,161,0,159,154],
[165,156,161,170,173,166,182,0,171],
[165,155,162,179,162,181,187,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,171,164,167,168,178,170,159],
[157,0,186,191,177,184,182,179,151],
[170,155,0,160,162,162,180,168,168],
[177,150,181,0,186,171,193,171,162],
[174,164,179,155,0,179,165,165,174],
[173,157,179,170,162,0,190,178,161],
[163,159,161,148,176,151,0,160,142],
[171,162,173,170,176,163,181,0,157],
[182,190,173,179,167,180,199,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,184,181,198,171,175,177,161],
[151,0,175,181,181,161,160,166,160],
[157,166,0,176,181,156,166,164,167],
[160,160,165,0,171,170,151,165,153],
[143,160,160,170,0,154,157,155,163],
[170,180,185,171,187,0,178,176,169],
[166,181,175,190,184,163,0,169,169],
[164,175,177,176,186,165,172,0,172],
[180,181,174,188,178,172,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,168,166,173,183,171,166],
[168,0,163,163,148,175,175,167,165],
[169,178,0,164,152,158,166,151,146],
[173,178,177,0,162,178,180,167,162],
[175,193,189,179,0,186,188,167,168],
[168,166,183,163,155,0,169,175,183],
[158,166,175,161,153,172,0,170,161],
[170,174,190,174,174,166,171,0,170],
[175,176,195,179,173,158,180,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,177,144,169,161,156,164,184],
[170,0,197,199,178,176,182,197,207],
[164,144,0,171,164,171,143,152,168],
[197,142,170,0,195,182,151,182,186],
[172,163,177,146,0,148,137,151,141],
[180,165,170,159,193,0,167,157,191],
[185,159,198,190,204,174,0,193,163],
[177,144,189,159,190,184,148,0,207],
[157,134,173,155,200,150,178,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,171,192,177,170,167,197,198],
[172,0,184,186,168,166,159,186,159],
[170,157,0,173,163,163,165,175,193],
[149,155,168,0,156,161,159,149,171],
[164,173,178,185,0,174,158,176,201],
[171,175,178,180,167,0,176,155,156],
[174,182,176,182,183,165,0,163,193],
[144,155,166,192,165,186,178,0,178],
[143,182,148,170,140,185,148,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,171,174,162,148,167,166,153],
[184,0,183,184,171,180,174,186,156],
[170,158,0,165,167,164,168,178,158],
[167,157,176,0,169,162,165,162,165],
[179,170,174,172,0,180,165,172,152],
[193,161,177,179,161,0,160,169,171],
[174,167,173,176,176,181,0,187,159],
[175,155,163,179,169,172,154,0,163],
[188,185,183,176,189,170,182,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,179,166,189,166,170,175,189],
[160,0,172,163,183,151,166,173,176],
[162,169,0,163,181,176,169,165,177],
[175,178,178,0,174,170,181,190,178],
[152,158,160,167,0,151,160,156,175],
[175,190,165,171,190,0,173,192,190],
[171,175,172,160,181,168,0,170,167],
[166,168,176,151,185,149,171,0,174],
[152,165,164,163,166,151,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,180,178,177,173,177,170],
[176,0,177,187,168,174,190,179,176],
[180,164,0,178,199,183,195,184,181],
[161,154,163,0,162,151,172,172,161],
[163,173,142,179,0,163,165,175,172],
[164,167,158,190,178,0,177,185,163],
[168,151,146,169,176,164,0,178,156],
[164,162,157,169,166,156,163,0,162],
[171,165,160,180,169,178,185,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,189,192,181,164,180,179,174],
[170,0,182,183,175,182,165,159,163],
[152,159,0,177,168,166,162,146,182],
[149,158,164,0,161,158,148,144,157],
[160,166,173,180,0,163,178,155,175],
[177,159,175,183,178,0,189,165,174],
[161,176,179,193,163,152,0,149,178],
[162,182,195,197,186,176,192,0,180],
[167,178,159,184,166,167,163,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,183,162,158,151,164,147,181],
[174,0,183,154,153,159,150,162,155],
[158,158,0,175,166,153,142,180,152],
[179,187,166,0,156,169,168,160,181],
[183,188,175,185,0,149,175,156,172],
[190,182,188,172,192,0,179,173,170],
[177,191,199,173,166,162,0,200,193],
[194,179,161,181,185,168,141,0,178],
[160,186,189,160,169,171,148,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,181,189,176,144,166,201,221],
[169,0,159,142,173,152,171,180,188],
[160,182,0,163,159,187,180,182,193],
[152,199,178,0,150,179,171,172,191],
[165,168,182,191,0,181,144,182,223],
[197,189,154,162,160,0,173,181,206],
[175,170,161,170,197,168,0,179,216],
[140,161,159,169,159,160,162,0,194],
[120,153,148,150,118,135,125,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,157,161,161,170,192,156,184],
[192,0,177,171,188,178,170,186,175],
[184,164,0,160,158,153,173,171,179],
[180,170,181,0,175,173,204,186,190],
[180,153,183,166,0,160,190,187,172],
[171,163,188,168,181,0,197,183,164],
[149,171,168,137,151,144,0,169,167],
[185,155,170,155,154,158,172,0,164],
[157,166,162,151,169,177,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,170,164,189,210,177,224,197],
[146,0,149,137,161,156,173,205,191],
[171,192,0,171,211,181,175,196,170],
[177,204,170,0,210,211,180,213,193],
[152,180,130,131,0,136,132,188,144],
[131,185,160,130,205,0,154,179,146],
[164,168,166,161,209,187,0,236,197],
[117,136,145,128,153,162,105,0,136],
[144,150,171,148,197,195,144,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,149,174,145,196,121,167,134],
[181,0,144,137,143,200,153,176,151],
[192,197,0,164,191,217,172,210,163],
[167,204,177,0,158,192,157,180,180],
[196,198,150,183,0,191,149,183,157],
[145,141,124,149,150,0,141,152,144],
[220,188,169,184,192,200,0,195,174],
[174,165,131,161,158,189,146,0,128],
[207,190,178,161,184,197,167,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,189,175,182,198,190,162,169],
[163,0,168,168,187,182,196,170,158],
[152,173,0,153,171,198,195,173,160],
[166,173,188,0,174,197,205,184,178],
[159,154,170,167,0,176,182,162,170],
[143,159,143,144,165,0,162,162,140],
[151,145,146,136,159,179,0,152,146],
[179,171,168,157,179,179,189,0,163],
[172,183,181,163,171,201,195,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,155,170,160,163,195,158,163],
[177,0,166,159,161,179,201,151,163],
[186,175,0,178,171,157,196,176,169],
[171,182,163,0,159,170,184,134,166],
[181,180,170,182,0,185,209,158,161],
[178,162,184,171,156,0,194,154,173],
[146,140,145,157,132,147,0,138,157],
[183,190,165,207,183,187,203,0,183],
[178,178,172,175,180,168,184,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,196,176,172,178,170,171,180],
[179,0,181,190,172,165,168,181,177],
[145,160,0,153,169,156,159,163,179],
[165,151,188,0,172,170,165,170,165],
[169,169,172,169,0,185,170,162,164],
[163,176,185,171,156,0,173,162,172],
[171,173,182,176,171,168,0,178,166],
[170,160,178,171,179,179,163,0,176],
[161,164,162,176,177,169,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,152,167,176,124,164,171],
[228,0,86,171,163,200,103,199,159],
[225,255,0,177,138,210,181,191,163],
[189,170,164,0,148,153,166,177,163],
[174,178,203,193,0,209,162,257,125],
[165,141,131,188,132,0,147,186,96],
[217,238,160,175,179,194,0,230,156],
[177,142,150,164,84,155,111,0,108],
[170,182,178,178,216,245,185,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,167,163,173,186,162,186,167],
[175,0,178,181,181,167,179,187,193],
[174,163,0,158,152,132,166,167,169],
[178,160,183,0,144,147,158,172,156],
[168,160,189,197,0,153,161,182,186],
[155,174,209,194,188,0,188,190,189],
[179,162,175,183,180,153,0,197,182],
[155,154,174,169,159,151,144,0,172],
[174,148,172,185,155,152,159,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,148,167,154,177,174,178,170],
[183,0,181,178,175,172,188,195,169],
[193,160,0,175,156,179,184,182,173],
[174,163,166,0,157,184,192,181,169],
[187,166,185,184,0,177,184,187,173],
[164,169,162,157,164,0,175,173,175],
[167,153,157,149,157,166,0,181,163],
[163,146,159,160,154,168,160,0,149],
[171,172,168,172,168,166,178,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,187,174,185,169,192,164,179],
[160,0,169,181,185,156,192,170,172],
[154,172,0,169,182,170,192,159,171],
[167,160,172,0,175,174,191,172,171],
[156,156,159,166,0,149,182,150,153],
[172,185,171,167,192,0,194,170,171],
[149,149,149,150,159,147,0,155,150],
[177,171,182,169,191,171,186,0,175],
[162,169,170,170,188,170,191,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,182,178,190,172,175,181],
[171,0,175,160,157,191,164,181,176],
[167,166,0,178,177,199,175,192,162],
[159,181,163,0,178,191,188,174,175],
[163,184,164,163,0,193,175,182,163],
[151,150,142,150,148,0,166,167,147],
[169,177,166,153,166,175,0,173,159],
[166,160,149,167,159,174,168,0,161],
[160,165,179,166,178,194,182,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,156,158,179,183,181,165],
[176,0,180,190,170,205,188,195,191],
[166,161,0,174,160,188,182,182,173],
[185,151,167,0,158,188,185,171,186],
[183,171,181,183,0,204,183,183,162],
[162,136,153,153,137,0,165,168,155],
[158,153,159,156,158,176,0,172,174],
[160,146,159,170,158,173,169,0,166],
[176,150,168,155,179,186,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,169,182,165,166,175,169],
[162,0,175,181,148,172,169,189,159],
[174,166,0,181,173,165,176,184,163],
[172,160,160,0,174,157,171,164,173],
[159,193,168,167,0,173,180,185,172],
[176,169,176,184,168,0,178,185,169],
[175,172,165,170,161,163,0,182,158],
[166,152,157,177,156,156,159,0,161],
[172,182,178,168,169,172,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,196,201,217,205,195,153,192],
[156,0,173,191,188,190,200,195,175],
[145,168,0,175,186,202,165,168,167],
[140,150,166,0,176,183,163,136,170],
[124,153,155,165,0,149,175,162,147],
[136,151,139,158,192,0,154,162,163],
[146,141,176,178,166,187,0,160,169],
[188,146,173,205,179,179,181,0,181],
[149,166,174,171,194,178,172,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,190,170,180,176,174,184,171],
[150,0,188,147,184,150,130,167,168],
[151,153,0,157,172,167,172,184,165],
[171,194,184,0,160,150,172,180,178],
[161,157,169,181,0,170,170,182,177],
[165,191,174,191,171,0,177,200,197],
[167,211,169,169,171,164,0,195,176],
[157,174,157,161,159,141,146,0,164],
[170,173,176,163,164,144,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,116,191,152,141,136,89,144],
[238,0,207,192,137,209,196,222,220],
[225,134,0,217,210,169,173,154,181],
[150,149,124,0,150,142,139,194,136],
[189,204,131,191,0,167,188,147,201],
[200,132,172,199,174,0,194,171,195],
[205,145,168,202,153,147,0,169,145],
[252,119,187,147,194,170,172,0,175],
[197,121,160,205,140,146,196,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,196,190,179,164,184,190,209],
[164,0,164,171,171,157,158,150,175],
[145,177,0,170,166,150,168,177,185],
[151,170,171,0,167,139,160,177,210],
[162,170,175,174,0,176,169,184,184],
[177,184,191,202,165,0,172,186,211],
[157,183,173,181,172,169,0,186,191],
[151,191,164,164,157,155,155,0,168],
[132,166,156,131,157,130,150,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,178,178,181,176,204,186],
[164,0,175,197,173,191,182,187,195],
[171,166,0,178,170,160,181,174,180],
[163,144,163,0,165,162,178,179,186],
[163,168,171,176,0,178,178,176,160],
[160,150,181,179,163,0,190,171,177],
[165,159,160,163,163,151,0,164,179],
[137,154,167,162,165,170,177,0,176],
[155,146,161,155,181,164,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,170,167,161,161,171,177],
[171,0,171,172,180,169,166,172,195],
[175,170,0,172,171,179,163,163,176],
[171,169,169,0,175,179,181,181,193],
[174,161,170,166,0,161,163,157,177],
[180,172,162,162,180,0,171,171,194],
[180,175,178,160,178,170,0,167,192],
[170,169,178,160,184,170,174,0,182],
[164,146,165,148,164,147,149,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,97,104,102,125,176,92,79],
[202,0,202,224,128,180,205,171,190],
[244,139,0,200,169,138,196,140,176],
[237,117,141,0,113,145,169,113,125],
[239,213,172,228,0,209,208,156,169],
[216,161,203,196,132,0,214,182,135],
[165,136,145,172,133,127,0,73,116],
[249,170,201,228,185,159,268,0,223],
[262,151,165,216,172,206,225,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,156,164,165,156,170,158,167],
[164,0,157,155,164,158,169,165,162],
[185,184,0,183,172,172,160,177,168],
[177,186,158,0,169,163,164,187,172],
[176,177,169,172,0,172,175,178,183],
[185,183,169,178,169,0,190,167,176],
[171,172,181,177,166,151,0,164,163],
[183,176,164,154,163,174,177,0,180],
[174,179,173,169,158,165,178,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,166,159,155,196,164,156,164],
[176,0,179,164,180,186,151,165,174],
[175,162,0,174,174,204,155,182,159],
[182,177,167,0,161,203,171,163,178],
[186,161,167,180,0,186,161,190,180],
[145,155,137,138,155,0,143,145,163],
[177,190,186,170,180,198,0,181,184],
[185,176,159,178,151,196,160,0,187],
[177,167,182,163,161,178,157,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,182,176,168,179,172,173,177],
[165,0,182,177,176,164,184,176,177],
[159,159,0,162,157,167,169,159,158],
[165,164,179,0,167,167,185,167,159],
[173,165,184,174,0,171,174,166,161],
[162,177,174,174,170,0,176,160,161],
[169,157,172,156,167,165,0,152,166],
[168,165,182,174,175,181,189,0,178],
[164,164,183,182,180,180,175,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,185,187,155,161,185,185,170],
[121,0,162,169,165,146,155,187,172],
[156,179,0,164,164,177,147,161,176],
[154,172,177,0,169,144,159,223,173],
[186,176,177,172,0,163,169,181,181],
[180,195,164,197,178,0,184,182,196],
[156,186,194,182,172,157,0,183,197],
[156,154,180,118,160,159,158,0,149],
[171,169,165,168,160,145,144,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,156,183,190,174,174,165,167],
[176,0,171,167,180,175,176,157,176],
[185,170,0,192,179,182,176,171,169],
[158,174,149,0,171,169,169,153,166],
[151,161,162,170,0,172,164,158,164],
[167,166,159,172,169,0,175,154,172],
[167,165,165,172,177,166,0,170,179],
[176,184,170,188,183,187,171,0,185],
[174,165,172,175,177,169,162,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,183,230,181,146,115,198,209],
[165,0,178,164,156,115,180,149,69],
[158,163,0,231,195,51,141,127,106],
[111,177,110,0,120,108,134,107,124],
[160,185,146,221,0,121,165,147,199],
[195,226,290,233,220,0,199,142,190],
[226,161,200,207,176,142,0,182,195],
[143,192,214,234,194,199,159,0,145],
[132,272,235,217,142,151,146,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,184,182,197,190,181,170,179],
[167,0,182,180,186,173,162,176,167],
[157,159,0,160,179,159,172,163,149],
[159,161,181,0,171,176,167,158,167],
[144,155,162,170,0,155,144,160,153],
[151,168,182,165,186,0,160,175,171],
[160,179,169,174,197,181,0,179,169],
[171,165,178,183,181,166,162,0,164],
[162,174,192,174,188,170,172,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,155,174,179,162,178,164,182],
[166,0,149,162,156,157,162,154,171],
[186,192,0,166,193,157,183,183,185],
[167,179,175,0,177,153,161,155,179],
[162,185,148,164,0,147,149,165,181],
[179,184,184,188,194,0,183,165,173],
[163,179,158,180,192,158,0,168,174],
[177,187,158,186,176,176,173,0,185],
[159,170,156,162,160,168,167,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,150,177,165,153,150,189,152],
[205,0,171,187,186,176,157,198,203],
[191,170,0,202,202,170,185,200,201],
[164,154,139,0,190,137,142,171,189],
[176,155,139,151,0,168,143,208,174],
[188,165,171,204,173,0,175,207,205],
[191,184,156,199,198,166,0,168,191],
[152,143,141,170,133,134,173,0,157],
[189,138,140,152,167,136,150,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,196,206,179,196,150,188,189],
[164,0,160,182,159,190,144,176,181],
[145,181,0,180,165,183,170,169,169],
[135,159,161,0,151,171,134,164,169],
[162,182,176,190,0,192,143,187,177],
[145,151,158,170,149,0,161,160,164],
[191,197,171,207,198,180,0,167,190],
[153,165,172,177,154,181,174,0,156],
[152,160,172,172,164,177,151,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,166,173,157,172,154,166,175],
[185,0,184,163,185,180,170,179,201],
[175,157,0,163,171,168,174,156,188],
[168,178,178,0,183,180,174,175,182],
[184,156,170,158,0,176,180,187,176],
[169,161,173,161,165,0,160,169,192],
[187,171,167,167,161,181,0,178,189],
[175,162,185,166,154,172,163,0,168],
[166,140,153,159,165,149,152,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,179,178,167,174,170,183,198],
[168,0,179,175,168,179,154,168,186],
[162,162,0,182,175,171,157,181,181],
[163,166,159,0,162,159,159,170,178],
[174,173,166,179,0,169,172,195,185],
[167,162,170,182,172,0,167,185,177],
[171,187,184,182,169,174,0,186,193],
[158,173,160,171,146,156,155,0,172],
[143,155,160,163,156,164,148,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,199,189,153,200,196,206,187],
[171,0,181,169,185,185,189,195,183],
[142,160,0,147,148,152,146,195,146],
[152,172,194,0,152,188,187,210,202],
[188,156,193,189,0,195,194,219,189],
[141,156,189,153,146,0,164,185,166],
[145,152,195,154,147,177,0,183,162],
[135,146,146,131,122,156,158,0,133],
[154,158,195,139,152,175,179,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,165,198,166,134,192,130,155],
[192,0,173,160,146,149,175,143,157],
[176,168,0,217,170,143,190,158,143],
[143,181,124,0,144,124,152,98,151],
[175,195,171,197,0,162,214,152,175],
[207,192,198,217,179,0,198,175,167],
[149,166,151,189,127,143,0,127,151],
[211,198,183,243,189,166,214,0,172],
[186,184,198,190,166,174,190,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,163,183,165,161,167,169,164],
[169,0,156,185,170,171,172,170,158],
[178,185,0,189,172,172,168,181,183],
[158,156,152,0,161,149,164,162,159],
[176,171,169,180,0,165,187,171,176],
[180,170,169,192,176,0,172,172,183],
[174,169,173,177,154,169,0,152,169],
[172,171,160,179,170,169,189,0,163],
[177,183,158,182,165,158,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,166,164,162,172,173,159,158],
[151,0,123,126,158,131,121,131,149],
[175,218,0,177,171,170,185,143,200],
[177,215,164,0,181,169,181,162,188],
[179,183,170,160,0,145,174,167,203],
[169,210,171,172,196,0,154,155,193],
[168,220,156,160,167,187,0,178,189],
[182,210,198,179,174,186,163,0,204],
[183,192,141,153,138,148,152,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,153,160,165,157,164,162,178],
[176,0,166,178,162,182,160,176,179],
[188,175,0,174,157,180,162,185,185],
[181,163,167,0,158,179,173,177,187],
[176,179,184,183,0,180,169,195,198],
[184,159,161,162,161,0,171,171,189],
[177,181,179,168,172,170,0,178,179],
[179,165,156,164,146,170,163,0,160],
[163,162,156,154,143,152,162,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,182,163,172,184,170,186,163],
[157,0,154,149,166,154,157,154,141],
[159,187,0,172,178,172,159,187,152],
[178,192,169,0,174,169,157,181,141],
[169,175,163,167,0,152,149,177,163],
[157,187,169,172,189,0,160,162,168],
[171,184,182,184,192,181,0,170,181],
[155,187,154,160,164,179,171,0,167],
[178,200,189,200,178,173,160,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,184,170,188,176,184,174],
[164,0,168,171,165,176,163,172,152],
[167,173,0,172,165,175,183,176,185],
[157,170,169,0,152,161,160,146,157],
[171,176,176,189,0,175,176,170,180],
[153,165,166,180,166,0,176,176,176],
[165,178,158,181,165,165,0,168,173],
[157,169,165,195,171,165,173,0,168],
[167,189,156,184,161,165,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,187,201,154,210,189,219,185],
[130,0,172,143,153,158,169,188,148],
[154,169,0,168,170,164,144,172,130],
[140,198,173,0,161,172,169,184,161],
[187,188,171,180,0,181,171,179,165],
[131,183,177,169,160,0,154,182,151],
[152,172,197,172,170,187,0,193,168],
[122,153,169,157,162,159,148,0,170],
[156,193,211,180,176,190,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,150,151,173,153,146,134,152],
[176,0,158,149,176,142,142,151,162],
[191,183,0,189,176,122,165,158,170],
[190,192,152,0,148,174,163,143,177],
[168,165,165,193,0,168,156,162,153],
[188,199,219,167,173,0,193,192,179],
[195,199,176,178,185,148,0,145,171],
[207,190,183,198,179,149,196,0,186],
[189,179,171,164,188,162,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,176,167,157,164,164,168,157],
[177,0,166,154,161,165,166,159,156],
[165,175,0,172,170,176,163,168,175],
[174,187,169,0,171,169,175,163,172],
[184,180,171,170,0,174,166,165,176],
[177,176,165,172,167,0,181,164,159],
[177,175,178,166,175,160,0,159,167],
[173,182,173,178,176,177,182,0,164],
[184,185,166,169,165,182,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,161,159,171,162,162,137],
[165,0,171,156,156,159,154,152,144],
[160,170,0,164,162,166,168,173,149],
[180,185,177,0,175,186,176,173,163],
[182,185,179,166,0,179,182,176,181],
[170,182,175,155,162,0,168,170,160],
[179,187,173,165,159,173,0,173,164],
[179,189,168,168,165,171,168,0,150],
[204,197,192,178,160,181,177,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,166,198,209,201,173,195,193],
[159,0,160,152,165,123,163,177,141],
[175,181,0,178,189,168,185,187,168],
[143,189,163,0,193,171,172,176,171],
[132,176,152,148,0,150,167,159,148],
[140,218,173,170,191,0,159,185,176],
[168,178,156,169,174,182,0,178,158],
[146,164,154,165,182,156,163,0,149],
[148,200,173,170,193,165,183,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,191,181,193,167,161,193,174],
[153,0,167,178,187,175,167,178,169],
[150,174,0,174,171,168,170,174,172],
[160,163,167,0,159,154,158,157,172],
[148,154,170,182,0,155,148,178,165],
[174,166,173,187,186,0,163,161,168],
[180,174,171,183,193,178,0,186,170],
[148,163,167,184,163,180,155,0,172],
[167,172,169,169,176,173,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,168,176,182,169,163,179],
[168,0,166,165,172,176,164,173,164],
[163,175,0,168,163,182,159,169,169],
[173,176,173,0,166,178,157,156,160],
[165,169,178,175,0,184,169,158,170],
[159,165,159,163,157,0,152,161,164],
[172,177,182,184,172,189,0,170,167],
[178,168,172,185,183,180,171,0,176],
[162,177,172,181,171,177,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,143,162,165,175,173,164,169],
[176,0,146,172,161,172,182,167,164],
[198,195,0,183,189,170,211,167,183],
[179,169,158,0,165,172,189,174,167],
[176,180,152,176,0,170,181,162,173],
[166,169,171,169,171,0,185,180,176],
[168,159,130,152,160,156,0,160,160],
[177,174,174,167,179,161,181,0,178],
[172,177,158,174,168,165,181,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,150,153,157,144,149,150,166],
[198,0,173,167,188,175,190,172,192],
[191,168,0,173,198,198,195,184,181],
[188,174,168,0,177,180,193,170,184],
[184,153,143,164,0,167,167,169,162],
[197,166,143,161,174,0,183,174,160],
[192,151,146,148,174,158,0,163,171],
[191,169,157,171,172,167,178,0,185],
[175,149,160,157,179,181,170,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,173,200,194,217,169,189],
[170,0,190,193,203,147,178,214,189],
[175,151,0,199,221,180,197,231,187],
[168,148,142,0,184,138,160,171,157],
[141,138,120,157,0,147,172,203,155],
[147,194,161,203,194,0,186,218,166],
[124,163,144,181,169,155,0,180,166],
[172,127,110,170,138,123,161,0,137],
[152,152,154,184,186,175,175,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,185,171,183,202,197,169,199],
[156,0,175,153,156,186,175,142,169],
[156,166,0,167,156,181,208,145,172],
[170,188,174,0,166,194,192,166,178],
[158,185,185,175,0,191,200,151,166],
[139,155,160,147,150,0,179,137,172],
[144,166,133,149,141,162,0,152,153],
[172,199,196,175,190,204,189,0,167],
[142,172,169,163,175,169,188,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,150,171,199,170,157,160,154],
[168,0,150,169,155,143,145,149,140],
[191,191,0,193,184,191,191,164,193],
[170,172,148,0,176,195,148,139,157],
[142,186,157,165,0,177,127,166,134],
[171,198,150,146,164,0,178,176,146],
[184,196,150,193,214,163,0,164,167],
[181,192,177,202,175,165,177,0,160],
[187,201,148,184,207,195,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,162,164,153,133,172,178,185],
[143,0,156,131,148,129,133,148,146],
[179,185,0,150,158,156,163,187,163],
[177,210,191,0,171,155,178,189,168],
[188,193,183,170,0,176,171,202,188],
[208,212,185,186,165,0,197,178,187],
[169,208,178,163,170,144,0,195,191],
[163,193,154,152,139,163,146,0,167],
[156,195,178,173,153,154,150,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,195,166,207,163,176,197,165],
[141,0,188,173,181,171,132,192,171],
[146,153,0,188,178,183,164,172,184],
[175,168,153,0,198,151,172,198,180],
[134,160,163,143,0,131,142,177,161],
[178,170,158,190,210,0,174,187,181],
[165,209,177,169,199,167,0,209,180],
[144,149,169,143,164,154,132,0,173],
[176,170,157,161,180,160,161,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,100,131,77,185,112,135,113],
[115,0,19,189,173,224,32,135,140],
[241,322,0,230,198,289,139,209,225],
[210,152,111,0,202,130,132,235,157],
[264,168,143,139,0,160,115,154,102],
[156,117,52,211,181,0,106,192,184],
[229,309,202,209,226,235,0,138,160],
[206,206,132,106,187,149,203,0,38],
[228,201,116,184,239,157,181,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,183,188,183,184,178,182,170],
[185,0,183,187,165,200,185,168,184],
[158,158,0,158,168,167,172,150,165],
[153,154,183,0,173,181,163,154,164],
[158,176,173,168,0,175,174,145,161],
[157,141,174,160,166,0,163,145,171],
[163,156,169,178,167,178,0,167,168],
[159,173,191,187,196,196,174,0,180],
[171,157,176,177,180,170,173,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,172,177,176,164,173,186],
[174,0,170,171,180,172,162,167,171],
[172,171,0,168,171,183,175,167,181],
[169,170,173,0,174,178,167,164,181],
[164,161,170,167,0,155,160,171,170],
[165,169,158,163,186,0,163,165,175],
[177,179,166,174,181,178,0,170,187],
[168,174,174,177,170,176,171,0,181],
[155,170,160,160,171,166,154,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,162,172,185,183,157,174,150],
[192,0,157,167,158,172,157,190,168],
[179,184,0,184,180,166,159,195,175],
[169,174,157,0,161,183,141,182,187],
[156,183,161,180,0,185,177,165,169],
[158,169,175,158,156,0,145,171,168],
[184,184,182,200,164,196,0,197,177],
[167,151,146,159,176,170,144,0,167],
[191,173,166,154,172,173,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,158,163,165,166,166,155,169],
[174,0,174,170,172,159,174,162,172],
[183,167,0,171,175,168,169,164,171],
[178,171,170,0,164,168,179,170,177],
[176,169,166,177,0,171,165,166,169],
[175,182,173,173,170,0,183,176,183],
[175,167,172,162,176,158,0,166,167],
[186,179,177,171,175,165,175,0,180],
[172,169,170,164,172,158,174,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,188,174,183,205,184,166,193],
[143,0,162,165,164,177,172,151,170],
[153,179,0,164,168,169,173,154,175],
[167,176,177,0,165,187,163,182,148],
[158,177,173,176,0,168,167,165,164],
[136,164,172,154,173,0,158,146,170],
[157,169,168,178,174,183,0,170,179],
[175,190,187,159,176,195,171,0,175],
[148,171,166,193,177,171,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,178,165,152,166,175,187,194],
[171,0,177,173,164,179,187,173,192],
[163,164,0,162,185,165,171,157,192],
[176,168,179,0,168,158,158,163,197],
[189,177,156,173,0,163,175,174,187],
[175,162,176,183,178,0,182,174,188],
[166,154,170,183,166,159,0,165,172],
[154,168,184,178,167,167,176,0,185],
[147,149,149,144,154,153,169,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,105,93,119,126,152,161,159],
[137,0,108,135,122,147,225,124,138],
[236,233,0,194,178,224,270,208,155],
[248,206,147,0,206,234,196,187,141],
[222,219,163,135,0,189,224,162,141],
[215,194,117,107,152,0,169,167,131],
[189,116,71,145,117,172,0,152,116],
[180,217,133,154,179,174,189,0,194],
[182,203,186,200,200,210,225,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,181,176,166,176,186,175,184],
[172,0,181,167,166,178,184,171,169],
[160,160,0,172,177,167,171,169,172],
[165,174,169,0,159,169,174,168,173],
[175,175,164,182,0,180,193,165,181],
[165,163,174,172,161,0,177,171,167],
[155,157,170,167,148,164,0,149,158],
[166,170,172,173,176,170,192,0,176],
[157,172,169,168,160,174,183,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,241,197,195,155,193,156,204],
[206,0,238,164,200,201,257,170,176],
[100,103,0,156,175,197,204,120,103],
[144,177,185,0,183,165,172,150,122],
[146,141,166,158,0,182,195,120,117],
[186,140,144,176,159,0,180,169,154],
[148,84,137,169,146,161,0,119,91],
[185,171,221,191,221,172,222,0,150],
[137,165,238,219,224,187,250,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,169,148,158,187,162,193,157],
[183,0,186,165,174,181,161,163,194],
[172,155,0,167,156,161,154,179,172],
[193,176,174,0,179,180,159,196,162],
[183,167,185,162,0,171,164,157,176],
[154,160,180,161,170,0,160,165,176],
[179,180,187,182,177,181,0,179,159],
[148,178,162,145,184,176,162,0,166],
[184,147,169,179,165,165,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,154,163,129,166,142,156,145],
[216,0,169,194,151,175,165,170,159],
[187,172,0,190,158,170,158,165,167],
[178,147,151,0,146,134,148,150,142],
[212,190,183,195,0,168,170,153,161],
[175,166,171,207,173,0,166,178,142],
[199,176,183,193,171,175,0,152,154],
[185,171,176,191,188,163,189,0,171],
[196,182,174,199,180,199,187,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,148,155,165,159,178,180,163],
[152,0,154,157,165,171,174,155,174],
[193,187,0,155,187,173,188,174,180],
[186,184,186,0,193,189,201,187,161],
[176,176,154,148,0,161,171,178,165],
[182,170,168,152,180,0,183,166,179],
[163,167,153,140,170,158,0,177,165],
[161,186,167,154,163,175,164,0,190],
[178,167,161,180,176,162,176,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,173,177,176,149,153,179],
[170,0,165,178,184,179,176,183,184],
[176,176,0,168,186,179,156,187,172],
[168,163,173,0,179,181,169,166,180],
[164,157,155,162,0,182,159,175,162],
[165,162,162,160,159,0,159,177,167],
[192,165,185,172,182,182,0,176,172],
[188,158,154,175,166,164,165,0,165],
[162,157,169,161,179,174,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,189,194,162,204,190,167,164],
[149,0,181,173,167,196,192,175,170],
[152,160,0,150,134,179,155,152,154],
[147,168,191,0,173,184,159,176,153],
[179,174,207,168,0,194,150,162,171],
[137,145,162,157,147,0,144,146,143],
[151,149,186,182,191,197,0,172,169],
[174,166,189,165,179,195,169,0,158],
[177,171,187,188,170,198,172,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,176,159,178,162,168,171,166],
[162,0,166,168,172,153,155,163,148],
[165,175,0,162,191,161,176,183,170],
[182,173,179,0,187,164,181,164,165],
[163,169,150,154,0,162,163,171,159],
[179,188,180,177,179,0,182,170,176],
[173,186,165,160,178,159,0,166,174],
[170,178,158,177,170,171,175,0,167],
[175,193,171,176,182,165,167,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,186,162,165,169,169,167,174],
[169,0,185,173,179,162,166,171,166],
[155,156,0,158,168,152,169,159,162],
[179,168,183,0,177,168,174,180,162],
[176,162,173,164,0,168,161,170,169],
[172,179,189,173,173,0,164,165,165],
[172,175,172,167,180,177,0,170,174],
[174,170,182,161,171,176,171,0,172],
[167,175,179,179,172,176,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,161,169,163,159,164,165,166],
[190,0,181,180,166,168,181,160,181],
[180,160,0,174,169,159,170,182,175],
[172,161,167,0,165,174,165,158,165],
[178,175,172,176,0,165,178,153,173],
[182,173,182,167,176,0,174,164,150],
[177,160,171,176,163,167,0,170,157],
[176,181,159,183,188,177,171,0,175],
[175,160,166,176,168,191,184,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,179,169,180,187,159,164],
[162,0,176,169,163,159,173,169,168],
[176,165,0,159,145,155,187,165,180],
[162,172,182,0,153,184,184,156,170],
[172,178,196,188,0,189,205,185,170],
[161,182,186,157,152,0,186,168,186],
[154,168,154,157,136,155,0,128,168],
[182,172,176,185,156,173,213,0,178],
[177,173,161,171,171,155,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,166,177,197,168,189,179],
[159,0,165,156,149,172,162,165,162],
[172,176,0,167,168,173,167,183,179],
[175,185,174,0,162,183,180,201,176],
[164,192,173,179,0,187,166,190,175],
[144,169,168,158,154,0,159,169,159],
[173,179,174,161,175,182,0,182,172],
[152,176,158,140,151,172,159,0,160],
[162,179,162,165,166,182,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,175,164,164,164,172,157,171],
[177,0,185,171,153,164,177,173,167],
[166,156,0,162,159,157,178,159,168],
[177,170,179,0,165,165,186,174,182],
[177,188,182,176,0,169,178,168,188],
[177,177,184,176,172,0,179,168,176],
[169,164,163,155,163,162,0,152,176],
[184,168,182,167,173,173,189,0,173],
[170,174,173,159,153,165,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,161,164,178,174,169,178],
[165,0,178,164,162,184,181,174,180],
[165,163,0,161,158,169,166,170,173],
[180,177,180,0,169,177,173,167,185],
[177,179,183,172,0,168,174,171,176],
[163,157,172,164,173,0,173,160,171],
[167,160,175,168,167,168,0,162,180],
[172,167,171,174,170,181,179,0,171],
[163,161,168,156,165,170,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,193,171,160,182,167,192],
[169,0,184,197,149,144,200,146,121],
[174,157,0,171,125,170,191,174,140],
[148,144,170,0,149,175,204,166,146],
[170,192,216,192,0,173,189,158,180],
[181,197,171,166,168,0,196,167,175],
[159,141,150,137,152,145,0,139,166],
[174,195,167,175,183,174,202,0,188],
[149,220,201,195,161,166,175,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,170,169,174,181,189,209,180],
[125,0,142,140,136,152,142,170,128],
[171,199,0,184,170,188,175,191,136],
[172,201,157,0,158,184,162,176,162],
[167,205,171,183,0,169,186,186,166],
[160,189,153,157,172,0,160,176,147],
[152,199,166,179,155,181,0,211,146],
[132,171,150,165,155,165,130,0,149],
[161,213,205,179,175,194,195,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,133,144,130,106,190,152,156],
[165,0,173,134,163,172,208,180,237],
[208,168,0,161,191,187,175,155,216],
[197,207,180,0,145,198,235,163,207],
[211,178,150,196,0,203,213,199,237],
[235,169,154,143,138,0,228,188,226],
[151,133,166,106,128,113,0,130,162],
[189,161,186,178,142,153,211,0,213],
[185,104,125,134,104,115,179,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,130,114,171,167,165,136,134],
[223,0,161,161,216,197,199,213,167],
[211,180,0,216,206,165,217,186,221],
[227,180,125,0,191,208,214,201,167],
[170,125,135,150,0,109,174,191,111],
[174,144,176,133,232,0,172,206,146],
[176,142,124,127,167,169,0,135,111],
[205,128,155,140,150,135,206,0,134],
[207,174,120,174,230,195,230,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,72,209,72,146,208,94,130],
[206,0,181,268,163,181,185,196,176],
[269,160,0,227,211,200,195,198,183],
[132,73,114,0,96,96,145,68,70],
[269,178,130,245,0,223,219,236,213],
[195,160,141,245,118,0,195,213,131],
[133,156,146,196,122,146,0,103,153],
[247,145,143,273,105,128,238,0,90],
[211,165,158,271,128,210,188,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,158,190,159,163,143,170,182],
[192,0,148,176,172,155,147,197,168],
[183,193,0,170,159,207,163,218,157],
[151,165,171,0,150,147,191,168,184],
[182,169,182,191,0,159,161,188,189],
[178,186,134,194,182,0,156,166,163],
[198,194,178,150,180,185,0,182,170],
[171,144,123,173,153,175,159,0,152],
[159,173,184,157,152,178,171,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,163,162,175,185,182,201,174],
[164,0,189,165,168,177,183,180,147],
[178,152,0,166,182,175,183,150,197],
[179,176,175,0,185,188,191,174,166],
[166,173,159,156,0,178,189,147,186],
[156,164,166,153,163,0,179,162,197],
[159,158,158,150,152,162,0,197,173],
[140,161,191,167,194,179,144,0,181],
[167,194,144,175,155,144,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,172,166,162,172,171,146],
[174,0,173,175,179,187,164,194,178],
[171,168,0,165,159,190,158,185,169],
[169,166,176,0,168,177,165,183,165],
[175,162,182,173,0,177,182,169,167],
[179,154,151,164,164,0,160,184,160],
[169,177,183,176,159,181,0,167,165],
[170,147,156,158,172,157,174,0,160],
[195,163,172,176,174,181,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,170,158,147,163,142,129,169],
[204,0,172,210,170,172,187,169,180],
[171,169,0,193,161,182,174,155,167],
[183,131,148,0,113,132,129,136,155],
[194,171,180,228,0,183,165,155,170],
[178,169,159,209,158,0,183,169,173],
[199,154,167,212,176,158,0,163,149],
[212,172,186,205,186,172,178,0,141],
[172,161,174,186,171,168,192,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,176,151,126,146,143,165,176],
[202,0,201,183,171,204,174,152,205],
[165,140,0,163,159,163,149,157,182],
[190,158,178,0,177,153,158,160,200],
[215,170,182,164,0,157,153,163,201],
[195,137,178,188,184,0,150,174,214],
[198,167,192,183,188,191,0,167,216],
[176,189,184,181,178,167,174,0,202],
[165,136,159,141,140,127,125,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,181,188,192,177,172,158,186],
[148,0,161,181,160,170,172,174,172],
[160,180,0,176,170,166,171,157,179],
[153,160,165,0,168,169,168,154,176],
[149,181,171,173,0,170,160,162,165],
[164,171,175,172,171,0,177,168,172],
[169,169,170,173,181,164,0,156,176],
[183,167,184,187,179,173,185,0,173],
[155,169,162,165,176,169,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,150,182,160,182,153,158,163],
[167,0,157,169,164,177,149,171,159],
[191,184,0,225,162,175,172,177,168],
[159,172,116,0,132,156,138,121,146],
[181,177,179,209,0,179,170,189,175],
[159,164,166,185,162,0,157,155,174],
[188,192,169,203,171,184,0,173,165],
[183,170,164,220,152,186,168,0,174],
[178,182,173,195,166,167,176,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,157,161,211,180,184,217,173],
[169,0,143,195,233,145,202,193,220],
[184,198,0,225,230,161,283,175,215],
[180,146,116,0,143,127,171,132,196],
[130,108,111,198,0,143,207,101,189],
[161,196,180,214,198,0,248,187,272],
[157,139,58,170,134,93,0,132,163],
[124,148,166,209,240,154,209,0,194],
[168,121,126,145,152,69,178,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,159,159,162,152,152,160,179],
[164,0,156,168,167,171,181,167,167],
[182,185,0,199,183,184,167,167,176],
[182,173,142,0,176,152,157,149,168],
[179,174,158,165,0,166,165,150,178],
[189,170,157,189,175,0,180,148,180],
[189,160,174,184,176,161,0,173,172],
[181,174,174,192,191,193,168,0,176],
[162,174,165,173,163,161,169,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,155,143,185,176,98,177,146],
[182,0,143,152,209,170,163,184,162],
[186,198,0,165,214,182,173,193,179],
[198,189,176,0,219,183,165,210,166],
[156,132,127,122,0,162,140,167,129],
[165,171,159,158,179,0,151,192,147],
[243,178,168,176,201,190,0,220,191],
[164,157,148,131,174,149,121,0,144],
[195,179,162,175,212,194,150,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,214,180,164,187,170,184,172],
[170,0,193,179,143,164,161,159,148],
[127,148,0,160,138,128,130,144,146],
[161,162,181,0,145,149,134,152,181],
[177,198,203,196,0,182,168,155,185],
[154,177,213,192,159,0,176,162,183],
[171,180,211,207,173,165,0,202,177],
[157,182,197,189,186,179,139,0,171],
[169,193,195,160,156,158,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,180,141,159,162,147,153,139],
[207,0,237,256,187,141,175,162,187],
[161,104,0,136,121,147,119,140,179],
[200,85,205,0,186,169,147,176,208],
[182,154,220,155,0,184,141,195,170],
[179,200,194,172,157,0,144,153,185],
[194,166,222,194,200,197,0,172,190],
[188,179,201,165,146,188,169,0,167],
[202,154,162,133,171,156,151,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,194,195,201,186,170,178,188],
[163,0,180,191,172,165,157,182,184],
[147,161,0,164,185,155,189,172,178],
[146,150,177,0,171,173,150,176,178],
[140,169,156,170,0,154,173,171,177],
[155,176,186,168,187,0,174,159,168],
[171,184,152,191,168,167,0,172,173],
[163,159,169,165,170,182,169,0,179],
[153,157,163,163,164,173,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,186,184,177,173,155,178,185],
[145,0,161,159,171,182,154,159,169],
[155,180,0,199,173,193,176,190,173],
[157,182,142,0,161,163,158,160,169],
[164,170,168,180,0,178,156,171,164],
[168,159,148,178,163,0,137,148,143],
[186,187,165,183,185,204,0,193,171],
[163,182,151,181,170,193,148,0,174],
[156,172,168,172,177,198,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,134,177,164,161,146,203,177],
[178,0,181,193,197,170,180,192,222],
[207,160,0,184,172,179,191,218,203],
[164,148,157,0,131,149,165,165,160],
[177,144,169,210,0,166,189,206,199],
[180,171,162,192,175,0,174,202,166],
[195,161,150,176,152,167,0,181,188],
[138,149,123,176,135,139,160,0,169],
[164,119,138,181,142,175,153,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,173,185,191,172,160,161],
[181,0,164,142,174,191,166,168,167],
[182,177,0,152,195,209,189,181,174],
[168,199,189,0,194,205,170,191,190],
[156,167,146,147,0,192,164,157,165],
[150,150,132,136,149,0,156,154,139],
[169,175,152,171,177,185,0,169,171],
[181,173,160,150,184,187,172,0,180],
[180,174,167,151,176,202,170,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,172,166,171,186,186,169,174],
[184,0,181,163,182,189,180,177,162],
[169,160,0,179,180,187,190,168,180],
[175,178,162,0,170,198,180,164,164],
[170,159,161,171,0,196,184,176,171],
[155,152,154,143,145,0,162,145,159],
[155,161,151,161,157,179,0,159,166],
[172,164,173,177,165,196,182,0,172],
[167,179,161,177,170,182,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,186,186,172,185,184,167,188],
[162,0,159,171,160,158,166,165,169],
[155,182,0,186,166,161,180,168,183],
[155,170,155,0,163,157,165,167,172],
[169,181,175,178,0,161,165,159,176],
[156,183,180,184,180,0,184,175,185],
[157,175,161,176,176,157,0,170,175],
[174,176,173,174,182,166,171,0,188],
[153,172,158,169,165,156,166,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,186,167,190,170,173,170,164],
[158,0,184,187,185,173,182,166,170],
[155,157,0,169,172,165,176,161,172],
[174,154,172,0,179,174,169,166,186],
[151,156,169,162,0,163,169,152,159],
[171,168,176,167,178,0,181,172,178],
[168,159,165,172,172,160,0,168,170],
[171,175,180,175,189,169,173,0,180],
[177,171,169,155,182,163,171,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,167,148,143,185,142,180,155],
[200,0,204,179,154,203,169,179,174],
[174,137,0,131,171,192,181,153,160],
[193,162,210,0,178,182,187,153,161],
[198,187,170,163,0,209,180,175,165],
[156,138,149,159,132,0,162,134,141],
[199,172,160,154,161,179,0,179,178],
[161,162,188,188,166,207,162,0,160],
[186,167,181,180,176,200,163,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,182,178,171,176,167,164,161],
[185,0,172,175,192,172,160,163,175],
[159,169,0,182,161,171,166,166,157],
[163,166,159,0,164,169,161,173,152],
[170,149,180,177,0,179,170,158,161],
[165,169,170,172,162,0,160,168,148],
[174,181,175,180,171,181,0,180,157],
[177,178,175,168,183,173,161,0,164],
[180,166,184,189,180,193,184,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,221,163,189,180,248,159,226],
[174,0,105,170,197,124,160,134,163],
[120,236,0,176,184,225,187,146,194],
[178,171,165,0,187,174,217,155,183],
[152,144,157,154,0,206,140,186,207],
[161,217,116,167,135,0,210,181,236],
[93,181,154,124,201,131,0,128,160],
[182,207,195,186,155,160,213,0,202],
[115,178,147,158,134,105,181,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,141,168,184,166,170,158,144],
[210,0,190,206,195,168,213,158,194],
[200,151,0,162,196,165,165,158,136],
[173,135,179,0,192,162,155,142,183],
[157,146,145,149,0,174,181,152,127],
[175,173,176,179,167,0,186,184,159],
[171,128,176,186,160,155,0,162,144],
[183,183,183,199,189,157,179,0,156],
[197,147,205,158,214,182,197,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,161,149,175,149,157,159],
[180,0,168,171,174,183,158,158,155],
[178,173,0,175,190,190,162,173,169],
[180,170,166,0,177,188,168,176,163],
[192,167,151,164,0,180,151,159,164],
[166,158,151,153,161,0,136,141,156],
[192,183,179,173,190,205,0,164,178],
[184,183,168,165,182,200,177,0,174],
[182,186,172,178,177,185,163,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,151,147,171,148,165,164,152],
[169,0,176,171,176,145,195,170,156],
[190,165,0,176,227,176,183,196,168],
[194,170,165,0,198,171,190,179,173],
[170,165,114,143,0,109,155,139,141],
[193,196,165,170,232,0,211,187,182],
[176,146,158,151,186,130,0,165,147],
[177,171,145,162,202,154,176,0,154],
[189,185,173,168,200,159,194,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,174,182,171,170,171,179,182],
[157,0,170,159,168,174,167,172,163],
[167,171,0,159,167,164,171,181,166],
[159,182,182,0,170,173,169,168,160],
[170,173,174,171,0,168,174,183,176],
[171,167,177,168,173,0,164,173,167],
[170,174,170,172,167,177,0,172,179],
[162,169,160,173,158,168,169,0,165],
[159,178,175,181,165,174,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,177,160,146,166,185,159,161],
[179,0,164,168,156,175,174,157,153],
[164,177,0,158,154,166,162,143,141],
[181,173,183,0,163,179,183,149,180],
[195,185,187,178,0,178,185,171,167],
[175,166,175,162,163,0,168,149,170],
[156,167,179,158,156,173,0,147,174],
[182,184,198,192,170,192,194,0,175],
[180,188,200,161,174,171,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,179,162,165,165,155,165,159],
[156,0,164,149,165,159,162,168,153],
[162,177,0,156,157,160,156,165,153],
[179,192,185,0,174,175,173,182,167],
[176,176,184,167,0,170,168,186,169],
[176,182,181,166,171,0,186,177,176],
[186,179,185,168,173,155,0,173,171],
[176,173,176,159,155,164,168,0,164],
[182,188,188,174,172,165,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,127,124,190,168,178,149,131],
[186,0,145,132,185,135,201,159,133],
[214,196,0,166,188,167,211,152,157],
[217,209,175,0,186,158,249,180,153],
[151,156,153,155,0,179,222,179,153],
[173,206,174,183,162,0,229,196,177],
[163,140,130,92,119,112,0,105,118],
[192,182,189,161,162,145,236,0,119],
[210,208,184,188,188,164,223,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,144,150,161,175,172,133,141],
[194,0,156,163,172,167,165,137,159],
[197,185,0,175,198,198,197,182,160],
[191,178,166,0,194,174,177,169,160],
[180,169,143,147,0,166,159,140,151],
[166,174,143,167,175,0,165,146,154],
[169,176,144,164,182,176,0,145,148],
[208,204,159,172,201,195,196,0,182],
[200,182,181,181,190,187,193,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,185,175,147,157,150,154],
[175,0,162,179,146,174,162,156,186],
[181,179,0,185,168,170,182,161,183],
[156,162,156,0,151,139,164,145,160],
[166,195,173,190,0,178,173,168,200],
[194,167,171,202,163,0,182,174,184],
[184,179,159,177,168,159,0,169,199],
[191,185,180,196,173,167,172,0,178],
[187,155,158,181,141,157,142,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,176,158,171,163,164,159],
[172,0,183,180,165,183,172,156,170],
[179,158,0,175,162,167,160,156,149],
[165,161,166,0,156,173,149,154,157],
[183,176,179,185,0,178,170,169,169],
[170,158,174,168,163,0,159,155,151],
[178,169,181,192,171,182,0,169,178],
[177,185,185,187,172,186,172,0,158],
[182,171,192,184,172,190,163,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,156,156,121,153,184,181,160],
[144,0,151,151,122,135,179,174,140],
[185,190,0,150,195,179,194,181,183],
[185,190,191,0,152,176,186,194,167],
[220,219,146,189,0,157,194,175,195],
[188,206,162,165,184,0,197,190,188],
[157,162,147,155,147,144,0,165,128],
[160,167,160,147,166,151,176,0,173],
[181,201,158,174,146,153,213,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,184,182,176,168,170,175,180],
[176,0,179,180,170,172,187,174,181],
[157,162,0,180,166,170,167,168,167],
[159,161,161,0,170,156,167,168,172],
[165,171,175,171,0,167,169,167,178],
[173,169,171,185,174,0,178,187,188],
[171,154,174,174,172,163,0,178,163],
[166,167,173,173,174,154,163,0,169],
[161,160,174,169,163,153,178,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,183,165,171,140,161,201,163],
[163,0,167,148,153,161,159,179,171],
[158,174,0,164,172,175,158,197,166],
[176,193,177,0,161,181,189,195,182],
[170,188,169,180,0,174,151,174,181],
[201,180,166,160,167,0,175,180,189],
[180,182,183,152,190,166,0,186,168],
[140,162,144,146,167,161,155,0,164],
[178,170,175,159,160,152,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,174,163,167,173,177,168],
[181,0,185,180,174,190,174,169,171],
[164,156,0,169,171,180,153,162,162],
[167,161,172,0,167,173,170,167,155],
[178,167,170,174,0,173,165,176,160],
[174,151,161,168,168,0,160,177,158],
[168,167,188,171,176,181,0,175,175],
[164,172,179,174,165,164,166,0,162],
[173,170,179,186,181,183,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,137,153,154,175,165,149,164],
[187,0,159,179,159,187,181,171,164],
[204,182,0,199,197,195,197,162,199],
[188,162,142,0,164,183,183,165,185],
[187,182,144,177,0,170,188,152,178],
[166,154,146,158,171,0,186,148,163],
[176,160,144,158,153,155,0,149,176],
[192,170,179,176,189,193,192,0,184],
[177,177,142,156,163,178,165,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,181,183,177,169,170,171],
[164,0,170,175,179,176,169,162,167],
[171,171,0,167,177,182,172,159,172],
[160,166,174,0,166,172,168,162,153],
[158,162,164,175,0,173,168,169,164],
[164,165,159,169,168,0,168,169,165],
[172,172,169,173,173,173,0,174,166],
[171,179,182,179,172,172,167,0,177],
[170,174,169,188,177,176,175,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,175,183,152,157,158,167,171],
[180,0,197,183,178,176,172,180,162],
[166,144,0,177,155,160,146,154,163],
[158,158,164,0,140,144,148,152,163],
[189,163,186,201,0,165,166,185,172],
[184,165,181,197,176,0,161,184,179],
[183,169,195,193,175,180,0,175,169],
[174,161,187,189,156,157,166,0,167],
[170,179,178,178,169,162,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,197,189,178,185,184,167,197],
[143,0,174,189,146,194,181,135,147],
[144,167,0,188,150,163,199,164,178],
[152,152,153,0,129,168,153,138,138],
[163,195,191,212,0,204,207,189,177],
[156,147,178,173,137,0,166,169,170],
[157,160,142,188,134,175,0,172,149],
[174,206,177,203,152,172,169,0,169],
[144,194,163,203,164,171,192,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,193,153,146,173,177,166,169],
[190,0,191,183,168,176,195,196,195],
[148,150,0,156,151,140,160,151,166],
[188,158,185,0,175,184,191,188,191],
[195,173,190,166,0,192,179,177,174],
[168,165,201,157,149,0,174,171,169],
[164,146,181,150,162,167,0,167,154],
[175,145,190,153,164,170,174,0,168],
[172,146,175,150,167,172,187,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,207,174,202,181,192,188,129],
[171,0,182,160,191,158,149,177,128],
[134,159,0,144,165,128,154,132,150],
[167,181,197,0,192,154,194,189,180],
[139,150,176,149,0,151,133,166,131],
[160,183,213,187,190,0,155,164,149],
[149,192,187,147,208,186,0,210,143],
[153,164,209,152,175,177,131,0,132],
[212,213,191,161,210,192,198,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,189,163,167,165,161,169,186],
[164,0,185,178,186,154,178,208,180],
[152,156,0,161,157,158,141,168,152],
[178,163,180,0,166,159,175,181,170],
[174,155,184,175,0,158,170,192,176],
[176,187,183,182,183,0,176,211,167],
[180,163,200,166,171,165,0,189,162],
[172,133,173,160,149,130,152,0,127],
[155,161,189,171,165,174,179,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,182,171,168,171,165,172,154],
[168,0,161,172,165,160,174,162,161],
[159,180,0,175,169,165,172,159,161],
[170,169,166,0,169,170,169,172,160],
[173,176,172,172,0,155,162,160,156],
[170,181,176,171,186,0,177,183,175],
[176,167,169,172,179,164,0,159,163],
[169,179,182,169,181,158,182,0,163],
[187,180,180,181,185,166,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,171,182,196,177,159,177,198],
[151,0,164,171,176,163,143,164,177],
[170,177,0,194,197,167,163,159,176],
[159,170,147,0,181,161,147,168,175],
[145,165,144,160,0,166,129,146,187],
[164,178,174,180,175,0,181,163,196],
[182,198,178,194,212,160,0,180,223],
[164,177,182,173,195,178,161,0,188],
[143,164,165,166,154,145,118,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,141,146,169,155,172,166,175],
[161,0,183,150,186,176,188,168,192],
[200,158,0,146,155,146,172,146,189],
[195,191,195,0,186,167,200,167,203],
[172,155,186,155,0,156,176,170,188],
[186,165,195,174,185,0,212,182,204],
[169,153,169,141,165,129,0,136,177],
[175,173,195,174,171,159,205,0,201],
[166,149,152,138,153,137,164,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,165,174,169,176,175,168],
[166,0,173,177,171,173,173,185,179],
[170,168,0,167,165,176,159,175,173],
[176,164,174,0,182,181,168,182,187],
[167,170,176,159,0,170,166,168,168],
[172,168,165,160,171,0,167,174,171],
[165,168,182,173,175,174,0,179,189],
[166,156,166,159,173,167,162,0,176],
[173,162,168,154,173,170,152,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,146,149,159,160,155,171,159],
[168,0,158,164,151,177,151,178,160],
[195,183,0,189,180,177,161,178,199],
[192,177,152,0,172,176,170,174,182],
[182,190,161,169,0,176,167,177,184],
[181,164,164,165,165,0,166,179,173],
[186,190,180,171,174,175,0,190,162],
[170,163,163,167,164,162,151,0,158],
[182,181,142,159,157,168,179,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,168,153,157,163,165,160,155],
[191,0,168,177,191,189,188,183,186],
[173,173,0,171,155,170,190,169,165],
[188,164,170,0,163,167,164,171,154],
[184,150,186,178,0,165,165,158,142],
[178,152,171,174,176,0,183,176,160],
[176,153,151,177,176,158,0,158,145],
[181,158,172,170,183,165,183,0,135],
[186,155,176,187,199,181,196,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,152,190,168,173,184,179],
[167,0,196,176,194,180,198,206,190],
[176,145,0,173,169,149,163,199,158],
[189,165,168,0,178,152,170,190,170],
[151,147,172,163,0,138,157,181,172],
[173,161,192,189,203,0,172,184,201],
[168,143,178,171,184,169,0,185,173],
[157,135,142,151,160,157,156,0,157],
[162,151,183,171,169,140,168,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,164,160,166,168,161,158,154],
[186,0,188,178,177,181,176,184,168],
[177,153,0,168,158,170,166,161,161],
[181,163,173,0,177,182,176,165,171],
[175,164,183,164,0,181,179,166,171],
[173,160,171,159,160,0,169,159,160],
[180,165,175,165,162,172,0,158,160],
[183,157,180,176,175,182,183,0,172],
[187,173,180,170,170,181,181,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,179,177,177,167,172,177,168],
[183,0,181,186,176,175,170,185,183],
[162,160,0,165,162,165,161,178,175],
[164,155,176,0,162,164,167,175,175],
[164,165,179,179,0,179,172,178,176],
[174,166,176,177,162,0,163,182,180],
[169,171,180,174,169,178,0,188,179],
[164,156,163,166,163,159,153,0,163],
[173,158,166,166,165,161,162,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,177,175,154,170,172,168,169],
[158,0,158,157,138,158,147,147,159],
[164,183,0,169,171,179,169,160,183],
[166,184,172,0,174,177,165,163,172],
[187,203,170,167,0,164,177,163,178],
[171,183,162,164,177,0,172,171,181],
[169,194,172,176,164,169,0,165,182],
[173,194,181,178,178,170,176,0,176],
[172,182,158,169,163,160,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,160,150,150,170,170,165],
[173,0,153,159,165,154,168,174,169],
[181,188,0,167,178,171,178,177,164],
[181,182,174,0,163,162,175,190,176],
[191,176,163,178,0,159,175,178,177],
[191,187,170,179,182,0,186,184,170],
[171,173,163,166,166,155,0,177,165],
[171,167,164,151,163,157,164,0,154],
[176,172,177,165,164,171,176,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,155,171,208,181,171,204,197],
[158,0,167,145,189,176,168,160,178],
[186,174,0,134,184,155,182,227,180],
[170,196,207,0,216,149,185,212,193],
[133,152,157,125,0,129,154,178,163],
[160,165,186,192,212,0,183,205,217],
[170,173,159,156,187,158,0,202,237],
[137,181,114,129,163,136,139,0,177],
[144,163,161,148,178,124,104,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,180,228,192,187,175,162],
[178,0,174,186,222,177,168,176,172],
[163,167,0,149,230,179,162,160,176],
[161,155,192,0,205,217,185,189,209],
[113,119,111,136,0,131,127,115,135],
[149,164,162,124,210,0,172,132,177],
[154,173,179,156,214,169,0,156,183],
[166,165,181,152,226,209,185,0,185],
[179,169,165,132,206,164,158,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,178,162,169,163,175,169,175],
[182,0,165,183,160,171,154,194,165],
[163,176,0,162,163,164,165,170,172],
[179,158,179,0,182,178,171,192,161],
[172,181,178,159,0,178,179,159,168],
[178,170,177,163,163,0,161,175,173],
[166,187,176,170,162,180,0,173,166],
[172,147,171,149,182,166,168,0,159],
[166,176,169,180,173,168,175,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,173,151,177,175,176,191],
[167,0,160,152,149,164,153,175,163],
[165,181,0,174,162,181,167,205,169],
[168,189,167,0,170,196,173,175,172],
[190,192,179,171,0,181,170,192,165],
[164,177,160,145,160,0,160,171,166],
[166,188,174,168,171,181,0,166,175],
[165,166,136,166,149,170,175,0,172],
[150,178,172,169,176,175,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,180,186,160,153,128,152,142],
[191,0,166,238,199,175,179,188,170],
[161,175,0,180,166,134,134,150,143],
[155,103,161,0,126,159,104,130,117],
[181,142,175,215,0,148,163,172,161],
[188,166,207,182,193,0,149,167,176],
[213,162,207,237,178,192,0,159,165],
[189,153,191,211,169,174,182,0,153],
[199,171,198,224,180,165,176,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,179,173,178,171,184,171,212],
[179,0,173,172,160,187,158,163,177],
[162,168,0,163,151,175,173,140,187],
[168,169,178,0,178,163,167,161,179],
[163,181,190,163,0,198,165,168,194],
[170,154,166,178,143,0,159,171,167],
[157,183,168,174,176,182,0,155,178],
[170,178,201,180,173,170,186,0,181],
[129,164,154,162,147,174,163,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,170,172,166,172,177,161],
[177,0,177,176,173,171,176,172,169],
[173,164,0,187,161,164,184,178,185],
[171,165,154,0,170,168,171,167,173],
[169,168,180,171,0,156,186,173,168],
[175,170,177,173,185,0,185,168,169],
[169,165,157,170,155,156,0,174,176],
[164,169,163,174,168,173,167,0,158],
[180,172,156,168,173,172,165,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,175,178,178,190,184,186],
[178,0,172,168,167,165,176,178,165],
[163,169,0,148,165,169,158,160,163],
[166,173,193,0,174,180,173,180,194],
[163,174,176,167,0,184,169,182,172],
[163,176,172,161,157,0,163,181,173],
[151,165,183,168,172,178,0,178,183],
[157,163,181,161,159,160,163,0,158],
[155,176,178,147,169,168,158,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,178,162,191,194,167,161],
[167,0,164,191,169,195,180,191,171],
[164,177,0,179,171,188,187,158,171],
[163,150,162,0,149,176,174,167,156],
[179,172,170,192,0,174,168,174,176],
[150,146,153,165,167,0,155,157,147],
[147,161,154,167,173,186,0,177,168],
[174,150,183,174,167,184,164,0,153],
[180,170,170,185,165,194,173,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,165,166,186,166,178,182,192],
[155,0,157,168,170,161,152,163,167],
[176,184,0,162,180,168,174,182,189],
[175,173,179,0,173,174,159,184,180],
[155,171,161,168,0,170,152,174,176],
[175,180,173,167,171,0,158,181,179],
[163,189,167,182,189,183,0,182,198],
[159,178,159,157,167,160,159,0,170],
[149,174,152,161,165,162,143,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,186,172,164,188,189,170,179],
[173,0,182,160,179,182,180,191,175],
[155,159,0,169,170,164,172,154,183],
[169,181,172,0,186,192,194,185,203],
[177,162,171,155,0,177,165,165,168],
[153,159,177,149,164,0,177,183,171],
[152,161,169,147,176,164,0,163,185],
[171,150,187,156,176,158,178,0,171],
[162,166,158,138,173,170,156,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,160,122,109,180,117,132,117],
[230,0,163,206,150,217,168,186,178],
[181,178,0,172,133,216,172,161,204],
[219,135,169,0,135,197,160,202,169],
[232,191,208,206,0,221,221,177,163],
[161,124,125,144,120,0,205,140,113],
[224,173,169,181,120,136,0,193,125],
[209,155,180,139,164,201,148,0,148],
[224,163,137,172,178,228,216,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,186,175,184,163,170,184,158],
[156,0,182,170,184,182,170,180,173],
[155,159,0,159,183,154,139,159,158],
[166,171,182,0,185,165,154,166,174],
[157,157,158,156,0,173,153,149,162],
[178,159,187,176,168,0,178,176,160],
[171,171,202,187,188,163,0,175,181],
[157,161,182,175,192,165,166,0,167],
[183,168,183,167,179,181,160,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,168,177,170,179,168,166],
[172,0,170,172,173,167,179,175,161],
[173,171,0,174,173,171,182,181,159],
[173,169,167,0,178,174,184,178,164],
[164,168,168,163,0,166,177,168,173],
[171,174,170,167,175,0,180,177,179],
[162,162,159,157,164,161,0,150,167],
[173,166,160,163,173,164,191,0,176],
[175,180,182,177,168,162,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,203,200,203,147,170,166,197],
[136,0,172,149,128,117,132,117,126],
[138,169,0,161,135,141,140,119,135],
[141,192,180,0,180,153,143,135,167],
[138,213,206,161,0,159,133,147,172],
[194,224,200,188,182,0,214,212,156],
[171,209,201,198,208,127,0,173,191],
[175,224,222,206,194,129,168,0,186],
[144,215,206,174,169,185,150,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,156,163,150,179,160,182,186],
[133,0,153,108,119,177,145,125,161],
[185,188,0,134,149,212,114,125,203],
[178,233,207,0,178,216,149,183,223],
[191,222,192,163,0,234,166,137,244],
[162,164,129,125,107,0,130,130,159],
[181,196,227,192,175,211,0,166,191],
[159,216,216,158,204,211,175,0,214],
[155,180,138,118,97,182,150,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,180,188,196,178,172,169,191],
[155,0,180,168,183,166,168,161,176],
[161,161,0,152,174,161,162,148,165],
[153,173,189,0,186,175,158,164,167],
[145,158,167,155,0,153,154,161,158],
[163,175,180,166,188,0,150,174,176],
[169,173,179,183,187,191,0,179,181],
[172,180,193,177,180,167,162,0,181],
[150,165,176,174,183,165,160,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,207,220,177,186,213,187,181],
[200,0,247,159,170,200,194,168,206],
[134,94,0,113,133,103,127,151,151],
[121,182,228,0,89,154,135,107,204],
[164,171,208,252,0,160,174,200,225],
[155,141,238,187,181,0,145,172,216],
[128,147,214,206,167,196,0,210,224],
[154,173,190,234,141,169,131,0,230],
[160,135,190,137,116,125,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,176,188,159,166,160,181],
[169,0,171,173,189,160,173,172,181],
[170,170,0,181,176,164,166,174,191],
[165,168,160,0,173,159,153,156,179],
[153,152,165,168,0,155,163,163,170],
[182,181,177,182,186,0,170,187,193],
[175,168,175,188,178,171,0,161,178],
[181,169,167,185,178,154,180,0,185],
[160,160,150,162,171,148,163,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,182,177,164,205,185,178,185],
[165,0,183,166,164,189,145,159,174],
[159,158,0,146,159,182,161,153,163],
[164,175,195,0,189,198,180,170,181],
[177,177,182,152,0,192,157,152,174],
[136,152,159,143,149,0,154,146,158],
[156,196,180,161,184,187,0,177,161],
[163,182,188,171,189,195,164,0,193],
[156,167,178,160,167,183,180,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,158,162,173,158,151,174],
[166,0,155,169,158,171,148,161,165],
[175,186,0,177,175,177,171,162,180],
[183,172,164,0,163,173,149,151,156],
[179,183,166,178,0,175,173,158,171],
[168,170,164,168,166,0,162,147,171],
[183,193,170,192,168,179,0,181,173],
[190,180,179,190,183,194,160,0,177],
[167,176,161,185,170,170,168,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,199,187,175,178,203,168,195],
[183,0,185,179,173,172,202,165,189],
[142,156,0,164,160,162,159,154,173],
[154,162,177,0,150,153,198,154,179],
[166,168,181,191,0,173,179,178,184],
[163,169,179,188,168,0,177,174,195],
[138,139,182,143,162,164,0,154,166],
[173,176,187,187,163,167,187,0,195],
[146,152,168,162,157,146,175,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,172,155,172,176,164,153],
[169,0,159,174,165,181,178,168,149],
[176,182,0,171,172,178,195,169,173],
[169,167,170,0,160,178,169,169,166],
[186,176,169,181,0,177,177,165,160],
[169,160,163,163,164,0,165,170,153],
[165,163,146,172,164,176,0,161,151],
[177,173,172,172,176,171,180,0,164],
[188,192,168,175,181,188,190,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,167,164,154,161,170,161,142],
[192,0,211,174,186,162,187,178,136],
[174,130,0,138,138,149,152,149,112],
[177,167,203,0,155,172,179,158,138],
[187,155,203,186,0,174,186,169,186],
[180,179,192,169,167,0,214,178,126],
[171,154,189,162,155,127,0,163,125],
[180,163,192,183,172,163,178,0,148],
[199,205,229,203,155,215,216,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,166,170,198,170,161,196,168],
[147,0,152,189,131,154,200,181,142],
[175,189,0,203,170,176,215,178,191],
[171,152,138,0,132,135,183,175,146],
[143,210,171,209,0,194,236,222,178],
[171,187,165,206,147,0,180,198,150],
[180,141,126,158,105,161,0,160,139],
[145,160,163,166,119,143,181,0,150],
[173,199,150,195,163,191,202,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,145,154,170,174,144,170,160],
[174,0,180,167,175,183,154,156,174],
[196,161,0,189,179,198,174,169,172],
[187,174,152,0,173,178,146,172,166],
[171,166,162,168,0,186,150,164,168],
[167,158,143,163,155,0,155,160,149],
[197,187,167,195,191,186,0,190,177],
[171,185,172,169,177,181,151,0,171],
[181,167,169,175,173,192,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,205,173,183,198,191,191,197],
[171,0,203,187,178,188,196,164,205],
[136,138,0,152,163,155,169,166,164],
[168,154,189,0,164,169,188,176,191],
[158,163,178,177,0,191,187,179,178],
[143,153,186,172,150,0,188,176,166],
[150,145,172,153,154,153,0,159,165],
[150,177,175,165,162,165,182,0,160],
[144,136,177,150,163,175,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,145,158,148,153,170,155,158],
[160,0,144,175,157,148,170,155,152],
[196,197,0,187,169,174,190,187,172],
[183,166,154,0,153,165,175,154,147],
[193,184,172,188,0,172,195,180,158],
[188,193,167,176,169,0,169,171,165],
[171,171,151,166,146,172,0,154,162],
[186,186,154,187,161,170,187,0,173],
[183,189,169,194,183,176,179,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,161,144,227,169,123,140,147],
[175,0,180,157,228,197,221,177,196],
[180,161,0,112,200,203,161,138,166],
[197,184,229,0,231,212,169,230,228],
[114,113,141,110,0,179,82,136,180],
[172,144,138,129,162,0,115,173,169],
[218,120,180,172,259,226,0,215,241],
[201,164,203,111,205,168,126,0,169],
[194,145,175,113,161,172,100,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,180,177,162,168,168,174,172],
[183,0,164,181,181,185,172,175,184],
[161,177,0,176,162,179,162,180,171],
[164,160,165,0,162,168,169,165,177],
[179,160,179,179,0,176,180,184,179],
[173,156,162,173,165,0,166,172,167],
[173,169,179,172,161,175,0,184,189],
[167,166,161,176,157,169,157,0,169],
[169,157,170,164,162,174,152,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,182,178,216,162,179,188,180],
[181,0,208,167,233,195,207,201,198],
[159,133,0,155,204,174,179,174,158],
[163,174,186,0,188,175,190,200,164],
[125,108,137,153,0,123,152,124,124],
[179,146,167,166,218,0,161,138,155],
[162,134,162,151,189,180,0,176,139],
[153,140,167,141,217,203,165,0,139],
[161,143,183,177,217,186,202,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,180,176,170,175,162,177,177],
[170,0,176,177,179,171,163,175,170],
[161,165,0,186,161,175,177,179,187],
[165,164,155,0,143,161,160,173,167],
[171,162,180,198,0,174,162,179,184],
[166,170,166,180,167,0,167,175,174],
[179,178,164,181,179,174,0,186,184],
[164,166,162,168,162,166,155,0,175],
[164,171,154,174,157,167,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,180,183,168,170,172,176,176],
[170,0,182,166,176,161,160,164,175],
[161,159,0,173,162,179,164,156,167],
[158,175,168,0,178,160,147,163,180],
[173,165,179,163,0,180,163,169,181],
[171,180,162,181,161,0,166,177,159],
[169,181,177,194,178,175,0,168,183],
[165,177,185,178,172,164,173,0,159],
[165,166,174,161,160,182,158,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,162,171,167,163,183,150,157],
[195,0,138,146,155,157,165,154,162],
[179,203,0,186,153,183,179,163,167],
[170,195,155,0,168,177,181,172,174],
[174,186,188,173,0,183,207,169,199],
[178,184,158,164,158,0,166,155,159],
[158,176,162,160,134,175,0,166,154],
[191,187,178,169,172,186,175,0,184],
[184,179,174,167,142,182,187,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,156,160,166,146,174,190,177],
[187,0,183,172,187,178,166,180,179],
[185,158,0,160,166,161,155,182,177],
[181,169,181,0,161,180,190,181,181],
[175,154,175,180,0,177,183,178,168],
[195,163,180,161,164,0,168,166,172],
[167,175,186,151,158,173,0,197,172],
[151,161,159,160,163,175,144,0,167],
[164,162,164,160,173,169,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,174,165,172,179,176,171],
[164,0,159,170,170,166,169,145,161],
[174,182,0,184,171,166,174,154,194],
[167,171,157,0,159,167,172,162,186],
[176,171,170,182,0,169,179,187,194],
[169,175,175,174,172,0,185,166,185],
[162,172,167,169,162,156,0,174,167],
[165,196,187,179,154,175,167,0,182],
[170,180,147,155,147,156,174,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,184,171,184,194,175,181,180],
[177,0,180,153,172,185,172,164,166],
[157,161,0,166,167,180,181,186,166],
[170,188,175,0,185,195,174,179,179],
[157,169,174,156,0,190,156,167,176],
[147,156,161,146,151,0,148,167,162],
[166,169,160,167,185,193,0,180,172],
[160,177,155,162,174,174,161,0,167],
[161,175,175,162,165,179,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,148,130,169,152,169,143,173],
[175,0,151,174,170,164,157,141,165],
[193,190,0,185,155,186,164,171,168],
[211,167,156,0,177,172,181,155,204],
[172,171,186,164,0,161,187,157,174],
[189,177,155,169,180,0,168,171,170],
[172,184,177,160,154,173,0,136,151],
[198,200,170,186,184,170,205,0,196],
[168,176,173,137,167,171,190,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,179,179,178,176,160,188],
[167,0,157,179,165,160,160,168,159],
[176,184,0,169,165,157,164,151,174],
[162,162,172,0,161,158,179,156,158],
[162,176,176,180,0,196,188,148,177],
[163,181,184,183,145,0,177,174,169],
[165,181,177,162,153,164,0,147,162],
[181,173,190,185,193,167,194,0,172],
[153,182,167,183,164,172,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,170,200,174,175,187,155,186],
[193,0,163,181,155,179,183,155,183],
[171,178,0,189,163,171,168,156,174],
[141,160,152,0,138,155,154,145,145],
[167,186,178,203,0,183,191,177,185],
[166,162,170,186,158,0,206,163,189],
[154,158,173,187,150,135,0,138,161],
[186,186,185,196,164,178,203,0,201],
[155,158,167,196,156,152,180,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,172,162,171,153,159,178],
[179,0,182,189,165,182,164,171,188],
[167,159,0,166,149,161,164,157,169],
[169,152,175,0,159,161,162,151,178],
[179,176,192,182,0,178,192,168,182],
[170,159,180,180,163,0,156,166,195],
[188,177,177,179,149,185,0,171,169],
[182,170,184,190,173,175,170,0,177],
[163,153,172,163,159,146,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,123,172,137,171,178,168,190],
[150,0,143,175,124,153,158,168,181],
[218,198,0,204,182,163,213,174,206],
[169,166,137,0,143,147,192,135,178],
[204,217,159,198,0,158,190,179,202],
[170,188,178,194,183,0,175,194,219],
[163,183,128,149,151,166,0,171,189],
[173,173,167,206,162,147,170,0,207],
[151,160,135,163,139,122,152,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,184,161,201,187,176,182,170],
[150,0,162,185,193,169,159,186,177],
[157,179,0,175,189,158,165,184,153],
[180,156,166,0,192,176,151,194,150],
[140,148,152,149,0,138,143,158,139],
[154,172,183,165,203,0,160,169,152],
[165,182,176,190,198,181,0,194,162],
[159,155,157,147,183,172,147,0,155],
[171,164,188,191,202,189,179,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,176,175,168,192,136,160,141],
[188,0,189,185,165,202,154,170,145],
[165,152,0,182,174,204,119,168,148],
[166,156,159,0,179,191,126,154,156],
[173,176,167,162,0,179,106,136,150],
[149,139,137,150,162,0,107,138,109],
[205,187,222,215,235,234,0,163,202],
[181,171,173,187,205,203,178,0,169],
[200,196,193,185,191,232,139,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,180,182,165,183,185,170],
[172,0,177,184,172,178,181,180,164],
[171,164,0,175,177,180,181,179,171],
[161,157,166,0,165,153,170,161,157],
[159,169,164,176,0,161,173,180,160],
[176,163,161,188,180,0,181,180,162],
[158,160,160,171,168,160,0,174,170],
[156,161,162,180,161,161,167,0,163],
[171,177,170,184,181,179,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,189,150,171,142,152,153,175],
[185,0,180,133,142,148,147,148,142],
[152,161,0,141,145,144,132,161,153],
[191,208,200,0,187,180,170,160,176],
[170,199,196,154,0,146,170,175,166],
[199,193,197,161,195,0,173,176,181],
[189,194,209,171,171,168,0,170,171],
[188,193,180,181,166,165,171,0,170],
[166,199,188,165,175,160,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,186,170,172,167,175,184,174],
[155,0,151,149,181,151,148,165,163],
[155,190,0,170,175,170,167,176,171],
[171,192,171,0,195,165,168,163,185],
[169,160,166,146,0,153,174,153,148],
[174,190,171,176,188,0,180,176,164],
[166,193,174,173,167,161,0,188,154],
[157,176,165,178,188,165,153,0,194],
[167,178,170,156,193,177,187,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,169,187,201,179,182,169,175],
[144,0,166,135,163,166,172,131,150],
[172,175,0,167,188,169,186,147,164],
[154,206,174,0,192,176,177,171,179],
[140,178,153,149,0,156,173,142,153],
[162,175,172,165,185,0,184,162,175],
[159,169,155,164,168,157,0,153,156],
[172,210,194,170,199,179,188,0,178],
[166,191,177,162,188,166,185,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,174,158,169,174,163,175,151],
[185,0,167,159,174,182,174,157,159],
[167,174,0,169,177,201,175,174,175],
[183,182,172,0,171,189,169,146,169],
[172,167,164,170,0,188,166,163,187],
[167,159,140,152,153,0,160,140,146],
[178,167,166,172,175,181,0,143,160],
[166,184,167,195,178,201,198,0,176],
[190,182,166,172,154,195,181,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,133,156,159,158,130,156,188],
[172,0,154,185,174,200,162,157,171],
[208,187,0,209,175,169,199,177,201],
[185,156,132,0,151,182,169,164,180],
[182,167,166,190,0,187,170,169,201],
[183,141,172,159,154,0,138,174,175],
[211,179,142,172,171,203,0,180,204],
[185,184,164,177,172,167,161,0,179],
[153,170,140,161,140,166,137,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,176,178,155,194,170,189,186],
[155,0,158,150,151,170,152,171,153],
[165,183,0,177,178,196,174,191,164],
[163,191,164,0,174,192,170,189,165],
[186,190,163,167,0,188,156,179,174],
[147,171,145,149,153,0,140,148,150],
[171,189,167,171,185,201,0,195,174],
[152,170,150,152,162,193,146,0,161],
[155,188,177,176,167,191,167,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,172,185,169,176,173,171],
[166,0,162,175,192,178,170,167,172],
[179,179,0,178,168,190,168,182,173],
[169,166,163,0,174,180,181,165,166],
[156,149,173,167,0,170,174,161,172],
[172,163,151,161,171,0,169,149,166],
[165,171,173,160,167,172,0,162,173],
[168,174,159,176,180,192,179,0,167],
[170,169,168,175,169,175,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,175,173,164,204,209,176,170],
[155,0,184,162,177,193,183,168,138],
[166,157,0,175,188,194,163,180,150],
[168,179,166,0,190,190,197,177,167],
[177,164,153,151,0,188,185,155,162],
[137,148,147,151,153,0,166,157,147],
[132,158,178,144,156,175,0,169,156],
[165,173,161,164,186,184,172,0,174],
[171,203,191,174,179,194,185,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,150,138,131,175,137,135,157],
[159,0,148,131,139,150,154,148,156],
[191,193,0,163,169,189,181,149,186],
[203,210,178,0,169,186,169,180,196],
[210,202,172,172,0,167,178,181,179],
[166,191,152,155,174,0,155,147,155],
[204,187,160,172,163,186,0,154,144],
[206,193,192,161,160,194,187,0,199],
[184,185,155,145,162,186,197,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,162,185,175,146,189,184],
[163,0,159,181,175,175,184,201,165],
[183,182,0,150,181,169,149,180,176],
[179,160,191,0,189,166,178,174,184],
[156,166,160,152,0,147,151,172,186],
[166,166,172,175,194,0,182,195,185],
[195,157,192,163,190,159,0,181,171],
[152,140,161,167,169,146,160,0,174],
[157,176,165,157,155,156,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,154,172,148,162,151,159,177],
[159,0,165,147,134,158,150,138,158],
[187,176,0,185,170,157,151,171,179],
[169,194,156,0,156,165,164,176,175],
[193,207,171,185,0,164,181,187,192],
[179,183,184,176,177,0,164,161,193],
[190,191,190,177,160,177,0,169,181],
[182,203,170,165,154,180,172,0,170],
[164,183,162,166,149,148,160,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,189,170,185,174,193,167],
[166,0,173,174,166,172,170,196,186],
[170,168,0,184,177,179,187,208,188],
[152,167,157,0,167,148,158,187,157],
[171,175,164,174,0,158,163,190,169],
[156,169,162,193,183,0,175,203,175],
[167,171,154,183,178,166,0,193,177],
[148,145,133,154,151,138,148,0,158],
[174,155,153,184,172,166,164,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,199,178,198,175,201,158,243],
[116,0,137,128,122,130,201,156,163],
[142,204,0,116,111,144,222,140,154],
[163,213,225,0,223,189,218,197,227],
[143,219,230,118,0,190,205,192,185],
[166,211,197,152,151,0,200,170,198],
[140,140,119,123,136,141,0,123,177],
[183,185,201,144,149,171,218,0,211],
[98,178,187,114,156,143,164,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,160,169,169,167,172,163,165],
[179,0,175,175,173,176,180,169,183],
[181,166,0,171,168,164,170,171,170],
[172,166,170,0,164,173,177,164,167],
[172,168,173,177,0,171,165,160,169],
[174,165,177,168,170,0,167,174,165],
[169,161,171,164,176,174,0,171,181],
[178,172,170,177,181,167,170,0,176],
[176,158,171,174,172,176,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,198,184,177,166,192,187,172],
[158,0,192,162,165,148,181,179,156],
[143,149,0,185,164,148,172,138,149],
[157,179,156,0,166,157,195,174,179],
[164,176,177,175,0,179,179,162,173],
[175,193,193,184,162,0,204,180,195],
[149,160,169,146,162,137,0,166,159],
[154,162,203,167,179,161,175,0,175],
[169,185,192,162,168,146,182,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,159,194,177,184,164,173,168],
[164,0,179,175,186,166,163,165,172],
[182,162,0,180,182,173,149,152,166],
[147,166,161,0,172,155,159,150,153],
[164,155,159,169,0,165,144,143,152],
[157,175,168,186,176,0,155,150,159],
[177,178,192,182,197,186,0,155,170],
[168,176,189,191,198,191,186,0,180],
[173,169,175,188,189,182,171,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,154,150,159,183,205,118,158],
[122,0,130,130,153,151,139,126,131],
[187,211,0,176,182,166,192,182,164],
[191,211,165,0,173,214,190,152,160],
[182,188,159,168,0,151,169,125,157],
[158,190,175,127,190,0,154,140,190],
[136,202,149,151,172,187,0,114,128],
[223,215,159,189,216,201,227,0,175],
[183,210,177,181,184,151,213,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,161,189,207,195,180,174],
[171,0,175,174,171,203,176,160,178],
[165,166,0,171,178,192,199,173,178],
[180,167,170,0,169,200,191,169,176],
[152,170,163,172,0,188,184,165,169],
[134,138,149,141,153,0,161,154,151],
[146,165,142,150,157,180,0,150,163],
[161,181,168,172,176,187,191,0,168],
[167,163,163,165,172,190,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,153,168,152,158,177,168,161],
[169,0,148,155,159,137,161,162,145],
[188,193,0,180,164,171,174,175,157],
[173,186,161,0,171,150,166,175,159],
[189,182,177,170,0,171,161,180,171],
[183,204,170,191,170,0,194,193,197],
[164,180,167,175,180,147,0,169,150],
[173,179,166,166,161,148,172,0,168],
[180,196,184,182,170,144,191,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,171,158,164,158,175,142,164],
[160,0,161,174,166,164,170,148,171],
[170,180,0,158,168,170,175,149,161],
[183,167,183,0,167,171,180,159,150],
[177,175,173,174,0,187,196,156,174],
[183,177,171,170,154,0,162,162,153],
[166,171,166,161,145,179,0,152,163],
[199,193,192,182,185,179,189,0,165],
[177,170,180,191,167,188,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,158,145,169,167,161,166],
[170,0,173,156,163,182,178,173,175],
[180,168,0,168,176,171,171,169,181],
[183,185,173,0,161,182,183,188,178],
[196,178,165,180,0,190,178,184,173],
[172,159,170,159,151,0,166,170,162],
[174,163,170,158,163,175,0,165,162],
[180,168,172,153,157,171,176,0,167],
[175,166,160,163,168,179,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,174,166,167,161,154,166,168],
[175,0,163,161,155,160,164,154,165],
[167,178,0,166,176,162,154,155,163],
[175,180,175,0,174,176,178,164,175],
[174,186,165,167,0,178,166,170,165],
[180,181,179,165,163,0,173,176,188],
[187,177,187,163,175,168,0,175,186],
[175,187,186,177,171,165,166,0,179],
[173,176,178,166,176,153,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,190,167,168,181,152,165,170],
[184,0,185,180,188,179,166,185,190],
[151,156,0,165,164,149,154,168,159],
[174,161,176,0,154,167,165,170,157],
[173,153,177,187,0,173,164,175,190],
[160,162,192,174,168,0,173,172,172],
[189,175,187,176,177,168,0,173,169],
[176,156,173,171,166,169,168,0,178],
[171,151,182,184,151,169,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,187,181,190,178,175,204,161],
[159,0,173,175,189,159,156,170,154],
[154,168,0,141,165,139,154,156,142],
[160,166,200,0,174,155,176,181,144],
[151,152,176,167,0,167,173,170,170],
[163,182,202,186,174,0,165,171,180],
[166,185,187,165,168,176,0,185,156],
[137,171,185,160,171,170,156,0,157],
[180,187,199,197,171,161,185,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,141,144,167,150,147,144,164],
[192,0,169,176,182,171,172,164,182],
[200,172,0,172,185,181,168,176,168],
[197,165,169,0,180,183,158,161,170],
[174,159,156,161,0,176,157,159,177],
[191,170,160,158,165,0,164,160,162],
[194,169,173,183,184,177,0,169,175],
[197,177,165,180,182,181,172,0,182],
[177,159,173,171,164,179,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,178,191,170,168,184,160],
[172,0,187,190,192,164,189,185,183],
[166,154,0,178,182,167,166,170,171],
[163,151,163,0,168,169,166,182,161],
[150,149,159,173,0,146,169,178,154],
[171,177,174,172,195,0,178,182,166],
[173,152,175,175,172,163,0,182,161],
[157,156,171,159,163,159,159,0,149],
[181,158,170,180,187,175,180,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,156,161,165,149,158,148],
[170,0,165,171,164,165,166,182,167],
[175,176,0,161,163,179,158,170,158],
[185,170,180,0,158,193,176,175,164],
[180,177,178,183,0,188,174,179,158],
[176,176,162,148,153,0,152,171,170],
[192,175,183,165,167,189,0,188,172],
[183,159,171,166,162,170,153,0,157],
[193,174,183,177,183,171,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,176,169,183,175,172,170],
[171,0,173,174,175,175,163,160,177],
[165,168,0,173,159,182,145,162,168],
[165,167,168,0,165,168,162,171,182],
[172,166,182,176,0,173,162,171,168],
[158,166,159,173,168,0,145,159,159],
[166,178,196,179,179,196,0,188,174],
[169,181,179,170,170,182,153,0,168],
[171,164,173,159,173,182,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,148,150,168,169,147,177,144],
[154,0,151,166,170,155,144,148,142],
[193,190,0,168,176,182,169,189,175],
[191,175,173,0,175,179,154,178,157],
[173,171,165,166,0,177,151,167,153],
[172,186,159,162,164,0,162,161,156],
[194,197,172,187,190,179,0,188,165],
[164,193,152,163,174,180,153,0,162],
[197,199,166,184,188,185,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,164,152,172,147,160,167],
[173,0,183,175,165,179,160,171,164],
[162,158,0,157,153,161,168,171,142],
[177,166,184,0,165,170,169,188,172],
[189,176,188,176,0,182,175,180,169],
[169,162,180,171,159,0,147,168,173],
[194,181,173,172,166,194,0,176,178],
[181,170,170,153,161,173,165,0,152],
[174,177,199,169,172,168,163,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,186,212,178,224,170,154,142],
[176,0,217,194,225,224,171,191,125],
[155,124,0,149,189,169,129,139,92],
[129,147,192,0,197,177,136,174,169],
[163,116,152,144,0,165,134,150,154],
[117,117,172,164,176,0,129,126,129],
[171,170,212,205,207,212,0,190,182],
[187,150,202,167,191,215,151,0,133],
[199,216,249,172,187,212,159,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,148,153,186,161,211,162,187],
[160,0,165,162,133,148,186,178,166],
[193,176,0,157,216,187,207,185,189],
[188,179,184,0,153,156,193,176,192],
[155,208,125,188,0,187,224,172,172],
[180,193,154,185,154,0,212,177,193],
[130,155,134,148,117,129,0,161,145],
[179,163,156,165,169,164,180,0,183],
[154,175,152,149,169,148,196,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,148,151,164,170,174,161,154],
[185,0,178,155,168,192,180,168,175],
[193,163,0,173,181,211,179,183,173],
[190,186,168,0,175,196,181,180,166],
[177,173,160,166,0,186,188,172,167],
[171,149,130,145,155,0,170,159,151],
[167,161,162,160,153,171,0,148,143],
[180,173,158,161,169,182,193,0,183],
[187,166,168,175,174,190,198,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,167,174,126,211,224,155,139],
[221,0,154,151,196,215,210,198,163],
[174,187,0,153,157,165,196,172,167],
[167,190,188,0,137,200,181,165,181],
[215,145,184,204,0,197,208,221,145],
[130,126,176,141,144,0,186,161,153],
[117,131,145,160,133,155,0,183,146],
[186,143,169,176,120,180,158,0,159],
[202,178,174,160,196,188,195,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,174,177,159,154,167,165,177],
[175,0,167,172,152,172,155,169,175],
[167,174,0,169,156,156,170,171,169],
[164,169,172,0,139,152,153,163,164],
[182,189,185,202,0,168,165,183,184],
[187,169,185,189,173,0,177,194,179],
[174,186,171,188,176,164,0,188,180],
[176,172,170,178,158,147,153,0,159],
[164,166,172,177,157,162,161,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,165,180,177,173,178,186,166],
[159,0,170,161,193,160,172,165,171],
[176,171,0,172,191,166,182,188,174],
[161,180,169,0,184,160,178,185,175],
[164,148,150,157,0,156,158,162,162],
[168,181,175,181,185,0,166,173,170],
[163,169,159,163,183,175,0,186,166],
[155,176,153,156,179,168,155,0,158],
[175,170,167,166,179,171,175,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,156,151,161,150,153,167],
[166,0,171,164,158,169,158,145,166],
[166,170,0,158,140,165,156,146,168],
[185,177,183,0,172,155,164,161,162],
[190,183,201,169,0,167,169,176,193],
[180,172,176,186,174,0,173,170,178],
[191,183,185,177,172,168,0,186,156],
[188,196,195,180,165,171,155,0,170],
[174,175,173,179,148,163,185,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,154,149,171,153,161,142,156],
[184,0,177,174,190,160,190,165,172],
[187,164,0,160,199,194,151,175,164],
[192,167,181,0,207,180,152,157,185],
[170,151,142,134,0,137,140,135,161],
[188,181,147,161,204,0,165,170,175],
[180,151,190,189,201,176,0,146,168],
[199,176,166,184,206,171,195,0,176],
[185,169,177,156,180,166,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,171,160,170,174,160,164],
[170,0,174,167,169,172,185,172,187],
[171,167,0,167,171,168,176,156,180],
[170,174,174,0,169,180,169,163,185],
[181,172,170,172,0,172,180,169,181],
[171,169,173,161,169,0,186,166,173],
[167,156,165,172,161,155,0,170,176],
[181,169,185,178,172,175,171,0,185],
[177,154,161,156,160,168,165,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,151,197,142,171,182,150,177],
[157,0,154,180,138,141,162,151,150],
[190,187,0,187,183,186,199,148,176],
[144,161,154,0,159,163,168,132,153],
[199,203,158,182,0,179,189,174,185],
[170,200,155,178,162,0,195,163,170],
[159,179,142,173,152,146,0,147,148],
[191,190,193,209,167,178,194,0,180],
[164,191,165,188,156,171,193,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,204,168,191,125,171,150,178],
[176,0,176,178,208,176,169,143,136],
[137,165,0,133,169,126,145,122,117],
[173,163,208,0,212,151,149,183,178],
[150,133,172,129,0,134,151,119,141],
[216,165,215,190,207,0,166,168,189],
[170,172,196,192,190,175,0,156,168],
[191,198,219,158,222,173,185,0,191],
[163,205,224,163,200,152,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,188,174,161,182,167,182],
[165,0,175,175,164,166,164,177,169],
[164,166,0,175,152,158,171,168,165],
[153,166,166,0,140,165,165,174,163],
[167,177,189,201,0,175,186,189,189],
[180,175,183,176,166,0,159,173,174],
[159,177,170,176,155,182,0,181,179],
[174,164,173,167,152,168,160,0,156],
[159,172,176,178,152,167,162,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,164,169,157,165,166,175,163],
[176,0,167,174,158,187,170,184,177],
[177,174,0,174,165,173,164,179,168],
[172,167,167,0,168,168,165,181,171],
[184,183,176,173,0,183,186,169,178],
[176,154,168,173,158,0,174,177,162],
[175,171,177,176,155,167,0,173,172],
[166,157,162,160,172,164,168,0,168],
[178,164,173,170,163,179,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,184,157,157,180,162,156,163],
[162,0,171,169,157,185,180,164,175],
[157,170,0,152,147,183,163,153,154],
[184,172,189,0,180,186,174,158,196],
[184,184,194,161,0,199,190,185,183],
[161,156,158,155,142,0,155,155,165],
[179,161,178,167,151,186,0,167,167],
[185,177,188,183,156,186,174,0,182],
[178,166,187,145,158,176,174,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,175,176,184,184,184,179,167],
[143,0,161,158,155,161,167,164,155],
[166,180,0,182,168,189,201,190,167],
[165,183,159,0,163,184,185,180,159],
[157,186,173,178,0,179,182,182,161],
[157,180,152,157,162,0,175,164,164],
[157,174,140,156,159,166,0,155,168],
[162,177,151,161,159,177,186,0,173],
[174,186,174,182,180,177,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,175,138,183,131,168,145],
[171,0,170,170,145,210,186,181,151],
[184,171,0,156,174,203,159,177,160],
[166,171,185,0,158,214,169,197,177],
[203,196,167,183,0,200,175,185,182],
[158,131,138,127,141,0,150,142,113],
[210,155,182,172,166,191,0,177,197],
[173,160,164,144,156,199,164,0,171],
[196,190,181,164,159,228,144,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,163,159,151,154,165,167],
[174,0,150,151,164,171,169,158,170],
[185,191,0,167,180,165,158,167,174],
[178,190,174,0,161,168,169,172,165],
[182,177,161,180,0,175,174,169,187],
[190,170,176,173,166,0,167,178,179],
[187,172,183,172,167,174,0,165,178],
[176,183,174,169,172,163,176,0,183],
[174,171,167,176,154,162,163,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,173,199,166,165,191,164,158],
[190,0,184,193,175,166,186,156,180],
[168,157,0,178,161,163,182,155,174],
[142,148,163,0,156,152,156,154,148],
[175,166,180,185,0,170,191,174,163],
[176,175,178,189,171,0,187,161,175],
[150,155,159,185,150,154,0,158,160],
[177,185,186,187,167,180,183,0,175],
[183,161,167,193,178,166,181,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,195,173,161,176,183,171,200],
[160,0,177,169,167,162,161,173,172],
[146,164,0,146,146,156,152,160,177],
[168,172,195,0,154,176,150,189,187],
[180,174,195,187,0,181,158,180,190],
[165,179,185,165,160,0,154,154,182],
[158,180,189,191,183,187,0,180,184],
[170,168,181,152,161,187,161,0,176],
[141,169,164,154,151,159,157,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,179,173,152,177,178,173,170],
[181,0,189,180,163,157,196,168,182],
[162,152,0,172,155,155,156,157,178],
[168,161,169,0,159,157,174,163,166],
[189,178,186,182,0,167,189,178,185],
[164,184,186,184,174,0,186,180,179],
[163,145,185,167,152,155,0,169,176],
[168,173,184,178,163,161,172,0,174],
[171,159,163,175,156,162,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,163,168,177,164,173,173,176],
[172,0,185,172,184,170,164,178,173],
[178,156,0,181,172,166,159,160,170],
[173,169,160,0,175,157,174,167,169],
[164,157,169,166,0,167,171,166,164],
[177,171,175,184,174,0,157,174,159],
[168,177,182,167,170,184,0,172,169],
[168,163,181,174,175,167,169,0,160],
[165,168,171,172,177,182,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,136,146,140,149,135,141,164],
[201,0,176,131,171,167,148,144,169],
[205,165,0,161,159,168,153,146,146],
[195,210,180,0,177,178,206,163,183],
[201,170,182,164,0,176,173,151,171],
[192,174,173,163,165,0,170,154,172],
[206,193,188,135,168,171,0,173,171],
[200,197,195,178,190,187,168,0,202],
[177,172,195,158,170,169,170,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,162,202,161,151,174,190,191],
[149,0,133,165,148,155,167,164,169],
[179,208,0,180,181,164,187,170,193],
[139,176,161,0,145,146,164,149,178],
[180,193,160,196,0,172,189,173,185],
[190,186,177,195,169,0,171,173,180],
[167,174,154,177,152,170,0,170,173],
[151,177,171,192,168,168,171,0,184],
[150,172,148,163,156,161,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,162,136,166,135,155,131,170],
[187,0,140,178,185,131,196,147,180],
[179,201,0,155,188,159,162,170,216],
[205,163,186,0,208,141,186,150,165],
[175,156,153,133,0,112,164,161,181],
[206,210,182,200,229,0,153,172,220],
[186,145,179,155,177,188,0,179,197],
[210,194,171,191,180,169,162,0,179],
[171,161,125,176,160,121,144,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,128,134,141,128,117,123,104],
[201,0,191,204,165,190,198,201,172],
[213,150,0,159,171,125,135,154,130],
[207,137,182,0,184,224,175,184,163],
[200,176,170,157,0,203,159,167,188],
[213,151,216,117,138,0,146,198,145],
[224,143,206,166,182,195,0,176,184],
[218,140,187,157,174,143,165,0,176],
[237,169,211,178,153,196,157,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,152,170,167,163,198,191,190],
[161,0,141,191,170,156,173,169,172],
[189,200,0,167,200,201,223,192,187],
[171,150,174,0,159,174,194,187,156],
[174,171,141,182,0,178,182,181,174],
[178,185,140,167,163,0,184,188,184],
[143,168,118,147,159,157,0,194,150],
[150,172,149,154,160,153,147,0,147],
[151,169,154,185,167,157,191,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,124,118,120,186,127,134,173],
[183,0,168,181,134,218,195,160,136],
[217,173,0,152,173,209,216,167,198],
[223,160,189,0,143,223,196,181,140],
[221,207,168,198,0,228,187,146,163],
[155,123,132,118,113,0,130,121,133],
[214,146,125,145,154,211,0,149,167],
[207,181,174,160,195,220,192,0,204],
[168,205,143,201,178,208,174,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,161,169,160,155,182,160],
[182,0,180,167,173,177,178,179,175],
[170,161,0,165,161,160,168,163,173],
[180,174,176,0,179,168,159,167,174],
[172,168,180,162,0,163,167,156,165],
[181,164,181,173,178,0,171,165,178],
[186,163,173,182,174,170,0,176,166],
[159,162,178,174,185,176,165,0,170],
[181,166,168,167,176,163,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,167,168,177,175,180,175],
[167,0,197,183,195,178,180,196,179],
[178,144,0,171,169,186,171,189,175],
[174,158,170,0,171,171,163,174,168],
[173,146,172,170,0,155,159,183,165],
[164,163,155,170,186,0,148,193,173],
[166,161,170,178,182,193,0,190,174],
[161,145,152,167,158,148,151,0,159],
[166,162,166,173,176,168,167,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,164,176,160,174,186,165,176],
[191,0,164,178,168,181,163,171,201],
[177,177,0,180,171,174,183,167,184],
[165,163,161,0,141,164,184,175,169],
[181,173,170,200,0,174,191,167,174],
[167,160,167,177,167,0,177,170,165],
[155,178,158,157,150,164,0,158,169],
[176,170,174,166,174,171,183,0,181],
[165,140,157,172,167,176,172,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,166,184,175,174,174,165,184],
[188,0,156,165,137,157,169,155,146],
[175,185,0,171,172,160,168,158,174],
[157,176,170,0,170,150,177,161,165],
[166,204,169,171,0,173,183,164,166],
[167,184,181,191,168,0,182,169,191],
[167,172,173,164,158,159,0,157,148],
[176,186,183,180,177,172,184,0,162],
[157,195,167,176,175,150,193,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,173,177,178,191,168,179,177],
[153,0,149,158,175,171,163,178,180],
[168,192,0,178,177,185,172,171,183],
[164,183,163,0,181,173,179,176,191],
[163,166,164,160,0,174,170,170,170],
[150,170,156,168,167,0,167,170,181],
[173,178,169,162,171,174,0,168,175],
[162,163,170,165,171,171,173,0,177],
[164,161,158,150,171,160,166,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,83,140,51,133,225,170,134],
[323,0,177,184,101,125,305,176,213],
[258,164,0,192,221,192,254,210,229],
[201,157,149,0,149,170,283,209,222],
[290,240,120,192,0,202,254,224,239],
[208,216,149,171,139,0,240,202,217],
[116,36,87,58,87,101,0,198,115],
[171,165,131,132,117,139,143,0,179],
[207,128,112,119,102,124,226,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,154,158,211,178,190,167,185],
[162,0,157,169,184,163,169,155,176],
[187,184,0,181,194,191,190,156,191],
[183,172,160,0,213,186,193,171,181],
[130,157,147,128,0,176,171,141,143],
[163,178,150,155,165,0,155,145,158],
[151,172,151,148,170,186,0,171,162],
[174,186,185,170,200,196,170,0,189],
[156,165,150,160,198,183,179,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,163,177,181,178,187,181,188],
[159,0,164,157,176,174,178,169,167],
[178,177,0,168,182,176,183,176,188],
[164,184,173,0,185,171,182,171,174],
[160,165,159,156,0,168,170,174,158],
[163,167,165,170,173,0,174,172,179],
[154,163,158,159,171,167,0,171,173],
[160,172,165,170,167,169,170,0,167],
[153,174,153,167,183,162,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,156,173,164,168,156,184,162],
[160,0,177,159,175,169,172,164,191],
[185,164,0,161,169,175,159,147,173],
[168,182,180,0,175,189,176,176,181],
[177,166,172,166,0,170,168,160,186],
[173,172,166,152,171,0,156,147,162],
[185,169,182,165,173,185,0,161,186],
[157,177,194,165,181,194,180,0,181],
[179,150,168,160,155,179,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,166,177,169,172,183,173],
[161,0,165,175,178,157,184,167,177],
[164,176,0,173,177,157,179,172,166],
[175,166,168,0,182,159,177,166,161],
[164,163,164,159,0,160,172,164,167],
[172,184,184,182,181,0,170,175,167],
[169,157,162,164,169,171,0,178,152],
[158,174,169,175,177,166,163,0,170],
[168,164,175,180,174,174,189,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,196,200,176,186,185,169,205],
[140,0,185,184,158,145,172,150,203],
[145,156,0,164,138,150,179,177,185],
[141,157,177,0,155,132,155,149,180],
[165,183,203,186,0,149,171,162,194],
[155,196,191,209,192,0,182,168,199],
[156,169,162,186,170,159,0,172,188],
[172,191,164,192,179,173,169,0,196],
[136,138,156,161,147,142,153,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,175,156,164,148,174,169],
[168,0,175,187,173,187,173,175,192],
[168,166,0,180,164,155,153,178,173],
[166,154,161,0,162,168,168,167,177],
[185,168,177,179,0,179,160,175,185],
[177,154,186,173,162,0,157,180,186],
[193,168,188,173,181,184,0,183,189],
[167,166,163,174,166,161,158,0,166],
[172,149,168,164,156,155,152,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,141,157,179,160,164,148],
[162,0,181,146,134,158,176,146,164],
[159,160,0,153,185,167,201,162,164],
[200,195,188,0,182,196,214,165,223],
[184,207,156,159,0,196,195,178,170],
[162,183,174,145,145,0,196,144,184],
[181,165,140,127,146,145,0,157,152],
[177,195,179,176,163,197,184,0,182],
[193,177,177,118,171,157,189,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,185,177,175,181,174,163],
[166,0,165,172,167,170,170,179,157],
[164,176,0,181,180,177,181,194,160],
[156,169,160,0,179,165,173,179,157],
[164,174,161,162,0,147,166,187,162],
[166,171,164,176,194,0,178,180,172],
[160,171,160,168,175,163,0,184,175],
[167,162,147,162,154,161,157,0,159],
[178,184,181,184,179,169,166,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,149,159,161,165,158,195,169],
[180,0,177,157,163,157,148,191,164],
[192,164,0,173,177,165,163,199,172],
[182,184,168,0,164,181,179,188,177],
[180,178,164,177,0,172,160,203,191],
[176,184,176,160,169,0,178,190,194],
[183,193,178,162,181,163,0,203,172],
[146,150,142,153,138,151,138,0,163],
[172,177,169,164,150,147,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,172,172,177,149,172,166,153],
[162,0,174,179,152,132,143,178,150],
[169,167,0,163,163,154,153,163,151],
[169,162,178,0,175,167,154,167,150],
[164,189,178,166,0,158,163,178,151],
[192,209,187,174,183,0,166,206,196],
[169,198,188,187,178,175,0,186,193],
[175,163,178,174,163,135,155,0,177],
[188,191,190,191,190,145,148,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,210,180,155,170,162,170,171],
[178,0,166,165,173,177,162,168,183],
[131,175,0,178,146,157,180,183,166],
[161,176,163,0,144,177,159,179,190],
[186,168,195,197,0,179,174,199,170],
[171,164,184,164,162,0,183,183,178],
[179,179,161,182,167,158,0,190,187],
[171,173,158,162,142,158,151,0,185],
[170,158,175,151,171,163,154,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,162,172,170,171,169,169,209],
[159,0,155,175,185,186,155,194,180],
[179,186,0,188,206,181,184,181,170],
[169,166,153,0,176,192,129,187,175],
[171,156,135,165,0,145,137,180,142],
[170,155,160,149,196,0,154,203,191],
[172,186,157,212,204,187,0,219,167],
[172,147,160,154,161,138,122,0,160],
[132,161,171,166,199,150,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,158,156,144,150,155,165,158],
[183,0,164,180,172,168,168,182,170],
[183,177,0,170,163,173,163,168,173],
[185,161,171,0,153,158,156,180,169],
[197,169,178,188,0,163,177,181,182],
[191,173,168,183,178,0,165,173,182],
[186,173,178,185,164,176,0,178,182],
[176,159,173,161,160,168,163,0,158],
[183,171,168,172,159,159,159,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,173,156,178,144,160,145,159],
[202,0,202,183,184,165,176,188,180],
[168,139,0,149,148,156,154,137,158],
[185,158,192,0,186,181,174,156,177],
[163,157,193,155,0,164,171,152,175],
[197,176,185,160,177,0,175,155,160],
[181,165,187,167,170,166,0,166,172],
[196,153,204,185,189,186,175,0,185],
[182,161,183,164,166,181,169,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,151,181,178,163,175,166,157],
[165,0,159,188,174,169,166,173,157],
[190,182,0,174,174,173,163,176,161],
[160,153,167,0,161,161,167,171,153],
[163,167,167,180,0,153,169,181,158],
[178,172,168,180,188,0,173,183,171],
[166,175,178,174,172,168,0,171,168],
[175,168,165,170,160,158,170,0,157],
[184,184,180,188,183,170,173,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,187,165,173,151,152,171,164],
[178,0,174,156,182,161,173,139,172],
[154,167,0,166,160,152,150,134,162],
[176,185,175,0,170,150,156,148,184],
[168,159,181,171,0,161,158,153,157],
[190,180,189,191,180,0,163,164,186],
[189,168,191,185,183,178,0,169,181],
[170,202,207,193,188,177,172,0,176],
[177,169,179,157,184,155,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,166,160,165,176,161,187],
[159,0,161,182,171,144,151,143,174],
[170,180,0,172,167,168,164,167,180],
[175,159,169,0,181,165,167,150,179],
[181,170,174,160,0,184,165,151,188],
[176,197,173,176,157,0,178,175,186],
[165,190,177,174,176,163,0,164,189],
[180,198,174,191,190,166,177,0,195],
[154,167,161,162,153,155,152,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,169,148,150,160,177,166,156],
[196,0,191,159,178,176,192,186,191],
[172,150,0,149,154,154,184,152,177],
[193,182,192,0,176,167,194,182,201],
[191,163,187,165,0,158,196,177,188],
[181,165,187,174,183,0,173,168,194],
[164,149,157,147,145,168,0,170,184],
[175,155,189,159,164,173,171,0,179],
[185,150,164,140,153,147,157,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,184,170,169,187,173,186,180],
[175,0,184,185,156,190,175,187,191],
[157,157,0,162,162,187,173,178,165],
[171,156,179,0,171,179,170,172,165],
[172,185,179,170,0,197,175,181,179],
[154,151,154,162,144,0,155,151,163],
[168,166,168,171,166,186,0,188,170],
[155,154,163,169,160,190,153,0,166],
[161,150,176,176,162,178,171,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,197,186,170,181,158,230,206],
[186,0,172,176,174,214,130,194,261],
[144,169,0,232,97,168,153,183,188],
[155,165,109,0,169,188,185,144,184],
[171,167,244,172,0,189,150,210,237],
[160,127,173,153,152,0,127,140,161],
[183,211,188,156,191,214,0,203,209],
[111,147,158,197,131,201,138,0,158],
[135,80,153,157,104,180,132,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,142,160,166,206,145,150,169],
[173,0,129,147,135,169,159,165,161],
[199,212,0,180,160,199,188,218,193],
[181,194,161,0,179,169,183,207,156],
[175,206,181,162,0,186,189,181,151],
[135,172,142,172,155,0,176,163,182],
[196,182,153,158,152,165,0,195,125],
[191,176,123,134,160,178,146,0,122],
[172,180,148,185,190,159,216,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,200,191,170,177,184,179,190],
[182,0,212,192,174,188,189,169,186],
[141,129,0,167,155,178,163,154,153],
[150,149,174,0,168,165,162,187,192],
[171,167,186,173,0,185,179,170,181],
[164,153,163,176,156,0,161,154,159],
[157,152,178,179,162,180,0,177,180],
[162,172,187,154,171,187,164,0,201],
[151,155,188,149,160,182,161,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,164,165,160,161,176,167,189],
[156,0,159,158,150,147,167,156,179],
[177,182,0,170,168,158,164,164,186],
[176,183,171,0,175,160,176,162,188],
[181,191,173,166,0,172,170,174,191],
[180,194,183,181,169,0,183,190,206],
[165,174,177,165,171,158,0,164,183],
[174,185,177,179,167,151,177,0,193],
[152,162,155,153,150,135,158,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,184,180,164,181,204,181,189],
[179,0,181,160,161,154,177,166,176],
[157,160,0,183,175,177,167,176,188],
[161,181,158,0,163,147,223,159,184],
[177,180,166,178,0,147,227,159,178],
[160,187,164,194,194,0,197,187,179],
[137,164,174,118,114,144,0,156,162],
[160,175,165,182,182,154,185,0,164],
[152,165,153,157,163,162,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,184,165,172,155,178,163,173],
[162,0,173,182,173,151,160,162,177],
[157,168,0,170,189,154,169,167,172],
[176,159,171,0,201,149,190,176,176],
[169,168,152,140,0,173,162,165,175],
[186,190,187,192,168,0,179,186,180],
[163,181,172,151,179,162,0,169,160],
[178,179,174,165,176,155,172,0,170],
[168,164,169,165,166,161,181,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,193,180,181,154,161,177],
[185,0,172,173,170,180,161,174,171],
[179,169,0,157,161,168,176,164,170],
[148,168,184,0,157,160,159,181,169],
[161,171,180,184,0,158,164,167,155],
[160,161,173,181,183,0,167,154,181],
[187,180,165,182,177,174,0,166,182],
[180,167,177,160,174,187,175,0,165],
[164,170,171,172,186,160,159,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,154,166,148,168,176,174,162],
[161,0,165,160,163,179,159,179,167],
[187,176,0,159,151,160,178,192,169],
[175,181,182,0,168,175,194,183,167],
[193,178,190,173,0,189,180,196,164],
[173,162,181,166,152,0,176,180,177],
[165,182,163,147,161,165,0,176,171],
[167,162,149,158,145,161,165,0,146],
[179,174,172,174,177,164,170,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,131,167,157,167,168,166,175],
[168,0,156,174,164,172,169,178,170],
[210,185,0,191,170,181,200,197,195],
[174,167,150,0,164,166,147,169,165],
[184,177,171,177,0,197,173,162,175],
[174,169,160,175,144,0,161,163,164],
[173,172,141,194,168,180,0,168,175],
[175,163,144,172,179,178,173,0,165],
[166,171,146,176,166,177,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,156,159,170,119,162,162,152],
[198,0,155,175,176,126,187,139,140],
[185,186,0,140,196,159,178,176,163],
[182,166,201,0,188,188,187,170,153],
[171,165,145,153,0,160,170,192,140],
[222,215,182,153,181,0,171,166,145],
[179,154,163,154,171,170,0,156,136],
[179,202,165,171,149,175,185,0,181],
[189,201,178,188,201,196,205,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,170,162,181,163,156,167,169],
[195,0,174,165,178,160,171,161,163],
[171,167,0,166,172,168,149,167,161],
[179,176,175,0,181,173,168,173,162],
[160,163,169,160,0,162,156,160,162],
[178,181,173,168,179,0,162,158,174],
[185,170,192,173,185,179,0,167,174],
[174,180,174,168,181,183,174,0,176],
[172,178,180,179,179,167,167,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,159,178,159,153,160,161],
[170,0,195,169,183,185,172,179,160],
[176,146,0,155,183,174,171,162,160],
[182,172,186,0,199,173,178,160,171],
[163,158,158,142,0,174,146,154,149],
[182,156,167,168,167,0,174,172,148],
[188,169,170,163,195,167,0,170,173],
[181,162,179,181,187,169,171,0,171],
[180,181,181,170,192,193,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,142,152,164,137,142,161],
[175,0,184,162,151,158,169,156,150],
[175,157,0,153,159,163,166,159,149],
[199,179,188,0,173,176,159,174,176],
[189,190,182,168,0,210,175,178,175],
[177,183,178,165,131,0,154,163,124],
[204,172,175,182,166,187,0,192,161],
[199,185,182,167,163,178,149,0,177],
[180,191,192,165,166,217,180,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,172,167,170,173,175,180],
[179,0,191,177,174,179,162,187,188],
[171,150,0,158,151,159,141,160,162],
[169,164,183,0,159,163,159,173,176],
[174,167,190,182,0,181,156,170,183],
[171,162,182,178,160,0,168,179,157],
[168,179,200,182,185,173,0,184,167],
[166,154,181,168,171,162,157,0,159],
[161,153,179,165,158,184,174,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,158,163,173,178,174,163,161],
[177,0,175,173,171,178,182,180,166],
[183,166,0,176,164,174,189,179,180],
[178,168,165,0,190,185,174,174,177],
[168,170,177,151,0,177,188,162,171],
[163,163,167,156,164,0,179,162,159],
[167,159,152,167,153,162,0,167,171],
[178,161,162,167,179,179,174,0,168],
[180,175,161,164,170,182,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,193,171,174,170,162,186,180],
[178,0,193,176,177,149,156,181,201],
[148,148,0,173,129,141,152,158,165],
[170,165,168,0,184,166,171,166,175],
[167,164,212,157,0,158,173,173,191],
[171,192,200,175,183,0,169,190,187],
[179,185,189,170,168,172,0,174,182],
[155,160,183,175,168,151,167,0,175],
[161,140,176,166,150,154,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,152,171,178,152,166,182,165],
[183,0,177,184,173,185,185,172,168],
[189,164,0,190,205,201,164,182,168],
[170,157,151,0,176,162,184,172,180],
[163,168,136,165,0,182,181,135,179],
[189,156,140,179,159,0,178,178,181],
[175,156,177,157,160,163,0,159,194],
[159,169,159,169,206,163,182,0,180],
[176,173,173,161,162,160,147,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,133,167,174,165,165,153,196],
[181,0,162,170,187,177,174,149,168],
[208,179,0,167,182,180,171,182,190],
[174,171,174,0,172,196,190,165,210],
[167,154,159,169,0,159,175,172,179],
[176,164,161,145,182,0,154,140,175],
[176,167,170,151,166,187,0,155,175],
[188,192,159,176,169,201,186,0,170],
[145,173,151,131,162,166,166,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,153,169,168,152,164,150,183],
[184,0,179,188,190,177,165,179,192],
[188,162,0,153,180,171,173,178,189],
[172,153,188,0,180,166,177,160,197],
[173,151,161,161,0,170,162,173,168],
[189,164,170,175,171,0,161,179,180],
[177,176,168,164,179,180,0,166,177],
[191,162,163,181,168,162,175,0,177],
[158,149,152,144,173,161,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,164,167,171,163,160,175],
[172,0,164,185,174,187,159,156,174],
[179,177,0,164,171,185,180,181,184],
[177,156,177,0,169,186,164,154,180],
[174,167,170,172,0,169,154,162,164],
[170,154,156,155,172,0,160,163,185],
[178,182,161,177,187,181,0,168,167],
[181,185,160,187,179,178,173,0,170],
[166,167,157,161,177,156,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,178,174,174,181,171,173],
[165,0,162,160,157,174,186,163,166],
[171,179,0,171,173,196,170,172,172],
[163,181,170,0,169,173,180,177,172],
[167,184,168,172,0,175,175,169,175],
[167,167,145,168,166,0,166,168,178],
[160,155,171,161,166,175,0,149,162],
[170,178,169,164,172,173,192,0,167],
[168,175,169,169,166,163,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,157,163,159,169,153,154],
[173,0,166,164,166,159,158,161,157],
[181,175,0,161,165,164,160,155,163],
[184,177,180,0,175,171,166,163,169],
[178,175,176,166,0,165,177,175,164],
[182,182,177,170,176,0,165,169,164],
[172,183,181,175,164,176,0,156,171],
[188,180,186,178,166,172,185,0,173],
[187,184,178,172,177,177,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,185,173,177,175,178,172],
[163,0,166,172,162,159,157,165,165],
[179,175,0,183,169,181,185,176,171],
[156,169,158,0,159,167,170,159,164],
[168,179,172,182,0,178,169,167,166],
[164,182,160,174,163,0,167,161,158],
[166,184,156,171,172,174,0,177,167],
[163,176,165,182,174,180,164,0,166],
[169,176,170,177,175,183,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,178,239,179,236,172,196,170],
[158,0,167,176,158,218,147,136,148],
[163,174,0,207,198,224,173,182,178],
[102,165,134,0,137,186,119,175,112],
[162,183,143,204,0,233,149,157,185],
[105,123,117,155,108,0,98,106,122],
[169,194,168,222,192,243,0,168,191],
[145,205,159,166,184,235,173,0,157],
[171,193,163,229,156,219,150,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,157,175,160,193,205,195,181],
[157,0,168,179,184,197,176,153,174],
[184,173,0,169,169,200,209,209,163],
[166,162,172,0,178,199,184,179,190],
[181,157,172,163,0,180,197,181,184],
[148,144,141,142,161,0,183,172,162],
[136,165,132,157,144,158,0,135,138],
[146,188,132,162,160,169,206,0,163],
[160,167,178,151,157,179,203,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,161,159,164,152,168,149,154],
[188,0,172,176,181,173,186,182,170],
[180,169,0,176,172,173,173,168,159],
[182,165,165,0,167,162,170,160,165],
[177,160,169,174,0,163,171,159,155],
[189,168,168,179,178,0,185,158,189],
[173,155,168,171,170,156,0,161,169],
[192,159,173,181,182,183,180,0,165],
[187,171,182,176,186,152,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,188,182,172,157,175,164],
[168,0,169,169,171,170,157,170,152],
[168,172,0,168,176,186,158,180,166],
[153,172,173,0,172,179,172,173,168],
[159,170,165,169,0,158,146,168,153],
[169,171,155,162,183,0,153,150,158],
[184,184,183,169,195,188,0,191,172],
[166,171,161,168,173,191,150,0,176],
[177,189,175,173,188,183,169,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,196,166,175,180,183,189,184],
[148,0,187,156,155,165,171,192,164],
[145,154,0,144,147,176,175,181,172],
[175,185,197,0,178,174,169,201,189],
[166,186,194,163,0,183,185,200,201],
[161,176,165,167,158,0,172,178,175],
[158,170,166,172,156,169,0,166,176],
[152,149,160,140,141,163,175,0,181],
[157,177,169,152,140,166,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,177,185,158,204,164,163,193],
[188,0,153,185,176,174,177,186,200],
[164,188,0,183,181,188,153,170,198],
[156,156,158,0,159,183,146,158,183],
[183,165,160,182,0,181,169,162,183],
[137,167,153,158,160,0,155,151,176],
[177,164,188,195,172,186,0,165,207],
[178,155,171,183,179,190,176,0,192],
[148,141,143,158,158,165,134,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,210,222,173,217,214,174,162],
[119,0,176,183,165,180,187,157,171],
[131,165,0,192,184,175,193,151,162],
[119,158,149,0,148,102,166,108,148],
[168,176,157,193,0,165,188,154,173],
[124,161,166,239,176,0,184,130,184],
[127,154,148,175,153,157,0,114,153],
[167,184,190,233,187,211,227,0,185],
[179,170,179,193,168,157,188,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,176,186,169,162,192,168,178],
[156,0,157,156,141,165,174,157,152],
[165,184,0,159,171,183,196,186,185],
[155,185,182,0,171,181,185,168,164],
[172,200,170,170,0,174,189,180,175],
[179,176,158,160,167,0,179,187,165],
[149,167,145,156,152,162,0,151,154],
[173,184,155,173,161,154,190,0,162],
[163,189,156,177,166,176,187,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,187,218,175,191,215,162,203],
[197,0,171,189,159,190,203,139,197],
[154,170,0,204,160,191,196,158,176],
[123,152,137,0,147,136,175,154,132],
[166,182,181,194,0,172,221,169,160],
[150,151,150,205,169,0,181,152,184],
[126,138,145,166,120,160,0,92,133],
[179,202,183,187,172,189,249,0,170],
[138,144,165,209,181,157,208,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,65,109,101,171,93,179,140],
[256,0,160,162,188,251,128,244,219],
[276,181,0,187,175,208,183,159,110],
[232,179,154,0,148,177,115,213,189],
[240,153,166,193,0,185,118,239,181],
[170,90,133,164,156,0,110,247,114],
[248,213,158,226,223,231,0,255,140],
[162,97,182,128,102,94,86,0,106],
[201,122,231,152,160,227,201,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,144,195,218,173,204,193,125],
[166,0,155,145,211,129,201,163,172],
[197,186,0,150,223,199,163,185,201],
[146,196,191,0,254,191,237,177,209],
[123,130,118,87,0,134,100,137,124],
[168,212,142,150,207,0,194,137,208],
[137,140,178,104,241,147,0,156,181],
[148,178,156,164,204,204,185,0,150],
[216,169,140,132,217,133,160,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,185,169,168,161,197,170],
[159,0,180,153,153,175,156,183,168],
[174,161,0,168,180,183,157,179,161],
[156,188,173,0,178,187,166,185,160],
[172,188,161,163,0,172,153,180,157],
[173,166,158,154,169,0,151,184,176],
[180,185,184,175,188,190,0,196,168],
[144,158,162,156,161,157,145,0,137],
[171,173,180,181,184,165,173,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,179,162,189,204,186,165,192],
[190,0,196,182,218,209,203,190,163],
[162,145,0,183,208,207,190,179,206],
[179,159,158,0,189,213,164,180,199],
[152,123,133,152,0,148,139,138,167],
[137,132,134,128,193,0,140,164,209],
[155,138,151,177,202,201,0,160,193],
[176,151,162,161,203,177,181,0,172],
[149,178,135,142,174,132,148,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,158,190,167,150,172,191,178],
[153,0,133,154,137,138,143,127,158],
[183,208,0,184,204,136,160,156,171],
[151,187,157,0,159,142,156,148,159],
[174,204,137,182,0,157,173,172,173],
[191,203,205,199,184,0,184,161,181],
[169,198,181,185,168,157,0,161,158],
[150,214,185,193,169,180,180,0,166],
[163,183,170,182,168,160,183,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,177,170,204,198,177,183,205],
[150,0,177,172,173,170,163,187,187],
[164,164,0,163,173,190,166,163,157],
[171,169,178,0,188,193,183,193,187],
[137,168,168,153,0,184,178,166,176],
[143,171,151,148,157,0,171,159,163],
[164,178,175,158,163,170,0,177,166],
[158,154,178,148,175,182,164,0,169],
[136,154,184,154,165,178,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,149,170,154,155,164,159,181],
[175,0,171,164,158,159,183,167,175],
[192,170,0,174,156,176,157,169,185],
[171,177,167,0,152,175,149,167,172],
[187,183,185,189,0,191,178,163,198],
[186,182,165,166,150,0,168,167,186],
[177,158,184,192,163,173,0,174,192],
[182,174,172,174,178,174,167,0,188],
[160,166,156,169,143,155,149,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,181,175,176,179,167,166,176],
[181,0,182,172,156,175,175,173,174],
[160,159,0,173,150,174,150,169,158],
[166,169,168,0,163,167,158,168,165],
[165,185,191,178,0,179,176,175,171],
[162,166,167,174,162,0,156,156,161],
[174,166,191,183,165,185,0,178,184],
[175,168,172,173,166,185,163,0,184],
[165,167,183,176,170,180,157,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,166,167,160,171,164,160],
[172,0,176,187,163,168,175,191,170],
[179,165,0,221,195,195,195,228,179],
[175,154,120,0,180,154,154,178,163],
[174,178,146,161,0,168,179,199,157],
[181,173,146,187,173,0,176,202,170],
[170,166,146,187,162,165,0,184,172],
[177,150,113,163,142,139,157,0,153],
[181,171,162,178,184,171,169,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,175,168,177,157,141,170,167],
[177,0,185,186,186,184,170,176,186],
[166,156,0,172,169,160,166,157,157],
[173,155,169,0,162,168,158,165,167],
[164,155,172,179,0,159,160,163,165],
[184,157,181,173,182,0,162,170,175],
[200,171,175,183,181,179,0,169,187],
[171,165,184,176,178,171,172,0,167],
[174,155,184,174,176,166,154,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,186,168,197,184,174,176],
[167,0,173,174,169,185,174,181,182],
[162,168,0,178,175,183,174,173,188],
[155,167,163,0,167,191,164,167,185],
[173,172,166,174,0,176,158,163,178],
[144,156,158,150,165,0,163,161,179],
[157,167,167,177,183,178,0,155,192],
[167,160,168,174,178,180,186,0,174],
[165,159,153,156,163,162,149,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,158,183,157,173,197,205,186],
[144,0,155,149,187,169,176,201,167],
[183,186,0,182,188,151,206,209,192],
[158,192,159,0,176,162,166,173,168],
[184,154,153,165,0,147,192,173,193],
[168,172,190,179,194,0,186,188,193],
[144,165,135,175,149,155,0,161,171],
[136,140,132,168,168,153,180,0,145],
[155,174,149,173,148,148,170,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,168,173,153,167,170,157],
[167,0,160,170,174,167,169,164,173],
[170,181,0,160,175,167,165,174,162],
[173,171,181,0,179,173,168,171,163],
[168,167,166,162,0,165,159,155,167],
[188,174,174,168,176,0,178,171,186],
[174,172,176,173,182,163,0,160,184],
[171,177,167,170,186,170,181,0,186],
[184,168,179,178,174,155,157,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,171,189,165,186,179,182],
[163,0,171,174,178,161,179,172,177],
[179,170,0,175,159,177,184,168,181],
[170,167,166,0,174,178,187,168,175],
[152,163,182,167,0,159,168,159,174],
[176,180,164,163,182,0,187,156,164],
[155,162,157,154,173,154,0,159,154],
[162,169,173,173,182,185,182,0,171],
[159,164,160,166,167,177,187,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,153,134,113,135,150,160,154],
[239,0,173,201,187,175,210,176,161],
[188,168,0,186,162,163,153,191,166],
[207,140,155,0,145,154,207,163,176],
[228,154,179,196,0,188,186,233,168],
[206,166,178,187,153,0,213,187,147],
[191,131,188,134,155,128,0,129,98],
[181,165,150,178,108,154,212,0,160],
[187,180,175,165,173,194,243,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,163,204,204,169,178,167],
[174,0,174,179,176,182,171,158,166],
[165,167,0,157,167,198,166,169,169],
[178,162,184,0,182,192,185,175,166],
[137,165,174,159,0,184,151,163,156],
[137,159,143,149,157,0,150,131,149],
[172,170,175,156,190,191,0,153,185],
[163,183,172,166,178,210,188,0,189],
[174,175,172,175,185,192,156,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,162,163,168,176,184,169,170],
[178,0,170,173,165,178,185,173,177],
[179,171,0,172,181,174,179,177,170],
[178,168,169,0,171,180,175,160,171],
[173,176,160,170,0,179,165,165,165],
[165,163,167,161,162,0,172,153,159],
[157,156,162,166,176,169,0,177,177],
[172,168,164,181,176,188,164,0,179],
[171,164,171,170,176,182,164,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,172,174,171,178,183,160],
[161,0,161,158,183,164,179,180,154],
[168,180,0,165,174,181,175,162,159],
[169,183,176,0,173,170,184,172,154],
[167,158,167,168,0,161,179,172,180],
[170,177,160,171,180,0,179,167,156],
[163,162,166,157,162,162,0,156,152],
[158,161,179,169,169,174,185,0,160],
[181,187,182,187,161,185,189,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,302,179,222,166,217,141,164],
[143,0,201,131,199,194,130,122,208],
[39,140,0,163,176,31,162,82,170],
[162,210,178,0,316,178,201,180,241],
[119,142,165,25,0,67,80,9,144],
[175,147,310,163,274,0,153,131,231],
[124,211,179,140,261,188,0,158,137],
[200,219,259,161,332,210,183,0,225],
[177,133,171,100,197,110,204,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,159,154,177,162,159,182,174],
[158,0,161,149,165,161,175,160,127],
[182,180,0,146,177,171,185,166,153],
[187,192,195,0,186,175,190,200,149],
[164,176,164,155,0,164,187,189,169],
[179,180,170,166,177,0,184,190,154],
[182,166,156,151,154,157,0,170,166],
[159,181,175,141,152,151,171,0,136],
[167,214,188,192,172,187,175,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,183,169,169,173,187,182,154],
[170,0,180,184,180,191,183,171,172],
[158,161,0,170,156,181,174,178,171],
[172,157,171,0,165,184,187,181,180],
[172,161,185,176,0,180,168,176,172],
[168,150,160,157,161,0,160,154,153],
[154,158,167,154,173,181,0,172,154],
[159,170,163,160,165,187,169,0,157],
[187,169,170,161,169,188,187,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,179,175,168,228,150,198,194],
[148,0,173,163,154,179,120,172,168],
[162,168,0,163,141,180,129,143,186],
[166,178,178,0,167,200,174,204,185],
[173,187,200,174,0,234,153,165,195],
[113,162,161,141,107,0,98,151,156],
[191,221,212,167,188,243,0,178,203],
[143,169,198,137,176,190,163,0,207],
[147,173,155,156,146,185,138,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,168,179,166,157,160,179,171],
[183,0,174,174,163,165,162,168,156],
[173,167,0,158,159,161,171,168,165],
[162,167,183,0,159,162,169,164,161],
[175,178,182,182,0,173,170,165,172],
[184,176,180,179,168,0,173,162,175],
[181,179,170,172,171,168,0,163,160],
[162,173,173,177,176,179,178,0,162],
[170,185,176,180,169,166,181,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,171,184,177,194,170,179],
[177,0,168,165,185,174,187,177,167],
[167,173,0,174,181,163,190,186,163],
[170,176,167,0,189,164,179,183,178],
[157,156,160,152,0,194,186,176,163],
[164,167,178,177,147,0,182,176,185],
[147,154,151,162,155,159,0,159,152],
[171,164,155,158,165,165,182,0,170],
[162,174,178,163,178,156,189,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,181,181,162,173,163,183,160],
[167,0,170,184,163,180,170,187,170],
[160,171,0,176,171,188,156,170,178],
[160,157,165,0,175,176,176,175,177],
[179,178,170,166,0,171,158,182,175],
[168,161,153,165,170,0,153,176,158],
[178,171,185,165,183,188,0,175,188],
[158,154,171,166,159,165,166,0,163],
[181,171,163,164,166,183,153,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,155,183,181,170,164,201,186],
[176,0,163,160,158,169,174,174,180],
[186,178,0,184,181,179,166,190,187],
[158,181,157,0,180,173,177,189,183],
[160,183,160,161,0,149,161,180,176],
[171,172,162,168,192,0,165,197,184],
[177,167,175,164,180,176,0,176,174],
[140,167,151,152,161,144,165,0,150],
[155,161,154,158,165,157,167,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,161,164,169,160,166,171],
[176,0,164,183,187,190,173,193,180],
[181,177,0,171,172,176,159,177,182],
[180,158,170,0,170,175,165,173,168],
[177,154,169,171,0,174,159,177,174],
[172,151,165,166,167,0,152,165,164],
[181,168,182,176,182,189,0,179,184],
[175,148,164,168,164,176,162,0,170],
[170,161,159,173,167,177,157,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,156,149,179,156,155,165],
[169,0,166,162,168,182,163,167,177],
[169,175,0,161,157,159,155,154,157],
[185,179,180,0,176,175,182,160,159],
[192,173,184,165,0,172,179,176,170],
[162,159,182,166,169,0,174,151,156],
[185,178,186,159,162,167,0,160,153],
[186,174,187,181,165,190,181,0,171],
[176,164,184,182,171,185,188,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,168,138,167,130,155,174,155],
[183,0,196,198,181,177,182,193,168],
[173,145,0,187,167,160,174,190,158],
[203,143,154,0,176,142,152,183,178],
[174,160,174,165,0,159,154,163,138],
[211,164,181,199,182,0,187,182,181],
[186,159,167,189,187,154,0,163,180],
[167,148,151,158,178,159,178,0,162],
[186,173,183,163,203,160,161,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,222,185,238,224,181,162,257],
[84,0,100,109,177,224,196,81,298],
[119,241,0,144,173,240,192,77,273],
[156,232,197,0,257,256,240,180,284],
[103,164,168,84,0,192,127,84,213],
[117,117,101,85,149,0,117,117,238],
[160,145,149,101,214,224,0,162,254],
[179,260,264,161,257,224,179,0,273],
[84,43,68,57,128,103,87,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,155,166,159,162,149,155,164],
[176,0,176,191,171,169,182,181,197],
[186,165,0,180,161,175,168,172,182],
[175,150,161,0,163,166,152,174,167],
[182,170,180,178,0,182,177,165,179],
[179,172,166,175,159,0,164,167,165],
[192,159,173,189,164,177,0,176,181],
[186,160,169,167,176,174,165,0,180],
[177,144,159,174,162,176,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,182,170,160,162,176,159,175],
[150,0,146,150,142,145,155,147,158],
[159,195,0,156,145,157,157,174,171],
[171,191,185,0,182,166,160,174,169],
[181,199,196,159,0,177,164,165,182],
[179,196,184,175,164,0,185,176,179],
[165,186,184,181,177,156,0,176,174],
[182,194,167,167,176,165,165,0,158],
[166,183,170,172,159,162,167,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,203,190,174,198,179,158,189],
[154,0,174,177,160,159,142,146,166],
[138,167,0,156,170,160,154,139,161],
[151,164,185,0,176,182,144,141,185],
[167,181,171,165,0,181,170,144,180],
[143,182,181,159,160,0,153,162,172],
[162,199,187,197,171,188,0,171,172],
[183,195,202,200,197,179,170,0,191],
[152,175,180,156,161,169,169,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,189,200,179,159,163,175,180],
[164,0,150,177,188,181,164,177,171],
[152,191,0,187,194,184,150,180,172],
[141,164,154,0,166,182,144,159,164],
[162,153,147,175,0,148,172,138,162],
[182,160,157,159,193,0,155,137,157],
[178,177,191,197,169,186,0,173,176],
[166,164,161,182,203,204,168,0,201],
[161,170,169,177,179,184,165,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,158,168,190,189,176,175,176],
[170,0,167,162,180,176,156,156,154],
[183,174,0,177,187,185,177,173,162],
[173,179,164,0,183,188,165,147,148],
[151,161,154,158,0,170,164,154,150],
[152,165,156,153,171,0,153,142,141],
[165,185,164,176,177,188,0,171,151],
[166,185,168,194,187,199,170,0,158],
[165,187,179,193,191,200,190,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,169,173,163,164,174,165],
[180,0,179,177,178,166,171,176,171],
[179,162,0,193,181,181,171,187,176],
[172,164,148,0,161,158,156,169,164],
[168,163,160,180,0,170,163,165,179],
[178,175,160,183,171,0,173,174,182],
[177,170,170,185,178,168,0,183,179],
[167,165,154,172,176,167,158,0,170],
[176,170,165,177,162,159,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,181,176,165,150,181,149,173],
[181,0,192,197,199,181,196,169,173],
[160,149,0,161,171,146,175,146,163],
[165,144,180,0,163,158,167,143,166],
[176,142,170,178,0,147,161,156,162],
[191,160,195,183,194,0,189,186,178],
[160,145,166,174,180,152,0,140,152],
[192,172,195,198,185,155,201,0,171],
[168,168,178,175,179,163,189,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,189,174,164,166,168,179],
[166,0,182,179,167,163,171,175,175],
[164,159,0,172,161,158,160,170,161],
[152,162,169,0,155,152,146,156,170],
[167,174,180,186,0,172,160,174,158],
[177,178,183,189,169,0,157,179,169],
[175,170,181,195,181,184,0,174,174],
[173,166,171,185,167,162,167,0,174],
[162,166,180,171,183,172,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,159,169,194,161,168,176],
[176,0,179,169,176,186,173,169,171],
[181,162,0,183,178,189,178,184,178],
[182,172,158,0,158,191,177,181,171],
[172,165,163,183,0,186,174,176,164],
[147,155,152,150,155,0,154,172,160],
[180,168,163,164,167,187,0,183,171],
[173,172,157,160,165,169,158,0,164],
[165,170,163,170,177,181,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,172,177,180,169,177,178,165],
[158,0,177,160,172,165,170,173,166],
[169,164,0,157,170,161,158,169,162],
[164,181,184,0,171,169,175,177,162],
[161,169,171,170,0,171,160,172,175],
[172,176,180,172,170,0,177,173,189],
[164,171,183,166,181,164,0,179,168],
[163,168,172,164,169,168,162,0,169],
[176,175,179,179,166,152,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,190,187,189,179,164,185,199],
[163,0,176,162,181,172,168,186,180],
[151,165,0,166,172,161,165,177,164],
[154,179,175,0,170,166,174,177,160],
[152,160,169,171,0,152,158,182,165],
[162,169,180,175,189,0,167,193,177],
[177,173,176,167,183,174,0,176,182],
[156,155,164,164,159,148,165,0,159],
[142,161,177,181,176,164,159,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,161,164,185,177,183,180,180],
[162,0,168,174,188,158,175,183,182],
[180,173,0,172,187,169,187,192,176],
[177,167,169,0,167,166,179,179,177],
[156,153,154,174,0,159,170,175,175],
[164,183,172,175,182,0,181,186,198],
[158,166,154,162,171,160,0,178,177],
[161,158,149,162,166,155,163,0,162],
[161,159,165,164,166,143,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,162,147,168,154,154,150,164],
[193,0,185,163,190,173,166,174,168],
[179,156,0,159,175,169,155,160,166],
[194,178,182,0,183,177,181,174,169],
[173,151,166,158,0,163,170,180,167],
[187,168,172,164,178,0,170,164,165],
[187,175,186,160,171,171,0,182,169],
[191,167,181,167,161,177,159,0,173],
[177,173,175,172,174,176,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,151,162,197,160,184,123,175],
[174,0,209,150,188,184,171,183,177],
[190,132,0,148,194,173,199,154,175],
[179,191,193,0,210,181,165,127,193],
[144,153,147,131,0,133,149,107,136],
[181,157,168,160,208,0,167,139,181],
[157,170,142,176,192,174,0,181,151],
[218,158,187,214,234,202,160,0,200],
[166,164,166,148,205,160,190,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,179,177,180,165,176,196],
[173,0,163,159,185,171,173,184,202],
[167,178,0,172,179,161,176,172,195],
[162,182,169,0,178,193,188,183,190],
[164,156,162,163,0,181,144,149,171],
[161,170,180,148,160,0,170,172,199],
[176,168,165,153,197,171,0,184,191],
[165,157,169,158,192,169,157,0,177],
[145,139,146,151,170,142,150,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,187,167,206,214,181,178,168],
[179,0,174,180,195,203,168,175,184],
[154,167,0,171,166,182,177,173,151],
[174,161,170,0,199,212,161,181,168],
[135,146,175,142,0,193,160,154,146],
[127,138,159,129,148,0,149,137,143],
[160,173,164,180,181,192,0,167,173],
[163,166,168,160,187,204,174,0,167],
[173,157,190,173,195,198,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,197,171,159,170,177,181,187],
[191,0,214,199,188,199,169,198,195],
[144,127,0,172,163,161,156,171,177],
[170,142,169,0,166,157,159,182,180],
[182,153,178,175,0,174,178,183,206],
[171,142,180,184,167,0,177,180,170],
[164,172,185,182,163,164,0,193,177],
[160,143,170,159,158,161,148,0,176],
[154,146,164,161,135,171,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,155,145,160,163,162,158,174],
[172,0,171,167,179,173,144,180,192],
[186,170,0,147,178,172,159,175,176],
[196,174,194,0,185,169,170,169,190],
[181,162,163,156,0,160,148,140,169],
[178,168,169,172,181,0,169,176,182],
[179,197,182,171,193,172,0,170,201],
[183,161,166,172,201,165,171,0,184],
[167,149,165,151,172,159,140,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,181,162,173,164,173,161],
[171,0,183,178,184,181,162,180,181],
[176,158,0,170,152,154,158,157,167],
[160,163,171,0,170,170,171,173,172],
[179,157,189,171,0,173,178,169,183],
[168,160,187,171,168,0,179,160,176],
[177,179,183,170,163,162,0,181,157],
[168,161,184,168,172,181,160,0,173],
[180,160,174,169,158,165,184,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,177,172,196,190,180,163,167],
[158,0,165,165,185,192,180,186,163],
[164,176,0,172,191,174,194,175,165],
[169,176,169,0,194,182,183,175,159],
[145,156,150,147,0,180,175,159,156],
[151,149,167,159,161,0,184,162,162],
[161,161,147,158,166,157,0,153,154],
[178,155,166,166,182,179,188,0,174],
[174,178,176,182,185,179,187,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,141,156,184,179,158,175,159],
[156,0,181,166,174,154,151,190,153],
[200,160,0,190,193,182,162,190,173],
[185,175,151,0,188,177,171,179,161],
[157,167,148,153,0,156,152,165,150],
[162,187,159,164,185,0,158,190,159],
[183,190,179,170,189,183,0,205,191],
[166,151,151,162,176,151,136,0,169],
[182,188,168,180,191,182,150,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,238,139,139,238,319,238,114],
[238,0,135,205,168,249,249,190,271],
[103,206,0,242,172,242,136,136,136],
[202,136,99,0,271,235,235,235,235],
[202,173,169,70,0,250,202,202,103],
[103,92,99,106,91,0,136,55,136],
[22,92,205,106,139,205,0,125,103],
[103,151,205,106,139,286,216,0,103],
[227,70,205,106,238,205,238,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,169,178,186,158,149,167,170],
[128,0,136,138,147,114,115,141,142],
[172,205,0,185,153,163,170,198,173],
[163,203,156,0,162,179,167,182,159],
[155,194,188,179,0,170,161,192,199],
[183,227,178,162,171,0,183,208,202],
[192,226,171,174,180,158,0,214,173],
[174,200,143,159,149,133,127,0,162],
[171,199,168,182,142,139,168,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,165,178,229,154,170,166,176],
[186,0,158,170,234,181,150,178,165],
[176,183,0,181,199,170,166,200,179],
[163,171,160,0,196,116,151,150,148],
[112,107,142,145,0,113,118,156,175],
[187,160,171,225,228,0,174,209,165],
[171,191,175,190,223,167,0,150,185],
[175,163,141,191,185,132,191,0,148],
[165,176,162,193,166,176,156,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,193,177,162,171,177,173],
[170,0,162,189,177,153,158,168,176],
[168,179,0,184,166,164,163,162,169],
[148,152,157,0,156,154,170,153,163],
[164,164,175,185,0,161,157,160,171],
[179,188,177,187,180,0,168,171,174],
[170,183,178,171,184,173,0,174,182],
[164,173,179,188,181,170,167,0,175],
[168,165,172,178,170,167,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,181,194,194,180,193,162,187],
[152,0,168,170,159,176,175,153,154],
[160,173,0,154,174,162,170,176,177],
[147,171,187,0,164,176,167,167,171],
[147,182,167,177,0,177,179,161,171],
[161,165,179,165,164,0,180,146,153],
[148,166,171,174,162,161,0,151,157],
[179,188,165,174,180,195,190,0,173],
[154,187,164,170,170,188,184,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,185,160,154,171,181,191],
[174,0,191,193,183,169,188,200,192],
[159,150,0,181,165,161,161,187,163],
[156,148,160,0,160,168,165,181,164],
[181,158,176,181,0,174,161,193,183],
[187,172,180,173,167,0,189,189,171],
[170,153,180,176,180,152,0,192,181],
[160,141,154,160,148,152,149,0,166],
[150,149,178,177,158,170,160,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,179,181,183,174,173,179,181],
[171,0,168,160,166,168,162,173,158],
[162,173,0,182,178,168,175,188,172],
[160,181,159,0,169,164,151,165,161],
[158,175,163,172,0,171,172,178,182],
[167,173,173,177,170,0,161,184,178],
[168,179,166,190,169,180,0,184,180],
[162,168,153,176,163,157,157,0,155],
[160,183,169,180,159,163,161,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,154,202,215,192,233,167,170],
[110,0,156,136,121,202,181,162,151],
[187,185,0,196,145,163,208,187,205],
[139,205,145,0,191,192,232,229,119],
[126,220,196,150,0,174,175,150,157],
[149,139,178,149,167,0,113,144,100],
[108,160,133,109,166,228,0,146,137],
[174,179,154,112,191,197,195,0,177],
[171,190,136,222,184,241,204,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,151,162,147,174,163,149,169],
[167,0,163,156,149,183,156,138,161],
[190,178,0,172,183,184,158,163,186],
[179,185,169,0,182,178,167,175,167],
[194,192,158,159,0,179,163,162,153],
[167,158,157,163,162,0,153,155,162],
[178,185,183,174,178,188,0,168,175],
[192,203,178,166,179,186,173,0,165],
[172,180,155,174,188,179,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,166,167,175,163,171,169],
[174,0,165,171,176,173,176,192,174],
[173,176,0,174,173,173,182,167,173],
[175,170,167,0,179,172,166,174,171],
[174,165,168,162,0,174,175,172,168],
[166,168,168,169,167,0,165,168,157],
[178,165,159,175,166,176,0,157,164],
[170,149,174,167,169,173,184,0,171],
[172,167,168,170,173,184,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,159,166,159,198,173,148],
[161,0,181,161,166,165,177,162,181],
[157,160,0,163,164,176,175,160,172],
[182,180,178,0,163,150,187,174,194],
[175,175,177,178,0,155,191,168,180],
[182,176,165,191,186,0,199,181,170],
[143,164,166,154,150,142,0,162,161],
[168,179,181,167,173,160,179,0,187],
[193,160,169,147,161,171,180,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,164,168,165,158,181,169,171],
[190,0,193,192,169,178,188,178,166],
[177,148,0,158,159,160,161,157,180],
[173,149,183,0,174,176,156,180,167],
[176,172,182,167,0,172,181,172,177],
[183,163,181,165,169,0,163,160,168],
[160,153,180,185,160,178,0,163,169],
[172,163,184,161,169,181,178,0,162],
[170,175,161,174,164,173,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,171,166,171,172,169,168],
[158,0,167,176,167,175,171,161,164],
[173,174,0,173,170,175,179,174,185],
[170,165,168,0,183,168,160,163,156],
[175,174,171,158,0,178,168,166,163],
[170,166,166,173,163,0,164,162,167],
[169,170,162,181,173,177,0,167,178],
[172,180,167,178,175,179,174,0,173],
[173,177,156,185,178,174,163,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,187,161,173,203,176,191],
[160,0,170,165,154,163,186,158,170],
[164,171,0,160,149,163,191,171,170],
[154,176,181,0,174,195,197,178,172],
[180,187,192,167,0,174,205,180,202],
[168,178,178,146,167,0,195,170,171],
[138,155,150,144,136,146,0,169,171],
[165,183,170,163,161,171,172,0,183],
[150,171,171,169,139,170,170,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,166,178,164,170,177,175,175],
[157,0,163,171,170,164,166,173,145],
[175,178,0,171,168,167,158,175,170],
[163,170,170,0,165,168,162,167,155],
[177,171,173,176,0,178,176,177,168],
[171,177,174,173,163,0,173,174,159],
[164,175,183,179,165,168,0,183,157],
[166,168,166,174,164,167,158,0,167],
[166,196,171,186,173,182,184,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,172,187,121,200,144,123,151],
[214,0,187,189,158,214,154,169,160],
[169,154,0,114,151,185,159,152,165],
[154,152,227,0,190,201,170,166,175],
[220,183,190,151,0,208,200,172,188],
[141,127,156,140,133,0,128,131,125],
[197,187,182,171,141,213,0,163,175],
[218,172,189,175,169,210,178,0,175],
[190,181,176,166,153,216,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,148,136,191,148,144,143,142],
[195,0,175,156,173,163,185,178,221],
[193,166,0,169,172,140,161,172,169],
[205,185,172,0,185,163,171,186,197],
[150,168,169,156,0,146,154,168,183],
[193,178,201,178,195,0,170,163,195],
[197,156,180,170,187,171,0,178,199],
[198,163,169,155,173,178,163,0,212],
[199,120,172,144,158,146,142,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,176,177,174,168,197,182,159],
[154,0,167,165,162,168,189,157,157],
[165,174,0,164,162,192,188,171,173],
[164,176,177,0,165,176,183,166,163],
[167,179,179,176,0,180,181,174,157],
[173,173,149,165,161,0,163,157,149],
[144,152,153,158,160,178,0,165,156],
[159,184,170,175,167,184,176,0,170],
[182,184,168,178,184,192,185,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,188,193,179,191,181,176,200],
[174,0,197,173,177,170,185,177,187],
[153,144,0,160,168,176,164,155,170],
[148,168,181,0,174,176,168,163,172],
[162,164,173,167,0,160,161,160,181],
[150,171,165,165,181,0,172,165,166],
[160,156,177,173,180,169,0,155,173],
[165,164,186,178,181,176,186,0,184],
[141,154,171,169,160,175,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,190,175,189,192,170,173,171],
[159,0,175,156,194,172,169,160,162],
[151,166,0,163,180,153,165,152,159],
[166,185,178,0,206,169,181,168,171],
[152,147,161,135,0,151,145,154,160],
[149,169,188,172,190,0,173,156,176],
[171,172,176,160,196,168,0,161,182],
[168,181,189,173,187,185,180,0,183],
[170,179,182,170,181,165,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,140,147,156,157,162,172,186],
[203,0,201,226,205,163,159,198,232],
[201,140,0,164,223,159,192,156,201],
[194,115,177,0,196,188,140,184,221],
[185,136,118,145,0,145,162,152,236],
[184,178,182,153,196,0,215,212,224],
[179,182,149,201,179,126,0,201,194],
[169,143,185,157,189,129,140,0,186],
[155,109,140,120,105,117,147,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,152,164,163,168,178,182,164],
[168,0,167,167,168,179,167,181,160],
[189,174,0,184,172,183,192,175,167],
[177,174,157,0,181,177,162,185,171],
[178,173,169,160,0,161,166,172,152],
[173,162,158,164,180,0,175,170,172],
[163,174,149,179,175,166,0,174,164],
[159,160,166,156,169,171,167,0,157],
[177,181,174,170,189,169,177,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,166,154,153,158,155,168,146],
[181,0,181,172,177,175,165,184,177],
[175,160,0,161,163,162,156,158,157],
[187,169,180,0,169,165,167,158,156],
[188,164,178,172,0,174,178,175,165],
[183,166,179,176,167,0,162,180,173],
[186,176,185,174,163,179,0,178,169],
[173,157,183,183,166,161,163,0,155],
[195,164,184,185,176,168,172,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,206,165,166,163,172,148,166],
[177,0,210,145,166,147,162,159,165],
[135,131,0,120,155,131,140,133,140],
[176,196,221,0,193,171,171,161,179],
[175,175,186,148,0,160,172,164,171],
[178,194,210,170,181,0,175,180,174],
[169,179,201,170,169,166,0,184,180],
[193,182,208,180,177,161,157,0,161],
[175,176,201,162,170,167,161,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,172,165,176,179,188,184,176],
[151,0,160,168,163,170,179,173,173],
[169,181,0,161,167,175,191,172,181],
[176,173,180,0,168,180,190,191,184],
[165,178,174,173,0,181,178,183,179],
[162,171,166,161,160,0,187,175,174],
[153,162,150,151,163,154,0,156,148],
[157,168,169,150,158,166,185,0,159],
[165,168,160,157,162,167,193,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,163,159,198,199,173,167,167],
[168,0,175,154,185,158,162,164,157],
[178,166,0,163,188,179,180,180,182],
[182,187,178,0,192,177,162,173,178],
[143,156,153,149,0,177,162,146,162],
[142,183,162,164,164,0,164,155,156],
[168,179,161,179,179,177,0,176,169],
[174,177,161,168,195,186,165,0,177],
[174,184,159,163,179,185,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,225,163,215,175,191,183,188],
[150,0,194,200,173,116,191,162,171],
[116,147,0,149,149,152,183,138,99],
[178,141,192,0,153,172,164,151,135],
[126,168,192,188,0,173,200,144,158],
[166,225,189,169,168,0,214,184,176],
[150,150,158,177,141,127,0,161,167],
[158,179,203,190,197,157,180,0,182],
[153,170,242,206,183,165,174,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,158,225,201,181,197,189,186],
[141,0,181,149,169,154,162,146,169],
[183,160,0,171,208,147,161,164,180],
[116,192,170,0,175,161,158,162,170],
[140,172,133,166,0,156,135,162,150],
[160,187,194,180,185,0,154,155,209],
[144,179,180,183,206,187,0,169,173],
[152,195,177,179,179,186,172,0,177],
[155,172,161,171,191,132,168,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,174,186,173,156,156,183,172],
[184,0,176,203,184,166,181,166,198],
[167,165,0,183,175,170,178,185,182],
[155,138,158,0,168,147,160,150,156],
[168,157,166,173,0,156,174,153,165],
[185,175,171,194,185,0,160,173,190],
[185,160,163,181,167,181,0,166,181],
[158,175,156,191,188,168,175,0,161],
[169,143,159,185,176,151,160,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,146,178,165,161,164,177,162],
[179,0,163,186,190,161,187,176,186],
[195,178,0,193,178,172,176,169,196],
[163,155,148,0,172,162,142,178,180],
[176,151,163,169,0,160,164,176,169],
[180,180,169,179,181,0,164,183,177],
[177,154,165,199,177,177,0,194,185],
[164,165,172,163,165,158,147,0,173],
[179,155,145,161,172,164,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,176,150,170,182,180,174],
[174,0,157,177,173,182,182,183,157],
[172,184,0,187,158,179,182,186,175],
[165,164,154,0,155,173,185,177,154],
[191,168,183,186,0,186,198,198,175],
[171,159,162,168,155,0,168,168,162],
[159,159,159,156,143,173,0,168,151],
[161,158,155,164,143,173,173,0,139],
[167,184,166,187,166,179,190,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,174,162,182,193,150,187,138],
[198,0,141,161,160,178,159,193,150],
[167,200,0,166,173,196,122,156,156],
[179,180,175,0,181,192,178,181,131],
[159,181,168,160,0,198,152,160,135],
[148,163,145,149,143,0,149,170,135],
[191,182,219,163,189,192,0,220,177],
[154,148,185,160,181,171,121,0,150],
[203,191,185,210,206,206,164,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,139,152,124,170,144,160,142],
[200,0,172,198,167,201,203,198,186],
[202,169,0,191,174,200,199,195,191],
[189,143,150,0,143,185,193,183,160],
[217,174,167,198,0,194,217,189,204],
[171,140,141,156,147,0,178,201,159],
[197,138,142,148,124,163,0,165,164],
[181,143,146,158,152,140,176,0,163],
[199,155,150,181,137,182,177,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,180,175,189,190,174,169,183],
[157,0,179,173,177,190,159,164,162],
[161,162,0,162,165,177,161,160,180],
[166,168,179,0,175,187,164,172,181],
[152,164,176,166,0,191,162,174,170],
[151,151,164,154,150,0,162,162,168],
[167,182,180,177,179,179,0,170,173],
[172,177,181,169,167,179,171,0,187],
[158,179,161,160,171,173,168,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,202,176,168,166,167,162,201],
[174,0,184,190,166,197,185,157,190],
[139,157,0,131,158,155,156,158,164],
[165,151,210,0,158,189,182,174,185],
[173,175,183,183,0,166,181,178,177],
[175,144,186,152,175,0,167,171,176],
[174,156,185,159,160,174,0,166,178],
[179,184,183,167,163,170,175,0,167],
[140,151,177,156,164,165,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,184,161,183,184,147,180,180],
[146,0,182,144,145,170,143,149,176],
[157,159,0,183,159,193,154,162,180],
[180,197,158,0,180,192,159,195,196],
[158,196,182,161,0,202,172,178,194],
[157,171,148,149,139,0,154,166,151],
[194,198,187,182,169,187,0,174,171],
[161,192,179,146,163,175,167,0,152],
[161,165,161,145,147,190,170,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,139,145,188,175,222,206,209],
[116,0,121,119,98,134,169,92,163],
[202,220,0,233,231,201,294,166,155],
[196,222,108,0,120,214,231,171,222],
[153,243,110,221,0,155,219,149,164],
[166,207,140,127,186,0,241,184,194],
[119,172,47,110,122,100,0,103,133],
[135,249,175,170,192,157,238,0,216],
[132,178,186,119,177,147,208,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,209,191,192,170,195,191],
[171,0,149,174,172,173,170,162,171],
[159,192,0,160,176,140,169,162,188],
[132,167,181,0,172,141,179,149,161],
[150,169,165,169,0,159,159,170,171],
[149,168,201,200,182,0,187,179,177],
[171,171,172,162,182,154,0,166,166],
[146,179,179,192,171,162,175,0,159],
[150,170,153,180,170,164,175,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,179,170,177,190,170,166],
[174,0,166,177,173,189,172,190,160],
[167,175,0,173,171,174,194,168,171],
[162,164,168,0,171,163,174,174,171],
[171,168,170,170,0,174,184,186,164],
[164,152,167,178,167,0,181,162,152],
[151,169,147,167,157,160,0,163,144],
[171,151,173,167,155,179,178,0,155],
[175,181,170,170,177,189,197,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,162,160,168,156,158,164,147],
[173,0,174,170,178,157,175,192,160],
[179,167,0,171,158,166,159,169,180],
[181,171,170,0,155,175,173,171,174],
[173,163,183,186,0,181,171,182,181],
[185,184,175,166,160,0,159,183,165],
[183,166,182,168,170,182,0,170,167],
[177,149,172,170,159,158,171,0,166],
[194,181,161,167,160,176,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,167,179,174,167,174,170,178],
[158,0,169,164,165,166,165,172,170],
[174,172,0,167,177,173,177,194,181],
[162,177,174,0,175,176,175,174,171],
[167,176,164,166,0,167,173,190,170],
[174,175,168,165,174,0,182,183,170],
[167,176,164,166,168,159,0,179,159],
[171,169,147,167,151,158,162,0,168],
[163,171,160,170,171,171,182,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,181,180,180,169,180,191],
[164,0,187,187,184,191,186,190,185],
[169,154,0,165,167,185,177,175,178],
[160,154,176,0,161,175,162,172,179],
[161,157,174,180,0,170,167,166,178],
[161,150,156,166,171,0,155,162,169],
[172,155,164,179,174,186,0,166,181],
[161,151,166,169,175,179,175,0,176],
[150,156,163,162,163,172,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,226,226,200,177,234,184,127],
[148,0,184,239,57,184,184,184,184],
[115,157,0,99,156,50,107,109,107],
[115,102,242,0,159,185,151,109,159],
[141,284,185,182,0,177,234,192,185],
[164,157,291,156,164,0,101,109,109],
[107,157,234,190,107,240,0,135,135],
[157,157,232,232,149,232,206,0,232],
[214,157,234,182,156,232,206,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,152,167,156,184,163,153,177],
[178,0,178,155,183,190,169,153,183],
[189,163,0,163,168,180,171,165,177],
[174,186,178,0,186,183,161,172,178],
[185,158,173,155,0,182,167,164,187],
[157,151,161,158,159,0,151,161,167],
[178,172,170,180,174,190,0,165,176],
[188,188,176,169,177,180,176,0,197],
[164,158,164,163,154,174,165,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,228,213,188,183,144,158,163],
[193,0,203,202,188,179,137,122,179],
[113,138,0,208,175,174,174,144,156],
[128,139,133,0,156,180,141,90,122],
[153,153,166,185,0,202,155,131,165],
[158,162,167,161,139,0,146,130,195],
[197,204,167,200,186,195,0,131,177],
[183,219,197,251,210,211,210,0,170],
[178,162,185,219,176,146,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,138,152,146,192,139,181,136],
[187,0,170,172,167,156,154,212,152],
[203,171,0,196,177,193,166,205,178],
[189,169,145,0,148,212,173,210,149],
[195,174,164,193,0,173,182,172,158],
[149,185,148,129,168,0,137,185,136],
[202,187,175,168,159,204,0,204,163],
[160,129,136,131,169,156,137,0,125],
[205,189,163,192,183,205,178,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,174,183,178,168,184,158,175],
[157,0,183,178,179,164,173,165,162],
[167,158,0,168,170,150,174,162,172],
[158,163,173,0,165,166,174,157,180],
[163,162,171,176,0,159,175,173,177],
[173,177,191,175,182,0,185,166,184],
[157,168,167,167,166,156,0,161,169],
[183,176,179,184,168,175,180,0,174],
[166,179,169,161,164,157,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,154,155,164,214,136,167],
[171,0,142,188,163,190,209,137,170],
[175,199,0,198,139,178,209,123,172],
[187,153,143,0,128,163,194,146,179],
[186,178,202,213,0,167,216,173,216],
[177,151,163,178,174,0,206,133,179],
[127,132,132,147,125,135,0,124,148],
[205,204,218,195,168,208,217,0,194],
[174,171,169,162,125,162,193,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,169,166,193,161,180,157],
[180,0,158,184,183,185,176,176,169],
[170,183,0,174,182,197,176,177,155],
[172,157,167,0,175,170,159,166,148],
[175,158,159,166,0,185,171,161,172],
[148,156,144,171,156,0,160,151,156],
[180,165,165,182,170,181,0,165,163],
[161,165,164,175,180,190,176,0,153],
[184,172,186,193,169,185,178,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,179,159,192,169,165,191],
[161,0,172,172,175,172,163,177,169],
[162,169,0,169,175,174,155,173,183],
[162,169,172,0,159,166,158,172,176],
[182,166,166,182,0,194,171,180,187],
[149,169,167,175,147,0,155,175,182],
[172,178,186,183,170,186,0,174,182],
[176,164,168,169,161,166,167,0,172],
[150,172,158,165,154,159,159,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,158,170,175,167,182,177],
[167,0,168,163,175,179,173,176,164],
[169,173,0,162,177,164,176,167,170],
[183,178,179,0,185,178,169,177,167],
[171,166,164,156,0,173,174,169,163],
[166,162,177,163,168,0,166,159,168],
[174,168,165,172,167,175,0,163,166],
[159,165,174,164,172,182,178,0,157],
[164,177,171,174,178,173,175,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,192,187,176,183,172,179,167],
[172,0,186,171,168,170,184,171,184],
[149,155,0,170,171,173,172,156,157],
[154,170,171,0,171,160,172,152,158],
[165,173,170,170,0,173,168,161,166],
[158,171,168,181,168,0,178,160,168],
[169,157,169,169,173,163,0,172,170],
[162,170,185,189,180,181,169,0,178],
[174,157,184,183,175,173,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,163,171,210,173,181,139],
[175,0,153,168,181,172,173,178,164],
[171,188,0,185,170,211,188,191,189],
[178,173,156,0,201,211,192,211,190],
[170,160,171,140,0,190,208,168,178],
[131,169,130,130,151,0,133,139,172],
[168,168,153,149,133,208,0,171,183],
[160,163,150,130,173,202,170,0,145],
[202,177,152,151,163,169,158,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,185,174,204,208,166,163],
[174,0,183,186,186,182,177,163,184],
[163,158,0,171,182,190,180,160,162],
[156,155,170,0,169,170,175,173,155],
[167,155,159,172,0,168,167,159,168],
[137,159,151,171,173,0,188,161,166],
[133,164,161,166,174,153,0,164,163],
[175,178,181,168,182,180,177,0,180],
[178,157,179,186,173,175,178,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,183,180,155,194,152,176],
[168,0,165,176,187,177,192,159,163],
[176,176,0,199,175,179,188,190,163],
[158,165,142,0,160,166,174,164,160],
[161,154,166,181,0,181,186,158,153],
[186,164,162,175,160,0,177,154,172],
[147,149,153,167,155,164,0,170,172],
[189,182,151,177,183,187,171,0,168],
[165,178,178,181,188,169,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,164,168,164,168,170,156],
[169,0,164,169,165,164,179,175,173],
[176,177,0,166,173,174,179,171,178],
[177,172,175,0,162,179,170,169,172],
[173,176,168,179,0,173,172,175,170],
[177,177,167,162,168,0,182,183,178],
[173,162,162,171,169,159,0,169,157],
[171,166,170,172,166,158,172,0,161],
[185,168,163,169,171,163,184,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,179,172,193,160,182,169,164],
[169,0,179,173,183,177,177,183,167],
[162,162,0,171,171,164,166,162,152],
[169,168,170,0,176,165,161,170,180],
[148,158,170,165,0,158,169,155,166],
[181,164,177,176,183,0,181,176,165],
[159,164,175,180,172,160,0,172,167],
[172,158,179,171,186,165,169,0,155],
[177,174,189,161,175,176,174,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,194,194,120,155,39,113,194],
[302,0,223,155,228,216,280,173,216],
[147,118,0,61,228,79,186,153,216],
[147,186,280,0,267,302,186,221,284],
[221,113,113,74,0,74,131,92,216],
[186,125,262,39,267,0,125,131,323],
[302,61,155,155,210,216,0,74,216],
[228,168,188,120,249,210,267,0,323],
[147,125,125,57,125,18,125,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,199,177,200,168,193,182,187],
[140,0,160,180,172,164,155,169,143],
[142,181,0,172,157,181,157,156,158],
[164,161,169,0,162,165,155,151,175],
[141,169,184,179,0,150,139,174,192],
[173,177,160,176,191,0,150,188,167],
[148,186,184,186,202,191,0,178,197],
[159,172,185,190,167,153,163,0,176],
[154,198,183,166,149,174,144,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,185,188,174,171,196,189,169],
[184,0,178,174,176,163,197,177,154],
[156,163,0,174,161,176,184,185,176],
[153,167,167,0,166,162,170,174,169],
[167,165,180,175,0,180,187,194,181],
[170,178,165,179,161,0,178,174,171],
[145,144,157,171,154,163,0,177,149],
[152,164,156,167,147,167,164,0,158],
[172,187,165,172,160,170,192,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,178,179,152,162,177,175],
[169,0,177,168,174,165,172,157,170],
[164,164,0,180,180,152,167,163,173],
[163,173,161,0,174,152,164,163,188],
[162,167,161,167,0,156,148,168,181],
[189,176,189,189,185,0,178,170,195],
[179,169,174,177,193,163,0,172,173],
[164,184,178,178,173,171,169,0,199],
[166,171,168,153,160,146,168,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,165,180,169,186,193,170,166],
[174,0,179,157,169,198,194,199,179],
[176,162,0,178,170,193,202,179,172],
[161,184,163,0,174,186,186,181,177],
[172,172,171,167,0,189,185,172,174],
[155,143,148,155,152,0,170,152,160],
[148,147,139,155,156,171,0,152,141],
[171,142,162,160,169,189,189,0,177],
[175,162,169,164,167,181,200,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,186,177,176,180,166,176,169],
[162,0,180,174,173,172,171,169,162],
[155,161,0,160,165,171,163,165,169],
[164,167,181,0,171,171,163,170,172],
[165,168,176,170,0,176,168,174,161],
[161,169,170,170,165,0,161,165,165],
[175,170,178,178,173,180,0,176,180],
[165,172,176,171,167,176,165,0,175],
[172,179,172,169,180,176,161,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,173,165,190,182,169,168,182],
[160,0,190,174,184,190,169,154,183],
[168,151,0,180,187,187,156,168,180],
[176,167,161,0,170,155,172,175,192],
[151,157,154,171,0,174,149,149,161],
[159,151,154,186,167,0,170,158,175],
[172,172,185,169,192,171,0,169,192],
[173,187,173,166,192,183,172,0,193],
[159,158,161,149,180,166,149,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,180,189,174,181,171,147,185],
[168,0,177,194,178,197,173,174,183],
[161,164,0,178,166,176,173,156,192],
[152,147,163,0,167,170,168,153,162],
[167,163,175,174,0,183,170,142,169],
[160,144,165,171,158,0,174,141,157],
[170,168,168,173,171,167,0,168,162],
[194,167,185,188,199,200,173,0,198],
[156,158,149,179,172,184,179,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,183,169,191,161,170,167,168],
[166,0,172,166,189,163,156,177,164],
[158,169,0,161,176,158,167,162,167],
[172,175,180,0,179,164,159,171,174],
[150,152,165,162,0,160,144,164,166],
[180,178,183,177,181,0,162,185,181],
[171,185,174,182,197,179,0,174,160],
[174,164,179,170,177,156,167,0,162],
[173,177,174,167,175,160,181,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,156,184,158,174,160,170,159],
[179,0,168,180,172,175,186,160,175],
[185,173,0,207,174,173,192,189,162],
[157,161,134,0,153,151,166,148,151],
[183,169,167,188,0,178,181,171,160],
[167,166,168,190,163,0,187,169,156],
[181,155,149,175,160,154,0,155,159],
[171,181,152,193,170,172,186,0,169],
[182,166,179,190,181,185,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,162,191,170,183,108,157,165],
[202,0,170,157,179,189,149,163,188],
[179,171,0,177,214,155,140,152,143],
[150,184,164,0,177,164,149,160,158],
[171,162,127,164,0,164,147,156,170],
[158,152,186,177,177,0,153,164,135],
[233,192,201,192,194,188,0,179,163],
[184,178,189,181,185,177,162,0,195],
[176,153,198,183,171,206,178,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,166,164,174,160,175,178,166],
[144,0,161,152,147,145,157,173,166],
[175,180,0,169,169,160,173,183,173],
[177,189,172,0,164,158,159,174,185],
[167,194,172,177,0,173,180,178,169],
[181,196,181,183,168,0,170,190,161],
[166,184,168,182,161,171,0,176,176],
[163,168,158,167,163,151,165,0,165],
[175,175,168,156,172,180,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,180,193,165,169,157,195,179],
[175,0,150,180,173,181,170,178,163],
[161,191,0,187,188,158,188,180,185],
[148,161,154,0,181,164,163,159,173],
[176,168,153,160,0,171,164,177,150],
[172,160,183,177,170,0,154,170,182],
[184,171,153,178,177,187,0,172,179],
[146,163,161,182,164,171,169,0,158],
[162,178,156,168,191,159,162,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,146,175,162,174,175,179,151],
[202,0,173,192,188,179,205,191,167],
[195,168,0,207,208,204,189,203,183],
[166,149,134,0,156,136,178,174,160],
[179,153,133,185,0,159,189,156,174],
[167,162,137,205,182,0,172,188,170],
[166,136,152,163,152,169,0,145,158],
[162,150,138,167,185,153,196,0,138],
[190,174,158,181,167,171,183,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,150,167,159,148,173,170,195],
[197,0,165,198,183,163,198,184,215],
[191,176,0,190,178,168,183,185,197],
[174,143,151,0,166,155,174,165,201],
[182,158,163,175,0,181,183,212,210],
[193,178,173,186,160,0,166,186,191],
[168,143,158,167,158,175,0,161,180],
[171,157,156,176,129,155,180,0,181],
[146,126,144,140,131,150,161,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,165,182,165,172,160,162,161],
[160,0,156,182,173,158,168,176,157],
[176,185,0,190,182,178,172,184,169],
[159,159,151,0,170,157,150,165,155],
[176,168,159,171,0,157,168,181,154],
[169,183,163,184,184,0,168,173,172],
[181,173,169,191,173,173,0,177,180],
[179,165,157,176,160,168,164,0,156],
[180,184,172,186,187,169,161,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,163,181,166,183,179,172,176],
[146,0,164,168,153,171,178,159,167],
[178,177,0,175,181,189,186,172,152],
[160,173,166,0,156,197,162,178,168],
[175,188,160,185,0,177,188,176,173],
[158,170,152,144,164,0,174,183,148],
[162,163,155,179,153,167,0,163,156],
[169,182,169,163,165,158,178,0,175],
[165,174,189,173,168,193,185,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,187,160,189,180,206,201],
[170,0,176,165,163,192,158,201,178],
[157,165,0,167,174,187,143,189,172],
[154,176,174,0,150,167,151,194,187],
[181,178,167,191,0,188,172,186,171],
[152,149,154,174,153,0,134,187,158],
[161,183,198,190,169,207,0,206,203],
[135,140,152,147,155,154,135,0,148],
[140,163,169,154,170,183,138,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,163,179,161,181,176,156],
[176,0,184,172,167,166,194,180,175],
[179,157,0,170,199,178,184,192,189],
[178,169,171,0,184,147,178,181,161],
[162,174,142,157,0,133,162,159,159],
[180,175,163,194,208,0,197,192,169],
[160,147,157,163,179,144,0,150,160],
[165,161,149,160,182,149,191,0,178],
[185,166,152,180,182,172,181,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,157,176,157,179,156,183,167],
[165,0,160,171,162,157,162,170,172],
[184,181,0,180,179,185,161,183,190],
[165,170,161,0,161,182,166,164,153],
[184,179,162,180,0,181,172,170,180],
[162,184,156,159,160,0,160,138,171],
[185,179,180,175,169,181,0,165,177],
[158,171,158,177,171,203,176,0,179],
[174,169,151,188,161,170,164,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,178,172,177,184,174,168,173],
[152,0,165,163,164,170,174,164,153],
[163,176,0,158,164,174,165,174,160],
[169,178,183,0,173,179,183,176,165],
[164,177,177,168,0,169,173,163,168],
[157,171,167,162,172,0,164,160,156],
[167,167,176,158,168,177,0,159,158],
[173,177,167,165,178,181,182,0,170],
[168,188,181,176,173,185,183,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,166,175,173,171,173,181],
[174,0,181,170,184,172,184,163,183],
[172,160,0,156,174,180,174,181,183],
[175,171,185,0,187,170,186,178,180],
[166,157,167,154,0,163,164,164,176],
[168,169,161,171,178,0,176,177,169],
[170,157,167,155,177,165,0,172,173],
[168,178,160,163,177,164,169,0,170],
[160,158,158,161,165,172,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,228,124,188,200,116,158,149],
[231,0,265,164,228,204,165,185,200],
[113,76,0,154,120,156,49,116,67],
[217,177,187,0,191,149,96,193,126],
[153,113,221,150,0,211,177,210,148],
[141,137,185,192,130,0,101,160,97],
[225,176,292,245,164,240,0,229,176],
[183,156,225,148,131,181,112,0,137],
[192,141,274,215,193,244,165,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,188,180,164,181,163,178,170],
[171,0,168,167,166,169,162,174,154],
[153,173,0,168,159,171,155,166,162],
[161,174,173,0,162,174,171,176,164],
[177,175,182,179,0,192,169,174,170],
[160,172,170,167,149,0,159,160,162],
[178,179,186,170,172,182,0,175,175],
[163,167,175,165,167,181,166,0,161],
[171,187,179,177,171,179,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,174,168,172,170,184,165,183],
[153,0,166,163,164,154,168,161,144],
[167,175,0,160,162,158,179,167,169],
[173,178,181,0,177,169,173,178,168],
[169,177,179,164,0,160,181,171,172],
[171,187,183,172,181,0,168,179,169],
[157,173,162,168,160,173,0,177,173],
[176,180,174,163,170,162,164,0,175],
[158,197,172,173,169,172,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,164,180,165,164,148,155,164],
[179,0,169,187,179,175,164,193,179],
[177,172,0,173,162,179,165,181,170],
[161,154,168,0,160,163,156,164,167],
[176,162,179,181,0,172,149,174,168],
[177,166,162,178,169,0,177,171,180],
[193,177,176,185,192,164,0,185,180],
[186,148,160,177,167,170,156,0,175],
[177,162,171,174,173,161,161,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,136,155,258,176,176,155,220],
[222,0,126,237,159,239,144,166,222],
[205,215,0,220,241,139,205,215,205],
[186,104,121,0,243,121,43,43,304],
[83,182,100,98,0,121,105,100,165],
[165,102,202,220,220,0,205,242,283],
[165,197,136,298,236,136,0,237,283],
[186,175,126,298,241,99,104,0,283],
[121,119,136,37,176,58,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,171,180,173,175,161,198,180],
[162,0,180,197,156,186,186,194,212],
[170,161,0,189,185,185,161,188,181],
[161,144,152,0,126,155,158,149,146],
[168,185,156,215,0,206,211,181,169],
[166,155,156,186,135,0,164,166,161],
[180,155,180,183,130,177,0,179,170],
[143,147,153,192,160,175,162,0,161],
[161,129,160,195,172,180,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,173,176,205,223,136,181,161],
[118,0,126,49,163,118,187,187,192],
[168,215,0,99,205,210,237,237,180],
[165,292,242,0,205,260,234,185,222],
[136,178,136,136,0,205,136,205,205],
[118,223,131,81,136,0,123,138,123],
[205,154,104,107,205,218,0,183,161],
[160,154,104,156,136,203,158,0,141],
[180,149,161,119,136,218,180,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,180,179,182,171,170,176,196],
[153,0,160,159,172,163,171,160,177],
[161,181,0,173,173,161,161,158,188],
[162,182,168,0,176,171,171,164,196],
[159,169,168,165,0,160,163,157,177],
[170,178,180,170,181,0,168,165,189],
[171,170,180,170,178,173,0,168,190],
[165,181,183,177,184,176,173,0,198],
[145,164,153,145,164,152,151,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,181,189,172,186,184,168,162],
[158,0,176,177,176,169,188,175,164],
[160,165,0,163,165,168,168,162,155],
[152,164,178,0,177,173,169,163,170],
[169,165,176,164,0,163,173,164,160],
[155,172,173,168,178,0,177,162,162],
[157,153,173,172,168,164,0,173,158],
[173,166,179,178,177,179,168,0,173],
[179,177,186,171,181,179,183,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,156,139,152,181,135,160,160],
[193,0,167,152,150,189,151,173,162],
[185,174,0,157,164,188,168,169,163],
[202,189,184,0,181,194,184,192,169],
[189,191,177,160,0,194,178,188,184],
[160,152,153,147,147,0,167,153,158],
[206,190,173,157,163,174,0,178,164],
[181,168,172,149,153,188,163,0,161],
[181,179,178,172,157,183,177,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,147,167,148,149,158,152,165],
[165,0,160,166,168,142,165,165,170],
[194,181,0,162,162,171,163,175,172],
[174,175,179,0,155,147,170,169,178],
[193,173,179,186,0,168,173,192,190],
[192,199,170,194,173,0,197,188,178],
[183,176,178,171,168,144,0,161,181],
[189,176,166,172,149,153,180,0,177],
[176,171,169,163,151,163,160,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,184,155,167,166,195,151,183],
[198,0,198,196,186,163,212,183,175],
[157,143,0,174,168,150,187,136,185],
[186,145,167,0,180,154,169,152,181],
[174,155,173,161,0,157,177,172,180],
[175,178,191,187,184,0,190,148,184],
[146,129,154,172,164,151,0,127,135],
[190,158,205,189,169,193,214,0,195],
[158,166,156,160,161,157,206,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,155,161,176,148,117,176,162],
[194,0,161,223,221,178,133,211,177],
[186,180,0,165,201,151,149,194,165],
[180,118,176,0,150,113,83,151,138],
[165,120,140,191,0,155,154,183,154],
[193,163,190,228,186,0,177,202,178],
[224,208,192,258,187,164,0,228,206],
[165,130,147,190,158,139,113,0,139],
[179,164,176,203,187,163,135,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,163,165,164,170,160,179,171],
[175,0,173,173,173,164,155,170,168],
[178,168,0,162,172,179,169,170,174],
[176,168,179,0,179,176,173,181,172],
[177,168,169,162,0,171,151,167,164],
[171,177,162,165,170,0,151,173,163],
[181,186,172,168,190,190,0,185,174],
[162,171,171,160,174,168,156,0,168],
[170,173,167,169,177,178,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,154,166,182,173,153,173],
[161,0,165,155,163,174,152,151,154],
[166,176,0,150,163,176,165,160,163],
[187,186,191,0,174,199,170,181,168],
[175,178,178,167,0,177,160,175,166],
[159,167,165,142,164,0,154,152,146],
[168,189,176,171,181,187,0,188,187],
[188,190,181,160,166,189,153,0,172],
[168,187,178,173,175,195,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,187,189,145,169,165,166,205],
[187,0,187,170,165,157,149,146,217],
[154,154,0,193,149,147,153,145,199],
[152,171,148,0,140,158,134,137,182],
[196,176,192,201,0,184,169,187,210],
[172,184,194,183,157,0,175,164,205],
[176,192,188,207,172,166,0,171,198],
[175,195,196,204,154,177,170,0,205],
[136,124,142,159,131,136,143,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,171,157,193,151,160,181,167],
[153,0,150,156,154,151,132,147,136],
[170,191,0,172,182,158,143,147,182],
[184,185,169,0,161,166,153,167,168],
[148,187,159,180,0,149,144,153,169],
[190,190,183,175,192,0,172,186,157],
[181,209,198,188,197,169,0,169,171],
[160,194,194,174,188,155,172,0,146],
[174,205,159,173,172,184,170,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,168,165,174,183,174,164,157],
[156,0,189,171,187,183,170,161,182],
[173,152,0,164,161,165,169,168,170],
[176,170,177,0,188,194,173,179,172],
[167,154,180,153,0,160,176,164,164],
[158,158,176,147,181,0,159,167,150],
[167,171,172,168,165,182,0,161,175],
[177,180,173,162,177,174,180,0,178],
[184,159,171,169,177,191,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,153,182,147,175,173,155,162],
[177,0,156,183,164,178,170,164,157],
[188,185,0,189,171,193,179,164,169],
[159,158,152,0,144,162,158,142,152],
[194,177,170,197,0,178,165,180,177],
[166,163,148,179,163,0,148,152,140],
[168,171,162,183,176,193,0,174,175],
[186,177,177,199,161,189,167,0,170],
[179,184,172,189,164,201,166,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,153,166,173,172,167,160,167],
[179,0,170,179,172,190,163,176,192],
[188,171,0,173,176,181,168,179,182],
[175,162,168,0,179,178,171,163,181],
[168,169,165,162,0,177,165,174,177],
[169,151,160,163,164,0,168,161,172],
[174,178,173,170,176,173,0,177,191],
[181,165,162,178,167,180,164,0,182],
[174,149,159,160,164,169,150,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,156,147,134,147,156,154,151],
[186,0,159,148,144,161,159,159,149],
[185,182,0,159,149,154,169,185,158],
[194,193,182,0,163,155,192,201,176],
[207,197,192,178,0,154,165,175,174],
[194,180,187,186,187,0,182,190,169],
[185,182,172,149,176,159,0,156,126],
[187,182,156,140,166,151,185,0,156],
[190,192,183,165,167,172,215,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,191,224,127,291,183,124,168],
[238,0,178,184,178,238,234,111,178],
[150,163,0,224,127,231,123,174,278],
[117,157,117,0,177,118,117,118,218],
[214,163,214,164,0,214,214,174,281],
[50,103,110,223,127,0,123,173,217],
[158,107,218,224,127,218,0,178,218],
[217,230,167,223,167,168,163,0,278],
[173,163,63,123,60,124,123,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,164,166,174,160,158,173,192],
[190,0,177,173,165,163,168,185,193],
[177,164,0,174,169,178,171,173,184],
[175,168,167,0,162,155,157,179,185],
[167,176,172,179,0,161,166,189,191],
[181,178,163,186,180,0,175,185,204],
[183,173,170,184,175,166,0,192,190],
[168,156,168,162,152,156,149,0,181],
[149,148,157,156,150,137,151,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,171,172,156,163,161,147,162],
[160,0,167,172,165,152,161,155,168],
[170,174,0,170,171,187,184,166,155],
[169,169,171,0,156,168,172,151,159],
[185,176,170,185,0,168,156,162,165],
[178,189,154,173,173,0,176,163,166],
[180,180,157,169,185,165,0,157,175],
[194,186,175,190,179,178,184,0,165],
[179,173,186,182,176,175,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,185,175,178,174,181,170,169],
[175,0,171,157,162,165,176,175,180],
[156,170,0,156,167,169,169,164,168],
[166,184,185,0,180,187,177,179,174],
[163,179,174,161,0,177,163,176,177],
[167,176,172,154,164,0,161,167,175],
[160,165,172,164,178,180,0,174,179],
[171,166,177,162,165,174,167,0,165],
[172,161,173,167,164,166,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,187,178,184,170,161,164,201],
[160,0,152,168,182,159,167,170,186],
[154,189,0,171,193,148,144,168,168],
[163,173,170,0,175,172,173,161,174],
[157,159,148,166,0,150,161,139,181],
[171,182,193,169,191,0,165,167,196],
[180,174,197,168,180,176,0,183,180],
[177,171,173,180,202,174,158,0,182],
[140,155,173,167,160,145,161,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,173,161,164,171,175,143],
[167,0,157,164,148,173,180,162,143],
[162,184,0,176,165,176,183,179,161],
[168,177,165,0,137,153,178,167,144],
[180,193,176,204,0,166,197,182,174],
[177,168,165,188,175,0,167,160,141],
[170,161,158,163,144,174,0,161,165],
[166,179,162,174,159,181,180,0,159],
[198,198,180,197,167,200,176,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,170,173,177,177,176,166],
[175,0,171,173,180,192,169,164,178],
[166,170,0,170,163,174,167,181,177],
[171,168,171,0,172,179,172,163,175],
[168,161,178,169,0,167,163,174,174],
[164,149,167,162,174,0,157,173,178],
[164,172,174,169,178,184,0,185,168],
[165,177,160,178,167,168,156,0,174],
[175,163,164,166,167,163,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,149,171,180,147,197,141,146],
[122,0,150,192,163,131,159,93,125],
[192,191,0,207,163,121,151,139,139],
[170,149,134,0,145,123,194,148,161],
[161,178,178,196,0,153,223,176,168],
[194,210,220,218,188,0,188,197,155],
[144,182,190,147,118,153,0,126,187],
[200,248,202,193,165,144,215,0,161],
[195,216,202,180,173,186,154,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,203,155,205,174,203,177,184],
[154,0,197,179,173,152,187,195,153],
[138,144,0,127,138,140,182,158,143],
[186,162,214,0,167,154,196,189,153],
[136,168,203,174,0,162,170,177,158],
[167,189,201,187,179,0,208,179,191],
[138,154,159,145,171,133,0,163,138],
[164,146,183,152,164,162,178,0,171],
[157,188,198,188,183,150,203,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,151,133,184,163,168,170,176],
[156,0,176,128,164,161,188,201,186],
[190,165,0,147,189,169,175,178,205],
[208,213,194,0,214,173,198,198,164],
[157,177,152,127,0,161,175,178,174],
[178,180,172,168,180,0,175,155,172],
[173,153,166,143,166,166,0,164,164],
[171,140,163,143,163,186,177,0,171],
[165,155,136,177,167,169,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,187,169,171,171,179,171,171],
[167,0,187,180,175,183,188,192,162],
[154,154,0,161,164,166,175,165,158],
[172,161,180,0,184,176,185,173,172],
[170,166,177,157,0,165,179,165,164],
[170,158,175,165,176,0,173,163,150],
[162,153,166,156,162,168,0,160,153],
[170,149,176,168,176,178,181,0,165],
[170,179,183,169,177,191,188,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,180,177,159,177,176,159,158],
[173,0,176,170,165,174,182,155,153],
[161,165,0,178,159,175,167,160,159],
[164,171,163,0,162,166,160,162,151],
[182,176,182,179,0,178,187,168,171],
[164,167,166,175,163,0,170,162,163],
[165,159,174,181,154,171,0,163,158],
[182,186,181,179,173,179,178,0,167],
[183,188,182,190,170,178,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,158,172,169,154,166,176,179],
[188,0,169,184,185,177,172,180,190],
[183,172,0,171,174,165,181,182,185],
[169,157,170,0,165,153,166,181,182],
[172,156,167,176,0,149,175,184,184],
[187,164,176,188,192,0,167,190,192],
[175,169,160,175,166,174,0,187,172],
[165,161,159,160,157,151,154,0,165],
[162,151,156,159,157,149,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,182,183,182,181,175,169],
[162,0,163,168,167,181,168,159,163],
[174,178,0,178,179,173,180,162,163],
[159,173,163,0,172,176,169,166,173],
[158,174,162,169,0,165,165,153,168],
[159,160,168,165,176,0,168,154,162],
[160,173,161,172,176,173,0,154,162],
[166,182,179,175,188,187,187,0,164],
[172,178,178,168,173,179,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,136,162,155,114,141,169,145],
[195,0,168,125,198,181,177,185,157],
[205,173,0,183,208,154,183,188,159],
[179,216,158,0,217,190,140,121,127],
[186,143,133,124,0,166,189,146,130],
[227,160,187,151,175,0,150,184,180],
[200,164,158,201,152,191,0,184,155],
[172,156,153,220,195,157,157,0,187],
[196,184,182,214,211,161,186,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,161,183,174,188,172,171,182],
[160,0,141,176,169,158,152,163,172],
[180,200,0,191,198,196,160,191,187],
[158,165,150,0,173,182,166,178,167],
[167,172,143,168,0,168,156,146,158],
[153,183,145,159,173,0,156,176,176],
[169,189,181,175,185,185,0,170,183],
[170,178,150,163,195,165,171,0,178],
[159,169,154,174,183,165,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,192,193,192,186,175,192],
[173,0,161,178,170,167,175,175,157],
[178,180,0,179,185,197,193,169,176],
[149,163,162,0,160,193,177,173,176],
[148,171,156,181,0,174,171,157,168],
[149,174,144,148,167,0,153,157,165],
[155,166,148,164,170,188,0,172,158],
[166,166,172,168,184,184,169,0,173],
[149,184,165,165,173,176,183,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,166,165,156,153,135,142,168],
[190,0,176,171,160,176,159,153,183],
[175,165,0,167,178,180,162,163,167],
[176,170,174,0,169,181,148,148,165],
[185,181,163,172,0,169,180,174,177],
[188,165,161,160,172,0,146,140,183],
[206,182,179,193,161,195,0,147,186],
[199,188,178,193,167,201,194,0,190],
[173,158,174,176,164,158,155,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,163,175,169,177,161,170],
[172,0,183,170,177,170,169,165,167],
[173,158,0,158,167,167,165,170,164],
[178,171,183,0,176,168,168,177,181],
[166,164,174,165,0,161,169,169,161],
[172,171,174,173,180,0,161,167,173],
[164,172,176,173,172,180,0,174,182],
[180,176,171,164,172,174,167,0,177],
[171,174,177,160,180,168,159,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,179,176,180,160,174,164],
[171,0,164,167,156,162,149,167,161],
[172,177,0,177,178,188,166,177,172],
[162,174,164,0,167,190,169,176,168],
[165,185,163,174,0,185,175,177,168],
[161,179,153,151,156,0,161,153,166],
[181,192,175,172,166,180,0,178,175],
[167,174,164,165,164,188,163,0,166],
[177,180,169,173,173,175,166,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,180,166,176,161,149,179,152],
[184,0,181,149,175,174,163,191,167],
[161,160,0,161,165,162,166,186,154],
[175,192,180,0,186,169,177,198,155],
[165,166,176,155,0,155,162,170,152],
[180,167,179,172,186,0,163,191,146],
[192,178,175,164,179,178,0,203,181],
[162,150,155,143,171,150,138,0,151],
[189,174,187,186,189,195,160,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,178,148,167,160,171,177,173],
[194,0,153,157,189,165,142,188,189],
[163,188,0,171,169,163,137,180,180],
[193,184,170,0,178,158,179,188,193],
[174,152,172,163,0,174,164,169,169],
[181,176,178,183,167,0,186,230,198],
[170,199,204,162,177,155,0,181,177],
[164,153,161,153,172,111,160,0,173],
[168,152,161,148,172,143,164,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,179,180,178,168,158,178,171],
[152,0,168,151,140,159,150,157,170],
[162,173,0,170,149,163,164,160,171],
[161,190,171,0,161,151,173,169,172],
[163,201,192,180,0,173,185,169,176],
[173,182,178,190,168,0,191,185,193],
[183,191,177,168,156,150,0,176,163],
[163,184,181,172,172,156,165,0,167],
[170,171,170,169,165,148,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,178,172,183,176,177,197,168],
[152,0,158,157,156,152,154,161,161],
[163,183,0,166,172,161,152,178,156],
[169,184,175,0,166,162,168,185,163],
[158,185,169,175,0,171,169,176,176],
[165,189,180,179,170,0,168,177,181],
[164,187,189,173,172,173,0,185,192],
[144,180,163,156,165,164,156,0,163],
[173,180,185,178,165,160,149,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,195,168,192,177,172,177,178],
[169,0,164,176,176,164,165,185,172],
[146,177,0,170,173,167,165,175,172],
[173,165,171,0,172,150,173,176,166],
[149,165,168,169,0,159,159,175,157],
[164,177,174,191,182,0,182,189,172],
[169,176,176,168,182,159,0,171,178],
[164,156,166,165,166,152,170,0,167],
[163,169,169,175,184,169,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,186,168,182,175,169,176,186],
[158,0,188,178,167,174,175,173,179],
[155,153,0,168,159,162,152,167,177],
[173,163,173,0,183,173,176,170,184],
[159,174,182,158,0,177,165,167,166],
[166,167,179,168,164,0,164,166,186],
[172,166,189,165,176,177,0,157,181],
[165,168,174,171,174,175,184,0,187],
[155,162,164,157,175,155,160,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,191,190,157,155,137,161,158],
[181,0,192,172,163,177,171,178,156],
[150,149,0,173,169,151,155,140,157],
[151,169,168,0,153,150,145,146,158],
[184,178,172,188,0,161,146,153,163],
[186,164,190,191,180,0,160,149,160],
[204,170,186,196,195,181,0,182,177],
[180,163,201,195,188,192,159,0,169],
[183,185,184,183,178,181,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,174,169,181,193,169,176],
[166,0,177,167,154,164,181,129,164],
[164,164,0,149,151,158,203,146,176],
[167,174,192,0,179,171,202,175,173],
[172,187,190,162,0,164,196,165,159],
[160,177,183,170,177,0,191,166,176],
[148,160,138,139,145,150,0,144,157],
[172,212,195,166,176,175,197,0,163],
[165,177,165,168,182,165,184,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,179,203,140,147,164,174,162],
[206,0,185,205,169,168,191,178,157],
[162,156,0,170,148,141,160,166,133],
[138,136,171,0,130,151,128,155,150],
[201,172,193,211,0,165,199,184,178],
[194,173,200,190,176,0,163,198,167],
[177,150,181,213,142,178,0,156,169],
[167,163,175,186,157,143,185,0,150],
[179,184,208,191,163,174,172,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,150,185,166,202,172,154,156],
[141,0,149,156,144,154,164,144,149],
[191,192,0,188,171,187,183,172,157],
[156,185,153,0,158,175,177,148,137],
[175,197,170,183,0,211,187,139,192],
[139,187,154,166,130,0,144,133,153],
[169,177,158,164,154,197,0,150,162],
[187,197,169,193,202,208,191,0,166],
[185,192,184,204,149,188,179,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,176,144,160,169,159,153],
[182,0,165,164,151,163,176,158,160],
[180,176,0,167,163,154,171,156,165],
[165,177,174,0,147,177,178,166,150],
[197,190,178,194,0,176,185,186,168],
[181,178,187,164,165,0,177,181,174],
[172,165,170,163,156,164,0,166,160],
[182,183,185,175,155,160,175,0,150],
[188,181,176,191,173,167,181,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,169,157,169,158,155,168],
[168,0,161,165,150,166,168,149,179],
[182,180,0,173,165,182,165,166,182],
[172,176,168,0,163,178,161,164,184],
[184,191,176,178,0,188,168,166,186],
[172,175,159,163,153,0,165,173,183],
[183,173,176,180,173,176,0,171,170],
[186,192,175,177,175,168,170,0,181],
[173,162,159,157,155,158,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,176,188,158,156,180,163],
[182,0,166,171,173,162,177,168,154],
[181,175,0,183,184,173,174,183,153],
[165,170,158,0,165,153,160,170,151],
[153,168,157,176,0,156,166,159,158],
[183,179,168,188,185,0,187,190,173],
[185,164,167,181,175,154,0,191,172],
[161,173,158,171,182,151,150,0,175],
[178,187,188,190,183,168,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,150,169,155,163,139,158,149],
[183,0,154,172,177,167,141,163,175],
[191,187,0,193,164,175,170,183,195],
[172,169,148,0,163,171,160,172,169],
[186,164,177,178,0,169,172,161,166],
[178,174,166,170,172,0,185,185,184],
[202,200,171,181,169,156,0,183,165],
[183,178,158,169,180,156,158,0,159],
[192,166,146,172,175,157,176,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,188,193,183,166,193,171,168],
[190,0,197,168,176,193,183,160,173],
[153,144,0,153,155,154,158,132,149],
[148,173,188,0,168,158,170,156,162],
[158,165,186,173,0,170,175,143,137],
[175,148,187,183,171,0,160,157,161],
[148,158,183,171,166,181,0,145,148],
[170,181,209,185,198,184,196,0,164],
[173,168,192,179,204,180,193,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,205,214,169,173,187,185,167],
[144,0,143,150,137,151,160,157,142],
[136,198,0,135,153,151,177,167,137],
[127,191,206,0,161,172,194,169,159],
[172,204,188,180,0,159,184,180,172],
[168,190,190,169,182,0,170,173,143],
[154,181,164,147,157,171,0,174,139],
[156,184,174,172,161,168,167,0,144],
[174,199,204,182,169,198,202,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,157,159,152,143,167,139,113],
[194,0,171,193,161,161,176,177,162],
[184,170,0,158,173,157,170,155,173],
[182,148,183,0,162,148,171,172,153],
[189,180,168,179,0,157,195,163,154],
[198,180,184,193,184,0,191,167,170],
[174,165,171,170,146,150,0,166,167],
[202,164,186,169,178,174,175,0,143],
[228,179,168,188,187,171,174,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,174,169,194,194,178,182],
[167,0,189,174,189,193,184,173,190],
[162,152,0,179,163,206,164,183,171],
[167,167,162,0,176,181,173,175,182],
[172,152,178,165,0,176,167,172,165],
[147,148,135,160,165,0,154,158,162],
[147,157,177,168,174,187,0,181,176],
[163,168,158,166,169,183,160,0,163],
[159,151,170,159,176,179,165,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,155,182,177,186,165,174,166],
[176,0,157,164,181,184,172,184,170],
[186,184,0,184,191,184,165,178,169],
[159,177,157,0,160,170,171,170,159],
[164,160,150,181,0,176,159,165,158],
[155,157,157,171,165,0,151,165,163],
[176,169,176,170,182,190,0,174,160],
[167,157,163,171,176,176,167,0,174],
[175,171,172,182,183,178,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,149,179,183,165,201,175,167],
[157,0,160,150,146,154,179,156,141],
[192,181,0,180,183,170,188,157,179],
[162,191,161,0,171,182,198,175,156],
[158,195,158,170,0,157,196,166,166],
[176,187,171,159,184,0,206,179,162],
[140,162,153,143,145,135,0,142,136],
[166,185,184,166,175,162,199,0,156],
[174,200,162,185,175,179,205,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,166,179,175,166,169,154,175],
[160,0,174,161,170,156,167,163,179],
[175,167,0,162,175,180,171,175,174],
[162,180,179,0,165,141,161,163,166],
[166,171,166,176,0,166,161,170,148],
[175,185,161,200,175,0,188,178,163],
[172,174,170,180,180,153,0,177,159],
[187,178,166,178,171,163,164,0,158],
[166,162,167,175,193,178,182,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,157,158,189,159,162,167,144],
[181,0,175,168,174,176,171,177,178],
[184,166,0,162,175,191,184,182,167],
[183,173,179,0,180,196,189,179,169],
[152,167,166,161,0,182,166,174,157],
[182,165,150,145,159,0,166,161,153],
[179,170,157,152,175,175,0,183,167],
[174,164,159,162,167,180,158,0,171],
[197,163,174,172,184,188,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,168,182,163,167,172,155],
[172,0,180,184,183,180,168,172,162],
[174,161,0,170,175,177,175,179,170],
[173,157,171,0,169,174,179,173,168],
[159,158,166,172,0,167,165,154,164],
[178,161,164,167,174,0,177,174,162],
[174,173,166,162,176,164,0,174,171],
[169,169,162,168,187,167,167,0,159],
[186,179,171,173,177,179,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,171,178,168,170,158,165,176],
[188,0,175,172,179,185,186,165,180],
[170,166,0,161,168,170,162,166,160],
[163,169,180,0,174,179,170,175,179],
[173,162,173,167,0,163,162,168,172],
[171,156,171,162,178,0,164,173,173],
[183,155,179,171,179,177,0,176,185],
[176,176,175,166,173,168,165,0,183],
[165,161,181,162,169,168,156,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,178,162,161,173,173,175],
[171,0,165,153,151,155,158,163,147],
[161,176,0,176,175,167,169,175,170],
[163,188,165,0,162,172,156,186,177],
[179,190,166,179,0,175,179,184,193],
[180,186,174,169,166,0,173,172,181],
[168,183,172,185,162,168,0,181,168],
[168,178,166,155,157,169,160,0,170],
[166,194,171,164,148,160,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,178,164,171,180,145,150,189],
[145,0,164,153,159,186,160,157,152],
[163,177,0,167,157,176,150,160,150],
[177,188,174,0,168,162,176,178,182],
[170,182,184,173,0,189,154,170,185],
[161,155,165,179,152,0,172,145,145],
[196,181,191,165,187,169,0,189,171],
[191,184,181,163,171,196,152,0,186],
[152,189,191,159,156,196,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,189,172,168,179,164,184],
[163,0,182,167,164,158,183,175,188],
[173,159,0,165,155,161,164,171,162],
[152,174,176,0,165,158,178,175,180],
[169,177,186,176,0,179,180,179,175],
[173,183,180,183,162,0,194,185,186],
[162,158,177,163,161,147,0,158,176],
[177,166,170,166,162,156,183,0,176],
[157,153,179,161,166,155,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,151,116,160,119,170,129,123],
[192,0,213,204,181,162,198,188,162],
[190,128,0,155,154,144,163,179,136],
[225,137,186,0,162,166,189,178,135],
[181,160,187,179,0,143,160,133,179],
[222,179,197,175,198,0,178,202,170],
[171,143,178,152,181,163,0,159,152],
[212,153,162,163,208,139,182,0,178],
[218,179,205,206,162,171,189,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,177,155,188,173,168,187],
[167,0,191,174,176,196,166,177,183],
[168,150,0,177,175,181,159,169,165],
[164,167,164,0,166,192,173,179,186],
[186,165,166,175,0,185,161,180,199],
[153,145,160,149,156,0,132,160,183],
[168,175,182,168,180,209,0,177,192],
[173,164,172,162,161,181,164,0,183],
[154,158,176,155,142,158,149,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,182,178,185,189,169,182],
[169,0,181,175,174,181,186,178,175],
[158,160,0,178,167,172,175,165,158],
[159,166,163,0,170,170,180,172,158],
[163,167,174,171,0,191,186,155,171],
[156,160,169,171,150,0,165,159,152],
[152,155,166,161,155,176,0,163,155],
[172,163,176,169,186,182,178,0,165],
[159,166,183,183,170,189,186,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,163,184,175,167,168,185,159],
[168,0,171,188,177,185,166,174,169],
[178,170,0,194,189,178,173,182,146],
[157,153,147,0,166,158,149,170,158],
[166,164,152,175,0,188,162,177,159],
[174,156,163,183,153,0,152,193,151],
[173,175,168,192,179,189,0,194,178],
[156,167,159,171,164,148,147,0,142],
[182,172,195,183,182,190,163,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,136,125,122,224,158,171,157],
[205,0,177,125,169,227,168,210,157],
[205,164,0,203,189,225,199,275,205],
[216,216,138,0,183,251,197,274,162],
[219,172,152,158,0,245,133,226,152],
[117,114,116,90,96,0,122,206,78],
[183,173,142,144,208,219,0,267,191],
[170,131,66,67,115,135,74,0,107],
[184,184,136,179,189,263,150,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,231,199,159,181,230,139,212],
[107,0,177,144,144,144,177,39,279],
[110,164,0,150,123,75,123,88,196],
[142,197,191,0,133,157,121,135,174],
[182,197,218,208,0,200,180,148,236],
[160,197,266,184,141,0,228,174,214],
[111,164,218,220,161,113,0,129,214],
[202,302,253,206,193,167,212,0,341],
[129,62,145,167,105,127,127,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,176,179,184,170,166,167],
[180,0,169,192,175,173,192,159,178],
[168,172,0,195,183,169,183,161,179],
[165,149,146,0,150,155,167,147,165],
[162,166,158,191,0,161,163,165,155],
[157,168,172,186,180,0,165,161,172],
[171,149,158,174,178,176,0,169,174],
[175,182,180,194,176,180,172,0,170],
[174,163,162,176,186,169,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,199,157,154,180,192,173,179],
[138,0,154,160,153,172,177,129,148],
[142,187,0,175,154,176,179,166,156],
[184,181,166,0,190,196,208,161,187],
[187,188,187,151,0,187,195,163,183],
[161,169,165,145,154,0,172,141,147],
[149,164,162,133,146,169,0,133,148],
[168,212,175,180,178,200,208,0,177],
[162,193,185,154,158,194,193,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,184,186,169,162,160,157,164],
[167,0,201,192,180,172,176,170,177],
[157,140,0,160,177,164,167,157,150],
[155,149,181,0,173,171,166,150,155],
[172,161,164,168,0,159,168,160,176],
[179,169,177,170,182,0,173,173,179],
[181,165,174,175,173,168,0,170,168],
[184,171,184,191,181,168,171,0,190],
[177,164,191,186,165,162,173,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,157,167,171,152,161,161,158],
[184,0,166,197,176,154,170,163,170],
[184,175,0,177,174,168,168,167,177],
[174,144,164,0,173,153,145,158,156],
[170,165,167,168,0,157,160,167,152],
[189,187,173,188,184,0,174,169,168],
[180,171,173,196,181,167,0,183,172],
[180,178,174,183,174,172,158,0,164],
[183,171,164,185,189,173,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,182,175,186,168,159,191,175],
[157,0,161,183,171,152,160,165,135],
[159,180,0,168,170,155,159,154,154],
[166,158,173,0,165,151,135,174,168],
[155,170,171,176,0,158,162,164,153],
[173,189,186,190,183,0,153,196,167],
[182,181,182,206,179,188,0,187,157],
[150,176,187,167,177,145,154,0,158],
[166,206,187,173,188,174,184,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,155,172,186,160,158,171,172],
[166,0,170,175,175,170,150,159,169],
[186,171,0,174,185,166,155,166,181],
[169,166,167,0,181,161,160,171,171],
[155,166,156,160,0,164,162,164,161],
[181,171,175,180,177,0,175,170,179],
[183,191,186,181,179,166,0,168,185],
[170,182,175,170,177,171,173,0,184],
[169,172,160,170,180,162,156,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,169,159,166,174,151,161,161],
[150,0,179,174,141,165,163,165,174],
[172,162,0,157,148,169,175,185,162],
[182,167,184,0,180,185,171,184,174],
[175,200,193,161,0,158,173,174,157],
[167,176,172,156,183,0,156,168,176],
[190,178,166,170,168,185,0,166,178],
[180,176,156,157,167,173,175,0,171],
[180,167,179,167,184,165,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,169,163,156,167,167,182,163],
[135,0,149,124,128,152,134,142,139],
[172,192,0,142,127,170,154,187,152],
[178,217,199,0,172,178,145,190,155],
[185,213,214,169,0,168,181,184,179],
[174,189,171,163,173,0,153,182,171],
[174,207,187,196,160,188,0,166,175],
[159,199,154,151,157,159,175,0,167],
[178,202,189,186,162,170,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,190,177,189,172,167,165,192],
[178,0,166,151,165,166,192,160,179],
[151,175,0,169,171,161,165,155,175],
[164,190,172,0,184,169,174,170,195],
[152,176,170,157,0,174,148,154,176],
[169,175,180,172,167,0,168,155,190],
[174,149,176,167,193,173,0,194,190],
[176,181,186,171,187,186,147,0,184],
[149,162,166,146,165,151,151,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,173,166,183,163,183,175],
[165,0,161,184,173,187,175,176,157],
[165,180,0,184,178,199,169,170,167],
[168,157,157,0,164,176,159,163,159],
[175,168,163,177,0,173,160,172,164],
[158,154,142,165,168,0,157,161,158],
[178,166,172,182,181,184,0,166,171],
[158,165,171,178,169,180,175,0,167],
[166,184,174,182,177,183,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,149,178,182,183,157,173],
[171,0,156,139,175,156,179,152,167],
[182,185,0,155,186,164,178,156,165],
[192,202,186,0,197,183,201,166,189],
[163,166,155,144,0,167,168,145,160],
[159,185,177,158,174,0,193,178,157],
[158,162,163,140,173,148,0,154,149],
[184,189,185,175,196,163,187,0,167],
[168,174,176,152,181,184,192,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,174,173,180,159,165,178],
[168,0,164,189,165,179,176,163,186],
[175,177,0,183,185,182,164,170,177],
[167,152,158,0,161,168,159,160,166],
[168,176,156,180,0,175,171,167,178],
[161,162,159,173,166,0,160,155,169],
[182,165,177,182,170,181,0,171,196],
[176,178,171,181,174,186,170,0,185],
[163,155,164,175,163,172,145,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,191,170,181,171,170,168],
[160,0,176,170,162,162,160,157,151],
[160,165,0,181,150,154,154,154,161],
[150,171,160,0,158,152,146,156,150],
[171,179,191,183,0,179,167,166,177],
[160,179,187,189,162,0,163,169,173],
[170,181,187,195,174,178,0,172,166],
[171,184,187,185,175,172,169,0,165],
[173,190,180,191,164,168,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,166,176,165,164,161,149,170],
[161,0,170,169,173,163,174,165,169],
[175,171,0,181,163,166,163,166,172],
[165,172,160,0,165,167,160,146,162],
[176,168,178,176,0,169,171,156,173],
[177,178,175,174,172,0,169,160,180],
[180,167,178,181,170,172,0,171,176],
[192,176,175,195,185,181,170,0,172],
[171,172,169,179,168,161,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,174,170,154,167,169,169,164],
[178,0,173,174,162,162,174,173,166],
[167,168,0,165,162,155,166,152,150],
[171,167,176,0,150,158,170,168,167],
[187,179,179,191,0,173,186,168,175],
[174,179,186,183,168,0,178,158,181],
[172,167,175,171,155,163,0,168,173],
[172,168,189,173,173,183,173,0,168],
[177,175,191,174,166,160,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,193,181,169,169,179,180,180],
[148,0,169,179,153,158,171,166,142],
[148,172,0,169,145,156,159,144,156],
[160,162,172,0,162,164,166,171,155],
[172,188,196,179,0,169,171,165,164],
[172,183,185,177,172,0,178,165,183],
[162,170,182,175,170,163,0,175,155],
[161,175,197,170,176,176,166,0,172],
[161,199,185,186,177,158,186,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,160,177,174,172,176,182,172],
[177,0,164,182,168,179,166,162,157],
[181,177,0,167,182,187,175,172,171],
[164,159,174,0,184,170,165,169,163],
[167,173,159,157,0,173,154,168,164],
[169,162,154,171,168,0,172,164,157],
[165,175,166,176,187,169,0,169,165],
[159,179,169,172,173,177,172,0,158],
[169,184,170,178,177,184,176,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,195,182,180,193,168,176,184],
[160,0,172,199,164,180,175,185,177],
[146,169,0,184,171,175,161,172,168],
[159,142,157,0,154,179,151,180,148],
[161,177,170,187,0,185,157,174,190],
[148,161,166,162,156,0,152,146,163],
[173,166,180,190,184,189,0,191,174],
[165,156,169,161,167,195,150,0,158],
[157,164,173,193,151,178,167,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,181,183,185,210,199,212,157],
[144,0,154,187,147,188,171,185,156],
[160,187,0,165,153,199,177,192,158],
[158,154,176,0,140,190,139,199,129],
[156,194,188,201,0,232,171,217,178],
[131,153,142,151,109,0,141,162,141],
[142,170,164,202,170,200,0,177,179],
[129,156,149,142,124,179,164,0,162],
[184,185,183,212,163,200,162,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,169,167,186,176,157,166],
[171,0,169,186,182,194,168,154,174],
[179,172,0,154,161,189,186,155,178],
[172,155,187,0,170,191,186,174,173],
[174,159,180,171,0,206,186,156,186],
[155,147,152,150,135,0,165,125,147],
[165,173,155,155,155,176,0,147,173],
[184,187,186,167,185,216,194,0,193],
[175,167,163,168,155,194,168,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,158,179,179,169,168,163,176],
[161,0,171,181,203,184,175,187,175],
[183,170,0,185,208,180,188,202,180],
[162,160,156,0,183,143,173,179,146],
[162,138,133,158,0,158,160,165,171],
[172,157,161,198,183,0,169,189,161],
[173,166,153,168,181,172,0,179,173],
[178,154,139,162,176,152,162,0,161],
[165,166,161,195,170,180,168,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,159,160,168,174,158,177,171],
[184,0,174,174,173,163,164,185,173],
[182,167,0,165,174,180,157,183,177],
[181,167,176,0,174,157,175,179,176],
[173,168,167,167,0,167,157,191,177],
[167,178,161,184,174,0,166,182,179],
[183,177,184,166,184,175,0,187,180],
[164,156,158,162,150,159,154,0,166],
[170,168,164,165,164,162,161,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,157,165,154,174,166,155,157],
[181,0,167,164,167,174,170,171,177],
[184,174,0,196,172,184,180,179,164],
[176,177,145,0,159,182,177,170,164],
[187,174,169,182,0,179,185,191,180],
[167,167,157,159,162,0,178,159,168],
[175,171,161,164,156,163,0,166,168],
[186,170,162,171,150,182,175,0,159],
[184,164,177,177,161,173,173,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,167,189,194,182,188,196],
[163,0,169,181,172,180,178,191,185],
[156,172,0,167,177,187,176,193,173],
[174,160,174,0,191,199,159,188,201],
[152,169,164,150,0,178,177,185,193],
[147,161,154,142,163,0,179,168,170],
[159,163,165,182,164,162,0,177,170],
[153,150,148,153,156,173,164,0,153],
[145,156,168,140,148,171,171,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,165,184,153,172,175,156,183],
[140,0,140,142,141,146,156,139,183],
[176,201,0,171,151,161,169,176,172],
[157,199,170,0,157,147,158,151,188],
[188,200,190,184,0,174,172,164,185],
[169,195,180,194,167,0,166,162,202],
[166,185,172,183,169,175,0,149,199],
[185,202,165,190,177,179,192,0,192],
[158,158,169,153,156,139,142,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,148,172,163,172,138,159,166],
[167,0,172,172,180,183,170,166,181],
[193,169,0,179,174,170,163,167,164],
[169,169,162,0,162,183,153,167,181],
[178,161,167,179,0,169,166,176,169],
[169,158,171,158,172,0,171,167,172],
[203,171,178,188,175,170,0,169,184],
[182,175,174,174,165,174,172,0,175],
[175,160,177,160,172,169,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,202,184,199,163,164,192],
[180,0,156,184,196,189,179,177,183],
[165,185,0,192,169,175,183,171,159],
[139,157,149,0,135,168,120,137,140],
[157,145,172,206,0,175,176,165,166],
[142,152,166,173,166,0,153,173,157],
[178,162,158,221,165,188,0,205,197],
[177,164,170,204,176,168,136,0,196],
[149,158,182,201,175,184,144,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,155,174,176,159,158,178,164],
[175,0,175,167,175,166,175,176,173],
[186,166,0,178,184,173,162,186,169],
[167,174,163,0,174,166,175,176,177],
[165,166,157,167,0,158,184,164,163],
[182,175,168,175,183,0,169,185,168],
[183,166,179,166,157,172,0,177,160],
[163,165,155,165,177,156,164,0,164],
[177,168,172,164,178,173,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,137,152,142,193,148,141,175],
[199,0,163,173,158,177,192,178,193],
[204,178,0,155,131,192,158,163,177],
[189,168,186,0,155,197,171,165,188],
[199,183,210,186,0,208,191,166,193],
[148,164,149,144,133,0,131,155,146],
[193,149,183,170,150,210,0,167,188],
[200,163,178,176,175,186,174,0,171],
[166,148,164,153,148,195,153,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,155,148,146,153,135,152,177],
[180,0,177,175,175,158,176,165,189],
[186,164,0,159,159,144,168,154,173],
[193,166,182,0,169,176,140,169,172],
[195,166,182,172,0,169,164,166,186],
[188,183,197,165,172,0,180,157,204],
[206,165,173,201,177,161,0,178,171],
[189,176,187,172,175,184,163,0,182],
[164,152,168,169,155,137,170,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,198,175,199,183,188,176,146],
[161,0,175,164,158,161,172,143,148],
[143,166,0,180,179,165,160,160,140],
[166,177,161,0,196,176,157,147,152],
[142,183,162,145,0,184,159,190,157],
[158,180,176,165,157,0,217,149,173],
[153,169,181,184,182,124,0,172,143],
[165,198,181,194,151,192,169,0,160],
[195,193,201,189,184,168,198,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,154,169,158,156,161,155,177],
[177,0,164,194,180,181,177,169,177],
[187,177,0,189,168,193,188,186,195],
[172,147,152,0,176,154,156,165,180],
[183,161,173,165,0,179,171,180,164],
[185,160,148,187,162,0,169,172,175],
[180,164,153,185,170,172,0,170,196],
[186,172,155,176,161,169,171,0,184],
[164,164,146,161,177,166,145,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,159,181,186,163,164,160],
[173,0,181,170,173,175,152,158,163],
[172,160,0,151,167,152,153,167,155],
[182,171,190,0,187,177,157,170,173],
[160,168,174,154,0,151,157,163,160],
[155,166,189,164,190,0,167,189,174],
[178,189,188,184,184,174,0,165,167],
[177,183,174,171,178,152,176,0,162],
[181,178,186,168,181,167,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,192,177,189,176,170,195,214],
[154,0,188,161,162,167,169,183,180],
[149,153,0,159,141,141,177,171,178],
[164,180,182,0,153,165,174,196,203],
[152,179,200,188,0,156,176,190,191],
[165,174,200,176,185,0,190,198,187],
[171,172,164,167,165,151,0,164,181],
[146,158,170,145,151,143,177,0,157],
[127,161,163,138,150,154,160,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,120,165,124,118,159,198],
[180,0,177,144,168,157,143,178,174],
[171,164,0,149,158,141,159,179,171],
[221,197,192,0,173,180,170,211,176],
[176,173,183,168,0,156,162,172,180],
[217,184,200,161,185,0,195,197,210],
[223,198,182,171,179,146,0,203,185],
[182,163,162,130,169,144,138,0,176],
[143,167,170,165,161,131,156,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,244,184,224,244,146,212,237],
[116,0,132,214,195,230,133,180,152],
[97,209,0,181,151,231,121,179,154],
[157,127,160,0,173,214,151,183,162],
[117,146,190,168,0,203,182,227,218],
[97,111,110,127,138,0,142,170,125],
[195,208,220,190,159,199,0,220,222],
[129,161,162,158,114,171,121,0,157],
[104,189,187,179,123,216,119,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,185,177,170,174,173,168,161],
[156,0,172,156,148,156,162,155,146],
[156,169,0,151,166,163,168,161,149],
[164,185,190,0,176,174,170,176,151],
[171,193,175,165,0,175,175,169,153],
[167,185,178,167,166,0,160,162,153],
[168,179,173,171,166,181,0,167,158],
[173,186,180,165,172,179,174,0,178],
[180,195,192,190,188,188,183,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,159,164,169,163,160,170,187],
[182,0,162,155,165,175,152,162,170],
[182,179,0,163,168,161,163,172,186],
[177,186,178,0,174,185,160,186,183],
[172,176,173,167,0,176,171,171,173],
[178,166,180,156,165,0,161,176,178],
[181,189,178,181,170,180,0,179,180],
[171,179,169,155,170,165,162,0,179],
[154,171,155,158,168,163,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,211,182,202,183,159,164,180],
[155,0,176,155,178,151,165,140,167],
[130,165,0,138,158,164,160,156,158],
[159,186,203,0,205,173,183,174,188],
[139,163,183,136,0,157,155,157,169],
[158,190,177,168,184,0,164,165,181],
[182,176,181,158,186,177,0,157,183],
[177,201,185,167,184,176,184,0,189],
[161,174,183,153,172,160,158,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,191,185,168,191,186,182,163],
[163,0,171,175,156,170,183,158,153],
[150,170,0,170,157,158,162,158,160],
[156,166,171,0,157,165,169,164,153],
[173,185,184,184,0,174,170,181,162],
[150,171,183,176,167,0,176,174,167],
[155,158,179,172,171,165,0,171,163],
[159,183,183,177,160,167,170,0,172],
[178,188,181,188,179,174,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,147,167,173,170,152,158,171],
[176,0,183,161,174,169,174,171,190],
[194,158,0,163,160,172,160,161,177],
[174,180,178,0,163,170,176,178,183],
[168,167,181,178,0,164,166,168,181],
[171,172,169,171,177,0,175,167,173],
[189,167,181,165,175,166,0,182,164],
[183,170,180,163,173,174,159,0,160],
[170,151,164,158,160,168,177,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,213,168,181,185,171,212,206],
[160,0,182,173,174,193,156,191,217],
[128,159,0,143,155,162,152,150,169],
[173,168,198,0,164,163,155,196,178],
[160,167,186,177,0,169,148,172,202],
[156,148,179,178,172,0,189,189,211],
[170,185,189,186,193,152,0,174,203],
[129,150,191,145,169,152,167,0,193],
[135,124,172,163,139,130,138,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,164,177,164,172,172,173,172],
[170,0,171,186,161,174,161,171,181],
[177,170,0,177,160,170,169,173,177],
[164,155,164,0,156,168,152,163,158],
[177,180,181,185,0,180,169,179,186],
[169,167,171,173,161,0,158,164,150],
[169,180,172,189,172,183,0,184,192],
[168,170,168,178,162,177,157,0,165],
[169,160,164,183,155,191,149,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,161,173,185,178,179,178,164],
[166,0,147,176,184,171,172,163,164],
[180,194,0,171,164,175,177,172,165],
[168,165,170,0,180,176,169,174,177],
[156,157,177,161,0,170,157,169,157],
[163,170,166,165,171,0,169,167,170],
[162,169,164,172,184,172,0,172,171],
[163,178,169,167,172,174,169,0,153],
[177,177,176,164,184,171,170,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,151,153,152,163,167,155,164],
[178,0,160,166,165,158,173,168,166],
[190,181,0,165,176,176,166,183,182],
[188,175,176,0,165,178,168,175,164],
[189,176,165,176,0,180,171,172,181],
[178,183,165,163,161,0,164,178,167],
[174,168,175,173,170,177,0,172,180],
[186,173,158,166,169,163,169,0,174],
[177,175,159,177,160,174,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,174,177,175,159,165,170],
[172,0,169,167,173,175,172,171,173],
[174,172,0,178,166,166,158,165,169],
[167,174,163,0,175,172,162,166,166],
[164,168,175,166,0,176,161,161,172],
[166,166,175,169,165,0,151,157,157],
[182,169,183,179,180,190,0,170,174],
[176,170,176,175,180,184,171,0,172],
[171,168,172,175,169,184,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,172,155,146,162,153,158,145],
[185,0,173,163,173,196,176,193,165],
[169,168,0,162,170,182,175,186,159],
[186,178,179,0,166,190,179,179,182],
[195,168,171,175,0,192,176,182,167],
[179,145,159,151,149,0,164,160,130],
[188,165,166,162,165,177,0,184,176],
[183,148,155,162,159,181,157,0,137],
[196,176,182,159,174,211,165,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,178,137,132,150,172,141,176],
[185,0,148,186,193,177,213,171,237],
[163,193,0,176,196,183,191,168,193],
[204,155,165,0,176,170,202,133,164],
[209,148,145,165,0,205,189,211,185],
[191,164,158,171,136,0,158,154,170],
[169,128,150,139,152,183,0,155,160],
[200,170,173,208,130,187,186,0,181],
[165,104,148,177,156,171,181,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,149,165,157,154,166,135,161],
[172,0,163,160,161,149,178,161,164],
[192,178,0,188,179,177,181,169,177],
[176,181,153,0,167,160,193,157,167],
[184,180,162,174,0,149,190,154,162],
[187,192,164,181,192,0,188,180,182],
[175,163,160,148,151,153,0,166,174],
[206,180,172,184,187,161,175,0,175],
[180,177,164,174,179,159,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,175,143,171,212,174,196,323],
[107,0,129,131,48,147,144,158,278],
[166,212,0,153,152,274,151,216,281],
[198,210,188,0,177,265,144,202,265],
[170,293,189,164,0,237,148,232,296],
[129,194,67,76,104,0,116,100,177],
[167,197,190,197,193,225,0,169,254],
[145,183,125,139,109,241,172,0,241],
[18,63,60,76,45,164,87,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,173,182,168,172,188,180],
[164,0,171,175,176,163,188,183,180],
[172,170,0,178,165,159,186,181,160],
[168,166,163,0,173,169,173,181,170],
[159,165,176,168,0,169,183,185,173],
[173,178,182,172,172,0,186,176,168],
[169,153,155,168,158,155,0,175,162],
[153,158,160,160,156,165,166,0,160],
[161,161,181,171,168,173,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,165,169,181,160,167,157],
[175,0,178,188,171,185,171,169,172],
[175,163,0,175,157,188,171,179,166],
[176,153,166,0,168,172,168,156,171],
[172,170,184,173,0,175,170,170,172],
[160,156,153,169,166,0,164,167,164],
[181,170,170,173,171,177,0,167,164],
[174,172,162,185,171,174,174,0,169],
[184,169,175,170,169,177,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,166,154,166,143,171,172,160],
[158,0,178,156,158,173,156,161,146],
[175,163,0,150,141,164,156,173,160],
[187,185,191,0,173,178,163,178,176],
[175,183,200,168,0,181,158,181,170],
[198,168,177,163,160,0,175,179,175],
[170,185,185,178,183,166,0,167,163],
[169,180,168,163,160,162,174,0,158],
[181,195,181,165,171,166,178,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,170,159,170,162,148,166,166],
[188,0,166,165,179,173,168,179,187],
[171,175,0,147,155,174,163,176,173],
[182,176,194,0,172,170,182,183,190],
[171,162,186,169,0,172,155,179,171],
[179,168,167,171,169,0,157,179,170],
[193,173,178,159,186,184,0,179,183],
[175,162,165,158,162,162,162,0,165],
[175,154,168,151,170,171,158,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,185,192,179,184,166,178],
[158,0,164,186,176,181,178,165,177],
[171,177,0,205,194,183,183,169,165],
[156,155,136,0,162,161,161,146,150],
[149,165,147,179,0,170,163,149,152],
[162,160,158,180,171,0,173,165,151],
[157,163,158,180,178,168,0,172,159],
[175,176,172,195,192,176,169,0,167],
[163,164,176,191,189,190,182,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,172,201,182,167,189,201,178],
[151,0,171,166,137,176,183,166,154],
[169,170,0,181,162,174,180,182,167],
[140,175,160,0,166,182,175,170,153],
[159,204,179,175,0,174,168,179,177],
[174,165,167,159,167,0,169,176,154],
[152,158,161,166,173,172,0,182,147],
[140,175,159,171,162,165,159,0,146],
[163,187,174,188,164,187,194,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,171,175,187,172,194,162],
[170,0,186,169,160,176,178,191,174],
[165,155,0,164,163,176,168,171,167],
[170,172,177,0,154,175,166,194,154],
[166,181,178,187,0,187,189,190,177],
[154,165,165,166,154,0,156,189,166],
[169,163,173,175,152,185,0,185,174],
[147,150,170,147,151,152,156,0,152],
[179,167,174,187,164,175,167,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,157,152,161,146,151,151,151],
[191,0,177,174,172,177,161,173,167],
[184,164,0,191,174,177,165,179,188],
[189,167,150,0,180,160,170,172,179],
[180,169,167,161,0,190,154,164,177],
[195,164,164,181,151,0,175,167,163],
[190,180,176,171,187,166,0,172,169],
[190,168,162,169,177,174,169,0,175],
[190,174,153,162,164,178,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,178,203,199,191,162,173,194],
[141,0,179,173,154,167,142,119,171],
[163,162,0,188,177,184,133,161,184],
[138,168,153,0,175,174,150,154,188],
[142,187,164,166,0,167,145,143,158],
[150,174,157,167,174,0,141,132,165],
[179,199,208,191,196,200,0,161,179],
[168,222,180,187,198,209,180,0,202],
[147,170,157,153,183,176,162,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,153,181,178,182,162,197,141],
[154,0,143,116,157,172,151,139,138],
[188,198,0,172,176,228,165,158,145],
[160,225,169,0,179,198,171,190,161],
[163,184,165,162,0,212,166,188,172],
[159,169,113,143,129,0,144,142,146],
[179,190,176,170,175,197,0,191,151],
[144,202,183,151,153,199,150,0,153],
[200,203,196,180,169,195,190,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,196,186,166,193,194,184,170],
[168,0,185,184,155,174,192,187,173],
[145,156,0,169,162,166,191,180,162],
[155,157,172,0,149,172,167,164,156],
[175,186,179,192,0,191,191,189,159],
[148,167,175,169,150,0,171,163,158],
[147,149,150,174,150,170,0,163,153],
[157,154,161,177,152,178,178,0,170],
[171,168,179,185,182,183,188,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,144,183,158,200,186,150,178],
[172,0,146,177,130,167,183,155,158],
[197,195,0,164,185,223,200,164,199],
[158,164,177,0,156,222,177,160,176],
[183,211,156,185,0,208,184,179,197],
[141,174,118,119,133,0,133,130,169],
[155,158,141,164,157,208,0,162,174],
[191,186,177,181,162,211,179,0,196],
[163,183,142,165,144,172,167,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,163,167,165,173,150,181],
[178,0,171,169,179,163,161,160,180],
[174,170,0,184,170,172,179,171,177],
[178,172,157,0,173,162,176,172,167],
[174,162,171,168,0,177,182,159,172],
[176,178,169,179,164,0,181,164,173],
[168,180,162,165,159,160,0,158,170],
[191,181,170,169,182,177,183,0,182],
[160,161,164,174,169,168,171,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,108,150,173,191,159,197,172],
[177,0,110,178,222,109,143,200,117],
[233,231,0,201,243,226,159,200,192],
[191,163,140,0,218,170,180,157,187],
[168,119,98,123,0,123,191,133,110],
[150,232,115,171,218,0,118,194,117],
[182,198,182,161,150,223,0,166,89],
[144,141,141,184,208,147,175,0,85],
[169,224,149,154,231,224,252,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,156,167,190,184,166,183,178],
[171,0,183,168,191,160,157,198,198],
[185,158,0,150,179,165,146,191,168],
[174,173,191,0,198,179,147,188,182],
[151,150,162,143,0,153,120,157,154],
[157,181,176,162,188,0,141,198,163],
[175,184,195,194,221,200,0,207,165],
[158,143,150,153,184,143,134,0,156],
[163,143,173,159,187,178,176,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,159,174,173,173,169,175,186],
[164,0,150,173,165,163,162,182,176],
[182,191,0,181,167,179,167,177,179],
[167,168,160,0,155,160,164,176,171],
[168,176,174,186,0,173,174,175,176],
[168,178,162,181,168,0,168,162,176],
[172,179,174,177,167,173,0,178,166],
[166,159,164,165,166,179,163,0,164],
[155,165,162,170,165,165,175,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,170,174,171,162,168,163],
[167,0,162,178,179,169,163,167,160],
[176,179,0,174,167,170,166,169,166],
[171,163,167,0,175,156,160,177,168],
[167,162,174,166,0,169,159,153,155],
[170,172,171,185,172,0,155,171,165],
[179,178,175,181,182,186,0,190,169],
[173,174,172,164,188,170,151,0,176],
[178,181,175,173,186,176,172,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,178,149,168,179,189,158,150],
[203,0,190,158,185,186,173,160,183],
[163,151,0,159,171,173,157,167,164],
[192,183,182,0,169,196,179,174,179],
[173,156,170,172,0,171,174,157,174],
[162,155,168,145,170,0,157,138,165],
[152,168,184,162,167,184,0,157,173],
[183,181,174,167,184,203,184,0,167],
[191,158,177,162,167,176,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,152,162,203,159,171,172,145],
[160,0,171,154,181,155,169,166,142],
[189,170,0,169,184,167,185,184,182],
[179,187,172,0,163,153,196,158,153],
[138,160,157,178,0,159,173,160,141],
[182,186,174,188,182,0,184,180,158],
[170,172,156,145,168,157,0,141,142],
[169,175,157,183,181,161,200,0,176],
[196,199,159,188,200,183,199,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,150,170,199,190,155,187,187],
[184,0,167,161,183,181,154,176,184],
[191,174,0,176,193,192,166,185,193],
[171,180,165,0,175,179,172,181,194],
[142,158,148,166,0,164,152,167,174],
[151,160,149,162,177,0,146,187,161],
[186,187,175,169,189,195,0,187,201],
[154,165,156,160,174,154,154,0,180],
[154,157,148,147,167,180,140,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,200,158,168,176,157,180],
[174,0,174,194,170,187,209,169,185],
[165,167,0,184,159,152,182,178,173],
[141,147,157,0,172,165,174,140,150],
[183,171,182,169,0,186,186,174,176],
[173,154,189,176,155,0,186,157,173],
[165,132,159,167,155,155,0,142,166],
[184,172,163,201,167,184,199,0,169],
[161,156,168,191,165,168,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,144,152,156,140,148,156,157],
[195,0,149,174,167,172,161,173,167],
[197,192,0,178,181,170,170,173,169],
[189,167,163,0,171,160,168,174,159],
[185,174,160,170,0,171,169,173,174],
[201,169,171,181,170,0,177,178,168],
[193,180,171,173,172,164,0,172,171],
[185,168,168,167,168,163,169,0,169],
[184,174,172,182,167,173,170,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,163,169,158,168,170,174],
[180,0,170,168,181,169,178,162,181],
[170,171,0,171,171,176,175,180,179],
[178,173,170,0,185,176,179,166,186],
[172,160,170,156,0,157,167,164,160],
[183,172,165,165,184,0,177,164,174],
[173,163,166,162,174,164,0,153,173],
[171,179,161,175,177,177,188,0,175],
[167,160,162,155,181,167,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,164,164,160,159,168,170,175],
[158,0,144,158,145,151,151,171,165],
[177,197,0,187,163,171,187,178,188],
[177,183,154,0,157,177,157,172,180],
[181,196,178,184,0,165,182,177,194],
[182,190,170,164,176,0,167,185,179],
[173,190,154,184,159,174,0,177,189],
[171,170,163,169,164,156,164,0,185],
[166,176,153,161,147,162,152,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,158,167,158,168,175,168],
[166,0,163,153,174,161,165,158,144],
[177,178,0,170,171,172,165,177,160],
[183,188,171,0,175,174,158,160,173],
[174,167,170,166,0,169,170,172,153],
[183,180,169,167,172,0,158,171,166],
[173,176,176,183,171,183,0,165,161],
[166,183,164,181,169,170,176,0,164],
[173,197,181,168,188,175,180,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,174,168,179,177,171,168],
[167,0,166,173,175,179,176,178,173],
[172,175,0,161,162,171,170,160,162],
[167,168,180,0,175,170,176,156,171],
[173,166,179,166,0,178,168,167,166],
[162,162,170,171,163,0,159,161,164],
[164,165,171,165,173,182,0,160,166],
[170,163,181,185,174,180,181,0,172],
[173,168,179,170,175,177,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,188,161,185,170,179,181],
[175,0,173,187,173,178,165,184,159],
[172,168,0,184,170,170,180,185,173],
[153,154,157,0,162,159,157,153,159],
[180,168,171,179,0,184,169,182,172],
[156,163,171,182,157,0,168,164,176],
[171,176,161,184,172,173,0,179,168],
[162,157,156,188,159,177,162,0,167],
[160,182,168,182,169,165,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,173,181,157,182,156,170,160],
[186,0,151,173,166,152,180,138,162],
[168,190,0,178,199,175,182,184,152],
[160,168,163,0,155,177,178,159,163],
[184,175,142,186,0,185,173,152,173],
[159,189,166,164,156,0,181,153,162],
[185,161,159,163,168,160,0,168,178],
[171,203,157,182,189,188,173,0,195],
[181,179,189,178,168,179,163,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,166,159,172,178,185,177],
[166,0,185,185,170,174,160,177,190],
[166,156,0,149,150,154,156,168,168],
[175,156,192,0,173,164,169,171,180],
[182,171,191,168,0,168,165,174,176],
[169,167,187,177,173,0,163,173,196],
[163,181,185,172,176,178,0,182,190],
[156,164,173,170,167,168,159,0,178],
[164,151,173,161,165,145,151,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,188,217,132,140,205,179,172],
[212,0,160,239,143,180,231,199,182],
[153,181,0,248,173,117,184,158,171],
[124,102,93,0,145,122,193,168,126],
[209,198,168,196,0,168,205,217,197],
[201,161,224,219,173,0,217,238,185],
[136,110,157,148,136,124,0,215,192],
[162,142,183,173,124,103,126,0,120],
[169,159,170,215,144,156,149,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,187,185,175,164,174,190,184],
[170,0,177,184,166,171,182,174,173],
[154,164,0,163,157,158,179,177,195],
[156,157,178,0,151,145,159,167,172],
[166,175,184,190,0,176,204,180,184],
[177,170,183,196,165,0,192,178,190],
[167,159,162,182,137,149,0,161,169],
[151,167,164,174,161,163,180,0,177],
[157,168,146,169,157,151,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,180,177,158,176,157,174,191],
[157,0,191,160,151,161,165,175,191],
[161,150,0,165,147,167,154,158,174],
[164,181,176,0,181,171,169,184,200],
[183,190,194,160,0,174,171,183,199],
[165,180,174,170,167,0,161,178,186],
[184,176,187,172,170,180,0,179,204],
[167,166,183,157,158,163,162,0,173],
[150,150,167,141,142,155,137,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,196,173,185,178,174,182,182],
[172,0,182,175,168,181,178,191,156],
[145,159,0,169,172,154,174,166,169],
[168,166,172,0,178,174,168,182,177],
[156,173,169,163,0,176,161,178,177],
[163,160,187,167,165,0,179,177,186],
[167,163,167,173,180,162,0,178,182],
[159,150,175,159,163,164,163,0,146],
[159,185,172,164,164,155,159,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,190,164,132,158,175,180,153],
[161,0,165,129,127,146,157,156,137],
[151,176,0,150,154,174,178,197,149],
[177,212,191,0,169,174,184,184,168],
[209,214,187,172,0,165,196,191,173],
[183,195,167,167,176,0,179,186,160],
[166,184,163,157,145,162,0,182,175],
[161,185,144,157,150,155,159,0,153],
[188,204,192,173,168,181,166,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,180,164,162,168,179,159],
[175,0,183,203,165,169,181,178,175],
[183,158,0,173,160,165,162,181,145],
[161,138,168,0,142,137,157,164,136],
[177,176,181,199,0,189,180,191,166],
[179,172,176,204,152,0,187,177,178],
[173,160,179,184,161,154,0,174,163],
[162,163,160,177,150,164,167,0,153],
[182,166,196,205,175,163,178,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,198,173,231,162,201,195],
[171,0,143,167,181,178,194,156,163],
[152,198,0,134,175,153,144,147,147],
[143,174,207,0,194,177,161,206,194],
[168,160,166,147,0,198,158,164,166],
[110,163,188,164,143,0,146,181,154],
[179,147,197,180,183,195,0,166,148],
[140,185,194,135,177,160,175,0,143],
[146,178,194,147,175,187,193,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,172,166,170,161,192,179,190],
[162,0,178,170,164,148,179,167,163],
[169,163,0,162,172,183,192,175,167],
[175,171,179,0,176,162,183,183,169],
[171,177,169,165,0,162,183,175,181],
[180,193,158,179,179,0,171,184,181],
[149,162,149,158,158,170,0,178,169],
[162,174,166,158,166,157,163,0,171],
[151,178,174,172,160,160,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,156,148,130,143,159,141,144],
[168,0,124,177,146,148,162,170,162],
[185,217,0,169,179,162,194,219,182],
[193,164,172,0,167,156,184,200,184],
[211,195,162,174,0,158,185,172,183],
[198,193,179,185,183,0,180,213,161],
[182,179,147,157,156,161,0,200,162],
[200,171,122,141,169,128,141,0,164],
[197,179,159,157,158,180,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,181,184,182,180,167,174,177],
[152,0,174,165,141,168,186,168,162],
[160,167,0,158,142,160,162,150,163],
[157,176,183,0,161,165,187,163,142],
[159,200,199,180,0,182,178,176,176],
[161,173,181,176,159,0,158,167,151],
[174,155,179,154,163,183,0,171,163],
[167,173,191,178,165,174,170,0,160],
[164,179,178,199,165,190,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,180,157,162,174,163,174,171],
[176,0,175,162,169,164,169,172,177],
[161,166,0,171,165,161,162,163,173],
[184,179,170,0,168,171,176,186,187],
[179,172,176,173,0,170,162,165,169],
[167,177,180,170,171,0,168,172,170],
[178,172,179,165,179,173,0,168,170],
[167,169,178,155,176,169,173,0,185],
[170,164,168,154,172,171,171,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,174,174,168,159,148,166,147],
[189,0,179,180,187,161,184,180,164],
[167,162,0,179,180,179,173,169,159],
[167,161,162,0,168,171,160,170,159],
[173,154,161,173,0,168,161,178,161],
[182,180,162,170,173,0,163,168,151],
[193,157,168,181,180,178,0,163,171],
[175,161,172,171,163,173,178,0,172],
[194,177,182,182,180,190,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,164,164,175,160,127,183,186],
[146,0,152,157,151,131,115,152,165],
[177,189,0,162,167,181,173,169,190],
[177,184,179,0,179,196,170,212,206],
[166,190,174,162,0,159,176,198,178],
[181,210,160,145,182,0,159,186,195],
[214,226,168,171,165,182,0,221,223],
[158,189,172,129,143,155,120,0,181],
[155,176,151,135,163,146,118,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,175,190,185,193,173,185],
[157,0,171,169,179,164,188,180,171],
[178,170,0,180,190,168,181,177,178],
[166,172,161,0,183,187,185,186,177],
[151,162,151,158,0,161,180,175,163],
[156,177,173,154,180,0,181,172,179],
[148,153,160,156,161,160,0,163,169],
[168,161,164,155,166,169,178,0,174],
[156,170,163,164,178,162,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,189,194,168,176,170,196],
[164,0,167,174,180,165,156,165,182],
[177,174,0,174,172,186,168,163,193],
[152,167,167,0,176,159,153,170,171],
[147,161,169,165,0,176,171,159,186],
[173,176,155,182,165,0,167,164,176],
[165,185,173,188,170,174,0,171,184],
[171,176,178,171,182,177,170,0,197],
[145,159,148,170,155,165,157,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,194,219,177,189,178,187,184],
[172,0,183,187,181,151,193,163,166],
[147,158,0,185,153,170,165,153,134],
[122,154,156,0,127,134,152,157,146],
[164,160,188,214,0,155,172,179,173],
[152,190,171,207,186,0,177,180,162],
[163,148,176,189,169,164,0,169,147],
[154,178,188,184,162,161,172,0,160],
[157,175,207,195,168,179,194,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,137,158,151,160,168,161,157],
[183,0,175,181,193,189,179,160,202],
[204,166,0,197,180,209,181,165,215],
[183,160,144,0,165,151,157,144,167],
[190,148,161,176,0,180,171,169,172],
[181,152,132,190,161,0,178,139,168],
[173,162,160,184,170,163,0,171,188],
[180,181,176,197,172,202,170,0,175],
[184,139,126,174,169,173,153,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,184,162,200,163,159,179,172],
[149,0,175,155,188,171,160,159,163],
[157,166,0,147,190,152,137,159,157],
[179,186,194,0,211,157,166,176,187],
[141,153,151,130,0,152,129,159,150],
[178,170,189,184,189,0,143,154,162],
[182,181,204,175,212,198,0,161,189],
[162,182,182,165,182,187,180,0,174],
[169,178,184,154,191,179,152,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,179,176,171,193,173,169,179],
[159,0,168,148,154,150,166,146,170],
[162,173,0,158,149,161,158,170,158],
[165,193,183,0,160,186,174,178,180],
[170,187,192,181,0,184,181,175,179],
[148,191,180,155,157,0,169,159,185],
[168,175,183,167,160,172,0,172,188],
[172,195,171,163,166,182,169,0,166],
[162,171,183,161,162,156,153,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,203,173,194,178,180,177,183],
[176,0,197,165,182,201,194,189,199],
[138,144,0,151,180,163,170,163,170],
[168,176,190,0,178,189,185,194,183],
[147,159,161,163,0,179,188,160,187],
[163,140,178,152,162,0,165,169,172],
[161,147,171,156,153,176,0,177,186],
[164,152,178,147,181,172,164,0,168],
[158,142,171,158,154,169,155,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,175,170,169,177,165,172,172],
[162,0,181,175,176,174,173,179,168],
[166,160,0,154,169,173,167,174,175],
[171,166,187,0,165,189,169,179,173],
[172,165,172,176,0,182,173,179,175],
[164,167,168,152,159,0,157,162,164],
[176,168,174,172,168,184,0,163,190],
[169,162,167,162,162,179,178,0,167],
[169,173,166,168,166,177,151,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,155,177,169,161,170,185,187],
[180,0,166,182,170,167,189,173,177],
[186,175,0,161,184,171,176,165,170],
[164,159,180,0,180,155,183,168,168],
[172,171,157,161,0,170,188,154,172],
[180,174,170,186,171,0,185,176,189],
[171,152,165,158,153,156,0,158,168],
[156,168,176,173,187,165,183,0,167],
[154,164,171,173,169,152,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,168,181,178,167,168,168,185],
[149,0,161,184,154,158,170,178,176],
[173,180,0,188,168,176,163,175,167],
[160,157,153,0,161,147,169,188,163],
[163,187,173,180,0,173,166,173,181],
[174,183,165,194,168,0,171,180,168],
[173,171,178,172,175,170,0,182,183],
[173,163,166,153,168,161,159,0,161],
[156,165,174,178,160,173,158,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,166,193,172,202,212,193],
[165,0,159,163,164,174,189,194,192],
[164,182,0,193,178,199,185,192,192],
[175,178,148,0,170,174,176,207,189],
[148,177,163,171,0,150,152,180,199],
[169,167,142,167,191,0,182,212,187],
[139,152,156,165,189,159,0,172,170],
[129,147,149,134,161,129,169,0,153],
[148,149,149,152,142,154,171,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,181,176,196,156,154,183,165],
[167,0,206,190,183,187,190,207,178],
[160,135,0,161,149,167,183,180,176],
[165,151,180,0,164,183,180,175,170],
[145,158,192,177,0,179,204,215,211],
[185,154,174,158,162,0,182,177,159],
[187,151,158,161,137,159,0,188,181],
[158,134,161,166,126,164,153,0,143],
[176,163,165,171,130,182,160,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,153,153,162,170,173,158,147],
[166,0,160,157,153,162,166,168,149],
[188,181,0,173,177,167,181,183,166],
[188,184,168,0,179,175,186,174,155],
[179,188,164,162,0,170,196,192,167],
[171,179,174,166,171,0,182,175,171],
[168,175,160,155,145,159,0,176,159],
[183,173,158,167,149,166,165,0,151],
[194,192,175,186,174,170,182,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,159,180,195,184,176,140],
[170,0,191,169,162,171,177,155,155],
[174,150,0,163,160,182,187,161,168],
[182,172,178,0,168,180,186,160,195],
[161,179,181,173,0,178,177,158,181],
[146,170,159,161,163,0,161,170,173],
[157,164,154,155,164,180,0,161,146],
[165,186,180,181,183,171,180,0,189],
[201,186,173,146,160,168,195,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,149,159,185,176,165,162,151],
[165,0,170,175,185,179,154,162,175],
[192,171,0,182,199,178,171,170,168],
[182,166,159,0,200,171,172,180,152],
[156,156,142,141,0,163,141,144,141],
[165,162,163,170,178,0,154,166,148],
[176,187,170,169,200,187,0,163,175],
[179,179,171,161,197,175,178,0,185],
[190,166,173,189,200,193,166,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,143,146,160,164,148,161,186],
[191,0,162,187,179,179,200,167,192],
[198,179,0,156,189,167,200,181,181],
[195,154,185,0,189,151,191,178,190],
[181,162,152,152,0,155,170,156,183],
[177,162,174,190,186,0,202,175,201],
[193,141,141,150,171,139,0,151,183],
[180,174,160,163,185,166,190,0,193],
[155,149,160,151,158,140,158,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,167,173,169,183,151,181],
[176,0,139,169,156,166,159,149,163],
[173,202,0,165,164,162,177,171,169],
[174,172,176,0,175,196,197,182,163],
[168,185,177,166,0,180,199,165,169],
[172,175,179,145,161,0,195,178,164],
[158,182,164,144,142,146,0,160,158],
[190,192,170,159,176,163,181,0,174],
[160,178,172,178,172,177,183,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,165,163,162,166,159,145,164],
[190,0,193,181,186,180,176,168,179],
[176,148,0,169,177,172,169,166,166],
[178,160,172,0,176,187,164,154,166],
[179,155,164,165,0,175,169,153,170],
[175,161,169,154,166,0,162,150,155],
[182,165,172,177,172,179,0,161,174],
[196,173,175,187,188,191,180,0,170],
[177,162,175,175,171,186,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,199,184,198,162,172,198,217],
[147,0,159,187,184,151,175,166,226],
[142,182,0,172,170,155,171,153,191],
[157,154,169,0,175,156,189,161,195],
[143,157,171,166,0,163,152,158,196],
[179,190,186,185,178,0,180,170,235],
[169,166,170,152,189,161,0,160,217],
[143,175,188,180,183,171,181,0,206],
[124,115,150,146,145,106,124,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,185,148,110,53,112,64,111],
[253,0,205,97,203,86,170,170,72],
[156,136,0,147,168,159,169,170,137],
[193,244,194,0,155,123,132,244,109],
[231,138,173,186,0,186,150,197,196],
[288,255,182,218,155,0,182,219,109],
[229,171,172,209,191,159,0,282,172],
[277,171,171,97,144,122,59,0,100],
[230,269,204,232,145,232,169,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,143,189,157,142,155,169],
[174,0,154,185,175,177,175,179,176],
[171,187,0,183,173,136,152,142,157],
[198,156,158,0,187,143,168,137,172],
[152,166,168,154,0,163,168,153,185],
[184,164,205,198,178,0,185,167,198],
[199,166,189,173,173,156,0,154,197],
[186,162,199,204,188,174,187,0,194],
[172,165,184,169,156,143,144,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,156,154,167,149,165,181],
[182,0,175,168,166,177,165,170,182],
[170,166,0,168,164,178,159,160,171],
[185,173,173,0,174,169,174,180,176],
[187,175,177,167,0,181,180,174,181],
[174,164,163,172,160,0,161,162,177],
[192,176,182,167,161,180,0,169,185],
[176,171,181,161,167,179,172,0,175],
[160,159,170,165,160,164,156,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,179,169,196,184,182,167,181],
[160,0,180,164,168,175,166,178,170],
[162,161,0,170,182,172,178,167,163],
[172,177,171,0,184,172,170,175,170],
[145,173,159,157,0,170,157,162,163],
[157,166,169,169,171,0,172,162,174],
[159,175,163,171,184,169,0,169,165],
[174,163,174,166,179,179,172,0,175],
[160,171,178,171,178,167,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,173,171,159,169,172,173],
[172,0,171,182,169,173,178,182,186],
[173,170,0,163,175,166,179,189,182],
[168,159,178,0,172,148,174,181,192],
[170,172,166,169,0,167,180,180,180],
[182,168,175,193,174,0,190,187,180],
[172,163,162,167,161,151,0,183,176],
[169,159,152,160,161,154,158,0,157],
[168,155,159,149,161,161,165,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,187,193,189,162,186,178,190],
[153,0,167,152,171,149,156,158,154],
[154,174,0,156,182,163,163,160,159],
[148,189,185,0,183,166,187,172,172],
[152,170,159,158,0,163,174,160,150],
[179,192,178,175,178,0,173,169,167],
[155,185,178,154,167,168,0,189,163],
[163,183,181,169,181,172,152,0,157],
[151,187,182,169,191,174,178,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,153,167,167,162,143,147,151],
[182,0,170,168,184,151,175,179,183],
[188,171,0,187,194,168,164,175,187],
[174,173,154,0,177,141,154,161,163],
[174,157,147,164,0,145,151,166,163],
[179,190,173,200,196,0,166,175,168],
[198,166,177,187,190,175,0,171,182],
[194,162,166,180,175,166,170,0,178],
[190,158,154,178,178,173,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,162,180,184,155,170,160],
[171,0,158,171,173,166,171,171,162],
[170,183,0,171,185,167,158,172,181],
[179,170,170,0,179,173,161,172,171],
[161,168,156,162,0,155,151,161,161],
[157,175,174,168,186,0,157,165,173],
[186,170,183,180,190,184,0,189,190],
[171,170,169,169,180,176,152,0,153],
[181,179,160,170,180,168,151,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,191,178,183,164,174,149,170],
[157,0,183,183,190,178,169,159,180],
[150,158,0,180,177,182,146,155,162],
[163,158,161,0,175,148,160,138,171],
[158,151,164,166,0,168,173,157,172],
[177,163,159,193,173,0,161,171,167],
[167,172,195,181,168,180,0,171,181],
[192,182,186,203,184,170,170,0,170],
[171,161,179,170,169,174,160,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,148,146,141,175,156,141,183],
[179,0,147,178,169,146,157,143,168],
[193,194,0,173,165,167,188,173,196],
[195,163,168,0,143,168,199,164,194],
[200,172,176,198,0,183,171,157,187],
[166,195,174,173,158,0,187,147,178],
[185,184,153,142,170,154,0,155,184],
[200,198,168,177,184,194,186,0,178],
[158,173,145,147,154,163,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,188,184,188,213,208,168,183],
[138,0,150,197,156,197,179,157,163],
[153,191,0,193,153,176,181,184,154],
[157,144,148,0,143,145,163,129,130],
[153,185,188,198,0,185,184,160,168],
[128,144,165,196,156,0,177,159,152],
[133,162,160,178,157,164,0,150,141],
[173,184,157,212,181,182,191,0,181],
[158,178,187,211,173,189,200,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,186,208,180,165,166,164],
[174,0,162,153,192,170,143,175,165],
[170,179,0,169,202,178,181,163,172],
[155,188,172,0,204,187,158,175,158],
[133,149,139,137,0,150,142,165,140],
[161,171,163,154,191,0,162,171,145],
[176,198,160,183,199,179,0,166,170],
[175,166,178,166,176,170,175,0,164],
[177,176,169,183,201,196,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,142,160,163,150,155,166,146],
[185,0,159,163,169,161,148,167,156],
[199,182,0,170,185,189,179,185,176],
[181,178,171,0,176,164,170,181,168],
[178,172,156,165,0,168,162,174,157],
[191,180,152,177,173,0,169,177,175],
[186,193,162,171,179,172,0,188,167],
[175,174,156,160,167,164,153,0,157],
[195,185,165,173,184,166,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,148,164,129,170,191,149,180],
[165,0,175,189,173,164,209,186,163],
[193,166,0,169,126,165,188,151,183],
[177,152,172,0,107,170,153,161,162],
[212,168,215,234,0,198,207,196,213],
[171,177,176,171,143,0,174,145,175],
[150,132,153,188,134,167,0,145,149],
[192,155,190,180,145,196,196,0,182],
[161,178,158,179,128,166,192,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,165,146,166,158,173,160,154],
[192,0,180,152,168,158,154,158,160],
[176,161,0,163,165,150,154,149,166],
[195,189,178,0,187,174,175,165,179],
[175,173,176,154,0,168,150,157,169],
[183,183,191,167,173,0,153,176,155],
[168,187,187,166,191,188,0,160,168],
[181,183,192,176,184,165,181,0,179],
[187,181,175,162,172,186,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,135,141,142,171,120,130,118],
[201,0,173,185,189,193,159,118,133],
[206,168,0,183,192,210,152,140,154],
[200,156,158,0,191,186,171,153,165],
[199,152,149,150,0,188,145,128,149],
[170,148,131,155,153,0,147,140,153],
[221,182,189,170,196,194,0,175,156],
[211,223,201,188,213,201,166,0,191],
[223,208,187,176,192,188,185,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,174,161,166,165,169,181],
[158,0,153,161,158,159,153,165,158],
[173,188,0,178,173,166,174,181,178],
[167,180,163,0,157,159,159,173,170],
[180,183,168,184,0,165,172,182,189],
[175,182,175,182,176,0,173,170,182],
[176,188,167,182,169,168,0,192,178],
[172,176,160,168,159,171,149,0,171],
[160,183,163,171,152,159,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,222,174,185,192,186,180,167],
[146,0,197,175,157,187,193,193,173],
[119,144,0,143,139,152,149,134,160],
[167,166,198,0,170,184,174,168,180],
[156,184,202,171,0,178,175,196,139],
[149,154,189,157,163,0,171,171,151],
[155,148,192,167,166,170,0,181,128],
[161,148,207,173,145,170,160,0,155],
[174,168,181,161,202,190,213,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,174,165,183,165,165,167,146],
[185,0,157,168,165,166,175,177,159],
[167,184,0,177,178,186,179,177,174],
[176,173,164,0,174,188,174,173,163],
[158,176,163,167,0,186,173,178,169],
[176,175,155,153,155,0,170,174,157],
[176,166,162,167,168,171,0,185,160],
[174,164,164,168,163,167,156,0,159],
[195,182,167,178,172,184,181,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,194,169,165,162,199,161,161],
[167,0,235,177,157,199,189,165,211],
[147,106,0,147,116,158,157,133,187],
[172,164,194,0,168,175,214,175,197],
[176,184,225,173,0,162,186,191,212],
[179,142,183,166,179,0,172,164,164],
[142,152,184,127,155,169,0,161,172],
[180,176,208,166,150,177,180,0,208],
[180,130,154,144,129,177,169,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,182,179,179,171,175,176,180],
[180,0,176,163,167,159,175,173,173],
[159,165,0,169,153,145,169,164,170],
[162,178,172,0,174,162,172,172,175],
[162,174,188,167,0,172,164,163,182],
[170,182,196,179,169,0,179,181,189],
[166,166,172,169,177,162,0,163,169],
[165,168,177,169,178,160,178,0,176],
[161,168,171,166,159,152,172,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,163,182,182,149,171,174,180],
[199,0,175,168,159,185,188,170,168],
[178,166,0,174,195,165,162,134,150],
[159,173,167,0,173,168,170,169,157],
[159,182,146,168,0,171,157,156,150],
[192,156,176,173,170,0,162,183,171],
[170,153,179,171,184,179,0,138,160],
[167,171,207,172,185,158,203,0,163],
[161,173,191,184,191,170,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,149,167,173,148,179,161,166],
[173,0,184,169,170,150,168,183,185],
[192,157,0,190,185,184,187,206,190],
[174,172,151,0,160,168,169,196,175],
[168,171,156,181,0,159,180,190,162],
[193,191,157,173,182,0,179,178,179],
[162,173,154,172,161,162,0,185,156],
[180,158,135,145,151,163,156,0,151],
[175,156,151,166,179,162,185,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,165,157,160,172,171,152],
[176,0,170,171,176,183,153,181,167],
[166,171,0,186,183,183,168,184,173],
[176,170,155,0,167,184,167,178,143],
[184,165,158,174,0,166,175,186,157],
[181,158,158,157,175,0,155,162,147],
[169,188,173,174,166,186,0,177,170],
[170,160,157,163,155,179,164,0,142],
[189,174,168,198,184,194,171,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,180,170,160,167,179,172],
[177,0,181,180,172,175,167,181,166],
[172,160,0,171,168,161,172,175,167],
[161,161,170,0,163,171,162,166,154],
[171,169,173,178,0,168,166,170,168],
[181,166,180,170,173,0,176,183,166],
[174,174,169,179,175,165,0,185,163],
[162,160,166,175,171,158,156,0,161],
[169,175,174,187,173,175,178,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,179,177,158,182,175,169,168],
[152,0,166,165,162,162,151,153,158],
[162,175,0,162,157,160,152,162,160],
[164,176,179,0,172,179,156,153,172],
[183,179,184,169,0,177,174,165,169],
[159,179,181,162,164,0,169,166,162],
[166,190,189,185,167,172,0,167,168],
[172,188,179,188,176,175,174,0,165],
[173,183,181,169,172,179,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,187,181,189,168,167,172],
[166,0,180,194,177,175,173,164,182],
[170,161,0,180,182,174,164,174,173],
[154,147,161,0,170,164,155,162,161],
[160,164,159,171,0,165,165,179,178],
[152,166,167,177,176,0,163,161,169],
[173,168,177,186,176,178,0,163,183],
[174,177,167,179,162,180,178,0,166],
[169,159,168,180,163,172,158,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,147,172,143,177,164,179,179],
[151,0,122,131,148,145,151,158,157],
[194,219,0,141,188,192,200,170,177],
[169,210,200,0,165,181,192,176,178],
[198,193,153,176,0,158,176,160,181],
[164,196,149,160,183,0,177,196,156],
[177,190,141,149,165,164,0,180,162],
[162,183,171,165,181,145,161,0,166],
[162,184,164,163,160,185,179,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,160,142,175,169,149,146,163],
[206,0,181,188,184,188,172,182,168],
[181,160,0,157,181,171,156,165,165],
[199,153,184,0,187,174,167,174,173],
[166,157,160,154,0,146,139,153,142],
[172,153,170,167,195,0,164,173,174],
[192,169,185,174,202,177,0,176,163],
[195,159,176,167,188,168,165,0,162],
[178,173,176,168,199,167,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,127,168,130,161,146,196,148],
[212,0,190,178,154,189,147,186,175],
[214,151,0,171,155,222,166,241,186],
[173,163,170,0,125,138,175,160,169],
[211,187,186,216,0,167,149,192,163],
[180,152,119,203,174,0,179,188,168],
[195,194,175,166,192,162,0,225,206],
[145,155,100,181,149,153,116,0,176],
[193,166,155,172,178,173,135,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,175,156,178,175,172,159,172],
[181,0,162,164,173,161,167,160,171],
[166,179,0,154,171,170,172,175,173],
[185,177,187,0,198,165,170,177,183],
[163,168,170,143,0,161,161,157,161],
[166,180,171,176,180,0,166,165,169],
[169,174,169,171,180,175,0,169,176],
[182,181,166,164,184,176,172,0,183],
[169,170,168,158,180,172,165,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,177,166,176,189,191,185,185],
[162,0,166,175,172,179,182,191,170],
[164,175,0,174,192,168,194,187,180],
[175,166,167,0,162,184,166,173,168],
[165,169,149,179,0,179,178,180,169],
[152,162,173,157,162,0,187,179,157],
[150,159,147,175,163,154,0,164,170],
[156,150,154,168,161,162,177,0,158],
[156,171,161,173,172,184,171,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,186,169,177,172,186,154,163],
[175,0,194,171,176,167,170,162,165],
[155,147,0,148,154,141,163,168,158],
[172,170,193,0,165,164,172,149,173],
[164,165,187,176,0,168,174,173,166],
[169,174,200,177,173,0,173,170,170],
[155,171,178,169,167,168,0,158,159],
[187,179,173,192,168,171,183,0,176],
[178,176,183,168,175,171,182,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,164,178,193,148,170,177,178],
[156,0,161,164,185,171,183,173,178],
[177,180,0,181,196,167,173,174,182],
[163,177,160,0,198,157,170,163,175],
[148,156,145,143,0,137,147,145,155],
[193,170,174,184,204,0,182,186,173],
[171,158,168,171,194,159,0,164,175],
[164,168,167,178,196,155,177,0,177],
[163,163,159,166,186,168,166,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,179,172,159,167,150,183,154],
[191,0,165,195,168,175,165,194,164],
[162,176,0,188,188,178,162,180,181],
[169,146,153,0,156,146,158,166,151],
[182,173,153,185,0,165,161,187,159],
[174,166,163,195,176,0,167,182,154],
[191,176,179,183,180,174,0,194,170],
[158,147,161,175,154,159,147,0,162],
[187,177,160,190,182,187,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,207,172,170,162,148,172,170],
[167,0,171,165,157,155,156,170,175],
[134,170,0,150,140,153,160,147,147],
[169,176,191,0,153,160,168,174,155],
[171,184,201,188,0,179,189,181,165],
[179,186,188,181,162,0,181,184,187],
[193,185,181,173,152,160,0,183,167],
[169,171,194,167,160,157,158,0,165],
[171,166,194,186,176,154,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,174,167,168,187,175,183],
[177,0,175,175,161,176,166,182,175],
[173,166,0,174,177,171,181,161,175],
[167,166,167,0,158,165,168,166,169],
[174,180,164,183,0,172,173,161,180],
[173,165,170,176,169,0,181,161,176],
[154,175,160,173,168,160,0,163,167],
[166,159,180,175,180,180,178,0,165],
[158,166,166,172,161,165,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,175,191,180,159,166,188,176],
[180,0,174,180,193,180,179,176,160],
[166,167,0,165,182,158,168,169,176],
[150,161,176,0,182,161,168,168,168],
[161,148,159,159,0,167,163,157,155],
[182,161,183,180,174,0,169,177,165],
[175,162,173,173,178,172,0,173,176],
[153,165,172,173,184,164,168,0,189],
[165,181,165,173,186,176,165,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,171,179,179,196,178,173],
[171,0,171,163,175,182,195,179,196],
[169,170,0,142,177,164,181,171,163],
[170,178,199,0,189,187,207,186,182],
[162,166,164,152,0,167,162,159,174],
[162,159,177,154,174,0,165,150,182],
[145,146,160,134,179,176,0,162,172],
[163,162,170,155,182,191,179,0,191],
[168,145,178,159,167,159,169,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,154,182,180,191,168,164,151],
[165,0,125,157,160,147,159,138,132],
[187,216,0,227,215,186,179,150,231],
[159,184,114,0,177,186,140,164,189],
[161,181,126,164,0,162,154,164,183],
[150,194,155,155,179,0,157,165,154],
[173,182,162,201,187,184,0,171,163],
[177,203,191,177,177,176,170,0,184],
[190,209,110,152,158,187,178,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,155,166,160,157,164,167],
[161,0,167,150,170,158,163,152,150],
[173,174,0,172,163,143,170,165,175],
[186,191,169,0,174,177,173,180,193],
[175,171,178,167,0,171,163,178,177],
[181,183,198,164,170,0,179,187,192],
[184,178,171,168,178,162,0,180,193],
[177,189,176,161,163,154,161,0,171],
[174,191,166,148,164,149,148,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,127,234,94,153,156,128,122],
[179,0,253,212,135,191,184,111,170],
[214,88,0,164,130,132,182,69,116],
[107,129,177,0,123,201,172,178,110],
[247,206,211,218,0,165,220,150,126],
[188,150,209,140,176,0,243,156,144],
[185,157,159,169,121,98,0,136,111],
[213,230,272,163,191,185,205,0,220],
[219,171,225,231,215,197,230,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,181,184,170,181,166,184],
[159,0,154,179,182,169,156,166,168],
[165,187,0,179,190,183,167,175,174],
[160,162,162,0,183,171,160,152,171],
[157,159,151,158,0,163,152,150,169],
[171,172,158,170,178,0,157,169,178],
[160,185,174,181,189,184,0,170,176],
[175,175,166,189,191,172,171,0,169],
[157,173,167,170,172,163,165,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,185,161,169,166,161,178,144],
[170,0,164,153,150,166,162,179,144],
[156,177,0,152,151,169,162,167,148],
[180,188,189,0,177,181,195,182,166],
[172,191,190,164,0,191,189,161,148],
[175,175,172,160,150,0,181,172,164],
[180,179,179,146,152,160,0,162,153],
[163,162,174,159,180,169,179,0,172],
[197,197,193,175,193,177,188,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,178,169,181,157,156,151,161],
[180,0,170,154,178,184,169,167,166],
[163,171,0,151,157,162,168,152,145],
[172,187,190,0,174,181,177,159,166],
[160,163,184,167,0,160,165,166,146],
[184,157,179,160,181,0,164,183,155],
[185,172,173,164,176,177,0,173,146],
[190,174,189,182,175,158,168,0,185],
[180,175,196,175,195,186,195,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,163,182,133,147,144,166,162],
[201,0,178,188,145,199,202,194,191],
[178,163,0,177,138,167,170,162,167],
[159,153,164,0,135,158,161,165,153],
[208,196,203,206,0,201,165,189,212],
[194,142,174,183,140,0,140,187,186],
[197,139,171,180,176,201,0,182,186],
[175,147,179,176,152,154,159,0,203],
[179,150,174,188,129,155,155,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,108,133,149,152,164,154,126],
[180,0,143,176,175,185,178,176,163],
[233,198,0,170,195,202,241,183,189],
[208,165,171,0,175,183,182,160,180],
[192,166,146,166,0,161,191,143,180],
[189,156,139,158,180,0,192,160,168],
[177,163,100,159,150,149,0,143,137],
[187,165,158,181,198,181,198,0,157],
[215,178,152,161,161,173,204,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,198,202,162,188,162,174,266],
[118,0,224,181,127,164,177,180,208],
[143,117,0,109,108,126,143,99,265],
[139,160,232,0,86,174,151,166,216],
[179,214,233,255,0,142,207,154,270],
[153,177,215,167,199,0,207,69,282],
[179,164,198,190,134,134,0,117,266],
[167,161,242,175,187,272,224,0,226],
[75,133,76,125,71,59,75,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,144,174,183,178,183,176,173],
[151,0,158,137,156,170,168,158,192],
[197,183,0,161,173,191,181,165,189],
[167,204,180,0,189,182,199,202,210],
[158,185,168,152,0,175,196,186,199],
[163,171,150,159,166,0,180,180,171],
[158,173,160,142,145,161,0,182,196],
[165,183,176,139,155,161,159,0,184],
[168,149,152,131,142,170,145,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,165,177,174,194,174,184],
[166,0,194,183,180,179,193,182,192],
[174,147,0,183,175,174,191,175,197],
[176,158,158,0,180,179,199,177,185],
[164,161,166,161,0,179,177,170,184],
[167,162,167,162,162,0,165,167,165],
[147,148,150,142,164,176,0,153,171],
[167,159,166,164,171,174,188,0,194],
[157,149,144,156,157,176,170,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,170,172,185,184,178,172],
[172,0,183,172,177,171,195,159,156],
[158,158,0,171,165,153,187,166,159],
[171,169,170,0,174,178,178,154,177],
[169,164,176,167,0,198,207,181,174],
[156,170,188,163,143,0,181,165,171],
[157,146,154,163,134,160,0,154,142],
[163,182,175,187,160,176,187,0,176],
[169,185,182,164,167,170,199,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,140,161,183,192,190,181,188],
[163,0,138,137,132,134,181,163,181],
[201,203,0,193,215,170,193,187,231],
[180,204,148,0,179,140,176,173,186],
[158,209,126,162,0,158,161,152,178],
[149,207,171,201,183,0,197,179,198],
[151,160,148,165,180,144,0,149,194],
[160,178,154,168,189,162,192,0,203],
[153,160,110,155,163,143,147,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,185,171,195,183,169,183,187],
[159,0,173,162,184,176,161,176,183],
[156,168,0,166,183,180,163,175,175],
[170,179,175,0,180,167,174,169,173],
[146,157,158,161,0,162,150,157,165],
[158,165,161,174,179,0,165,169,168],
[172,180,178,167,191,176,0,180,165],
[158,165,166,172,184,172,161,0,170],
[154,158,166,168,176,173,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,182,166,170,172,184,173,174],
[165,0,183,158,164,158,162,166,173],
[159,158,0,160,159,162,165,152,161],
[175,183,181,0,165,174,181,178,172],
[171,177,182,176,0,169,176,183,181],
[169,183,179,167,172,0,176,172,178],
[157,179,176,160,165,165,0,168,174],
[168,175,189,163,158,169,173,0,176],
[167,168,180,169,160,163,167,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,160,161,161,149,159,160],
[179,0,187,169,177,184,167,148,171],
[170,154,0,164,153,177,160,138,156],
[181,172,177,0,161,201,180,182,174],
[180,164,188,180,0,176,177,161,172],
[180,157,164,140,165,0,156,149,149],
[192,174,181,161,164,185,0,182,160],
[182,193,203,159,180,192,159,0,186],
[181,170,185,167,169,192,181,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,123,148,126,160,171,129,142],
[171,0,161,156,164,175,136,175,149],
[218,180,0,201,176,192,170,211,211],
[193,185,140,0,185,201,211,191,189],
[215,177,165,156,0,215,193,174,158],
[181,166,149,140,126,0,143,133,137],
[170,205,171,130,148,198,0,157,176],
[212,166,130,150,167,208,184,0,149],
[199,192,130,152,183,204,165,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,201,152,167,152,183,159],
[163,0,177,193,158,186,170,157,161],
[172,164,0,186,171,195,153,169,145],
[140,148,155,0,160,188,162,152,134],
[189,183,170,181,0,171,169,170,175],
[174,155,146,153,170,0,172,164,149],
[189,171,188,179,172,169,0,186,158],
[158,184,172,189,171,177,155,0,158],
[182,180,196,207,166,192,183,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,175,176,190,179,180,192],
[170,0,128,140,168,177,161,167,185],
[180,213,0,167,165,179,170,170,220],
[166,201,174,0,189,194,188,169,194],
[165,173,176,152,0,196,176,184,203],
[151,164,162,147,145,0,169,160,170],
[162,180,171,153,165,172,0,167,204],
[161,174,171,172,157,181,174,0,194],
[149,156,121,147,138,171,137,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,177,162,156,176,187,162],
[158,0,153,156,168,172,216,191,166],
[173,188,0,152,176,178,183,229,183],
[164,185,189,0,192,167,209,209,194],
[179,173,165,149,0,180,183,184,167],
[185,169,163,174,161,0,201,199,185],
[165,125,158,132,158,140,0,167,147],
[154,150,112,132,157,142,174,0,149],
[179,175,158,147,174,156,194,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,206,198,194,145,175,198,153],
[198,0,160,199,149,169,172,178,160],
[135,181,0,191,166,179,163,197,177],
[143,142,150,0,149,140,174,164,163],
[147,192,175,192,0,158,174,186,189],
[196,172,162,201,183,0,212,215,206],
[166,169,178,167,167,129,0,146,165],
[143,163,144,177,155,126,195,0,151],
[188,181,164,178,152,135,176,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,276,261,128,276,193,231,208],
[233,0,341,261,193,341,165,231,193],
[65,0,0,231,193,166,165,203,0],
[80,80,110,0,138,148,175,145,80],
[213,148,148,203,0,218,213,213,148],
[65,0,175,193,123,0,95,65,65],
[148,176,176,166,128,246,0,246,108],
[110,110,138,196,128,276,95,0,138],
[133,148,341,261,193,276,233,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,154,202,186,163,187,164,186],
[171,0,188,201,169,204,169,199,204],
[187,153,0,175,183,167,147,162,195],
[139,140,166,0,170,172,161,158,161],
[155,172,158,171,0,165,163,165,180],
[178,137,174,169,176,0,165,179,177],
[154,172,194,180,178,176,0,171,161],
[177,142,179,183,176,162,170,0,173],
[155,137,146,180,161,164,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,172,177,167,169,170,173],
[165,0,171,175,172,171,171,168,178],
[177,170,0,170,169,162,169,175,171],
[169,166,171,0,159,160,161,168,166],
[164,169,172,182,0,168,160,169,181],
[174,170,179,181,173,0,171,184,181],
[172,170,172,180,181,170,0,178,175],
[171,173,166,173,172,157,163,0,167],
[168,163,170,175,160,160,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,204,195,159,156,173,174,180],
[180,0,156,200,174,173,192,167,139],
[137,185,0,181,141,204,162,155,162],
[146,141,160,0,153,135,163,156,144],
[182,167,200,188,0,225,184,191,186],
[185,168,137,206,116,0,150,144,142],
[168,149,179,178,157,191,0,173,146],
[167,174,186,185,150,197,168,0,163],
[161,202,179,197,155,199,195,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,193,193,190,196,190,194,170],
[168,0,173,183,181,172,193,157,151],
[148,168,0,179,172,189,194,172,153],
[148,158,162,0,155,170,172,172,173],
[151,160,169,186,0,193,197,181,152],
[145,169,152,171,148,0,172,170,157],
[151,148,147,169,144,169,0,184,155],
[147,184,169,169,160,171,157,0,146],
[171,190,188,168,189,184,186,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,166,161,173,162,157,171,160],
[182,0,175,180,158,164,169,174,169],
[175,166,0,162,152,170,154,165,185],
[180,161,179,0,185,177,170,176,171],
[168,183,189,156,0,166,176,170,172],
[179,177,171,164,175,0,178,174,181],
[184,172,187,171,165,163,0,173,171],
[170,167,176,165,171,167,168,0,165],
[181,172,156,170,169,160,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,162,171,174,175,170,153,197],
[165,0,183,172,173,180,189,173,181],
[179,158,0,174,169,165,175,160,175],
[170,169,167,0,155,174,158,165,173],
[167,168,172,186,0,164,165,175,183],
[166,161,176,167,177,0,177,155,169],
[171,152,166,183,176,164,0,152,200],
[188,168,181,176,166,186,189,0,173],
[144,160,166,168,158,172,141,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,147,174,182,171,156,167],
[174,0,179,173,180,183,178,152,169],
[171,162,0,158,170,176,175,157,172],
[194,168,183,0,182,183,171,169,166],
[167,161,171,159,0,184,181,153,163],
[159,158,165,158,157,0,168,147,168],
[170,163,166,170,160,173,0,172,164],
[185,189,184,172,188,194,169,0,168],
[174,172,169,175,178,173,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,163,157,187,125,145,160,119],
[199,0,140,173,183,177,153,147,138],
[178,201,0,221,164,191,185,177,202],
[184,168,120,0,151,190,141,188,171],
[154,158,177,190,0,144,165,154,185],
[216,164,150,151,197,0,183,231,230],
[196,188,156,200,176,158,0,160,176],
[181,194,164,153,187,110,181,0,194],
[222,203,139,170,156,111,165,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,158,187,152,155,168,160,161],
[194,0,170,192,145,153,166,187,143],
[183,171,0,173,150,141,158,200,155],
[154,149,168,0,142,133,162,174,143],
[189,196,191,199,0,173,175,190,152],
[186,188,200,208,168,0,177,206,161],
[173,175,183,179,166,164,0,185,190],
[181,154,141,167,151,135,156,0,128],
[180,198,186,198,189,180,151,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,150,147,149,161,164,153,152],
[182,0,174,154,176,181,184,155,149],
[191,167,0,148,162,168,170,152,157],
[194,187,193,0,171,188,186,173,160],
[192,165,179,170,0,187,177,165,162],
[180,160,173,153,154,0,161,158,146],
[177,157,171,155,164,180,0,161,150],
[188,186,189,168,176,183,180,0,172],
[189,192,184,181,179,195,191,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,191,175,164,175,179,171,199],
[162,0,182,182,155,174,173,170,174],
[150,159,0,173,152,170,154,167,172],
[166,159,168,0,155,170,170,163,175],
[177,186,189,186,0,169,169,175,198],
[166,167,171,171,172,0,164,167,183],
[162,168,187,171,172,177,0,170,185],
[170,171,174,178,166,174,171,0,187],
[142,167,169,166,143,158,156,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,167,164,176,179,168,168,176],
[184,0,165,183,180,184,174,166,172],
[174,176,0,172,195,181,172,176,168],
[177,158,169,0,179,183,179,168,182],
[165,161,146,162,0,182,174,167,157],
[162,157,160,158,159,0,168,168,164],
[173,167,169,162,167,173,0,171,166],
[173,175,165,173,174,173,170,0,175],
[165,169,173,159,184,177,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,179,153,177,166,194,174,167],
[171,0,178,160,181,176,191,194,183],
[162,163,0,155,179,168,176,176,157],
[188,181,186,0,180,164,198,178,178],
[164,160,162,161,0,154,184,178,170],
[175,165,173,177,187,0,195,191,167],
[147,150,165,143,157,146,0,166,156],
[167,147,165,163,163,150,175,0,162],
[174,158,184,163,171,174,185,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,129,157,130,163,152,137,158],
[187,0,148,170,130,199,147,118,147],
[212,193,0,182,189,233,193,160,208],
[184,171,159,0,169,196,156,173,182],
[211,211,152,172,0,241,191,155,192],
[178,142,108,145,100,0,175,101,122],
[189,194,148,185,150,166,0,145,181],
[204,223,181,168,186,240,196,0,216],
[183,194,133,159,149,219,160,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,200,184,162,219,236,167,179],
[155,0,131,182,132,160,202,198,180],
[141,210,0,198,159,159,259,213,159],
[157,159,143,0,134,163,193,120,164],
[179,209,182,207,0,206,254,154,225],
[122,181,182,178,135,0,245,169,206],
[105,139,82,148,87,96,0,96,144],
[174,143,128,221,187,172,245,0,217],
[162,161,182,177,116,135,197,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,164,169,182,169,161,162,185],
[159,0,158,149,169,162,156,174,156],
[177,183,0,169,175,165,159,170,168],
[172,192,172,0,174,183,170,191,181],
[159,172,166,167,0,156,147,165,181],
[172,179,176,158,185,0,172,174,181],
[180,185,182,171,194,169,0,185,186],
[179,167,171,150,176,167,156,0,173],
[156,185,173,160,160,160,155,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,173,170,181,187,159,171,198],
[164,0,176,178,185,175,172,175,204],
[168,165,0,174,154,170,150,161,175],
[171,163,167,0,163,165,173,159,171],
[160,156,187,178,0,171,165,150,161],
[154,166,171,176,170,0,174,137,189],
[182,169,191,168,176,167,0,159,176],
[170,166,180,182,191,204,182,0,205],
[143,137,166,170,180,152,165,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,170,180,159,192,186,179,167],
[154,0,174,172,167,179,162,163,171],
[171,167,0,186,173,205,187,178,187],
[161,169,155,0,151,177,164,166,161],
[182,174,168,190,0,201,186,192,180],
[149,162,136,164,140,0,152,151,166],
[155,179,154,177,155,189,0,177,177],
[162,178,163,175,149,190,164,0,159],
[174,170,154,180,161,175,164,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,167,188,159,195,231,156,146],
[199,0,165,188,175,205,235,186,197],
[174,176,0,177,130,156,204,141,160],
[153,153,164,0,185,173,164,158,158],
[182,166,211,156,0,193,227,174,176],
[146,136,185,168,148,0,191,135,160],
[110,106,137,177,114,150,0,108,114],
[185,155,200,183,167,206,233,0,162],
[195,144,181,183,165,181,227,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,184,171,170,155,172,183],
[169,0,171,189,170,173,164,174,158],
[163,170,0,174,156,152,149,168,163],
[157,152,167,0,169,159,147,181,179],
[170,171,185,172,0,168,174,178,190],
[171,168,189,182,173,0,165,189,184],
[186,177,192,194,167,176,0,181,185],
[169,167,173,160,163,152,160,0,177],
[158,183,178,162,151,157,156,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,165,165,184,182,182,182,184],
[149,0,153,154,154,170,161,160,180],
[176,188,0,167,183,189,193,199,178],
[176,187,174,0,201,191,199,184,167],
[157,187,158,140,0,165,186,151,163],
[159,171,152,150,176,0,178,156,177],
[159,180,148,142,155,163,0,163,155],
[159,181,142,157,190,185,178,0,169],
[157,161,163,174,178,164,186,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,163,166,167,172,170,155,163],
[189,0,171,180,188,191,185,165,175],
[178,170,0,166,175,188,176,167,168],
[175,161,175,0,164,186,175,149,162],
[174,153,166,177,0,166,169,155,164],
[169,150,153,155,175,0,157,149,150],
[171,156,165,166,172,184,0,174,156],
[186,176,174,192,186,192,167,0,181],
[178,166,173,179,177,191,185,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,185,181,169,169,186,189],
[162,0,171,178,171,172,170,184,181],
[159,170,0,173,167,160,176,178,184],
[156,163,168,0,175,168,165,171,184],
[160,170,174,166,0,179,177,167,181],
[172,169,181,173,162,0,173,182,176],
[172,171,165,176,164,168,0,177,171],
[155,157,163,170,174,159,164,0,161],
[152,160,157,157,160,165,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,198,195,162,218,194,184,217],
[146,0,162,121,154,192,188,150,187],
[143,179,0,167,147,163,167,149,183],
[146,220,174,0,145,209,168,161,195],
[179,187,194,196,0,202,206,137,162],
[123,149,178,132,139,0,158,153,179],
[147,153,174,173,135,183,0,139,131],
[157,191,192,180,204,188,202,0,172],
[124,154,158,146,179,162,210,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,144,147,164,174,161,154,155],
[175,0,140,141,172,176,211,162,144],
[197,201,0,179,213,195,234,156,179],
[194,200,162,0,185,189,196,183,186],
[177,169,128,156,0,174,189,151,161],
[167,165,146,152,167,0,177,137,129],
[180,130,107,145,152,164,0,113,151],
[187,179,185,158,190,204,228,0,187],
[186,197,162,155,180,212,190,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,195,173,215,175,171,177,209],
[191,0,162,184,206,181,193,191,200],
[146,179,0,154,197,165,145,149,191],
[168,157,187,0,205,180,164,180,196],
[126,135,144,136,0,118,135,158,155],
[166,160,176,161,223,0,178,146,152],
[170,148,196,177,206,163,0,182,211],
[164,150,192,161,183,195,159,0,170],
[132,141,150,145,186,189,130,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,185,183,164,161,184,158],
[162,0,164,181,173,174,145,169,150],
[171,177,0,190,183,184,159,163,193],
[156,160,151,0,178,176,160,162,144],
[158,168,158,163,0,199,152,146,147],
[177,167,157,165,142,0,142,147,149],
[180,196,182,181,189,199,0,185,156],
[157,172,178,179,195,194,156,0,179],
[183,191,148,197,194,192,185,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,191,162,159,167,161,169,142],
[168,0,165,169,161,172,160,155,158],
[150,176,0,161,174,178,164,165,164],
[179,172,180,0,169,179,179,167,172],
[182,180,167,172,0,162,176,160,165],
[174,169,163,162,179,0,165,176,164],
[180,181,177,162,165,176,0,176,163],
[172,186,176,174,181,165,165,0,162],
[199,183,177,169,176,177,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,142,149,166,139,144,152,158],
[187,0,174,160,200,161,171,171,165],
[199,167,0,164,173,157,162,183,195],
[192,181,177,0,203,156,164,157,185],
[175,141,168,138,0,152,154,170,172],
[202,180,184,185,189,0,162,172,189],
[197,170,179,177,187,179,0,177,194],
[189,170,158,184,171,169,164,0,191],
[183,176,146,156,169,152,147,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,188,209,163,196,181,202],
[168,0,203,202,177,179,203,171,184],
[163,138,0,164,163,163,152,169,163],
[153,139,177,0,155,138,165,168,179],
[132,164,178,186,0,171,175,154,180],
[178,162,178,203,170,0,166,184,187],
[145,138,189,176,166,175,0,182,166],
[160,170,172,173,187,157,159,0,176],
[139,157,178,162,161,154,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,199,168,164,174,191,172,182],
[157,0,187,177,156,173,184,171,174],
[142,154,0,164,151,168,168,154,151],
[173,164,177,0,161,173,176,165,177],
[177,185,190,180,0,178,186,169,179],
[167,168,173,168,163,0,188,161,168],
[150,157,173,165,155,153,0,155,162],
[169,170,187,176,172,180,186,0,178],
[159,167,190,164,162,173,179,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,176,164,171,162,157,168],
[169,0,172,169,156,161,168,172,157],
[171,169,0,174,166,171,180,169,158],
[165,172,167,0,164,176,158,176,184],
[177,185,175,177,0,180,170,168,157],
[170,180,170,165,161,0,163,170,167],
[179,173,161,183,171,178,0,168,179],
[184,169,172,165,173,171,173,0,161],
[173,184,183,157,184,174,162,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,205,210,187,177,198,179],
[170,0,177,178,200,157,182,201,177],
[173,164,0,171,180,164,160,176,153],
[136,163,170,0,201,146,161,167,145],
[131,141,161,140,0,128,147,168,138],
[154,184,177,195,213,0,174,204,168],
[164,159,181,180,194,167,0,193,139],
[143,140,165,174,173,137,148,0,156],
[162,164,188,196,203,173,202,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,165,157,163,169,176,184],
[162,0,168,164,162,176,162,165,182],
[177,173,0,165,157,169,175,171,177],
[176,177,176,0,173,191,169,177,177],
[184,179,184,168,0,187,167,165,179],
[178,165,172,150,154,0,157,180,165],
[172,179,166,172,174,184,0,168,170],
[165,176,170,164,176,161,173,0,173],
[157,159,164,164,162,176,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,238,168,204,204,203,206,238],
[104,0,136,204,103,171,137,173,204],
[103,205,0,168,136,170,103,206,204],
[173,137,173,0,171,170,172,138,238],
[137,238,205,170,0,136,205,138,205],
[137,170,171,171,205,0,171,172,238],
[138,204,238,169,136,170,0,138,204],
[135,168,135,203,203,169,203,0,204],
[103,137,137,103,136,103,137,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,177,175,177,178,187,164,176],
[154,0,162,158,171,172,166,156,169],
[164,179,0,164,170,172,173,171,175],
[166,183,177,0,172,168,185,172,175],
[164,170,171,169,0,179,185,157,166],
[163,169,169,173,162,0,168,157,168],
[154,175,168,156,156,173,0,162,155],
[177,185,170,169,184,184,179,0,173],
[165,172,166,166,175,173,186,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,177,190,182,172,174,176],
[171,0,167,178,170,181,171,180,177],
[169,174,0,166,164,177,164,171,166],
[164,163,175,0,154,177,168,169,168],
[151,171,177,187,0,170,165,185,167],
[159,160,164,164,171,0,168,159,166],
[169,170,177,173,176,173,0,177,179],
[167,161,170,172,156,182,164,0,180],
[165,164,175,173,174,175,162,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,184,177,187,172,178,188],
[161,0,172,191,162,187,180,166,178],
[179,169,0,173,166,183,179,181,167],
[157,150,168,0,175,190,177,187,188],
[164,179,175,166,0,195,178,185,183],
[154,154,158,151,146,0,154,159,163],
[169,161,162,164,163,187,0,144,175],
[163,175,160,154,156,182,197,0,162],
[153,163,174,153,158,178,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,189,170,178,171,199,161],
[164,0,177,186,191,174,190,191,177],
[174,164,0,171,167,175,170,179,155],
[152,155,170,0,175,180,181,199,155],
[171,150,174,166,0,167,197,187,152],
[163,167,166,161,174,0,171,168,158],
[170,151,171,160,144,170,0,173,164],
[142,150,162,142,154,173,168,0,154],
[180,164,186,186,189,183,177,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,197,179,197,186,176,186,194],
[173,0,192,190,183,184,173,163,199],
[144,149,0,148,150,151,172,162,167],
[162,151,193,0,199,170,166,191,191],
[144,158,191,142,0,182,172,135,189],
[155,157,190,171,159,0,178,183,179],
[165,168,169,175,169,163,0,178,195],
[155,178,179,150,206,158,163,0,204],
[147,142,174,150,152,162,146,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,172,153,154,173,189,172,166],
[165,0,178,154,169,167,175,168,175],
[169,163,0,145,158,162,177,158,149],
[188,187,196,0,173,193,199,175,167],
[187,172,183,168,0,184,184,179,182],
[168,174,179,148,157,0,171,169,170],
[152,166,164,142,157,170,0,157,165],
[169,173,183,166,162,172,184,0,173],
[175,166,192,174,159,171,176,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,186,174,170,169,169,179],
[175,0,182,176,170,170,177,174,177],
[170,159,0,173,166,157,171,173,181],
[155,165,168,0,167,151,169,177,162],
[167,171,175,174,0,176,175,169,174],
[171,171,184,190,165,0,166,174,173],
[172,164,170,172,166,175,0,183,166],
[172,167,168,164,172,167,158,0,176],
[162,164,160,179,167,168,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,140,135,179,185,157,142],
[184,0,168,171,195,177,190,159,183],
[178,173,0,158,168,193,200,159,152],
[201,170,183,0,153,208,205,177,209],
[206,146,173,188,0,191,221,166,182],
[162,164,148,133,150,0,145,135,174],
[156,151,141,136,120,196,0,134,156],
[184,182,182,164,175,206,207,0,216],
[199,158,189,132,159,167,185,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,201,206,159,190,183,213,161],
[123,0,142,151,148,139,149,186,127],
[140,199,0,135,177,164,161,198,127],
[135,190,206,0,122,125,134,177,130],
[182,193,164,219,0,144,176,214,188],
[151,202,177,216,197,0,191,217,161],
[158,192,180,207,165,150,0,190,182],
[128,155,143,164,127,124,151,0,124],
[180,214,214,211,153,180,159,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,189,195,174,159,173,183,169],
[185,0,198,189,183,181,161,193,174],
[152,143,0,174,151,155,150,168,143],
[146,152,167,0,180,165,162,174,147],
[167,158,190,161,0,160,160,194,168],
[182,160,186,176,181,0,157,190,164],
[168,180,191,179,181,184,0,189,174],
[158,148,173,167,147,151,152,0,140],
[172,167,198,194,173,177,167,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,137,135,135,204,206,238,172],
[137,0,70,70,101,66,104,102,137],
[204,271,0,170,167,167,202,170,239],
[206,271,171,0,133,168,204,203,274],
[206,240,174,208,0,138,138,206,274],
[137,275,174,173,203,0,139,240,275],
[135,237,139,137,203,202,0,171,170],
[103,239,171,138,135,101,170,0,172],
[169,204,102,67,67,66,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,193,184,176,173,167,178,188],
[155,0,156,162,161,161,162,140,158],
[148,185,0,160,188,163,158,156,179],
[157,179,181,0,173,167,168,183,176],
[165,180,153,168,0,156,168,163,179],
[168,180,178,174,185,0,177,170,189],
[174,179,183,173,173,164,0,168,189],
[163,201,185,158,178,171,173,0,190],
[153,183,162,165,162,152,152,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,149,160,168,155,148,162,154],
[183,0,157,168,175,161,167,164,155],
[192,184,0,181,197,172,183,185,167],
[181,173,160,0,184,165,159,172,165],
[173,166,144,157,0,154,169,161,162],
[186,180,169,176,187,0,181,179,164],
[193,174,158,182,172,160,0,165,174],
[179,177,156,169,180,162,176,0,163],
[187,186,174,176,179,177,167,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,180,193,171,188,190,177],
[171,0,162,171,177,173,178,188,178],
[165,179,0,172,165,160,173,165,157],
[161,170,169,0,176,169,172,185,178],
[148,164,176,165,0,163,172,173,180],
[170,168,181,172,178,0,176,200,183],
[153,163,168,169,169,165,0,171,165],
[151,153,176,156,168,141,170,0,166],
[164,163,184,163,161,158,176,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,178,169,171,191,164,162,157],
[153,0,165,153,178,192,150,148,160],
[163,176,0,165,173,174,157,157,170],
[172,188,176,0,169,201,180,160,170],
[170,163,168,172,0,188,169,166,169],
[150,149,167,140,153,0,148,157,156],
[177,191,184,161,172,193,0,165,175],
[179,193,184,181,175,184,176,0,169],
[184,181,171,171,172,185,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,171,166,183,156,201,168],
[166,0,175,172,164,182,170,186,173],
[170,166,0,174,164,184,171,187,183],
[170,169,167,0,152,165,167,176,170],
[175,177,177,189,0,184,166,170,163],
[158,159,157,176,157,0,155,178,158],
[185,171,170,174,175,186,0,183,179],
[140,155,154,165,171,163,158,0,166],
[173,168,158,171,178,183,162,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,157,156,158,163,157,160,165],
[182,0,169,159,153,163,165,179,171],
[184,172,0,166,151,177,179,171,168],
[185,182,175,0,153,177,184,184,179],
[183,188,190,188,0,182,191,166,175],
[178,178,164,164,159,0,164,164,173],
[184,176,162,157,150,177,0,167,170],
[181,162,170,157,175,177,174,0,164],
[176,170,173,162,166,168,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,180,160,180,189,181,162,180],
[169,0,185,192,183,189,183,184,182],
[161,156,0,170,168,183,177,174,183],
[181,149,171,0,181,185,174,155,184],
[161,158,173,160,0,182,179,155,181],
[152,152,158,156,159,0,166,147,169],
[160,158,164,167,162,175,0,149,170],
[179,157,167,186,186,194,192,0,188],
[161,159,158,157,160,172,171,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,158,155,173,160,153,149,162],
[168,0,163,160,183,176,166,161,150],
[183,178,0,157,175,157,173,150,157],
[186,181,184,0,204,187,168,172,166],
[168,158,166,137,0,168,145,163,155],
[181,165,184,154,173,0,180,161,185],
[188,175,168,173,196,161,0,167,161],
[192,180,191,169,178,180,174,0,170],
[179,191,184,175,186,156,180,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,173,191,180,169,192,177],
[173,0,197,174,165,180,176,187,169],
[162,144,0,158,153,159,163,159,158],
[168,167,183,0,186,196,181,187,185],
[150,176,188,155,0,160,172,163,177],
[161,161,182,145,181,0,174,166,166],
[172,165,178,160,169,167,0,178,167],
[149,154,182,154,178,175,163,0,148],
[164,172,183,156,164,175,174,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,191,194,157,167,170,181,182],
[151,0,147,176,140,162,136,175,167],
[150,194,0,171,151,140,163,174,157],
[147,165,170,0,157,184,151,157,147],
[184,201,190,184,0,167,175,186,184],
[174,179,201,157,174,0,175,181,182],
[171,205,178,190,166,166,0,182,164],
[160,166,167,184,155,160,159,0,150],
[159,174,184,194,157,159,177,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,158,167,176,188,171,179],
[180,0,182,163,177,174,188,172,169],
[174,159,0,165,157,161,159,146,170],
[183,178,176,0,164,178,199,156,187],
[174,164,184,177,0,181,194,170,186],
[165,167,180,163,160,0,186,160,179],
[153,153,182,142,147,155,0,154,161],
[170,169,195,185,171,181,187,0,189],
[162,172,171,154,155,162,180,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,151,176,166,149,164,169,156],
[169,0,169,178,167,165,167,178,169],
[190,172,0,191,178,178,171,188,170],
[165,163,150,0,156,147,154,163,163],
[175,174,163,185,0,171,171,183,173],
[192,176,163,194,170,0,184,187,175],
[177,174,170,187,170,157,0,188,174],
[172,163,153,178,158,154,153,0,157],
[185,172,171,178,168,166,167,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,159,168,171,146,164,175,166],
[189,0,172,184,166,162,181,179,166],
[182,169,0,182,160,173,167,193,182],
[173,157,159,0,157,162,165,159,150],
[170,175,181,184,0,174,172,169,170],
[195,179,168,179,167,0,168,172,160],
[177,160,174,176,169,173,0,170,160],
[166,162,148,182,172,169,171,0,176],
[175,175,159,191,171,181,181,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,165,162,172,175,151,159],
[174,0,168,177,171,184,172,160,169],
[175,173,0,169,152,169,184,162,177],
[176,164,172,0,170,176,171,171,183],
[179,170,189,171,0,173,170,174,166],
[169,157,172,165,168,0,171,154,175],
[166,169,157,170,171,170,0,178,162],
[190,181,179,170,167,187,163,0,168],
[182,172,164,158,175,166,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,172,166,172,194,178,184],
[168,0,170,186,172,184,189,185,175],
[167,171,0,175,162,177,171,178,170],
[169,155,166,0,157,165,179,166,161],
[175,169,179,184,0,188,186,185,189],
[169,157,164,176,153,0,177,165,171],
[147,152,170,162,155,164,0,148,160],
[163,156,163,175,156,176,193,0,178],
[157,166,171,180,152,170,181,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,169,170,194,174,165,174],
[165,0,173,168,174,168,162,161,178],
[168,168,0,164,160,157,154,159,157],
[172,173,177,0,173,178,170,164,161],
[171,167,181,168,0,171,156,152,165],
[147,173,184,163,170,0,161,170,157],
[167,179,187,171,185,180,0,176,176],
[176,180,182,177,189,171,165,0,183],
[167,163,184,180,176,184,165,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,169,180,179,177,174,173,157],
[162,0,172,178,174,171,179,174,154],
[172,169,0,180,173,172,185,168,167],
[161,163,161,0,178,166,164,166,168],
[162,167,168,163,0,175,171,165,166],
[164,170,169,175,166,0,153,160,173],
[167,162,156,177,170,188,0,162,170],
[168,167,173,175,176,181,179,0,169],
[184,187,174,173,175,168,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,165,177,155,169,183,155],
[178,0,184,185,187,168,181,183,161],
[162,157,0,160,169,158,156,167,153],
[176,156,181,0,192,173,170,177,171],
[164,154,172,149,0,164,168,164,152],
[186,173,183,168,177,0,174,173,166],
[172,160,185,171,173,167,0,168,165],
[158,158,174,164,177,168,173,0,149],
[186,180,188,170,189,175,176,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,204,187,230,177,230,185,162],
[129,0,169,162,189,169,185,187,176],
[137,172,0,144,169,147,180,163,178],
[154,179,197,0,226,178,220,210,176],
[111,152,172,115,0,144,163,179,136],
[164,172,194,163,197,0,167,183,174],
[111,156,161,121,178,174,0,165,124],
[156,154,178,131,162,158,176,0,156],
[179,165,163,165,205,167,217,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,169,177,178,172,161,163,187],
[153,0,172,190,174,175,158,171,170],
[172,169,0,194,169,175,163,162,178],
[164,151,147,0,161,157,140,152,161],
[163,167,172,180,0,164,152,167,167],
[169,166,166,184,177,0,156,151,180],
[180,183,178,201,189,185,0,169,186],
[178,170,179,189,174,190,172,0,175],
[154,171,163,180,174,161,155,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,153,189,264,190,227,226,191],
[153,0,191,153,189,190,227,264,192],
[188,150,0,228,226,226,226,188,191],
[152,188,113,0,188,114,188,264,190],
[77,152,115,153,0,153,266,265,116],
[151,151,115,227,188,0,304,228,154],
[114,114,115,153,75,37,0,190,191],
[115,77,153,77,76,113,151,0,116],
[150,149,150,151,225,187,150,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,186,140,170,167,189,168],
[164,0,128,119,137,134,146,176,143],
[172,213,0,144,163,150,179,200,157],
[155,222,197,0,156,191,175,209,152],
[201,204,178,185,0,155,158,210,179],
[171,207,191,150,186,0,132,165,147],
[174,195,162,166,183,209,0,179,166],
[152,165,141,132,131,176,162,0,169],
[173,198,184,189,162,194,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,156,141,167,163,115,146,163],
[181,0,147,157,184,169,146,159,166],
[185,194,0,163,184,180,174,168,184],
[200,184,178,0,197,155,155,157,182],
[174,157,157,144,0,167,131,150,165],
[178,172,161,186,174,0,151,165,173],
[226,195,167,186,210,190,0,194,196],
[195,182,173,184,191,176,147,0,188],
[178,175,157,159,176,168,145,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,175,174,170,176,178,170,176],
[163,0,163,181,162,166,175,168,168],
[166,178,0,176,178,174,178,174,176],
[167,160,165,0,165,162,156,163,180],
[171,179,163,176,0,170,180,162,177],
[165,175,167,179,171,0,179,164,184],
[163,166,163,185,161,162,0,164,164],
[171,173,167,178,179,177,177,0,184],
[165,173,165,161,164,157,177,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,187,183,189,180,198,169,177],
[148,0,174,160,159,159,163,147,158],
[154,167,0,156,168,181,173,155,175],
[158,181,185,0,173,172,178,172,176],
[152,182,173,168,0,176,170,157,180],
[161,182,160,169,165,0,171,151,172],
[143,178,168,163,171,170,0,157,174],
[172,194,186,169,184,190,184,0,191],
[164,183,166,165,161,169,167,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,155,164,162,151,144,179],
[163,0,174,165,161,157,168,156,174],
[167,167,0,143,164,155,156,147,175],
[186,176,198,0,176,189,161,175,185],
[177,180,177,165,0,171,169,159,182],
[179,184,186,152,170,0,185,155,178],
[190,173,185,180,172,156,0,181,196],
[197,185,194,166,182,186,160,0,188],
[162,167,166,156,159,163,145,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,184,168,170,160,163,171,198],
[147,0,129,144,172,142,172,145,145],
[157,212,0,180,179,177,167,164,153],
[173,197,161,0,168,177,168,173,190],
[171,169,162,173,0,168,176,181,153],
[181,199,164,164,173,0,153,174,167],
[178,169,174,173,165,188,0,173,181],
[170,196,177,168,160,167,168,0,162],
[143,196,188,151,188,174,160,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,167,170,169,212,254,254,212],
[173,0,173,131,256,172,173,299,257],
[174,168,0,87,256,170,214,213,214],
[171,210,254,0,212,126,212,210,170],
[172,85,85,129,0,84,128,127,87],
[129,169,171,215,257,0,215,214,258],
[87,168,127,129,213,126,0,170,256],
[87,42,128,131,214,127,171,0,86],
[129,84,127,171,254,83,85,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,180,189,192,167,180,191,193],
[185,0,174,160,189,175,168,166,180],
[161,167,0,169,165,171,160,191,179],
[152,181,172,0,188,153,172,164,175],
[149,152,176,153,0,166,167,176,192],
[174,166,170,188,175,0,166,168,187],
[161,173,181,169,174,175,0,162,184],
[150,175,150,177,165,173,179,0,188],
[148,161,162,166,149,154,157,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,165,178,157,156,179,171,145],
[164,0,153,167,158,167,177,155,157],
[176,188,0,167,168,155,177,156,177],
[163,174,174,0,166,177,189,175,156],
[184,183,173,175,0,176,175,185,170],
[185,174,186,164,165,0,184,174,159],
[162,164,164,152,166,157,0,177,150],
[170,186,185,166,156,167,164,0,161],
[196,184,164,185,171,182,191,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,112,138,180,178,192,202,177],
[135,0,150,174,154,188,188,187,151],
[229,191,0,168,208,203,201,228,165],
[203,167,173,0,220,213,202,214,180],
[161,187,133,121,0,176,215,158,139],
[163,153,138,128,165,0,166,177,141],
[149,153,140,139,126,175,0,149,127],
[139,154,113,127,183,164,192,0,154],
[164,190,176,161,202,200,214,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,153,170,153,164,145,157,146],
[172,0,176,167,162,174,172,185,185],
[188,165,0,169,161,183,171,175,175],
[171,174,172,0,168,183,153,180,168],
[188,179,180,173,0,178,161,193,179],
[177,167,158,158,163,0,160,166,164],
[196,169,170,188,180,181,0,183,174],
[184,156,166,161,148,175,158,0,162],
[195,156,166,173,162,177,167,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,181,208,189,179,202,184,174],
[181,0,141,168,183,154,190,164,154],
[160,200,0,176,187,176,197,174,169],
[133,173,165,0,165,126,168,165,157],
[152,158,154,176,0,156,177,171,170],
[162,187,165,215,185,0,180,192,199],
[139,151,144,173,164,161,0,164,175],
[157,177,167,176,170,149,177,0,173],
[167,187,172,184,171,142,166,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,164,165,184,164,174,179],
[164,0,169,163,145,149,144,149,154],
[171,172,0,175,181,174,158,160,170],
[177,178,166,0,173,161,162,175,176],
[176,196,160,168,0,182,174,168,168],
[157,192,167,180,159,0,184,173,200],
[177,197,183,179,167,157,0,169,165],
[167,192,181,166,173,168,172,0,167],
[162,187,171,165,173,141,176,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,185,169,170,188,166,169],
[175,0,178,163,172,167,171,160,168],
[169,163,0,171,161,173,178,163,166],
[156,178,170,0,155,164,164,174,158],
[172,169,180,186,0,162,186,171,159],
[171,174,168,177,179,0,167,168,173],
[153,170,163,177,155,174,0,163,174],
[175,181,178,167,170,173,178,0,170],
[172,173,175,183,182,168,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,147,174,140,146,135,138,147],
[151,0,172,137,124,123,150,132,149],
[194,169,0,149,123,112,140,163,154],
[167,204,192,0,175,147,181,141,162],
[201,217,218,166,0,174,173,177,191],
[195,218,229,194,167,0,199,177,203],
[206,191,201,160,168,142,0,158,198],
[203,209,178,200,164,164,183,0,181],
[194,192,187,179,150,138,143,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,186,172,185,172,158,167],
[176,0,164,177,161,181,194,174,171],
[169,177,0,185,181,176,189,183,181],
[155,164,156,0,157,160,171,158,147],
[169,180,160,184,0,175,196,169,162],
[156,160,165,181,166,0,182,165,163],
[169,147,152,170,145,159,0,157,168],
[183,167,158,183,172,176,184,0,161],
[174,170,160,194,179,178,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,165,183,181,188,187,208,160],
[181,0,143,177,172,161,149,169,179],
[176,198,0,193,155,204,172,187,183],
[158,164,148,0,151,157,153,165,154],
[160,169,186,190,0,161,176,168,183],
[153,180,137,184,180,0,157,176,169],
[154,192,169,188,165,184,0,183,183],
[133,172,154,176,173,165,158,0,172],
[181,162,158,187,158,172,158,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,160,175,163,148,153,153,158],
[165,0,165,180,157,155,173,157,156],
[181,176,0,176,182,151,152,175,170],
[166,161,165,0,160,153,148,151,160],
[178,184,159,181,0,162,162,152,165],
[193,186,190,188,179,0,168,185,177],
[188,168,189,193,179,173,0,167,171],
[188,184,166,190,189,156,174,0,183],
[183,185,171,181,176,164,170,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,181,171,171,195,166,167],
[179,0,191,162,158,159,177,173,173],
[174,150,0,163,148,160,180,164,176],
[160,179,178,0,168,177,197,180,186],
[170,183,193,173,0,169,187,178,191],
[170,182,181,164,172,0,184,188,187],
[146,164,161,144,154,157,0,160,160],
[175,168,177,161,163,153,181,0,171],
[174,168,165,155,150,154,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,273,186,209,259,170,174,190],
[167,0,218,170,187,207,184,173,205],
[68,123,0,154,155,159,119,108,122],
[155,171,187,0,225,226,171,175,225],
[132,154,186,116,0,172,199,155,190],
[82,134,182,115,169,0,99,135,153],
[171,157,222,170,142,242,0,156,174],
[167,168,233,166,186,206,185,0,206],
[151,136,219,116,151,188,167,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,142,129,124,145,121,120,109],
[220,0,188,219,167,201,164,232,176],
[199,153,0,160,177,164,188,187,150],
[212,122,181,0,180,165,189,179,195],
[217,174,164,161,0,130,174,184,152],
[196,140,177,176,211,0,164,188,154],
[220,177,153,152,167,177,0,154,142],
[221,109,154,162,157,153,187,0,153],
[232,165,191,146,189,187,199,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,139,158,201,193,128,192,165],
[189,0,116,154,178,158,166,184,168],
[202,225,0,182,221,167,192,208,196],
[183,187,159,0,182,188,186,196,222],
[140,163,120,159,0,148,143,156,172],
[148,183,174,153,193,0,145,177,169],
[213,175,149,155,198,196,0,221,157],
[149,157,133,145,185,164,120,0,155],
[176,173,145,119,169,172,184,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,176,173,187,175,153,176],
[170,0,166,160,165,176,167,155,171],
[169,175,0,177,185,182,180,159,180],
[165,181,164,0,168,168,176,150,177],
[168,176,156,173,0,183,187,171,190],
[154,165,159,173,158,0,179,145,171],
[166,174,161,165,154,162,0,147,160],
[188,186,182,191,170,196,194,0,201],
[165,170,161,164,151,170,181,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,146,168,165,133,158,166,180],
[169,0,163,172,162,150,164,161,172],
[195,178,0,168,186,175,149,194,174],
[173,169,173,0,171,156,186,174,172],
[176,179,155,170,0,136,152,168,171],
[208,191,166,185,205,0,196,184,199],
[183,177,192,155,189,145,0,180,188],
[175,180,147,167,173,157,161,0,169],
[161,169,167,169,170,142,153,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,190,175,182,178,179,174,168],
[184,0,184,195,178,181,173,168,177],
[151,157,0,157,170,166,169,156,159],
[166,146,184,0,158,170,168,159,158],
[159,163,171,183,0,172,169,168,169],
[163,160,175,171,169,0,167,180,191],
[162,168,172,173,172,174,0,171,169],
[167,173,185,182,173,161,170,0,168],
[173,164,182,183,172,150,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,190,183,173,186,165,179,165],
[171,0,177,177,190,182,157,200,181],
[151,164,0,165,159,180,162,183,160],
[158,164,176,0,192,169,156,190,158],
[168,151,182,149,0,174,145,173,164],
[155,159,161,172,167,0,146,194,165],
[176,184,179,185,196,195,0,182,147],
[162,141,158,151,168,147,159,0,141],
[176,160,181,183,177,176,194,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,184,179,123,140,170,159],
[170,0,160,147,150,129,136,167,152],
[174,181,0,156,162,156,152,161,174],
[157,194,185,0,164,176,192,173,176],
[162,191,179,177,0,145,149,185,166],
[218,212,185,165,196,0,183,177,210],
[201,205,189,149,192,158,0,163,171],
[171,174,180,168,156,164,178,0,183],
[182,189,167,165,175,131,170,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,162,215,215,156,165,212],
[181,0,155,135,189,207,172,187,195],
[171,186,0,185,159,198,156,187,184],
[179,206,156,0,201,218,188,154,186],
[126,152,182,140,0,188,138,153,182],
[126,134,143,123,153,0,127,148,144],
[185,169,185,153,203,214,0,163,202],
[176,154,154,187,188,193,178,0,175],
[129,146,157,155,159,197,139,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,167,188,195,169,171,182],
[161,0,176,171,175,191,165,165,175],
[167,165,0,165,162,182,139,156,177],
[174,170,176,0,157,186,174,154,171],
[153,166,179,184,0,189,158,165,165],
[146,150,159,155,152,0,141,162,153],
[172,176,202,167,183,200,0,183,186],
[170,176,185,187,176,179,158,0,174],
[159,166,164,170,176,188,155,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,163,163,175,167,155,167],
[172,0,178,169,165,178,173,167,185],
[169,163,0,144,154,159,153,161,170],
[178,172,197,0,164,175,174,173,183],
[178,176,187,177,0,189,190,165,185],
[166,163,182,166,152,0,154,151,172],
[174,168,188,167,151,187,0,168,174],
[186,174,180,168,176,190,173,0,196],
[174,156,171,158,156,169,167,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,168,176,133,169,184,177,190],
[178,0,166,168,171,170,192,187,190],
[173,175,0,194,161,179,194,186,192],
[165,173,147,0,157,166,180,163,183],
[208,170,180,184,0,158,165,188,201],
[172,171,162,175,183,0,186,165,177],
[157,149,147,161,176,155,0,163,179],
[164,154,155,178,153,176,178,0,169],
[151,151,149,158,140,164,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,175,172,169,180,178,207,182],
[188,0,180,199,173,177,195,191,169],
[166,161,0,177,161,167,186,189,169],
[169,142,164,0,173,159,188,180,182],
[172,168,180,168,0,150,172,197,180],
[161,164,174,182,191,0,188,203,174],
[163,146,155,153,169,153,0,173,165],
[134,150,152,161,144,138,168,0,163],
[159,172,172,159,161,167,176,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,177,163,149,184,178,160],
[177,0,180,180,166,166,206,170,178],
[171,161,0,149,161,143,171,148,148],
[164,161,192,0,164,167,187,170,158],
[178,175,180,177,0,155,193,166,175],
[192,175,198,174,186,0,207,159,167],
[157,135,170,154,148,134,0,143,146],
[163,171,193,171,175,182,198,0,167],
[181,163,193,183,166,174,195,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,164,146,151,184,156,161,160],
[202,0,164,160,168,209,168,172,175],
[177,177,0,150,177,185,159,178,151],
[195,181,191,0,152,195,172,182,202],
[190,173,164,189,0,193,180,192,185],
[157,132,156,146,148,0,159,136,157],
[185,173,182,169,161,182,0,164,177],
[180,169,163,159,149,205,177,0,168],
[181,166,190,139,156,184,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,156,178,188,186,167,164,171],
[151,0,135,172,163,163,149,154,146],
[185,206,0,174,169,199,173,190,179],
[163,169,167,0,204,173,176,173,177],
[153,178,172,137,0,162,146,151,146],
[155,178,142,168,179,0,137,167,148],
[174,192,168,165,195,204,0,180,168],
[177,187,151,168,190,174,161,0,180],
[170,195,162,164,195,193,173,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,154,154,151,165,186,169,168],
[183,0,158,178,151,172,179,183,157],
[187,183,0,186,170,188,180,176,166],
[187,163,155,0,163,170,173,185,159],
[190,190,171,178,0,175,168,186,175],
[176,169,153,171,166,0,173,176,156],
[155,162,161,168,173,168,0,170,157],
[172,158,165,156,155,165,171,0,150],
[173,184,175,182,166,185,184,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,154,174,164,154,154,156],
[177,0,178,165,174,182,168,171,177],
[171,163,0,166,181,180,171,173,189],
[187,176,175,0,169,172,177,161,166],
[167,167,160,172,0,183,169,155,181],
[177,159,161,169,158,0,164,164,165],
[187,173,170,164,172,177,0,180,177],
[187,170,168,180,186,177,161,0,176],
[185,164,152,175,160,176,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,178,143,175,163,145,179],
[181,0,184,170,160,178,160,172,175],
[168,157,0,185,163,160,140,133,175],
[163,171,156,0,154,138,139,126,170],
[198,181,178,187,0,184,174,156,181],
[166,163,181,203,157,0,168,169,182],
[178,181,201,202,167,173,0,152,197],
[196,169,208,215,185,172,189,0,192],
[162,166,166,171,160,159,144,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,172,178,190,172,199,157,186],
[144,0,148,153,176,164,138,137,184],
[169,193,0,168,177,175,166,168,163],
[163,188,173,0,177,161,161,148,179],
[151,165,164,164,0,167,176,143,182],
[169,177,166,180,174,0,154,168,186],
[142,203,175,180,165,187,0,181,189],
[184,204,173,193,198,173,160,0,196],
[155,157,178,162,159,155,152,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,184,179,172,191,182,188,180],
[171,0,175,163,170,181,185,161,185],
[157,166,0,163,160,177,164,177,193],
[162,178,178,0,178,178,186,179,187],
[169,171,181,163,0,191,176,175,177],
[150,160,164,163,150,0,177,156,168],
[159,156,177,155,165,164,0,156,161],
[153,180,164,162,166,185,185,0,178],
[161,156,148,154,164,173,180,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,149,182,130,181,146,164,163],
[173,0,177,142,177,183,177,191,194],
[192,164,0,140,131,159,161,157,168],
[159,199,201,0,161,175,186,167,169],
[211,164,210,180,0,181,166,179,182],
[160,158,182,166,160,0,193,159,188],
[195,164,180,155,175,148,0,152,114],
[177,150,184,174,162,182,189,0,178],
[178,147,173,172,159,153,227,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,204,151,172,148,183,181],
[172,0,153,200,163,153,163,173,173],
[177,188,0,211,164,187,157,191,194],
[137,141,130,0,151,165,130,161,162],
[190,178,177,190,0,179,171,189,163],
[169,188,154,176,162,0,163,173,190],
[193,178,184,211,170,178,0,197,214],
[158,168,150,180,152,168,144,0,187],
[160,168,147,179,178,151,127,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,178,197,171,165,168,183],
[171,0,168,172,181,171,157,169,183],
[182,173,0,171,194,165,171,166,187],
[163,169,170,0,188,170,177,172,182],
[144,160,147,153,0,143,158,163,176],
[170,170,176,171,198,0,182,171,181],
[176,184,170,164,183,159,0,164,189],
[173,172,175,169,178,170,177,0,183],
[158,158,154,159,165,160,152,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,149,168,153,166,169,161,169],
[184,0,169,164,163,179,181,166,169],
[192,172,0,164,171,172,194,161,175],
[173,177,177,0,163,171,183,158,163],
[188,178,170,178,0,169,187,168,165],
[175,162,169,170,172,0,177,165,161],
[172,160,147,158,154,164,0,143,154],
[180,175,180,183,173,176,198,0,170],
[172,172,166,178,176,180,187,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,156,158,156,172,157,173,168],
[178,0,149,163,181,193,173,203,183],
[185,192,0,179,188,197,168,200,204],
[183,178,162,0,180,189,182,184,176],
[185,160,153,161,0,177,164,190,177],
[169,148,144,152,164,0,162,193,174],
[184,168,173,159,177,179,0,192,166],
[168,138,141,157,151,148,149,0,161],
[173,158,137,165,164,167,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,189,152,177,181,182,158,159],
[165,0,187,169,189,170,189,184,177],
[152,154,0,160,160,164,166,162,147],
[189,172,181,0,168,157,178,169,194],
[164,152,181,173,0,166,191,160,168],
[160,171,177,184,175,0,157,156,162],
[159,152,175,163,150,184,0,153,154],
[183,157,179,172,181,185,188,0,165],
[182,164,194,147,173,179,187,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,153,169,172,166,152,162,175],
[178,0,180,176,176,167,176,170,190],
[188,161,0,175,180,184,171,178,178],
[172,165,166,0,177,171,154,165,160],
[169,165,161,164,0,160,168,151,174],
[175,174,157,170,181,0,175,166,166],
[189,165,170,187,173,166,0,172,179],
[179,171,163,176,190,175,169,0,179],
[166,151,163,181,167,175,162,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,148,162,171,169,177,156],
[174,0,180,182,177,190,166,167,162],
[174,161,0,159,147,162,154,169,158],
[193,159,182,0,158,181,181,170,151],
[179,164,194,183,0,192,178,175,180],
[170,151,179,160,149,0,177,175,163],
[172,175,187,160,163,164,0,164,171],
[164,174,172,171,166,166,177,0,177],
[185,179,183,190,161,178,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,163,170,168,155,158,156,172],
[156,0,159,174,143,146,158,138,151],
[178,182,0,212,171,178,175,179,161],
[171,167,129,0,145,155,149,144,124],
[173,198,170,196,0,169,174,185,165],
[186,195,163,186,172,0,165,177,155],
[183,183,166,192,167,176,0,188,171],
[185,203,162,197,156,164,153,0,147],
[169,190,180,217,176,186,170,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,164,146,167,171,171,172,146],
[169,0,201,169,170,164,172,162,173],
[177,140,0,175,166,172,160,153,156],
[195,172,166,0,178,161,167,183,175],
[174,171,175,163,0,176,180,169,168],
[170,177,169,180,165,0,172,162,179],
[170,169,181,174,161,169,0,156,156],
[169,179,188,158,172,179,185,0,164],
[195,168,185,166,173,162,185,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,160,181,153,156,158,146,145],
[198,0,181,189,165,162,161,162,164],
[181,160,0,175,164,153,154,150,154],
[160,152,166,0,148,162,159,150,154],
[188,176,177,193,0,177,164,162,160],
[185,179,188,179,164,0,169,167,156],
[183,180,187,182,177,172,0,171,163],
[195,179,191,191,179,174,170,0,171],
[196,177,187,187,181,185,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,156,153,167,135,164,169,199],
[154,0,169,188,177,133,146,171,179],
[185,172,0,156,165,156,185,167,153],
[188,153,185,0,143,157,188,147,141],
[174,164,176,198,0,176,187,171,218],
[206,208,185,184,165,0,198,211,209],
[177,195,156,153,154,143,0,157,162],
[172,170,174,194,170,130,184,0,184],
[142,162,188,200,123,132,179,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,166,172,158,162,169,169],
[168,0,220,179,168,187,172,177,187],
[166,121,0,168,161,150,175,157,166],
[175,162,173,0,164,155,161,149,177],
[169,173,180,177,0,165,165,169,180],
[183,154,191,186,176,0,183,181,177],
[179,169,166,180,176,158,0,178,190],
[172,164,184,192,172,160,163,0,186],
[172,154,175,164,161,164,151,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,167,161,164,181,166,178,162],
[161,0,156,161,168,166,164,165,162],
[174,185,0,167,161,165,163,170,167],
[180,180,174,0,169,183,172,172,175],
[177,173,180,172,0,161,171,171,178],
[160,175,176,158,180,0,172,174,160],
[175,177,178,169,170,169,0,172,170],
[163,176,171,169,170,167,169,0,175],
[179,179,174,166,163,181,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,181,161,172,184,176,168],
[167,0,170,169,171,163,163,186,173],
[171,171,0,177,169,168,173,184,175],
[160,172,164,0,165,165,155,177,161],
[180,170,172,176,0,174,176,180,167],
[169,178,173,176,167,0,181,178,180],
[157,178,168,186,165,160,0,173,167],
[165,155,157,164,161,163,168,0,165],
[173,168,166,180,174,161,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,176,179,182,175,176,200],
[176,0,170,184,179,169,160,173,183],
[168,171,0,162,172,163,163,172,180],
[165,157,179,0,173,165,168,170,193],
[162,162,169,168,0,158,158,167,173],
[159,172,178,176,183,0,172,179,188],
[166,181,178,173,183,169,0,176,186],
[165,168,169,171,174,162,165,0,186],
[141,158,161,148,168,153,155,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,188,202,153,175,172,176,166],
[181,0,197,215,182,161,170,171,178],
[153,144,0,185,150,158,164,142,147],
[139,126,156,0,128,160,164,121,132],
[188,159,191,213,0,181,190,149,179],
[166,180,183,181,160,0,173,156,177],
[169,171,177,177,151,168,0,160,165],
[165,170,199,220,192,185,181,0,175],
[175,163,194,209,162,164,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,192,171,166,169,146,172,179],
[153,0,178,161,169,168,173,138,170],
[149,163,0,150,173,161,160,141,165],
[170,180,191,0,192,171,196,169,179],
[175,172,168,149,0,174,172,150,167],
[172,173,180,170,167,0,178,156,167],
[195,168,181,145,169,163,0,155,179],
[169,203,200,172,191,185,186,0,197],
[162,171,176,162,174,174,162,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,201,188,198,182,148,169,175],
[137,0,165,152,165,141,136,137,130],
[140,176,0,160,167,145,143,128,148],
[153,189,181,0,184,163,142,151,155],
[143,176,174,157,0,144,147,153,141],
[159,200,196,178,197,0,180,172,159],
[193,205,198,199,194,161,0,162,165],
[172,204,213,190,188,169,179,0,169],
[166,211,193,186,200,182,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,178,164,162,160,172,158],
[172,0,190,191,174,167,162,164,181],
[169,151,0,182,154,170,177,160,165],
[163,150,159,0,163,173,171,163,152],
[177,167,187,178,0,171,183,185,177],
[179,174,171,168,170,0,170,171,173],
[181,179,164,170,158,171,0,162,158],
[169,177,181,178,156,170,179,0,173],
[183,160,176,189,164,168,183,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,199,192,211,180,169,192,156],
[150,0,184,177,189,166,157,172,164],
[142,157,0,207,177,146,160,164,145],
[149,164,134,0,173,168,168,162,159],
[130,152,164,168,0,157,152,149,131],
[161,175,195,173,184,0,164,169,145],
[172,184,181,173,189,177,0,171,165],
[149,169,177,179,192,172,170,0,171],
[185,177,196,182,210,196,176,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,152,170,163,164,182,171,157],
[182,0,166,181,172,172,195,189,175],
[189,175,0,185,174,169,176,173,169],
[171,160,156,0,169,156,171,170,172],
[178,169,167,172,0,170,185,171,168],
[177,169,172,185,171,0,186,180,168],
[159,146,165,170,156,155,0,166,167],
[170,152,168,171,170,161,175,0,177],
[184,166,172,169,173,173,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,149,181,148,156,160,152,152],
[182,0,152,183,165,167,172,163,165],
[192,189,0,179,182,172,180,166,177],
[160,158,162,0,177,158,161,160,159],
[193,176,159,164,0,157,175,164,163],
[185,174,169,183,184,0,190,182,186],
[181,169,161,180,166,151,0,180,170],
[189,178,175,181,177,159,161,0,170],
[189,176,164,182,178,155,171,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,166,173,181,144,178,150],
[166,0,152,161,169,164,141,158,152],
[161,189,0,179,180,162,170,153,143],
[175,180,162,0,169,144,159,165,150],
[168,172,161,172,0,162,147,168,161],
[160,177,179,197,179,0,177,173,176],
[197,200,171,182,194,164,0,158,177],
[163,183,188,176,173,168,183,0,172],
[191,189,198,191,180,165,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,169,185,201,175,187,181,201],
[155,0,161,178,176,145,166,179,182],
[172,180,0,176,181,168,175,185,168],
[156,163,165,0,163,154,160,152,178],
[140,165,160,178,0,140,161,167,167],
[166,196,173,187,201,0,181,183,194],
[154,175,166,181,180,160,0,183,171],
[160,162,156,189,174,158,158,0,170],
[140,159,173,163,174,147,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,156,165,161,153,159,160],
[169,0,174,157,179,167,152,164,168],
[173,167,0,153,168,169,168,153,158],
[185,184,188,0,176,164,172,169,176],
[176,162,173,165,0,149,165,160,151],
[180,174,172,177,192,0,160,164,168],
[188,189,173,169,176,181,0,182,174],
[182,177,188,172,181,177,159,0,169],
[181,173,183,165,190,173,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,165,171,175,188,164,183],
[171,0,171,166,175,168,177,167,183],
[159,170,0,174,180,177,171,178,186],
[176,175,167,0,175,190,173,172,181],
[170,166,161,166,0,174,174,171,174],
[166,173,164,151,167,0,153,161,167],
[153,164,170,168,167,188,0,180,172],
[177,174,163,169,170,180,161,0,183],
[158,158,155,160,167,174,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,162,191,167,184,170,178,144],
[184,0,194,183,172,186,189,164,176],
[179,147,0,165,165,162,160,181,134],
[150,158,176,0,183,168,174,171,164],
[174,169,176,158,0,199,169,163,188],
[157,155,179,173,142,0,168,155,169],
[171,152,181,167,172,173,0,164,158],
[163,177,160,170,178,186,177,0,162],
[197,165,207,177,153,172,183,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,227,113,227,113,227,227,113],
[228,0,341,113,114,0,114,114,0],
[114,0,0,113,114,0,114,114,0],
[228,228,228,0,114,114,114,114,114],
[114,227,227,227,0,113,114,228,113],
[228,341,341,227,228,0,114,228,113],
[114,227,227,227,227,227,0,227,227],
[114,227,227,227,113,113,114,0,113],
[228,341,341,227,228,228,114,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,187,179,182,190,210,189],
[177,0,183,190,163,191,216,200,187],
[174,158,0,187,173,160,155,178,159],
[154,151,154,0,131,148,187,199,203],
[162,178,168,210,0,193,200,195,172],
[159,150,181,193,148,0,201,198,187],
[151,125,186,154,141,140,0,166,127],
[131,141,163,142,146,143,175,0,147],
[152,154,182,138,169,154,214,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,195,171,182,194,175,147,177],
[163,0,218,172,178,182,168,168,193],
[146,123,0,148,154,154,147,148,157],
[170,169,193,0,182,189,195,176,159],
[159,163,187,159,0,170,154,157,162],
[147,159,187,152,171,0,151,170,134],
[166,173,194,146,187,190,0,150,168],
[194,173,193,165,184,171,191,0,187],
[164,148,184,182,179,207,173,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,152,142,145,150,166,152,144],
[169,0,143,145,146,152,168,146,166],
[189,198,0,173,163,176,186,158,186],
[199,196,168,0,170,175,190,172,207],
[196,195,178,171,0,181,192,169,181],
[191,189,165,166,160,0,179,154,169],
[175,173,155,151,149,162,0,145,161],
[189,195,183,169,172,187,196,0,186],
[197,175,155,134,160,172,180,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,180,173,180,175,159,173,165],
[160,0,179,164,158,164,155,171,156],
[161,162,0,159,167,161,155,176,148],
[168,177,182,0,172,180,169,173,160],
[161,183,174,169,0,170,160,180,160],
[166,177,180,161,171,0,174,171,157],
[182,186,186,172,181,167,0,191,181],
[168,170,165,168,161,170,150,0,139],
[176,185,193,181,181,184,160,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,188,181,174,185,178,165,168],
[170,0,185,175,169,159,168,172,181],
[153,156,0,169,169,152,167,162,182],
[160,166,172,0,168,154,161,154,184],
[167,172,172,173,0,168,159,166,176],
[156,182,189,187,173,0,173,179,188],
[163,173,174,180,182,168,0,155,185],
[176,169,179,187,175,162,186,0,175],
[173,160,159,157,165,153,156,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,149,163,157,180,165,143],
[180,0,184,172,169,190,199,165,171],
[171,157,0,154,163,173,171,161,163],
[192,169,187,0,172,206,210,181,168],
[178,172,178,169,0,186,179,169,159],
[184,151,168,135,155,0,172,159,142],
[161,142,170,131,162,169,0,163,165],
[176,176,180,160,172,182,178,0,154],
[198,170,178,173,182,199,176,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,194,179,182,170,175,203,222],
[137,0,146,143,172,154,147,131,157],
[147,195,0,175,184,173,149,179,199],
[162,198,166,0,178,181,159,181,186],
[159,169,157,163,0,168,152,171,196],
[171,187,168,160,173,0,160,189,188],
[166,194,192,182,189,181,0,177,201],
[138,210,162,160,170,152,164,0,178],
[119,184,142,155,145,153,140,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,179,161,172,182,199,154,144],
[172,0,158,156,159,174,173,161,175],
[162,183,0,173,172,181,186,174,175],
[180,185,168,0,165,169,199,186,176],
[169,182,169,176,0,182,204,176,172],
[159,167,160,172,159,0,206,170,155],
[142,168,155,142,137,135,0,146,153],
[187,180,167,155,165,171,195,0,178],
[197,166,166,165,169,186,188,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,169,172,183,162,166,145],
[174,0,177,161,182,177,170,173,146],
[173,164,0,166,162,165,164,148,155],
[172,180,175,0,181,173,187,170,163],
[169,159,179,160,0,183,166,163,180],
[158,164,176,168,158,0,156,165,148],
[179,171,177,154,175,185,0,153,158],
[175,168,193,171,178,176,188,0,171],
[196,195,186,178,161,193,183,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,170,168,186,179,164,174],
[166,0,155,161,171,181,183,175,147],
[183,186,0,184,173,183,179,181,155],
[171,180,157,0,181,176,181,182,163],
[173,170,168,160,0,192,177,173,174],
[155,160,158,165,149,0,162,161,158],
[162,158,162,160,164,179,0,168,154],
[177,166,160,159,168,180,173,0,151],
[167,194,186,178,167,183,187,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,169,138,273,204,134,203,137],
[139,0,169,138,172,171,104,137,172],
[172,172,0,172,206,137,171,171,105],
[203,203,169,0,239,136,169,136,171],
[68,169,135,102,0,171,33,103,172],
[137,170,204,205,170,0,137,170,171],
[207,237,170,172,308,204,0,170,173],
[138,204,170,205,238,171,171,0,137],
[204,169,236,170,169,170,168,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,168,171,171,168,165,164,172],
[181,0,169,168,170,184,174,177,172],
[173,172,0,160,167,182,163,172,162],
[170,173,181,0,171,177,177,182,164],
[170,171,174,170,0,189,162,179,165],
[173,157,159,164,152,0,159,159,154],
[176,167,178,164,179,182,0,182,174],
[177,164,169,159,162,182,159,0,165],
[169,169,179,177,176,187,167,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,183,163,172,172,166,188,177],
[153,0,166,151,169,176,147,161,153],
[158,175,0,166,170,185,173,172,169],
[178,190,175,0,174,181,166,173,171],
[169,172,171,167,0,175,167,179,165],
[169,165,156,160,166,0,171,167,162],
[175,194,168,175,174,170,0,165,170],
[153,180,169,168,162,174,176,0,175],
[164,188,172,170,176,179,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,155,169,145,170,187,164,167],
[169,0,156,163,183,167,199,159,202],
[186,185,0,169,137,197,169,189,184],
[172,178,172,0,153,159,186,179,172],
[196,158,204,188,0,197,201,179,204],
[171,174,144,182,144,0,180,176,177],
[154,142,172,155,140,161,0,139,157],
[177,182,152,162,162,165,202,0,199],
[174,139,157,169,137,164,184,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,192,217,183,166,198,198,172],
[154,0,180,160,185,185,193,199,173],
[149,161,0,168,182,156,153,175,170],
[124,181,173,0,177,151,191,172,185],
[158,156,159,164,0,130,164,156,173],
[175,156,185,190,211,0,182,184,205],
[143,148,188,150,177,159,0,167,182],
[143,142,166,169,185,157,174,0,173],
[169,168,171,156,168,136,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,163,181,141,136,145,145,187],
[158,0,164,178,156,137,158,147,184],
[178,177,0,205,142,167,179,161,184],
[160,163,136,0,133,142,134,140,174],
[200,185,199,208,0,181,177,167,214],
[205,204,174,199,160,0,162,183,195],
[196,183,162,207,164,179,0,173,187],
[196,194,180,201,174,158,168,0,208],
[154,157,157,167,127,146,154,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,186,180,170,173,172,159,156],
[170,0,173,175,168,161,168,154,179],
[155,168,0,174,158,173,157,147,148],
[161,166,167,0,163,158,161,157,164],
[171,173,183,178,0,170,175,168,164],
[168,180,168,183,171,0,166,165,161],
[169,173,184,180,166,175,0,171,169],
[182,187,194,184,173,176,170,0,173],
[185,162,193,177,177,180,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,181,176,179,184,172,180,170],
[152,0,157,152,164,177,172,146,148],
[160,184,0,170,163,188,171,177,175],
[165,189,171,0,170,192,179,180,155],
[162,177,178,171,0,180,181,186,166],
[157,164,153,149,161,0,168,164,159],
[169,169,170,162,160,173,0,170,157],
[161,195,164,161,155,177,171,0,160],
[171,193,166,186,175,182,184,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,165,171,175,168,164,172,166],
[182,0,175,171,179,161,186,164,178],
[176,166,0,167,181,173,179,168,171],
[170,170,174,0,180,172,177,168,177],
[166,162,160,161,0,166,169,156,164],
[173,180,168,169,175,0,183,172,185],
[177,155,162,164,172,158,0,167,166],
[169,177,173,173,185,169,174,0,175],
[175,163,170,164,177,156,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,187,167,187,196,170,184,181],
[148,0,169,161,192,176,152,183,176],
[154,172,0,165,191,176,174,178,172],
[174,180,176,0,180,179,164,190,174],
[154,149,150,161,0,164,170,164,181],
[145,165,165,162,177,0,166,181,175],
[171,189,167,177,171,175,0,183,179],
[157,158,163,151,177,160,158,0,168],
[160,165,169,167,160,166,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,179,166,189,168,185,159],
[173,0,150,182,157,183,170,182,170],
[181,191,0,193,176,212,190,194,169],
[162,159,148,0,153,180,175,193,168],
[175,184,165,188,0,189,169,192,180],
[152,158,129,161,152,0,163,170,166],
[173,171,151,166,172,178,0,183,180],
[156,159,147,148,149,171,158,0,165],
[182,171,172,173,161,175,161,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,162,154,160,160,156,136,144],
[183,0,157,170,162,166,161,165,183],
[179,184,0,181,169,172,157,166,185],
[187,171,160,0,173,175,157,166,178],
[181,179,172,168,0,162,159,168,187],
[181,175,169,166,179,0,153,168,187],
[185,180,184,184,182,188,0,173,164],
[205,176,175,175,173,173,168,0,178],
[197,158,156,163,154,154,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,188,193,165,208,199,187],
[161,0,149,158,171,143,180,167,166],
[167,192,0,180,185,187,198,196,198],
[153,183,161,0,165,155,187,175,172],
[148,170,156,176,0,138,171,171,178],
[176,198,154,186,203,0,201,207,203],
[133,161,143,154,170,140,0,173,170],
[142,174,145,166,170,134,168,0,156],
[154,175,143,169,163,138,171,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,162,158,161,163,172,152],
[182,0,190,176,177,177,172,172,159],
[170,151,0,149,153,157,162,139,151],
[179,165,192,0,172,174,166,168,158],
[183,164,188,169,0,159,161,158,163],
[180,164,184,167,182,0,164,167,164],
[178,169,179,175,180,177,0,166,165],
[169,169,202,173,183,174,175,0,173],
[189,182,190,183,178,177,176,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,195,193,185,173,174,201,182],
[174,0,179,182,181,181,174,166,168],
[146,162,0,165,165,146,158,180,162],
[148,159,176,0,170,157,157,166,162],
[156,160,176,171,0,156,159,174,172],
[168,160,195,184,185,0,167,181,189],
[167,167,183,184,182,174,0,173,187],
[140,175,161,175,167,160,168,0,172],
[159,173,179,179,169,152,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,183,170,180,169,186,181,193],
[166,0,169,177,158,161,168,166,172],
[158,172,0,176,174,172,167,179,180],
[171,164,165,0,178,163,190,176,156],
[161,183,167,163,0,162,164,164,184],
[172,180,169,178,179,0,166,150,170],
[155,173,174,151,177,175,0,167,173],
[160,175,162,165,177,191,174,0,171],
[148,169,161,185,157,171,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,169,178,170,173,174,180],
[170,0,184,171,186,178,183,169,169],
[167,157,0,146,175,185,163,163,169],
[172,170,195,0,179,185,173,164,186],
[163,155,166,162,0,168,164,161,162],
[171,163,156,156,173,0,168,176,163],
[168,158,178,168,177,173,0,177,180],
[167,172,178,177,180,165,164,0,176],
[161,172,172,155,179,178,161,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,170,144,129,159,152,149,143],
[201,0,174,173,186,167,139,162,153],
[171,167,0,166,170,145,166,160,147],
[197,168,175,0,187,158,158,163,141],
[212,155,171,154,0,146,146,160,145],
[182,174,196,183,195,0,170,171,172],
[189,202,175,183,195,171,0,167,166],
[192,179,181,178,181,170,174,0,187],
[198,188,194,200,196,169,175,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,162,183,185,174,172,173,180],
[178,0,178,191,181,170,172,180,178],
[179,163,0,176,181,182,175,183,178],
[158,150,165,0,165,169,163,172,178],
[156,160,160,176,0,154,161,167,162],
[167,171,159,172,187,0,173,175,171],
[169,169,166,178,180,168,0,166,166],
[168,161,158,169,174,166,175,0,169],
[161,163,163,163,179,170,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,141,121,124,150,152,158,123],
[208,0,164,174,152,156,165,183,188],
[200,177,0,194,162,198,191,157,156],
[220,167,147,0,193,148,147,137,144],
[217,189,179,148,0,145,146,166,154],
[191,185,143,193,196,0,196,144,144],
[189,176,150,194,195,145,0,162,126],
[183,158,184,204,175,197,179,0,185],
[218,153,185,197,187,197,215,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,197,187,147,178,161,170,188],
[185,0,189,159,179,184,169,200,188],
[144,152,0,172,156,145,163,161,165],
[154,182,169,0,153,175,175,163,181],
[194,162,185,188,0,208,211,182,184],
[163,157,196,166,133,0,186,188,193],
[180,172,178,166,130,155,0,150,200],
[171,141,180,178,159,153,191,0,179],
[153,153,176,160,157,148,141,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,144,137,168,160,140,160,159],
[175,0,164,124,180,141,164,159,145],
[197,177,0,130,201,154,179,188,182],
[204,217,211,0,218,172,188,197,165],
[173,161,140,123,0,158,131,164,120],
[181,200,187,169,183,0,166,181,190],
[201,177,162,153,210,175,0,163,167],
[181,182,153,144,177,160,178,0,168],
[182,196,159,176,221,151,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,148,175,163,173,170,163,201],
[165,0,160,168,160,187,151,129,190],
[193,181,0,154,156,182,186,183,192],
[166,173,187,0,168,184,196,177,203],
[178,181,185,173,0,177,179,144,209],
[168,154,159,157,164,0,188,136,194],
[171,190,155,145,162,153,0,166,188],
[178,212,158,164,197,205,175,0,199],
[140,151,149,138,132,147,153,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,205,209,183,219,158,202,184],
[138,0,206,200,210,184,167,216,170],
[136,135,0,208,161,197,153,173,170],
[132,141,133,0,166,142,164,136,133],
[158,131,180,175,0,149,155,145,147],
[122,157,144,199,192,0,152,145,139],
[183,174,188,177,186,189,0,179,128],
[139,125,168,205,196,196,162,0,157],
[157,171,171,208,194,202,213,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,175,171,168,168,176,178,156],
[156,0,156,145,170,156,161,164,156],
[166,185,0,169,175,165,172,174,170],
[170,196,172,0,191,171,163,170,176],
[173,171,166,150,0,159,166,156,173],
[173,185,176,170,182,0,175,163,169],
[165,180,169,178,175,166,0,173,177],
[163,177,167,171,185,178,168,0,172],
[185,185,171,165,168,172,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,181,174,152,154,146,180,162],
[172,0,175,169,154,146,147,159,145],
[160,166,0,169,148,161,181,189,174],
[167,172,172,0,152,153,158,173,160],
[189,187,193,189,0,170,176,205,180],
[187,195,180,188,171,0,169,183,183],
[195,194,160,183,165,172,0,199,178],
[161,182,152,168,136,158,142,0,171],
[179,196,167,181,161,158,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,180,203,169,188,173,171,188],
[176,0,173,194,180,174,173,177,169],
[161,168,0,176,167,170,173,184,161],
[138,147,165,0,153,163,153,153,169],
[172,161,174,188,0,181,177,172,182],
[153,167,171,178,160,0,167,165,162],
[168,168,168,188,164,174,0,162,173],
[170,164,157,188,169,176,179,0,184],
[153,172,180,172,159,179,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,166,165,194,187,198,168,155],
[199,0,189,192,180,202,199,181,165],
[175,152,0,164,166,174,178,140,158],
[176,149,177,0,184,190,199,170,179],
[147,161,175,157,0,173,161,133,163],
[154,139,167,151,168,0,180,144,150],
[143,142,163,142,180,161,0,126,161],
[173,160,201,171,208,197,215,0,189],
[186,176,183,162,178,191,180,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,166,175,174,168,165,179],
[169,0,177,173,177,178,171,173,175],
[170,164,0,154,161,171,176,159,162],
[175,168,187,0,169,179,182,172,186],
[166,164,180,172,0,174,173,163,172],
[167,163,170,162,167,0,175,166,168],
[173,170,165,159,168,166,0,172,173],
[176,168,182,169,178,175,169,0,182],
[162,166,179,155,169,173,168,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,198,195,170,170,174,166,189],
[160,0,189,165,161,135,142,149,167],
[143,152,0,150,142,147,133,145,166],
[146,176,191,0,152,173,147,180,167],
[171,180,199,189,0,155,169,163,189],
[171,206,194,168,186,0,170,168,194],
[167,199,208,194,172,171,0,188,195],
[175,192,196,161,178,173,153,0,192],
[152,174,175,174,152,147,146,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,176,160,165,166,159,179,163],
[179,0,198,160,167,168,172,177,177],
[165,143,0,159,166,148,141,164,143],
[181,181,182,0,167,178,147,174,158],
[176,174,175,174,0,175,151,168,161],
[175,173,193,163,166,0,154,164,164],
[182,169,200,194,190,187,0,180,187],
[162,164,177,167,173,177,161,0,168],
[178,164,198,183,180,177,154,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,140,147,150,168,187,182,136],
[191,0,165,173,168,144,220,153,154],
[201,176,0,181,190,157,192,179,173],
[194,168,160,0,197,176,174,185,176],
[191,173,151,144,0,154,193,180,187],
[173,197,184,165,187,0,223,206,180],
[154,121,149,167,148,118,0,153,137],
[159,188,162,156,161,135,188,0,162],
[205,187,168,165,154,161,204,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,179,182,183,162,169,162,156],
[169,0,193,201,196,168,182,179,193],
[162,148,0,166,174,141,154,160,176],
[159,140,175,0,172,163,139,161,165],
[158,145,167,169,0,160,164,165,172],
[179,173,200,178,181,0,163,168,193],
[172,159,187,202,177,178,0,180,171],
[179,162,181,180,176,173,161,0,174],
[185,148,165,176,169,148,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,169,185,184,214,185,194,176],
[149,0,144,177,157,190,149,192,150],
[172,197,0,179,172,200,170,171,163],
[156,164,162,0,181,196,173,162,161],
[157,184,169,160,0,184,181,153,183],
[127,151,141,145,157,0,152,168,147],
[156,192,171,168,160,189,0,180,174],
[147,149,170,179,188,173,161,0,150],
[165,191,178,180,158,194,167,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,173,183,161,189,165,186,174],
[184,0,164,165,174,187,184,193,183],
[168,177,0,180,151,189,174,188,168],
[158,176,161,0,174,178,171,162,163],
[180,167,190,167,0,212,190,180,179],
[152,154,152,163,129,0,144,176,165],
[176,157,167,170,151,197,0,178,189],
[155,148,153,179,161,165,163,0,157],
[167,158,173,178,162,176,152,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,168,187,197,171,181,175,181],
[146,0,153,181,171,170,167,178,163],
[173,188,0,158,178,176,145,167,180],
[154,160,183,0,171,164,167,167,156],
[144,170,163,170,0,140,131,152,151],
[170,171,165,177,201,0,180,186,184],
[160,174,196,174,210,161,0,194,176],
[166,163,174,174,189,155,147,0,172],
[160,178,161,185,190,157,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,181,183,179,172,174,169],
[173,0,164,177,175,175,163,170,188],
[167,177,0,186,173,186,175,169,171],
[160,164,155,0,160,164,151,157,164],
[158,166,168,181,0,169,173,182,154],
[162,166,155,177,172,0,159,158,157],
[169,178,166,190,168,182,0,186,188],
[167,171,172,184,159,183,155,0,180],
[172,153,170,177,187,184,153,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,158,181,208,173,182,161,183],
[173,0,172,158,205,161,164,157,208],
[183,169,0,170,194,171,181,165,185],
[160,183,171,0,201,177,194,180,202],
[133,136,147,140,0,146,151,127,156],
[168,180,170,164,195,0,191,167,188],
[159,177,160,147,190,150,0,156,188],
[180,184,176,161,214,174,185,0,208],
[158,133,156,139,185,153,153,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,149,157,158,213,177,179],
[168,0,148,146,142,178,203,165,174],
[170,193,0,152,154,172,202,153,167],
[192,195,189,0,160,180,203,180,185],
[184,199,187,181,0,181,201,167,148],
[183,163,169,161,160,0,200,165,167],
[128,138,139,138,140,141,0,143,125],
[164,176,188,161,174,176,198,0,175],
[162,167,174,156,193,174,216,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,161,178,159,160,174,178,165],
[179,0,170,179,174,165,175,193,181],
[180,171,0,178,168,165,184,185,166],
[163,162,163,0,153,168,170,184,176],
[182,167,173,188,0,176,194,187,177],
[181,176,176,173,165,0,185,184,171],
[167,166,157,171,147,156,0,164,161],
[163,148,156,157,154,157,177,0,166],
[176,160,175,165,164,170,180,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,185,177,179,190,164,172],
[182,0,160,172,190,164,174,160,173],
[170,181,0,182,185,182,195,177,185],
[156,169,159,0,179,172,184,161,173],
[164,151,156,162,0,151,185,162,172],
[162,177,159,169,190,0,187,156,166],
[151,167,146,157,156,154,0,142,166],
[177,181,164,180,179,185,199,0,181],
[169,168,156,168,169,175,175,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,153,170,172,160,173,160],
[166,0,175,167,175,175,164,177,164],
[168,166,0,162,160,165,165,186,151],
[188,174,179,0,176,165,176,183,172],
[171,166,181,165,0,166,162,192,171],
[169,166,176,176,175,0,160,177,172],
[181,177,176,165,179,181,0,184,164],
[168,164,155,158,149,164,157,0,155],
[181,177,190,169,170,169,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,167,184,165,166,174,158,171],
[154,0,148,166,171,168,159,157,169],
[174,193,0,157,155,175,176,171,178],
[157,175,184,0,174,181,171,157,171],
[176,170,186,167,0,184,169,163,173],
[175,173,166,160,157,0,163,160,169],
[167,182,165,170,172,178,0,158,173],
[183,184,170,184,178,181,183,0,189],
[170,172,163,170,168,172,168,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,163,158,158,158,158,168,168],
[146,0,168,145,152,160,165,156,172],
[178,173,0,156,169,158,160,152,164],
[183,196,185,0,164,169,173,179,179],
[183,189,172,177,0,168,169,168,167],
[183,181,183,172,173,0,166,169,173],
[183,176,181,168,172,175,0,172,185],
[173,185,189,162,173,172,169,0,157],
[173,169,177,162,174,168,156,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,217,140,160,178,167,152,157],
[189,0,171,159,136,252,187,251,187],
[124,170,0,147,176,208,197,185,185],
[201,182,194,0,160,210,197,226,168],
[181,205,165,181,0,218,166,192,166],
[163,89,133,131,123,0,183,120,133],
[174,154,144,144,175,158,0,171,197],
[189,90,156,115,149,221,170,0,158],
[184,154,156,173,175,208,144,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,183,113,135,158,138,161,135],
[181,0,160,158,113,114,91,227,135],
[158,181,0,158,112,136,137,204,136],
[228,183,183,0,159,159,93,161,158],
[206,228,229,182,0,184,137,228,183],
[183,227,205,182,157,0,182,228,181],
[203,250,204,248,204,159,0,226,203],
[180,114,137,180,113,113,115,0,158],
[206,206,205,183,158,160,138,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,194,184,180,175,185,168,182],
[163,0,162,166,167,155,152,169,156],
[147,179,0,157,169,157,175,171,158],
[157,175,184,0,175,159,163,167,174],
[161,174,172,166,0,162,165,166,170],
[166,186,184,182,179,0,181,173,175],
[156,189,166,178,176,160,0,176,169],
[173,172,170,174,175,168,165,0,175],
[159,185,183,167,171,166,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,170,162,158,171,167,157,167],
[186,0,161,176,175,173,174,168,173],
[171,180,0,176,177,182,184,170,174],
[179,165,165,0,180,169,156,160,173],
[183,166,164,161,0,162,162,167,167],
[170,168,159,172,179,0,167,159,161],
[174,167,157,185,179,174,0,156,163],
[184,173,171,181,174,182,185,0,163],
[174,168,167,168,174,180,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,161,162,184,183,171,164],
[171,0,175,163,161,166,179,167,159],
[178,166,0,169,166,173,179,177,167],
[180,178,172,0,174,171,172,164,169],
[179,180,175,167,0,187,184,171,176],
[157,175,168,170,154,0,180,163,154],
[158,162,162,169,157,161,0,154,144],
[170,174,164,177,170,178,187,0,171],
[177,182,174,172,165,187,197,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,173,194,203,170,166,180,188],
[140,0,143,176,179,159,147,151,155],
[168,198,0,187,180,160,164,171,171],
[147,165,154,0,173,150,149,154,152],
[138,162,161,168,0,152,158,151,171],
[171,182,181,191,189,0,169,166,171],
[175,194,177,192,183,172,0,170,170],
[161,190,170,187,190,175,171,0,181],
[153,186,170,189,170,170,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,168,170,144,200,160,185,168],
[178,0,168,202,178,192,177,204,194],
[173,173,0,192,169,192,190,202,174],
[171,139,149,0,159,186,174,183,172],
[197,163,172,182,0,190,173,184,198],
[141,149,149,155,151,0,159,166,165],
[181,164,151,167,168,182,0,211,185],
[156,137,139,158,157,175,130,0,161],
[173,147,167,169,143,176,156,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,186,182,180,189,179,172],
[166,0,181,187,177,168,170,185,177],
[174,160,0,179,179,168,170,184,174],
[155,154,162,0,173,158,164,173,174],
[159,164,162,168,0,162,174,166,166],
[161,173,173,183,179,0,171,187,185],
[152,171,171,177,167,170,0,179,171],
[162,156,157,168,175,154,162,0,162],
[169,164,167,167,175,156,170,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,179,188,195,191,185,169],
[174,0,161,160,185,201,180,180,170],
[166,180,0,182,176,203,180,185,177],
[162,181,159,0,172,187,189,189,175],
[153,156,165,169,0,174,181,161,162],
[146,140,138,154,167,0,165,158,149],
[150,161,161,152,160,176,0,170,162],
[156,161,156,152,180,183,171,0,168],
[172,171,164,166,179,192,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,161,163,182,172,181,169,160],
[152,0,155,165,169,167,169,175,162],
[180,186,0,166,169,167,169,184,169],
[178,176,175,0,168,177,187,158,167],
[159,172,172,173,0,174,174,170,172],
[169,174,174,164,167,0,174,169,172],
[160,172,172,154,167,167,0,157,161],
[172,166,157,183,171,172,184,0,156],
[181,179,172,174,169,169,180,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,169,180,174,149,161,154,178],
[187,0,172,172,163,153,168,150,180],
[172,169,0,183,197,160,167,174,192],
[161,169,158,0,162,162,160,142,184],
[167,178,144,179,0,160,168,150,164],
[192,188,181,179,181,0,179,157,189],
[180,173,174,181,173,162,0,166,194],
[187,191,167,199,191,184,175,0,191],
[163,161,149,157,177,152,147,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,153,163,137,166,165,158,159],
[193,0,179,179,189,173,175,169,169],
[188,162,0,162,155,165,159,168,175],
[178,162,179,0,196,168,170,164,176],
[204,152,186,145,0,175,183,178,178],
[175,168,176,173,166,0,156,151,166],
[176,166,182,171,158,185,0,155,166],
[183,172,173,177,163,190,186,0,176],
[182,172,166,165,163,175,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,167,174,171,169,169,200,173],
[147,0,170,170,159,169,166,174,161],
[174,171,0,177,176,187,176,170,170],
[167,171,164,0,153,167,155,167,164],
[170,182,165,188,0,170,155,173,162],
[172,172,154,174,171,0,166,190,170],
[172,175,165,186,186,175,0,174,179],
[141,167,171,174,168,151,167,0,155],
[168,180,171,177,179,171,162,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,177,186,171,183,176,145,163],
[172,0,152,157,180,176,174,158,163],
[164,189,0,188,183,181,166,168,154],
[155,184,153,0,157,171,193,162,175],
[170,161,158,184,0,171,186,173,161],
[158,165,160,170,170,0,182,154,175],
[165,167,175,148,155,159,0,155,169],
[196,183,173,179,168,187,186,0,185],
[178,178,187,166,180,166,172,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,157,164,162,148,173,169,165],
[181,0,182,176,168,175,182,187,166],
[184,159,0,174,169,169,177,182,156],
[177,165,167,0,164,170,172,179,171],
[179,173,172,177,0,168,185,188,194],
[193,166,172,171,173,0,180,181,172],
[168,159,164,169,156,161,0,174,170],
[172,154,159,162,153,160,167,0,161],
[176,175,185,170,147,169,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,166,166,170,169,169,165,170],
[157,0,162,168,159,161,166,164,159],
[175,179,0,186,177,180,167,185,184],
[175,173,155,0,167,165,167,176,160],
[171,182,164,174,0,170,167,186,170],
[172,180,161,176,171,0,178,171,183],
[172,175,174,174,174,163,0,184,175],
[176,177,156,165,155,170,157,0,154],
[171,182,157,181,171,158,166,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,167,186,178,171,169,177,172],
[186,0,159,190,165,171,178,183,168],
[174,182,0,180,173,172,160,164,156],
[155,151,161,0,168,165,152,160,159],
[163,176,168,173,0,172,165,183,173],
[170,170,169,176,169,0,141,167,160],
[172,163,181,189,176,200,0,183,184],
[164,158,177,181,158,174,158,0,159],
[169,173,185,182,168,181,157,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,157,175,181,176,137,172,166],
[178,0,152,158,155,205,162,139,160],
[184,189,0,175,190,209,148,167,191],
[166,183,166,0,174,194,161,166,172],
[160,186,151,167,0,187,144,140,158],
[165,136,132,147,154,0,147,141,159],
[204,179,193,180,197,194,0,155,178],
[169,202,174,175,201,200,186,0,183],
[175,181,150,169,183,182,163,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,190,177,185,166,165,152,174],
[170,0,170,158,171,166,158,159,186],
[151,171,0,145,162,140,153,144,165],
[164,183,196,0,183,175,174,182,177],
[156,170,179,158,0,172,157,157,166],
[175,175,201,166,169,0,164,164,186],
[176,183,188,167,184,177,0,175,165],
[189,182,197,159,184,177,166,0,182],
[167,155,176,164,175,155,176,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,166,171,157,172,169,163],
[172,0,180,185,190,179,157,173,190],
[172,161,0,171,172,163,169,154,163],
[175,156,170,0,170,175,163,164,170],
[170,151,169,171,0,173,169,155,163],
[184,162,178,166,168,0,161,170,167],
[169,184,172,178,172,180,0,171,179],
[172,168,187,177,186,171,170,0,185],
[178,151,178,171,178,174,162,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,166,168,163,161,179,157,157],
[192,0,168,176,177,173,194,176,181],
[175,173,0,174,176,167,183,175,173],
[173,165,167,0,158,158,170,156,151],
[178,164,165,183,0,172,179,174,168],
[180,168,174,183,169,0,191,174,177],
[162,147,158,171,162,150,0,148,146],
[184,165,166,185,167,167,193,0,165],
[184,160,168,190,173,164,195,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,173,187,162,173,167,164,171],
[159,0,161,157,166,165,142,158,150],
[168,180,0,180,167,175,156,183,188],
[154,184,161,0,156,175,164,167,171],
[179,175,174,185,0,174,173,166,164],
[168,176,166,166,167,0,157,167,168],
[174,199,185,177,168,184,0,194,185],
[177,183,158,174,175,174,147,0,165],
[170,191,153,170,177,173,156,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,185,155,171,175,178,162,149],
[170,0,181,180,132,193,205,203,187],
[156,160,0,181,164,203,163,193,159],
[186,161,160,0,188,188,216,189,173],
[170,209,177,153,0,202,212,191,224],
[166,148,138,153,139,0,149,153,156],
[163,136,178,125,129,192,0,172,142],
[179,138,148,152,150,188,169,0,188],
[192,154,182,168,117,185,199,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,181,219,180,179,198,120,198],
[201,0,222,182,221,181,178,102,241],
[160,119,0,160,158,121,97,98,159],
[122,159,181,0,181,139,118,121,140],
[161,120,183,160,0,161,158,82,201],
[162,160,220,202,180,0,138,182,221],
[143,163,244,223,183,203,0,123,144],
[221,239,243,220,259,159,218,0,258],
[143,100,182,201,140,120,197,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,162,158,177,167,164,178,165],
[174,0,170,166,166,177,161,174,164],
[179,171,0,163,161,171,160,168,154],
[183,175,178,0,164,183,174,171,171],
[164,175,180,177,0,179,166,170,179],
[174,164,170,158,162,0,157,159,154],
[177,180,181,167,175,184,0,179,167],
[163,167,173,170,171,182,162,0,169],
[176,177,187,170,162,187,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,188,191,166,163,181,179,145],
[194,0,189,177,158,163,187,180,163],
[153,152,0,154,146,159,152,157,164],
[150,164,187,0,152,152,158,175,172],
[175,183,195,189,0,166,151,163,154],
[178,178,182,189,175,0,170,174,155],
[160,154,189,183,190,171,0,174,165],
[162,161,184,166,178,167,167,0,144],
[196,178,177,169,187,186,176,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,193,170,170,197,185,192,181],
[158,0,181,160,205,177,166,161,149],
[148,160,0,155,180,162,178,156,164],
[171,181,186,0,177,157,174,162,159],
[171,136,161,164,0,161,165,175,151],
[144,164,179,184,180,0,175,185,178],
[156,175,163,167,176,166,0,187,170],
[149,180,185,179,166,156,154,0,172],
[160,192,177,182,190,163,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,162,152,148,165,190,165,203],
[190,0,191,205,120,192,190,205,204],
[179,150,0,140,148,219,161,150,178],
[189,136,201,0,173,204,242,191,218],
[193,221,193,168,0,246,219,165,207],
[176,149,122,137,95,0,161,189,151],
[151,151,180,99,122,180,0,154,165],
[176,136,191,150,176,152,187,0,149],
[138,137,163,123,134,190,176,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,168,174,188,210,167,198,182],
[141,0,182,158,161,172,176,166,169],
[173,159,0,151,176,194,159,168,183],
[167,183,190,0,193,207,180,190,175],
[153,180,165,148,0,160,178,182,172],
[131,169,147,134,181,0,164,180,179],
[174,165,182,161,163,177,0,154,175],
[143,175,173,151,159,161,187,0,156],
[159,172,158,166,169,162,166,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,184,178,194,183,178,186],
[168,0,175,143,180,145,208,180,164],
[176,166,0,146,189,150,185,181,166],
[157,198,195,0,177,188,194,188,169],
[163,161,152,164,0,162,180,171,177],
[147,196,191,153,179,0,175,198,163],
[158,133,156,147,161,166,0,158,156],
[163,161,160,153,170,143,183,0,150],
[155,177,175,172,164,178,185,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,187,172,154,159,171,163,160],
[177,0,187,182,156,177,171,177,182],
[154,154,0,176,163,154,167,159,155],
[169,159,165,0,165,172,172,154,172],
[187,185,178,176,0,192,180,171,162],
[182,164,187,169,149,0,167,149,167],
[170,170,174,169,161,174,0,152,173],
[178,164,182,187,170,192,189,0,183],
[181,159,186,169,179,174,168,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,164,172,165,160,185,150,155],
[171,0,160,169,164,153,181,140,160],
[177,181,0,180,196,182,188,169,165],
[169,172,161,0,182,165,166,120,132],
[176,177,145,159,0,169,176,144,163],
[181,188,159,176,172,0,204,172,156],
[156,160,153,175,165,137,0,148,139],
[191,201,172,221,197,169,193,0,175],
[186,181,176,209,178,185,202,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,150,158,157,168,170,154,168],
[181,0,181,175,180,167,178,183,170],
[191,160,0,166,176,156,180,169,160],
[183,166,175,0,168,156,176,163,156],
[184,161,165,173,0,176,175,164,168],
[173,174,185,185,165,0,178,172,168],
[171,163,161,165,166,163,0,162,169],
[187,158,172,178,177,169,179,0,175],
[173,171,181,185,173,173,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,198,196,168,204,180,181,176],
[146,0,166,165,155,189,170,155,155],
[143,175,0,171,143,177,149,142,158],
[145,176,170,0,161,167,161,148,151],
[173,186,198,180,0,185,181,173,169],
[137,152,164,174,156,0,154,150,159],
[161,171,192,180,160,187,0,179,170],
[160,186,199,193,168,191,162,0,149],
[165,186,183,190,172,182,171,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,149,169,161,159,162,178,163],
[167,0,155,169,156,156,160,160,155],
[192,186,0,199,166,178,186,181,165],
[172,172,142,0,158,165,174,175,166],
[180,185,175,183,0,174,187,165,175],
[182,185,163,176,167,0,182,174,176],
[179,181,155,167,154,159,0,174,158],
[163,181,160,166,176,167,167,0,164],
[178,186,176,175,166,165,183,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,120,146,137,155,172,133,114],
[194,0,124,161,156,180,177,145,139],
[221,217,0,189,170,202,204,170,188],
[195,180,152,0,158,173,184,180,165],
[204,185,171,183,0,160,194,149,154],
[186,161,139,168,181,0,200,151,160],
[169,164,137,157,147,141,0,139,140],
[208,196,171,161,192,190,202,0,180],
[227,202,153,176,187,181,201,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,175,175,163,174,181,165,163],
[151,0,173,165,166,177,179,170,158],
[166,168,0,167,168,173,164,162,159],
[166,176,174,0,161,175,168,163,157],
[178,175,173,180,0,172,176,177,161],
[167,164,168,166,169,0,168,163,168],
[160,162,177,173,165,173,0,170,176],
[176,171,179,178,164,178,171,0,177],
[178,183,182,184,180,173,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,196,187,163,134,184,235,207],
[178,0,111,148,136,149,151,168,159],
[145,230,0,168,198,187,175,221,201],
[154,193,173,0,227,143,172,215,176],
[178,205,143,114,0,155,165,178,187],
[207,192,154,198,186,0,184,184,172],
[157,190,166,169,176,157,0,189,178],
[106,173,120,126,163,157,152,0,189],
[134,182,140,165,154,169,163,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,181,149,173,166,160,171,193],
[139,0,155,149,168,172,155,149,167],
[160,186,0,144,141,163,169,177,179],
[192,192,197,0,179,163,163,188,177],
[168,173,200,162,0,179,173,162,181],
[175,169,178,178,162,0,163,162,168],
[181,186,172,178,168,178,0,160,184],
[170,192,164,153,179,179,181,0,178],
[148,174,162,164,160,173,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,173,171,168,182,189,181,188],
[154,0,155,155,133,178,171,168,171],
[168,186,0,164,176,192,183,185,199],
[170,186,177,0,172,193,195,194,205],
[173,208,165,169,0,199,196,188,205],
[159,163,149,148,142,0,163,170,180],
[152,170,158,146,145,178,0,171,180],
[160,173,156,147,153,171,170,0,194],
[153,170,142,136,136,161,161,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,194,188,180,166,184,200,190],
[173,0,174,182,148,185,181,178,187],
[147,167,0,191,179,166,169,167,185],
[153,159,150,0,169,149,167,188,192],
[161,193,162,172,0,161,183,192,177],
[175,156,175,192,180,0,201,195,188],
[157,160,172,174,158,140,0,176,161],
[141,163,174,153,149,146,165,0,158],
[151,154,156,149,164,153,180,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,169,147,170,139,171,176,146],
[192,0,174,185,198,154,176,169,159],
[172,167,0,158,175,164,167,166,164],
[194,156,183,0,195,162,167,179,162],
[171,143,166,146,0,152,153,161,167],
[202,187,177,179,189,0,167,189,171],
[170,165,174,174,188,174,0,179,155],
[165,172,175,162,180,152,162,0,154],
[195,182,177,179,174,170,186,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,146,157,130,179,144,164],
[185,0,162,144,170,147,159,165,165],
[179,179,0,171,162,166,181,175,187],
[195,197,170,0,189,175,202,184,199],
[184,171,179,152,0,155,195,178,186],
[211,194,175,166,186,0,222,165,196],
[162,182,160,139,146,119,0,124,167],
[197,176,166,157,163,176,217,0,180],
[177,176,154,142,155,145,174,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,168,170,184,174,168,190,168],
[151,0,159,159,170,163,151,161,173],
[173,182,0,167,182,187,176,170,181],
[171,182,174,0,178,168,172,174,166],
[157,171,159,163,0,161,172,175,164],
[167,178,154,173,180,0,162,168,171],
[173,190,165,169,169,179,0,172,174],
[151,180,171,167,166,173,169,0,169],
[173,168,160,175,177,170,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,180,172,164,163,158,146,158],
[160,0,154,174,164,153,138,144,138],
[161,187,0,162,166,167,168,166,161],
[169,167,179,0,170,172,162,162,171],
[177,177,175,171,0,171,169,160,148],
[178,188,174,169,170,0,174,146,160],
[183,203,173,179,172,167,0,167,164],
[195,197,175,179,181,195,174,0,158],
[183,203,180,170,193,181,177,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,176,167,160,162,180,168],
[172,0,175,175,177,181,180,190,170],
[175,166,0,178,164,172,180,177,169],
[165,166,163,0,177,167,169,182,159],
[174,164,177,164,0,154,166,178,174],
[181,160,169,174,187,0,167,185,176],
[179,161,161,172,175,174,0,179,161],
[161,151,164,159,163,156,162,0,149],
[173,171,172,182,167,165,180,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,176,191,191,171,183,176,170],
[146,0,164,157,166,163,158,154,159],
[165,177,0,171,178,172,173,161,179],
[150,184,170,0,174,161,169,162,169],
[150,175,163,167,0,158,177,160,161],
[170,178,169,180,183,0,171,161,166],
[158,183,168,172,164,170,0,158,164],
[165,187,180,179,181,180,183,0,187],
[171,182,162,172,180,175,177,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,157,178,173,176,164,180,173],
[161,0,172,163,158,160,172,176,155],
[184,169,0,164,162,167,167,173,150],
[163,178,177,0,189,172,179,177,179],
[168,183,179,152,0,169,162,175,150],
[165,181,174,169,172,0,188,173,173],
[177,169,174,162,179,153,0,178,153],
[161,165,168,164,166,168,163,0,166],
[168,186,191,162,191,168,188,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,161,161,173,175,141,163,153],
[187,0,174,178,178,174,166,178,181],
[180,167,0,170,176,182,168,185,169],
[180,163,171,0,192,185,158,187,189],
[168,163,165,149,0,167,158,172,168],
[166,167,159,156,174,0,174,185,172],
[200,175,173,183,183,167,0,187,193],
[178,163,156,154,169,156,154,0,171],
[188,160,172,152,173,169,148,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,184,158,162,189,168,163,148],
[171,0,177,173,159,192,179,170,165],
[157,164,0,160,153,167,170,146,151],
[183,168,181,0,164,177,165,164,155],
[179,182,188,177,0,191,179,165,179],
[152,149,174,164,150,0,161,172,136],
[173,162,171,176,162,180,0,165,155],
[178,171,195,177,176,169,176,0,155],
[193,176,190,186,162,205,186,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,181,179,166,176,179,190],
[161,0,153,163,171,157,162,169,178],
[173,188,0,173,168,174,177,170,179],
[160,178,168,0,170,154,166,163,171],
[162,170,173,171,0,152,178,167,174],
[175,184,167,187,189,0,172,198,190],
[165,179,164,175,163,169,0,178,190],
[162,172,171,178,174,143,163,0,174],
[151,163,162,170,167,151,151,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,163,168,165,157,162,166],
[177,0,170,177,168,183,157,178,172],
[180,171,0,179,180,173,162,167,181],
[178,164,162,0,157,170,171,171,174],
[173,173,161,184,0,173,166,162,164],
[176,158,168,171,168,0,166,169,178],
[184,184,179,170,175,175,0,174,184],
[179,163,174,170,179,172,167,0,176],
[175,169,160,167,177,163,157,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,180,183,190,190,187,184,187],
[180,0,173,168,180,174,175,164,182],
[161,168,0,180,170,167,172,170,176],
[158,173,161,0,167,169,171,161,175],
[151,161,171,174,0,172,167,163,179],
[151,167,174,172,169,0,169,166,169],
[154,166,169,170,174,172,0,175,178],
[157,177,171,180,178,175,166,0,168],
[154,159,165,166,162,172,163,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,159,157,159,147,166,139,147],
[192,0,186,181,171,162,166,176,156],
[182,155,0,161,167,158,177,160,147],
[184,160,180,0,170,175,177,166,164],
[182,170,174,171,0,167,181,179,162],
[194,179,183,166,174,0,189,171,183],
[175,175,164,164,160,152,0,158,154],
[202,165,181,175,162,170,183,0,159],
[194,185,194,177,179,158,187,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,141,128,158,143,126,145,173],
[152,0,91,107,155,167,106,155,108],
[200,250,0,156,157,123,205,173,154],
[213,234,185,0,189,140,168,205,170],
[183,186,184,152,0,154,166,200,109],
[198,174,218,201,187,0,142,175,154],
[215,235,136,173,175,199,0,174,170],
[196,186,168,136,141,166,167,0,153],
[168,233,187,171,232,187,171,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,166,187,209,174,181,172,182],
[153,0,160,174,192,162,174,153,151],
[175,181,0,181,201,160,173,182,168],
[154,167,160,0,176,157,161,172,161],
[132,149,140,165,0,136,152,156,143],
[167,179,181,184,205,0,195,178,168],
[160,167,168,180,189,146,0,164,167],
[169,188,159,169,185,163,177,0,161],
[159,190,173,180,198,173,174,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,165,181,193,169,193,158,176],
[160,0,182,184,184,179,171,182,174],
[176,159,0,184,190,205,177,182,181],
[160,157,157,0,180,163,174,175,186],
[148,157,151,161,0,167,156,154,164],
[172,162,136,178,174,0,159,183,157],
[148,170,164,167,185,182,0,157,157],
[183,159,159,166,187,158,184,0,150],
[165,167,160,155,177,184,184,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,179,176,174,196,175,184,164],
[166,0,184,174,177,175,178,191,163],
[162,157,0,177,169,169,154,166,140],
[165,167,164,0,169,184,167,163,173],
[167,164,172,172,0,169,170,161,162],
[145,166,172,157,172,0,163,178,150],
[166,163,187,174,171,178,0,170,156],
[157,150,175,178,180,163,171,0,174],
[177,178,201,168,179,191,185,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,172,183,163,137,184,181],
[165,0,184,187,190,155,160,194,165],
[165,157,0,165,175,147,139,155,145],
[169,154,176,0,171,162,161,175,159],
[158,151,166,170,0,151,149,165,154],
[178,186,194,179,190,0,146,194,185],
[204,181,202,180,192,195,0,210,167],
[157,147,186,166,176,147,131,0,157],
[160,176,196,182,187,156,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,154,166,168,168,164,165,195],
[174,0,162,181,162,172,147,148,180],
[187,179,0,180,176,176,166,174,199],
[175,160,161,0,161,173,148,159,188],
[173,179,165,180,0,185,162,162,184],
[173,169,165,168,156,0,137,150,191],
[177,194,175,193,179,204,0,166,195],
[176,193,167,182,179,191,175,0,191],
[146,161,142,153,157,150,146,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,154,159,164,180,159,162],
[167,0,173,171,167,175,169,170,169],
[176,168,0,175,176,180,178,182,172],
[187,170,166,0,188,182,171,161,170],
[182,174,165,153,0,179,186,171,189],
[177,166,161,159,162,0,176,165,158],
[161,172,163,170,155,165,0,165,166],
[182,171,159,180,170,176,176,0,170],
[179,172,169,171,152,183,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,142,172,112,199,114,143,143],
[197,0,167,114,142,199,114,197,171],
[199,174,0,146,113,171,116,170,229],
[169,227,195,0,196,196,111,168,198],
[229,199,228,145,0,230,171,200,229],
[142,142,170,145,111,0,84,85,87],
[227,227,225,230,170,257,0,200,229],
[198,144,171,173,141,256,141,0,228],
[198,170,112,143,112,254,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,160,195,146,150,178,160,153],
[166,0,177,157,153,136,181,172,142],
[181,164,0,200,175,175,174,175,163],
[146,184,141,0,156,148,184,164,141],
[195,188,166,185,0,160,164,175,172],
[191,205,166,193,181,0,193,179,180],
[163,160,167,157,177,148,0,153,148],
[181,169,166,177,166,162,188,0,181],
[188,199,178,200,169,161,193,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,186,171,169,161,174,160,165],
[175,0,180,178,171,160,196,180,179],
[155,161,0,177,165,173,169,169,139],
[170,163,164,0,178,162,182,158,164],
[172,170,176,163,0,174,176,163,183],
[180,181,168,179,167,0,176,169,169],
[167,145,172,159,165,165,0,164,166],
[181,161,172,183,178,172,177,0,179],
[176,162,202,177,158,172,175,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,145,149,149,162,155,111,132],
[210,0,185,184,197,201,188,168,166],
[196,156,0,178,170,152,181,129,149],
[192,157,163,0,199,162,168,173,165],
[192,144,171,142,0,145,160,131,126],
[179,140,189,179,196,0,187,162,144],
[186,153,160,173,181,154,0,147,172],
[230,173,212,168,210,179,194,0,159],
[209,175,192,176,215,197,169,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,172,155,159,173,166,143],
[161,0,196,178,137,142,177,158,160],
[176,145,0,175,159,142,179,146,141],
[169,163,166,0,157,155,174,157,157],
[186,204,182,184,0,172,183,171,163],
[182,199,199,186,169,0,190,182,169],
[168,164,162,167,158,151,0,160,155],
[175,183,195,184,170,159,181,0,189],
[198,181,200,184,178,172,186,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,187,160,188,160,169,185,153],
[149,0,180,146,164,140,153,152,139],
[154,161,0,165,175,153,172,171,137],
[181,195,176,0,195,163,198,169,140],
[153,177,166,146,0,146,156,157,132],
[181,201,188,178,195,0,170,182,172],
[172,188,169,143,185,171,0,157,152],
[156,189,170,172,184,159,184,0,155],
[188,202,204,201,209,169,189,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,162,164,173,175,171,169],
[181,0,166,166,173,165,155,157,164],
[164,175,0,174,155,189,158,155,176],
[179,175,167,0,189,177,187,161,177],
[177,168,186,152,0,181,180,170,166],
[168,176,152,164,160,0,174,170,160],
[166,186,183,154,161,167,0,171,161],
[170,184,186,180,171,171,170,0,160],
[172,177,165,164,175,181,180,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,183,175,166,207,206,180,166],
[164,0,183,160,123,194,231,210,203],
[158,158,0,117,161,176,187,157,144],
[166,181,224,0,208,206,216,179,164],
[175,218,180,133,0,204,189,204,174],
[134,147,165,135,137,0,149,175,148],
[135,110,154,125,152,192,0,162,147],
[161,131,184,162,137,166,179,0,161],
[175,138,197,177,167,193,194,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,157,169,175,163,168,172,169],
[176,0,160,178,169,156,175,168,168],
[184,181,0,184,178,162,174,181,177],
[172,163,157,0,168,160,176,172,161],
[166,172,163,173,0,158,169,168,147],
[178,185,179,181,183,0,189,187,163],
[173,166,167,165,172,152,0,179,177],
[169,173,160,169,173,154,162,0,169],
[172,173,164,180,194,178,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,160,179,166,176,160,164,173],
[178,0,168,186,174,182,174,174,179],
[181,173,0,176,176,182,171,170,180],
[162,155,165,0,163,176,159,156,169],
[175,167,165,178,0,180,160,162,185],
[165,159,159,165,161,0,167,160,174],
[181,167,170,182,181,174,0,174,185],
[177,167,171,185,179,181,167,0,170],
[168,162,161,172,156,167,156,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,164,165,138,149,171,160,145],
[175,0,175,167,176,180,182,193,169],
[177,166,0,186,152,171,186,174,161],
[176,174,155,0,158,158,174,174,160],
[203,165,189,183,0,164,178,163,172],
[192,161,170,183,177,0,188,171,169],
[170,159,155,167,163,153,0,175,175],
[181,148,167,167,178,170,166,0,161],
[196,172,180,181,169,172,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,182,188,180,175,186,158],
[174,0,174,173,161,196,167,182,202],
[162,167,0,171,168,182,173,172,173],
[159,168,170,0,152,188,166,164,178],
[153,180,173,189,0,199,181,183,179],
[161,145,159,153,142,0,144,163,167],
[166,174,168,175,160,197,0,158,184],
[155,159,169,177,158,178,183,0,178],
[183,139,168,163,162,174,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,188,203,171,174,183,160,181],
[163,0,180,191,163,177,173,171,170],
[153,161,0,192,160,159,168,160,153],
[138,150,149,0,148,155,167,153,170],
[170,178,181,193,0,168,186,162,170],
[167,164,182,186,173,0,168,165,171],
[158,168,173,174,155,173,0,169,161],
[181,170,181,188,179,176,172,0,187],
[160,171,188,171,171,170,180,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,104,150,164,190,186,176,225],
[133,0,144,130,150,150,135,189,191],
[237,197,0,170,190,239,194,193,237],
[191,211,171,0,152,211,163,194,221],
[177,191,151,189,0,201,183,205,219],
[151,191,102,130,140,0,136,163,212],
[155,206,147,178,158,205,0,174,235],
[165,152,148,147,136,178,167,0,172],
[116,150,104,120,122,129,106,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,205,164,176,185,156,184,174],
[166,0,182,162,168,153,168,169,157],
[136,159,0,160,128,149,142,143,140],
[177,179,181,0,181,172,178,191,170],
[165,173,213,160,0,184,180,179,184],
[156,188,192,169,157,0,160,175,171],
[185,173,199,163,161,181,0,193,171],
[157,172,198,150,162,166,148,0,168],
[167,184,201,171,157,170,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,181,136,162,140,161,99,223],
[180,0,161,135,161,200,179,136,199],
[160,180,0,136,202,220,141,100,181],
[205,206,205,0,144,164,164,122,186],
[179,180,139,197,0,137,158,96,160],
[201,141,121,177,204,0,159,158,140],
[180,162,200,177,183,182,0,218,161],
[242,205,241,219,245,183,123,0,222],
[118,142,160,155,181,201,180,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,192,177,175,168,175,199,166],
[160,0,177,189,167,181,164,209,152],
[149,164,0,172,141,160,151,196,142],
[164,152,169,0,154,171,161,160,144],
[166,174,200,187,0,179,169,208,149],
[173,160,181,170,162,0,174,189,156],
[166,177,190,180,172,167,0,192,174],
[142,132,145,181,133,152,149,0,144],
[175,189,199,197,192,185,167,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,143,171,191,185,186,160,161],
[154,0,172,171,186,187,172,169,159],
[198,169,0,181,190,202,190,190,169],
[170,170,160,0,173,182,183,162,173],
[150,155,151,168,0,172,161,157,136],
[156,154,139,159,169,0,153,137,145],
[155,169,151,158,180,188,0,172,171],
[181,172,151,179,184,204,169,0,160],
[180,182,172,168,205,196,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,196,166,179,184,153,164],
[170,0,173,176,161,148,166,150,141],
[175,168,0,167,175,134,145,147,131],
[145,165,174,0,173,157,148,144,136],
[175,180,166,168,0,164,152,165,163],
[162,193,207,184,177,0,153,162,156],
[157,175,196,193,189,188,0,156,172],
[188,191,194,197,176,179,185,0,168],
[177,200,210,205,178,185,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,171,160,173,164,152,161,153],
[190,0,173,177,179,168,171,164,175],
[170,168,0,174,174,177,173,162,180],
[181,164,167,0,179,175,164,171,166],
[168,162,167,162,0,157,153,155,160],
[177,173,164,166,184,0,168,164,166],
[189,170,168,177,188,173,0,174,167],
[180,177,179,170,186,177,167,0,166],
[188,166,161,175,181,175,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,190,171,180,211,196,178,161],
[188,0,182,158,187,208,191,177,165],
[151,159,0,173,174,183,169,162,146],
[170,183,168,0,192,199,164,190,171],
[161,154,167,149,0,164,158,173,165],
[130,133,158,142,177,0,161,164,143],
[145,150,172,177,183,180,0,160,146],
[163,164,179,151,168,177,181,0,148],
[180,176,195,170,176,198,195,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,214,175,181,203,161,184,188],
[160,0,192,149,162,147,163,150,161],
[127,149,0,136,154,176,151,145,147],
[166,192,205,0,168,193,165,161,180],
[160,179,187,173,0,183,153,177,178],
[138,194,165,148,158,0,153,172,162],
[180,178,190,176,188,188,0,175,152],
[157,191,196,180,164,169,166,0,182],
[153,180,194,161,163,179,189,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,172,196,169,182,190,185,171],
[174,0,173,173,163,165,188,167,180],
[169,168,0,173,159,161,195,162,187],
[145,168,168,0,145,152,168,150,186],
[172,178,182,196,0,173,169,172,180],
[159,176,180,189,168,0,168,173,175],
[151,153,146,173,172,173,0,149,175],
[156,174,179,191,169,168,192,0,192],
[170,161,154,155,161,166,166,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,156,136,155,147,140,152,140],
[201,0,182,181,178,175,178,167,166],
[185,159,0,169,166,155,162,165,148],
[205,160,172,0,180,186,181,171,164],
[186,163,175,161,0,159,162,172,178],
[194,166,186,155,182,0,156,164,169],
[201,163,179,160,179,185,0,176,174],
[189,174,176,170,169,177,165,0,168],
[201,175,193,177,163,172,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,152,172,169,173,152,162,148],
[176,0,161,194,184,175,172,154,167],
[189,180,0,183,185,168,160,149,183],
[169,147,158,0,154,161,156,159,158],
[172,157,156,187,0,170,174,153,140],
[168,166,173,180,171,0,169,166,139],
[189,169,181,185,167,172,0,164,160],
[179,187,192,182,188,175,177,0,159],
[193,174,158,183,201,202,181,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,197,161,160,195,183,175],
[170,0,132,174,136,165,178,166,188],
[176,209,0,201,157,183,175,164,184],
[144,167,140,0,155,182,162,136,183],
[180,205,184,186,0,151,198,171,202],
[181,176,158,159,190,0,155,156,173],
[146,163,166,179,143,186,0,174,197],
[158,175,177,205,170,185,167,0,195],
[166,153,157,158,139,168,144,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,140,182,186,170,172,157,153],
[186,0,182,177,146,180,159,132,158],
[201,159,0,192,175,204,178,158,188],
[159,164,149,0,164,177,172,130,157],
[155,195,166,177,0,178,168,175,171],
[171,161,137,164,163,0,146,166,149],
[169,182,163,169,173,195,0,153,168],
[184,209,183,211,166,175,188,0,176],
[188,183,153,184,170,192,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,179,169,156,173,162,164,159],
[175,0,186,170,160,176,169,178,165],
[162,155,0,177,158,167,145,157,166],
[172,171,164,0,159,167,162,178,166],
[185,181,183,182,0,181,172,168,168],
[168,165,174,174,160,0,165,163,181],
[179,172,196,179,169,176,0,179,176],
[177,163,184,163,173,178,162,0,175],
[182,176,175,175,173,160,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,213,160,196,194,178,226,178],
[162,0,165,182,184,179,198,165,227],
[128,176,0,128,162,161,159,178,158],
[181,159,213,0,213,181,194,213,195],
[145,157,179,128,0,208,159,195,158],
[147,162,180,160,133,0,195,199,174],
[163,143,182,147,182,146,0,179,146],
[115,176,163,128,146,142,162,0,159],
[163,114,183,146,183,167,195,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,158,167,154,158,170,139,189],
[184,0,159,170,193,155,195,158,209],
[183,182,0,177,178,178,181,168,216],
[174,171,164,0,176,188,163,173,195],
[187,148,163,165,0,164,204,141,184],
[183,186,163,153,177,0,184,152,192],
[171,146,160,178,137,157,0,142,176],
[202,183,173,168,200,189,199,0,196],
[152,132,125,146,157,149,165,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,168,171,179,171,178,151],
[160,0,158,160,147,148,145,155,139],
[160,183,0,166,148,150,162,172,153],
[173,181,175,0,167,161,159,151,169],
[170,194,193,174,0,170,150,178,150],
[162,193,191,180,171,0,169,175,167],
[170,196,179,182,191,172,0,195,183],
[163,186,169,190,163,166,146,0,151],
[190,202,188,172,191,174,158,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,171,151,180,185,174,168],
[178,0,157,165,159,183,175,157,168],
[168,184,0,159,178,177,172,171,177],
[170,176,182,0,169,165,176,153,182],
[190,182,163,172,0,179,192,177,178],
[161,158,164,176,162,0,177,168,182],
[156,166,169,165,149,164,0,158,187],
[167,184,170,188,164,173,183,0,165],
[173,173,164,159,163,159,154,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,179,171,182,187,191,156,199],
[145,0,167,177,187,180,181,163,165],
[162,174,0,178,182,184,165,161,175],
[170,164,163,0,175,164,182,156,162],
[159,154,159,166,0,157,153,155,149],
[154,161,157,177,184,0,172,175,178],
[150,160,176,159,188,169,0,149,166],
[185,178,180,185,186,166,192,0,186],
[142,176,166,179,192,163,175,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,179,166,203,177,169,174,198],
[157,0,163,151,183,166,153,157,176],
[162,178,0,170,186,176,157,163,181],
[175,190,171,0,199,180,161,173,188],
[138,158,155,142,0,152,142,136,164],
[164,175,165,161,189,0,148,159,188],
[172,188,184,180,199,193,0,165,193],
[167,184,178,168,205,182,176,0,188],
[143,165,160,153,177,153,148,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,161,174,174,179,164,154],
[182,0,157,169,172,157,158,165,150],
[181,184,0,157,184,180,178,170,162],
[180,172,184,0,195,177,176,171,157],
[167,169,157,146,0,166,155,157,157],
[167,184,161,164,175,0,173,167,154],
[162,183,163,165,186,168,0,166,159],
[177,176,171,170,184,174,175,0,181],
[187,191,179,184,184,187,182,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,169,165,174,180,153,166,173],
[190,0,182,174,169,182,168,178,188],
[172,159,0,179,184,177,193,164,174],
[176,167,162,0,187,174,173,189,192],
[167,172,157,154,0,175,163,170,176],
[161,159,164,167,166,0,167,174,173],
[188,173,148,168,178,174,0,181,197],
[175,163,177,152,171,167,160,0,176],
[168,153,167,149,165,168,144,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,150,169,169,157,184,177,179],
[189,0,164,183,167,172,196,190,191],
[191,177,0,169,167,162,194,190,187],
[172,158,172,0,173,158,191,177,170],
[172,174,174,168,0,174,191,181,183],
[184,169,179,183,167,0,191,184,179],
[157,145,147,150,150,150,0,170,166],
[164,151,151,164,160,157,171,0,167],
[162,150,154,171,158,162,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,169,177,177,163,177,171],
[166,0,178,170,200,178,172,188,183],
[177,163,0,178,171,172,178,189,177],
[172,171,163,0,176,184,174,175,170],
[164,141,170,165,0,169,161,180,181],
[164,163,169,157,172,0,157,169,177],
[178,169,163,167,180,184,0,185,179],
[164,153,152,166,161,172,156,0,181],
[170,158,164,171,160,164,162,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,179,183,156,159,161,167],
[181,0,152,186,184,152,173,159,179],
[177,189,0,176,189,173,184,170,196],
[162,155,165,0,186,152,151,156,184],
[158,157,152,155,0,140,151,157,164],
[185,189,168,189,201,0,172,180,196],
[182,168,157,190,190,169,0,175,190],
[180,182,171,185,184,161,166,0,182],
[174,162,145,157,177,145,151,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,182,182,164,180,167,185],
[178,0,166,178,165,165,181,182,181],
[175,175,0,177,164,160,160,175,185],
[159,163,164,0,161,166,171,168,185],
[159,176,177,180,0,187,167,172,193],
[177,176,181,175,154,0,171,159,198],
[161,160,181,170,174,170,0,164,184],
[174,159,166,173,169,182,177,0,204],
[156,160,156,156,148,143,157,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,161,184,191,166,185,185,184],
[160,0,170,160,167,191,174,179,177],
[180,171,0,164,163,184,178,198,177],
[157,181,177,0,165,173,184,184,185],
[150,174,178,176,0,169,176,174,158],
[175,150,157,168,172,0,165,165,166],
[156,167,163,157,165,176,0,168,164],
[156,162,143,157,167,176,173,0,158],
[157,164,164,156,183,175,177,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,181,170,177,177,169,179,182],
[159,0,176,161,162,167,147,157,171],
[160,165,0,156,157,160,159,151,173],
[171,180,185,0,184,171,162,167,160],
[164,179,184,157,0,165,166,175,174],
[164,174,181,170,176,0,162,182,166],
[172,194,182,179,175,179,0,163,172],
[162,184,190,174,166,159,178,0,169],
[159,170,168,181,167,175,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,183,174,166,169,183,208,172],
[167,0,182,144,181,184,187,181,167],
[158,159,0,148,147,152,171,173,170],
[167,197,193,0,165,166,184,186,176],
[175,160,194,176,0,170,189,179,179],
[172,157,189,175,171,0,192,180,179],
[158,154,170,157,152,149,0,170,168],
[133,160,168,155,162,161,171,0,185],
[169,174,171,165,162,162,173,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,157,176,170,173,163,174,155],
[188,0,175,177,172,174,161,170,154],
[184,166,0,193,171,163,171,175,175],
[165,164,148,0,157,151,179,153,166],
[171,169,170,184,0,150,152,156,159],
[168,167,178,190,191,0,165,162,160],
[178,180,170,162,189,176,0,178,166],
[167,171,166,188,185,179,163,0,165],
[186,187,166,175,182,181,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,158,150,172,156,166,171],
[173,0,186,163,178,163,163,176,168],
[163,155,0,169,152,169,161,170,170],
[183,178,172,0,175,176,172,185,164],
[191,163,189,166,0,168,168,180,192],
[169,178,172,165,173,0,170,181,176],
[185,178,180,169,173,171,0,179,176],
[175,165,171,156,161,160,162,0,174],
[170,173,171,177,149,165,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,158,174,166,173,148,164],
[162,0,169,171,160,184,191,180,163],
[178,172,0,156,164,180,183,154,179],
[183,170,185,0,206,195,176,176,170],
[167,181,177,135,0,190,172,135,159],
[175,157,161,146,151,0,167,149,146],
[168,150,158,165,169,174,0,150,165],
[193,161,187,165,206,192,191,0,180],
[177,178,162,171,182,195,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,201,157,190,188,193,176,182],
[165,0,150,140,161,175,161,146,165],
[140,191,0,169,148,174,132,157,158],
[184,201,172,0,161,172,153,178,186],
[151,180,193,180,0,180,184,161,211],
[153,166,167,169,161,0,164,156,166],
[148,180,209,188,157,177,0,169,168],
[165,195,184,163,180,185,172,0,176],
[159,176,183,155,130,175,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,172,222,175,164,203,155,173],
[149,0,118,159,155,115,161,129,152],
[169,223,0,218,185,176,215,166,174],
[119,182,123,0,173,126,162,157,139],
[166,186,156,168,0,161,189,183,176],
[177,226,165,215,180,0,202,164,191],
[138,180,126,179,152,139,0,127,141],
[186,212,175,184,158,177,214,0,192],
[168,189,167,202,165,150,200,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,168,156,160,163,172,156],
[181,0,193,191,160,188,161,190,136],
[183,148,0,165,134,153,162,198,175],
[173,150,176,0,137,157,168,157,146],
[185,181,207,204,0,168,194,199,179],
[181,153,188,184,173,0,166,190,170],
[178,180,179,173,147,175,0,184,166],
[169,151,143,184,142,151,157,0,152],
[185,205,166,195,162,171,175,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,163,136,124,140,134,192,165],
[216,0,182,138,168,189,176,182,182],
[178,159,0,172,189,187,198,184,181],
[205,203,169,0,163,191,194,201,144],
[217,173,152,178,0,186,189,208,181],
[201,152,154,150,155,0,181,198,170],
[207,165,143,147,152,160,0,189,176],
[149,159,157,140,133,143,152,0,135],
[176,159,160,197,160,171,165,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,202,179,165,178,180,212,205],
[139,0,164,144,174,212,173,219,191],
[139,177,0,145,211,178,200,221,169],
[162,197,196,0,160,185,209,220,152],
[176,167,130,181,0,166,193,224,193],
[163,129,163,156,175,0,142,208,144],
[161,168,141,132,148,199,0,208,144],
[129,122,120,121,117,133,133,0,145],
[136,150,172,189,148,197,197,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,180,181,162,170,176,188],
[172,0,178,187,167,165,190,167,174],
[158,163,0,173,158,159,169,165,177],
[161,154,168,0,173,171,181,158,176],
[160,174,183,168,0,161,165,170,186],
[179,176,182,170,180,0,182,177,195],
[171,151,172,160,176,159,0,156,177],
[165,174,176,183,171,164,185,0,186],
[153,167,164,165,155,146,164,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,178,186,177,161,153,163],
[173,0,163,164,173,147,162,149,166],
[178,178,0,187,183,170,183,175,172],
[163,177,154,0,183,165,157,150,160],
[155,168,158,158,0,162,156,163,161],
[164,194,171,176,179,0,182,175,175],
[180,179,158,184,185,159,0,168,170],
[188,192,166,191,178,166,173,0,173],
[178,175,169,181,180,166,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,188,184,184,171,159,184,197],
[176,0,185,165,184,158,162,188,196],
[153,156,0,163,170,154,147,171,165],
[157,176,178,0,192,156,154,197,169],
[157,157,171,149,0,136,152,170,161],
[170,183,187,185,205,0,175,196,181],
[182,179,194,187,189,166,0,196,189],
[157,153,170,144,171,145,145,0,148],
[144,145,176,172,180,160,152,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,166,170,167,180,158,183,181],
[147,0,180,172,152,186,163,147,167],
[175,161,0,154,132,180,148,167,149],
[171,169,187,0,150,183,194,174,157],
[174,189,209,191,0,196,155,170,149],
[161,155,161,158,145,0,137,153,153],
[183,178,193,147,186,204,0,187,178],
[158,194,174,167,171,188,154,0,162],
[160,174,192,184,192,188,163,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,157,170,179,164,183,153,146],
[158,0,175,150,160,178,176,169,138],
[184,166,0,154,166,170,175,179,149],
[171,191,187,0,175,190,192,168,150],
[162,181,175,166,0,172,170,182,158],
[177,163,171,151,169,0,169,147,140],
[158,165,166,149,171,172,0,168,150],
[188,172,162,173,159,194,173,0,182],
[195,203,192,191,183,201,191,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,166,162,154,169,153,147,170],
[188,0,168,184,172,180,167,171,200],
[175,173,0,163,145,165,160,159,174],
[179,157,178,0,159,165,155,154,187],
[187,169,196,182,0,199,180,189,192],
[172,161,176,176,142,0,178,166,194],
[188,174,181,186,161,163,0,182,192],
[194,170,182,187,152,175,159,0,183],
[171,141,167,154,149,147,149,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,195,176,164,180,158,173],
[174,0,177,179,168,172,192,176,181],
[159,164,0,170,174,151,179,155,162],
[146,162,171,0,170,162,180,160,153],
[165,173,167,171,0,172,177,164,169],
[177,169,190,179,169,0,194,172,183],
[161,149,162,161,164,147,0,163,156],
[183,165,186,181,177,169,178,0,179],
[168,160,179,188,172,158,185,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,176,167,177,158,151,168],
[161,0,148,157,155,161,178,147,176],
[161,193,0,172,176,184,180,176,183],
[165,184,169,0,162,174,184,165,174],
[174,186,165,179,0,176,177,157,177],
[164,180,157,167,165,0,183,159,179],
[183,163,161,157,164,158,0,155,169],
[190,194,165,176,184,182,186,0,192],
[173,165,158,167,164,162,172,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,150,164,143,160,168,169,158],
[138,0,131,128,148,130,156,135,150],
[191,210,0,175,161,174,167,181,177],
[177,213,166,0,164,201,181,198,165],
[198,193,180,177,0,164,189,182,195],
[181,211,167,140,177,0,173,185,188],
[173,185,174,160,152,168,0,204,168],
[172,206,160,143,159,156,137,0,142],
[183,191,164,176,146,153,173,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,189,164,162,191,188,230,180],
[162,0,174,120,165,164,160,216,136],
[152,167,0,178,150,169,149,202,125],
[177,221,163,0,177,180,215,229,207],
[179,176,191,164,0,219,190,179,165],
[150,177,172,161,122,0,174,188,179],
[153,181,192,126,151,167,0,162,152],
[111,125,139,112,162,153,179,0,155],
[161,205,216,134,176,162,189,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,159,147,151,139,134,140,149],
[190,0,171,194,182,127,201,134,194],
[182,170,0,162,133,175,153,123,161],
[194,147,179,0,165,179,150,163,199],
[190,159,208,176,0,175,182,141,201],
[202,214,166,162,166,0,155,159,186],
[207,140,188,191,159,186,0,175,199],
[201,207,218,178,200,182,166,0,187],
[192,147,180,142,140,155,142,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,177,165,168,163,171,152],
[177,0,160,184,166,160,172,169,165],
[173,181,0,177,175,172,174,178,164],
[164,157,164,0,161,160,159,175,165],
[176,175,166,180,0,168,169,172,170],
[173,181,169,181,173,0,168,176,171],
[178,169,167,182,172,173,0,184,168],
[170,172,163,166,169,165,157,0,164],
[189,176,177,176,171,170,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,144,168,134,132,182,130,150],
[174,0,184,216,148,142,204,188,198],
[197,157,0,189,143,192,197,174,180],
[173,125,152,0,135,134,171,125,173],
[207,193,198,206,0,172,229,166,184],
[209,199,149,207,169,0,206,147,198],
[159,137,144,170,112,135,0,116,130],
[211,153,167,216,175,194,225,0,178],
[191,143,161,168,157,143,211,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,164,181,181,172,184,188],
[175,0,160,178,188,183,161,188,185],
[181,181,0,168,190,176,181,179,180],
[177,163,173,0,168,180,156,185,175],
[160,153,151,173,0,161,157,176,155],
[160,158,165,161,180,0,160,171,186],
[169,180,160,185,184,181,0,186,204],
[157,153,162,156,165,170,155,0,165],
[153,156,161,166,186,155,137,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,189,163,162,174,154,174],
[169,0,175,188,160,172,167,155,172],
[169,166,0,195,177,166,170,169,165],
[152,153,146,0,156,152,151,143,153],
[178,181,164,185,0,175,151,166,176],
[179,169,175,189,166,0,175,177,184],
[167,174,171,190,190,166,0,160,179],
[187,186,172,198,175,164,181,0,178],
[167,169,176,188,165,157,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,210,168,184,196,165,163,171],
[191,0,205,168,201,216,183,210,177],
[131,136,0,172,154,148,128,135,150],
[173,173,169,0,149,175,158,165,159],
[157,140,187,192,0,172,177,160,174],
[145,125,193,166,169,0,175,152,178],
[176,158,213,183,164,166,0,197,206],
[178,131,206,176,181,189,144,0,157],
[170,164,191,182,167,163,135,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,171,174,193,180,155,170,184],
[155,0,174,166,171,165,165,171,178],
[170,167,0,165,199,160,160,165,171],
[167,175,176,0,199,174,163,183,170],
[148,170,142,142,0,151,152,150,158],
[161,176,181,167,190,0,172,156,186],
[186,176,181,178,189,169,0,164,194],
[171,170,176,158,191,185,177,0,193],
[157,163,170,171,183,155,147,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,179,172,152,164,161,180],
[174,0,162,171,161,174,174,158,176],
[170,179,0,160,155,174,163,156,172],
[162,170,181,0,178,173,162,143,174],
[169,180,186,163,0,158,188,177,176],
[189,167,167,168,183,0,177,174,183],
[177,167,178,179,153,164,0,171,175],
[180,183,185,198,164,167,170,0,177],
[161,165,169,167,165,158,166,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,172,170,172,176,172,187],
[161,0,160,173,168,167,174,164,166],
[171,181,0,171,160,174,172,175,168],
[169,168,170,0,171,186,182,148,178],
[171,173,181,170,0,186,175,169,168],
[169,174,167,155,155,0,168,170,165],
[165,167,169,159,166,173,0,167,169],
[169,177,166,193,172,171,174,0,172],
[154,175,173,163,173,176,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,162,159,170,175,180,176],
[181,0,173,157,166,169,166,175,166],
[169,168,0,146,179,158,180,166,171],
[179,184,195,0,166,171,168,177,173],
[182,175,162,175,0,167,167,169,183],
[171,172,183,170,174,0,185,173,168],
[166,175,161,173,174,156,0,162,167],
[161,166,175,164,172,168,179,0,176],
[165,175,170,168,158,173,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,184,190,147,165,191,171,180],
[158,0,172,159,170,162,159,160,182],
[157,169,0,178,159,160,176,166,166],
[151,182,163,0,152,140,153,145,169],
[194,171,182,189,0,151,188,172,195],
[176,179,181,201,190,0,190,168,192],
[150,182,165,188,153,151,0,160,198],
[170,181,175,196,169,173,181,0,189],
[161,159,175,172,146,149,143,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,185,189,179,220,187,150,191],
[125,0,143,151,184,169,174,169,145],
[156,198,0,145,231,226,202,175,180],
[152,190,196,0,198,196,186,163,194],
[162,157,110,143,0,173,144,125,167],
[121,172,115,145,168,0,156,114,158],
[154,167,139,155,197,185,0,142,176],
[191,172,166,178,216,227,199,0,186],
[150,196,161,147,174,183,165,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,146,180,161,154,176,146,184],
[165,0,206,198,187,207,153,149,181],
[195,135,0,187,215,222,195,178,195],
[161,143,154,0,185,203,168,164,181],
[180,154,126,156,0,197,163,165,188],
[187,134,119,138,144,0,154,129,152],
[165,188,146,173,178,187,0,157,185],
[195,192,163,177,176,212,184,0,191],
[157,160,146,160,153,189,156,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,180,175,169,153,186,181,188],
[179,0,167,173,164,150,156,166,172],
[161,174,0,182,197,172,177,197,178],
[166,168,159,0,175,163,167,171,171],
[172,177,144,166,0,152,155,162,171],
[188,191,169,178,189,0,161,171,185],
[155,185,164,174,186,180,0,181,179],
[160,175,144,170,179,170,160,0,171],
[153,169,163,170,170,156,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,169,166,153,164,166,173,169],
[183,0,164,160,162,166,175,160,158],
[172,177,0,162,165,146,174,164,177],
[175,181,179,0,160,164,191,169,178],
[188,179,176,181,0,165,175,167,194],
[177,175,195,177,176,0,176,170,182],
[175,166,167,150,166,165,0,164,189],
[168,181,177,172,174,171,177,0,190],
[172,183,164,163,147,159,152,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,181,178,190,187,189,166,190],
[167,0,163,180,176,183,189,166,198],
[160,178,0,185,162,185,187,181,177],
[163,161,156,0,152,177,162,176,189],
[151,165,179,189,0,181,185,168,184],
[154,158,156,164,160,0,175,157,174],
[152,152,154,179,156,166,0,165,169],
[175,175,160,165,173,184,176,0,200],
[151,143,164,152,157,167,172,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,176,148,154,178,132,179,153],
[181,0,192,173,192,186,169,191,207],
[165,149,0,135,158,176,150,174,178],
[193,168,206,0,180,165,177,189,185],
[187,149,183,161,0,186,167,184,173],
[163,155,165,176,155,0,173,179,162],
[209,172,191,164,174,168,0,193,192],
[162,150,167,152,157,162,148,0,162],
[188,134,163,156,168,179,149,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,195,169,175,191,178,191,183],
[164,0,176,170,173,179,162,171,167],
[146,165,0,175,159,163,146,163,161],
[172,171,166,0,176,177,166,170,165],
[166,168,182,165,0,174,155,167,170],
[150,162,178,164,167,0,155,164,167],
[163,179,195,175,186,186,0,182,189],
[150,170,178,171,174,177,159,0,179],
[158,174,180,176,171,174,152,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,192,181,178,201,185,171,153],
[169,0,227,198,180,187,188,191,198],
[149,114,0,162,147,171,170,158,144],
[160,143,179,0,168,184,184,164,153],
[163,161,194,173,0,202,182,193,172],
[140,154,170,157,139,0,175,170,163],
[156,153,171,157,159,166,0,159,153],
[170,150,183,177,148,171,182,0,156],
[188,143,197,188,169,178,188,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,189,167,167,172,167,157,193],
[168,0,204,171,159,169,172,164,181],
[152,137,0,127,148,127,134,143,147],
[174,170,214,0,171,170,187,151,196],
[174,182,193,170,0,181,185,155,177],
[169,172,214,171,160,0,174,176,187],
[174,169,207,154,156,167,0,164,172],
[184,177,198,190,186,165,177,0,216],
[148,160,194,145,164,154,169,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,180,161,194,172,186,189],
[160,0,162,163,166,166,149,168,166],
[173,179,0,166,170,175,181,184,186],
[161,178,175,0,182,173,166,172,195],
[180,175,171,159,0,160,163,155,178],
[147,175,166,168,181,0,177,145,169],
[169,192,160,175,178,164,0,163,182],
[155,173,157,169,186,196,178,0,179],
[152,175,155,146,163,172,159,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,183,166,178,186,165,164,168],
[179,0,186,171,176,173,169,178,147],
[158,155,0,155,162,150,159,183,169],
[175,170,186,0,163,183,170,182,164],
[163,165,179,178,0,154,181,173,164],
[155,168,191,158,187,0,172,167,158],
[176,172,182,171,160,169,0,170,174],
[177,163,158,159,168,174,171,0,150],
[173,194,172,177,177,183,167,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,167,176,162,168,192,149],
[173,0,180,168,202,182,184,189,162],
[175,161,0,161,183,164,164,186,172],
[174,173,180,0,181,170,170,184,165],
[165,139,158,160,0,167,151,171,159],
[179,159,177,171,174,0,167,176,171],
[173,157,177,171,190,174,0,209,175],
[149,152,155,157,170,165,132,0,156],
[192,179,169,176,182,170,166,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,183,171,136,198,170,195,166],
[183,0,209,158,175,186,181,193,170],
[158,132,0,163,130,186,154,170,169],
[170,183,178,0,170,184,176,210,174],
[205,166,211,171,0,194,180,211,215],
[143,155,155,157,147,0,194,186,164],
[171,160,187,165,161,147,0,189,156],
[146,148,171,131,130,155,152,0,153],
[175,171,172,167,126,177,185,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,188,187,168,177,155,201],
[164,0,159,184,180,183,182,164,193],
[165,182,0,173,182,172,184,182,172],
[153,157,168,0,163,148,171,153,172],
[154,161,159,178,0,159,178,166,177],
[173,158,169,193,182,0,177,163,172],
[164,159,157,170,163,164,0,171,182],
[186,177,159,188,175,178,170,0,187],
[140,148,169,169,164,169,159,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,150,155,137,144,147,118,140],
[179,0,154,179,146,173,176,144,177],
[191,187,0,160,148,178,169,150,177],
[186,162,181,0,165,175,162,156,159],
[204,195,193,176,0,188,190,142,207],
[197,168,163,166,153,0,124,142,168],
[194,165,172,179,151,217,0,179,174],
[223,197,191,185,199,199,162,0,203],
[201,164,164,182,134,173,167,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,168,158,169,174,163,170,153],
[182,0,168,166,171,180,168,188,163],
[173,173,0,156,155,176,167,173,165],
[183,175,185,0,180,187,172,163,171],
[172,170,186,161,0,181,179,166,164],
[167,161,165,154,160,0,167,162,153],
[178,173,174,169,162,174,0,182,179],
[171,153,168,178,175,179,159,0,164],
[188,178,176,170,177,188,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,157,174,175,167,187,166],
[167,0,175,167,158,181,168,184,170],
[175,166,0,155,161,163,186,190,170],
[184,174,186,0,196,188,188,179,164],
[167,183,180,145,0,174,186,191,150],
[166,160,178,153,167,0,156,182,166],
[174,173,155,153,155,185,0,179,172],
[154,157,151,162,150,159,162,0,165],
[175,171,171,177,191,175,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,164,167,179,174,183,175],
[161,0,151,172,166,187,162,179,180],
[173,190,0,175,170,192,180,183,183],
[177,169,166,0,177,190,193,182,183],
[174,175,171,164,0,195,191,186,186],
[162,154,149,151,146,0,148,163,165],
[167,179,161,148,150,193,0,167,179],
[158,162,158,159,155,178,174,0,167],
[166,161,158,158,155,176,162,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,199,165,184,178,193,180,176],
[158,0,184,164,162,161,165,181,159],
[142,157,0,147,154,158,158,165,156],
[176,177,194,0,170,179,178,176,161],
[157,179,187,171,0,170,185,170,179],
[163,180,183,162,171,0,167,157,171],
[148,176,183,163,156,174,0,180,159],
[161,160,176,165,171,184,161,0,164],
[165,182,185,180,162,170,182,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,173,141,181,239,183,181,195],
[135,0,150,172,180,191,180,181,202],
[168,191,0,179,190,194,180,172,196],
[200,169,162,0,164,210,186,138,183],
[160,161,151,177,0,215,158,153,173],
[102,150,147,131,126,0,139,146,144],
[158,161,161,155,183,202,0,145,193],
[160,160,169,203,188,195,196,0,217],
[146,139,145,158,168,197,148,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,170,156,165,169,176,171],
[179,0,165,167,162,158,173,172,171],
[172,176,0,165,180,173,163,179,183],
[171,174,176,0,166,171,148,173,171],
[185,179,161,175,0,172,167,182,172],
[176,183,168,170,169,0,156,170,189],
[172,168,178,193,174,185,0,175,185],
[165,169,162,168,159,171,166,0,163],
[170,170,158,170,169,152,156,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,153,164,163,154,163,162],
[176,0,189,159,188,166,180,165,193],
[165,152,0,168,174,154,155,165,168],
[188,182,173,0,185,170,159,166,181],
[177,153,167,156,0,150,141,158,142],
[178,175,187,171,191,0,164,175,190],
[187,161,186,182,200,177,0,186,186],
[178,176,176,175,183,166,155,0,163],
[179,148,173,160,199,151,155,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,143,166,146,143,140,126,139],
[214,0,199,183,161,179,224,166,196],
[198,142,0,180,128,154,191,179,163],
[175,158,161,0,145,141,180,150,143],
[195,180,213,196,0,194,199,169,218],
[198,162,187,200,147,0,171,155,165],
[201,117,150,161,142,170,0,154,144],
[215,175,162,191,172,186,187,0,158],
[202,145,178,198,123,176,197,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,227,226,115,114,229,341,226],
[227,0,227,227,115,0,115,227,112],
[114,114,0,114,115,114,229,229,114],
[115,114,227,0,115,114,229,115,226],
[226,226,226,226,0,114,114,226,226],
[227,341,227,227,227,0,115,227,226],
[112,226,112,112,227,226,0,112,226],
[0,114,112,226,115,114,229,0,226],
[115,229,227,115,115,115,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,189,165,153,149,190,181,169],
[193,0,199,148,170,151,175,166,158],
[152,142,0,124,148,111,145,151,160],
[176,193,217,0,172,148,185,205,167],
[188,171,193,169,0,191,196,215,193],
[192,190,230,193,150,0,188,206,200],
[151,166,196,156,145,153,0,168,156],
[160,175,190,136,126,135,173,0,164],
[172,183,181,174,148,141,185,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,162,146,159,161,151,181,167],
[201,0,170,183,176,191,173,180,183],
[179,171,0,160,175,186,162,177,179],
[195,158,181,0,182,199,177,186,190],
[182,165,166,159,0,173,144,162,167],
[180,150,155,142,168,0,151,170,163],
[190,168,179,164,197,190,0,172,180],
[160,161,164,155,179,171,169,0,179],
[174,158,162,151,174,178,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,172,170,160,177,190,190],
[163,0,160,172,147,165,170,167,152],
[174,181,0,172,178,162,178,197,172],
[169,169,169,0,165,166,177,191,161],
[171,194,163,176,0,155,175,184,173],
[181,176,179,175,186,0,161,201,167],
[164,171,163,164,166,180,0,180,131],
[151,174,144,150,157,140,161,0,156],
[151,189,169,180,168,174,210,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,160,171,154,191,163,177,164],
[166,0,161,165,160,174,165,184,166],
[181,180,0,169,177,197,174,210,184],
[170,176,172,0,157,205,159,184,188],
[187,181,164,184,0,198,169,181,181],
[150,167,144,136,143,0,140,162,168],
[178,176,167,182,172,201,0,181,181],
[164,157,131,157,160,179,160,0,167],
[177,175,157,153,160,173,160,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,179,165,163,175,170,168,166],
[157,0,168,167,164,168,177,168,174],
[162,173,0,156,166,175,177,163,159],
[176,174,185,0,186,166,192,181,177],
[178,177,175,155,0,186,179,172,179],
[166,173,166,175,155,0,184,155,165],
[171,164,164,149,162,157,0,162,166],
[173,173,178,160,169,186,179,0,167],
[175,167,182,164,162,176,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,179,185,206,173,183,161,188],
[159,0,171,181,184,172,172,150,171],
[162,170,0,166,189,157,167,164,173],
[156,160,175,0,181,170,177,160,172],
[135,157,152,160,0,149,147,142,138],
[168,169,184,171,192,0,177,170,157],
[158,169,174,164,194,164,0,169,178],
[180,191,177,181,199,171,172,0,167],
[153,170,168,169,203,184,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,193,184,186,163,174,180,212],
[158,0,157,151,141,146,159,143,197],
[148,184,0,156,138,153,149,179,166],
[157,190,185,0,149,158,170,185,179],
[155,200,203,192,0,178,186,164,213],
[178,195,188,183,163,0,159,171,202],
[167,182,192,171,155,182,0,171,185],
[161,198,162,156,177,170,170,0,200],
[129,144,175,162,128,139,156,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,192,146,167,152,155,153,157],
[182,0,191,174,166,167,168,187,177],
[149,150,0,165,161,146,155,153,154],
[195,167,176,0,160,158,169,173,180],
[174,175,180,181,0,164,166,176,168],
[189,174,195,183,177,0,191,179,166],
[186,173,186,172,175,150,0,175,173],
[188,154,188,168,165,162,166,0,167],
[184,164,187,161,173,175,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,120,168,128,181,157,126,144],
[166,0,154,146,138,154,155,176,139],
[221,187,0,160,147,182,171,147,184],
[173,195,181,0,163,197,185,176,159],
[213,203,194,178,0,223,188,143,177],
[160,187,159,144,118,0,154,129,115],
[184,186,170,156,153,187,0,157,160],
[215,165,194,165,198,212,184,0,169],
[197,202,157,182,164,226,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,168,190,171,198,171,188,179],
[146,0,156,156,146,167,153,174,160],
[173,185,0,169,172,188,160,183,191],
[151,185,172,0,166,188,168,183,188],
[170,195,169,175,0,180,166,186,167],
[143,174,153,153,161,0,154,169,173],
[170,188,181,173,175,187,0,181,170],
[153,167,158,158,155,172,160,0,178],
[162,181,150,153,174,168,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,202,194,180,162,183,187],
[185,0,185,193,190,194,200,164,186],
[178,156,0,169,174,144,173,169,162],
[139,148,172,0,181,180,170,160,175],
[147,151,167,160,0,160,170,156,142],
[161,147,197,161,181,0,171,157,162],
[179,141,168,171,171,170,0,171,195],
[158,177,172,181,185,184,170,0,167],
[154,155,179,166,199,179,146,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,186,176,169,176,176,166,171],
[170,0,175,157,168,168,168,161,173],
[155,166,0,153,156,166,160,149,164],
[165,184,188,0,172,176,171,175,181],
[172,173,185,169,0,186,178,166,182],
[165,173,175,165,155,0,165,162,177],
[165,173,181,170,163,176,0,171,180],
[175,180,192,166,175,179,170,0,174],
[170,168,177,160,159,164,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,188,158,172,182,180,174,180],
[166,0,190,157,170,172,166,157,177],
[153,151,0,151,171,150,152,152,164],
[183,184,190,0,171,185,181,169,181],
[169,171,170,170,0,188,161,153,168],
[159,169,191,156,153,0,171,162,146],
[161,175,189,160,180,170,0,158,190],
[167,184,189,172,188,179,183,0,191],
[161,164,177,160,173,195,151,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,189,163,175,166,169,175],
[168,0,145,173,173,175,170,165,160],
[170,196,0,196,188,179,183,197,185],
[152,168,145,0,154,172,163,172,145],
[178,168,153,187,0,187,175,181,159],
[166,166,162,169,154,0,171,183,163],
[175,171,158,178,166,170,0,163,165],
[172,176,144,169,160,158,178,0,144],
[166,181,156,196,182,178,176,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,208,240,211,225,177,210,227],
[179,0,160,211,194,178,178,162,207],
[133,181,0,179,198,149,163,130,246],
[101,130,162,0,134,133,147,148,178],
[130,147,143,207,0,115,209,147,228],
[116,163,192,208,226,0,176,150,227],
[164,163,178,194,132,165,0,164,180],
[131,179,211,193,194,191,177,0,227],
[114,134,95,163,113,114,161,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,160,199,170,167,159,190],
[172,0,160,152,186,163,151,161,171],
[172,181,0,159,188,167,180,185,188],
[181,189,182,0,214,176,168,190,198],
[142,155,153,127,0,153,120,157,163],
[171,178,174,165,188,0,157,164,185],
[174,190,161,173,221,184,0,178,197],
[182,180,156,151,184,177,163,0,180],
[151,170,153,143,178,156,144,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,181,158,172,163,151,172],
[160,0,162,159,161,165,160,143,168],
[171,179,0,185,173,174,165,173,177],
[160,182,156,0,166,153,146,151,174],
[183,180,168,175,0,178,171,162,177],
[169,176,167,188,163,0,148,158,185],
[178,181,176,195,170,193,0,158,181],
[190,198,168,190,179,183,183,0,182],
[169,173,164,167,164,156,160,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,161,184,184,177,174,163,152],
[187,0,194,168,195,224,181,210,200],
[180,147,0,182,176,180,149,174,179],
[157,173,159,0,175,178,174,182,166],
[157,146,165,166,0,155,171,156,171],
[164,117,161,163,186,0,165,152,141],
[167,160,192,167,170,176,0,201,181],
[178,131,167,159,185,189,140,0,161],
[189,141,162,175,170,200,160,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,185,166,175,158,177,188,150],
[136,0,178,189,183,161,155,150,147],
[156,163,0,156,152,161,144,148,150],
[175,152,185,0,175,146,164,137,144],
[166,158,189,166,0,158,163,133,152],
[183,180,180,195,183,0,174,164,161],
[164,186,197,177,178,167,0,156,169],
[153,191,193,204,208,177,185,0,188],
[191,194,191,197,189,180,172,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,162,179,166,176,186,185,170],
[134,0,122,160,142,153,159,156,140],
[179,219,0,193,175,165,196,183,186],
[162,181,148,0,164,173,167,184,156],
[175,199,166,177,0,171,194,175,166],
[165,188,176,168,170,0,177,176,165],
[155,182,145,174,147,164,0,173,156],
[156,185,158,157,166,165,168,0,168],
[171,201,155,185,175,176,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,180,193,179,185,192,191,170],
[143,0,185,139,148,179,166,195,165],
[161,156,0,177,157,172,163,171,131],
[148,202,164,0,138,188,173,190,145],
[162,193,184,203,0,211,204,189,179],
[156,162,169,153,130,0,174,160,138],
[149,175,178,168,137,167,0,164,150],
[150,146,170,151,152,181,177,0,163],
[171,176,210,196,162,203,191,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,155,146,161,154,151,169],
[168,0,179,146,151,184,170,170,173],
[173,162,0,153,169,186,166,160,167],
[186,195,188,0,180,168,171,172,176],
[195,190,172,161,0,195,188,180,182],
[180,157,155,173,146,0,149,163,159],
[187,171,175,170,153,192,0,167,178],
[190,171,181,169,161,178,174,0,165],
[172,168,174,165,159,182,163,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,180,180,197,182,186,175,166],
[157,0,175,175,168,173,172,174,174],
[161,166,0,154,177,179,185,172,172],
[161,166,187,0,173,153,162,161,156],
[144,173,164,168,0,156,175,165,146],
[159,168,162,188,185,0,157,167,162],
[155,169,156,179,166,184,0,162,158],
[166,167,169,180,176,174,179,0,155],
[175,167,169,185,195,179,183,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,161,158,157,165,174,166,158],
[146,0,157,143,157,155,167,167,148],
[180,184,0,159,156,168,179,179,159],
[183,198,182,0,162,168,187,188,162],
[184,184,185,179,0,167,186,185,181],
[176,186,173,173,174,0,169,197,166],
[167,174,162,154,155,172,0,168,164],
[175,174,162,153,156,144,173,0,167],
[183,193,182,179,160,175,177,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,141,184,166,169,161,170,146],
[179,0,163,185,161,181,159,162,172],
[200,178,0,187,192,196,179,182,162],
[157,156,154,0,155,159,136,146,144],
[175,180,149,186,0,165,174,158,150],
[172,160,145,182,176,0,158,163,148],
[180,182,162,205,167,183,0,166,163],
[171,179,159,195,183,178,175,0,161],
[195,169,179,197,191,193,178,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,182,175,167,167,187,182],
[168,0,184,175,171,173,193,187,187],
[167,157,0,161,175,170,166,177,168],
[159,166,180,0,180,161,164,168,173],
[166,170,166,161,0,160,178,177,170],
[174,168,171,180,181,0,191,172,181],
[174,148,175,177,163,150,0,181,174],
[154,154,164,173,164,169,160,0,175],
[159,154,173,168,171,160,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,182,173,166,187,171,176,162],
[184,0,170,166,175,186,174,185,171],
[159,171,0,173,159,188,170,167,164],
[168,175,168,0,170,186,166,179,167],
[175,166,182,171,0,175,169,178,171],
[154,155,153,155,166,0,162,169,168],
[170,167,171,175,172,179,0,187,183],
[165,156,174,162,163,172,154,0,152],
[179,170,177,174,170,173,158,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,186,149,180,191,194,173,169],
[152,0,162,174,178,183,169,159,162],
[155,179,0,173,165,194,178,179,172],
[192,167,168,0,175,182,201,176,176],
[161,163,176,166,0,173,166,162,165],
[150,158,147,159,168,0,174,168,140],
[147,172,163,140,175,167,0,173,146],
[168,182,162,165,179,173,168,0,151],
[172,179,169,165,176,201,195,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,189,171,200,183,192,165],
[177,0,169,183,171,177,190,192,159],
[162,172,0,183,152,171,177,178,166],
[152,158,158,0,171,177,166,167,153],
[170,170,189,170,0,210,196,203,172],
[141,164,170,164,131,0,168,178,158],
[158,151,164,175,145,173,0,189,167],
[149,149,163,174,138,163,152,0,156],
[176,182,175,188,169,183,174,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,147,168,176,158,159,177,144],
[199,0,166,174,172,167,159,187,156],
[194,175,0,156,163,166,156,192,170],
[173,167,185,0,174,174,171,181,169],
[165,169,178,167,0,180,161,186,196],
[183,174,175,167,161,0,159,192,166],
[182,182,185,170,180,182,0,192,184],
[164,154,149,160,155,149,149,0,164],
[197,185,171,172,145,175,157,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,150,165,154,157,175,175],
[162,0,159,154,180,148,157,160,172],
[176,182,0,175,176,165,157,174,185],
[191,187,166,0,190,172,171,179,187],
[176,161,165,151,0,166,168,170,166],
[187,193,176,169,175,0,173,184,175],
[184,184,184,170,173,168,0,192,174],
[166,181,167,162,171,157,149,0,153],
[166,169,156,154,175,166,167,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,187,149,148,173,166,173,172],
[174,0,167,162,139,168,177,163,161],
[154,174,0,148,141,155,164,166,173],
[192,179,193,0,157,175,167,212,178],
[193,202,200,184,0,163,194,202,190],
[168,173,186,166,178,0,174,192,176],
[175,164,177,174,147,167,0,174,170],
[168,178,175,129,139,149,167,0,139],
[169,180,168,163,151,165,171,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,165,170,164,151,169,162,170],
[183,0,175,173,188,172,163,188,181],
[176,166,0,173,162,149,174,179,170],
[171,168,168,0,184,176,167,178,177],
[177,153,179,157,0,145,161,179,173],
[190,169,192,165,196,0,168,177,180],
[172,178,167,174,180,173,0,167,179],
[179,153,162,163,162,164,174,0,161],
[171,160,171,164,168,161,162,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,162,162,164,178,165,148,180],
[174,0,178,182,184,177,182,170,188],
[179,163,0,165,159,168,152,153,176],
[179,159,176,0,168,172,178,161,164],
[177,157,182,173,0,183,181,176,188],
[163,164,173,169,158,0,176,170,169],
[176,159,189,163,160,165,0,161,175],
[193,171,188,180,165,171,180,0,187],
[161,153,165,177,153,172,166,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,192,173,161,182,156,147,162],
[170,0,191,169,163,188,181,155,154],
[149,150,0,133,144,135,154,146,148],
[168,172,208,0,165,152,170,153,157],
[180,178,197,176,0,178,184,167,132],
[159,153,206,189,163,0,176,167,177],
[185,160,187,171,157,165,0,161,155],
[194,186,195,188,174,174,180,0,154],
[179,187,193,184,209,164,186,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,172,153,161,154,173,163],
[176,0,175,171,159,164,162,170,158],
[165,166,0,169,168,176,169,166,167],
[169,170,172,0,151,156,169,157,167],
[188,182,173,190,0,164,185,188,178],
[180,177,165,185,177,0,186,175,177],
[187,179,172,172,156,155,0,166,172],
[168,171,175,184,153,166,175,0,170],
[178,183,174,174,163,164,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,188,163,168,158,166,163],
[176,0,178,174,163,162,152,173,159],
[167,163,0,181,168,165,164,162,165],
[153,167,160,0,162,153,150,163,145],
[178,178,173,179,0,169,172,178,161],
[173,179,176,188,172,0,168,175,176],
[183,189,177,191,169,173,0,179,177],
[175,168,179,178,163,166,162,0,171],
[178,182,176,196,180,165,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,168,174,156,160,144,153,175],
[193,0,165,173,148,174,153,173,192],
[173,176,0,199,153,175,162,157,184],
[167,168,142,0,150,145,138,154,170],
[185,193,188,191,0,173,162,191,194],
[181,167,166,196,168,0,176,172,180],
[197,188,179,203,179,165,0,177,186],
[188,168,184,187,150,169,164,0,186],
[166,149,157,171,147,161,155,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,156,178,157,158,177,168,167],
[176,0,171,173,160,169,184,174,169],
[185,170,0,178,180,172,189,176,167],
[163,168,163,0,156,152,179,159,172],
[184,181,161,185,0,167,190,170,166],
[183,172,169,189,174,0,179,181,181],
[164,157,152,162,151,162,0,158,163],
[173,167,165,182,171,160,183,0,175],
[174,172,174,169,175,160,178,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,184,181,171,178,194,179],
[173,0,179,181,178,164,187,173,169],
[162,162,0,173,173,162,175,178,160],
[157,160,168,0,157,153,170,157,161],
[160,163,168,184,0,168,171,175,163],
[170,177,179,188,173,0,181,190,171],
[163,154,166,171,170,160,0,163,173],
[147,168,163,184,166,151,178,0,165],
[162,172,181,180,178,170,168,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,181,148,173,172,178,178,182],
[163,0,154,155,161,146,158,179,164],
[160,187,0,155,169,157,155,177,192],
[193,186,186,0,190,166,166,192,196],
[168,180,172,151,0,161,156,169,157],
[169,195,184,175,180,0,156,167,172],
[163,183,186,175,185,185,0,203,178],
[163,162,164,149,172,174,138,0,183],
[159,177,149,145,184,169,163,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,150,165,165,171,152,158,167],
[171,0,176,199,142,163,138,158,187],
[191,165,0,183,161,153,146,148,197],
[176,142,158,0,153,163,133,139,153],
[176,199,180,188,0,162,170,182,168],
[170,178,188,178,179,0,171,176,198],
[189,203,195,208,171,170,0,168,183],
[183,183,193,202,159,165,173,0,198],
[174,154,144,188,173,143,158,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,149,160,155,159,154,170],
[181,0,164,171,163,156,183,168,185],
[178,177,0,167,161,154,161,161,160],
[192,170,174,0,164,164,179,149,161],
[181,178,180,177,0,165,170,158,189],
[186,185,187,177,176,0,183,171,164],
[182,158,180,162,171,158,0,179,181],
[187,173,180,192,183,170,162,0,183],
[171,156,181,180,152,177,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,138,174,172,135,173,236,136],
[137,0,171,207,136,204,172,272,203],
[203,170,0,170,170,236,170,271,170],
[167,134,171,0,101,202,101,236,204],
[169,205,171,240,0,169,172,203,171],
[206,137,105,139,172,0,173,240,207],
[168,169,171,240,169,168,0,270,204],
[105,69,70,105,138,101,71,0,138],
[205,138,171,137,170,134,137,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,158,165,165,172,182,170],
[172,0,167,174,176,176,175,174,161],
[180,174,0,177,169,153,173,175,160],
[183,167,164,0,168,169,170,186,157],
[176,165,172,173,0,172,170,179,172],
[176,165,188,172,169,0,182,177,168],
[169,166,168,171,171,159,0,169,155],
[159,167,166,155,162,164,172,0,147],
[171,180,181,184,169,173,186,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,165,183,163,172,182,167],
[161,0,175,162,185,157,173,162,172],
[158,166,0,154,179,152,170,170,161],
[176,179,187,0,183,177,174,177,164],
[158,156,162,158,0,152,158,161,154],
[178,184,189,164,189,0,182,184,173],
[169,168,171,167,183,159,0,176,160],
[159,179,171,164,180,157,165,0,167],
[174,169,180,177,187,168,181,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,162,177,165,172,170,164,163],
[173,0,166,166,153,169,169,154,158],
[179,175,0,169,169,163,159,147,165],
[164,175,172,0,166,169,160,156,173],
[176,188,172,175,0,171,164,151,179],
[169,172,178,172,170,0,178,159,166],
[171,172,182,181,177,163,0,158,159],
[177,187,194,185,190,182,183,0,169],
[178,183,176,168,162,175,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,158,186,164,177,160,171,167],
[158,0,145,177,161,162,140,163,148],
[183,196,0,196,188,181,183,188,164],
[155,164,145,0,164,159,148,158,135],
[177,180,153,177,0,182,161,169,167],
[164,179,160,182,159,0,166,161,174],
[181,201,158,193,180,175,0,177,175],
[170,178,153,183,172,180,164,0,168],
[174,193,177,206,174,167,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,172,214,86,173,258,211,130],
[126,0,256,254,212,213,256,254,256],
[169,85,0,211,169,169,128,254,169],
[127,87,130,0,43,172,129,169,170],
[255,129,172,298,0,255,214,341,256],
[168,128,172,169,86,0,170,211,84],
[83,85,213,212,127,171,0,211,171],
[130,87,87,172,0,130,130,0,130],
[211,85,172,171,85,257,170,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,153,155,148,139,149,157,171],
[183,0,179,176,177,174,190,162,176],
[188,162,0,166,173,172,166,171,181],
[186,165,175,0,169,155,172,169,173],
[193,164,168,172,0,179,176,170,171],
[202,167,169,186,162,0,184,177,178],
[192,151,175,169,165,157,0,164,174],
[184,179,170,172,171,164,177,0,170],
[170,165,160,168,170,163,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,166,175,148,183,158,141,143],
[190,0,170,163,157,167,170,155,163],
[175,171,0,188,173,182,176,171,168],
[166,178,153,0,144,167,168,149,174],
[193,184,168,197,0,187,171,158,161],
[158,174,159,174,154,0,141,142,143],
[183,171,165,173,170,200,0,143,159],
[200,186,170,192,183,199,198,0,186],
[198,178,173,167,180,198,182,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,189,175,176,159,177,169,180],
[172,0,189,167,193,174,176,172,179],
[152,152,0,168,181,151,176,156,177],
[166,174,173,0,174,168,189,176,171],
[165,148,160,167,0,160,169,176,174],
[182,167,190,173,181,0,179,176,174],
[164,165,165,152,172,162,0,162,160],
[172,169,185,165,165,165,179,0,180],
[161,162,164,170,167,167,181,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,165,153,169,149,162,177],
[159,0,149,162,131,159,137,174,159],
[171,192,0,176,186,184,166,208,182],
[176,179,165,0,168,175,145,184,155],
[188,210,155,173,0,183,171,189,178],
[172,182,157,166,158,0,149,172,180],
[192,204,175,196,170,192,0,206,193],
[179,167,133,157,152,169,135,0,172],
[164,182,159,186,163,161,148,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,173,157,213,156,193,156,174],
[223,0,168,206,247,208,227,189,264],
[168,173,0,136,230,154,154,116,173],
[184,135,205,0,208,191,172,115,189],
[128,94,111,133,0,132,151,78,170],
[185,133,187,150,209,0,208,171,189],
[148,114,187,169,190,133,0,152,208],
[185,152,225,226,263,170,189,0,226],
[167,77,168,152,171,152,133,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,161,172,175,166,162,181,174],
[149,0,155,175,176,157,162,164,178],
[180,186,0,183,183,174,165,170,191],
[169,166,158,0,174,162,166,166,173],
[166,165,158,167,0,169,156,167,180],
[175,184,167,179,172,0,176,196,188],
[179,179,176,175,185,165,0,165,186],
[160,177,171,175,174,145,176,0,177],
[167,163,150,168,161,153,155,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,176,167,152,158,178,200],
[166,0,167,160,152,176,166,165,199],
[168,174,0,147,151,161,136,161,171],
[165,181,194,0,179,170,200,207,184],
[174,189,190,162,0,151,178,207,209],
[189,165,180,171,190,0,184,191,208],
[183,175,205,141,163,157,0,166,183],
[163,176,180,134,134,150,175,0,170],
[141,142,170,157,132,133,158,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,155,166,170,166,170,151,152],
[172,0,161,162,162,172,162,167,175],
[186,180,0,179,169,173,182,173,177],
[175,179,162,0,168,160,170,159,165],
[171,179,172,173,0,160,178,164,175],
[175,169,168,181,181,0,174,163,172],
[171,179,159,171,163,167,0,169,177],
[190,174,168,182,177,178,172,0,165],
[189,166,164,176,166,169,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,165,159,147,151,193,167,155],
[182,0,166,170,162,178,170,158,185],
[176,175,0,177,166,160,174,162,173],
[182,171,164,0,159,152,170,162,173],
[194,179,175,182,0,170,186,184,175],
[190,163,181,189,171,0,180,167,149],
[148,171,167,171,155,161,0,159,148],
[174,183,179,179,157,174,182,0,156],
[186,156,168,168,166,192,193,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,180,198,180,169,207,179,179],
[163,0,160,182,160,159,178,167,169],
[161,181,0,185,160,177,200,171,168],
[143,159,156,0,145,148,181,155,145],
[161,181,181,196,0,170,192,166,164],
[172,182,164,193,171,0,172,162,165],
[134,163,141,160,149,169,0,156,150],
[162,174,170,186,175,179,185,0,167],
[162,172,173,196,177,176,191,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,187,173,153,155,161,173,170],
[164,0,161,154,170,164,171,158,162],
[154,180,0,153,161,179,160,166,174],
[168,187,188,0,170,173,180,175,194],
[188,171,180,171,0,161,179,168,172],
[186,177,162,168,180,0,176,179,178],
[180,170,181,161,162,165,0,146,173],
[168,183,175,166,173,162,195,0,176],
[171,179,167,147,169,163,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,170,147,164,168,188,151],
[172,0,173,190,169,162,159,165,157],
[177,168,0,182,174,166,176,180,171],
[171,151,159,0,160,169,182,184,161],
[194,172,167,181,0,186,176,179,180],
[177,179,175,172,155,0,169,172,170],
[173,182,165,159,165,172,0,169,172],
[153,176,161,157,162,169,172,0,164],
[190,184,170,180,161,171,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,152,184,167,168,165,171,170],
[188,0,167,185,174,176,159,187,184],
[189,174,0,173,160,166,172,166,190],
[157,156,168,0,148,170,146,153,154],
[174,167,181,193,0,178,167,168,180],
[173,165,175,171,163,0,160,157,173],
[176,182,169,195,174,181,0,175,177],
[170,154,175,188,173,184,166,0,175],
[171,157,151,187,161,168,164,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,171,162,176,176,186,179,159],
[154,0,173,147,169,173,189,147,188],
[170,168,0,141,156,152,168,123,175],
[179,194,200,0,166,180,206,186,210],
[165,172,185,175,0,187,186,145,182],
[165,168,189,161,154,0,180,128,175],
[155,152,173,135,155,161,0,134,148],
[162,194,218,155,196,213,207,0,204],
[182,153,166,131,159,166,193,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,197,172,165,192,198,162,185],
[160,0,164,170,169,181,171,180,158],
[144,177,0,192,172,169,181,175,174],
[169,171,149,0,151,146,152,153,144],
[176,172,169,190,0,158,167,176,181],
[149,160,172,195,183,0,186,184,172],
[143,170,160,189,174,155,0,173,155],
[179,161,166,188,165,157,168,0,159],
[156,183,167,197,160,169,186,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,155,146,160,198,149,149,171],
[179,0,123,157,204,193,159,121,193],
[186,218,0,162,173,176,205,183,219],
[195,184,179,0,195,186,169,176,228],
[181,137,168,146,0,169,139,148,182],
[143,148,165,155,172,0,173,135,122],
[192,182,136,172,202,168,0,137,196],
[192,220,158,165,193,206,204,0,225],
[170,148,122,113,159,219,145,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,145,166,172,172,187,183,173],
[179,0,163,165,188,187,185,190,180],
[196,178,0,178,166,188,205,201,176],
[175,176,163,0,183,195,180,197,171],
[169,153,175,158,0,180,183,181,175],
[169,154,153,146,161,0,171,156,156],
[154,156,136,161,158,170,0,177,159],
[158,151,140,144,160,185,164,0,164],
[168,161,165,170,166,185,182,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,180,124,152,153,124,177,205],
[164,0,206,153,178,179,151,179,203],
[161,135,0,119,162,150,108,135,160],
[217,188,222,0,151,177,189,232,204],
[189,163,179,190,0,193,188,178,176],
[188,162,191,164,148,0,147,176,189],
[217,190,233,152,153,194,0,191,203],
[164,162,206,109,163,165,150,0,137],
[136,138,181,137,165,152,138,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,186,199,184,172,165,187],
[163,0,184,171,181,173,150,167,174],
[167,157,0,171,173,169,157,155,157],
[155,170,170,0,178,167,152,156,154],
[142,160,168,163,0,168,141,161,146],
[157,168,172,174,173,0,157,173,164],
[169,191,184,189,200,184,0,165,172],
[176,174,186,185,180,168,176,0,171],
[154,167,184,187,195,177,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,57,56,57,170,114,115,57],
[228,0,170,113,57,170,227,172,227],
[284,171,0,113,172,170,284,115,170],
[285,228,228,0,172,114,285,115,114],
[284,284,169,169,0,170,226,172,170],
[171,171,171,227,171,0,171,115,171],
[227,114,57,56,115,170,0,58,57],
[226,169,226,226,169,226,283,0,283],
[284,114,171,227,171,170,284,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,151,179,148,163,171,163,155],
[170,0,147,181,142,142,161,152,162],
[190,194,0,195,163,168,189,179,183],
[162,160,146,0,160,148,157,155,166],
[193,199,178,181,0,172,179,176,170],
[178,199,173,193,169,0,184,178,189],
[170,180,152,184,162,157,0,167,172],
[178,189,162,186,165,163,174,0,175],
[186,179,158,175,171,152,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,210,185,211,159,183,159,159],
[155,0,262,209,157,105,183,183,182],
[131,79,0,107,131,106,211,78,52],
[156,132,234,0,210,132,182,184,128],
[130,184,210,131,0,183,185,132,130],
[182,236,235,209,158,0,210,184,182],
[158,158,130,159,156,131,0,131,130],
[182,158,263,157,209,157,210,0,181],
[182,159,289,213,211,159,211,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,175,177,165,154,168,166,153],
[184,0,167,190,178,177,173,184,169],
[166,174,0,170,160,162,172,181,170],
[164,151,171,0,147,172,165,173,157],
[176,163,181,194,0,173,172,194,179],
[187,164,179,169,168,0,158,186,165],
[173,168,169,176,169,183,0,193,175],
[175,157,160,168,147,155,148,0,167],
[188,172,171,184,162,176,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,180,188,202,173,173,170,190],
[154,0,165,155,191,197,183,160,165],
[161,176,0,160,186,187,178,170,194],
[153,186,181,0,178,173,188,160,179],
[139,150,155,163,0,156,157,161,158],
[168,144,154,168,185,0,153,162,170],
[168,158,163,153,184,188,0,153,169],
[171,181,171,181,180,179,188,0,169],
[151,176,147,162,183,171,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,199,154,203,163,159,171,168],
[149,0,147,144,198,163,168,177,159],
[142,194,0,157,201,148,150,152,157],
[187,197,184,0,209,153,175,165,188],
[138,143,140,132,0,133,144,125,154],
[178,178,193,188,208,0,147,180,165],
[182,173,191,166,197,194,0,175,179],
[170,164,189,176,216,161,166,0,195],
[173,182,184,153,187,176,162,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,148,151,160,152,152,159,136],
[187,0,149,158,159,139,176,122,162],
[193,192,0,157,138,163,192,168,166],
[190,183,184,0,175,141,180,164,184],
[181,182,203,166,0,166,175,180,166],
[189,202,178,200,175,0,168,150,181],
[189,165,149,161,166,173,0,159,190],
[182,219,173,177,161,191,182,0,185],
[205,179,175,157,175,160,151,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,163,179,165,174,174,167,187],
[155,0,162,151,136,157,169,145,147],
[178,179,0,154,163,179,163,155,173],
[162,190,187,0,169,169,166,175,170],
[176,205,178,172,0,181,170,170,191],
[167,184,162,172,160,0,152,168,147],
[167,172,178,175,171,189,0,176,153],
[174,196,186,166,171,173,165,0,164],
[154,194,168,171,150,194,188,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,169,175,210,182,172,150,170],
[145,0,151,154,185,173,175,150,165],
[172,190,0,151,186,171,178,159,173],
[166,187,190,0,207,196,196,190,177],
[131,156,155,134,0,161,140,126,136],
[159,168,170,145,180,0,172,138,179],
[169,166,163,145,201,169,0,151,169],
[191,191,182,151,215,203,190,0,188],
[171,176,168,164,205,162,172,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,188,186,198,169,168,182,188],
[154,0,173,174,165,176,143,170,143],
[153,168,0,193,198,164,147,164,185],
[155,167,148,0,182,153,147,153,159],
[143,176,143,159,0,157,144,150,156],
[172,165,177,188,184,0,164,166,179],
[173,198,194,194,197,177,0,160,182],
[159,171,177,188,191,175,181,0,153],
[153,198,156,182,185,162,159,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,179,147,161,129,199,154,182],
[184,0,225,144,179,174,237,184,194],
[162,116,0,140,138,154,161,155,140],
[194,197,201,0,181,158,182,175,181],
[180,162,203,160,0,144,199,188,183],
[212,167,187,183,197,0,206,195,181],
[142,104,180,159,142,135,0,160,164],
[187,157,186,166,153,146,181,0,199],
[159,147,201,160,158,160,177,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,159,156,151,155,164,148],
[171,0,154,157,167,156,155,167,164],
[182,187,0,180,163,170,179,175,164],
[182,184,161,0,168,172,163,168,179],
[185,174,178,173,0,164,183,180,175],
[190,185,171,169,177,0,179,178,173],
[186,186,162,178,158,162,0,167,158],
[177,174,166,173,161,163,174,0,163],
[193,177,177,162,166,168,183,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,175,175,160,162,182,143],
[171,0,154,184,173,165,154,156,160],
[179,187,0,188,189,172,175,172,163],
[166,157,153,0,151,160,143,161,155],
[166,168,152,190,0,161,163,161,162],
[181,176,169,181,180,0,158,164,166],
[179,187,166,198,178,183,0,176,162],
[159,185,169,180,180,177,165,0,171],
[198,181,178,186,179,175,179,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,177,186,191,180,184,170,182],
[158,0,165,171,171,153,152,157,165],
[164,176,0,188,208,202,183,191,217],
[155,170,153,0,187,179,168,192,183],
[150,170,133,154,0,150,136,147,154],
[161,188,139,162,191,0,148,166,179],
[157,189,158,173,205,193,0,178,204],
[171,184,150,149,194,175,163,0,193],
[159,176,124,158,187,162,137,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,176,189,178,185,186,146,181],
[161,0,178,177,190,187,176,169,185],
[165,163,0,150,170,157,138,167,162],
[152,164,191,0,182,195,165,159,174],
[163,151,171,159,0,168,166,169,180],
[156,154,184,146,173,0,152,164,186],
[155,165,203,176,175,189,0,185,194],
[195,172,174,182,172,177,156,0,189],
[160,156,179,167,161,155,147,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,180,177,171,167,176,172],
[156,0,171,187,151,171,145,154,153],
[167,170,0,188,168,175,157,185,157],
[161,154,153,0,146,151,160,160,153],
[164,190,173,195,0,174,176,174,178],
[170,170,166,190,167,0,172,182,157],
[174,196,184,181,165,169,0,185,147],
[165,187,156,181,167,159,156,0,157],
[169,188,184,188,163,184,194,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,178,170,189,183,193,170],
[174,0,182,182,162,182,165,186,175],
[159,159,0,164,149,180,162,161,170],
[163,159,177,0,161,182,171,167,188],
[171,179,192,180,0,186,168,179,169],
[152,159,161,159,155,0,163,163,168],
[158,176,179,170,173,178,0,173,173],
[148,155,180,174,162,178,168,0,170],
[171,166,171,153,172,173,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,178,156,171,164,189,165],
[177,0,179,180,173,169,180,190,164],
[168,162,0,176,161,171,179,191,164],
[163,161,165,0,167,153,167,183,158],
[185,168,180,174,0,182,172,190,172],
[170,172,170,188,159,0,158,186,165],
[177,161,162,174,169,183,0,181,152],
[152,151,150,158,151,155,160,0,156],
[176,177,177,183,169,176,189,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,182,168,185,166,169,165],
[167,0,170,171,160,181,165,158,174],
[169,171,0,180,169,181,166,178,175],
[159,170,161,0,157,168,164,153,168],
[173,181,172,184,0,186,167,177,177],
[156,160,160,173,155,0,169,157,170],
[175,176,175,177,174,172,0,171,170],
[172,183,163,188,164,184,170,0,181],
[176,167,166,173,164,171,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,147,130,182,125,212,199,156],
[170,0,143,137,123,94,165,187,150],
[194,198,0,157,177,135,231,225,212],
[211,204,184,0,159,172,193,222,201],
[159,218,164,182,0,126,191,235,235],
[216,247,206,169,215,0,251,229,200],
[129,176,110,148,150,90,0,183,180],
[142,154,116,119,106,112,158,0,146],
[185,191,129,140,106,141,161,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,125,186,185,156,185,248,217],
[186,0,123,186,123,155,155,217,123],
[216,218,0,247,153,186,217,249,217],
[155,155,94,0,155,186,155,217,124],
[156,218,188,186,0,188,186,187,187],
[185,186,155,155,153,0,155,218,122],
[156,186,124,186,155,186,0,217,62],
[93,124,92,124,154,123,124,0,123],
[124,218,124,217,154,219,279,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,201,181,193,175,216,199,168],
[154,0,179,171,177,152,182,173,173],
[140,162,0,173,187,151,198,166,159],
[160,170,168,0,186,159,184,160,180],
[148,164,154,155,0,154,182,159,142],
[166,189,190,182,187,0,194,197,159],
[125,159,143,157,159,147,0,151,149],
[142,168,175,181,182,144,190,0,153],
[173,168,182,161,199,182,192,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,156,165,170,161,171,158,181],
[185,0,158,164,156,167,180,172,179],
[185,183,0,178,185,166,183,178,184],
[176,177,163,0,157,155,161,165,175],
[171,185,156,184,0,173,182,164,177],
[180,174,175,186,168,0,200,172,178],
[170,161,158,180,159,141,0,157,181],
[183,169,163,176,177,169,184,0,180],
[160,162,157,166,164,163,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,168,185,137,168,143,158,136],
[213,0,184,215,160,201,200,184,178],
[173,157,0,189,152,193,183,180,169],
[156,126,152,0,154,155,122,162,163],
[204,181,189,187,0,180,191,188,156],
[173,140,148,186,161,0,160,190,179],
[198,141,158,219,150,181,0,173,187],
[183,157,161,179,153,151,168,0,156],
[205,163,172,178,185,162,154,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,186,187,172,178,155,175,186],
[179,0,167,190,171,173,172,181,186],
[155,174,0,176,161,168,165,158,176],
[154,151,165,0,157,162,155,168,155],
[169,170,180,184,0,177,170,172,173],
[163,168,173,179,164,0,175,185,180],
[186,169,176,186,171,166,0,172,187],
[166,160,183,173,169,156,169,0,177],
[155,155,165,186,168,161,154,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,176,185,181,153,159,180],
[168,0,173,181,175,175,173,166,176],
[174,168,0,172,172,180,166,160,182],
[165,160,169,0,182,187,167,171,172],
[156,166,169,159,0,172,167,140,166],
[160,166,161,154,169,0,163,152,166],
[188,168,175,174,174,178,0,156,173],
[182,175,181,170,201,189,185,0,186],
[161,165,159,169,175,175,168,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,163,164,170,169,153,178,168],
[174,0,165,190,164,185,174,179,178],
[178,176,0,193,168,176,157,166,167],
[177,151,148,0,174,162,165,188,152],
[171,177,173,167,0,175,161,178,174],
[172,156,165,179,166,0,160,174,169],
[188,167,184,176,180,181,0,184,170],
[163,162,175,153,163,167,157,0,150],
[173,163,174,189,167,172,171,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,160,167,166,175,175,170,166],
[163,0,165,157,155,177,167,157,164],
[181,176,0,162,181,175,186,164,172],
[174,184,179,0,181,181,179,172,169],
[175,186,160,160,0,167,175,162,167],
[166,164,166,160,174,0,166,163,163],
[166,174,155,162,166,175,0,159,164],
[171,184,177,169,179,178,182,0,173],
[175,177,169,172,174,178,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,178,201,171,170,171,169,179],
[180,0,159,206,179,171,166,170,178],
[163,182,0,199,194,177,159,174,184],
[140,135,142,0,139,145,144,148,160],
[170,162,147,202,0,173,161,176,169],
[171,170,164,196,168,0,162,169,190],
[170,175,182,197,180,179,0,157,177],
[172,171,167,193,165,172,184,0,182],
[162,163,157,181,172,151,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,176,176,164,170,169,179],
[164,0,168,166,145,148,161,169,162],
[166,173,0,175,168,174,177,178,181],
[165,175,166,0,178,165,173,165,169],
[165,196,173,163,0,172,176,174,171],
[177,193,167,176,169,0,177,176,176],
[171,180,164,168,165,164,0,169,181],
[172,172,163,176,167,165,172,0,183],
[162,179,160,172,170,165,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,177,155,167,160,166,160],
[167,0,179,176,178,183,145,164,142],
[174,162,0,173,171,176,168,168,163],
[164,165,168,0,167,193,170,172,156],
[186,163,170,174,0,183,178,173,172],
[174,158,165,148,158,0,161,163,150],
[181,196,173,171,163,180,0,177,160],
[175,177,173,169,168,178,164,0,155],
[181,199,178,185,169,191,181,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,188,160,177,162,169,154,168],
[163,0,164,171,174,174,148,152,185],
[153,177,0,163,186,159,176,182,183],
[181,170,178,0,183,191,160,157,182],
[164,167,155,158,0,163,169,161,165],
[179,167,182,150,178,0,159,164,170],
[172,193,165,181,172,182,0,173,170],
[187,189,159,184,180,177,168,0,200],
[173,156,158,159,176,171,171,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,187,175,182,165,168,172,163],
[170,0,173,169,189,181,167,191,178],
[154,168,0,146,183,169,167,185,158],
[166,172,195,0,188,187,168,206,175],
[159,152,158,153,0,166,159,165,159],
[176,160,172,154,175,0,172,178,166],
[173,174,174,173,182,169,0,181,180],
[169,150,156,135,176,163,160,0,143],
[178,163,183,166,182,175,161,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,167,174,163,148,173,166],
[167,0,178,164,174,177,164,179,155],
[169,163,0,166,161,156,151,161,166],
[174,177,175,0,170,172,178,181,171],
[167,167,180,171,0,165,183,186,175],
[178,164,185,169,176,0,175,181,175],
[193,177,190,163,158,166,0,188,185],
[168,162,180,160,155,160,153,0,156],
[175,186,175,170,166,166,156,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,193,182,170,180,201,219,191],
[146,0,188,180,191,176,193,186,183],
[148,153,0,178,165,171,171,186,177],
[159,161,163,0,172,175,202,188,178],
[171,150,176,169,0,165,169,183,168],
[161,165,170,166,176,0,203,174,189],
[140,148,170,139,172,138,0,173,172],
[122,155,155,153,158,167,168,0,177],
[150,158,164,163,173,152,169,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,157,161,190,195,166,152,158],
[181,0,183,188,188,182,165,190,182],
[184,158,0,169,179,204,165,170,174],
[180,153,172,0,185,186,174,173,179],
[151,153,162,156,0,193,157,159,158],
[146,159,137,155,148,0,148,146,158],
[175,176,176,167,184,193,0,189,175],
[189,151,171,168,182,195,152,0,172],
[183,159,167,162,183,183,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,179,174,172,184,154,167],
[179,0,195,182,182,189,186,162,185],
[172,146,0,179,152,169,157,164,152],
[162,159,162,0,164,161,162,153,166],
[167,159,189,177,0,190,154,164,171],
[169,152,172,180,151,0,161,170,161],
[157,155,184,179,187,180,0,188,165],
[187,179,177,188,177,171,153,0,173],
[174,156,189,175,170,180,176,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,182,175,180,176,147,173,163],
[168,0,174,170,178,180,161,186,175],
[159,167,0,169,172,175,152,185,176],
[166,171,172,0,169,165,171,169,157],
[161,163,169,172,0,180,154,177,167],
[165,161,166,176,161,0,159,174,182],
[194,180,189,170,187,182,0,182,166],
[168,155,156,172,164,167,159,0,154],
[178,166,165,184,174,159,175,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,177,200,199,169,167,174,176],
[144,0,145,178,165,137,152,153,147],
[164,196,0,193,176,181,171,176,177],
[141,163,148,0,176,149,160,148,146],
[142,176,165,165,0,158,149,154,153],
[172,204,160,192,183,0,163,176,169],
[174,189,170,181,192,178,0,181,180],
[167,188,165,193,187,165,160,0,143],
[165,194,164,195,188,172,161,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,169,158,161,159,161,149,162],
[194,0,167,175,171,177,181,186,183],
[172,174,0,181,174,168,170,176,195],
[183,166,160,0,154,160,171,177,189],
[180,170,167,187,0,168,188,178,189],
[182,164,173,181,173,0,175,184,185],
[180,160,171,170,153,166,0,165,167],
[192,155,165,164,163,157,176,0,191],
[179,158,146,152,152,156,174,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,144,171,174,172,188,188,138],
[179,0,176,178,196,192,174,186,165],
[197,165,0,192,194,187,171,209,175],
[170,163,149,0,173,200,189,172,172],
[167,145,147,168,0,152,173,175,164],
[169,149,154,141,189,0,193,187,139],
[153,167,170,152,168,148,0,169,146],
[153,155,132,169,166,154,172,0,156],
[203,176,166,169,177,202,195,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,232,182,148,165,116,118,197],
[227,0,231,229,133,180,181,198,228],
[109,110,0,179,114,111,81,159,145],
[159,112,162,0,130,96,80,130,132],
[193,208,227,211,0,193,114,161,210],
[176,161,230,245,148,0,132,162,212],
[225,160,260,261,227,209,0,174,243],
[223,143,182,211,180,179,167,0,227],
[144,113,196,209,131,129,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,171,169,171,185,167,182,168],
[157,0,171,163,155,161,173,171,167],
[170,170,0,172,160,167,170,167,173],
[172,178,169,0,158,167,161,169,178],
[170,186,181,183,0,195,169,165,185],
[156,180,174,174,146,0,156,162,168],
[174,168,171,180,172,185,0,156,194],
[159,170,174,172,176,179,185,0,176],
[173,174,168,163,156,173,147,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,164,176,183,196,161,156,179],
[180,0,149,179,174,154,159,150,167],
[177,192,0,180,174,179,162,168,172],
[165,162,161,0,161,167,167,160,176],
[158,167,167,180,0,165,148,142,168],
[145,187,162,174,176,0,155,150,164],
[180,182,179,174,193,186,0,171,167],
[185,191,173,181,199,191,170,0,189],
[162,174,169,165,173,177,174,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,180,185,150,192,179,150,165],
[177,0,182,176,148,190,148,147,180],
[161,159,0,176,185,167,186,163,196],
[156,165,165,0,148,184,155,162,173],
[191,193,156,193,0,190,160,170,182],
[149,151,174,157,151,0,152,153,162],
[162,193,155,186,181,189,0,188,182],
[191,194,178,179,171,188,153,0,195],
[176,161,145,168,159,179,159,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,160,169,177,166,165,168,165],
[158,0,160,158,165,169,167,183,157],
[181,181,0,171,174,173,177,189,168],
[172,183,170,0,180,177,180,187,176],
[164,176,167,161,0,161,157,179,164],
[175,172,168,164,180,0,157,191,173],
[176,174,164,161,184,184,0,178,170],
[173,158,152,154,162,150,163,0,171],
[176,184,173,165,177,168,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,183,171,160,179,180,174,181],
[156,0,183,154,153,155,177,172,166],
[158,158,0,155,167,163,175,180,162],
[170,187,186,0,183,192,187,182,179],
[181,188,174,158,0,187,196,196,181],
[162,186,178,149,154,0,166,173,177],
[161,164,166,154,145,175,0,177,189],
[167,169,161,159,145,168,164,0,184],
[160,175,179,162,160,164,152,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,210,180,163,167,186,163],
[162,0,158,184,170,166,164,178,173],
[160,183,0,186,187,188,174,171,161],
[131,157,155,0,145,140,153,131,105],
[161,171,154,196,0,149,176,179,139],
[178,175,153,201,192,0,180,205,161],
[174,177,167,188,165,161,0,173,148],
[155,163,170,210,162,136,168,0,131],
[178,168,180,236,202,180,193,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,154,167,164,169,167,173],
[175,0,186,166,175,173,189,153,193],
[169,155,0,150,174,172,183,172,206],
[187,175,191,0,191,181,178,165,186],
[174,166,167,150,0,172,170,152,167],
[177,168,169,160,169,0,180,158,182],
[172,152,158,163,171,161,0,146,177],
[174,188,169,176,189,183,195,0,180],
[168,148,135,155,174,159,164,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,144,160,182,171,151,144,170],
[186,0,157,155,195,178,173,168,181],
[197,184,0,186,193,196,166,171,207],
[181,186,155,0,201,183,168,168,177],
[159,146,148,140,0,149,138,139,145],
[170,163,145,158,192,0,154,149,161],
[190,168,175,173,203,187,0,161,198],
[197,173,170,173,202,192,180,0,171],
[171,160,134,164,196,180,143,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,160,161,143,142,157,130,164],
[184,0,198,207,146,189,182,175,153],
[181,143,0,145,189,159,194,150,146],
[180,134,196,0,168,177,230,190,188],
[198,195,152,173,0,197,203,211,166],
[199,152,182,164,144,0,202,191,174],
[184,159,147,111,138,139,0,156,132],
[211,166,191,151,130,150,185,0,177],
[177,188,195,153,175,167,209,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,142,179,133,147,145,159,133],
[175,0,154,199,135,169,164,172,158],
[199,187,0,203,168,147,192,180,171],
[162,142,138,0,139,153,164,177,134],
[208,206,173,202,0,195,193,200,155],
[194,172,194,188,146,0,192,199,163],
[196,177,149,177,148,149,0,154,156],
[182,169,161,164,141,142,187,0,145],
[208,183,170,207,186,178,185,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,176,170,177,172,173,181],
[167,0,154,163,176,186,185,175,176],
[169,187,0,176,165,177,167,175,175],
[165,178,165,0,173,183,166,159,166],
[171,165,176,168,0,185,170,178,172],
[164,155,164,158,156,0,148,161,156],
[169,156,174,175,171,193,0,176,183],
[168,166,166,182,163,180,165,0,177],
[160,165,166,175,169,185,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,179,165,163,168,180,176,157],
[166,0,163,156,172,170,161,162,159],
[162,178,0,159,176,166,156,167,167],
[176,185,182,0,161,167,172,162,157],
[178,169,165,180,0,179,143,168,165],
[173,171,175,174,162,0,171,166,165],
[161,180,185,169,198,170,0,180,177],
[165,179,174,179,173,175,161,0,164],
[184,182,174,184,176,176,164,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,148,152,181,168,169,183],
[178,0,180,165,174,175,186,169,186],
[170,161,0,151,166,182,167,169,169],
[193,176,190,0,164,179,188,171,191],
[189,167,175,177,0,188,189,179,193],
[160,166,159,162,153,0,165,164,178],
[173,155,174,153,152,176,0,161,177],
[172,172,172,170,162,177,180,0,196],
[158,155,172,150,148,163,164,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,162,198,178,159,195,157,205],
[152,0,162,189,181,192,194,178,193],
[179,179,0,191,177,166,189,195,199],
[143,152,150,0,152,141,174,156,190],
[163,160,164,189,0,166,184,161,183],
[182,149,175,200,175,0,191,167,202],
[146,147,152,167,157,150,0,150,182],
[184,163,146,185,180,174,191,0,188],
[136,148,142,151,158,139,159,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,186,156,173,174,181,155],
[174,0,167,185,175,170,189,189,161],
[175,174,0,186,159,160,170,181,155],
[155,156,155,0,139,158,161,169,151],
[185,166,182,202,0,179,193,196,183],
[168,171,181,183,162,0,179,172,162],
[167,152,171,180,148,162,0,171,147],
[160,152,160,172,145,169,170,0,147],
[186,180,186,190,158,179,194,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,170,178,167,196,181,185],
[160,0,170,158,170,156,173,177,164],
[167,171,0,170,167,174,185,162,162],
[171,183,171,0,172,164,194,166,173],
[163,171,174,169,0,161,172,175,179],
[174,185,167,177,180,0,182,167,181],
[145,168,156,147,169,159,0,167,169],
[160,164,179,175,166,174,174,0,185],
[156,177,179,168,162,160,172,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,169,170,173,175,168,169],
[165,0,176,183,207,180,159,171,174],
[171,165,0,173,171,191,159,173,169],
[172,158,168,0,181,164,152,163,166],
[171,134,170,160,0,159,146,156,163],
[168,161,150,177,182,0,156,172,158],
[166,182,182,189,195,185,0,180,161],
[173,170,168,178,185,169,161,0,174],
[172,167,172,175,178,183,180,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,182,179,172,207,147,191,149],
[172,0,200,186,194,176,199,168,163],
[159,141,0,166,155,204,163,191,170],
[162,155,175,0,175,212,154,157,151],
[169,147,186,166,0,210,169,159,129],
[134,165,137,129,131,0,124,140,159],
[194,142,178,187,172,217,0,188,185],
[150,173,150,184,182,201,153,0,158],
[192,178,171,190,212,182,156,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,157,160,161,166,157,167],
[184,0,166,174,169,172,173,169,167],
[178,175,0,187,165,162,167,169,180],
[184,167,154,0,175,164,178,167,170],
[181,172,176,166,0,168,178,178,165],
[180,169,179,177,173,0,163,175,173],
[175,168,174,163,163,178,0,166,171],
[184,172,172,174,163,166,175,0,167],
[174,174,161,171,176,168,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,181,160,186,177,168,177,178],
[169,0,182,158,166,175,162,181,161],
[160,159,0,159,166,172,160,171,162],
[181,183,182,0,176,185,177,168,172],
[155,175,175,165,0,174,173,174,157],
[164,166,169,156,167,0,161,167,157],
[173,179,181,164,168,180,0,174,163],
[164,160,170,173,167,174,167,0,156],
[163,180,179,169,184,184,178,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,145,158,185,135,170,177,144],
[154,0,133,146,157,152,147,142,173],
[196,208,0,194,170,187,174,192,186],
[183,195,147,0,163,164,178,171,173],
[156,184,171,178,0,162,170,182,160],
[206,189,154,177,179,0,185,178,197],
[171,194,167,163,171,156,0,175,164],
[164,199,149,170,159,163,166,0,169],
[197,168,155,168,181,144,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,172,164,170,173,145,189,175],
[166,0,170,175,176,178,176,171,176],
[169,171,0,164,169,178,161,192,167],
[177,166,177,0,164,169,165,173,185],
[171,165,172,177,0,167,173,183,178],
[168,163,163,172,174,0,172,183,182],
[196,165,180,176,168,169,0,185,177],
[152,170,149,168,158,158,156,0,184],
[166,165,174,156,163,159,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,152,186,180,178,178,173,194],
[174,0,159,175,169,190,175,153,192],
[189,182,0,194,177,184,177,161,184],
[155,166,147,0,183,166,157,145,184],
[161,172,164,158,0,172,172,162,189],
[163,151,157,175,169,0,167,150,156],
[163,166,164,184,169,174,0,155,175],
[168,188,180,196,179,191,186,0,174],
[147,149,157,157,152,185,166,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,166,146,149,153,160,166,166],
[217,0,150,182,212,202,209,180,185],
[175,191,0,173,184,165,201,200,199],
[195,159,168,0,179,166,176,172,181],
[192,129,157,162,0,167,178,139,198],
[188,139,176,175,174,0,181,163,169],
[181,132,140,165,163,160,0,161,174],
[175,161,141,169,202,178,180,0,176],
[175,156,142,160,143,172,167,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,179,188,161,185,171,189,179],
[140,0,160,159,152,156,144,168,142],
[162,181,0,180,174,169,174,168,165],
[153,182,161,0,164,173,178,184,166],
[180,189,167,177,0,181,182,194,156],
[156,185,172,168,160,0,156,179,159],
[170,197,167,163,159,185,0,191,172],
[152,173,173,157,147,162,150,0,155],
[162,199,176,175,185,182,169,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,185,160,182,177,197,181,170],
[172,0,177,156,167,192,175,175,175],
[156,164,0,157,161,173,172,177,196],
[181,185,184,0,167,175,163,187,199],
[159,174,180,174,0,167,183,167,202],
[164,149,168,166,174,0,163,140,187],
[144,166,169,178,158,178,0,139,156],
[160,166,164,154,174,201,202,0,188],
[171,166,145,142,139,154,185,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,162,175,178,167,179,175],
[173,0,162,173,163,180,184,153,165],
[170,179,0,165,165,188,163,191,160],
[179,168,176,0,167,183,172,177,153],
[166,178,176,174,0,177,183,168,167],
[163,161,153,158,164,0,159,177,140],
[174,157,178,169,158,182,0,177,161],
[162,188,150,164,173,164,164,0,155],
[166,176,181,188,174,201,180,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,221,171,170,156,181,209,167],
[134,0,150,150,140,152,162,153,165],
[120,191,0,136,142,127,187,154,161],
[170,191,205,0,182,176,186,205,158],
[171,201,199,159,0,202,199,205,188],
[185,189,214,165,139,0,184,179,173],
[160,179,154,155,142,157,0,168,161],
[132,188,187,136,136,162,173,0,176],
[174,176,180,183,153,168,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,158,164,162,155,155,159],
[166,0,180,146,166,163,147,162,147],
[167,161,0,168,171,159,165,148,163],
[183,195,173,0,166,171,166,174,173],
[177,175,170,175,0,168,173,175,173],
[179,178,182,170,173,0,172,172,176],
[186,194,176,175,168,169,0,163,172],
[186,179,193,167,166,169,178,0,164],
[182,194,178,168,168,165,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,201,166,177,177,193,186,204],
[164,0,170,154,167,152,188,161,189],
[140,171,0,155,135,152,174,159,167],
[175,187,186,0,179,168,181,157,183],
[164,174,206,162,0,165,180,162,202],
[164,189,189,173,176,0,177,169,189],
[148,153,167,160,161,164,0,165,167],
[155,180,182,184,179,172,176,0,184],
[137,152,174,158,139,152,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,161,171,165,185,173,166,167],
[178,0,162,180,161,168,159,155,164],
[180,179,0,187,156,164,155,158,165],
[170,161,154,0,158,162,162,162,156],
[176,180,185,183,0,188,155,171,172],
[156,173,177,179,153,0,160,156,165],
[168,182,186,179,186,181,0,181,176],
[175,186,183,179,170,185,160,0,172],
[174,177,176,185,169,176,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,185,162,178,174,165,160,165],
[169,0,185,165,179,165,169,181,179],
[156,156,0,135,146,151,148,158,148],
[179,176,206,0,179,183,144,175,162],
[163,162,195,162,0,162,163,183,171],
[167,176,190,158,179,0,153,166,176],
[176,172,193,197,178,188,0,170,193],
[181,160,183,166,158,175,171,0,184],
[176,162,193,179,170,165,148,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,174,148,163,160,160,160,165],
[186,0,174,158,190,174,180,165,181],
[167,167,0,178,184,170,179,161,163],
[193,183,163,0,187,168,166,166,173],
[178,151,157,154,0,171,151,164,164],
[181,167,171,173,170,0,173,170,168],
[181,161,162,175,190,168,0,175,166],
[181,176,180,175,177,171,166,0,157],
[176,160,178,168,177,173,175,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,255,298,169,213,213,211,170],
[85,0,215,212,170,215,211,128,85],
[86,126,0,169,85,43,169,85,86],
[43,129,172,0,128,87,129,127,87],
[172,171,256,213,0,129,213,128,172],
[128,126,298,254,212,0,169,170,85],
[128,130,172,212,128,172,0,85,128],
[130,213,256,214,213,171,256,0,171],
[171,256,255,254,169,256,213,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,153,149,154,165,171,170,164],
[182,0,163,179,172,170,164,176,179],
[188,178,0,184,162,184,149,182,194],
[192,162,157,0,155,165,182,170,186],
[187,169,179,186,0,179,168,184,206],
[176,171,157,176,162,0,164,171,187],
[170,177,192,159,173,177,0,176,179],
[171,165,159,171,157,170,165,0,176],
[177,162,147,155,135,154,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,140,152,147,165,159,209,176],
[166,0,165,166,149,172,160,183,142],
[201,176,0,181,184,198,164,189,182],
[189,175,160,0,179,209,182,206,164],
[194,192,157,162,0,208,167,211,180],
[176,169,143,132,133,0,157,197,147],
[182,181,177,159,174,184,0,182,148],
[132,158,152,135,130,144,159,0,130],
[165,199,159,177,161,194,193,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,159,175,168,191,156,191,179],
[208,0,197,214,170,203,184,208,179],
[182,144,0,183,145,137,134,177,144],
[166,127,158,0,118,138,127,174,145],
[173,171,196,223,0,183,163,198,171],
[150,138,204,203,158,0,149,192,175],
[185,157,207,214,178,192,0,219,153],
[150,133,164,167,143,149,122,0,176],
[162,162,197,196,170,166,188,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,165,156,164,142,174,165,173],
[181,0,171,163,180,165,189,158,168],
[176,170,0,152,177,173,190,153,163],
[185,178,189,0,193,172,180,167,180],
[177,161,164,148,0,138,167,155,141],
[199,176,168,169,203,0,178,164,163],
[167,152,151,161,174,163,0,161,159],
[176,183,188,174,186,177,180,0,159],
[168,173,178,161,200,178,182,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,173,178,178,180,157,179],
[168,0,167,167,177,170,173,165,183],
[165,174,0,174,172,171,167,175,166],
[168,174,167,0,173,173,174,164,159],
[163,164,169,168,0,183,185,172,179],
[163,171,170,168,158,0,167,162,165],
[161,168,174,167,156,174,0,189,180],
[184,176,166,177,169,179,152,0,188],
[162,158,175,182,162,176,161,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,179,179,184,177,191,172],
[180,0,164,158,160,185,179,176,176],
[171,177,0,160,177,197,184,186,177],
[162,183,181,0,190,166,170,180,189],
[162,181,164,151,0,162,169,137,180],
[157,156,144,175,179,0,163,149,155],
[164,162,157,171,172,178,0,174,160],
[150,165,155,161,204,192,167,0,172],
[169,165,164,152,161,186,181,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,170,143,193,175,169,178,169],
[192,0,150,186,194,198,193,210,198],
[171,191,0,193,180,189,147,180,178],
[198,155,148,0,178,180,169,179,189],
[148,147,161,163,0,167,166,134,150],
[166,143,152,161,174,0,131,166,168],
[172,148,194,172,175,210,0,161,181],
[163,131,161,162,207,175,180,0,163],
[172,143,163,152,191,173,160,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,156,195,135,146,160,192,149],
[181,0,177,199,155,181,172,162,161],
[185,164,0,189,174,164,184,198,162],
[146,142,152,0,163,138,139,150,150],
[206,186,167,178,0,163,207,197,165],
[195,160,177,203,178,0,200,202,171],
[181,169,157,202,134,141,0,167,172],
[149,179,143,191,144,139,174,0,179],
[192,180,179,191,176,170,169,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,173,156,149,175,150,170,153],
[191,0,147,168,140,154,159,165,177],
[168,194,0,184,176,172,161,178,174],
[185,173,157,0,159,150,154,176,189],
[192,201,165,182,0,171,176,189,180],
[166,187,169,191,170,0,167,172,179],
[191,182,180,187,165,174,0,166,173],
[171,176,163,165,152,169,175,0,176],
[188,164,167,152,161,162,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,182,154,176,188,173,220],
[182,0,200,205,181,164,192,195,179],
[171,141,0,159,155,144,176,169,203],
[159,136,182,0,144,133,160,168,176],
[187,160,186,197,0,157,222,165,210],
[165,177,197,208,184,0,201,160,171],
[153,149,165,181,119,140,0,179,177],
[168,146,172,173,176,181,162,0,196],
[121,162,138,165,131,170,164,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,169,153,133,169,145,162,167],
[234,0,208,194,156,192,141,201,199],
[172,133,0,149,142,171,157,167,170],
[188,147,192,0,178,184,153,163,192],
[208,185,199,163,0,169,161,184,203],
[172,149,170,157,172,0,138,171,141],
[196,200,184,188,180,203,0,163,181],
[179,140,174,178,157,170,178,0,186],
[174,142,171,149,138,200,160,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,176,161,185,155,167,160],
[176,0,181,175,161,157,183,178,177],
[168,160,0,168,173,167,148,156,154],
[165,166,173,0,177,172,160,162,156],
[180,180,168,164,0,175,155,189,163],
[156,184,174,169,166,0,153,177,170],
[186,158,193,181,186,188,0,178,170],
[174,163,185,179,152,164,163,0,165],
[181,164,187,185,178,171,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,192,193,107,181,178,104,152],
[116,0,177,118,118,74,160,99,161],
[149,164,0,192,151,164,223,135,150],
[148,223,149,0,179,183,148,118,181],
[234,223,190,162,0,135,175,143,176],
[160,267,177,158,206,0,190,145,178],
[163,181,118,193,166,151,0,133,166],
[237,242,206,223,198,196,208,0,152],
[189,180,191,160,165,163,175,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,193,165,177,182,180,175],
[168,0,176,185,180,169,188,183,171],
[168,165,0,188,177,163,161,177,153],
[148,156,153,0,154,159,159,165,152],
[176,161,164,187,0,173,165,173,167],
[164,172,178,182,168,0,171,182,177],
[159,153,180,182,176,170,0,192,175],
[161,158,164,176,168,159,149,0,153],
[166,170,188,189,174,164,166,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,165,185,176,175,174,172,181],
[152,0,156,180,167,163,162,182,171],
[176,185,0,205,177,170,178,175,192],
[156,161,136,0,165,162,161,166,174],
[165,174,164,176,0,165,177,159,172],
[166,178,171,179,176,0,191,167,170],
[167,179,163,180,164,150,0,163,172],
[169,159,166,175,182,174,178,0,186],
[160,170,149,167,169,171,169,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,186,181,171,191,180,168],
[165,0,186,186,174,196,183,179,158],
[160,155,0,155,156,157,154,157,162],
[155,155,186,0,175,172,177,167,163],
[160,167,185,166,0,166,183,184,171],
[170,145,184,169,175,0,174,163,157],
[150,158,187,164,158,167,0,167,167],
[161,162,184,174,157,178,174,0,168],
[173,183,179,178,170,184,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,154,173,146,144,154,149,134],
[175,0,165,181,170,149,177,154,168],
[187,176,0,166,171,164,175,171,167],
[168,160,175,0,161,161,166,165,148],
[195,171,170,180,0,161,169,187,164],
[197,192,177,180,180,0,173,165,174],
[187,164,166,175,172,168,0,174,174],
[192,187,170,176,154,176,167,0,157],
[207,173,174,193,177,167,167,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,178,191,167,177,180,179],
[174,0,188,161,192,190,183,181,191],
[170,153,0,158,184,172,177,185,185],
[163,180,183,0,190,178,193,177,181],
[150,149,157,151,0,144,172,175,159],
[174,151,169,163,197,0,193,175,172],
[164,158,164,148,169,148,0,168,162],
[161,160,156,164,166,166,173,0,159],
[162,150,156,160,182,169,179,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,180,171,187,167,172,190,179],
[163,0,174,151,177,156,166,167,181],
[161,167,0,153,173,155,170,166,179],
[170,190,188,0,192,178,166,185,173],
[154,164,168,149,0,150,155,168,165],
[174,185,186,163,191,0,173,174,183],
[169,175,171,175,186,168,0,175,182],
[151,174,175,156,173,167,166,0,175],
[162,160,162,168,176,158,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,187,166,178,164,179,173,173],
[171,0,162,186,178,163,175,150,164],
[154,179,0,161,189,159,160,149,169],
[175,155,180,0,182,145,170,145,163],
[163,163,152,159,0,157,154,138,163],
[177,178,182,196,184,0,172,157,163],
[162,166,181,171,187,169,0,148,178],
[168,191,192,196,203,184,193,0,185],
[168,177,172,178,178,178,163,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,163,164,165,162,163,159],
[176,0,174,175,173,175,163,170,172],
[173,167,0,176,172,170,171,175,174],
[178,166,165,0,175,168,159,173,169],
[177,168,169,166,0,176,164,175,161],
[176,166,171,173,165,0,169,176,160],
[179,178,170,182,177,172,0,168,180],
[178,171,166,168,166,165,173,0,164],
[182,169,167,172,180,181,161,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,168,187,172,174,179,191,170],
[184,0,179,171,159,181,169,188,186],
[173,162,0,182,150,167,186,176,181],
[154,170,159,0,157,149,148,182,147],
[169,182,191,184,0,178,184,195,190],
[167,160,174,192,163,0,172,190,186],
[162,172,155,193,157,169,0,174,190],
[150,153,165,159,146,151,167,0,173],
[171,155,160,194,151,155,151,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,195,135,155,166,185,195,200],
[175,0,209,144,174,167,146,165,198],
[146,132,0,105,145,119,146,137,159],
[206,197,236,0,186,167,208,184,230],
[186,167,196,155,0,156,166,176,185],
[175,174,222,174,185,0,146,196,211],
[156,195,195,133,175,195,0,175,188],
[146,176,204,157,165,145,166,0,219],
[141,143,182,111,156,130,153,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,163,111,191,188,164,149],
[164,0,167,178,139,138,177,207,149],
[177,174,0,164,149,119,203,192,199],
[178,163,177,0,119,138,202,190,143],
[230,202,192,222,0,191,232,261,147],
[150,203,222,203,150,0,246,246,147],
[153,164,138,139,109,95,0,165,133],
[177,134,149,151,80,95,176,0,105],
[192,192,142,198,194,194,208,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,163,175,184,176,179,193],
[156,0,168,170,168,184,173,167,184],
[167,173,0,182,169,196,166,178,181],
[178,171,159,0,158,187,170,178,193],
[166,173,172,183,0,201,187,162,199],
[157,157,145,154,140,0,161,147,167],
[165,168,175,171,154,180,0,148,189],
[162,174,163,163,179,194,193,0,176],
[148,157,160,148,142,174,152,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,171,175,174,165,171,165],
[180,0,166,165,185,166,145,155,171],
[178,175,0,189,183,178,176,159,171],
[170,176,152,0,154,156,168,147,170],
[166,156,158,187,0,150,173,141,157],
[167,175,163,185,191,0,181,165,157],
[176,196,165,173,168,160,0,152,172],
[170,186,182,194,200,176,189,0,189],
[176,170,170,171,184,184,169,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,185,179,173,182,179,171],
[171,0,168,175,179,170,170,163,177],
[159,173,0,177,166,162,168,164,161],
[156,166,164,0,171,157,161,170,165],
[162,162,175,170,0,154,167,166,163],
[168,171,179,184,187,0,189,182,180],
[159,171,173,180,174,152,0,176,174],
[162,178,177,171,175,159,165,0,163],
[170,164,180,176,178,161,167,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,173,178,164,164,178,173,206],
[153,0,154,178,165,167,161,176,184],
[168,187,0,177,170,172,170,186,201],
[163,163,164,0,178,170,177,186,184],
[177,176,171,163,0,156,168,182,196],
[177,174,169,171,185,0,175,180,196],
[163,180,171,164,173,166,0,152,189],
[168,165,155,155,159,161,189,0,192],
[135,157,140,157,145,145,152,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,171,192,186,167,170,171],
[168,0,162,179,171,173,185,169,169],
[160,179,0,196,180,192,182,170,190],
[170,162,145,0,172,179,168,171,161],
[149,170,161,169,0,189,171,158,181],
[155,168,149,162,152,0,166,170,169],
[174,156,159,173,170,175,0,172,161],
[171,172,171,170,183,171,169,0,176],
[170,172,151,180,160,172,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,187,167,178,156,171,188],
[164,0,171,188,173,149,160,172,163],
[174,170,0,200,189,179,198,184,189],
[154,153,141,0,168,171,162,181,155],
[174,168,152,173,0,147,168,162,170],
[163,192,162,170,194,0,195,183,178],
[185,181,143,179,173,146,0,177,187],
[170,169,157,160,179,158,164,0,166],
[153,178,152,186,171,163,154,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,166,185,184,183,170,167],
[167,0,159,152,179,162,170,161,169],
[166,182,0,153,162,175,168,171,161],
[175,189,188,0,174,192,182,166,173],
[156,162,179,167,0,174,174,167,169],
[157,179,166,149,167,0,169,162,161],
[158,171,173,159,167,172,0,160,164],
[171,180,170,175,174,179,181,0,170],
[174,172,180,168,172,180,177,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,188,170,135,160,156,166,176],
[172,0,164,161,156,173,127,165,168],
[153,177,0,163,148,179,152,175,190],
[171,180,178,0,134,175,151,137,178],
[206,185,193,207,0,169,155,187,184],
[181,168,162,166,172,0,173,156,187],
[185,214,189,190,186,168,0,169,172],
[175,176,166,204,154,185,172,0,181],
[165,173,151,163,157,154,169,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,169,147,169,162,156,169,172],
[194,0,182,177,192,166,202,191,189],
[172,159,0,161,155,144,173,183,157],
[194,164,180,0,173,176,178,174,182],
[172,149,186,168,0,170,187,171,148],
[179,175,197,165,171,0,173,192,159],
[185,139,168,163,154,168,0,156,150],
[172,150,158,167,170,149,185,0,150],
[169,152,184,159,193,182,191,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,175,169,172,138,161,188,152],
[201,0,189,187,191,181,162,202,174],
[166,152,0,174,172,168,162,170,179],
[172,154,167,0,195,160,161,166,157],
[169,150,169,146,0,155,160,187,144],
[203,160,173,181,186,0,179,197,172],
[180,179,179,180,181,162,0,196,166],
[153,139,171,175,154,144,145,0,170],
[189,167,162,184,197,169,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,193,168,183,204,195,172,182],
[148,0,206,190,168,200,201,163,151],
[148,135,0,147,150,177,167,139,153],
[173,151,194,0,167,183,170,162,155],
[158,173,191,174,0,204,170,168,157],
[137,141,164,158,137,0,169,123,143],
[146,140,174,171,171,172,0,152,160],
[169,178,202,179,173,218,189,0,182],
[159,190,188,186,184,198,181,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,167,176,175,172,172,174],
[166,0,148,176,143,180,162,163,166],
[157,193,0,187,171,170,171,175,176],
[174,165,154,0,150,168,164,172,167],
[165,198,170,191,0,185,181,178,177],
[166,161,171,173,156,0,152,171,164],
[169,179,170,177,160,189,0,175,182],
[169,178,166,169,163,170,166,0,169],
[167,175,165,174,164,177,159,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,157,170,172,165,173,170,180],
[189,0,181,187,169,173,178,182,188],
[184,160,0,184,175,170,178,179,183],
[171,154,157,0,146,172,152,184,175],
[169,172,166,195,0,177,171,183,182],
[176,168,171,169,164,0,172,183,172],
[168,163,163,189,170,169,0,170,181],
[171,159,162,157,158,158,171,0,173],
[161,153,158,166,159,169,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,228,114,114,228,228,228,228],
[113,0,341,227,227,341,341,341,341],
[113,0,0,0,113,228,114,228,228],
[227,114,341,0,341,228,228,228,228],
[227,114,228,0,0,228,228,228,228],
[113,0,113,113,113,0,113,227,227],
[113,0,227,113,113,228,0,341,227],
[113,0,113,113,113,114,0,0,227],
[113,0,113,113,113,114,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,179,204,203,163,156,178],
[178,0,167,191,169,146,160,160,181],
[162,174,0,200,180,199,179,186,175],
[162,150,141,0,171,173,174,149,182],
[137,172,161,170,0,158,142,116,186],
[138,195,142,168,183,0,168,140,164],
[178,181,162,167,199,173,0,145,193],
[185,181,155,192,225,201,196,0,225],
[163,160,166,159,155,177,148,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,153,149,169,141,137,186,148],
[167,0,142,148,120,114,131,186,157],
[188,199,0,192,174,182,168,208,159],
[192,193,149,0,150,149,133,213,169],
[172,221,167,191,0,158,162,210,184],
[200,227,159,192,183,0,173,205,181],
[204,210,173,208,179,168,0,214,181],
[155,155,133,128,131,136,127,0,142],
[193,184,182,172,157,160,160,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,184,181,178,169,170,192,187],
[162,0,167,160,157,158,155,184,164],
[157,174,0,159,176,165,172,185,166],
[160,181,182,0,163,156,169,180,176],
[163,184,165,178,0,163,169,191,176],
[172,183,176,185,178,0,170,200,176],
[171,186,169,172,172,171,0,184,183],
[149,157,156,161,150,141,157,0,154],
[154,177,175,165,165,165,158,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,181,174,196,172,181,165,175],
[154,0,162,174,192,149,165,167,170],
[160,179,0,162,169,162,174,156,182],
[167,167,179,0,205,190,180,185,172],
[145,149,172,136,0,168,160,171,158],
[169,192,179,151,173,0,177,159,193],
[160,176,167,161,181,164,0,177,165],
[176,174,185,156,170,182,164,0,160],
[166,171,159,169,183,148,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,165,156,151,164,158,162,168],
[194,0,187,177,175,174,158,182,186],
[176,154,0,155,177,158,164,165,161],
[185,164,186,0,175,166,156,183,176],
[190,166,164,166,0,186,183,194,167],
[177,167,183,175,155,0,161,181,173],
[183,183,177,185,158,180,0,180,168],
[179,159,176,158,147,160,161,0,171],
[173,155,180,165,174,168,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,164,169,177,171,172,164],
[170,0,173,157,172,168,169,179,163],
[169,168,0,171,172,198,172,184,171],
[177,184,170,0,174,188,180,180,151],
[172,169,169,167,0,182,161,175,162],
[164,173,143,153,159,0,165,163,149],
[170,172,169,161,180,176,0,175,170],
[169,162,157,161,166,178,166,0,160],
[177,178,170,190,179,192,171,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,163,176,186,178,164,166,154],
[158,0,161,173,173,154,171,177,169],
[178,180,0,185,181,178,177,165,168],
[165,168,156,0,182,156,162,157,162],
[155,168,160,159,0,142,160,153,155],
[163,187,163,185,199,0,167,183,162],
[177,170,164,179,181,174,0,162,154],
[175,164,176,184,188,158,179,0,178],
[187,172,173,179,186,179,187,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,184,137,164,151,160,152,147],
[179,0,192,151,164,165,188,160,158],
[157,149,0,133,140,163,151,154,162],
[204,190,208,0,174,189,183,170,165],
[177,177,201,167,0,166,180,185,176],
[190,176,178,152,175,0,173,179,173],
[181,153,190,158,161,168,0,170,162],
[189,181,187,171,156,162,171,0,150],
[194,183,179,176,165,168,179,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,158,152,165,175,153,184,166],
[169,0,158,162,180,183,159,177,163],
[183,183,0,170,179,182,170,200,181],
[189,179,171,0,183,188,166,187,176],
[176,161,162,158,0,177,160,180,173],
[166,158,159,153,164,0,153,181,159],
[188,182,171,175,181,188,0,188,167],
[157,164,141,154,161,160,153,0,150],
[175,178,160,165,168,182,174,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,194,191,183,194,201,190],
[170,0,199,203,171,165,176,179,159],
[176,142,0,166,161,156,179,157,123],
[147,138,175,0,160,132,156,154,144],
[150,170,180,181,0,164,169,170,147],
[158,176,185,209,177,0,188,172,135],
[147,165,162,185,172,153,0,180,154],
[140,162,184,187,171,169,161,0,139],
[151,182,218,197,194,206,187,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,205,177,203,176,195,192,188],
[179,0,198,170,217,169,201,204,175],
[136,143,0,135,174,151,159,164,167],
[164,171,206,0,201,151,184,191,186],
[138,124,167,140,0,152,150,163,151],
[165,172,190,190,189,0,175,190,162],
[146,140,182,157,191,166,0,175,162],
[149,137,177,150,178,151,166,0,137],
[153,166,174,155,190,179,179,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,164,154,161,131,155,139,195],
[200,0,186,179,184,155,169,170,204],
[177,155,0,171,173,151,160,161,178],
[187,162,170,0,170,173,156,173,186],
[180,157,168,171,0,168,157,157,179],
[210,186,190,168,173,0,153,179,208],
[186,172,181,185,184,188,0,157,220],
[202,171,180,168,184,162,184,0,196],
[146,137,163,155,162,133,121,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,183,158,172,200,178,169],
[168,0,179,186,184,170,177,172,160],
[169,162,0,166,176,163,167,163,173],
[158,155,175,0,154,156,166,161,164],
[183,157,165,187,0,160,179,171,171],
[169,171,178,185,181,0,194,169,174],
[141,164,174,175,162,147,0,153,154],
[163,169,178,180,170,172,188,0,160],
[172,181,168,177,170,167,187,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,186,161,169,156,171,170],
[168,0,164,161,162,163,162,164,188],
[165,177,0,172,163,154,154,179,173],
[155,180,169,0,154,159,157,156,177],
[180,179,178,187,0,183,163,194,183],
[172,178,187,182,158,0,174,192,182],
[185,179,187,184,178,167,0,178,173],
[170,177,162,185,147,149,163,0,157],
[171,153,168,164,158,159,168,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,155,166,173,158,185,166,153],
[164,0,155,168,159,172,177,160,154],
[186,186,0,191,170,189,189,172,172],
[175,173,150,0,187,178,187,180,158],
[168,182,171,154,0,168,172,169,154],
[183,169,152,163,173,0,192,170,155],
[156,164,152,154,169,149,0,156,147],
[175,181,169,161,172,171,185,0,166],
[188,187,169,183,187,186,194,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,187,167,175,197,174,166],
[164,0,148,153,135,132,184,152,164],
[169,193,0,164,152,172,181,169,182],
[154,188,177,0,168,183,193,174,190],
[174,206,189,173,0,156,192,175,177],
[166,209,169,158,185,0,204,167,193],
[144,157,160,148,149,137,0,151,170],
[167,189,172,167,166,174,190,0,174],
[175,177,159,151,164,148,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,198,168,189,148,158,156,205],
[191,0,212,187,173,158,189,188,191],
[143,129,0,150,161,137,158,141,169],
[173,154,191,0,182,148,173,164,182],
[152,168,180,159,0,155,169,165,184],
[193,183,204,193,186,0,153,208,211],
[183,152,183,168,172,188,0,171,203],
[185,153,200,177,176,133,170,0,179],
[136,150,172,159,157,130,138,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,160,156,156,163,164,174,162],
[143,0,149,154,151,151,153,154,162],
[181,192,0,169,168,160,173,181,183],
[185,187,172,0,173,157,155,166,183],
[185,190,173,168,0,183,172,164,166],
[178,190,181,184,158,0,180,181,183],
[177,188,168,186,169,161,0,172,179],
[167,187,160,175,177,160,169,0,163],
[179,179,158,158,175,158,162,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,155,159,158,163,181,171],
[170,0,181,169,160,151,156,182,175],
[173,160,0,161,156,163,175,179,185],
[186,172,180,0,170,165,160,171,184],
[182,181,185,171,0,164,185,175,195],
[183,190,178,176,177,0,170,187,197],
[178,185,166,181,156,171,0,174,175],
[160,159,162,170,166,154,167,0,178],
[170,166,156,157,146,144,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,184,182,174,168,188,164,164],
[172,0,176,175,183,169,184,177,172],
[157,165,0,177,173,167,182,157,156],
[159,166,164,0,176,177,174,164,144],
[167,158,168,165,0,163,172,161,155],
[173,172,174,164,178,0,194,169,162],
[153,157,159,167,169,147,0,159,147],
[177,164,184,177,180,172,182,0,156],
[177,169,185,197,186,179,194,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,185,169,181,181,182,183,169],
[138,0,155,151,150,151,156,157,149],
[156,186,0,166,177,181,159,167,179],
[172,190,175,0,172,173,167,156,164],
[160,191,164,169,0,172,173,160,165],
[160,190,160,168,169,0,176,171,165],
[159,185,182,174,168,165,0,167,173],
[158,184,174,185,181,170,174,0,171],
[172,192,162,177,176,176,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,113,341,228,113,113,227,227],
[114,0,227,228,228,0,114,228,114],
[228,114,0,228,228,0,114,228,114],
[0,113,113,0,0,0,0,0,113],
[113,113,113,341,0,113,113,113,113],
[228,341,341,341,228,0,114,228,227],
[228,227,227,341,228,227,0,114,227],
[114,113,113,341,228,113,227,0,113],
[114,227,227,228,228,114,114,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,199,171,149,167,178,160,167],
[174,0,197,186,156,165,177,170,164],
[142,144,0,160,148,165,161,152,153],
[170,155,181,0,180,152,190,153,183],
[192,185,193,161,0,171,179,167,166],
[174,176,176,189,170,0,191,165,190],
[163,164,180,151,162,150,0,154,160],
[181,171,189,188,174,176,187,0,167],
[174,177,188,158,175,151,181,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,182,145,180,180,162,159,150],
[170,0,183,179,182,176,173,187,179],
[159,158,0,178,177,189,160,171,175],
[196,162,163,0,161,167,161,162,153],
[161,159,164,180,0,171,180,144,167],
[161,165,152,174,170,0,145,155,162],
[179,168,181,180,161,196,0,169,167],
[182,154,170,179,197,186,172,0,165],
[191,162,166,188,174,179,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,169,190,171,164,169,171],
[161,0,172,168,171,156,161,163,143],
[173,169,0,166,196,185,159,169,181],
[172,173,175,0,176,172,169,169,172],
[151,170,145,165,0,168,156,152,154],
[170,185,156,169,173,0,169,174,177],
[177,180,182,172,185,172,0,169,177],
[172,178,172,172,189,167,172,0,171],
[170,198,160,169,187,164,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,166,171,181,157,159,174,168],
[156,0,154,164,173,143,166,172,163],
[175,187,0,177,178,174,168,199,178],
[170,177,164,0,177,160,163,169,177],
[160,168,163,164,0,156,159,178,169],
[184,198,167,181,185,0,172,185,178],
[182,175,173,178,182,169,0,192,161],
[167,169,142,172,163,156,149,0,163],
[173,178,163,164,172,163,180,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,104,135,171,135,135,171,237],
[206,0,240,239,237,237,170,172,172],
[237,101,0,169,238,169,237,102,203],
[206,102,172,0,238,204,272,172,137],
[170,104,103,103,0,135,170,102,136],
[206,104,172,137,206,0,205,103,171],
[206,171,104,69,171,136,0,172,171],
[170,169,239,169,239,238,169,0,203],
[104,169,138,204,205,170,170,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,146,179,144,110,163,128,162],
[141,0,127,141,125,108,140,109,143],
[195,214,0,144,160,156,179,177,179],
[162,200,197,0,162,141,199,107,161],
[197,216,181,179,0,177,198,141,182],
[231,233,185,200,164,0,199,143,182],
[178,201,162,142,143,142,0,108,178],
[213,232,164,234,200,198,233,0,199],
[179,198,162,180,159,159,163,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,179,164,176,178,167,157],
[168,0,177,171,173,179,169,169,160],
[164,164,0,159,167,170,172,172,155],
[162,170,182,0,166,177,171,186,175],
[177,168,174,175,0,177,178,183,171],
[165,162,171,164,164,0,168,162,167],
[163,172,169,170,163,173,0,175,171],
[174,172,169,155,158,179,166,0,158],
[184,181,186,166,170,174,170,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,207,158,195,171,180,160,160],
[146,0,173,145,164,187,145,136,148],
[134,168,0,155,180,158,166,120,151],
[183,196,186,0,188,175,161,152,171],
[146,177,161,153,0,180,144,120,144],
[170,154,183,166,161,0,170,154,144],
[161,196,175,180,197,171,0,161,155],
[181,205,221,189,221,187,180,0,168],
[181,193,190,170,197,197,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,180,166,168,176,174,164],
[174,0,168,190,183,177,174,171,174],
[170,173,0,185,185,156,147,164,153],
[161,151,156,0,156,160,157,143,125],
[175,158,156,185,0,167,153,160,140],
[173,164,185,181,174,0,164,161,160],
[165,167,194,184,188,177,0,168,162],
[167,170,177,198,181,180,173,0,157],
[177,167,188,216,201,181,179,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,164,150,143,160,149,129,139],
[185,0,163,163,149,180,159,150,159],
[177,178,0,164,168,166,145,142,161],
[191,178,177,0,167,195,167,156,156],
[198,192,173,174,0,185,166,161,183],
[181,161,175,146,156,0,137,145,148],
[192,182,196,174,175,204,0,175,168],
[212,191,199,185,180,196,166,0,196],
[202,182,180,185,158,193,173,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,171,150,189,248,153,156,154],
[132,0,113,169,150,230,153,133,149],
[170,228,0,209,193,267,208,174,263],
[191,172,132,0,172,191,191,119,174],
[152,191,148,169,0,247,112,137,166],
[93,111,74,150,94,0,93,153,113],
[188,188,133,150,229,248,0,176,189],
[185,208,167,222,204,188,165,0,150],
[187,192,78,167,175,228,152,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,168,139,155,135,140,147,140],
[201,0,177,182,175,166,168,174,173],
[173,164,0,153,174,144,151,151,161],
[202,159,188,0,177,159,201,167,167],
[186,166,167,164,0,141,158,138,173],
[206,175,197,182,200,0,191,161,200],
[201,173,190,140,183,150,0,162,182],
[194,167,190,174,203,180,179,0,185],
[201,168,180,174,168,141,159,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,160,156,179,172,156,158],
[180,0,182,181,168,183,184,169,155],
[168,159,0,166,147,169,172,157,150],
[181,160,175,0,166,179,165,169,166],
[185,173,194,175,0,175,184,175,163],
[162,158,172,162,166,0,169,148,167],
[169,157,169,176,157,172,0,157,158],
[185,172,184,172,166,193,184,0,183],
[183,186,191,175,178,174,183,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,180,176,178,180,173,176,166],
[175,0,182,181,182,164,191,191,171],
[161,159,0,158,172,164,161,161,145],
[165,160,183,0,186,163,185,180,169],
[163,159,169,155,0,161,171,171,164],
[161,177,177,178,180,0,170,184,168],
[168,150,180,156,170,171,0,172,160],
[165,150,180,161,170,157,169,0,155],
[175,170,196,172,177,173,181,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,186,189,169,178,186,201,186],
[148,0,171,162,151,155,161,172,157],
[155,170,0,171,153,160,170,173,168],
[152,179,170,0,164,156,171,185,175],
[172,190,188,177,0,173,165,172,174],
[163,186,181,185,168,0,175,184,173],
[155,180,171,170,176,166,0,179,169],
[140,169,168,156,169,157,162,0,152],
[155,184,173,166,167,168,172,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,167,172,156,164,178,188,172],
[160,0,155,179,173,176,173,196,170],
[174,186,0,191,161,176,192,187,181],
[169,162,150,0,164,156,186,179,158],
[185,168,180,177,0,188,174,191,165],
[177,165,165,185,153,0,187,186,159],
[163,168,149,155,167,154,0,170,149],
[153,145,154,162,150,155,171,0,151],
[169,171,160,183,176,182,192,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,175,170,179,169,182,168,168],
[183,0,164,166,188,177,170,178,168],
[166,177,0,158,177,168,181,172,178],
[171,175,183,0,184,163,183,173,171],
[162,153,164,157,0,167,165,165,168],
[172,164,173,178,174,0,178,157,177],
[159,171,160,158,176,163,0,163,155],
[173,163,169,168,176,184,178,0,169],
[173,173,163,170,173,164,186,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,166,175,182,178,161,176,145],
[189,0,167,198,160,182,191,205,162],
[175,174,0,204,202,176,193,169,178],
[166,143,137,0,162,167,155,159,156],
[159,181,139,179,0,171,168,173,172],
[163,159,165,174,170,0,163,178,156],
[180,150,148,186,173,178,0,157,141],
[165,136,172,182,168,163,184,0,168],
[196,179,163,185,169,185,200,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,162,152,154,181,175,175,133],
[177,0,147,153,141,168,175,161,146],
[179,194,0,177,175,189,185,181,164],
[189,188,164,0,166,186,177,188,178],
[187,200,166,175,0,185,188,182,173],
[160,173,152,155,156,0,174,160,156],
[166,166,156,164,153,167,0,165,162],
[166,180,160,153,159,181,176,0,145],
[208,195,177,163,168,185,179,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,192,177,160,201,178,196,180],
[141,0,176,158,155,182,163,163,168],
[149,165,0,155,156,173,170,202,162],
[164,183,186,0,166,199,164,197,175],
[181,186,185,175,0,205,158,170,192],
[140,159,168,142,136,0,157,176,157],
[163,178,171,177,183,184,0,169,170],
[145,178,139,144,171,165,172,0,163],
[161,173,179,166,149,184,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,204,157,162,151,158,169,172],
[202,0,227,181,179,168,197,190,176],
[137,114,0,155,136,95,135,128,164],
[184,160,186,0,179,186,166,157,181],
[179,162,205,162,0,122,199,171,169],
[190,173,246,155,219,0,210,186,224],
[183,144,206,175,142,131,0,179,167],
[172,151,213,184,170,155,162,0,174],
[169,165,177,160,172,117,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,172,152,158,167,163,183],
[177,0,189,179,172,167,175,179,163],
[171,152,0,175,158,159,168,160,160],
[169,162,166,0,144,167,163,166,156],
[189,169,183,197,0,179,184,179,183],
[183,174,182,174,162,0,164,153,173],
[174,166,173,178,157,177,0,161,167],
[178,162,181,175,162,188,180,0,184],
[158,178,181,185,158,168,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,172,161,160,162,160,153],
[174,0,169,168,156,184,178,163,156],
[172,172,0,188,171,191,165,177,171],
[169,173,153,0,156,175,170,174,161],
[180,185,170,185,0,191,180,170,172],
[181,157,150,166,150,0,173,159,155],
[179,163,176,171,161,168,0,175,159],
[181,178,164,167,171,182,166,0,169],
[188,185,170,180,169,186,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,177,180,189,160,194,183,193],
[148,0,173,153,196,131,164,154,201],
[164,168,0,142,185,181,175,173,202],
[161,188,199,0,208,188,204,214,212],
[152,145,156,133,0,131,146,168,172],
[181,210,160,153,210,0,201,202,219],
[147,177,166,137,195,140,0,159,194],
[158,187,168,127,173,139,182,0,186],
[148,140,139,129,169,122,147,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,166,159,157,176,173,160,160],
[142,0,169,150,153,149,147,161,157],
[175,172,0,166,160,155,156,164,174],
[182,191,175,0,164,171,173,166,167],
[184,188,181,177,0,177,186,159,181],
[165,192,186,170,164,0,161,156,163],
[168,194,185,168,155,180,0,185,163],
[181,180,177,175,182,185,156,0,173],
[181,184,167,174,160,178,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,189,196,189,173,203,170,189],
[166,0,200,190,191,178,174,179,191],
[152,141,0,158,167,137,167,130,164],
[145,151,183,0,187,159,175,184,171],
[152,150,174,154,0,156,174,150,154],
[168,163,204,182,185,0,179,164,170],
[138,167,174,166,167,162,0,143,157],
[171,162,211,157,191,177,198,0,198],
[152,150,177,170,187,171,184,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,182,194,166,167,156,161],
[167,0,165,188,170,179,177,166,171],
[171,176,0,181,174,167,176,174,167],
[159,153,160,0,163,161,177,157,154],
[147,171,167,178,0,166,173,166,166],
[175,162,174,180,175,0,178,173,154],
[174,164,165,164,168,163,0,165,162],
[185,175,167,184,175,168,176,0,166],
[180,170,174,187,175,187,179,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,200,202,179,163,203,191],
[156,0,163,141,155,183,186,187,174],
[167,178,0,154,198,178,163,195,180],
[141,200,187,0,192,186,184,189,172],
[139,186,143,149,0,173,174,188,166],
[162,158,163,155,168,0,191,184,193],
[178,155,178,157,167,150,0,180,165],
[138,154,146,152,153,157,161,0,171],
[150,167,161,169,175,148,176,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,179,171,173,166,178,165,164],
[147,0,160,155,151,158,162,152,152],
[162,181,0,162,173,169,169,169,168],
[170,186,179,0,174,185,182,164,168],
[168,190,168,167,0,180,174,171,156],
[175,183,172,156,161,0,181,149,170],
[163,179,172,159,167,160,0,152,162],
[176,189,172,177,170,192,189,0,173],
[177,189,173,173,185,171,179,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,150,169,169,143,136,182,147],
[163,0,132,168,171,157,141,180,165],
[191,209,0,222,205,170,183,200,217],
[172,173,119,0,201,148,163,169,162],
[172,170,136,140,0,170,144,182,158],
[198,184,171,193,171,0,135,173,178],
[205,200,158,178,197,206,0,214,203],
[159,161,141,172,159,168,127,0,174],
[194,176,124,179,183,163,138,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,185,174,190,175,175,164,191],
[161,0,168,190,172,177,162,168,167],
[156,173,0,176,167,168,159,167,184],
[167,151,165,0,172,188,156,162,171],
[151,169,174,169,0,163,157,151,154],
[166,164,173,153,178,0,168,153,167],
[166,179,182,185,184,173,0,182,182],
[177,173,174,179,190,188,159,0,193],
[150,174,157,170,187,174,159,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,180,167,189,169,188,165,171],
[170,0,161,158,175,152,168,162,169],
[161,180,0,178,182,160,178,168,181],
[174,183,163,0,184,178,177,166,178],
[152,166,159,157,0,152,158,147,163],
[172,189,181,163,189,0,179,175,163],
[153,173,163,164,183,162,0,158,176],
[176,179,173,175,194,166,183,0,186],
[170,172,160,163,178,178,165,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,177,176,167,164,165,162],
[180,0,182,167,166,156,169,153,156],
[175,159,0,180,167,169,162,164,167],
[164,174,161,0,160,152,168,145,166],
[165,175,174,181,0,171,169,186,164],
[174,185,172,189,170,0,163,176,169],
[177,172,179,173,172,178,0,170,167],
[176,188,177,196,155,165,171,0,181],
[179,185,174,175,177,172,174,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,170,168,196,130,165,163,209],
[203,0,193,169,199,199,190,161,210],
[171,148,0,162,179,164,189,150,198],
[173,172,179,0,212,144,185,158,191],
[145,142,162,129,0,131,138,175,188],
[211,142,177,197,210,0,179,176,205],
[176,151,152,156,203,162,0,127,165],
[178,180,191,183,166,165,214,0,184],
[132,131,143,150,153,136,176,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,151,168,161,151,155,152,165],
[165,0,150,162,159,152,158,153,154],
[190,191,0,183,180,183,186,170,177],
[173,179,158,0,168,169,173,155,162],
[180,182,161,173,0,177,184,173,157],
[190,189,158,172,164,0,170,165,161],
[186,183,155,168,157,171,0,162,174],
[189,188,171,186,168,176,179,0,169],
[176,187,164,179,184,180,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,183,187,170,187,179,186,223],
[157,0,144,178,158,179,163,160,202],
[158,197,0,169,185,193,161,195,214],
[154,163,172,0,163,170,153,174,194],
[171,183,156,178,0,176,190,186,202],
[154,162,148,171,165,0,159,164,193],
[162,178,180,188,151,182,0,176,215],
[155,181,146,167,155,177,165,0,186],
[118,139,127,147,139,148,126,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,151,167,159,175,155,151,164],
[168,0,166,166,168,178,165,154,165],
[190,175,0,180,182,183,173,167,189],
[174,175,161,0,169,174,171,163,181],
[182,173,159,172,0,162,178,163,175],
[166,163,158,167,179,0,186,152,176],
[186,176,168,170,163,155,0,176,173],
[190,187,174,178,178,189,165,0,173],
[177,176,152,160,166,165,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,146,148,166,135,181,181,170],
[166,0,192,151,180,181,185,163,185],
[195,149,0,171,162,157,162,161,131],
[193,190,170,0,191,147,192,206,214],
[175,161,179,150,0,211,160,173,174],
[206,160,184,194,130,0,209,208,183],
[160,156,179,149,181,132,0,194,156],
[160,178,180,135,168,133,147,0,129],
[171,156,210,127,167,158,185,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,197,163,162,175,169,172,164],
[174,0,190,164,165,171,174,163,185],
[144,151,0,159,155,149,156,148,156],
[178,177,182,0,170,178,165,159,174],
[179,176,186,171,0,178,168,165,147],
[166,170,192,163,163,0,171,163,181],
[172,167,185,176,173,170,0,151,168],
[169,178,193,182,176,178,190,0,178],
[177,156,185,167,194,160,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,0,0,115,115,115,113],
[226,0,226,113,226,0,113,113,226],
[228,115,0,0,0,115,115,228,113],
[341,228,341,0,228,115,228,341,226],
[341,115,341,113,0,115,228,228,226],
[226,341,226,226,226,0,113,226,226],
[226,228,226,113,113,228,0,228,226],
[226,228,113,0,113,115,113,0,113],
[228,115,228,115,115,115,115,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,185,172,160,179,161,171,174],
[177,0,170,174,162,178,176,163,163],
[156,171,0,168,171,184,175,171,176],
[169,167,173,0,168,174,168,165,165],
[181,179,170,173,0,183,184,177,163],
[162,163,157,167,158,0,179,159,168],
[180,165,166,173,157,162,0,157,167],
[170,178,170,176,164,182,184,0,165],
[167,178,165,176,178,173,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,175,219,165,194,202,180,168],
[196,0,187,219,161,200,198,206,177],
[166,154,0,179,154,196,225,183,155],
[122,122,162,0,143,134,168,170,142],
[176,180,187,198,0,161,180,191,175],
[147,141,145,207,180,0,161,154,159],
[139,143,116,173,161,180,0,157,165],
[161,135,158,171,150,187,184,0,169],
[173,164,186,199,166,182,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,185,175,183,170,204,187,184],
[184,0,188,174,181,183,187,168,205],
[156,153,0,173,162,153,184,158,150],
[166,167,168,0,167,143,165,183,165],
[158,160,179,174,0,151,188,154,180],
[171,158,188,198,190,0,196,190,163],
[137,154,157,176,153,145,0,172,139],
[154,173,183,158,187,151,169,0,146],
[157,136,191,176,161,178,202,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,160,175,169,210,189,185,192],
[136,0,154,158,145,174,139,162,152],
[181,187,0,178,186,181,169,173,181],
[166,183,163,0,165,210,158,163,192],
[172,196,155,176,0,195,162,154,185],
[131,167,160,131,146,0,155,172,151],
[152,202,172,183,179,186,0,178,185],
[156,179,168,178,187,169,163,0,167],
[149,189,160,149,156,190,156,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,163,200,237,217,181,183],
[163,0,143,127,146,219,127,183,215],
[163,198,0,143,128,201,146,163,162],
[178,214,198,0,235,219,162,236,162],
[141,195,213,106,0,269,125,219,195],
[104,122,140,122,72,0,86,146,105],
[124,214,195,179,216,255,0,217,215],
[160,158,178,105,122,195,124,0,158],
[158,126,179,179,146,236,126,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,175,179,172,157,160,162],
[167,0,158,174,172,168,154,168,170],
[169,183,0,174,176,166,171,172,180],
[166,167,167,0,177,166,174,166,177],
[162,169,165,164,0,161,176,158,164],
[169,173,175,175,180,0,169,174,165],
[184,187,170,167,165,172,0,162,164],
[181,173,169,175,183,167,179,0,173],
[179,171,161,164,177,176,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,169,171,166,157,160,152,170],
[180,0,185,190,177,170,184,172,188],
[172,156,0,167,164,171,178,179,174],
[170,151,174,0,168,156,172,167,168],
[175,164,177,173,0,169,177,170,168],
[184,171,170,185,172,0,176,180,170],
[181,157,163,169,164,165,0,161,170],
[189,169,162,174,171,161,180,0,179],
[171,153,167,173,173,171,171,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,202,160,183,175,182,167,188],
[177,0,191,173,166,172,169,168,182],
[139,150,0,150,146,147,173,156,157],
[181,168,191,0,176,167,183,166,174],
[158,175,195,165,0,161,185,179,176],
[166,169,194,174,180,0,196,174,185],
[159,172,168,158,156,145,0,166,167],
[174,173,185,175,162,167,175,0,178],
[153,159,184,167,165,156,174,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,156,173,162,164,182,168],
[177,0,177,181,189,176,171,182,167],
[172,164,0,158,170,176,157,178,164],
[185,160,183,0,186,163,167,173,164],
[168,152,171,155,0,153,163,167,163],
[179,165,165,178,188,0,167,161,172],
[177,170,184,174,178,174,0,180,174],
[159,159,163,168,174,180,161,0,173],
[173,174,177,177,178,169,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,148,189,150,166,158,166,165],
[169,0,165,186,156,167,155,157,172],
[193,176,0,200,171,184,158,162,177],
[152,155,141,0,155,157,138,150,138],
[191,185,170,186,0,164,180,194,166],
[175,174,157,184,177,0,173,179,149],
[183,186,183,203,161,168,0,172,166],
[175,184,179,191,147,162,169,0,160],
[176,169,164,203,175,192,175,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,177,161,184,176,168,185,186],
[153,0,147,146,186,144,147,163,176],
[164,194,0,188,209,162,172,167,180],
[180,195,153,0,178,163,153,188,168],
[157,155,132,163,0,161,176,175,145],
[165,197,179,178,180,0,187,185,178],
[173,194,169,188,165,154,0,177,182],
[156,178,174,153,166,156,164,0,164],
[155,165,161,173,196,163,159,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,153,129,177,154,190,179,164],
[187,0,153,140,157,178,145,146,209],
[188,188,0,191,135,156,166,182,199],
[212,201,150,0,172,182,184,186,182],
[164,184,206,169,0,122,148,175,191],
[187,163,185,159,219,0,175,130,186],
[151,196,175,157,193,166,0,163,172],
[162,195,159,155,166,211,178,0,157],
[177,132,142,159,150,155,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,160,171,162,174,167,157,166],
[179,0,185,162,165,192,180,171,179],
[181,156,0,162,154,176,151,159,172],
[170,179,179,0,169,187,183,182,168],
[179,176,187,172,0,188,174,176,167],
[167,149,165,154,153,0,163,155,182],
[174,161,190,158,167,178,0,162,154],
[184,170,182,159,165,186,179,0,178],
[175,162,169,173,174,159,187,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,171,174,160,152,181,153],
[173,0,145,148,153,150,143,170,146],
[171,196,0,170,166,164,140,164,149],
[170,193,171,0,177,181,171,191,159],
[167,188,175,164,0,154,154,164,147],
[181,191,177,160,187,0,166,174,161],
[189,198,201,170,187,175,0,186,171],
[160,171,177,150,177,167,155,0,139],
[188,195,192,182,194,180,170,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,219,219,235,194,202,163,193],
[158,0,180,187,205,166,200,163,180],
[122,161,0,177,157,179,165,153,141],
[122,154,164,0,199,180,162,159,146],
[106,136,184,142,0,155,173,133,150],
[147,175,162,161,186,0,185,160,154],
[139,141,176,179,168,156,0,157,162],
[178,178,188,182,208,181,184,0,156],
[148,161,200,195,191,187,179,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,173,174,199,184,169,181],
[171,0,172,161,151,184,165,175,167],
[152,169,0,176,151,188,156,167,141],
[168,180,165,0,163,173,197,188,177],
[167,190,190,178,0,194,204,194,182],
[142,157,153,168,147,0,156,149,140],
[157,176,185,144,137,185,0,173,182],
[172,166,174,153,147,192,168,0,170],
[160,174,200,164,159,201,159,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,159,179,166,156,170,173,168],
[190,0,169,182,166,170,181,170,189],
[182,172,0,192,183,149,193,184,193],
[162,159,149,0,162,176,187,189,179],
[175,175,158,179,0,151,181,162,179],
[185,171,192,165,190,0,174,188,187],
[171,160,148,154,160,167,0,168,169],
[168,171,157,152,179,153,173,0,157],
[173,152,148,162,162,154,172,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,185,154,197,174,186,127,183],
[183,0,159,153,157,146,159,173,168],
[156,182,0,155,213,146,156,142,127],
[187,188,186,0,217,170,188,159,184],
[144,184,128,124,0,100,128,115,157],
[167,195,195,171,241,0,200,169,181],
[155,182,185,153,213,141,0,172,155],
[214,168,199,182,226,172,169,0,169],
[158,173,214,157,184,160,186,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,159,176,181,154,180,178],
[169,0,163,173,167,168,161,174,175],
[180,178,0,166,184,187,162,181,187],
[182,168,175,0,177,173,174,178,174],
[165,174,157,164,0,165,147,176,176],
[160,173,154,168,176,0,153,177,174],
[187,180,179,167,194,188,0,190,180],
[161,167,160,163,165,164,151,0,169],
[163,166,154,167,165,167,161,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,187,176,173,172,168,182],
[163,0,162,175,171,173,165,168,164],
[171,179,0,187,190,183,176,170,174],
[154,166,154,0,181,167,160,159,162],
[165,170,151,160,0,166,163,168,161],
[168,168,158,174,175,0,165,163,158],
[169,176,165,181,178,176,0,169,163],
[173,173,171,182,173,178,172,0,170],
[159,177,167,179,180,183,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,211,156,158,174,180,178,157],
[156,0,183,149,144,171,173,165,150],
[130,158,0,138,146,177,136,168,147],
[185,192,203,0,170,188,193,200,182],
[183,197,195,171,0,178,182,205,168],
[167,170,164,153,163,0,159,169,157],
[161,168,205,148,159,182,0,173,160],
[163,176,173,141,136,172,168,0,162],
[184,191,194,159,173,184,181,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,130,162,162,156,159,156,176],
[184,0,142,153,199,169,175,188,190],
[211,199,0,158,210,199,190,186,198],
[179,188,183,0,221,173,162,221,183],
[179,142,131,120,0,151,155,156,164],
[185,172,142,168,190,0,180,214,201],
[182,166,151,179,186,161,0,181,172],
[185,153,155,120,185,127,160,0,167],
[165,151,143,158,177,140,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,176,165,163,182,197,175,176],
[156,0,179,160,149,171,186,163,157],
[165,162,0,154,159,159,160,153,162],
[176,181,187,0,157,172,190,186,178],
[178,192,182,184,0,163,183,177,180],
[159,170,182,169,178,0,180,151,169],
[144,155,181,151,158,161,0,138,170],
[166,178,188,155,164,190,203,0,164],
[165,184,179,163,161,172,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,153,197,171,145,176,181],
[180,0,171,168,196,175,148,194,201],
[182,170,0,163,193,202,172,168,204],
[188,173,178,0,207,174,163,198,191],
[144,145,148,134,0,158,153,151,162],
[170,166,139,167,183,0,139,173,172],
[196,193,169,178,188,202,0,183,201],
[165,147,173,143,190,168,158,0,166],
[160,140,137,150,179,169,140,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,190,151,175,168,178,161],
[161,0,168,178,153,172,174,169,168],
[168,173,0,193,172,179,178,178,175],
[151,163,148,0,145,170,167,165,147],
[190,188,169,196,0,185,178,178,179],
[166,169,162,171,156,0,169,191,160],
[173,167,163,174,163,172,0,170,168],
[163,172,163,176,163,150,171,0,159],
[180,173,166,194,162,181,173,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,167,204,194,197,162,141,203],
[173,0,198,195,179,179,175,156,200],
[174,143,0,169,202,170,164,151,208],
[137,146,172,0,155,171,152,124,203],
[147,162,139,186,0,194,166,153,179],
[144,162,171,170,147,0,139,128,193],
[179,166,177,189,175,202,0,178,199],
[200,185,190,217,188,213,163,0,211],
[138,141,133,138,162,148,142,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,189,207,201,196,204,206,194],
[173,0,166,199,193,173,183,179,162],
[152,175,0,178,185,182,173,187,187],
[134,142,163,0,156,171,158,187,131],
[140,148,156,185,0,146,153,181,160],
[145,168,159,170,195,0,173,188,163],
[137,158,168,183,188,168,0,191,173],
[135,162,154,154,160,153,150,0,158],
[147,179,154,210,181,178,168,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,173,162,161,176,149,156],
[181,0,189,199,163,171,199,183,175],
[183,152,0,190,177,172,193,176,163],
[168,142,151,0,144,169,167,152,150],
[179,178,164,197,0,190,185,178,172],
[180,170,169,172,151,0,167,145,145],
[165,142,148,174,156,174,0,162,154],
[192,158,165,189,163,196,179,0,162],
[185,166,178,191,169,196,187,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,151,162,183,183,199,166],
[185,0,167,170,185,205,179,185,193],
[179,174,0,162,175,198,167,171,164],
[190,171,179,0,147,189,156,192,158],
[179,156,166,194,0,205,174,201,195],
[158,136,143,152,136,0,160,170,158],
[158,162,174,185,167,181,0,170,184],
[142,156,170,149,140,171,171,0,135],
[175,148,177,183,146,183,157,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,146,162,175,176,174,184,172],
[140,0,123,155,159,157,156,167,150],
[195,218,0,165,185,178,172,192,181],
[179,186,176,0,167,167,172,175,176],
[166,182,156,174,0,162,177,169,152],
[165,184,163,174,179,0,164,169,163],
[167,185,169,169,164,177,0,175,165],
[157,174,149,166,172,172,166,0,158],
[169,191,160,165,189,178,176,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,169,166,172,157,165,160,144],
[186,0,174,179,174,170,163,172,155],
[172,167,0,187,184,167,186,167,165],
[175,162,154,0,172,168,162,168,159],
[169,167,157,169,0,150,169,156,149],
[184,171,174,173,191,0,175,178,165],
[176,178,155,179,172,166,0,163,162],
[181,169,174,173,185,163,178,0,177],
[197,186,176,182,192,176,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,172,166,159,159,165,178],
[169,0,179,177,162,162,155,168,188],
[159,162,0,182,154,145,152,157,167],
[169,164,159,0,180,162,170,176,168],
[175,179,187,161,0,171,148,162,166],
[182,179,196,179,170,0,184,197,180],
[182,186,189,171,193,157,0,191,201],
[176,173,184,165,179,144,150,0,197],
[163,153,174,173,175,161,140,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,165,197,185,168,178,185],
[166,0,165,176,189,167,165,163,172],
[173,176,0,164,195,173,161,166,184],
[176,165,177,0,190,175,169,171,187],
[144,152,146,151,0,155,140,153,164],
[156,174,168,166,186,0,177,158,191],
[173,176,180,172,201,164,0,178,194],
[163,178,175,170,188,183,163,0,177],
[156,169,157,154,177,150,147,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,156,164,129,147,157,139,190],
[192,0,175,174,168,179,170,178,198],
[185,166,0,186,151,162,176,160,195],
[177,167,155,0,145,168,173,151,189],
[212,173,190,196,0,189,197,152,210],
[194,162,179,173,152,0,178,162,195],
[184,171,165,168,144,163,0,144,187],
[202,163,181,190,189,179,197,0,212],
[151,143,146,152,131,146,154,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,182,170,179,187,188,184,176],
[193,0,185,177,179,198,192,168,164],
[159,156,0,157,165,181,180,171,173],
[171,164,184,0,179,183,189,182,151],
[162,162,176,162,0,185,168,175,147],
[154,143,160,158,156,0,170,158,149],
[153,149,161,152,173,171,0,159,145],
[157,173,170,159,166,183,182,0,167],
[165,177,168,190,194,192,196,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,186,177,145,158,167,166,161],
[169,0,177,186,152,166,169,166,170],
[155,164,0,175,156,176,161,152,165],
[164,155,166,0,148,154,163,148,151],
[196,189,185,193,0,174,178,170,180],
[183,175,165,187,167,0,162,157,161],
[174,172,180,178,163,179,0,160,162],
[175,175,189,193,171,184,181,0,168],
[180,171,176,190,161,180,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,160,169,170,166,149,148,165],
[183,0,176,175,183,167,165,176,189],
[181,165,0,186,181,181,170,162,182],
[172,166,155,0,168,169,162,151,167],
[171,158,160,173,0,167,151,163,165],
[175,174,160,172,174,0,154,162,177],
[192,176,171,179,190,187,0,165,181],
[193,165,179,190,178,179,176,0,180],
[176,152,159,174,176,164,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,184,176,188,184,176,167,176],
[150,0,164,163,162,159,150,165,163],
[157,177,0,169,161,164,167,157,161],
[165,178,172,0,182,164,167,159,172],
[153,179,180,159,0,163,169,166,162],
[157,182,177,177,178,0,175,167,168],
[165,191,174,174,172,166,0,173,163],
[174,176,184,182,175,174,168,0,177],
[165,178,180,169,179,173,178,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,116,153,118,158,176,117],
[177,0,185,176,182,165,162,199,131],
[180,156,0,125,180,154,181,180,157],
[225,165,216,0,183,121,167,193,150],
[188,159,161,158,0,131,141,151,143],
[223,176,187,220,210,0,155,216,176],
[183,179,160,174,200,186,0,196,179],
[165,142,161,148,190,125,145,0,128],
[224,210,184,191,198,165,162,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,162,183,152,209,206,156,189],
[146,0,165,147,133,149,149,153,156],
[179,176,0,178,173,183,162,146,179],
[158,194,163,0,187,209,184,149,192],
[189,208,168,154,0,196,186,192,214],
[132,192,158,132,145,0,146,166,158],
[135,192,179,157,155,195,0,151,170],
[185,188,195,192,149,175,190,0,203],
[152,185,162,149,127,183,171,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,169,188,200,162,151,138,191],
[153,0,121,152,217,125,176,146,181],
[172,220,0,212,202,136,161,125,193],
[153,189,129,0,214,104,141,142,180],
[141,124,139,127,0,116,74,137,150],
[179,216,205,237,225,0,173,158,218],
[190,165,180,200,267,168,0,208,212],
[203,195,216,199,204,183,133,0,222],
[150,160,148,161,191,123,129,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,182,176,168,178,165,163],
[171,0,168,176,162,167,186,173,181],
[167,173,0,182,163,156,177,157,159],
[159,165,159,0,158,150,168,149,150],
[165,179,178,183,0,160,182,170,172],
[173,174,185,191,181,0,180,172,168],
[163,155,164,173,159,161,0,150,178],
[176,168,184,192,171,169,191,0,167],
[178,160,182,191,169,173,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,176,175,188,171,167,169],
[172,0,173,171,168,181,169,176,176],
[167,168,0,155,146,178,151,162,136],
[165,170,186,0,159,180,161,169,172],
[166,173,195,182,0,187,173,179,165],
[153,160,163,161,154,0,148,156,149],
[170,172,190,180,168,193,0,171,166],
[174,165,179,172,162,185,170,0,166],
[172,165,205,169,176,192,175,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,179,168,185,185,179,172],
[162,0,169,170,176,174,188,178,168],
[171,172,0,183,170,173,189,173,167],
[162,171,158,0,164,173,177,165,169],
[173,165,171,177,0,184,186,168,175],
[156,167,168,168,157,0,173,165,168],
[156,153,152,164,155,168,0,155,168],
[162,163,168,176,173,176,186,0,171],
[169,173,174,172,166,173,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,173,171,164,154,162,151],
[164,0,176,180,176,173,160,167,174],
[174,165,0,164,169,159,158,159,161],
[168,161,177,0,187,166,157,167,167],
[170,165,172,154,0,151,153,160,165],
[177,168,182,175,190,0,171,176,178],
[187,181,183,184,188,170,0,184,175],
[179,174,182,174,181,165,157,0,164],
[190,167,180,174,176,163,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,160,184,188,165,180,174,169],
[158,0,163,165,192,169,162,156,164],
[181,178,0,171,191,171,174,166,176],
[157,176,170,0,184,166,171,156,163],
[153,149,150,157,0,162,161,155,151],
[176,172,170,175,179,0,183,164,163],
[161,179,167,170,180,158,0,157,156],
[167,185,175,185,186,177,184,0,176],
[172,177,165,178,190,178,185,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,173,152,166,179,151,150,168],
[184,0,186,178,187,178,178,167,181],
[168,155,0,162,168,178,156,168,172],
[189,163,179,0,188,192,177,173,183],
[175,154,173,153,0,173,164,156,166],
[162,163,163,149,168,0,160,148,176],
[190,163,185,164,177,181,0,168,172],
[191,174,173,168,185,193,173,0,192],
[173,160,169,158,175,165,169,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,179,176,180,187,168,176,182],
[170,0,171,170,174,185,172,174,181],
[162,170,0,168,164,170,165,167,170],
[165,171,173,0,171,169,170,155,173],
[161,167,177,170,0,168,155,173,164],
[154,156,171,172,173,0,177,169,173],
[173,169,176,171,186,164,0,172,158],
[165,167,174,186,168,172,169,0,169],
[159,160,171,168,177,168,183,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,188,196,167,197,171,196,179],
[168,0,177,184,190,193,176,180,199],
[153,164,0,178,169,188,163,171,169],
[145,157,163,0,156,181,159,168,171],
[174,151,172,185,0,184,148,193,162],
[144,148,153,160,157,0,135,179,161],
[170,165,178,182,193,206,0,176,190],
[145,161,170,173,148,162,165,0,171],
[162,142,172,170,179,180,151,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,191,178,195,186,159,177,180],
[165,0,160,172,173,174,174,169,194],
[150,181,0,175,184,181,173,180,185],
[163,169,166,0,171,172,169,167,194],
[146,168,157,170,0,160,163,152,178],
[155,167,160,169,181,0,158,158,188],
[182,167,168,172,178,183,0,154,191],
[164,172,161,174,189,183,187,0,196],
[161,147,156,147,163,153,150,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,168,181,186,176,214,185,176],
[155,0,203,182,168,169,160,171,177],
[173,138,0,156,189,153,181,139,182],
[160,159,185,0,191,146,177,158,181],
[155,173,152,150,0,127,167,156,157],
[165,172,188,195,214,0,221,178,194],
[127,181,160,164,174,120,0,152,126],
[156,170,202,183,185,163,189,0,170],
[165,164,159,160,184,147,215,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,176,161,183,175,174,172,158],
[160,0,171,159,155,156,168,177,148],
[165,170,0,163,172,158,171,170,152],
[180,182,178,0,179,175,163,186,176],
[158,186,169,162,0,166,148,168,165],
[166,185,183,166,175,0,170,186,152],
[167,173,170,178,193,171,0,162,157],
[169,164,171,155,173,155,179,0,159],
[183,193,189,165,176,189,184,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,152,175,160,188,173,202,173],
[154,0,155,155,156,184,170,203,161],
[189,186,0,177,160,220,188,200,189],
[166,186,164,0,154,176,163,209,176],
[181,185,181,187,0,174,155,197,180],
[153,157,121,165,167,0,157,208,149],
[168,171,153,178,186,184,0,201,163],
[139,138,141,132,144,133,140,0,135],
[168,180,152,165,161,192,178,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,200,213,200,170,182,190,164],
[138,0,157,195,160,153,157,142,130],
[141,184,0,171,160,143,145,149,171],
[128,146,170,0,154,157,159,146,138],
[141,181,181,187,0,152,132,139,146],
[171,188,198,184,189,0,187,168,179],
[159,184,196,182,209,154,0,180,163],
[151,199,192,195,202,173,161,0,164],
[177,211,170,203,195,162,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,149,163,143,171,184,167,185],
[200,0,136,165,179,187,180,164,162],
[192,205,0,181,150,208,182,169,165],
[178,176,160,0,179,170,203,148,184],
[198,162,191,162,0,211,220,178,208],
[170,154,133,171,130,0,177,151,170],
[157,161,159,138,121,164,0,167,171],
[174,177,172,193,163,190,174,0,194],
[156,179,176,157,133,171,170,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,165,158,165,146,172,169,147],
[180,0,181,151,173,169,182,171,183],
[176,160,0,151,156,159,156,178,162],
[183,190,190,0,164,168,179,195,175],
[176,168,185,177,0,167,175,184,159],
[195,172,182,173,174,0,187,192,170],
[169,159,185,162,166,154,0,176,170],
[172,170,163,146,157,149,165,0,148],
[194,158,179,166,182,171,171,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,189,175,195,169,186,184,183],
[155,0,179,173,176,164,175,171,173],
[152,162,0,173,162,159,152,153,162],
[166,168,168,0,168,158,167,177,164],
[146,165,179,173,0,154,168,174,175],
[172,177,182,183,187,0,166,172,167],
[155,166,189,174,173,175,0,171,169],
[157,170,188,164,167,169,170,0,184],
[158,168,179,177,166,174,172,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,175,175,167,169,197,172,172],
[169,0,155,174,159,158,179,164,181],
[166,186,0,187,169,181,185,184,194],
[166,167,154,0,152,171,153,162,184],
[174,182,172,189,0,199,179,167,173],
[172,183,160,170,142,0,185,169,175],
[144,162,156,188,162,156,0,160,163],
[169,177,157,179,174,172,181,0,185],
[169,160,147,157,168,166,178,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,172,176,176,178,167,171],
[160,0,166,164,153,171,173,151,159],
[166,175,0,168,180,173,168,172,175],
[169,177,173,0,176,182,165,162,163],
[165,188,161,165,0,177,169,158,178],
[165,170,168,159,164,0,159,156,174],
[163,168,173,176,172,182,0,169,159],
[174,190,169,179,183,185,172,0,174],
[170,182,166,178,163,167,182,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,179,182,174,171,174,173],
[179,0,178,183,183,186,189,166,176],
[171,163,0,183,176,185,178,169,158],
[162,158,158,0,164,181,174,163,162],
[159,158,165,177,0,174,175,160,174],
[167,155,156,160,167,0,160,157,162],
[170,152,163,167,166,181,0,160,164],
[167,175,172,178,181,184,181,0,180],
[168,165,183,179,167,179,177,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,169,163,169,174,185,169,181],
[169,0,170,173,178,173,187,172,190],
[172,171,0,166,173,174,172,158,175],
[178,168,175,0,168,175,174,162,181],
[172,163,168,173,0,177,168,156,171],
[167,168,167,166,164,0,178,165,174],
[156,154,169,167,173,163,0,171,179],
[172,169,183,179,185,176,170,0,183],
[160,151,166,160,170,167,162,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,137,165,138,164,157,148,165],
[179,0,162,153,150,159,150,146,152],
[204,179,0,155,181,198,172,173,169],
[176,188,186,0,167,178,171,158,179],
[203,191,160,174,0,160,170,150,159],
[177,182,143,163,181,0,148,165,145],
[184,191,169,170,171,193,0,172,162],
[193,195,168,183,191,176,169,0,185],
[176,189,172,162,182,196,179,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,181,194,175,160,184,188,184],
[170,0,168,171,152,175,169,183,176],
[160,173,0,166,137,149,164,176,173],
[147,170,175,0,155,158,163,182,163],
[166,189,204,186,0,168,187,190,189],
[181,166,192,183,173,0,169,186,177],
[157,172,177,178,154,172,0,184,172],
[153,158,165,159,151,155,157,0,157],
[157,165,168,178,152,164,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,165,172,172,168,178,192,189],
[183,0,156,175,146,173,159,193,209],
[176,185,0,176,163,173,190,197,194],
[169,166,165,0,144,174,168,201,175],
[169,195,178,197,0,199,198,206,218],
[173,168,168,167,142,0,153,171,181],
[163,182,151,173,143,188,0,190,190],
[149,148,144,140,135,170,151,0,194],
[152,132,147,166,123,160,151,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,184,184,170,184,182,190],
[164,0,153,184,176,169,158,154,166],
[177,188,0,185,188,177,180,168,188],
[157,157,156,0,183,176,166,153,172],
[157,165,153,158,0,164,147,149,166],
[171,172,164,165,177,0,162,169,178],
[157,183,161,175,194,179,0,177,183],
[159,187,173,188,192,172,164,0,181],
[151,175,153,169,175,163,158,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,165,177,180,160,172,159,171],
[150,0,134,150,152,154,149,154,154],
[176,207,0,166,180,174,190,158,185],
[164,191,175,0,172,180,180,152,182],
[161,189,161,169,0,162,167,157,164],
[181,187,167,161,179,0,193,171,186],
[169,192,151,161,174,148,0,163,159],
[182,187,183,189,184,170,178,0,181],
[170,187,156,159,177,155,182,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,169,174,169,151,162,168,157],
[169,0,167,182,167,176,175,162,165],
[172,174,0,183,185,171,186,174,164],
[167,159,158,0,156,150,177,173,159],
[172,174,156,185,0,175,166,173,164],
[190,165,170,191,166,0,171,163,164],
[179,166,155,164,175,170,0,166,164],
[173,179,167,168,168,178,175,0,178],
[184,176,177,182,177,177,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,176,156,155,162,159,180],
[175,0,171,184,184,153,157,184,181],
[168,170,0,171,168,151,165,171,176],
[165,157,170,0,150,131,155,157,181],
[185,157,173,191,0,143,172,170,177],
[186,188,190,210,198,0,170,191,205],
[179,184,176,186,169,171,0,194,178],
[182,157,170,184,171,150,147,0,159],
[161,160,165,160,164,136,163,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,159,178,173,157,144,190,184],
[152,0,166,178,163,153,153,177,161],
[182,175,0,199,185,184,170,186,191],
[163,163,142,0,131,161,154,158,161],
[168,178,156,210,0,170,185,200,193],
[184,188,157,180,171,0,164,184,166],
[197,188,171,187,156,177,0,170,178],
[151,164,155,183,141,157,171,0,147],
[157,180,150,180,148,175,163,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,163,171,195,189,183,165],
[179,0,169,158,158,186,184,181,170],
[176,172,0,178,183,162,190,186,178],
[178,183,163,0,173,192,193,185,179],
[170,183,158,168,0,182,187,166,162],
[146,155,179,149,159,0,169,179,149],
[152,157,151,148,154,172,0,170,159],
[158,160,155,156,175,162,171,0,151],
[176,171,163,162,179,192,182,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,201,160,181,202,204,183,200],
[141,0,178,200,223,261,161,241,200],
[140,163,0,182,166,221,224,181,179],
[181,141,159,0,183,160,160,160,141],
[160,118,175,158,0,237,198,262,238],
[139,80,120,181,104,0,103,141,156],
[137,180,117,181,143,238,0,198,197],
[158,100,160,181,79,200,143,0,198],
[141,141,162,200,103,185,144,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,165,163,180,170,181,196,163],
[126,0,149,169,154,158,147,165,139],
[176,192,0,171,176,167,189,195,163],
[178,172,170,0,176,158,176,186,160],
[161,187,165,165,0,161,191,182,173],
[171,183,174,183,180,0,220,204,147],
[160,194,152,165,150,121,0,175,143],
[145,176,146,155,159,137,166,0,153],
[178,202,178,181,168,194,198,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,188,197,187,190,178,186,170],
[156,0,182,179,169,174,164,169,145],
[153,159,0,162,163,179,153,162,166],
[144,162,179,0,156,165,141,160,137],
[154,172,178,185,0,167,163,175,166],
[151,167,162,176,174,0,161,169,172],
[163,177,188,200,178,180,0,180,168],
[155,172,179,181,166,172,161,0,143],
[171,196,175,204,175,169,173,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,163,168,152,177,183,154],
[169,0,187,181,164,153,163,193,161],
[158,154,0,193,135,130,163,195,152],
[178,160,148,0,127,145,158,152,133],
[173,177,206,214,0,179,174,217,142],
[189,188,211,196,162,0,209,181,180],
[164,178,178,183,167,132,0,179,134],
[158,148,146,189,124,160,162,0,153],
[187,180,189,208,199,161,207,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,209,208,208,236,234,164,188],
[118,0,142,127,163,153,151,118,157],
[132,199,0,193,209,222,227,190,190],
[133,214,148,0,205,181,207,155,213],
[133,178,132,136,0,171,176,140,180],
[105,188,119,160,170,0,210,178,161],
[107,190,114,134,165,131,0,160,171],
[177,223,151,186,201,163,181,0,188],
[153,184,151,128,161,180,170,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,166,159,165,144,159,159],
[182,0,159,182,174,189,171,166,196],
[178,182,0,179,182,186,166,179,185],
[175,159,162,0,176,190,154,169,197],
[182,167,159,165,0,185,131,165,158],
[176,152,155,151,156,0,148,159,157],
[197,170,175,187,210,193,0,189,198],
[182,175,162,172,176,182,152,0,177],
[182,145,156,144,183,184,143,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,140,152,148,153,155,158],
[180,0,191,148,163,163,173,178,182],
[175,150,0,147,148,165,166,162,169],
[201,193,194,0,202,166,168,191,191],
[189,178,193,139,0,160,165,185,165],
[193,178,176,175,181,0,167,176,190],
[188,168,175,173,176,174,0,187,177],
[186,163,179,150,156,165,154,0,176],
[183,159,172,150,176,151,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,172,177,157,172,187,148,170],
[182,0,165,188,154,157,187,169,190],
[169,176,0,178,163,183,189,175,190],
[164,153,163,0,154,143,174,139,159],
[184,187,178,187,0,156,198,172,181],
[169,184,158,198,185,0,198,175,180],
[154,154,152,167,143,143,0,156,147],
[193,172,166,202,169,166,185,0,184],
[171,151,151,182,160,161,194,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,159,180,171,184,169,187,172],
[165,0,178,180,170,163,159,176,167],
[182,163,0,187,176,186,173,185,169],
[161,161,154,0,166,174,163,192,165],
[170,171,165,175,0,171,182,188,180],
[157,178,155,167,170,0,168,167,167],
[172,182,168,178,159,173,0,164,174],
[154,165,156,149,153,174,177,0,168],
[169,174,172,176,161,174,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,153,172,163,147,160,153],
[175,0,198,177,185,179,162,181,172],
[172,143,0,159,179,168,150,164,171],
[188,164,182,0,182,180,156,158,171],
[169,156,162,159,0,172,167,165,177],
[178,162,173,161,169,0,158,152,171],
[194,179,191,185,174,183,0,158,183],
[181,160,177,183,176,189,183,0,182],
[188,169,170,170,164,170,158,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,145,169,154,147,159,165,168],
[177,0,152,153,162,134,159,157,176],
[196,189,0,179,155,184,176,169,206],
[172,188,162,0,167,172,174,180,170],
[187,179,186,174,0,179,169,171,170],
[194,207,157,169,162,0,189,152,191],
[182,182,165,167,172,152,0,157,162],
[176,184,172,161,170,189,184,0,181],
[173,165,135,171,171,150,179,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,152,161,109,162,92,178,166],
[165,0,206,177,179,201,161,178,150],
[189,135,0,173,148,215,120,149,189],
[180,164,168,0,180,189,177,151,152],
[232,162,193,161,0,175,189,205,177],
[179,140,126,152,166,0,161,151,123],
[249,180,221,164,152,180,0,206,194],
[163,163,192,190,136,190,135,0,178],
[175,191,152,189,164,218,147,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,168,174,169,167,193,213,145],
[193,0,170,175,175,178,187,192,152],
[173,171,0,203,187,162,198,208,184],
[167,166,138,0,174,167,203,197,146],
[172,166,154,167,0,150,170,185,133],
[174,163,179,174,191,0,201,197,161],
[148,154,143,138,171,140,0,181,144],
[128,149,133,144,156,144,160,0,113],
[196,189,157,195,208,180,197,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,144,154,176,166,198,149,172],
[181,0,164,167,170,163,196,165,161],
[197,177,0,179,184,176,195,170,193],
[187,174,162,0,171,162,192,161,181],
[165,171,157,170,0,163,188,164,179],
[175,178,165,179,178,0,193,185,169],
[143,145,146,149,153,148,0,151,141],
[192,176,171,180,177,156,190,0,176],
[169,180,148,160,162,172,200,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,136,185,175,190,162,164,174],
[191,0,143,206,170,201,197,156,165],
[205,198,0,225,167,220,186,194,190],
[156,135,116,0,142,193,113,166,162],
[166,171,174,199,0,183,204,181,161],
[151,140,121,148,158,0,158,185,149],
[179,144,155,228,137,183,0,209,191],
[177,185,147,175,160,156,132,0,166],
[167,176,151,179,180,192,150,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,171,170,178,181,164,175,181],
[176,0,161,169,167,177,159,177,178],
[170,180,0,170,169,181,159,164,184],
[171,172,171,0,169,184,173,185,192],
[163,174,172,172,0,168,165,175,169],
[160,164,160,157,173,0,153,169,176],
[177,182,182,168,176,188,0,177,205],
[166,164,177,156,166,172,164,0,182],
[160,163,157,149,172,165,136,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,162,175,168,164,163,172],
[166,0,156,154,168,171,165,159,169],
[177,185,0,178,175,166,176,168,189],
[179,187,163,0,175,186,176,174,167],
[166,173,166,166,0,165,164,157,171],
[173,170,175,155,176,0,164,168,166],
[177,176,165,165,177,177,0,172,169],
[178,182,173,167,184,173,169,0,181],
[169,172,152,174,170,175,172,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,193,174,168,168,162,175,179],
[155,0,180,160,160,170,163,164,155],
[148,161,0,155,148,163,155,154,145],
[167,181,186,0,174,189,190,187,171],
[173,181,193,167,0,175,168,178,180],
[173,171,178,152,166,0,170,163,165],
[179,178,186,151,173,171,0,183,165],
[166,177,187,154,163,178,158,0,166],
[162,186,196,170,161,176,176,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,187,169,188,173,155,182],
[159,0,159,170,169,157,176,166,170],
[164,182,0,168,165,173,179,167,181],
[154,171,173,0,162,184,158,159,185],
[172,172,176,179,0,188,177,167,178],
[153,184,168,157,153,0,175,161,184],
[168,165,162,183,164,166,0,175,179],
[186,175,174,182,174,180,166,0,195],
[159,171,160,156,163,157,162,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,158,172,164,183,169,166],
[171,0,176,171,174,179,183,170,169],
[178,165,0,159,164,172,187,167,156],
[183,170,182,0,177,178,187,176,184],
[169,167,177,164,0,173,179,166,168],
[177,162,169,163,168,0,183,153,166],
[158,158,154,154,162,158,0,157,167],
[172,171,174,165,175,188,184,0,177],
[175,172,185,157,173,175,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,178,148,159,131,81,180,126],
[243,0,180,212,244,164,146,214,195],
[163,161,0,161,194,179,162,197,179],
[193,129,180,0,192,147,175,196,129],
[182,97,147,149,0,213,164,178,199],
[210,177,162,194,128,0,161,147,181],
[260,195,179,166,177,180,0,164,229],
[161,127,144,145,163,194,177,0,179],
[215,146,162,212,142,160,112,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,183,147,141,147,195,177,153],
[155,0,172,158,138,121,150,165,169],
[158,169,0,155,158,113,180,147,176],
[194,183,186,0,170,172,217,169,191],
[200,203,183,171,0,140,180,120,174],
[194,220,228,169,201,0,246,183,202],
[146,191,161,124,161,95,0,139,154],
[164,176,194,172,221,158,202,0,183],
[188,172,165,150,167,139,187,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,171,199,180,173,178,168],
[175,0,176,191,205,188,178,179,168],
[172,165,0,172,184,166,177,176,173],
[170,150,169,0,172,162,162,142,161],
[142,136,157,169,0,157,153,172,149],
[161,153,175,179,184,0,174,188,180],
[168,163,164,179,188,167,0,178,165],
[163,162,165,199,169,153,163,0,167],
[173,173,168,180,192,161,176,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,171,150,207,180,180,174],
[176,0,176,180,192,193,180,165,197],
[176,165,0,158,184,196,173,184,201],
[170,161,183,0,168,187,152,171,180],
[191,149,157,173,0,181,156,164,165],
[134,148,145,154,160,0,145,118,157],
[161,161,168,189,185,196,0,142,176],
[161,176,157,170,177,223,199,0,174],
[167,144,140,161,176,184,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,197,164,169,181,203,165,165],
[150,0,163,157,148,158,164,148,161],
[144,178,0,145,158,169,172,171,167],
[177,184,196,0,177,174,169,190,180],
[172,193,183,164,0,157,184,173,159],
[160,183,172,167,184,0,167,156,151],
[138,177,169,172,157,174,0,169,161],
[176,193,170,151,168,185,172,0,155],
[176,180,174,161,182,190,180,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,189,189,170,164,183,163],
[172,0,168,180,187,172,168,174,178],
[169,173,0,194,193,187,177,190,186],
[152,161,147,0,171,158,154,152,157],
[152,154,148,170,0,169,157,165,168],
[171,169,154,183,172,0,161,161,167],
[177,173,164,187,184,180,0,179,164],
[158,167,151,189,176,180,162,0,159],
[178,163,155,184,173,174,177,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,161,167,169,170,180,169],
[171,0,173,172,176,173,167,171,179],
[164,168,0,164,162,180,171,155,167],
[180,169,177,0,181,170,167,174,157],
[174,165,179,160,0,176,182,187,166],
[172,168,161,171,165,0,158,173,154],
[171,174,170,174,159,183,0,154,156],
[161,170,186,167,154,168,187,0,182],
[172,162,174,184,175,187,185,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,174,189,176,174,160,188,172],
[149,0,201,199,157,187,178,159,180],
[167,140,0,167,157,175,151,159,123],
[152,142,174,0,165,171,171,158,155],
[165,184,184,176,0,182,166,145,182],
[167,154,166,170,159,0,157,148,152],
[181,163,190,170,175,184,0,191,159],
[153,182,182,183,196,193,150,0,175],
[169,161,218,186,159,189,182,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,225,193,187,168,181,188,176],
[159,0,205,189,154,165,177,172,143],
[116,136,0,140,136,114,147,143,137],
[148,152,201,0,159,160,122,147,154],
[154,187,205,182,0,177,168,182,164],
[173,176,227,181,164,0,176,164,165],
[160,164,194,219,173,165,0,167,157],
[153,169,198,194,159,177,174,0,171],
[165,198,204,187,177,176,184,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,163,168,157,162,152,155,157],
[183,0,183,174,177,179,159,169,176],
[178,158,0,162,159,174,162,161,161],
[173,167,179,0,167,174,163,163,167],
[184,164,182,174,0,185,173,188,171],
[179,162,167,167,156,0,148,157,162],
[189,182,179,178,168,193,0,176,166],
[186,172,180,178,153,184,165,0,170],
[184,165,180,174,170,179,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,165,168,178,166,173,185],
[157,0,200,151,182,181,175,161,141],
[166,141,0,162,163,156,161,165,169],
[176,190,179,0,174,181,159,172,179],
[173,159,178,167,0,148,145,157,170],
[163,160,185,160,193,0,150,168,161],
[175,166,180,182,196,191,0,161,161],
[168,180,176,169,184,173,180,0,182],
[156,200,172,162,171,180,180,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,182,175,177,199,166,172,165],
[161,0,169,153,170,184,168,162,151],
[159,172,0,197,163,185,155,155,158],
[166,188,144,0,153,193,165,159,156],
[164,171,178,188,0,188,169,154,149],
[142,157,156,148,153,0,170,137,159],
[175,173,186,176,172,171,0,170,166],
[169,179,186,182,187,204,171,0,174],
[176,190,183,185,192,182,175,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,180,172,164,222,166,163,181],
[170,0,201,187,190,192,172,179,168],
[161,140,0,154,183,172,155,154,163],
[169,154,187,0,180,184,141,160,159],
[177,151,158,161,0,183,155,184,154],
[119,149,169,157,158,0,140,169,151],
[175,169,186,200,186,201,0,161,175],
[178,162,187,181,157,172,180,0,182],
[160,173,178,182,187,190,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,154,174,170,192,175,166,171],
[170,0,178,174,186,197,176,169,169],
[187,163,0,186,166,201,179,167,175],
[167,167,155,0,165,183,184,176,168],
[171,155,175,176,0,186,177,174,172],
[149,144,140,158,155,0,154,141,144],
[166,165,162,157,164,187,0,170,181],
[175,172,174,165,167,200,171,0,183],
[170,172,166,173,169,197,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,204,172,155,205,156,189,205],
[152,0,220,186,166,186,118,208,236],
[137,121,0,118,140,134,117,171,134],
[169,155,223,0,156,203,172,206,238],
[186,175,201,185,0,153,135,204,270],
[136,155,207,138,188,0,152,225,187],
[185,223,224,169,206,189,0,223,258],
[152,133,170,135,137,116,118,0,133],
[136,105,207,103,71,154,83,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,176,162,182,146,181,171,160],
[166,0,173,176,185,155,184,185,164],
[165,168,0,188,185,157,172,170,167],
[179,165,153,0,178,145,170,170,151],
[159,156,156,163,0,149,168,167,153],
[195,186,184,196,192,0,170,179,177],
[160,157,169,171,173,171,0,173,162],
[170,156,171,171,174,162,168,0,168],
[181,177,174,190,188,164,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,181,171,190,174,171,192,155],
[146,0,152,149,161,157,173,167,150],
[160,189,0,140,174,172,187,190,157],
[170,192,201,0,184,158,164,183,174],
[151,180,167,157,0,145,162,169,152],
[167,184,169,183,196,0,175,199,179],
[170,168,154,177,179,166,0,177,176],
[149,174,151,158,172,142,164,0,148],
[186,191,184,167,189,162,165,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,164,155,173,177,175,174],
[167,0,154,171,169,171,182,172,164],
[180,187,0,164,165,177,190,175,190],
[177,170,177,0,176,176,192,181,197],
[186,172,176,165,0,181,183,166,179],
[168,170,164,165,160,0,177,183,180],
[164,159,151,149,158,164,0,157,159],
[166,169,166,160,175,158,184,0,182],
[167,177,151,144,162,161,182,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,173,153,158,153,159,180],
[177,0,162,205,182,176,166,170,179],
[176,179,0,186,164,179,152,173,183],
[168,136,155,0,153,148,138,152,152],
[188,159,177,188,0,175,163,157,194],
[183,165,162,193,166,0,171,164,169],
[188,175,189,203,178,170,0,187,184],
[182,171,168,189,184,177,154,0,178],
[161,162,158,189,147,172,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,196,167,172,171,188,183],
[181,0,184,179,177,170,177,191,189],
[178,157,0,162,172,163,179,188,177],
[145,162,179,0,175,148,170,163,178],
[174,164,169,166,0,179,165,174,195],
[169,171,178,193,162,0,176,188,188],
[170,164,162,171,176,165,0,194,185],
[153,150,153,178,167,153,147,0,169],
[158,152,164,163,146,153,156,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,176,180,190,169,184,182],
[161,0,171,185,188,199,182,188,174],
[166,170,0,175,193,189,185,186,180],
[165,156,166,0,173,191,161,169,165],
[161,153,148,168,0,173,159,157,169],
[151,142,152,150,168,0,161,160,157],
[172,159,156,180,182,180,0,170,171],
[157,153,155,172,184,181,171,0,164],
[159,167,161,176,172,184,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,197,184,212,145,225,225,154],
[129,0,156,186,185,174,144,144,200],
[144,185,0,159,173,161,175,159,186],
[157,155,182,0,200,174,199,217,181],
[129,156,168,141,0,158,157,158,170],
[196,167,180,167,183,0,168,183,213],
[116,197,166,142,184,173,0,114,141],
[116,197,182,124,183,158,227,0,183],
[187,141,155,160,171,128,200,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,186,175,171,170,160,167,185],
[176,0,187,181,169,177,179,172,181],
[155,154,0,160,164,154,167,143,167],
[166,160,181,0,154,155,163,160,168],
[170,172,177,187,0,169,161,162,180],
[171,164,187,186,172,0,163,174,173],
[181,162,174,178,180,178,0,162,185],
[174,169,198,181,179,167,179,0,199],
[156,160,174,173,161,168,156,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,175,181,179,169,167,161],
[168,0,169,167,188,183,161,156,161],
[165,172,0,159,182,179,170,151,159],
[166,174,182,0,198,199,183,177,187],
[160,153,159,143,0,172,158,161,142],
[162,158,162,142,169,0,152,162,145],
[172,180,171,158,183,189,0,168,172],
[174,185,190,164,180,179,173,0,168],
[180,180,182,154,199,196,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,168,165,169,145,144,184,157],
[159,0,164,165,165,162,161,161,137],
[173,177,0,156,170,164,156,164,159],
[176,176,185,0,179,171,167,167,156],
[172,176,171,162,0,170,160,158,132],
[196,179,177,170,171,0,178,182,171],
[197,180,185,174,181,163,0,170,162],
[157,180,177,174,183,159,171,0,154],
[184,204,182,185,209,170,179,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,144,134,170,169,124,137,136],
[204,0,180,166,178,186,193,188,156],
[197,161,0,172,161,166,181,193,142],
[207,175,169,0,173,199,184,201,141],
[171,163,180,168,0,166,169,169,142],
[172,155,175,142,175,0,151,145,144],
[217,148,160,157,172,190,0,163,174],
[204,153,148,140,172,196,178,0,155],
[205,185,199,200,199,197,167,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,152,170,187,159,160,174,171],
[186,0,179,177,187,178,161,174,188],
[189,162,0,176,184,170,171,169,201],
[171,164,165,0,177,176,160,177,183],
[154,154,157,164,0,176,155,168,164],
[182,163,171,165,165,0,160,178,169],
[181,180,170,181,186,181,0,196,193],
[167,167,172,164,173,163,145,0,173],
[170,153,140,158,177,172,148,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,189,207,187,185,179,201,170],
[182,0,165,184,181,166,172,183,169],
[152,176,0,188,181,185,164,180,176],
[134,157,153,0,172,146,150,159,159],
[154,160,160,169,0,163,176,178,179],
[156,175,156,195,178,0,171,192,170],
[162,169,177,191,165,170,0,168,180],
[140,158,161,182,163,149,173,0,166],
[171,172,165,182,162,171,161,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,177,168,163,157,163,166],
[171,0,165,166,176,157,157,169,168],
[161,176,0,164,160,165,168,163,164],
[164,175,177,0,170,157,162,168,158],
[173,165,181,171,0,163,171,171,174],
[178,184,176,184,178,0,162,170,173],
[184,184,173,179,170,179,0,162,170],
[178,172,178,173,170,171,179,0,185],
[175,173,177,183,167,168,171,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,139,159,139,205,157,229,113],
[135,0,186,249,182,231,181,249,159],
[202,155,0,198,156,204,180,200,180],
[182,92,143,0,115,162,136,182,91],
[202,159,185,226,0,183,179,249,202],
[136,110,137,179,158,0,180,202,158],
[184,160,161,205,162,161,0,228,205],
[112,92,141,159,92,139,113,0,135],
[228,182,161,250,139,183,136,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,184,186,185,179,184,166,163],
[148,0,151,141,149,143,144,168,166],
[157,190,0,159,175,148,170,167,162],
[155,200,182,0,166,186,190,175,174],
[156,192,166,175,0,177,168,171,184],
[162,198,193,155,164,0,167,168,158],
[157,197,171,151,173,174,0,164,169],
[175,173,174,166,170,173,177,0,168],
[178,175,179,167,157,183,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,174,162,175,173,181,165],
[171,0,185,190,171,187,159,176,172],
[152,156,0,154,145,160,152,148,148],
[167,151,187,0,170,170,173,166,164],
[179,170,196,171,0,186,167,188,175],
[166,154,181,171,155,0,141,163,161],
[168,182,189,168,174,200,0,192,173],
[160,165,193,175,153,178,149,0,178],
[176,169,193,177,166,180,168,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,176,179,172,174,168,169,158],
[175,0,167,148,152,176,178,170,158],
[165,174,0,181,165,169,189,164,181],
[162,193,160,0,146,165,166,158,175],
[169,189,176,195,0,186,188,190,178],
[167,165,172,176,155,0,173,166,162],
[173,163,152,175,153,168,0,171,175],
[172,171,177,183,151,175,170,0,165],
[183,183,160,166,163,179,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,192,210,172,170,164,180,198],
[161,0,188,183,182,180,194,195,196],
[149,153,0,182,158,156,161,149,181],
[131,158,159,0,191,167,158,165,173],
[169,159,183,150,0,165,164,185,182],
[171,161,185,174,176,0,156,187,180],
[177,147,180,183,177,185,0,180,182],
[161,146,192,176,156,154,161,0,162],
[143,145,160,168,159,161,159,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,149,177,172,178,160,162,152],
[195,0,171,199,174,197,173,179,168],
[192,170,0,197,178,192,168,175,172],
[164,142,144,0,145,166,126,139,135],
[169,167,163,196,0,173,151,172,160],
[163,144,149,175,168,0,150,150,144],
[181,168,173,215,190,191,0,188,186],
[179,162,166,202,169,191,153,0,164],
[189,173,169,206,181,197,155,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,168,184,150,160,178,182,182],
[175,0,156,183,140,166,158,174,158],
[173,185,0,213,188,147,184,211,168],
[157,158,128,0,124,155,197,163,156],
[191,201,153,217,0,143,197,218,198],
[181,175,194,186,198,0,208,170,173],
[163,183,157,144,144,133,0,182,146],
[159,167,130,178,123,171,159,0,148],
[159,183,173,185,143,168,195,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,188,161,148,151,168,180,176],
[182,0,183,172,159,175,173,191,178],
[153,158,0,160,154,161,168,175,156],
[180,169,181,0,163,156,169,189,156],
[193,182,187,178,0,159,181,192,170],
[190,166,180,185,182,0,176,183,180],
[173,168,173,172,160,165,0,199,163],
[161,150,166,152,149,158,142,0,156],
[165,163,185,185,171,161,178,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,143,161,179,142,182,169],
[181,0,165,159,171,165,142,179,171],
[174,176,0,170,169,171,153,180,191],
[198,182,171,0,173,169,163,195,173],
[180,170,172,168,0,177,178,190,168],
[162,176,170,172,164,0,161,179,161],
[199,199,188,178,163,180,0,180,187],
[159,162,161,146,151,162,161,0,149],
[172,170,150,168,173,180,154,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,188,171,184,186,187,213,161],
[164,0,193,154,179,149,164,193,147],
[153,148,0,144,178,178,169,168,159],
[170,187,197,0,182,187,184,194,173],
[157,162,163,159,0,171,150,182,153],
[155,192,163,154,170,0,163,193,153],
[154,177,172,157,191,178,0,194,158],
[128,148,173,147,159,148,147,0,139],
[180,194,182,168,188,188,183,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,163,190,189,155,161,149,165],
[169,0,191,194,160,164,163,176,172],
[178,150,0,175,150,147,150,164,160],
[151,147,166,0,151,146,148,164,154],
[152,181,191,190,0,168,160,177,177],
[186,177,194,195,173,0,170,190,186],
[180,178,191,193,181,171,0,184,152],
[192,165,177,177,164,151,157,0,173],
[176,169,181,187,164,155,189,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,161,173,190,167,181,185,167],
[157,0,160,150,166,157,148,164,144],
[180,181,0,157,177,199,190,183,173],
[168,191,184,0,169,176,189,179,162],
[151,175,164,172,0,160,181,186,163],
[174,184,142,165,181,0,182,183,160],
[160,193,151,152,160,159,0,169,166],
[156,177,158,162,155,158,172,0,165],
[174,197,168,179,178,181,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,195,192,197,164,172,192],
[161,0,186,204,187,189,175,174,171],
[161,155,0,179,141,182,147,177,170],
[146,137,162,0,153,145,146,150,127],
[149,154,200,188,0,201,170,169,186],
[144,152,159,196,140,0,142,141,173],
[177,166,194,195,171,199,0,180,175],
[169,167,164,191,172,200,161,0,172],
[149,170,171,214,155,168,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,159,162,165,173,144,168],
[176,0,185,163,166,177,178,165,174],
[167,156,0,165,163,162,167,156,159],
[182,178,176,0,157,174,159,158,169],
[179,175,178,184,0,174,185,164,188],
[176,164,179,167,167,0,160,164,165],
[168,163,174,182,156,181,0,172,191],
[197,176,185,183,177,177,169,0,177],
[173,167,182,172,153,176,150,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,165,173,173,170,182,194],
[166,0,191,159,180,182,175,183,191],
[163,150,0,157,167,165,169,181,160],
[176,182,184,0,179,170,186,185,168],
[168,161,174,162,0,179,174,182,170],
[168,159,176,171,162,0,170,176,171],
[171,166,172,155,167,171,0,173,183],
[159,158,160,156,159,165,168,0,171],
[147,150,181,173,171,170,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,169,148,156,159,180,146],
[176,0,167,150,121,136,154,159,136],
[180,174,0,148,161,158,159,179,186],
[172,191,193,0,162,160,148,178,159],
[193,220,180,179,0,160,176,184,194],
[185,205,183,181,181,0,183,161,168],
[182,187,182,193,165,158,0,186,167],
[161,182,162,163,157,180,155,0,188],
[195,205,155,182,147,173,174,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,182,177,173,180,166,176],
[163,0,191,182,176,163,186,166,166],
[156,150,0,163,169,150,170,168,152],
[159,159,178,0,180,157,175,163,163],
[164,165,172,161,0,169,181,152,154],
[168,178,191,184,172,0,186,161,168],
[161,155,171,166,160,155,0,149,154],
[175,175,173,178,189,180,192,0,164],
[165,175,189,178,187,173,187,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,178,169,169,166,169,161],
[180,0,171,181,176,180,172,176,159],
[179,170,0,174,171,173,168,167,174],
[163,160,167,0,169,164,168,168,161],
[172,165,170,172,0,168,151,173,168],
[172,161,168,177,173,0,151,166,163],
[175,169,173,173,190,190,0,190,183],
[172,165,174,173,168,175,151,0,174],
[180,182,167,180,173,178,158,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,155,161,157,168,170,160,161],
[162,0,154,166,155,170,170,168,175],
[186,187,0,171,166,175,183,190,183],
[180,175,170,0,160,167,166,175,162],
[184,186,175,181,0,201,166,182,176],
[173,171,166,174,140,0,170,167,176],
[171,171,158,175,175,171,0,182,167],
[181,173,151,166,159,174,159,0,163],
[180,166,158,179,165,165,174,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,176,179,185,165,172,173,176],
[148,0,154,152,161,147,156,161,153],
[165,187,0,178,173,154,176,169,174],
[162,189,163,0,175,174,170,172,168],
[156,180,168,166,0,157,161,177,176],
[176,194,187,167,184,0,173,189,189],
[169,185,165,171,180,168,0,165,180],
[168,180,172,169,164,152,176,0,169],
[165,188,167,173,165,152,161,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,188,176,173,208,182,158,177],
[107,0,120,116,154,117,113,124,130],
[153,221,0,216,187,172,203,162,151],
[165,225,125,0,173,159,170,151,135],
[168,187,154,168,0,140,190,158,153],
[133,224,169,182,201,0,167,165,139],
[159,228,138,171,151,174,0,127,161],
[183,217,179,190,183,176,214,0,144],
[164,211,190,206,188,202,180,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,166,190,191,178,200,165,158],
[159,0,173,177,194,165,197,177,181],
[175,168,0,188,180,164,182,185,175],
[151,164,153,0,181,161,187,162,155],
[150,147,161,160,0,149,168,166,153],
[163,176,177,180,192,0,186,171,162],
[141,144,159,154,173,155,0,165,155],
[176,164,156,179,175,170,176,0,167],
[183,160,166,186,188,179,186,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,189,168,183,174,201,190,180],
[146,0,167,154,164,151,158,144,168],
[152,174,0,154,159,165,178,154,160],
[173,187,187,0,176,151,201,165,181],
[158,177,182,165,0,163,175,150,165],
[167,190,176,190,178,0,189,169,182],
[140,183,163,140,166,152,0,140,161],
[151,197,187,176,191,172,201,0,188],
[161,173,181,160,176,159,180,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,175,163,167,171,162,168,171],
[158,0,147,157,159,154,161,152,156],
[166,194,0,175,199,165,166,159,180],
[178,184,166,0,150,170,171,177,162],
[174,182,142,191,0,163,181,167,181],
[170,187,176,171,178,0,165,173,173],
[179,180,175,170,160,176,0,174,169],
[173,189,182,164,174,168,167,0,164],
[170,185,161,179,160,168,172,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,171,163,181,172,167,144],
[158,0,186,185,188,185,176,197,178],
[173,155,0,149,174,151,170,189,147],
[170,156,192,0,170,161,154,178,157],
[178,153,167,171,0,139,153,168,156],
[160,156,190,180,202,0,163,185,174],
[169,165,171,187,188,178,0,178,170],
[174,144,152,163,173,156,163,0,157],
[197,163,194,184,185,167,171,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,173,189,173,193,190,184,179],
[179,0,169,186,184,184,189,183,170],
[168,172,0,192,192,179,197,176,173],
[152,155,149,0,152,159,170,161,160],
[168,157,149,189,0,171,189,176,165],
[148,157,162,182,170,0,183,163,164],
[151,152,144,171,152,158,0,154,158],
[157,158,165,180,165,178,187,0,159],
[162,171,168,181,176,177,183,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,226,0,0,0,112,114],
[227,0,226,226,112,112,112,112,226],
[227,115,0,341,227,227,227,227,115],
[115,115,0,0,0,0,0,227,115],
[341,229,114,341,0,0,0,227,229],
[341,229,114,341,341,0,229,341,229],
[341,229,114,341,341,112,0,341,229],
[229,229,114,114,114,0,0,0,229],
[227,115,226,226,112,112,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,146,178,170,164,166,177,188],
[202,0,160,192,203,146,164,170,186],
[195,181,0,215,225,208,156,205,209],
[163,149,126,0,190,153,140,183,207],
[171,138,116,151,0,179,139,161,191],
[177,195,133,188,162,0,147,166,144],
[175,177,185,201,202,194,0,169,197],
[164,171,136,158,180,175,172,0,189],
[153,155,132,134,150,197,144,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,151,162,165,159,146,167],
[182,0,180,166,170,164,165,172,167],
[179,161,0,169,165,174,177,159,153],
[190,175,172,0,177,181,177,168,180],
[179,171,176,164,0,171,165,170,163],
[176,177,167,160,170,0,165,166,173],
[182,176,164,164,176,176,0,165,168],
[195,169,182,173,171,175,176,0,174],
[174,174,188,161,178,168,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,187,157,159,132,155,146,163],
[188,0,204,154,176,172,156,168,159],
[154,137,0,155,151,124,145,141,146],
[184,187,186,0,174,174,167,150,172],
[182,165,190,167,0,170,170,161,191],
[209,169,217,167,171,0,172,171,185],
[186,185,196,174,171,169,0,186,174],
[195,173,200,191,180,170,155,0,172],
[178,182,195,169,150,156,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,170,155,180,156,169,155,173],
[190,0,174,167,177,184,186,177,168],
[171,167,0,184,144,168,186,156,164],
[186,174,157,0,176,163,172,163,178],
[161,164,197,165,0,167,170,165,177],
[185,157,173,178,174,0,171,175,187],
[172,155,155,169,171,170,0,164,171],
[186,164,185,178,176,166,177,0,174],
[168,173,177,163,164,154,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,149,189,175,178,154,187,164],
[173,0,172,203,188,189,168,185,160],
[192,169,0,206,172,183,161,182,183],
[152,138,135,0,143,159,141,165,143],
[166,153,169,198,0,183,167,165,147],
[163,152,158,182,158,0,150,162,146],
[187,173,180,200,174,191,0,175,170],
[154,156,159,176,176,179,166,0,164],
[177,181,158,198,194,195,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,188,194,215,240,200,209,158],
[152,0,140,154,183,182,149,165,151],
[153,201,0,149,170,220,187,211,190],
[147,187,192,0,195,218,159,175,178],
[126,158,171,146,0,198,131,156,142],
[101,159,121,123,143,0,115,141,166],
[141,192,154,182,210,226,0,147,178],
[132,176,130,166,185,200,194,0,163],
[183,190,151,163,199,175,163,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,190,210,159,182,204,169,183],
[166,0,178,172,164,166,159,146,159],
[151,163,0,182,141,149,154,159,153],
[131,169,159,0,166,149,137,162,165],
[182,177,200,175,0,159,169,167,174],
[159,175,192,192,182,0,176,181,163],
[137,182,187,204,172,165,0,153,155],
[172,195,182,179,174,160,188,0,193],
[158,182,188,176,167,178,186,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,184,175,169,168,155,190],
[160,0,143,176,162,164,169,156,163],
[164,198,0,193,182,167,159,172,180],
[157,165,148,0,165,153,147,127,156],
[166,179,159,176,0,163,185,167,181],
[172,177,174,188,178,0,168,166,184],
[173,172,182,194,156,173,0,166,184],
[186,185,169,214,174,175,175,0,196],
[151,178,161,185,160,157,157,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,163,181,157,169,175,161],
[180,0,151,176,176,175,177,166,160],
[174,190,0,197,173,182,188,204,164],
[178,165,144,0,160,159,172,168,171],
[160,165,168,181,0,183,168,158,174],
[184,166,159,182,158,0,181,167,168],
[172,164,153,169,173,160,0,164,133],
[166,175,137,173,183,174,177,0,161],
[180,181,177,170,167,173,208,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,154,180,175,199,175,175],
[171,0,167,183,158,163,177,138,165],
[178,174,0,143,168,161,155,173,153],
[187,158,198,0,166,180,191,152,165],
[161,183,173,175,0,181,157,174,178],
[166,178,180,161,160,0,181,168,176],
[142,164,186,150,184,160,0,165,169],
[166,203,168,189,167,173,176,0,174],
[166,176,188,176,163,165,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,228,227,227,228,341,341,114],
[0,0,0,0,0,0,113,114,0],
[113,341,0,113,113,113,227,341,113],
[114,341,228,0,114,114,341,341,114],
[114,341,228,227,0,114,341,341,114],
[113,341,228,227,227,0,341,341,227],
[0,228,114,0,0,0,0,228,114],
[0,227,0,0,0,0,113,0,0],
[227,341,228,227,227,114,227,341,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,163,190,181,181,187,173,187],
[159,0,161,160,164,172,160,163,164],
[178,180,0,189,185,182,185,155,163],
[151,181,152,0,178,171,158,159,170],
[160,177,156,163,0,176,163,161,156],
[160,169,159,170,165,0,162,162,164],
[154,181,156,183,178,179,0,157,171],
[168,178,186,182,180,179,184,0,196],
[154,177,178,171,185,177,170,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,179,181,166,182,172,147,168],
[173,0,150,165,164,156,156,152,163],
[162,191,0,174,165,167,175,165,172],
[160,176,167,0,190,142,151,163,172],
[175,177,176,151,0,160,162,170,172],
[159,185,174,199,181,0,143,171,190],
[169,185,166,190,179,198,0,170,181],
[194,189,176,178,171,170,171,0,176],
[173,178,169,169,169,151,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,195,181,181,161,178,176],
[166,0,179,177,175,175,175,167,170],
[157,162,0,193,160,169,169,181,162],
[146,164,148,0,162,152,163,169,153],
[160,166,181,179,0,179,174,172,170],
[160,166,172,189,162,0,164,179,168],
[180,166,172,178,167,177,0,190,166],
[163,174,160,172,169,162,151,0,177],
[165,171,179,188,171,173,175,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,158,147,153,155,144,150,168],
[205,0,170,166,170,177,166,181,202],
[183,171,0,186,177,168,167,187,184],
[194,175,155,0,184,187,175,177,176],
[188,171,164,157,0,177,171,161,162],
[186,164,173,154,164,0,157,149,162],
[197,175,174,166,170,184,0,190,155],
[191,160,154,164,180,192,151,0,182],
[173,139,157,165,179,179,186,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,180,184,172,171,181,168,169],
[157,0,175,173,166,160,157,160,153],
[161,166,0,167,164,168,179,156,164],
[157,168,174,0,155,145,175,148,148],
[169,175,177,186,0,173,181,179,164],
[170,181,173,196,168,0,193,166,177],
[160,184,162,166,160,148,0,161,152],
[173,181,185,193,162,175,180,0,171],
[172,188,177,193,177,164,189,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,182,161,166,167,167,164],
[172,0,173,185,164,184,169,172,160],
[168,168,0,178,168,165,160,166,161],
[159,156,163,0,168,164,156,157,159],
[180,177,173,173,0,171,173,157,163],
[175,157,176,177,170,0,159,171,162],
[174,172,181,185,168,182,0,169,162],
[174,169,175,184,184,170,172,0,174],
[177,181,180,182,178,179,179,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,183,178,182,179,169,179],
[170,0,191,160,164,179,163,167,165],
[174,150,0,155,177,167,168,159,157],
[158,181,186,0,185,173,174,172,173],
[163,177,164,156,0,179,172,173,164],
[159,162,174,168,162,0,169,165,169],
[162,178,173,167,169,172,0,165,160],
[172,174,182,169,168,176,176,0,176],
[162,176,184,168,177,172,181,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,187,184,166,180,191,176,171],
[165,0,173,195,153,174,203,145,181],
[154,168,0,174,168,180,187,154,166],
[157,146,167,0,159,161,181,138,158],
[175,188,173,182,0,186,206,172,167],
[161,167,161,180,155,0,170,147,169],
[150,138,154,160,135,171,0,145,153],
[165,196,187,203,169,194,196,0,184],
[170,160,175,183,174,172,188,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,156,176,168,160,166,171,178],
[187,0,180,168,180,176,170,153,177],
[185,161,0,181,179,178,182,181,199],
[165,173,160,0,161,168,185,153,190],
[173,161,162,180,0,176,175,173,179],
[181,165,163,173,165,0,177,159,181],
[175,171,159,156,166,164,0,174,182],
[170,188,160,188,168,182,167,0,176],
[163,164,142,151,162,160,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,174,167,190,182,175,182],
[171,0,168,165,185,188,170,154,160],
[173,173,0,173,177,190,175,157,172],
[167,176,168,0,185,186,169,145,156],
[174,156,164,156,0,185,183,170,167],
[151,153,151,155,156,0,164,131,150],
[159,171,166,172,158,177,0,152,148],
[166,187,184,196,171,210,189,0,170],
[159,181,169,185,174,191,193,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,153,154,152,151,147,147],
[182,0,148,161,164,142,150,146,146],
[181,193,0,168,180,161,169,166,175],
[188,180,173,0,176,175,173,163,164],
[187,177,161,165,0,159,150,146,156],
[189,199,180,166,182,0,171,164,177],
[190,191,172,168,191,170,0,173,175],
[194,195,175,178,195,177,168,0,172],
[194,195,166,177,185,164,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,135,183,123,135,176,167,195],
[134,0,176,188,127,127,191,174,183],
[206,165,0,187,176,156,200,185,253],
[158,153,154,0,161,171,176,139,217],
[218,214,165,180,0,205,219,194,233],
[206,214,185,170,136,0,177,171,214],
[165,150,141,165,122,164,0,163,161],
[174,167,156,202,147,170,178,0,234],
[146,158,88,124,108,127,180,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,205,231,206,176,203,165,182],
[110,0,154,153,193,161,152,86,136],
[136,187,0,203,200,152,189,172,192],
[110,188,138,0,163,137,147,137,138],
[135,148,141,178,0,135,125,96,126],
[165,180,189,204,206,0,191,149,152],
[138,189,152,194,216,150,0,125,203],
[176,255,169,204,245,192,216,0,217],
[159,205,149,203,215,189,138,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,147,160,162,149,164,170,182],
[179,0,154,142,168,162,150,144,174],
[194,187,0,181,177,177,162,190,180],
[181,199,160,0,181,175,176,183,181],
[179,173,164,160,0,166,169,172,184],
[192,179,164,166,175,0,163,188,178],
[177,191,179,165,172,178,0,178,200],
[171,197,151,158,169,153,163,0,178],
[159,167,161,160,157,163,141,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,168,145,171,159,207,184,183],
[128,0,128,146,142,150,165,160,153],
[173,213,0,163,157,162,200,177,177],
[196,195,178,0,170,189,188,190,198],
[170,199,184,171,0,170,180,193,179],
[182,191,179,152,171,0,183,162,186],
[134,176,141,153,161,158,0,174,169],
[157,181,164,151,148,179,167,0,170],
[158,188,164,143,162,155,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,166,162,163,154,158,157],
[158,0,200,173,142,168,158,149,140],
[171,141,0,137,129,165,143,146,137],
[175,168,204,0,151,167,164,144,153],
[179,199,212,190,0,196,166,181,167],
[178,173,176,174,145,0,152,154,137],
[187,183,198,177,175,189,0,167,171],
[183,192,195,197,160,187,174,0,176],
[184,201,204,188,174,204,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,187,181,172,181,168,163,180],
[161,0,180,183,185,191,179,174,169],
[154,161,0,170,155,182,167,184,169],
[160,158,171,0,166,169,166,169,155],
[169,156,186,175,0,176,172,175,170],
[160,150,159,172,165,0,152,152,161],
[173,162,174,175,169,189,0,173,166],
[178,167,157,172,166,189,168,0,163],
[161,172,172,186,171,180,175,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,167,186,207,196,190,188,168],
[149,0,181,140,178,167,153,152,143],
[174,160,0,141,183,187,215,176,167],
[155,201,200,0,200,197,202,182,176],
[134,163,158,141,0,167,163,181,163],
[145,174,154,144,174,0,183,180,161],
[151,188,126,139,178,158,0,165,160],
[153,189,165,159,160,161,176,0,156],
[173,198,174,165,178,180,181,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,165,181,192,168,174,153,178],
[196,0,168,182,177,164,152,163,168],
[176,173,0,171,211,186,164,159,175],
[160,159,170,0,190,169,160,151,178],
[149,164,130,151,0,173,151,163,141],
[173,177,155,172,168,0,152,154,159],
[167,189,177,181,190,189,0,173,169],
[188,178,182,190,178,187,168,0,163],
[163,173,166,163,200,182,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,185,189,161,169,149,140,162],
[151,0,161,147,147,186,141,131,143],
[156,180,0,155,170,148,155,125,154],
[152,194,186,0,185,155,132,142,154],
[180,194,171,156,0,148,142,136,160],
[172,155,193,186,193,0,157,147,174],
[192,200,186,209,199,184,0,171,170],
[201,210,216,199,205,194,170,0,221],
[179,198,187,187,181,167,171,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,192,190,166,169,176,169,171],
[162,0,174,165,182,171,171,153,148],
[149,167,0,165,176,161,172,159,151],
[151,176,176,0,159,177,165,162,155],
[175,159,165,182,0,184,178,170,164],
[172,170,180,164,157,0,154,176,168],
[165,170,169,176,163,187,0,150,151],
[172,188,182,179,171,165,191,0,162],
[170,193,190,186,177,173,190,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,177,150,136,172,155,152,148],
[180,0,173,158,153,181,160,172,158],
[164,168,0,152,154,152,164,148,151],
[191,183,189,0,173,188,165,169,162],
[205,188,187,168,0,170,190,175,160],
[169,160,189,153,171,0,174,159,167],
[186,181,177,176,151,167,0,179,149],
[189,169,193,172,166,182,162,0,172],
[193,183,190,179,181,174,192,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,179,168,169,181,186,174,192],
[168,0,183,174,173,159,183,177,196],
[162,158,0,159,155,168,167,158,179],
[173,167,182,0,159,169,176,168,176],
[172,168,186,182,0,185,186,179,196],
[160,182,173,172,156,0,181,175,188],
[155,158,174,165,155,160,0,173,183],
[167,164,183,173,162,166,168,0,188],
[149,145,162,165,145,153,158,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,134,211,129,147,147,146,165],
[192,0,146,224,193,209,163,192,245],
[207,195,0,191,208,159,130,158,209],
[130,117,150,0,164,164,100,114,164],
[212,148,133,177,0,211,178,127,164],
[194,132,182,177,130,0,114,96,165],
[194,178,211,241,163,227,0,161,197],
[195,149,183,227,214,245,180,0,200],
[176,96,132,177,177,176,144,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,176,167,173,173,169,156,156],
[162,0,179,159,158,169,179,163,169],
[165,162,0,183,173,187,172,160,178],
[174,182,158,0,165,166,164,173,173],
[168,183,168,176,0,192,186,164,182],
[168,172,154,175,149,0,161,152,157],
[172,162,169,177,155,180,0,144,143],
[185,178,181,168,177,189,197,0,188],
[185,172,163,168,159,184,198,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,191,166,171,168,178,167,161],
[189,0,193,185,199,201,180,212,169],
[150,148,0,166,200,185,158,178,188],
[175,156,175,0,172,201,177,193,181],
[170,142,141,169,0,184,162,197,157],
[173,140,156,140,157,0,147,169,158],
[163,161,183,164,179,194,0,202,181],
[174,129,163,148,144,172,139,0,159],
[180,172,153,160,184,183,160,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,197,166,158,157,169,156,172],
[180,0,199,169,175,158,187,180,160],
[144,142,0,124,119,127,161,124,138],
[175,172,217,0,154,181,181,161,189],
[183,166,222,187,0,179,200,176,194],
[184,183,214,160,162,0,190,176,179],
[172,154,180,160,141,151,0,158,160],
[185,161,217,180,165,165,183,0,171],
[169,181,203,152,147,162,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,155,196,166,181,194,176],
[165,0,169,161,172,170,171,165,167],
[168,172,0,159,177,174,165,178,167],
[186,180,182,0,181,183,156,173,183],
[145,169,164,160,0,146,158,167,156],
[175,171,167,158,195,0,163,187,174],
[160,170,176,185,183,178,0,173,187],
[147,176,163,168,174,154,168,0,165],
[165,174,174,158,185,167,154,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,165,142,112,184,192,147,144],
[151,0,167,170,149,209,196,152,194],
[176,174,0,155,163,205,219,180,156],
[199,171,186,0,153,188,205,164,166],
[229,192,178,188,0,198,165,165,152],
[157,132,136,153,143,0,163,155,153],
[149,145,122,136,176,178,0,116,161],
[194,189,161,177,176,186,225,0,176],
[197,147,185,175,189,188,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,174,164,140,144,122,144,138],
[190,0,144,156,163,156,156,159,169],
[167,197,0,172,159,157,132,193,147],
[177,185,169,0,189,160,151,193,156],
[201,178,182,152,0,160,138,159,152],
[197,185,184,181,181,0,184,194,164],
[219,185,209,190,203,157,0,208,180],
[197,182,148,148,182,147,133,0,150],
[203,172,194,185,189,177,161,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,172,165,166,183,161,170,171],
[174,0,168,157,174,173,182,161,168],
[169,173,0,172,188,167,177,170,170],
[176,184,169,0,197,189,182,164,171],
[175,167,153,144,0,176,173,152,170],
[158,168,174,152,165,0,155,141,158],
[180,159,164,159,168,186,0,162,156],
[171,180,171,177,189,200,179,0,167],
[170,173,171,170,171,183,185,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,207,181,171,207,179,210,169],
[187,0,181,194,151,194,171,223,156],
[134,160,0,150,164,179,180,166,153],
[160,147,191,0,151,192,176,197,173],
[170,190,177,190,0,207,183,211,194],
[134,147,162,149,134,0,181,164,156],
[162,170,161,165,158,160,0,178,137],
[131,118,175,144,130,177,163,0,160],
[172,185,188,168,147,185,204,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,157,170,145,156,134,187,172],
[179,0,163,150,173,159,156,179,145],
[184,178,0,157,172,160,174,172,143],
[171,191,184,0,167,166,167,195,151],
[196,168,169,174,0,151,154,185,156],
[185,182,181,175,190,0,167,180,167],
[207,185,167,174,187,174,0,231,163],
[154,162,169,146,156,161,110,0,149],
[169,196,198,190,185,174,178,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,176,166,173,182,174,165],
[169,0,185,191,160,172,169,164,179],
[169,156,0,166,155,167,168,170,162],
[165,150,175,0,166,183,166,171,162],
[175,181,186,175,0,172,168,179,157],
[168,169,174,158,169,0,153,161,156],
[159,172,173,175,173,188,0,174,168],
[167,177,171,170,162,180,167,0,166],
[176,162,179,179,184,185,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,188,183,151,185,128,190,279],
[62,0,124,121,90,154,126,157,218],
[153,217,0,213,182,121,95,219,310],
[158,220,128,0,125,156,159,252,251],
[190,251,159,216,0,249,190,221,249],
[156,187,220,185,92,0,156,220,248],
[213,215,246,182,151,185,0,188,246],
[151,184,122,89,120,121,153,0,215],
[62,123,31,90,92,93,95,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,165,163,150,146,165,163,175],
[184,0,182,172,167,179,162,157,172],
[176,159,0,166,169,170,171,171,182],
[178,169,175,0,166,178,181,160,189],
[191,174,172,175,0,180,195,166,187],
[195,162,171,163,161,0,172,164,170],
[176,179,170,160,146,169,0,153,187],
[178,184,170,181,175,177,188,0,190],
[166,169,159,152,154,171,154,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,172,172,182,172,178,177],
[179,0,184,184,169,177,177,168,165],
[176,157,0,159,177,168,170,170,162],
[169,157,182,0,165,178,163,163,160],
[169,172,164,176,0,172,167,167,161],
[159,164,173,163,169,0,162,168,164],
[169,164,171,178,174,179,0,174,170],
[163,173,171,178,174,173,167,0,157],
[164,176,179,181,180,177,171,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,199,187,173,175,166,182,186],
[167,0,192,195,151,169,173,179,186],
[142,149,0,174,143,156,158,167,180],
[154,146,167,0,170,152,153,166,185],
[168,190,198,171,0,167,154,158,183],
[166,172,185,189,174,0,178,156,208],
[175,168,183,188,187,163,0,176,186],
[159,162,174,175,183,185,165,0,191],
[155,155,161,156,158,133,155,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,172,144,172,166,178,173,154],
[187,0,158,171,158,178,180,188,145],
[169,183,0,144,167,164,182,191,155],
[197,170,197,0,177,192,186,197,181],
[169,183,174,164,0,174,179,177,156],
[175,163,177,149,167,0,166,177,157],
[163,161,159,155,162,175,0,175,157],
[168,153,150,144,164,164,166,0,160],
[187,196,186,160,185,184,184,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,178,144,186,168,143,167,182],
[162,0,161,166,191,174,145,152,203],
[163,180,0,160,196,185,149,182,203],
[197,175,181,0,191,192,170,178,196],
[155,150,145,150,0,147,131,156,167],
[173,167,156,149,194,0,143,142,185],
[198,196,192,171,210,198,0,168,209],
[174,189,159,163,185,199,173,0,196],
[159,138,138,145,174,156,132,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,143,162,160,154,149,152,163],
[174,0,173,172,177,160,175,157,181],
[198,168,0,171,190,178,177,163,176],
[179,169,170,0,184,167,172,172,182],
[181,164,151,157,0,158,146,156,178],
[187,181,163,174,183,0,180,176,186],
[192,166,164,169,195,161,0,160,182],
[189,184,178,169,185,165,181,0,183],
[178,160,165,159,163,155,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,190,166,167,160,162,165,188],
[175,0,184,167,175,161,167,158,176],
[151,157,0,149,157,144,154,161,151],
[175,174,192,0,164,166,164,178,173],
[174,166,184,177,0,167,156,167,177],
[181,180,197,175,174,0,169,186,190],
[179,174,187,177,185,172,0,169,177],
[176,183,180,163,174,155,172,0,188],
[153,165,190,168,164,151,164,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,166,146,164,169,156,162],
[169,0,161,177,166,167,174,166,159],
[185,180,0,182,174,184,180,158,182],
[175,164,159,0,154,159,168,162,162],
[195,175,167,187,0,185,182,178,181],
[177,174,157,182,156,0,192,174,171],
[172,167,161,173,159,149,0,180,173],
[185,175,183,179,163,167,161,0,180],
[179,182,159,179,160,170,168,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,181,177,161,183,159,172],
[173,0,182,198,193,167,172,179,176],
[181,159,0,180,186,171,175,158,165],
[160,143,161,0,158,159,160,158,151],
[164,148,155,183,0,162,160,158,153],
[180,174,170,182,179,0,176,163,156],
[158,169,166,181,181,165,0,163,178],
[182,162,183,183,183,178,178,0,171],
[169,165,176,190,188,185,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,131,154,166,184,157,181,177],
[165,0,141,161,170,173,168,161,177],
[210,200,0,173,198,180,194,167,177],
[187,180,168,0,172,173,182,181,171],
[175,171,143,169,0,168,174,171,173],
[157,168,161,168,173,0,173,167,169],
[184,173,147,159,167,168,0,171,163],
[160,180,174,160,170,174,170,0,164],
[164,164,164,170,168,172,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,189,202,221,178,177,197,153],
[174,0,178,201,193,183,159,157,182],
[152,163,0,180,180,153,158,159,157],
[139,140,161,0,157,130,161,187,135],
[120,148,161,184,0,122,164,143,163],
[163,158,188,211,219,0,178,180,177],
[164,182,183,180,177,163,0,160,156],
[144,184,182,154,198,161,181,0,165],
[188,159,184,206,178,164,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,171,155,222,222,188,154,221],
[118,0,186,103,171,204,187,104,203],
[170,155,0,190,191,205,188,120,186],
[186,238,151,0,187,205,204,119,203],
[119,170,150,154,0,220,152,102,135],
[119,137,136,136,121,0,171,104,187],
[153,154,153,137,189,170,0,153,152],
[187,237,221,222,239,237,188,0,168],
[120,138,155,138,206,154,189,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,168,137,170,155,159,152],
[177,0,174,165,157,165,160,159,152],
[178,167,0,193,142,162,176,165,166],
[173,176,148,0,152,163,176,191,161],
[204,184,199,189,0,171,192,169,176],
[171,176,179,178,170,0,169,178,175],
[186,181,165,165,149,172,0,184,168],
[182,182,176,150,172,163,157,0,146],
[189,189,175,180,165,166,173,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,182,180,176,186,166,195],
[163,0,173,156,170,175,165,170,178],
[156,168,0,178,171,171,168,167,184],
[159,185,163,0,181,166,178,182,191],
[161,171,170,160,0,168,165,173,193],
[165,166,170,175,173,0,169,170,174],
[155,176,173,163,176,172,0,160,163],
[175,171,174,159,168,171,181,0,178],
[146,163,157,150,148,167,178,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,205,238,205,238,171,202,206],
[171,0,168,272,170,236,104,167,136],
[136,173,0,238,170,237,138,167,174],
[103,69,103,0,170,169,138,204,138],
[136,171,171,171,0,205,139,170,241],
[103,105,104,172,136,0,105,170,172],
[170,237,203,203,202,236,0,235,238],
[139,174,174,137,171,171,106,0,174],
[135,205,167,203,100,169,103,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,165,153,180,155,173,160,146],
[192,0,189,178,206,169,181,179,185],
[176,152,0,168,176,156,168,172,174],
[188,163,173,0,186,171,180,191,185],
[161,135,165,155,0,141,157,164,158],
[186,172,185,170,200,0,181,177,182],
[168,160,173,161,184,160,0,167,188],
[181,162,169,150,177,164,174,0,158],
[195,156,167,156,183,159,153,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,148,130,172,173,184,141,157],
[191,0,157,160,174,155,184,164,168],
[193,184,0,177,174,176,159,160,166],
[211,181,164,0,190,169,175,177,179],
[169,167,167,151,0,176,154,145,191],
[168,186,165,172,165,0,172,143,174],
[157,157,182,166,187,169,0,190,169],
[200,177,181,164,196,198,151,0,200],
[184,173,175,162,150,167,172,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,167,154,162,184,169,152],
[168,0,178,156,164,186,157,156,162],
[169,163,0,160,155,181,182,172,165],
[174,185,181,0,171,179,157,155,162],
[187,177,186,170,0,186,174,188,173],
[179,155,160,162,155,0,164,184,162],
[157,184,159,184,167,177,0,171,151],
[172,185,169,186,153,157,170,0,161],
[189,179,176,179,168,179,190,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,174,191,171,164,168,140,167],
[181,0,158,176,168,144,177,178,154],
[167,183,0,190,170,175,170,173,175],
[150,165,151,0,168,154,153,156,161],
[170,173,171,173,0,159,168,163,152],
[177,197,166,187,182,0,177,180,162],
[173,164,171,188,173,164,0,153,161],
[201,163,168,185,178,161,188,0,174],
[174,187,166,180,189,179,180,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,150,185,156,177,173,145,192],
[173,0,187,212,162,206,218,154,205],
[191,154,0,175,181,187,168,166,202],
[156,129,166,0,102,174,165,126,164],
[185,179,160,239,0,205,205,188,202],
[164,135,154,167,136,0,150,133,174],
[168,123,173,176,136,191,0,151,183],
[196,187,175,215,153,208,190,0,200],
[149,136,139,177,139,167,158,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,166,174,178,185,155,183],
[162,0,166,158,178,162,176,172,178],
[168,175,0,172,177,179,176,175,187],
[175,183,169,0,187,173,180,185,184],
[167,163,164,154,0,159,177,170,180],
[163,179,162,168,182,0,185,154,184],
[156,165,165,161,164,156,0,165,168],
[186,169,166,156,171,187,176,0,191],
[158,163,154,157,161,157,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,167,130,176,179,181,171,142],
[181,0,188,148,146,183,174,175,133],
[174,153,0,136,203,175,178,167,153],
[211,193,205,0,181,167,196,217,173],
[165,195,138,160,0,165,168,157,142],
[162,158,166,174,176,0,166,181,147],
[160,167,163,145,173,175,0,179,152],
[170,166,174,124,184,160,162,0,161],
[199,208,188,168,199,194,189,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,167,178,175,169,170,173],
[174,0,173,150,160,164,155,164,156],
[173,168,0,169,175,167,164,173,167],
[174,191,172,0,184,181,169,173,179],
[163,181,166,157,0,170,170,187,167],
[166,177,174,160,171,0,166,170,166],
[172,186,177,172,171,175,0,173,165],
[171,177,168,168,154,171,168,0,177],
[168,185,174,162,174,175,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,166,166,162,149,163,166,157],
[187,0,177,181,170,169,193,180,176],
[175,164,0,157,157,147,186,175,159],
[175,160,184,0,171,173,185,193,170],
[179,171,184,170,0,162,172,184,174],
[192,172,194,168,179,0,189,192,193],
[178,148,155,156,169,152,0,170,167],
[175,161,166,148,157,149,171,0,178],
[184,165,182,171,167,148,174,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,190,181,157,188,167,160],
[165,0,192,195,187,154,199,194,171],
[171,149,0,174,154,146,193,170,173],
[151,146,167,0,162,153,181,172,169],
[160,154,187,179,0,167,191,161,172],
[184,187,195,188,174,0,187,169,176],
[153,142,148,160,150,154,0,153,161],
[174,147,171,169,180,172,188,0,184],
[181,170,168,172,169,165,180,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,195,178,188,176,175,177],
[174,0,207,172,167,192,161,153,185],
[163,134,0,159,144,155,144,157,153],
[146,169,182,0,160,172,146,163,157],
[163,174,197,181,0,182,148,160,188],
[153,149,186,169,159,0,147,160,165],
[165,180,197,195,193,194,0,195,191],
[166,188,184,178,181,181,146,0,162],
[164,156,188,184,153,176,150,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,163,176,158,172,187,183,156],
[169,0,160,163,166,169,166,175,171],
[178,181,0,167,177,182,179,182,166],
[165,178,174,0,177,186,181,194,166],
[183,175,164,164,0,186,178,186,164],
[169,172,159,155,155,0,177,185,160],
[154,175,162,160,163,164,0,183,152],
[158,166,159,147,155,156,158,0,142],
[185,170,175,175,177,181,189,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,160,183,175,176,174,172,161],
[157,0,147,160,182,186,163,163,169],
[181,194,0,201,191,192,149,189,197],
[158,181,140,0,176,169,161,160,167],
[166,159,150,165,0,189,159,198,169],
[165,155,149,172,152,0,183,177,168],
[167,178,192,180,182,158,0,189,181],
[169,178,152,181,143,164,152,0,163],
[180,172,144,174,172,173,160,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,179,178,182,176,168,166,176],
[170,0,169,169,173,172,169,165,169],
[162,172,0,158,180,168,166,164,162],
[163,172,183,0,169,179,174,169,175],
[159,168,161,172,0,149,170,161,171],
[165,169,173,162,192,0,166,173,175],
[173,172,175,167,171,175,0,167,177],
[175,176,177,172,180,168,174,0,176],
[165,172,179,166,170,166,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,171,177,161,157,178,164],
[171,0,149,181,177,159,151,178,182],
[167,192,0,178,204,171,174,184,192],
[170,160,163,0,169,165,158,159,177],
[164,164,137,172,0,177,132,167,153],
[180,182,170,176,164,0,183,188,188],
[184,190,167,183,209,158,0,180,184],
[163,163,157,182,174,153,161,0,178],
[177,159,149,164,188,153,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,176,161,170,178,158,185],
[181,0,173,177,167,175,181,169,178],
[183,168,0,183,178,171,177,168,183],
[165,164,158,0,170,158,172,152,164],
[180,174,163,171,0,178,181,162,177],
[171,166,170,183,163,0,177,177,171],
[163,160,164,169,160,164,0,161,165],
[183,172,173,189,179,164,180,0,185],
[156,163,158,177,164,170,176,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,175,145,144,161,159,156],
[164,0,184,185,163,152,163,183,170],
[177,157,0,171,163,141,163,163,157],
[166,156,170,0,148,142,156,173,160],
[196,178,178,193,0,171,156,167,184],
[197,189,200,199,170,0,188,180,177],
[180,178,178,185,185,153,0,177,170],
[182,158,178,168,174,161,164,0,168],
[185,171,184,181,157,164,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,165,171,181,177,192,179],
[159,0,144,157,131,180,161,175,163],
[172,197,0,147,150,176,166,178,163],
[176,184,194,0,168,204,176,201,185],
[170,210,191,173,0,201,182,191,195],
[160,161,165,137,140,0,152,173,163],
[164,180,175,165,159,189,0,186,183],
[149,166,163,140,150,168,155,0,176],
[162,178,178,156,146,178,158,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,131,158,141,138,180,134,139],
[163,0,154,157,159,137,184,147,114],
[210,187,0,172,156,154,183,166,142],
[183,184,169,0,144,139,174,145,143],
[200,182,185,197,0,175,196,173,168],
[203,204,187,202,166,0,193,183,156],
[161,157,158,167,145,148,0,158,145],
[207,194,175,196,168,158,183,0,179],
[202,227,199,198,173,185,196,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,72,146,122,120,192,146,120],
[199,0,123,173,148,245,220,148,148],
[269,218,0,170,170,218,194,74,169],
[195,168,171,0,170,194,194,170,168],
[219,193,171,171,0,219,143,97,195],
[221,96,123,147,122,0,170,122,122],
[149,121,147,147,198,171,0,172,170],
[195,193,267,171,244,219,169,0,196],
[221,193,172,173,146,219,171,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,200,168,179,196,202,213,189],
[160,0,188,163,174,175,198,205,173],
[141,153,0,162,182,175,173,191,179],
[173,178,179,0,183,165,177,200,186],
[162,167,159,158,0,168,185,191,189],
[145,166,166,176,173,0,173,167,163],
[139,143,168,164,156,168,0,179,164],
[128,136,150,141,150,174,162,0,171],
[152,168,162,155,152,178,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,166,175,167,163,161,175],
[163,0,163,183,178,172,172,174,170],
[174,178,0,176,177,187,176,169,170],
[175,158,165,0,179,158,156,163,176],
[166,163,164,162,0,172,163,166,188],
[174,169,154,183,169,0,150,163,183],
[178,169,165,185,178,191,0,171,189],
[180,167,172,178,175,178,170,0,171],
[166,171,171,165,153,158,152,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,164,169,157,166,150,158],
[167,0,167,157,163,161,158,173,159],
[178,174,0,178,170,176,172,156,150],
[177,184,163,0,186,173,187,179,162],
[172,178,171,155,0,173,164,161,162],
[184,180,165,168,168,0,162,175,171],
[175,183,169,154,177,179,0,188,163],
[191,168,185,162,180,166,153,0,154],
[183,182,191,179,179,170,178,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,160,174,172,182,197,170,187],
[164,0,146,173,173,183,169,174,184],
[181,195,0,179,192,169,203,185,187],
[167,168,162,0,169,189,172,169,188],
[169,168,149,172,0,167,181,165,168],
[159,158,172,152,174,0,181,169,183],
[144,172,138,169,160,160,0,166,167],
[171,167,156,172,176,172,175,0,174],
[154,157,154,153,173,158,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,169,186,188,180,182,213,202],
[148,0,161,154,150,162,154,191,179],
[172,180,0,168,164,182,175,194,181],
[155,187,173,0,186,181,176,207,195],
[153,191,177,155,0,165,179,196,187],
[161,179,159,160,176,0,151,211,178],
[159,187,166,165,162,190,0,201,168],
[128,150,147,134,145,130,140,0,162],
[139,162,160,146,154,163,173,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,156,166,153,165,173,163,170],
[173,0,178,174,158,170,174,168,169],
[185,163,0,165,162,171,177,166,175],
[175,167,176,0,170,171,169,184,177],
[188,183,179,171,0,183,177,169,185],
[176,171,170,170,158,0,175,179,187],
[168,167,164,172,164,166,0,172,179],
[178,173,175,157,172,162,169,0,174],
[171,172,166,164,156,154,162,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,164,152,165,148,161,161,146],
[192,0,182,176,176,173,171,178,169],
[177,159,0,157,166,158,165,164,144],
[189,165,184,0,180,158,184,187,177],
[176,165,175,161,0,157,169,188,160],
[193,168,183,183,184,0,187,182,181],
[180,170,176,157,172,154,0,186,164],
[180,163,177,154,153,159,155,0,161],
[195,172,197,164,181,160,177,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,184,172,187,171,178,168],
[161,0,156,160,159,176,156,162,168],
[158,185,0,168,156,186,185,186,166],
[157,181,173,0,152,179,165,164,173],
[169,182,185,189,0,186,180,186,184],
[154,165,155,162,155,0,152,162,163],
[170,185,156,176,161,189,0,183,176],
[163,179,155,177,155,179,158,0,159],
[173,173,175,168,157,178,165,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,159,162,183,174,177,170],
[176,0,180,165,171,178,183,174,167],
[169,161,0,154,147,172,157,157,150],
[182,176,187,0,163,179,164,181,166],
[179,170,194,178,0,181,172,195,175],
[158,163,169,162,160,0,158,169,160],
[167,158,184,177,169,183,0,188,165],
[164,167,184,160,146,172,153,0,162],
[171,174,191,175,166,181,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,164,174,184,172,170,189,187],
[169,0,165,178,184,171,167,176,184],
[177,176,0,186,177,165,172,189,184],
[167,163,155,0,163,179,171,193,196],
[157,157,164,178,0,170,170,179,191],
[169,170,176,162,171,0,172,182,198],
[171,174,169,170,171,169,0,169,182],
[152,165,152,148,162,159,172,0,171],
[154,157,157,145,150,143,159,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,176,180,162,153,168,158],
[174,0,162,186,179,146,169,184,162],
[185,179,0,191,195,175,158,176,168],
[165,155,150,0,177,153,160,169,156],
[161,162,146,164,0,150,160,162,145],
[179,195,166,188,191,0,184,178,176],
[188,172,183,181,181,157,0,187,174],
[173,157,165,172,179,163,154,0,156],
[183,179,173,185,196,165,167,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,161,181,173,179,173,176],
[172,0,173,167,159,174,167,162,188],
[168,168,0,162,178,168,173,168,187],
[180,174,179,0,164,179,156,171,179],
[160,182,163,177,0,169,167,164,180],
[168,167,173,162,172,0,178,175,173],
[162,174,168,185,174,163,0,170,176],
[168,179,173,170,177,166,171,0,182],
[165,153,154,162,161,168,165,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,186,181,163,175,178,189,181],
[152,0,173,167,153,168,151,164,173],
[155,168,0,150,152,181,163,178,175],
[160,174,191,0,170,185,175,172,183],
[178,188,189,171,0,185,174,165,180],
[166,173,160,156,156,0,150,171,160],
[163,190,178,166,167,191,0,176,190],
[152,177,163,169,176,170,165,0,178],
[160,168,166,158,161,181,151,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,152,154,175,124,125,159,199],
[204,0,163,176,198,162,166,161,212],
[189,178,0,167,191,166,154,151,187],
[187,165,174,0,151,122,150,110,199],
[166,143,150,190,0,112,114,126,190],
[217,179,175,219,229,0,178,163,200],
[216,175,187,191,227,163,0,198,208],
[182,180,190,231,215,178,143,0,262],
[142,129,154,142,151,141,133,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,183,203,175,184,169,162],
[167,0,165,174,179,171,178,168,172],
[169,176,0,182,188,191,178,178,183],
[158,167,159,0,194,175,184,165,153],
[138,162,153,147,0,162,155,157,149],
[166,170,150,166,179,0,162,178,166],
[157,163,163,157,186,179,0,172,163],
[172,173,163,176,184,163,169,0,153],
[179,169,158,188,192,175,178,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,163,177,168,176,165,172],
[167,0,174,158,163,169,175,159,174],
[171,167,0,166,172,180,173,162,173],
[178,183,175,0,190,181,183,186,162],
[164,178,169,151,0,174,184,158,167],
[173,172,161,160,167,0,186,163,160],
[165,166,168,158,157,155,0,143,165],
[176,182,179,155,183,178,198,0,182],
[169,167,168,179,174,181,176,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,200,192,209,204,167,191,193],
[163,0,161,169,186,180,156,171,162],
[141,180,0,186,193,176,164,195,198],
[149,172,155,0,180,161,141,179,171],
[132,155,148,161,0,164,161,168,146],
[137,161,165,180,177,0,156,166,151],
[174,185,177,200,180,185,0,182,162],
[150,170,146,162,173,175,159,0,172],
[148,179,143,170,195,190,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,163,168,166,164,170,164],
[165,0,174,188,170,180,188,180,190],
[177,167,0,181,174,183,180,189,175],
[178,153,160,0,171,175,164,173,157],
[173,171,167,170,0,163,172,175,159],
[175,161,158,166,178,0,165,177,160],
[177,153,161,177,169,176,0,175,175],
[171,161,152,168,166,164,166,0,178],
[177,151,166,184,182,181,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,153,115,151,116,114,114,115],
[265,0,149,226,188,77,149,149,112],
[188,192,0,188,112,116,111,227,111],
[226,115,153,0,150,153,153,148,149],
[190,153,229,191,0,191,190,191,153],
[225,264,225,188,150,0,225,186,187],
[227,192,230,188,151,116,0,188,150],
[227,192,114,193,150,155,153,0,112],
[226,229,230,192,188,154,191,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,167,109,113,113,149,150,129],
[173,0,169,190,171,153,130,210,191],
[174,172,0,153,152,154,131,211,152],
[232,151,188,0,210,152,154,230,153],
[228,170,189,131,0,130,149,187,150],
[228,188,187,189,211,0,188,230,168],
[192,211,210,187,192,153,0,190,152],
[191,131,130,111,154,111,151,0,94],
[212,150,189,188,191,173,189,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,158,159,172,171,188,160,171],
[169,0,178,171,183,176,189,175,186],
[183,163,0,173,183,174,193,164,169],
[182,170,168,0,193,182,190,184,182],
[169,158,158,148,0,174,175,164,167],
[170,165,167,159,167,0,182,148,183],
[153,152,148,151,166,159,0,155,166],
[181,166,177,157,177,193,186,0,175],
[170,155,172,159,174,158,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,151,134,150,141,155,159,150],
[206,0,157,146,147,192,193,186,159],
[190,184,0,160,180,186,199,193,173],
[207,195,181,0,183,186,183,164,172],
[191,194,161,158,0,195,164,186,173],
[200,149,155,155,146,0,168,170,158],
[186,148,142,158,177,173,0,183,168],
[182,155,148,177,155,171,158,0,169],
[191,182,168,169,168,183,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,182,162,175,168,181,165],
[173,0,170,170,178,171,167,182,168],
[175,171,0,164,176,168,162,165,169],
[159,171,177,0,174,162,159,172,172],
[179,163,165,167,0,174,179,173,178],
[166,170,173,179,167,0,168,173,165],
[173,174,179,182,162,173,0,179,164],
[160,159,176,169,168,168,162,0,167],
[176,173,172,169,163,176,177,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,152,186,142,114,209,156,217],
[177,0,175,188,141,144,199,168,167],
[189,166,0,191,143,138,202,190,199],
[155,153,150,0,130,134,146,156,184],
[199,200,198,211,0,188,223,167,242],
[227,197,203,207,153,0,227,238,185],
[132,142,139,195,118,114,0,134,164],
[185,173,151,185,174,103,207,0,173],
[124,174,142,157,99,156,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,160,184,187,167,199,160,190],
[167,0,156,172,165,157,178,154,180],
[181,185,0,195,178,185,194,170,184],
[157,169,146,0,168,169,182,151,185],
[154,176,163,173,0,169,167,167,186],
[174,184,156,172,172,0,181,171,179],
[142,163,147,159,174,160,0,149,169],
[181,187,171,190,174,170,192,0,181],
[151,161,157,156,155,162,172,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,155,168,169,172,183,161,179],
[173,0,155,173,181,175,184,173,166],
[186,186,0,164,170,172,197,181,177],
[173,168,177,0,183,179,184,177,172],
[172,160,171,158,0,178,190,181,163],
[169,166,169,162,163,0,185,163,156],
[158,157,144,157,151,156,0,157,150],
[180,168,160,164,160,178,184,0,158],
[162,175,164,169,178,185,191,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,185,169,165,166,172,170,169],
[169,0,192,165,168,159,180,168,166],
[156,149,0,150,157,157,165,158,151],
[172,176,191,0,176,175,179,172,168],
[176,173,184,165,0,158,167,171,168],
[175,182,184,166,183,0,179,163,182],
[169,161,176,162,174,162,0,163,170],
[171,173,183,169,170,178,178,0,176],
[172,175,190,173,173,159,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,176,164,157,162,174,174],
[167,0,169,180,166,166,157,175,166],
[177,172,0,175,170,184,162,179,178],
[165,161,166,0,158,155,151,145,168],
[177,175,171,183,0,188,171,184,164],
[184,175,157,186,153,0,164,185,177],
[179,184,179,190,170,177,0,196,176],
[167,166,162,196,157,156,145,0,172],
[167,175,163,173,177,164,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,181,167,175,181,192,169],
[167,0,170,178,173,175,185,166,169],
[174,171,0,169,176,191,184,181,184],
[160,163,172,0,171,174,175,175,162],
[174,168,165,170,0,170,181,183,172],
[166,166,150,167,171,0,174,179,173],
[160,156,157,166,160,167,0,163,161],
[149,175,160,166,158,162,178,0,163],
[172,172,157,179,169,168,180,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,162,144,165,168,165,143,145],
[186,0,185,165,189,173,188,162,165],
[179,156,0,155,164,163,158,152,146],
[197,176,186,0,171,172,178,171,164],
[176,152,177,170,0,182,188,160,159],
[173,168,178,169,159,0,175,163,163],
[176,153,183,163,153,166,0,146,156],
[198,179,189,170,181,178,195,0,178],
[196,176,195,177,182,178,185,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,184,164,154,183,162,164,178],
[187,0,187,174,168,179,175,160,181],
[157,154,0,148,163,186,185,159,188],
[177,167,193,0,176,193,189,177,197],
[187,173,178,165,0,183,190,173,171],
[158,162,155,148,158,0,181,165,174],
[179,166,156,152,151,160,0,136,175],
[177,181,182,164,168,176,205,0,180],
[163,160,153,144,170,167,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,185,173,172,162,160,168],
[174,0,186,188,192,178,200,163,177],
[173,155,0,185,206,175,152,175,181],
[156,153,156,0,189,163,160,161,157],
[168,149,135,152,0,152,143,149,165],
[169,163,166,178,189,0,172,182,156],
[179,141,189,181,198,169,0,169,162],
[181,178,166,180,192,159,172,0,165],
[173,164,160,184,176,185,179,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,180,178,163,138,149,160],
[172,0,169,180,176,172,155,174,166],
[168,172,0,153,174,175,142,159,178],
[161,161,188,0,189,175,150,170,167],
[163,165,167,152,0,180,149,175,155],
[178,169,166,166,161,0,159,165,167],
[203,186,199,191,192,182,0,170,188],
[192,167,182,171,166,176,171,0,181],
[181,175,163,174,186,174,153,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,165,173,182,178,188,158],
[161,0,154,172,160,163,153,175,173],
[173,187,0,172,174,172,162,192,177],
[176,169,169,0,180,179,164,199,175],
[168,181,167,161,0,175,167,170,169],
[159,178,169,162,166,0,166,180,165],
[163,188,179,177,174,175,0,185,179],
[153,166,149,142,171,161,156,0,150],
[183,168,164,166,172,176,162,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,174,192,179,163,194,201,174],
[157,0,147,166,161,153,158,183,171],
[167,194,0,180,181,179,189,216,168],
[149,175,161,0,163,168,171,177,162],
[162,180,160,178,0,156,171,199,174],
[178,188,162,173,185,0,158,189,178],
[147,183,152,170,170,183,0,190,185],
[140,158,125,164,142,152,151,0,156],
[167,170,173,179,167,163,156,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,195,165,204,177,197,216,205],
[165,0,129,175,188,142,193,177,159],
[146,212,0,165,212,159,200,200,173],
[176,166,176,0,194,165,180,179,170],
[137,153,129,147,0,140,154,130,176],
[164,199,182,176,201,0,183,214,204],
[144,148,141,161,187,158,0,186,160],
[125,164,141,162,211,127,155,0,157],
[136,182,168,171,165,137,181,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,108,154,179,158,167,112,189],
[198,0,154,199,191,203,190,156,198],
[233,187,0,188,193,199,165,179,223],
[187,142,153,0,189,165,176,109,222],
[162,150,148,152,0,189,174,127,188],
[183,138,142,176,152,0,178,140,230],
[174,151,176,165,167,163,0,131,174],
[229,185,162,232,214,201,210,0,235],
[152,143,118,119,153,111,167,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,189,176,167,181,176,168,171],
[164,0,177,168,162,162,169,157,166],
[152,164,0,165,170,158,164,159,168],
[165,173,176,0,168,172,177,172,178],
[174,179,171,173,0,171,184,176,169],
[160,179,183,169,170,0,174,163,166],
[165,172,177,164,157,167,0,159,153],
[173,184,182,169,165,178,182,0,173],
[170,175,173,163,172,175,188,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,160,157,178,150,151,155,172],
[181,0,167,163,189,171,187,178,197],
[181,174,0,176,161,183,154,158,166],
[184,178,165,0,163,164,162,162,195],
[163,152,180,178,0,157,153,184,189],
[191,170,158,177,184,0,144,163,183],
[190,154,187,179,188,197,0,178,183],
[186,163,183,179,157,178,163,0,174],
[169,144,175,146,152,158,158,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,198,180,183,169,171,200,147],
[132,0,194,155,172,148,174,153,164],
[143,147,0,172,192,158,175,161,187],
[161,186,169,0,194,189,168,171,175],
[158,169,149,147,0,130,122,145,175],
[172,193,183,152,211,0,170,170,191],
[170,167,166,173,219,171,0,181,173],
[141,188,180,170,196,171,160,0,199],
[194,177,154,166,166,150,168,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,175,188,162,181,154,163,177],
[173,0,162,173,181,183,160,156,161],
[166,179,0,187,181,195,168,165,168],
[153,168,154,0,148,193,150,154,153],
[179,160,160,193,0,197,177,174,184],
[160,158,146,148,144,0,144,129,145],
[187,181,173,191,164,197,0,173,191],
[178,185,176,187,167,212,168,0,183],
[164,180,173,188,157,196,150,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,172,176,173,159,181,165],
[170,0,180,178,172,195,181,192,192],
[163,161,0,164,174,172,174,186,176],
[169,163,177,0,162,179,169,177,182],
[165,169,167,179,0,170,164,181,164],
[168,146,169,162,171,0,167,170,170],
[182,160,167,172,177,174,0,181,176],
[160,149,155,164,160,171,160,0,152],
[176,149,165,159,177,171,165,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,175,189,179,159,177,173,166],
[178,0,174,171,186,174,169,174,177],
[166,167,0,165,180,157,182,169,167],
[152,170,176,0,168,169,168,177,171],
[162,155,161,173,0,160,171,165,171],
[182,167,184,172,181,0,180,169,179],
[164,172,159,173,170,161,0,154,173],
[168,167,172,164,176,172,187,0,161],
[175,164,174,170,170,162,168,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,161,172,157,148,169,167,164],
[200,0,172,183,156,178,183,171,158],
[180,169,0,185,151,150,160,146,147],
[169,158,156,0,139,155,167,139,148],
[184,185,190,202,0,155,196,169,183],
[193,163,191,186,186,0,188,192,172],
[172,158,181,174,145,153,0,163,153],
[174,170,195,202,172,149,178,0,167],
[177,183,194,193,158,169,188,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,172,154,176,169,156,158,161],
[180,0,184,176,175,188,172,166,166],
[169,157,0,162,166,173,161,158,157],
[187,165,179,0,188,178,178,167,173],
[165,166,175,153,0,175,173,165,151],
[172,153,168,163,166,0,153,151,152],
[185,169,180,163,168,188,0,168,166],
[183,175,183,174,176,190,173,0,169],
[180,175,184,168,190,189,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,190,169,193,163,180,161,165],
[155,0,186,191,188,160,160,166,160],
[151,155,0,151,177,173,154,150,144],
[172,150,190,0,186,141,182,157,158],
[148,153,164,155,0,160,157,157,144],
[178,181,168,200,181,0,177,179,176],
[161,181,187,159,184,164,0,158,152],
[180,175,191,184,184,162,183,0,192],
[176,181,197,183,197,165,189,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,134,232,168,215,243,183,215],
[77,0,146,148,128,160,128,164,194],
[207,195,0,195,196,144,175,198,209],
[109,193,146,0,113,129,176,148,146],
[173,213,145,228,0,158,191,213,160],
[126,181,197,212,183,0,161,150,148],
[98,213,166,165,150,180,0,165,198],
[158,177,143,193,128,191,176,0,227],
[126,147,132,195,181,193,143,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,183,165,193,193,174,193,189],
[195,0,155,185,183,189,206,162,210],
[158,186,0,175,178,180,182,177,177],
[176,156,166,0,213,208,214,188,220],
[148,158,163,128,0,169,183,155,169],
[148,152,161,133,172,0,192,151,190],
[167,135,159,127,158,149,0,165,172],
[148,179,164,153,186,190,176,0,189],
[152,131,164,121,172,151,169,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,149,157,156,151,175,153,132],
[188,0,161,170,176,163,184,198,177],
[192,180,0,147,188,144,174,171,159],
[184,171,194,0,169,159,163,186,182],
[185,165,153,172,0,146,175,168,147],
[190,178,197,182,195,0,165,197,178],
[166,157,167,178,166,176,0,171,140],
[188,143,170,155,173,144,170,0,145],
[209,164,182,159,194,163,201,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,189,190,168,180,177,171,173],
[178,0,195,185,168,187,173,170,181],
[152,146,0,168,160,174,161,157,161],
[151,156,173,0,167,162,162,151,173],
[173,173,181,174,0,194,171,158,180],
[161,154,167,179,147,0,153,155,169],
[164,168,180,179,170,188,0,169,185],
[170,171,184,190,183,186,172,0,181],
[168,160,180,168,161,172,156,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,160,154,161,166,167,154,161],
[181,0,171,180,170,168,179,187,169],
[181,170,0,171,168,170,174,166,157],
[187,161,170,0,165,166,189,179,173],
[180,171,173,176,0,166,185,173,173],
[175,173,171,175,175,0,182,179,162],
[174,162,167,152,156,159,0,157,146],
[187,154,175,162,168,162,184,0,164],
[180,172,184,168,168,179,195,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,176,164,161,155,163,171],
[166,0,155,166,172,179,159,170,163],
[183,186,0,174,188,178,163,178,174],
[165,175,167,0,181,170,174,178,172],
[177,169,153,160,0,154,147,159,176],
[180,162,163,171,187,0,161,159,181],
[186,182,178,167,194,180,0,165,172],
[178,171,163,163,182,182,176,0,187],
[170,178,167,169,165,160,169,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,168,181,174,176,172,173],
[161,0,172,178,172,147,174,154,151],
[158,169,0,164,164,167,167,152,159],
[173,163,177,0,167,177,173,168,167],
[160,169,177,174,0,170,178,172,160],
[167,194,174,164,171,0,165,168,166],
[165,167,174,168,163,176,0,165,164],
[169,187,189,173,169,173,176,0,171],
[168,190,182,174,181,175,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,135,144,131,151,140,143,132],
[218,0,163,196,176,181,147,180,164],
[206,178,0,194,135,174,162,171,173],
[197,145,147,0,142,145,149,176,144],
[210,165,206,199,0,178,166,198,184],
[190,160,167,196,163,0,134,172,152],
[201,194,179,192,175,207,0,206,164],
[198,161,170,165,143,169,135,0,152],
[209,177,168,197,157,189,177,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,183,183,182,168,181,189,180],
[152,0,155,160,160,167,179,169,170],
[158,186,0,173,169,161,172,167,179],
[158,181,168,0,168,156,189,179,182],
[159,181,172,173,0,172,186,178,184],
[173,174,180,185,169,0,181,176,179],
[160,162,169,152,155,160,0,164,163],
[152,172,174,162,163,165,177,0,170],
[161,171,162,159,157,162,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,153,176,159,158,156,163],
[172,0,175,164,168,157,172,155,175],
[172,166,0,140,172,145,153,166,146],
[188,177,201,0,178,155,163,169,163],
[165,173,169,163,0,154,138,141,164],
[182,184,196,186,187,0,165,160,168],
[183,169,188,178,203,176,0,184,170],
[185,186,175,172,200,181,157,0,192],
[178,166,195,178,177,173,171,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,181,169,176,174,172,171,165],
[154,0,181,185,170,197,159,186,157],
[160,160,0,169,166,153,155,157,146],
[172,156,172,0,172,168,157,162,159],
[165,171,175,169,0,176,174,160,166],
[167,144,188,173,165,0,148,163,161],
[169,182,186,184,167,193,0,183,178],
[170,155,184,179,181,178,158,0,165],
[176,184,195,182,175,180,163,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,193,167,179,184,193,197,193],
[168,0,183,171,171,172,202,184,171],
[148,158,0,147,162,164,166,177,180],
[174,170,194,0,177,178,184,185,162],
[162,170,179,164,0,167,194,180,185],
[157,169,177,163,174,0,181,158,165],
[148,139,175,157,147,160,0,174,155],
[144,157,164,156,161,183,167,0,172],
[148,170,161,179,156,176,186,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,175,195,172,178,173,168,169],
[152,0,148,169,148,160,158,150,157],
[166,193,0,187,165,168,169,154,180],
[146,172,154,0,154,152,151,160,154],
[169,193,176,187,0,161,171,158,176],
[163,181,173,189,180,0,185,173,168],
[168,183,172,190,170,156,0,159,171],
[173,191,187,181,183,168,182,0,177],
[172,184,161,187,165,173,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,176,185,183,182,153,182,165],
[188,0,166,162,149,150,140,148,135],
[165,175,0,162,155,151,167,131,156],
[156,179,179,0,163,138,166,166,169],
[158,192,186,178,0,203,179,177,181],
[159,191,190,203,138,0,168,202,172],
[188,201,174,175,162,173,0,175,166],
[159,193,210,175,164,139,166,0,184],
[176,206,185,172,160,169,175,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,184,163,185,184,178,203],
[166,0,155,173,173,189,176,165,191],
[171,186,0,176,166,203,184,189,196],
[157,168,165,0,159,190,179,168,191],
[178,168,175,182,0,191,164,175,190],
[156,152,138,151,150,0,171,154,173],
[157,165,157,162,177,170,0,162,181],
[163,176,152,173,166,187,179,0,203],
[138,150,145,150,151,168,160,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,185,178,194,164,170,159,165],
[168,0,157,191,190,168,181,156,186],
[156,184,0,179,189,165,175,170,176],
[163,150,162,0,179,188,185,177,173],
[147,151,152,162,0,170,180,163,167],
[177,173,176,153,171,0,167,176,168],
[171,160,166,156,161,174,0,170,153],
[182,185,171,164,178,165,171,0,173],
[176,155,165,168,174,173,188,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,168,168,157,135,169,159,170],
[191,0,160,169,159,141,166,166,199],
[173,181,0,177,162,154,174,168,175],
[173,172,164,0,159,156,161,151,156],
[184,182,179,182,0,172,151,179,172],
[206,200,187,185,169,0,198,184,190],
[172,175,167,180,190,143,0,169,182],
[182,175,173,190,162,157,172,0,200],
[171,142,166,185,169,151,159,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,187,164,168,170,165,179,172],
[167,0,184,182,176,175,171,162,168],
[154,157,0,161,161,162,155,169,151],
[177,159,180,0,171,171,172,176,172],
[173,165,180,170,0,170,161,169,167],
[171,166,179,170,171,0,162,170,169],
[176,170,186,169,180,179,0,177,175],
[162,179,172,165,172,171,164,0,162],
[169,173,190,169,174,172,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,171,179,186,176,191,170],
[173,0,187,172,167,194,198,205,182],
[173,154,0,181,170,178,183,181,164],
[170,169,160,0,168,188,179,183,169],
[162,174,171,173,0,187,182,184,170],
[155,147,163,153,154,0,168,171,155],
[165,143,158,162,159,173,0,188,164],
[150,136,160,158,157,170,153,0,152],
[171,159,177,172,171,186,177,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,189,163,166,165,168,179],
[170,0,189,171,168,170,161,172,187],
[157,152,0,155,154,154,161,153,168],
[152,170,186,0,170,167,175,174,185],
[178,173,187,171,0,167,175,170,182],
[175,171,187,174,174,0,161,170,191],
[176,180,180,166,166,180,0,166,194],
[173,169,188,167,171,171,175,0,182],
[162,154,173,156,159,150,147,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,183,183,172,189,180,172,163],
[145,0,147,152,163,176,146,156,126],
[158,194,0,174,155,179,164,161,175],
[158,189,167,0,177,176,166,157,142],
[169,178,186,164,0,189,192,169,159],
[152,165,162,165,152,0,156,175,148],
[161,195,177,175,149,185,0,157,140],
[169,185,180,184,172,166,184,0,155],
[178,215,166,199,182,193,201,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,165,189,171,168,187,182],
[161,0,150,147,150,158,163,159,165],
[171,191,0,175,178,171,169,190,184],
[176,194,166,0,186,172,175,188,191],
[152,191,163,155,0,161,151,180,171],
[170,183,170,169,180,0,165,182,183],
[173,178,172,166,190,176,0,177,179],
[154,182,151,153,161,159,164,0,175],
[159,176,157,150,170,158,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,177,163,212,184,177,184,195],
[155,0,180,162,150,200,176,185,170],
[164,161,0,174,192,183,202,139,185],
[178,179,167,0,212,214,206,168,199],
[129,191,149,129,0,182,170,156,187],
[157,141,158,127,159,0,161,163,152],
[164,165,139,135,171,180,0,153,172],
[157,156,202,173,185,178,188,0,172],
[146,171,156,142,154,189,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,151,169,189,156,174,172],
[173,0,169,166,175,184,163,180,171],
[175,172,0,145,167,174,168,176,165],
[190,175,196,0,167,195,176,180,191],
[172,166,174,174,0,190,187,190,182],
[152,157,167,146,151,0,166,165,172],
[185,178,173,165,154,175,0,176,181],
[167,161,165,161,151,176,165,0,176],
[169,170,176,150,159,169,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,189,174,187,174,178,186,170],
[166,0,170,178,179,175,186,169,168],
[152,171,0,186,188,169,187,182,171],
[167,163,155,0,166,162,183,183,157],
[154,162,153,175,0,157,162,176,154],
[167,166,172,179,184,0,180,178,168],
[163,155,154,158,179,161,0,159,159],
[155,172,159,158,165,163,182,0,166],
[171,173,170,184,187,173,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,185,165,180,173,182,180,164],
[169,0,193,144,180,165,167,172,182],
[156,148,0,135,155,154,148,164,168],
[176,197,206,0,180,174,167,179,183],
[161,161,186,161,0,154,153,157,149],
[168,176,187,167,187,0,165,179,176],
[159,174,193,174,188,176,0,175,177],
[161,169,177,162,184,162,166,0,162],
[177,159,173,158,192,165,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,144,133,149,146,204,140],
[176,0,182,176,176,149,151,190,167],
[174,159,0,169,169,163,169,181,171],
[197,165,172,0,179,160,171,198,144],
[208,165,172,162,0,187,194,226,185],
[192,192,178,181,154,0,189,245,175],
[195,190,172,170,147,152,0,215,149],
[137,151,160,143,115,96,126,0,131],
[201,174,170,197,156,166,192,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,144,164,188,168,150,150,190],
[176,0,174,154,202,157,155,186,167],
[197,167,0,187,203,177,169,184,177],
[177,187,154,0,192,175,169,161,174],
[153,139,138,149,0,131,150,143,130],
[173,184,164,166,210,0,192,178,163],
[191,186,172,172,191,149,0,183,182],
[191,155,157,180,198,163,158,0,186],
[151,174,164,167,211,178,159,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,186,185,194,181,186,158,147],
[192,0,214,168,226,214,205,172,167],
[155,127,0,159,163,164,172,121,130],
[156,173,182,0,198,197,161,166,158],
[147,115,178,143,0,170,142,117,116],
[160,127,177,144,171,0,144,146,111],
[155,136,169,180,199,197,0,145,137],
[183,169,220,175,224,195,196,0,174],
[194,174,211,183,225,230,204,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,158,173,149,166,170,163,155],
[178,0,161,168,152,187,172,158,183],
[183,180,0,172,170,201,188,188,170],
[168,173,169,0,160,167,167,168,175],
[192,189,171,181,0,174,187,168,173],
[175,154,140,174,167,0,166,170,172],
[171,169,153,174,154,175,0,170,181],
[178,183,153,173,173,171,171,0,184],
[186,158,171,166,168,169,160,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,174,194,185,171,170,164,156],
[157,0,152,170,178,153,151,154,161],
[167,189,0,175,180,175,174,171,170],
[147,171,166,0,152,149,152,139,155],
[156,163,161,189,0,164,183,165,169],
[170,188,166,192,177,0,175,152,163],
[171,190,167,189,158,166,0,151,166],
[177,187,170,202,176,189,190,0,185],
[185,180,171,186,172,178,175,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,194,146,209,161,180,166,197],
[155,0,171,153,171,172,178,180,174],
[147,170,0,134,132,156,173,163,166],
[195,188,207,0,179,165,211,202,228],
[132,170,209,162,0,166,175,186,163],
[180,169,185,176,175,0,189,183,198],
[161,163,168,130,166,152,0,178,162],
[175,161,178,139,155,158,163,0,172],
[144,167,175,113,178,143,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,183,164,168,181,180,172,188],
[173,0,173,133,183,210,240,175,152],
[158,168,0,166,194,194,208,165,158],
[177,208,175,0,191,219,218,180,153],
[173,158,147,150,0,174,194,177,156],
[160,131,147,122,167,0,161,149,137],
[161,101,133,123,147,180,0,153,127],
[169,166,176,161,164,192,188,0,152],
[153,189,183,188,185,204,214,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,167,111,123,146,113,141],
[230,0,212,226,214,150,171,158,216],
[228,129,0,202,140,151,143,100,201],
[174,115,139,0,81,82,90,127,156],
[230,127,201,260,0,151,156,161,203],
[218,191,190,259,190,0,102,179,262],
[195,170,198,251,185,239,0,171,240],
[228,183,241,214,180,162,170,0,245],
[200,125,140,185,138,79,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,133,160,169,183,153,168,157],
[201,0,146,146,206,180,187,189,146],
[208,195,0,194,165,220,195,210,195],
[181,195,147,0,182,184,213,197,146],
[172,135,176,159,0,197,184,160,150],
[158,161,121,157,144,0,144,154,155],
[188,154,146,128,157,197,0,165,130],
[173,152,131,144,181,187,176,0,138],
[184,195,146,195,191,186,211,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,165,174,171,176,190,179,178],
[164,0,158,171,172,175,178,182,174],
[176,183,0,182,161,179,188,172,186],
[167,170,159,0,175,182,172,191,191],
[170,169,180,166,0,178,162,185,183],
[165,166,162,159,163,0,171,179,174],
[151,163,153,169,179,170,0,183,176],
[162,159,169,150,156,162,158,0,171],
[163,167,155,150,158,167,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,169,183,183,187,210,205,172],
[152,0,156,154,168,165,176,184,161],
[172,185,0,196,162,194,183,207,187],
[158,187,145,0,144,191,193,189,180],
[158,173,179,197,0,203,186,201,206],
[154,176,147,150,138,0,171,195,149],
[131,165,158,148,155,170,0,177,152],
[136,157,134,152,140,146,164,0,156],
[169,180,154,161,135,192,189,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,165,187,171,179,183,160],
[171,0,178,177,221,170,165,226,145],
[183,163,0,169,195,189,159,214,157],
[176,164,172,0,203,159,168,189,172],
[154,120,146,138,0,150,142,185,119],
[170,171,152,182,191,0,159,210,134],
[162,176,182,173,199,182,0,180,148],
[158,115,127,152,156,131,161,0,153],
[181,196,184,169,222,207,193,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,153,161,176,167,173,187,173],
[145,0,144,134,129,156,148,169,139],
[188,197,0,179,158,167,191,186,164],
[180,207,162,0,156,161,183,151,174],
[165,212,183,185,0,172,201,193,178],
[174,185,174,180,169,0,196,186,178],
[168,193,150,158,140,145,0,167,160],
[154,172,155,190,148,155,174,0,188],
[168,202,177,167,163,163,181,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,151,180,184,189,172,189],
[171,0,176,153,180,172,159,155,162],
[173,165,0,164,174,162,186,176,173],
[190,188,177,0,193,168,179,162,188],
[161,161,167,148,0,158,163,152,166],
[157,169,179,173,183,0,210,163,185],
[152,182,155,162,178,131,0,145,139],
[169,186,165,179,189,178,196,0,179],
[152,179,168,153,175,156,202,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,152,149,162,154,150,150],
[177,0,173,179,177,179,159,162,175],
[172,168,0,158,165,163,148,173,155],
[189,162,183,0,157,174,151,171,166],
[192,164,176,184,0,187,176,164,165],
[179,162,178,167,154,0,149,160,150],
[187,182,193,190,165,192,0,189,169],
[191,179,168,170,177,181,152,0,157],
[191,166,186,175,176,191,172,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,225,245,203,131,243,243,171],
[117,0,134,94,130,118,110,110,153],
[116,207,0,168,164,149,185,149,132],
[96,247,173,0,132,132,189,169,135],
[138,211,177,209,0,135,154,170,193],
[210,223,192,209,206,0,224,227,115],
[98,231,156,152,187,117,0,150,155],
[98,231,192,172,171,114,191,0,174],
[170,188,209,206,148,226,186,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,171,172,170,171,163,163],
[171,0,169,174,169,180,182,171,175],
[168,172,0,176,173,175,172,168,181],
[170,167,165,0,166,169,160,168,166],
[169,172,168,175,0,187,183,172,169],
[171,161,166,172,154,0,159,159,165],
[170,159,169,181,158,182,0,175,172],
[178,170,173,173,169,182,166,0,171],
[178,166,160,175,172,176,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,151,173,172,162,158,170,160],
[184,0,170,184,184,171,171,185,188],
[190,171,0,191,183,178,181,192,169],
[168,157,150,0,170,156,155,170,165],
[169,157,158,171,0,167,150,170,153],
[179,170,163,185,174,0,173,174,170],
[183,170,160,186,191,168,0,173,169],
[171,156,149,171,171,167,168,0,181],
[181,153,172,176,188,171,172,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,196,163,172,172,171,185,181],
[144,0,218,165,157,136,159,198,166],
[145,123,0,140,93,111,119,170,160],
[178,176,201,0,160,160,149,192,173],
[169,184,248,181,0,163,164,229,207],
[169,205,230,181,178,0,162,219,182],
[170,182,222,192,177,179,0,231,219],
[156,143,171,149,112,122,110,0,148],
[160,175,181,168,134,159,122,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,182,170,190,191,190,180,174],
[168,0,172,157,189,187,184,186,174],
[159,169,0,167,201,170,178,188,169],
[171,184,174,0,184,177,179,188,166],
[151,152,140,157,0,175,172,163,148],
[150,154,171,164,166,0,167,169,161],
[151,157,163,162,169,174,0,157,153],
[161,155,153,153,178,172,184,0,160],
[167,167,172,175,193,180,188,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,186,175,187,187,171,159,172],
[158,0,170,148,174,153,164,143,155],
[155,171,0,136,178,149,171,139,142],
[166,193,205,0,189,168,162,154,184],
[154,167,163,152,0,144,157,144,178],
[154,188,192,173,197,0,172,169,176],
[170,177,170,179,184,169,0,157,188],
[182,198,202,187,197,172,184,0,169],
[169,186,199,157,163,165,153,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,181,139,164,146,154,142,187],
[187,0,172,149,171,149,144,155,178],
[160,169,0,142,177,146,147,144,175],
[202,192,199,0,187,153,170,175,188],
[177,170,164,154,0,152,155,161,173],
[195,192,195,188,189,0,176,157,193],
[187,197,194,171,186,165,0,158,179],
[199,186,197,166,180,184,183,0,210],
[154,163,166,153,168,148,162,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,210,151,165,190,199,186,176],
[162,0,136,155,191,175,128,171,179],
[131,205,0,156,182,195,161,183,157],
[190,186,185,0,165,189,194,196,174],
[176,150,159,176,0,174,156,164,156],
[151,166,146,152,167,0,153,162,133],
[142,213,180,147,185,188,0,181,174],
[155,170,158,145,177,179,160,0,165],
[165,162,184,167,185,208,167,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,172,173,186,174,165,179,179],
[177,0,161,172,163,179,171,173,184],
[169,180,0,193,180,196,167,186,180],
[168,169,148,0,161,167,153,168,181],
[155,178,161,180,0,178,155,181,190],
[167,162,145,174,163,0,149,174,176],
[176,170,174,188,186,192,0,178,186],
[162,168,155,173,160,167,163,0,178],
[162,157,161,160,151,165,155,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,168,178,156,168,156,183],
[161,0,171,195,156,198,171,174,175],
[157,170,0,174,177,169,169,177,174],
[173,146,167,0,169,172,146,174,165],
[163,185,164,172,0,178,159,180,172],
[185,143,172,169,163,0,183,182,192],
[173,170,172,195,182,158,0,187,173],
[185,167,164,167,161,159,154,0,173],
[158,166,167,176,169,149,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,173,192,167,149,171,179,159],
[137,0,163,177,164,146,182,171,170],
[168,178,0,153,181,188,194,199,163],
[149,164,188,0,177,145,188,171,179],
[174,177,160,164,0,157,161,170,171],
[192,195,153,196,184,0,190,188,171],
[170,159,147,153,180,151,0,155,158],
[162,170,142,170,171,153,186,0,163],
[182,171,178,162,170,170,183,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,158,159,140,169,182,156,175],
[123,0,131,152,144,176,143,152,197],
[183,210,0,198,195,202,169,158,197],
[182,189,143,0,154,179,182,164,189],
[201,197,146,187,0,219,192,212,201],
[172,165,139,162,122,0,148,152,160],
[159,198,172,159,149,193,0,140,189],
[185,189,183,177,129,189,201,0,184],
[166,144,144,152,140,181,152,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,181,180,164,187,181,189],
[167,0,147,172,170,161,156,158,165],
[175,194,0,177,181,172,182,164,182],
[160,169,164,0,180,165,151,149,167],
[161,171,160,161,0,156,163,167,161],
[177,180,169,176,185,0,178,171,199],
[154,185,159,190,178,163,0,164,177],
[160,183,177,192,174,170,177,0,175],
[152,176,159,174,180,142,164,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,142,161,157,166,163,142,202],
[171,0,162,173,158,183,172,157,177],
[199,179,0,160,158,171,180,157,189],
[180,168,181,0,175,175,193,175,192],
[184,183,183,166,0,173,177,149,191],
[175,158,170,166,168,0,179,144,163],
[178,169,161,148,164,162,0,144,168],
[199,184,184,166,192,197,197,0,197],
[139,164,152,149,150,178,173,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,201,199,171,201,198,190,169],
[151,0,186,187,172,179,175,171,178],
[140,155,0,166,167,172,172,170,147],
[142,154,175,0,149,183,178,169,171],
[170,169,174,192,0,189,186,171,176],
[140,162,169,158,152,0,151,159,143],
[143,166,169,163,155,190,0,181,164],
[151,170,171,172,170,182,160,0,163],
[172,163,194,170,165,198,177,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,175,183,175,167,189,178,171],
[169,0,179,174,177,177,175,174,176],
[166,162,0,176,168,151,163,162,159],
[158,167,165,0,173,168,172,178,173],
[166,164,173,168,0,167,178,170,171],
[174,164,190,173,174,0,187,173,171],
[152,166,178,169,163,154,0,166,171],
[163,167,179,163,171,168,175,0,173],
[170,165,182,168,170,170,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,166,167,163,167,183,173],
[163,0,178,160,173,168,167,176,171],
[169,163,0,170,174,169,159,173,173],
[175,181,171,0,178,179,175,182,163],
[174,168,167,163,0,173,164,172,167],
[178,173,172,162,168,0,166,174,176],
[174,174,182,166,177,175,0,177,176],
[158,165,168,159,169,167,164,0,169],
[168,170,168,178,174,165,165,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,151,160,158,127,157,154],
[176,0,184,175,154,155,150,164,175],
[179,157,0,176,150,160,128,135,162],
[190,166,165,0,167,163,162,157,172],
[181,187,191,174,0,160,172,167,181],
[183,186,181,178,181,0,121,162,167],
[214,191,213,179,169,220,0,191,175],
[184,177,206,184,174,179,150,0,172],
[187,166,179,169,160,174,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,158,171,172,179,192,149],
[163,0,184,172,192,161,153,177,165],
[163,157,0,157,179,178,155,169,136],
[183,169,184,0,190,178,173,168,173],
[170,149,162,151,0,163,155,188,133],
[169,180,163,163,178,0,178,170,134],
[162,188,186,168,186,163,0,184,143],
[149,164,172,173,153,171,157,0,157],
[192,176,205,168,208,207,198,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,165,164,180,166,168,154],
[167,0,150,164,170,170,155,164,140],
[178,191,0,163,177,180,168,185,173],
[176,177,178,0,169,172,164,177,163],
[177,171,164,172,0,175,170,176,158],
[161,171,161,169,166,0,163,165,170],
[175,186,173,177,171,178,0,185,158],
[173,177,156,164,165,176,156,0,156],
[187,201,168,178,183,171,183,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,163,171,172,178,164,165,178],
[164,0,172,167,173,175,171,185,181],
[178,169,0,170,186,185,173,173,184],
[170,174,171,0,174,174,164,172,172],
[169,168,155,167,0,154,166,169,169],
[163,166,156,167,187,0,170,171,179],
[177,170,168,177,175,171,0,170,176],
[176,156,168,169,172,170,171,0,180],
[163,160,157,169,172,162,165,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,183,149,144,154,144,166,159],
[166,0,171,148,161,171,167,146,162],
[158,170,0,161,162,170,157,157,159],
[192,193,180,0,176,181,161,163,179],
[197,180,179,165,0,189,187,163,158],
[187,170,171,160,152,0,160,176,143],
[197,174,184,180,154,181,0,156,162],
[175,195,184,178,178,165,185,0,174],
[182,179,182,162,183,198,179,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,200,201,171,171,144,200,170],
[83,0,172,85,111,113,140,139,113],
[141,169,0,113,84,112,112,197,112],
[140,256,228,0,139,227,140,198,168],
[170,230,257,202,0,229,199,200,228],
[170,228,229,114,112,0,141,199,141],
[197,201,229,201,142,200,0,225,113],
[141,202,144,143,141,142,116,0,201],
[171,228,229,173,113,200,228,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,151,207,191,173,194,208,244],
[187,0,164,148,149,166,242,186,206],
[190,177,0,171,228,158,247,228,192],
[134,193,170,0,194,193,176,194,172],
[150,192,113,147,0,174,155,188,188],
[168,175,183,148,167,0,189,207,171],
[147,99,94,165,186,152,0,170,132],
[133,155,113,147,153,134,171,0,187],
[97,135,149,169,153,170,209,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,170,161,177,172,171,182,158],
[183,0,174,169,183,172,167,185,170],
[171,167,0,168,170,176,174,180,175],
[180,172,173,0,193,158,160,190,170],
[164,158,171,148,0,157,176,171,158],
[169,169,165,183,184,0,181,170,172],
[170,174,167,181,165,160,0,168,168],
[159,156,161,151,170,171,173,0,163],
[183,171,166,171,183,169,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,184,190,159,186,207,205,160],
[168,0,144,151,132,175,180,196,133],
[157,197,0,176,189,196,207,211,186],
[151,190,165,0,166,204,197,168,156],
[182,209,152,175,0,192,189,218,188],
[155,166,145,137,149,0,175,170,153],
[134,161,134,144,152,166,0,153,151],
[136,145,130,173,123,171,188,0,124],
[181,208,155,185,153,188,190,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,168,156,167,164,171,158],
[170,0,175,173,170,167,170,182,165],
[170,166,0,183,173,179,172,171,175],
[173,168,158,0,158,163,165,176,165],
[185,171,168,183,0,183,177,186,174],
[174,174,162,178,158,0,174,184,168],
[177,171,169,176,164,167,0,174,170],
[170,159,170,165,155,157,167,0,167],
[183,176,166,176,167,173,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,178,172,156,168,175,177,150],
[182,0,175,166,178,181,176,186,185],
[163,166,0,149,163,155,162,170,146],
[169,175,192,0,182,191,170,197,169],
[185,163,178,159,0,181,175,159,152],
[173,160,186,150,160,0,171,166,149],
[166,165,179,171,166,170,0,174,161],
[164,155,171,144,182,175,167,0,165],
[191,156,195,172,189,192,180,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,149,169,192,147,183,169,134],
[165,0,193,180,167,165,179,177,137],
[192,148,0,178,200,183,195,177,178],
[172,161,163,0,180,187,196,168,174],
[149,174,141,161,0,143,175,165,148],
[194,176,158,154,198,0,196,200,149],
[158,162,146,145,166,145,0,155,161],
[172,164,164,173,176,141,186,0,150],
[207,204,163,167,193,192,180,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,194,178,177,185,170,203,183],
[146,0,168,156,177,162,185,184,167],
[147,173,0,174,166,151,152,163,159],
[163,185,167,0,155,162,165,178,176],
[164,164,175,186,0,148,174,186,173],
[156,179,190,179,193,0,178,188,185],
[171,156,189,176,167,163,0,180,204],
[138,157,178,163,155,153,161,0,163],
[158,174,182,165,168,156,137,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,208,153,222,217,184,191,196],
[175,0,144,173,166,174,163,144,174],
[133,197,0,196,199,164,187,179,176],
[188,168,145,0,166,175,164,158,202],
[119,175,142,175,0,141,163,163,142],
[124,167,177,166,200,0,142,135,192],
[157,178,154,177,178,199,0,188,189],
[150,197,162,183,178,206,153,0,188],
[145,167,165,139,199,149,152,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,211,153,140,255,184,158,185],
[140,0,152,152,179,168,165,124,168],
[130,189,0,127,126,184,171,142,189],
[188,189,214,0,87,172,144,116,173],
[201,162,215,254,0,227,184,155,159],
[86,173,157,169,114,0,155,114,142],
[157,176,170,197,157,186,0,131,131],
[183,217,199,225,186,227,210,0,158],
[156,173,152,168,182,199,210,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,341,341,226,226,226,226,341],
[227,0,227,341,226,226,226,112,341],
[0,114,0,226,226,226,226,226,226],
[0,0,115,0,226,226,114,112,226],
[115,115,115,115,0,112,0,112,341],
[115,115,115,115,229,0,229,115,229],
[115,115,115,227,341,112,0,112,341],
[115,229,115,229,229,226,229,0,229],
[0,0,115,115,0,112,0,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,169,168,179,166,172,163],
[170,0,165,163,160,168,163,160,159],
[168,176,0,171,171,176,172,174,165],
[172,178,170,0,160,183,171,181,165],
[173,181,170,181,0,186,175,182,172],
[162,173,165,158,155,0,166,168,162],
[175,178,169,170,166,175,0,171,164],
[169,181,167,160,159,173,170,0,169],
[178,182,176,176,169,179,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,175,179,164,163,166,172],
[175,0,174,179,184,170,170,176,172],
[170,167,0,188,186,173,189,182,198],
[166,162,153,0,172,162,152,171,172],
[162,157,155,169,0,164,158,165,172],
[177,171,168,179,177,0,172,168,177],
[178,171,152,189,183,169,0,175,183],
[175,165,159,170,176,173,166,0,185],
[169,169,143,169,169,164,158,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,124,160,171,163,163,163],
[183,0,177,179,181,175,160,169,200],
[174,164,0,158,164,175,183,150,153],
[217,162,183,0,182,180,178,192,176],
[181,160,177,159,0,164,183,182,177],
[170,166,166,161,177,0,161,180,169],
[178,181,158,163,158,180,0,187,185],
[178,172,191,149,159,161,154,0,177],
[178,141,188,165,164,172,156,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,147,176,138,178,210,198,193],
[203,0,176,161,153,207,221,203,176],
[194,165,0,187,184,179,205,211,219],
[165,180,154,0,135,176,191,207,187],
[203,188,157,206,0,190,226,220,240],
[163,134,162,165,151,0,164,176,193],
[131,120,136,150,115,177,0,187,138],
[143,138,130,134,121,165,154,0,160],
[148,165,122,154,101,148,203,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,166,154,183,158,170,168,158],
[161,0,170,154,169,152,161,160,155],
[175,171,0,184,181,176,170,170,180],
[187,187,157,0,189,163,173,158,175],
[158,172,160,152,0,138,145,165,162],
[183,189,165,178,203,0,176,177,178],
[171,180,171,168,196,165,0,172,157],
[173,181,171,183,176,164,169,0,180],
[183,186,161,166,179,163,184,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,150,158,163,166,159,160],
[179,0,179,168,182,173,183,172,161],
[167,162,0,171,170,178,172,160,164],
[191,173,170,0,175,185,175,170,169],
[183,159,171,166,0,182,150,158,170],
[178,168,163,156,159,0,163,157,163],
[175,158,169,166,191,178,0,174,168],
[182,169,181,171,183,184,167,0,177],
[181,180,177,172,171,178,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,162,165,175,166,165,180,165],
[169,0,177,173,184,163,163,181,192],
[179,164,0,174,164,159,158,169,170],
[176,168,167,0,176,189,163,172,170],
[166,157,177,165,0,171,167,171,160],
[175,178,182,152,170,0,173,163,173],
[176,178,183,178,174,168,0,173,176],
[161,160,172,169,170,178,168,0,162],
[176,149,171,171,181,168,165,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,179,173,167,152,185,184,169],
[169,0,166,150,173,155,164,175,155],
[162,175,0,164,166,142,168,143,156],
[168,191,177,0,162,164,188,166,153],
[174,168,175,179,0,168,189,154,166],
[189,186,199,177,173,0,190,167,164],
[156,177,173,153,152,151,0,165,173],
[157,166,198,175,187,174,176,0,165],
[172,186,185,188,175,177,168,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,166,163,163,165,176,166],
[175,0,174,169,180,180,183,177,176],
[172,167,0,182,171,169,174,164,180],
[175,172,159,0,181,166,176,186,174],
[178,161,170,160,0,175,176,171,177],
[178,161,172,175,166,0,179,176,180],
[176,158,167,165,165,162,0,161,165],
[165,164,177,155,170,165,180,0,164],
[175,165,161,167,164,161,176,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,181,173,182,189,183,165],
[170,0,182,171,177,168,172,171,171],
[167,159,0,173,165,163,167,168,161],
[160,170,168,0,158,173,163,168,148],
[168,164,176,183,0,179,176,170,164],
[159,173,178,168,162,0,165,163,158],
[152,169,174,178,165,176,0,172,174],
[158,170,173,173,171,178,169,0,165],
[176,170,180,193,177,183,167,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,181,185,178,174,187,208,180],
[173,0,173,179,173,192,177,191,165],
[160,168,0,199,180,168,175,185,159],
[156,162,142,0,167,160,159,188,147],
[163,168,161,174,0,192,169,173,151],
[167,149,173,181,149,0,172,194,163],
[154,164,166,182,172,169,0,171,153],
[133,150,156,153,168,147,170,0,146],
[161,176,182,194,190,178,188,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,168,161,160,164,170,185],
[173,0,155,170,160,171,175,167,172],
[178,186,0,173,157,171,167,164,178],
[173,171,168,0,161,165,161,161,182],
[180,181,184,180,0,170,172,178,186],
[181,170,170,176,171,0,174,173,175],
[177,166,174,180,169,167,0,177,187],
[171,174,177,180,163,168,164,0,170],
[156,169,163,159,155,166,154,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,163,172,158,173,171,183],
[165,0,176,164,160,164,160,176,176],
[163,165,0,151,148,157,147,168,165],
[178,177,190,0,167,171,178,186,193],
[169,181,193,174,0,170,169,186,173],
[183,177,184,170,171,0,179,187,193],
[168,181,194,163,172,162,0,187,191],
[170,165,173,155,155,154,154,0,174],
[158,165,176,148,168,148,150,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,162,166,169,168,169,175,159],
[155,0,172,175,175,173,154,178,163],
[179,169,0,165,171,159,173,185,157],
[175,166,176,0,156,168,178,167,161],
[172,166,170,185,0,172,170,191,158],
[173,168,182,173,169,0,173,180,172],
[172,187,168,163,171,168,0,187,177],
[166,163,156,174,150,161,154,0,160],
[182,178,184,180,183,169,164,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,186,193,173,178,159,191,168],
[190,0,199,164,168,168,175,185,177],
[155,142,0,177,161,164,151,144,134],
[148,177,164,0,188,180,186,184,173],
[168,173,180,153,0,179,164,164,164],
[163,173,177,161,162,0,158,163,150],
[182,166,190,155,177,183,0,166,163],
[150,156,197,157,177,178,175,0,164],
[173,164,207,168,177,191,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,188,180,170,181,165,187],
[169,0,158,176,169,175,174,161,163],
[169,183,0,180,171,182,186,171,174],
[153,165,161,0,154,167,177,151,158],
[161,172,170,187,0,181,191,169,177],
[171,166,159,174,160,0,167,176,164],
[160,167,155,164,150,174,0,153,155],
[176,180,170,190,172,165,188,0,180],
[154,178,167,183,164,177,186,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,181,192,180,188,197,177,159],
[163,0,185,205,186,193,195,186,183],
[160,156,0,185,184,186,189,175,179],
[149,136,156,0,183,171,182,166,151],
[161,155,157,158,0,162,158,175,145],
[153,148,155,170,179,0,181,178,179],
[144,146,152,159,183,160,0,174,172],
[164,155,166,175,166,163,167,0,165],
[182,158,162,190,196,162,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,211,236,78,212,129,155,210],
[183,0,157,210,182,236,181,262,105],
[130,184,0,236,130,132,77,156,158],
[105,131,105,0,131,157,156,235,53],
[263,159,211,210,0,211,207,158,157],
[129,105,209,184,130,0,180,130,80],
[212,160,264,185,134,161,0,133,187],
[186,79,185,106,183,211,208,0,80],
[131,236,183,288,184,261,154,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,183,172,176,166,190,180,177],
[162,0,163,172,164,155,162,176,162],
[158,178,0,178,161,172,171,189,172],
[169,169,163,0,167,150,170,169,173],
[165,177,180,174,0,174,172,173,168],
[175,186,169,191,167,0,188,174,186],
[151,179,170,171,169,153,0,165,160],
[161,165,152,172,168,167,176,0,159],
[164,179,169,168,173,155,181,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,182,176,186,157,179,181,174],
[154,0,170,166,176,153,174,188,202],
[159,171,0,153,173,171,181,179,184],
[165,175,188,0,174,181,192,186,196],
[155,165,168,167,0,180,189,188,190],
[184,188,170,160,161,0,172,168,190],
[162,167,160,149,152,169,0,183,173],
[160,153,162,155,153,173,158,0,183],
[167,139,157,145,151,151,168,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,149,166,163,152,172,156,159],
[181,0,169,177,181,172,182,156,185],
[192,172,0,175,182,155,176,181,162],
[175,164,166,0,162,156,177,159,171],
[178,160,159,179,0,166,200,179,171],
[189,169,186,185,175,0,187,173,183],
[169,159,165,164,141,154,0,149,158],
[185,185,160,182,162,168,192,0,167],
[182,156,179,170,170,158,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,187,211,190,152,156,183,204],
[138,0,200,200,166,172,155,186,203],
[154,141,0,157,171,149,153,172,159],
[130,141,184,0,137,136,161,177,185],
[151,175,170,204,0,150,152,189,216],
[189,169,192,205,191,0,172,195,234],
[185,186,188,180,189,169,0,177,201],
[158,155,169,164,152,146,164,0,208],
[137,138,182,156,125,107,140,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,173,186,195,164,172,180,184],
[156,0,161,181,162,165,166,166,179],
[168,180,0,172,174,163,168,162,176],
[155,160,169,0,158,137,159,144,182],
[146,179,167,183,0,167,178,172,185],
[177,176,178,204,174,0,165,174,179],
[169,175,173,182,163,176,0,167,195],
[161,175,179,197,169,167,174,0,198],
[157,162,165,159,156,162,146,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,173,165,173,162,176,169,175],
[186,0,175,169,184,165,164,167,167],
[168,166,0,164,184,180,173,166,179],
[176,172,177,0,165,174,178,176,171],
[168,157,157,176,0,164,160,167,158],
[179,176,161,167,177,0,168,167,170],
[165,177,168,163,181,173,0,152,167],
[172,174,175,165,174,174,189,0,175],
[166,174,162,170,183,171,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,172,165,155,184,181,169,154],
[186,0,178,163,158,194,188,193,165],
[169,163,0,174,156,193,187,189,168],
[176,178,167,0,178,181,172,199,163],
[186,183,185,163,0,189,193,194,191],
[157,147,148,160,152,0,193,178,144],
[160,153,154,169,148,148,0,173,152],
[172,148,152,142,147,163,168,0,154],
[187,176,173,178,150,197,189,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,186,182,167,174,172,177],
[171,0,174,158,169,163,165,156,170],
[161,167,0,162,167,160,154,157,176],
[155,183,179,0,170,158,156,165,164],
[159,172,174,171,0,165,163,162,167],
[174,178,181,183,176,0,178,162,185],
[167,176,187,185,178,163,0,172,164],
[169,185,184,176,179,179,169,0,183],
[164,171,165,177,174,156,177,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,171,173,185,159,181,176],
[182,0,175,160,142,185,145,174,169],
[180,166,0,187,181,178,162,184,181],
[170,181,154,0,161,157,156,193,166],
[168,199,160,180,0,172,173,193,160],
[156,156,163,184,169,0,168,178,155],
[182,196,179,185,168,173,0,202,154],
[160,167,157,148,148,163,139,0,156],
[165,172,160,175,181,186,187,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,176,156,214,202,181,176],
[170,0,167,151,148,168,195,164,163],
[157,174,0,182,149,209,215,177,183],
[165,190,159,0,177,199,186,182,177],
[185,193,192,164,0,201,202,179,181],
[127,173,132,142,140,0,163,163,152],
[139,146,126,155,139,178,0,163,164],
[160,177,164,159,162,178,178,0,154],
[165,178,158,164,160,189,177,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,176,180,163,182,174,183],
[180,0,185,185,193,162,199,169,188],
[175,156,0,203,189,186,189,193,188],
[165,156,138,0,162,157,159,166,191],
[161,148,152,179,0,159,154,172,170],
[178,179,155,184,182,0,167,178,186],
[159,142,152,182,187,174,0,161,186],
[167,172,148,175,169,163,180,0,161],
[158,153,153,150,171,155,155,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,179,178,197,179,189,167,181],
[146,0,165,165,172,164,162,173,167],
[162,176,0,169,189,175,191,186,175],
[163,176,172,0,193,173,191,178,183],
[144,169,152,148,0,162,159,150,167],
[162,177,166,168,179,0,186,177,170],
[152,179,150,150,182,155,0,167,150],
[174,168,155,163,191,164,174,0,174],
[160,174,166,158,174,171,191,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,206,171,185,172,193,174,165],
[171,0,186,181,182,166,186,172,168],
[135,155,0,163,163,166,156,133,137],
[170,160,178,0,175,166,173,178,172],
[156,159,178,166,0,166,176,168,160],
[169,175,175,175,175,0,182,183,174],
[148,155,185,168,165,159,0,174,156],
[167,169,208,163,173,158,167,0,164],
[176,173,204,169,181,167,185,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,183,158,154,170,155,157],
[179,0,160,174,163,145,166,160,159],
[172,181,0,174,163,180,182,169,172],
[158,167,167,0,166,159,163,166,162],
[183,178,178,175,0,158,180,171,181],
[187,196,161,182,183,0,187,180,164],
[171,175,159,178,161,154,0,162,154],
[186,181,172,175,170,161,179,0,181],
[184,182,169,179,160,177,187,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,167,177,164,173,182,187],
[176,0,182,171,185,177,183,182,168],
[165,159,0,160,172,170,165,165,180],
[174,170,181,0,178,172,170,179,169],
[164,156,169,163,0,162,174,175,178],
[177,164,171,169,179,0,172,163,179],
[168,158,176,171,167,169,0,170,164],
[159,159,176,162,166,178,171,0,170],
[154,173,161,172,163,162,177,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,184,168,194,192,149,140,175],
[138,0,130,122,133,159,148,125,137],
[157,211,0,167,155,174,174,175,149],
[173,219,174,0,172,187,172,166,155],
[147,208,186,169,0,204,175,158,174],
[149,182,167,154,137,0,164,130,128],
[192,193,167,169,166,177,0,185,155],
[201,216,166,175,183,211,156,0,160],
[166,204,192,186,167,213,186,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,170,182,189,186,176,176,155],
[157,0,179,156,176,193,161,163,176],
[171,162,0,174,196,196,160,165,178],
[159,185,167,0,191,176,175,179,145],
[152,165,145,150,0,182,139,165,165],
[155,148,145,165,159,0,142,148,161],
[165,180,181,166,202,199,0,192,181],
[165,178,176,162,176,193,149,0,175],
[186,165,163,196,176,180,160,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,173,176,172,161,172,172,188],
[155,0,161,169,165,152,171,159,160],
[168,180,0,162,153,166,181,184,188],
[165,172,179,0,158,164,152,149,167],
[169,176,188,183,0,182,168,172,168],
[180,189,175,177,159,0,186,179,180],
[169,170,160,189,173,155,0,164,173],
[169,182,157,192,169,162,177,0,182],
[153,181,153,174,173,161,168,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,186,161,166,173,164,176,155],
[180,0,170,162,169,181,162,176,154],
[155,171,0,158,166,163,164,172,150],
[180,179,183,0,189,167,177,186,164],
[175,172,175,152,0,167,180,165,166],
[168,160,178,174,174,0,156,176,168],
[177,179,177,164,161,185,0,174,174],
[165,165,169,155,176,165,167,0,162],
[186,187,191,177,175,173,167,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,155,178,155,162,153,156],
[163,0,179,161,178,168,172,153,170],
[162,162,0,165,191,161,174,174,161],
[186,180,176,0,191,172,189,151,168],
[163,163,150,150,0,144,181,148,157],
[186,173,180,169,197,0,202,171,174],
[179,169,167,152,160,139,0,145,159],
[188,188,167,190,193,170,196,0,186],
[185,171,180,173,184,167,182,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,150,183,157,157,162,173,172],
[195,0,186,185,108,170,186,205,168],
[191,155,0,180,179,167,220,218,167],
[158,156,161,0,132,145,173,195,145],
[184,233,162,209,0,207,223,222,197],
[184,171,174,196,134,0,172,236,220],
[179,155,121,168,118,169,0,183,170],
[168,136,123,146,119,105,158,0,159],
[169,173,174,196,144,121,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,186,169,176,164,160,161,198],
[179,0,191,156,175,164,166,165,180],
[155,150,0,170,167,165,171,160,164],
[172,185,171,0,163,166,168,175,184],
[165,166,174,178,0,179,170,160,191],
[177,177,176,175,162,0,148,162,185],
[181,175,170,173,171,193,0,163,189],
[180,176,181,166,181,179,178,0,178],
[143,161,177,157,150,156,152,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,166,180,164,165,168,174],
[163,0,168,171,166,160,163,172,176],
[175,173,0,163,168,179,158,171,181],
[175,170,178,0,169,174,175,182,194],
[161,175,173,172,0,177,168,186,189],
[177,181,162,167,164,0,173,181,187],
[176,178,183,166,173,168,0,163,167],
[173,169,170,159,155,160,178,0,168],
[167,165,160,147,152,154,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,191,180,189,196,178,179],
[163,0,176,160,166,189,178,167,163],
[173,165,0,168,167,168,185,154,168],
[150,181,173,0,169,182,204,160,162],
[161,175,174,172,0,187,199,169,163],
[152,152,173,159,154,0,189,149,166],
[145,163,156,137,142,152,0,159,159],
[163,174,187,181,172,192,182,0,175],
[162,178,173,179,178,175,182,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,192,190,203,178,162,219,204],
[133,0,173,155,191,151,153,150,166],
[149,168,0,156,169,147,165,181,167],
[151,186,185,0,150,160,182,179,198],
[138,150,172,191,0,168,182,183,172],
[163,190,194,181,173,0,154,188,159],
[179,188,176,159,159,187,0,194,200],
[122,191,160,162,158,153,147,0,179],
[137,175,174,143,169,182,141,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,187,192,178,163,166,174,180],
[169,0,183,188,176,174,167,169,174],
[154,158,0,184,168,147,155,161,176],
[149,153,157,0,159,163,170,166,162],
[163,165,173,182,0,170,161,163,184],
[178,167,194,178,171,0,171,169,191],
[175,174,186,171,180,170,0,164,191],
[167,172,180,175,178,172,177,0,195],
[161,167,165,179,157,150,150,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,211,156,192,185,142,149,182],
[184,0,204,159,172,175,181,173,201],
[130,137,0,128,136,178,153,131,166],
[185,182,213,0,165,200,151,199,218],
[149,169,205,176,0,167,152,164,210],
[156,166,163,141,174,0,135,164,186],
[199,160,188,190,189,206,0,168,216],
[192,168,210,142,177,177,173,0,201],
[159,140,175,123,131,155,125,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,166,170,182,198,174,177,173],
[158,0,168,177,167,167,167,171,169],
[175,173,0,166,158,179,177,178,192],
[171,164,175,0,169,188,162,164,167],
[159,174,183,172,0,185,166,177,196],
[143,174,162,153,156,0,146,165,173],
[167,174,164,179,175,195,0,170,182],
[164,170,163,177,164,176,171,0,179],
[168,172,149,174,145,168,159,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,180,193,165,167,177,181],
[165,0,168,180,169,173,168,170,161],
[170,173,0,202,175,180,173,191,171],
[161,161,139,0,167,162,154,159,148],
[148,172,166,174,0,167,161,164,169],
[176,168,161,179,174,0,163,181,179],
[174,173,168,187,180,178,0,154,163],
[164,171,150,182,177,160,187,0,181],
[160,180,170,193,172,162,178,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,197,180,181,165,164,201],
[164,0,152,159,194,156,183,161,158],
[166,189,0,186,218,173,168,183,184],
[144,182,155,0,183,176,159,178,180],
[161,147,123,158,0,129,160,133,158],
[160,185,168,165,212,0,163,184,191],
[176,158,173,182,181,178,0,181,173],
[177,180,158,163,208,157,160,0,184],
[140,183,157,161,183,150,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,152,149,179,143,161,152,173],
[168,0,187,191,196,180,194,198,184],
[189,154,0,174,205,155,191,188,158],
[192,150,167,0,178,164,184,171,158],
[162,145,136,163,0,152,163,177,153],
[198,161,186,177,189,0,189,192,183],
[180,147,150,157,178,152,0,185,156],
[189,143,153,170,164,149,156,0,152],
[168,157,183,183,188,158,185,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,189,170,157,174,154,158,159],
[160,0,177,191,168,175,161,167,176],
[152,164,0,165,166,170,164,179,171],
[171,150,176,0,145,167,148,162,159],
[184,173,175,196,0,189,171,181,168],
[167,166,171,174,152,0,160,162,160],
[187,180,177,193,170,181,0,168,162],
[183,174,162,179,160,179,173,0,157],
[182,165,170,182,173,181,179,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,196,179,230,150,193,176,216],
[149,0,200,161,181,123,200,162,168],
[145,141,0,150,178,124,149,145,162],
[162,180,191,0,203,171,185,184,186],
[111,160,163,138,0,115,162,131,146],
[191,218,217,170,226,0,205,189,193],
[148,141,192,156,179,136,0,156,177],
[165,179,196,157,210,152,185,0,182],
[125,173,179,155,195,148,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,163,185,172,176,166,172],
[171,0,203,201,189,183,190,169,169],
[152,138,0,186,170,157,152,158,149],
[178,140,155,0,151,154,173,152,136],
[156,152,171,190,0,167,164,169,169],
[169,158,184,187,174,0,189,166,158],
[165,151,189,168,177,152,0,154,140],
[175,172,183,189,172,175,187,0,159],
[169,172,192,205,172,183,201,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,203,201,182,150,168,180,176],
[162,0,202,169,170,160,161,154,174],
[138,139,0,170,149,138,142,150,161],
[140,172,171,0,188,140,174,167,180],
[159,171,192,153,0,161,175,169,162],
[191,181,203,201,180,0,172,169,171],
[173,180,199,167,166,169,0,167,194],
[161,187,191,174,172,172,174,0,171],
[165,167,180,161,179,170,147,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,183,157,170,189,172,182,213],
[179,0,187,164,149,165,167,168,208],
[158,154,0,152,138,160,169,148,188],
[184,177,189,0,179,162,209,175,229],
[171,192,203,162,0,187,186,159,198],
[152,176,181,179,154,0,191,156,210],
[169,174,172,132,155,150,0,151,194],
[159,173,193,166,182,185,190,0,178],
[128,133,153,112,143,131,147,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,196,185,161,170,173,174],
[163,0,171,173,151,174,180,172,170],
[163,170,0,160,176,182,174,176,144],
[145,168,181,0,132,151,148,160,151],
[156,190,165,209,0,179,188,200,175],
[180,167,159,190,162,0,183,188,190],
[171,161,167,193,153,158,0,169,165],
[168,169,165,181,141,153,172,0,142],
[167,171,197,190,166,151,176,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,161,163,155,158,180,193,195],
[162,0,185,159,170,162,176,158,189],
[180,156,0,149,170,174,167,159,177],
[178,182,192,0,208,162,198,198,220],
[186,171,171,133,0,138,188,192,193],
[183,179,167,179,203,0,204,182,189],
[161,165,174,143,153,137,0,159,176],
[148,183,182,143,149,159,182,0,154],
[146,152,164,121,148,152,165,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,165,170,182,165,165,175,176],
[163,0,162,178,171,173,170,169,154],
[176,179,0,168,175,167,177,167,178],
[171,163,173,0,176,182,185,176,182],
[159,170,166,165,0,176,167,158,161],
[176,168,174,159,165,0,170,160,162],
[176,171,164,156,174,171,0,172,170],
[166,172,174,165,183,181,169,0,175],
[165,187,163,159,180,179,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,157,165,172,172,167,184],
[173,0,177,157,163,163,176,179,172],
[181,164,0,164,173,202,185,177,200],
[184,184,177,0,169,182,178,183,184],
[176,178,168,172,0,163,183,168,174],
[169,178,139,159,178,0,164,171,172],
[169,165,156,163,158,177,0,167,160],
[174,162,164,158,173,170,174,0,162],
[157,169,141,157,167,169,181,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,177,166,156,179,189,195],
[163,0,170,169,156,164,152,174,195],
[168,171,0,161,160,165,165,183,205],
[164,172,180,0,155,174,165,177,183],
[175,185,181,186,0,162,160,169,204],
[185,177,176,167,179,0,176,177,201],
[162,189,176,176,181,165,0,188,197],
[152,167,158,164,172,164,153,0,182],
[146,146,136,158,137,140,144,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,206,164,161,167,173,171,188],
[189,0,209,167,189,177,177,203,187],
[135,132,0,126,143,133,158,151,143],
[177,174,215,0,168,134,165,201,155],
[180,152,198,173,0,153,173,200,171],
[174,164,208,207,188,0,173,200,177],
[168,164,183,176,168,168,0,183,167],
[170,138,190,140,141,141,158,0,157],
[153,154,198,186,170,164,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,188,158,167,159,167,161,177],
[170,0,191,159,154,171,174,174,171],
[153,150,0,149,132,147,152,155,156],
[183,182,192,0,155,170,173,168,164],
[174,187,209,186,0,180,166,196,175],
[182,170,194,171,161,0,178,178,175],
[174,167,189,168,175,163,0,183,171],
[180,167,186,173,145,163,158,0,189],
[164,170,185,177,166,166,170,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,220,177,205,180,117,147,214],
[133,0,177,164,129,151,117,133,150],
[121,164,0,139,134,167,146,164,140],
[164,177,202,0,189,211,173,175,211],
[136,212,207,152,0,197,138,165,138],
[161,190,174,130,144,0,144,147,146],
[224,224,195,168,203,197,0,177,216],
[194,208,177,166,176,194,164,0,211],
[127,191,201,130,203,195,125,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,141,131,164,158,160,144,147],
[228,0,175,182,180,176,209,159,201],
[200,166,0,202,219,202,210,162,226],
[210,159,139,0,199,147,194,162,156],
[177,161,122,142,0,175,185,154,198],
[183,165,139,194,166,0,174,192,193],
[181,132,131,147,156,167,0,171,188],
[197,182,179,179,187,149,170,0,215],
[194,140,115,185,143,148,153,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,142,148,156,166,164,142,138],
[190,0,160,162,164,183,158,156,152],
[199,181,0,159,156,188,178,174,178],
[193,179,182,0,165,206,177,166,163],
[185,177,185,176,0,186,163,181,154],
[175,158,153,135,155,0,155,183,156],
[177,183,163,164,178,186,0,166,160],
[199,185,167,175,160,158,175,0,159],
[203,189,163,178,187,185,181,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,166,168,177,184,161,172,168],
[158,0,160,155,161,172,160,160,167],
[175,181,0,164,182,180,163,189,169],
[173,186,177,0,189,170,163,172,177],
[164,180,159,152,0,167,170,178,157],
[157,169,161,171,174,0,176,170,171],
[180,181,178,178,171,165,0,184,184],
[169,181,152,169,163,171,157,0,176],
[173,174,172,164,184,170,157,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,169,186,182,155,163,172,163],
[182,0,170,179,194,168,169,181,181],
[172,171,0,181,180,170,171,176,159],
[155,162,160,0,174,153,148,162,159],
[159,147,161,167,0,159,166,162,164],
[186,173,171,188,182,0,174,168,162],
[178,172,170,193,175,167,0,164,168],
[169,160,165,179,179,173,177,0,171],
[178,160,182,182,177,179,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,195,180,167,184,181,172,188],
[166,0,217,164,175,198,181,195,158],
[146,124,0,162,153,169,147,149,163],
[161,177,179,0,165,194,183,174,189],
[174,166,188,176,0,193,176,176,158],
[157,143,172,147,148,0,159,162,168],
[160,160,194,158,165,182,0,165,164],
[169,146,192,167,165,179,176,0,174],
[153,183,178,152,183,173,177,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,165,176,172,179,178,174,169],
[159,0,155,159,178,146,152,172,162],
[176,186,0,184,178,169,167,182,181],
[165,182,157,0,172,171,166,174,173],
[169,163,163,169,0,169,160,186,159],
[162,195,172,170,172,0,177,192,176],
[163,189,174,175,181,164,0,180,166],
[167,169,159,167,155,149,161,0,158],
[172,179,160,168,182,165,175,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,180,186,189,176,192,220,170],
[133,0,151,156,145,153,165,150,140],
[161,190,0,181,155,159,183,182,159],
[155,185,160,0,152,161,169,173,171],
[152,196,186,189,0,180,180,202,161],
[165,188,182,180,161,0,174,180,149],
[149,176,158,172,161,167,0,177,159],
[121,191,159,168,139,161,164,0,161],
[171,201,182,170,180,192,182,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,171,171,173,177,172,170],
[163,0,182,159,160,171,164,158,157],
[165,159,0,160,164,164,156,154,155],
[170,182,181,0,162,173,168,159,156],
[170,181,177,179,0,167,180,178,168],
[168,170,177,168,174,0,168,160,176],
[164,177,185,173,161,173,0,161,163],
[169,183,187,182,163,181,180,0,160],
[171,184,186,185,173,165,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,151,149,162,164,176,189,162],
[166,0,152,178,170,171,166,188,159],
[190,189,0,195,181,181,181,207,161],
[192,163,146,0,157,159,164,173,154],
[179,171,160,184,0,156,161,188,180],
[177,170,160,182,185,0,188,189,184],
[165,175,160,177,180,153,0,172,143],
[152,153,134,168,153,152,169,0,146],
[179,182,180,187,161,157,198,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,145,166,157,155,168,152,172],
[168,0,152,175,160,156,168,160,174],
[196,189,0,163,182,164,174,160,176],
[175,166,178,0,166,152,150,152,185],
[184,181,159,175,0,187,160,160,163],
[186,185,177,189,154,0,167,172,178],
[173,173,167,191,181,174,0,170,188],
[189,181,181,189,181,169,171,0,177],
[169,167,165,156,178,163,153,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,190,183,193,174,171,193,166],
[173,0,196,182,191,173,164,160,165],
[151,145,0,141,181,158,145,169,146],
[158,159,200,0,180,172,145,185,172],
[148,150,160,161,0,141,158,171,161],
[167,168,183,169,200,0,170,188,191],
[170,177,196,196,183,171,0,184,174],
[148,181,172,156,170,153,157,0,151],
[175,176,195,169,180,150,167,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,172,155,186,167,155,157,149],
[191,0,190,177,198,171,163,161,179],
[169,151,0,155,177,175,147,141,123],
[186,164,186,0,182,166,163,171,173],
[155,143,164,159,0,170,152,166,156],
[174,170,166,175,171,0,161,157,148],
[186,178,194,178,189,180,0,174,166],
[184,180,200,170,175,184,167,0,141],
[192,162,218,168,185,193,175,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,164,174,171,177,164,170],
[172,0,184,171,181,173,163,170,181],
[158,157,0,157,155,155,157,163,160],
[177,170,184,0,175,167,176,175,166],
[167,160,186,166,0,158,173,153,162],
[170,168,186,174,183,0,178,170,178],
[164,178,184,165,168,163,0,164,167],
[177,171,178,166,188,171,177,0,173],
[171,160,181,175,179,163,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,175,176,173,185,195,161,175],
[155,0,164,141,150,173,176,145,143],
[166,177,0,182,172,185,184,163,170],
[165,200,159,0,175,189,191,166,162],
[168,191,169,166,0,171,186,155,156],
[156,168,156,152,170,0,171,155,155],
[146,165,157,150,155,170,0,160,145],
[180,196,178,175,186,186,181,0,164],
[166,198,171,179,185,186,196,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,181,169,157,174,171,180,181],
[170,0,173,163,153,163,172,172,170],
[160,168,0,157,159,148,149,157,159],
[172,178,184,0,169,159,178,170,182],
[184,188,182,172,0,172,161,185,184],
[167,178,193,182,169,0,169,183,168],
[170,169,192,163,180,172,0,189,172],
[161,169,184,171,156,158,152,0,177],
[160,171,182,159,157,173,169,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,178,158,172,178,156,179],
[170,0,163,172,172,169,175,168,171],
[175,178,0,185,168,171,184,155,171],
[163,169,156,0,158,165,180,179,170],
[183,169,173,183,0,175,188,169,174],
[169,172,170,176,166,0,180,166,162],
[163,166,157,161,153,161,0,168,156],
[185,173,186,162,172,175,173,0,177],
[162,170,170,171,167,179,185,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,140,162,121,161,202,102,143],
[220,0,218,218,184,201,242,162,222],
[201,123,0,163,123,222,184,184,184],
[179,123,178,0,123,181,122,143,140],
[220,157,218,218,0,180,220,160,201],
[180,140,119,160,161,0,222,204,184],
[139,99,157,219,121,119,0,100,140],
[239,179,157,198,181,137,241,0,140],
[198,119,157,201,140,157,201,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,132,149,158,166,147,133],
[182,0,203,162,161,159,176,197,199],
[180,138,0,169,147,156,163,169,168],
[209,179,172,0,183,168,207,207,202],
[192,180,194,158,0,161,174,186,201],
[183,182,185,173,180,0,174,187,168],
[175,165,178,134,167,167,0,179,156],
[194,144,172,134,155,154,162,0,161],
[208,142,173,139,140,173,185,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,257,129,172,214,214,172,171],
[170,0,256,128,171,213,256,171,170],
[84,85,0,43,128,128,214,43,86],
[212,213,298,0,213,256,341,128,255],
[169,170,213,128,0,213,214,128,170],
[127,128,213,85,128,0,213,171,171],
[127,85,127,0,127,128,0,42,170],
[169,170,298,213,213,170,299,0,212],
[170,171,255,86,171,170,171,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,174,140,169,180,175,161],
[173,0,166,167,161,177,169,157,177],
[165,175,0,183,172,185,169,174,185],
[167,174,158,0,157,165,166,174,170],
[201,180,169,184,0,183,191,174,192],
[172,164,156,176,158,0,160,160,190],
[161,172,172,175,150,181,0,181,168],
[166,184,167,167,167,181,160,0,171],
[180,164,156,171,149,151,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,155,185,216,151,184,121,169],
[188,0,140,169,184,140,155,121,158],
[186,201,0,222,251,200,280,158,204],
[156,172,119,0,215,107,171,151,125],
[125,157,90,126,0,139,123,108,110],
[190,201,141,234,202,0,202,171,172],
[157,186,61,170,218,139,0,141,172],
[220,220,183,190,233,170,200,0,189],
[172,183,137,216,231,169,169,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,176,180,186,156,158,170,164],
[190,0,168,185,183,171,179,199,172],
[165,173,0,176,174,161,165,161,157],
[161,156,165,0,164,157,161,156,155],
[155,158,167,177,0,150,162,163,179],
[185,170,180,184,191,0,180,182,181],
[183,162,176,180,179,161,0,184,172],
[171,142,180,185,178,159,157,0,164],
[177,169,184,186,162,160,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,140,170,166,172,160,177,156],
[175,0,182,170,169,187,172,179,168],
[201,159,0,172,170,176,155,167,152],
[171,171,169,0,186,168,196,178,159],
[175,172,171,155,0,179,165,152,169],
[169,154,165,173,162,0,168,170,154],
[181,169,186,145,176,173,0,174,173],
[164,162,174,163,189,171,167,0,169],
[185,173,189,182,172,187,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,158,160,168,163,159,146,161],
[170,0,141,151,158,161,176,147,165],
[183,200,0,183,165,208,176,175,177],
[181,190,158,0,163,195,182,167,171],
[173,183,176,178,0,165,155,159,165],
[178,180,133,146,176,0,176,163,172],
[182,165,165,159,186,165,0,159,162],
[195,194,166,174,182,178,182,0,200],
[180,176,164,170,176,169,179,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,155,163,196,194,162,166,174],
[171,0,144,169,188,185,167,161,177],
[186,197,0,177,204,185,180,178,170],
[178,172,164,0,174,163,166,163,170],
[145,153,137,167,0,164,150,149,158],
[147,156,156,178,177,0,170,163,168],
[179,174,161,175,191,171,0,169,175],
[175,180,163,178,192,178,172,0,181],
[167,164,171,171,183,173,166,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 341, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_341.csv", index=False, header=False)
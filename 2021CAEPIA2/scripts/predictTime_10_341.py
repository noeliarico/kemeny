
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,185,183,176,182,170,185,166,167,175],
[156,0,176,151,172,144,159,160,175,166],
[158,165,0,148,162,149,147,153,157,173],
[165,190,193,0,169,174,169,176,177,171],
[159,169,179,172,0,147,156,174,167,168],
[171,197,192,167,194,0,175,181,171,199],
[156,182,194,172,185,166,0,167,174,196],
[175,181,188,165,167,160,174,0,168,178],
[174,166,184,164,174,170,167,173,0,173],
[166,175,168,170,173,142,145,163,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,168,179,175,182,162,181,174,189],
[150,0,142,164,151,175,152,165,145,166],
[173,199,0,190,187,185,166,192,193,200],
[162,177,151,0,171,183,174,179,168,185],
[166,190,154,170,0,175,174,187,174,182],
[159,166,156,158,166,0,154,172,171,172],
[179,189,175,167,167,187,0,181,181,197],
[160,176,149,162,154,169,160,0,161,180],
[167,196,148,173,167,170,160,180,0,172],
[152,175,141,156,159,169,144,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,137,151,170,161,168,146,158,131],
[190,0,171,179,155,144,168,148,161,177],
[204,170,0,184,195,145,171,184,184,178],
[190,162,157,0,183,190,182,153,157,166],
[171,186,146,158,0,179,203,145,155,171],
[180,197,196,151,162,0,198,166,144,173],
[173,173,170,159,138,143,0,131,153,159],
[195,193,157,188,196,175,210,0,159,179],
[183,180,157,184,186,197,188,182,0,213],
[210,164,163,175,170,168,182,162,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,159,161,168,159,171,149,152,166],
[184,0,180,174,178,167,177,171,185,178],
[182,161,0,174,174,155,163,165,163,163],
[180,167,167,0,184,171,183,181,170,174],
[173,163,167,157,0,166,170,172,165,183],
[182,174,186,170,175,0,185,172,187,183],
[170,164,178,158,171,156,0,164,168,172],
[192,170,176,160,169,169,177,0,171,173],
[189,156,178,171,176,154,173,170,0,174],
[175,163,178,167,158,158,169,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,164,163,179,166,148,158,171,169],
[157,0,160,160,159,152,149,152,162,159],
[177,181,0,171,175,160,164,161,168,162],
[178,181,170,0,188,159,177,177,176,192],
[162,182,166,153,0,166,158,159,153,180],
[175,189,181,182,175,0,178,167,189,186],
[193,192,177,164,183,163,0,159,174,178],
[183,189,180,164,182,174,182,0,181,186],
[170,179,173,165,188,152,167,160,0,174],
[172,182,179,149,161,155,163,155,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,159,185,167,183,179,177,171],
[163,0,172,167,171,159,172,166,175,171],
[167,169,0,159,166,174,157,172,184,179],
[182,174,182,0,172,163,170,169,176,176],
[156,170,175,169,0,163,165,178,176,171],
[174,182,167,178,178,0,168,169,186,183],
[158,169,184,171,176,173,0,174,201,184],
[162,175,169,172,163,172,167,0,185,171],
[164,166,157,165,165,155,140,156,0,173],
[170,170,162,165,170,158,157,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,185,209,206,188,247,129,243,209],
[134,0,100,202,153,234,163,212,225,125],
[156,241,0,179,121,186,253,135,202,183],
[132,139,162,0,176,142,183,206,191,85],
[135,188,220,165,0,206,203,152,181,110],
[153,107,155,199,135,0,195,122,222,144],
[94,178,88,158,138,146,0,158,181,139],
[212,129,206,135,189,219,183,0,158,165],
[98,116,139,150,160,119,160,183,0,150],
[132,216,158,256,231,197,202,176,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,153,168,174,148,191,159,176],
[173,0,180,184,180,169,170,204,184,172],
[171,161,0,171,168,160,161,190,167,169],
[188,157,170,0,156,163,171,200,181,171],
[173,161,173,185,0,163,168,201,184,174],
[167,172,181,178,178,0,164,183,186,180],
[193,171,180,170,173,177,0,198,173,179],
[150,137,151,141,140,158,143,0,157,157],
[182,157,174,160,157,155,168,184,0,170],
[165,169,172,170,167,161,162,184,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,162,186,182,194,161,183,181,178],
[156,0,156,167,163,182,153,180,161,163],
[179,185,0,182,170,194,176,179,178,170],
[155,174,159,0,175,188,168,190,178,157],
[159,178,171,166,0,194,171,185,187,176],
[147,159,147,153,147,0,153,160,157,147],
[180,188,165,173,170,188,0,197,179,163],
[158,161,162,151,156,181,144,0,174,150],
[160,180,163,163,154,184,162,167,0,159],
[163,178,171,184,165,194,178,191,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,187,181,185,173,185,171,165,167],
[175,0,177,181,175,174,170,169,182,164],
[154,164,0,171,177,165,149,155,170,170],
[160,160,170,0,190,178,170,171,180,160],
[156,166,164,151,0,166,162,150,162,155],
[168,167,176,163,175,0,177,159,170,156],
[156,171,192,171,179,164,0,169,176,165],
[170,172,186,170,191,182,172,0,188,174],
[176,159,171,161,179,171,165,153,0,162],
[174,177,171,181,186,185,176,167,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,195,159,163,160,128,121,210,168],
[174,0,167,158,172,142,138,146,203,185],
[146,174,0,147,117,136,138,138,168,177],
[182,183,194,0,187,208,156,143,246,163],
[178,169,224,154,0,133,160,143,230,184],
[181,199,205,133,208,0,163,162,229,203],
[213,203,203,185,181,178,0,172,212,170],
[220,195,203,198,198,179,169,0,208,185],
[131,138,173,95,111,112,129,133,0,135],
[173,156,164,178,157,138,171,156,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,155,169,177,170,155,172,165,185],
[175,0,158,175,146,167,166,165,162,168],
[186,183,0,195,178,189,165,196,187,180],
[172,166,146,0,166,173,168,161,161,185],
[164,195,163,175,0,192,177,187,166,185],
[171,174,152,168,149,0,158,154,152,185],
[186,175,176,173,164,183,0,178,165,188],
[169,176,145,180,154,187,163,0,159,178],
[176,179,154,180,175,189,176,182,0,190],
[156,173,161,156,156,156,153,163,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,183,174,160,193,179,157,178,168],
[177,0,169,173,169,191,178,190,191,176],
[158,172,0,159,163,181,177,149,175,161],
[167,168,182,0,154,177,183,184,185,169],
[181,172,178,187,0,183,189,164,179,183],
[148,150,160,164,158,0,168,154,174,139],
[162,163,164,158,152,173,0,154,165,147],
[184,151,192,157,177,187,187,0,165,154],
[163,150,166,156,162,167,176,176,0,154],
[173,165,180,172,158,202,194,187,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,241,136,161,166,195,217,244,106],
[192,0,211,117,161,161,173,143,210,222],
[100,130,0,103,204,74,147,151,196,96],
[205,224,238,0,135,172,196,200,245,172],
[180,180,137,206,0,177,155,176,132,114],
[175,180,267,169,164,0,176,222,213,183],
[146,168,194,145,186,165,0,193,196,154],
[124,198,190,141,165,119,148,0,185,110],
[97,131,145,96,209,128,145,156,0,101],
[235,119,245,169,227,158,187,231,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,187,170,159,174,176,180,172,180],
[161,0,163,150,148,165,170,183,172,152],
[154,178,0,141,142,165,150,156,150,158],
[171,191,200,0,170,193,179,172,177,184],
[182,193,199,171,0,175,164,190,178,184],
[167,176,176,148,166,0,168,166,169,167],
[165,171,191,162,177,173,0,190,185,188],
[161,158,185,169,151,175,151,0,160,167],
[169,169,191,164,163,172,156,181,0,182],
[161,189,183,157,157,174,153,174,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,179,181,182,180,154,151,199,187],
[155,0,131,141,188,178,150,148,181,176],
[162,210,0,176,173,188,167,152,189,195],
[160,200,165,0,176,205,163,150,177,188],
[159,153,168,165,0,203,136,173,184,181],
[161,163,153,136,138,0,129,146,182,155],
[187,191,174,178,205,212,0,150,203,207],
[190,193,189,191,168,195,191,0,203,231],
[142,160,152,164,157,159,138,138,0,163],
[154,165,146,153,160,186,134,110,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,185,169,171,167,163,157,182],
[168,0,177,166,168,151,148,168,155,169],
[165,164,0,178,164,169,162,167,149,165],
[156,175,163,0,164,170,168,166,155,183],
[172,173,177,177,0,172,160,177,153,171],
[170,190,172,171,169,0,173,172,179,183],
[174,193,179,173,181,168,0,168,171,181],
[178,173,174,175,164,169,173,0,161,167],
[184,186,192,186,188,162,170,180,0,180],
[159,172,176,158,170,158,160,174,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,164,167,165,161,162,159,166,158],
[187,0,183,169,173,173,165,167,179,170],
[177,158,0,168,159,168,144,171,169,168],
[174,172,173,0,165,169,160,162,180,172],
[176,168,182,176,0,183,170,188,177,185],
[180,168,173,172,158,0,165,173,177,174],
[179,176,197,181,171,176,0,167,177,171],
[182,174,170,179,153,168,174,0,183,175],
[175,162,172,161,164,164,164,158,0,166],
[183,171,173,169,156,167,170,166,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,173,178,182,170,174,182,174],
[177,0,178,176,179,179,174,171,170,170],
[171,163,0,161,186,182,160,170,168,179],
[168,165,180,0,160,166,162,178,173,161],
[163,162,155,181,0,164,166,170,173,163],
[159,162,159,175,177,0,150,162,176,169],
[171,167,181,179,175,191,0,178,180,179],
[167,170,171,163,171,179,163,0,167,162],
[159,171,173,168,168,165,161,174,0,157],
[167,171,162,180,178,172,162,179,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,139,150,140,184,143,140,155,171],
[188,0,167,173,166,185,148,168,174,189],
[202,174,0,180,172,183,167,185,198,183],
[191,168,161,0,166,167,150,157,176,159],
[201,175,169,175,0,178,158,172,203,181],
[157,156,158,174,163,0,156,163,185,163],
[198,193,174,191,183,185,0,169,190,174],
[201,173,156,184,169,178,172,0,176,193],
[186,167,143,165,138,156,151,165,0,162],
[170,152,158,182,160,178,167,148,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,210,174,216,184,180,188,161,171],
[201,0,177,173,217,203,175,179,187,170],
[131,164,0,177,186,178,131,178,176,158],
[167,168,164,0,192,182,181,164,177,155],
[125,124,155,149,0,136,138,150,135,103],
[157,138,163,159,205,0,161,163,143,131],
[161,166,210,160,203,180,0,191,178,173],
[153,162,163,177,191,178,150,0,162,165],
[180,154,165,164,206,198,163,179,0,177],
[170,171,183,186,238,210,168,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,180,178,183,179,180,176,162],
[162,0,169,182,166,162,162,162,173,145],
[168,172,0,174,180,168,158,163,181,155],
[161,159,167,0,151,157,165,164,153,141],
[163,175,161,190,0,177,187,177,173,153],
[158,179,173,184,164,0,168,179,171,151],
[162,179,183,176,154,173,0,175,173,160],
[161,179,178,177,164,162,166,0,181,172],
[165,168,160,188,168,170,168,160,0,160],
[179,196,186,200,188,190,181,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,185,182,167,164,179,177,179,173],
[169,0,162,185,163,164,163,162,163,171],
[156,179,0,172,172,157,170,164,172,175],
[159,156,169,0,138,151,164,155,165,169],
[174,178,169,203,0,172,178,172,166,179],
[177,177,184,190,169,0,160,188,185,176],
[162,178,171,177,163,181,0,177,170,174],
[164,179,177,186,169,153,164,0,170,163],
[162,178,169,176,175,156,171,171,0,153],
[168,170,166,172,162,165,167,178,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,190,155,180,164,154,167,175,187],
[172,0,171,178,176,156,157,164,165,177],
[151,170,0,168,170,172,166,161,182,178],
[186,163,173,0,171,160,153,163,172,177],
[161,165,171,170,0,151,149,155,171,173],
[177,185,169,181,190,0,161,171,178,193],
[187,184,175,188,192,180,0,169,174,185],
[174,177,180,178,186,170,172,0,177,188],
[166,176,159,169,170,163,167,164,0,177],
[154,164,163,164,168,148,156,153,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,161,184,186,172,197,165,182,152],
[139,0,160,189,168,172,176,177,169,171],
[180,181,0,147,187,190,192,151,183,176],
[157,152,194,0,164,183,173,161,198,164],
[155,173,154,177,0,161,177,144,149,173],
[169,169,151,158,180,0,166,163,173,144],
[144,165,149,168,164,175,0,139,151,156],
[176,164,190,180,197,178,202,0,212,175],
[159,172,158,143,192,168,190,129,0,163],
[189,170,165,177,168,197,185,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,152,150,183,154,169,174,177,178],
[173,0,162,156,183,175,167,177,176,178],
[189,179,0,180,198,166,171,184,179,191],
[191,185,161,0,198,172,173,191,159,178],
[158,158,143,143,0,153,172,167,158,166],
[187,166,175,169,188,0,181,172,171,188],
[172,174,170,168,169,160,0,190,168,172],
[167,164,157,150,174,169,151,0,144,190],
[164,165,162,182,183,170,173,197,0,178],
[163,163,150,163,175,153,169,151,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,121,129,140,164,178,129,164,162],
[178,0,141,133,158,140,150,153,139,138],
[220,200,0,173,187,183,185,149,163,166],
[212,208,168,0,211,184,189,189,176,173],
[201,183,154,130,0,163,190,164,126,183],
[177,201,158,157,178,0,150,169,181,177],
[163,191,156,152,151,191,0,170,150,188],
[212,188,192,152,177,172,171,0,190,175],
[177,202,178,165,215,160,191,151,0,172],
[179,203,175,168,158,164,153,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,150,175,169,179,169,163,178,171],
[164,0,150,168,171,159,176,166,174,172],
[191,191,0,203,174,162,175,199,191,186],
[166,173,138,0,163,152,168,159,161,159],
[172,170,167,178,0,158,192,168,172,174],
[162,182,179,189,183,0,183,178,175,174],
[172,165,166,173,149,158,0,157,166,166],
[178,175,142,182,173,163,184,0,176,154],
[163,167,150,180,169,166,175,165,0,173],
[170,169,155,182,167,167,175,187,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,192,185,187,174,178,169,207,184],
[160,0,191,169,186,161,173,175,216,168],
[149,150,0,164,172,166,164,148,203,175],
[156,172,177,0,188,180,174,174,210,190],
[154,155,169,153,0,149,159,172,205,174],
[167,180,175,161,192,0,190,177,210,189],
[163,168,177,167,182,151,0,151,199,164],
[172,166,193,167,169,164,190,0,211,172],
[134,125,138,131,136,131,142,130,0,141],
[157,173,166,151,167,152,177,169,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,172,151,154,164,166,161,158,161],
[191,0,179,163,168,170,176,170,157,162],
[169,162,0,159,162,154,173,161,158,146],
[190,178,182,0,182,161,181,170,177,180],
[187,173,179,159,0,165,177,167,174,174],
[177,171,187,180,176,0,185,168,163,172],
[175,165,168,160,164,156,0,172,154,161],
[180,171,180,171,174,173,169,0,164,163],
[183,184,183,164,167,178,187,177,0,171],
[180,179,195,161,167,169,180,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,181,182,192,175,197,150,181,212],
[134,0,189,197,178,159,162,211,141,192],
[160,152,0,139,180,177,163,195,174,194],
[159,144,202,0,197,157,179,167,149,218],
[149,163,161,144,0,177,156,152,174,177],
[166,182,164,184,164,0,189,141,206,180],
[144,179,178,162,185,152,0,183,150,160],
[191,130,146,174,189,200,158,0,155,169],
[160,200,167,192,167,135,191,186,0,193],
[129,149,147,123,164,161,181,172,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,151,182,159,153,146,178,170,183],
[184,0,181,202,169,173,156,179,188,193],
[190,160,0,191,164,140,161,167,179,194],
[159,139,150,0,147,119,134,157,151,145],
[182,172,177,194,0,166,185,175,193,205],
[188,168,201,222,175,0,178,197,190,218],
[195,185,180,207,156,163,0,190,202,195],
[163,162,174,184,166,144,151,0,176,189],
[171,153,162,190,148,151,139,165,0,187],
[158,148,147,196,136,123,146,152,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,173,172,176,175,170,173,178],
[175,0,167,177,172,180,182,161,167,161],
[172,174,0,175,174,164,164,172,165,165],
[168,164,166,0,181,176,171,166,159,158],
[169,169,167,160,0,171,175,162,160,169],
[165,161,177,165,170,0,166,173,158,167],
[166,159,177,170,166,175,0,156,160,172],
[171,180,169,175,179,168,185,0,180,170],
[168,174,176,182,181,183,181,161,0,164],
[163,180,176,183,172,174,169,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,127,160,182,125,148,115,182,199],
[134,0,60,96,35,116,98,60,124,75],
[214,281,0,216,153,188,223,171,229,200],
[181,245,125,0,188,220,167,153,156,190],
[159,306,188,153,0,256,240,207,274,200],
[216,225,153,121,85,0,193,112,85,193],
[193,243,118,174,101,148,0,60,169,139],
[226,281,170,188,134,229,281,0,210,145],
[159,217,112,185,67,256,172,131,0,200],
[142,266,141,151,141,148,202,196,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,178,177,175,167,161,163,178,192],
[186,0,182,174,171,170,176,171,188,193],
[163,159,0,186,162,150,151,162,166,179],
[164,167,155,0,160,159,152,163,166,161],
[166,170,179,181,0,170,162,167,178,180],
[174,171,191,182,171,0,178,177,178,170],
[180,165,190,189,179,163,0,168,177,184],
[178,170,179,178,174,164,173,0,177,185],
[163,153,175,175,163,163,164,164,0,183],
[149,148,162,180,161,171,157,156,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,187,180,174,192,161,191,187,181],
[177,0,189,148,184,185,178,183,165,179],
[154,152,0,138,145,160,132,154,122,142],
[161,193,203,0,165,181,150,162,166,163],
[167,157,196,176,0,186,173,166,171,171],
[149,156,181,160,155,0,169,156,149,159],
[180,163,209,191,168,172,0,165,168,165],
[150,158,187,179,175,185,176,0,161,183],
[154,176,219,175,170,192,173,180,0,182],
[160,162,199,178,170,182,176,158,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,171,134,180,119,173,137,175,155],
[213,0,197,129,143,166,178,144,225,181],
[170,144,0,137,189,124,149,134,204,159],
[207,212,204,0,184,143,144,147,193,186],
[161,198,152,157,0,185,175,200,227,175],
[222,175,217,198,156,0,154,180,283,225],
[168,163,192,197,166,187,0,159,216,157],
[204,197,207,194,141,161,182,0,209,201],
[166,116,137,148,114,58,125,132,0,145],
[186,160,182,155,166,116,184,140,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,193,193,178,168,188,171,155,185],
[161,0,181,165,149,159,183,167,165,160],
[148,160,0,164,163,170,191,172,179,182],
[148,176,177,0,154,171,160,172,164,165],
[163,192,178,187,0,182,196,167,161,174],
[173,182,171,170,159,0,158,158,152,170],
[153,158,150,181,145,183,0,152,155,163],
[170,174,169,169,174,183,189,0,177,169],
[186,176,162,177,180,189,186,164,0,192],
[156,181,159,176,167,171,178,172,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,97,104,157,168,79,122,137,60],
[260,0,170,147,236,216,119,155,205,188],
[244,171,0,207,196,143,140,160,176,136],
[237,194,134,0,229,175,146,201,184,160],
[184,105,145,112,0,125,79,108,162,94],
[173,125,198,166,216,0,98,115,178,147],
[262,222,201,195,262,243,0,230,165,210],
[219,186,181,140,233,226,111,0,213,145],
[204,136,165,157,179,163,176,128,0,148],
[281,153,205,181,247,194,131,196,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,195,158,193,107,216,160,200,147],
[119,0,169,50,105,57,84,92,103,127],
[146,172,0,50,118,98,192,58,134,150],
[183,291,291,0,143,203,201,176,176,210],
[148,236,223,198,0,166,148,165,183,173],
[234,284,243,138,175,0,191,147,169,126],
[125,257,149,140,193,150,0,85,121,129],
[181,249,283,165,176,194,256,0,240,164],
[141,238,207,165,158,172,220,101,0,111],
[194,214,191,131,168,215,212,177,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,207,181,200,153,205,192,181,124],
[155,0,157,170,166,182,201,157,147,154],
[134,184,0,191,176,163,241,128,136,161],
[160,171,150,0,135,128,153,153,136,163],
[141,175,165,206,0,146,179,137,111,133],
[188,159,178,213,195,0,255,175,177,178],
[136,140,100,188,162,86,0,115,127,114],
[149,184,213,188,204,166,226,0,168,177],
[160,194,205,205,230,164,214,173,0,138],
[217,187,180,178,208,163,227,164,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,145,162,160,176,169,141,169],
[176,0,193,149,150,144,167,154,139,156],
[167,148,0,160,156,155,167,158,136,177],
[196,192,181,0,178,165,201,171,182,198],
[179,191,185,163,0,176,186,173,153,181],
[181,197,186,176,165,0,185,181,157,175],
[165,174,174,140,155,156,0,149,157,167],
[172,187,183,170,168,160,192,0,147,179],
[200,202,205,159,188,184,184,194,0,204],
[172,185,164,143,160,166,174,162,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,145,127,191,160,167,151,172,174],
[234,0,189,122,220,182,181,182,182,202],
[196,152,0,173,222,133,169,197,191,178],
[214,219,168,0,223,203,214,179,209,204],
[150,121,119,118,0,136,137,124,123,144],
[181,159,208,138,205,0,171,161,213,207],
[174,160,172,127,204,170,0,198,186,185],
[190,159,144,162,217,180,143,0,178,193],
[169,159,150,132,218,128,155,163,0,138],
[167,139,163,137,197,134,156,148,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,176,179,178,188,152,168,157],
[178,0,178,185,175,171,168,169,161,172],
[177,163,0,182,171,171,184,151,160,165],
[165,156,159,0,160,167,173,171,159,173],
[162,166,170,181,0,183,173,159,165,172],
[163,170,170,174,158,0,176,161,173,169],
[153,173,157,168,168,165,0,175,163,162],
[189,172,190,170,182,180,166,0,166,168],
[173,180,181,182,176,168,178,175,0,167],
[184,169,176,168,169,172,179,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,198,182,198,172,180,183,191,168],
[173,0,159,157,168,151,168,190,158,182],
[143,182,0,160,179,172,181,165,168,190],
[159,184,181,0,174,173,190,171,157,180],
[143,173,162,167,0,164,178,189,160,178],
[169,190,169,168,177,0,209,170,173,178],
[161,173,160,151,163,132,0,159,170,177],
[158,151,176,170,152,171,182,0,169,164],
[150,183,173,184,181,168,171,172,0,173],
[173,159,151,161,163,163,164,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,168,185,165,179,179,169,161,187],
[154,0,159,173,151,169,174,174,157,158],
[173,182,0,176,164,176,171,171,175,174],
[156,168,165,0,145,173,168,168,160,159],
[176,190,177,196,0,195,168,179,174,178],
[162,172,165,168,146,0,169,170,159,157],
[162,167,170,173,173,172,0,174,166,165],
[172,167,170,173,162,171,167,0,161,174],
[180,184,166,181,167,182,175,180,0,169],
[154,183,167,182,163,184,176,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,183,182,166,190,164,162,158,172],
[162,0,141,173,147,181,145,143,146,134],
[158,200,0,168,171,179,173,198,164,179],
[159,168,173,0,170,162,161,164,140,179],
[175,194,170,171,0,190,171,179,177,180],
[151,160,162,179,151,0,158,154,134,159],
[177,196,168,180,170,183,0,181,167,189],
[179,198,143,177,162,187,160,0,160,145],
[183,195,177,201,164,207,174,181,0,199],
[169,207,162,162,161,182,152,196,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,168,162,175,168,186,156,185],
[175,0,169,165,161,171,174,176,156,166],
[176,172,0,173,174,174,176,188,166,176],
[173,176,168,0,168,165,173,187,159,179],
[179,180,167,173,0,171,176,194,163,184],
[166,170,167,176,170,0,183,197,178,184],
[173,167,165,168,165,158,0,179,161,170],
[155,165,153,154,147,144,162,0,161,154],
[185,185,175,182,178,163,180,180,0,184],
[156,175,165,162,157,157,171,187,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,161,202,170,188,133,149,142,167],
[163,0,163,195,178,218,157,133,169,185],
[180,178,0,180,184,203,174,166,189,188],
[139,146,161,0,187,218,169,135,115,181],
[171,163,157,154,0,210,182,158,131,168],
[153,123,138,123,131,0,133,90,118,170],
[208,184,167,172,159,208,0,184,156,191],
[192,208,175,206,183,251,157,0,150,214],
[199,172,152,226,210,223,185,191,0,228],
[174,156,153,160,173,171,150,127,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,159,164,158,178,172,169,163,163],
[182,0,155,182,157,167,175,150,161,155],
[182,186,0,185,176,184,184,158,167,170],
[177,159,156,0,165,160,177,152,161,149],
[183,184,165,176,0,168,174,160,165,168],
[163,174,157,181,173,0,184,153,172,176],
[169,166,157,164,167,157,0,149,168,149],
[172,191,183,189,181,188,192,0,176,169],
[178,180,174,180,176,169,173,165,0,161],
[178,186,171,192,173,165,192,172,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,164,168,183,187,158,154,166],
[180,0,159,176,175,184,179,169,180,186],
[174,182,0,170,168,183,182,176,175,173],
[177,165,171,0,161,162,180,168,167,180],
[173,166,173,180,0,174,184,158,185,179],
[158,157,158,179,167,0,159,160,157,167],
[154,162,159,161,157,182,0,152,152,156],
[183,172,165,173,183,181,189,0,178,192],
[187,161,166,174,156,184,189,163,0,204],
[175,155,168,161,162,174,185,149,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,181,175,177,169,189,176,171],
[164,0,176,161,175,168,158,164,164,167],
[163,165,0,172,172,176,151,152,170,168],
[160,180,169,0,172,178,171,170,179,174],
[166,166,169,169,0,173,156,173,169,179],
[164,173,165,163,168,0,150,171,172,163],
[172,183,190,170,185,191,0,163,176,195],
[152,177,189,171,168,170,178,0,178,174],
[165,177,171,162,172,169,165,163,0,178],
[170,174,173,167,162,178,146,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,184,184,7,148,7,7,305,36],
[334,0,184,341,7,298,200,164,305,36],
[157,157,0,298,164,298,164,164,298,157],
[157,0,43,0,7,0,7,7,164,36],
[334,334,177,334,0,334,341,193,298,36],
[193,43,43,341,7,0,43,164,164,36],
[334,141,177,334,0,298,0,157,298,36],
[334,177,177,334,148,177,184,0,298,177],
[36,36,43,177,43,177,43,43,0,36],
[305,305,184,305,305,305,305,164,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,155,161,148,134,142,168,140,164],
[213,0,184,192,192,182,173,206,168,186],
[186,157,0,191,169,152,159,190,159,186],
[180,149,150,0,139,158,153,179,162,171],
[193,149,172,202,0,149,189,184,186,178],
[207,159,189,183,192,0,189,192,181,187],
[199,168,182,188,152,152,0,217,172,200],
[173,135,151,162,157,149,124,0,151,170],
[201,173,182,179,155,160,169,190,0,197],
[177,155,155,170,163,154,141,171,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,106,88,207,149,144,193,173,148],
[209,0,196,143,156,320,279,204,157,234],
[235,145,0,125,201,203,161,188,136,218],
[253,198,216,0,237,246,186,232,141,202],
[134,185,140,104,0,202,134,160,104,148],
[192,21,138,95,139,0,199,191,102,114],
[197,62,180,155,207,142,0,182,152,123],
[148,137,153,109,181,150,159,0,152,157],
[168,184,205,200,237,239,189,189,0,186],
[193,107,123,139,193,227,218,184,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,182,190,180,182,176,186,196,205],
[184,0,181,173,164,178,182,188,175,201],
[159,160,0,161,172,162,173,158,160,182],
[151,168,180,0,176,182,175,172,149,177],
[161,177,169,165,0,181,167,172,165,187],
[159,163,179,159,160,0,158,172,155,182],
[165,159,168,166,174,183,0,166,166,179],
[155,153,183,169,169,169,175,0,163,193],
[145,166,181,192,176,186,175,178,0,200],
[136,140,159,164,154,159,162,148,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,156,159,150,201,160,155,160,156],
[160,0,141,152,146,193,152,164,180,166],
[185,200,0,183,173,206,164,165,190,189],
[182,189,158,0,162,181,173,173,181,179],
[191,195,168,179,0,217,194,168,201,179],
[140,148,135,160,124,0,156,137,157,142],
[181,189,177,168,147,185,0,164,170,160],
[186,177,176,168,173,204,177,0,198,189],
[181,161,151,160,140,184,171,143,0,143],
[185,175,152,162,162,199,181,152,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,173,167,154,163,185,124,161,161],
[197,0,188,199,181,186,204,159,176,198],
[168,153,0,173,142,155,193,157,171,180],
[174,142,168,0,157,180,178,142,161,193],
[187,160,199,184,0,173,206,176,191,181],
[178,155,186,161,168,0,184,150,162,158],
[156,137,148,163,135,157,0,128,165,156],
[217,182,184,199,165,191,213,0,184,226],
[180,165,170,180,150,179,176,157,0,184],
[180,143,161,148,160,183,185,115,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,160,167,174,172,192,179,178,166],
[168,0,151,149,181,157,162,155,157,166],
[181,190,0,164,171,162,198,176,172,177],
[174,192,177,0,175,166,176,155,157,177],
[167,160,170,166,0,159,172,149,165,148],
[169,184,179,175,182,0,181,170,174,180],
[149,179,143,165,169,160,0,156,167,163],
[162,186,165,186,192,171,185,0,181,179],
[163,184,169,184,176,167,174,160,0,166],
[175,175,164,164,193,161,178,162,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,196,178,182,166,184,175,184],
[168,0,167,193,167,172,176,187,175,172],
[163,174,0,182,177,165,161,165,181,156],
[145,148,159,0,146,142,146,164,152,155],
[163,174,164,195,0,139,151,154,164,158],
[159,169,176,199,202,0,158,161,183,163],
[175,165,180,195,190,183,0,179,175,186],
[157,154,176,177,187,180,162,0,176,176],
[166,166,160,189,177,158,166,165,0,172],
[157,169,185,186,183,178,155,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,200,199,158,204,182,216,193,200],
[139,0,176,200,168,187,148,176,167,187],
[141,165,0,195,172,184,157,173,160,175],
[142,141,146,0,136,196,167,157,146,165],
[183,173,169,205,0,217,170,204,180,157],
[137,154,157,145,124,0,145,169,132,154],
[159,193,184,174,171,196,0,172,171,194],
[125,165,168,184,137,172,169,0,167,157],
[148,174,181,195,161,209,170,174,0,187],
[141,154,166,176,184,187,147,184,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,147,186,168,184,171,164,159,138],
[161,0,156,160,198,133,164,165,184,159],
[194,185,0,185,187,195,217,163,205,176],
[155,181,156,0,199,166,193,190,197,154],
[173,143,154,142,0,154,176,154,166,141],
[157,208,146,175,187,0,189,154,200,160],
[170,177,124,148,165,152,0,120,171,131],
[177,176,178,151,187,187,221,0,200,132],
[182,157,136,144,175,141,170,141,0,136],
[203,182,165,187,200,181,210,209,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,181,150,155,165,155,176,183,163],
[172,0,178,161,177,182,166,186,159,177],
[160,163,0,168,159,163,158,169,153,156],
[191,180,173,0,160,162,169,183,166,184],
[186,164,182,181,0,182,172,174,170,159],
[176,159,178,179,159,0,154,167,168,166],
[186,175,183,172,169,187,0,183,167,164],
[165,155,172,158,167,174,158,0,167,161],
[158,182,188,175,171,173,174,174,0,168],
[178,164,185,157,182,175,177,180,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,167,136,151,102,184,179,170],
[170,0,170,199,183,151,158,190,169,137],
[163,171,0,203,172,163,156,194,211,225],
[174,142,138,0,157,135,113,189,164,152],
[205,158,169,184,0,134,136,196,169,146],
[190,190,178,206,207,0,151,233,190,173],
[239,183,185,228,205,190,0,217,195,157],
[157,151,147,152,145,108,124,0,160,167],
[162,172,130,177,172,151,146,181,0,182],
[171,204,116,189,195,168,184,174,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,155,150,169,151,150,159,141,137],
[183,0,177,173,189,190,163,173,155,166],
[186,164,0,162,184,170,165,167,148,163],
[191,168,179,0,186,178,166,187,146,161],
[172,152,157,155,0,150,153,140,141,142],
[190,151,171,163,191,0,165,163,157,158],
[191,178,176,175,188,176,0,186,161,175],
[182,168,174,154,201,178,155,0,153,163],
[200,186,193,195,200,184,180,188,0,159],
[204,175,178,180,199,183,166,178,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,181,175,157,178,185,173,163],
[176,0,162,178,161,160,159,191,174,176],
[164,179,0,175,163,176,163,185,180,159],
[160,163,166,0,173,167,175,184,180,176],
[166,180,178,168,0,159,171,191,179,165],
[184,181,165,174,182,0,176,189,189,170],
[163,182,178,166,170,165,0,175,179,166],
[156,150,156,157,150,152,166,0,160,164],
[168,167,161,161,162,152,162,181,0,155],
[178,165,182,165,176,171,175,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,165,176,182,152,160,188,197,162],
[157,0,161,148,145,185,193,213,181,158],
[176,180,0,167,165,182,167,211,183,159],
[165,193,174,0,157,201,170,207,184,186],
[159,196,176,184,0,203,190,181,176,159],
[189,156,159,140,138,0,153,192,178,158],
[181,148,174,171,151,188,0,194,174,159],
[153,128,130,134,160,149,147,0,171,147],
[144,160,158,157,165,163,167,170,0,164],
[179,183,182,155,182,183,182,194,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,177,191,160,198,146,195,175,220],
[213,0,211,196,195,217,132,206,189,201],
[164,130,0,162,116,154,147,177,169,124],
[150,145,179,0,177,176,173,180,184,124],
[181,146,225,164,0,187,126,175,183,183],
[143,124,187,165,154,0,158,155,186,170],
[195,209,194,168,215,183,0,193,189,190],
[146,135,164,161,166,186,148,0,172,167],
[166,152,172,157,158,155,152,169,0,162],
[121,140,217,217,158,171,151,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,159,168,167,164,168,174,177,177],
[167,0,159,159,175,162,172,171,161,178],
[182,182,0,169,180,178,175,188,178,174],
[173,182,172,0,182,165,176,184,178,183],
[174,166,161,159,0,172,182,175,180,180],
[177,179,163,176,169,0,175,174,173,175],
[173,169,166,165,159,166,0,172,178,179],
[167,170,153,157,166,167,169,0,174,162],
[164,180,163,163,161,168,163,167,0,170],
[164,163,167,158,161,166,162,179,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,189,161,168,171,175,162,172,168],
[158,0,175,173,176,161,172,171,176,170],
[152,166,0,158,171,175,160,165,165,157],
[180,168,183,0,169,167,181,160,173,162],
[173,165,170,172,0,170,175,177,169,177],
[170,180,166,174,171,0,175,178,167,183],
[166,169,181,160,166,166,0,163,163,179],
[179,170,176,181,164,163,178,0,157,175],
[169,165,176,168,172,174,178,184,0,177],
[173,171,184,179,164,158,162,166,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,176,191,172,199,175,166,168,197],
[161,0,165,226,115,162,171,183,129,175],
[165,176,0,186,161,178,190,186,169,208],
[150,115,155,0,140,143,155,161,121,145],
[169,226,180,201,0,175,196,212,203,211],
[142,179,163,198,166,0,158,190,149,196],
[166,170,151,186,145,183,0,187,161,181],
[175,158,155,180,129,151,154,0,138,190],
[173,212,172,220,138,192,180,203,0,158],
[144,166,133,196,130,145,160,151,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,153,205,93,111,150,225,209,135],
[174,0,165,200,200,268,155,209,208,192],
[188,176,0,161,163,255,135,213,209,183],
[136,141,180,0,140,197,107,214,202,154],
[248,141,178,201,0,201,184,203,179,254],
[230,73,86,144,140,0,150,198,174,162],
[191,186,206,234,157,191,0,221,219,233],
[116,132,128,127,138,143,120,0,249,116],
[132,133,132,139,162,167,122,92,0,154],
[206,149,158,187,87,179,108,225,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,175,165,183,163,175,189,165],
[168,0,161,178,161,160,166,158,169,166],
[175,180,0,178,163,186,172,172,182,170],
[166,163,163,0,158,168,158,164,169,164],
[176,180,178,183,0,188,168,170,179,165],
[158,181,155,173,153,0,156,159,177,166],
[178,175,169,183,173,185,0,168,176,179],
[166,183,169,177,171,182,173,0,181,168],
[152,172,159,172,162,164,165,160,0,173],
[176,175,171,177,176,175,162,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,170,188,171,184,172,201,164],
[168,0,168,170,199,159,176,147,194,149],
[175,173,0,167,195,156,169,147,178,160],
[171,171,174,0,195,155,176,170,179,152],
[153,142,146,146,0,127,134,141,169,141],
[170,182,185,186,214,0,181,171,198,173],
[157,165,172,165,207,160,0,159,191,146],
[169,194,194,171,200,170,182,0,200,160],
[140,147,163,162,172,143,150,141,0,144],
[177,192,181,189,200,168,195,181,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,175,153,148,161,160,177,179],
[173,0,164,186,159,174,177,165,185,172],
[168,177,0,171,161,156,173,161,181,159],
[166,155,170,0,163,156,172,161,172,168],
[188,182,180,178,0,174,169,177,198,178],
[193,167,185,185,167,0,191,179,187,184],
[180,164,168,169,172,150,0,176,179,182],
[181,176,180,180,164,162,165,0,183,173],
[164,156,160,169,143,154,162,158,0,166],
[162,169,182,173,163,157,159,168,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,170,177,178,177,168,185,182],
[174,0,187,172,186,172,172,169,186,183],
[166,154,0,155,169,166,154,162,170,173],
[171,169,186,0,161,167,168,166,172,176],
[164,155,172,180,0,171,182,169,178,184],
[163,169,175,174,170,0,175,173,183,182],
[164,169,187,173,159,166,0,166,181,175],
[173,172,179,175,172,168,175,0,184,181],
[156,155,171,169,163,158,160,157,0,169],
[159,158,168,165,157,159,166,160,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,182,152,161,173,190,194,135,146],
[172,0,183,150,148,176,189,168,142,147],
[159,158,0,163,145,136,179,178,135,133],
[189,191,178,0,180,169,200,177,164,184],
[180,193,196,161,0,207,220,202,171,182],
[168,165,205,172,134,0,183,166,140,182],
[151,152,162,141,121,158,0,161,145,152],
[147,173,163,164,139,175,180,0,162,154],
[206,199,206,177,170,201,196,179,0,187],
[195,194,208,157,159,159,189,187,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,163,151,160,153,138,139,145,148],
[196,0,177,186,165,167,175,170,165,210],
[178,164,0,161,151,155,159,169,160,187],
[190,155,180,0,158,151,164,142,171,195],
[181,176,190,183,0,174,155,177,159,186],
[188,174,186,190,167,0,170,177,178,191],
[203,166,182,177,186,171,0,162,156,191],
[202,171,172,199,164,164,179,0,169,188],
[196,176,181,170,182,163,185,172,0,186],
[193,131,154,146,155,150,150,153,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,177,174,192,182,175,181,185,180],
[174,0,168,178,183,183,166,169,153,175],
[164,173,0,173,172,182,162,159,175,179],
[167,163,168,0,162,179,166,163,163,181],
[149,158,169,179,0,178,162,164,160,168],
[159,158,159,162,163,0,148,181,155,141],
[166,175,179,175,179,193,0,155,176,167],
[160,172,182,178,177,160,186,0,172,167],
[156,188,166,178,181,186,165,169,0,186],
[161,166,162,160,173,200,174,174,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,157,172,188,171,176,171,178,181],
[151,0,142,168,162,166,152,165,170,149],
[184,199,0,188,188,160,180,185,190,191],
[169,173,153,0,176,170,163,187,159,158],
[153,179,153,165,0,163,152,168,166,149],
[170,175,181,171,178,0,169,185,175,181],
[165,189,161,178,189,172,0,181,162,173],
[170,176,156,154,173,156,160,0,169,164],
[163,171,151,182,175,166,179,172,0,170],
[160,192,150,183,192,160,168,177,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,179,157,175,165,160,173,166],
[175,0,149,169,160,171,163,159,173,168],
[166,192,0,179,181,182,184,179,187,175],
[162,172,162,0,165,175,170,166,180,163],
[184,181,160,176,0,178,166,175,180,171],
[166,170,159,166,163,0,164,160,155,163],
[176,178,157,171,175,177,0,168,178,164],
[181,182,162,175,166,181,173,0,172,175],
[168,168,154,161,161,186,163,169,0,152],
[175,173,166,178,170,178,177,166,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,162,168,165,165,165,169,183],
[179,0,163,163,173,170,177,174,175,171],
[176,178,0,182,160,161,176,174,177,165],
[179,178,159,0,155,155,161,159,176,168],
[173,168,181,186,0,158,180,169,166,172],
[176,171,180,186,183,0,169,180,195,177],
[176,164,165,180,161,172,0,174,176,163],
[176,167,167,182,172,161,167,0,179,177],
[172,166,164,165,175,146,165,162,0,165],
[158,170,176,173,169,164,178,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,155,169,171,149,172,179,166],
[181,0,181,175,170,165,174,188,182,171],
[171,160,0,171,155,158,151,166,169,164],
[186,166,170,0,172,162,178,168,172,156],
[172,171,186,169,0,172,170,191,182,176],
[170,176,183,179,169,0,169,196,172,169],
[192,167,190,163,171,172,0,178,176,165],
[169,153,175,173,150,145,163,0,167,154],
[162,159,172,169,159,169,165,174,0,157],
[175,170,177,185,165,172,176,187,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,211,213,71,180,96,170,171,143],
[242,0,255,214,148,141,141,242,175,103],
[130,86,0,86,157,44,52,201,34,130],
[128,127,255,0,115,44,69,198,79,78],
[270,193,184,226,0,110,135,264,144,193],
[161,200,297,297,231,0,149,297,226,269],
[245,200,289,272,206,192,0,316,149,192],
[171,99,140,143,77,44,25,0,60,103],
[170,166,307,262,197,115,192,281,0,210],
[198,238,211,263,148,72,149,238,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,169,189,169,168,165,185,171],
[171,0,153,163,182,173,167,176,186,174],
[178,188,0,183,191,185,176,170,188,170],
[172,178,158,0,181,163,174,162,188,161],
[152,159,150,160,0,161,150,162,165,156],
[172,168,156,178,180,0,171,160,201,173],
[173,174,165,167,191,170,0,156,175,173],
[176,165,171,179,179,181,185,0,190,175],
[156,155,153,153,176,140,166,151,0,163],
[170,167,171,180,185,168,168,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,171,158,162,161,172,152,164],
[182,0,179,169,170,174,177,186,179,167],
[171,162,0,171,167,155,174,166,160,155],
[170,172,170,0,165,169,166,175,164,166],
[183,171,174,176,0,172,173,176,167,168],
[179,167,186,172,169,0,171,177,182,176],
[180,164,167,175,168,170,0,174,159,159],
[169,155,175,166,165,164,167,0,156,159],
[189,162,181,177,174,159,182,185,0,173],
[177,174,186,175,173,165,182,182,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,138,154,182,165,163,156,142,156],
[190,0,181,151,185,163,204,173,126,219],
[203,160,0,160,167,177,194,143,169,178],
[187,190,181,0,175,161,206,151,151,195],
[159,156,174,166,0,145,191,174,163,186],
[176,178,164,180,196,0,177,198,172,179],
[178,137,147,135,150,164,0,159,131,124],
[185,168,198,190,167,143,182,0,164,170],
[199,215,172,190,178,169,210,177,0,196],
[185,122,163,146,155,162,217,171,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,172,167,138,164,186,162,186,161],
[186,0,194,178,153,183,201,183,193,195],
[169,147,0,135,175,167,204,139,187,165],
[174,163,206,0,168,165,187,153,181,168],
[203,188,166,173,0,177,210,175,197,200],
[177,158,174,176,164,0,207,156,164,185],
[155,140,137,154,131,134,0,129,176,159],
[179,158,202,188,166,185,212,0,192,193],
[155,148,154,160,144,177,165,149,0,197],
[180,146,176,173,141,156,182,148,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,179,168,170,176,174,169,172,181],
[160,0,172,164,157,165,172,157,158,156],
[162,169,0,171,153,176,171,160,167,173],
[173,177,170,0,163,167,169,157,178,168],
[171,184,188,178,0,179,179,167,188,168],
[165,176,165,174,162,0,157,156,161,170],
[167,169,170,172,162,184,0,174,163,174],
[172,184,181,184,174,185,167,0,176,178],
[169,183,174,163,153,180,178,165,0,175],
[160,185,168,173,173,171,167,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,167,176,179,169,171,166,153],
[175,0,161,157,168,183,175,181,151,162],
[166,180,0,160,172,189,177,171,167,176],
[174,184,181,0,167,202,167,197,160,180],
[165,173,169,174,0,187,170,166,154,176],
[162,158,152,139,154,0,173,161,149,140],
[172,166,164,174,171,168,0,176,159,164],
[170,160,170,144,175,180,165,0,158,160],
[175,190,174,181,187,192,182,183,0,151],
[188,179,165,161,165,201,177,181,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,191,210,195,207,196,195,161,207],
[136,0,147,147,154,137,133,141,123,140],
[150,194,0,169,164,167,173,177,177,184],
[131,194,172,0,168,153,171,172,115,156],
[146,187,177,173,0,180,203,182,170,178],
[134,204,174,188,161,0,162,158,163,172],
[145,208,168,170,138,179,0,166,154,196],
[146,200,164,169,159,183,175,0,153,176],
[180,218,164,226,171,178,187,188,0,186],
[134,201,157,185,163,169,145,165,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,189,159,171,166,168,160,181,152],
[168,0,174,153,170,156,178,150,173,172],
[152,167,0,154,150,146,151,149,161,154],
[182,188,187,0,184,164,172,183,194,171],
[170,171,191,157,0,170,158,180,182,170],
[175,185,195,177,171,0,173,156,188,163],
[173,163,190,169,183,168,0,168,173,170],
[181,191,192,158,161,185,173,0,181,178],
[160,168,180,147,159,153,168,160,0,164],
[189,169,187,170,171,178,171,163,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,172,174,170,177,195,174,199],
[174,0,153,149,152,161,174,179,147,153],
[167,188,0,203,184,186,175,206,176,180],
[169,192,138,0,187,146,167,159,143,171],
[167,189,157,154,0,189,157,184,191,175],
[171,180,155,195,152,0,163,207,188,173],
[164,167,166,174,184,178,0,188,162,173],
[146,162,135,182,157,134,153,0,153,163],
[167,194,165,198,150,153,179,188,0,176],
[142,188,161,170,166,168,168,178,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,178,188,172,173,181,181,170,182],
[162,0,166,169,167,170,183,173,169,176],
[163,175,0,165,174,179,187,177,176,190],
[153,172,176,0,176,168,174,164,169,171],
[169,174,167,165,0,167,179,169,182,170],
[168,171,162,173,174,0,183,171,172,171],
[160,158,154,167,162,158,0,169,164,170],
[160,168,164,177,172,170,172,0,168,174],
[171,172,165,172,159,169,177,173,0,185],
[159,165,151,170,171,170,171,167,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,164,164,174,175,154,168,164,164],
[175,0,175,170,176,182,163,168,164,153],
[177,166,0,168,178,184,155,180,176,177],
[177,171,173,0,188,182,150,185,179,161],
[167,165,163,153,0,174,161,174,166,159],
[166,159,157,159,167,0,150,163,167,164],
[187,178,186,191,180,191,0,186,185,166],
[173,173,161,156,167,178,155,0,170,154],
[177,177,165,162,175,174,156,171,0,156],
[177,188,164,180,182,177,175,187,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,199,187,176,177,223,155,148,180],
[154,0,150,149,132,142,205,139,147,159],
[142,191,0,170,160,142,159,118,117,196],
[154,192,171,0,161,167,193,160,165,198],
[165,209,181,180,0,178,231,188,152,211],
[164,199,199,174,163,0,201,189,171,190],
[118,136,182,148,110,140,0,138,124,155],
[186,202,223,181,153,152,203,0,172,211],
[193,194,224,176,189,170,217,169,0,187],
[161,182,145,143,130,151,186,130,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,176,163,159,168,143,164,159,155],
[183,0,194,140,183,173,160,151,162,188],
[165,147,0,153,148,185,146,169,179,181],
[178,201,188,0,161,221,206,192,199,219],
[182,158,193,180,0,175,158,159,188,179],
[173,168,156,120,166,0,153,182,194,155],
[198,181,195,135,183,188,0,167,170,201],
[177,190,172,149,182,159,174,0,169,194],
[182,179,162,142,153,147,171,172,0,173],
[186,153,160,122,162,186,140,147,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,132,135,167,150,126,124,153,116],
[217,0,161,172,204,153,224,233,184,187],
[209,180,0,216,204,171,176,180,204,120],
[206,169,125,0,188,167,177,138,134,100],
[174,137,137,153,0,148,133,118,151,112],
[191,188,170,174,193,0,163,165,194,108],
[215,117,165,164,208,178,0,117,197,127],
[217,108,161,203,223,176,224,0,184,182],
[188,157,137,207,190,147,144,157,0,89],
[225,154,221,241,229,233,214,159,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,151,163,153,182,172,185,182,150],
[128,0,142,146,149,150,189,136,152,125],
[190,199,0,204,194,173,196,179,171,159],
[178,195,137,0,169,162,185,162,180,148],
[188,192,147,172,0,166,178,176,178,164],
[159,191,168,179,175,0,163,152,202,143],
[169,152,145,156,163,178,0,152,158,171],
[156,205,162,179,165,189,189,0,171,178],
[159,189,170,161,163,139,183,170,0,164],
[191,216,182,193,177,198,170,163,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,228,136,144,162,130,134,103,158],
[140,0,181,176,174,199,168,192,142,169],
[113,160,0,98,145,154,132,131,143,103],
[205,165,243,0,203,207,209,155,165,142],
[197,167,196,138,0,246,173,147,146,179],
[179,142,187,134,95,0,161,122,152,117],
[211,173,209,132,168,180,0,107,129,151],
[207,149,210,186,194,219,234,0,200,143],
[238,199,198,176,195,189,212,141,0,179],
[183,172,238,199,162,224,190,198,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,170,163,171,164,168,176,152],
[172,0,162,180,166,181,153,178,171,167],
[180,179,0,184,177,178,183,184,173,166],
[171,161,157,0,147,152,160,158,166,150],
[178,175,164,194,0,169,175,178,163,164],
[170,160,163,189,172,0,162,175,160,158],
[177,188,158,181,166,179,0,172,162,176],
[173,163,157,183,163,166,169,0,161,151],
[165,170,168,175,178,181,179,180,0,141],
[189,174,175,191,177,183,165,190,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,178,169,185,184,184,179,191],
[164,0,159,169,170,161,170,182,158,179],
[167,182,0,181,161,172,192,187,168,177],
[163,172,160,0,174,157,182,171,162,164],
[172,171,180,167,0,168,189,166,180,186],
[156,180,169,184,173,0,194,181,178,172],
[157,171,149,159,152,147,0,166,151,164],
[157,159,154,170,175,160,175,0,161,165],
[162,183,173,179,161,163,190,180,0,187],
[150,162,164,177,155,169,177,176,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,168,195,185,181,192,187,177,174],
[148,0,159,149,164,148,165,165,147,140],
[173,182,0,165,183,175,164,179,146,157],
[146,192,176,0,177,180,172,186,145,178],
[156,177,158,164,0,162,152,175,148,155],
[160,193,166,161,179,0,152,169,153,156],
[149,176,177,169,189,189,0,178,149,170],
[154,176,162,155,166,172,163,0,128,153],
[164,194,195,196,193,188,192,213,0,184],
[167,201,184,163,186,185,171,188,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,159,164,168,168,151,173,167],
[178,0,188,170,174,182,166,164,179,174],
[163,153,0,167,170,168,173,172,166,166],
[182,171,174,0,172,177,172,168,179,173],
[177,167,171,169,0,175,161,169,163,175],
[173,159,173,164,166,0,169,164,179,174],
[173,175,168,169,180,172,0,171,184,173],
[190,177,169,173,172,177,170,0,181,181],
[168,162,175,162,178,162,157,160,0,174],
[174,167,175,168,166,167,168,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,194,200,204,163,163,146,190,156],
[182,0,197,181,223,175,160,182,196,162],
[147,144,0,153,155,152,163,126,169,130],
[141,160,188,0,190,178,156,150,169,144],
[137,118,186,151,0,129,144,136,136,106],
[178,166,189,163,212,0,148,175,159,175],
[178,181,178,185,197,193,0,179,191,164],
[195,159,215,191,205,166,162,0,175,125],
[151,145,172,172,205,182,150,166,0,153],
[185,179,211,197,235,166,177,216,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,208,161,175,144,151,163,180,149],
[199,0,207,146,216,195,166,150,187,205],
[133,134,0,148,184,134,167,121,173,157],
[180,195,193,0,217,165,193,143,172,188],
[166,125,157,124,0,129,119,120,146,152],
[197,146,207,176,212,0,180,168,195,175],
[190,175,174,148,222,161,0,174,193,180],
[178,191,220,198,221,173,167,0,205,216],
[161,154,168,169,195,146,148,136,0,180],
[192,136,184,153,189,166,161,125,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,159,183,174,174,184,187,183],
[164,0,174,169,178,156,171,177,194,172],
[166,167,0,148,174,160,151,178,168,159],
[182,172,193,0,185,166,167,189,190,194],
[158,163,167,156,0,161,159,175,177,171],
[167,185,181,175,180,0,165,196,191,173],
[167,170,190,174,182,176,0,195,175,185],
[157,164,163,152,166,145,146,0,172,170],
[154,147,173,151,164,150,166,169,0,169],
[158,169,182,147,170,168,156,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,157,167,171,168,182,171,166,163],
[169,0,171,169,159,185,155,141,161,145],
[184,170,0,181,147,160,179,158,188,178],
[174,172,160,0,177,169,177,167,155,143],
[170,182,194,164,0,168,170,177,166,174],
[173,156,181,172,173,0,182,173,169,169],
[159,186,162,164,171,159,0,159,179,147],
[170,200,183,174,164,168,182,0,164,165],
[175,180,153,186,175,172,162,177,0,146],
[178,196,163,198,167,172,194,176,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,217,231,213,100,60,241,145,135],
[214,0,194,199,187,209,178,213,214,169],
[124,147,0,238,207,106,168,186,125,117],
[110,142,103,0,74,74,159,175,38,140],
[128,154,134,267,0,149,135,253,104,172],
[241,132,235,267,192,0,116,241,127,205],
[281,163,173,182,206,225,0,208,145,156],
[100,128,155,166,88,100,133,0,106,118],
[196,127,216,303,237,214,196,235,0,129],
[206,172,224,201,169,136,185,223,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,188,157,157,182,193,180,171,182],
[129,0,188,177,178,164,186,169,142,158],
[153,153,0,153,164,178,189,148,152,108],
[184,164,188,0,185,186,208,176,197,173],
[184,163,177,156,0,202,159,148,202,124],
[159,177,163,155,139,0,163,187,154,104],
[148,155,152,133,182,178,0,146,149,153],
[161,172,193,165,193,154,195,0,189,139],
[170,199,189,144,139,187,192,152,0,157],
[159,183,233,168,217,237,188,202,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,212,147,175,148,182,177,173,170],
[143,0,219,154,194,172,177,171,156,189],
[129,122,0,124,149,135,141,151,145,167],
[194,187,217,0,207,183,184,204,166,202],
[166,147,192,134,0,162,162,151,169,181],
[193,169,206,158,179,0,191,203,171,185],
[159,164,200,157,179,150,0,158,190,177],
[164,170,190,137,190,138,183,0,177,180],
[168,185,196,175,172,170,151,164,0,202],
[171,152,174,139,160,156,164,161,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,158,167,156,162,179,168,170],
[167,0,181,167,159,162,154,161,183,159],
[161,160,0,155,159,172,173,162,175,159],
[183,174,186,0,183,189,168,169,177,175],
[174,182,182,158,0,165,167,165,171,163],
[185,179,169,152,176,0,154,161,176,160],
[179,187,168,173,174,187,0,176,186,182],
[162,180,179,172,176,180,165,0,165,185],
[173,158,166,164,170,165,155,176,0,159],
[171,182,182,166,178,181,159,156,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,150,187,148,132,160,163,173],
[182,0,172,169,186,152,160,164,184,174],
[179,169,0,166,174,148,156,151,177,175],
[191,172,175,0,193,147,171,187,184,189],
[154,155,167,148,0,153,150,169,170,174],
[193,189,193,194,188,0,167,198,185,204],
[209,181,185,170,191,174,0,197,178,198],
[181,177,190,154,172,143,144,0,183,193],
[178,157,164,157,171,156,163,158,0,186],
[168,167,166,152,167,137,143,148,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,179,190,153,141,145,190,148,133],
[201,0,159,211,148,168,157,176,153,169],
[162,182,0,213,169,171,164,173,164,170],
[151,130,128,0,151,135,140,130,120,132],
[188,193,172,190,0,152,150,159,145,156],
[200,173,170,206,189,0,158,160,165,150],
[196,184,177,201,191,183,0,158,172,163],
[151,165,168,211,182,181,183,0,134,172],
[193,188,177,221,196,176,169,207,0,193],
[208,172,171,209,185,191,178,169,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,117,117,117,218,240,240,117,117],
[101,0,101,218,101,101,0,341,101,0],
[224,240,0,341,224,341,240,341,341,123],
[224,123,0,0,0,101,123,123,0,0],
[224,240,117,341,0,341,240,341,341,240],
[123,240,0,240,0,0,123,240,123,123],
[101,341,101,218,101,218,0,341,218,101],
[101,0,0,218,0,101,0,0,0,0],
[224,240,0,341,0,218,123,341,0,123],
[224,341,218,341,101,218,240,341,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,182,180,186,170,187,173,171,173],
[161,0,147,151,164,144,169,161,142,168],
[159,194,0,165,184,158,185,170,162,169],
[161,190,176,0,193,165,188,174,177,171],
[155,177,157,148,0,139,178,163,156,165],
[171,197,183,176,202,0,193,175,174,168],
[154,172,156,153,163,148,0,165,154,171],
[168,180,171,167,178,166,176,0,165,175],
[170,199,179,164,185,167,187,176,0,185],
[168,173,172,170,176,173,170,166,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,182,151,132,160,164,168,172,157],
[184,0,178,153,147,179,154,172,191,170],
[159,163,0,173,148,178,171,182,187,193],
[190,188,168,0,185,184,187,201,183,196],
[209,194,193,156,0,171,198,195,185,181],
[181,162,163,157,170,0,167,150,178,171],
[177,187,170,154,143,174,0,181,177,191],
[173,169,159,140,146,191,160,0,163,170],
[169,150,154,158,156,163,164,178,0,172],
[184,171,148,145,160,170,150,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,183,164,189,185,175,181,188,186],
[159,0,193,163,187,188,173,170,172,174],
[158,148,0,146,177,175,153,144,159,162],
[177,178,195,0,192,184,173,166,174,179],
[152,154,164,149,0,166,149,150,161,155],
[156,153,166,157,175,0,166,151,160,170],
[166,168,188,168,192,175,0,168,176,165],
[160,171,197,175,191,190,173,0,177,175],
[153,169,182,167,180,181,165,164,0,179],
[155,167,179,162,186,171,176,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,194,170,161,174,175,176,162,177],
[154,0,174,167,163,164,159,175,164,165],
[147,167,0,149,159,168,149,160,150,150],
[171,174,192,0,167,171,170,171,172,165],
[180,178,182,174,0,166,173,186,180,166],
[167,177,173,170,175,0,166,182,166,160],
[166,182,192,171,168,175,0,182,174,177],
[165,166,181,170,155,159,159,0,165,158],
[179,177,191,169,161,175,167,176,0,164],
[164,176,191,176,175,181,164,183,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,136,154,123,129,138,184,118,143],
[206,0,156,157,134,188,128,231,155,189],
[205,185,0,166,186,227,208,252,212,199],
[187,184,175,0,180,163,210,219,216,185],
[218,207,155,161,0,164,221,224,172,190],
[212,153,114,178,177,0,135,208,191,175],
[203,213,133,131,120,206,0,174,197,136],
[157,110,89,122,117,133,167,0,168,147],
[223,186,129,125,169,150,144,173,0,191],
[198,152,142,156,151,166,205,194,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,169,164,172,166,193,166,173,180],
[147,0,151,154,158,134,158,163,165,165],
[172,190,0,156,159,166,180,170,174,181],
[177,187,185,0,161,174,214,181,174,199],
[169,183,182,180,0,164,182,154,165,176],
[175,207,175,167,177,0,182,193,189,189],
[148,183,161,127,159,159,0,162,170,192],
[175,178,171,160,187,148,179,0,176,176],
[168,176,167,167,176,152,171,165,0,175],
[161,176,160,142,165,152,149,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,165,166,171,180,157,176,157],
[177,0,161,164,169,158,181,160,151,167],
[176,180,0,162,181,185,175,177,175,163],
[176,177,179,0,168,184,190,179,175,179],
[175,172,160,173,0,157,176,154,165,146],
[170,183,156,157,184,0,189,167,155,173],
[161,160,166,151,165,152,0,151,152,147],
[184,181,164,162,187,174,190,0,162,177],
[165,190,166,166,176,186,189,179,0,163],
[184,174,178,162,195,168,194,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,185,175,182,163,173,167,177,182],
[152,0,172,161,154,168,159,150,160,156],
[156,169,0,170,156,161,162,149,174,166],
[166,180,171,0,167,165,167,159,160,166],
[159,187,185,174,0,173,181,166,169,167],
[178,173,180,176,168,0,170,154,175,170],
[168,182,179,174,160,171,0,174,173,174],
[174,191,192,182,175,187,167,0,176,174],
[164,181,167,181,172,166,168,165,0,169],
[159,185,175,175,174,171,167,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,181,182,179,179,166,155,176],
[158,0,166,170,170,171,173,162,172,163],
[171,175,0,178,173,177,182,165,173,165],
[160,171,163,0,176,172,150,162,155,172],
[159,171,168,165,0,161,157,161,152,166],
[162,170,164,169,180,0,161,158,158,174],
[162,168,159,191,184,180,0,159,160,166],
[175,179,176,179,180,183,182,0,170,182],
[186,169,168,186,189,183,181,171,0,179],
[165,178,176,169,175,167,175,159,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,180,195,165,180,177,181,163,174],
[164,0,156,176,155,150,170,170,164,152],
[161,185,0,167,174,174,204,181,169,175],
[146,165,174,0,151,162,177,173,155,161],
[176,186,167,190,0,177,187,184,183,195],
[161,191,167,179,164,0,179,176,159,155],
[164,171,137,164,154,162,0,151,153,152],
[160,171,160,168,157,165,190,0,165,163],
[178,177,172,186,158,182,188,176,0,164],
[167,189,166,180,146,186,189,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,162,166,141,173,180,166,175,174],
[173,0,185,164,161,189,179,173,178,165],
[179,156,0,165,154,184,158,160,178,159],
[175,177,176,0,166,167,188,178,191,183],
[200,180,187,175,0,188,186,165,180,167],
[168,152,157,174,153,0,173,171,170,172],
[161,162,183,153,155,168,0,164,163,170],
[175,168,181,163,176,170,177,0,191,165],
[166,163,163,150,161,171,178,150,0,154],
[167,176,182,158,174,169,171,176,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,190,172,162,184,175,192,156,174],
[151,0,160,144,171,172,165,180,168,149],
[151,181,0,161,178,175,169,198,163,160],
[169,197,180,0,159,185,170,191,173,161],
[179,170,163,182,0,185,172,176,173,168],
[157,169,166,156,156,0,151,174,169,155],
[166,176,172,171,169,190,0,203,173,152],
[149,161,143,150,165,167,138,0,163,145],
[185,173,178,168,168,172,168,178,0,156],
[167,192,181,180,173,186,189,196,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,169,156,176,173,155,162,178],
[175,0,179,178,174,171,170,172,156,177],
[170,162,0,172,165,163,167,166,173,183],
[172,163,169,0,163,168,164,169,160,170],
[185,167,176,178,0,172,179,179,172,183],
[165,170,178,173,169,0,184,171,175,174],
[168,171,174,177,162,157,0,167,163,173],
[186,169,175,172,162,170,174,0,156,177],
[179,185,168,181,169,166,178,185,0,170],
[163,164,158,171,158,167,168,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,156,180,161,160,156,174,166],
[178,0,163,153,175,161,159,145,169,157],
[163,178,0,167,166,176,167,162,180,159],
[185,188,174,0,181,161,173,163,170,179],
[161,166,175,160,0,160,156,148,158,162],
[180,180,165,180,181,0,176,172,179,173],
[181,182,174,168,185,165,0,161,179,171],
[185,196,179,178,193,169,180,0,191,183],
[167,172,161,171,183,162,162,150,0,171],
[175,184,182,162,179,168,170,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,141,162,152,175,149,167,148,181],
[157,0,149,180,162,167,163,174,140,179],
[200,192,0,185,178,174,165,181,171,200],
[179,161,156,0,167,165,157,176,164,186],
[189,179,163,174,0,179,172,183,170,178],
[166,174,167,176,162,0,147,160,169,180],
[192,178,176,184,169,194,0,177,162,191],
[174,167,160,165,158,181,164,0,159,194],
[193,201,170,177,171,172,179,182,0,194],
[160,162,141,155,163,161,150,147,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,136,146,126,152,125,152,142,147],
[186,0,159,164,166,150,141,158,145,149],
[205,182,0,173,140,146,145,157,147,153],
[195,177,168,0,139,143,150,171,158,155],
[215,175,201,202,0,177,162,171,172,155],
[189,191,195,198,164,0,163,170,162,168],
[216,200,196,191,179,178,0,191,171,170],
[189,183,184,170,170,171,150,0,163,178],
[199,196,194,183,169,179,170,178,0,173],
[194,192,188,186,186,173,171,163,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,185,180,189,177,188,185,167],
[167,0,146,165,177,159,182,193,185,167],
[165,195,0,185,164,186,189,176,203,188],
[156,176,156,0,162,138,167,172,204,154],
[161,164,177,179,0,162,163,187,190,164],
[152,182,155,203,179,0,172,182,211,171],
[164,159,152,174,178,169,0,166,187,172],
[153,148,165,169,154,159,175,0,162,166],
[156,156,138,137,151,130,154,179,0,141],
[174,174,153,187,177,170,169,175,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,158,184,173,160,179,181,171,186],
[165,0,157,174,172,148,157,191,176,174],
[183,184,0,192,177,161,168,174,165,177],
[157,167,149,0,161,158,154,159,169,168],
[168,169,164,180,0,142,157,156,162,157],
[181,193,180,183,199,0,174,167,198,181],
[162,184,173,187,184,167,0,173,160,169],
[160,150,167,182,185,174,168,0,182,177],
[170,165,176,172,179,143,181,159,0,167],
[155,167,164,173,184,160,172,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,165,173,168,186,190,173,177,168],
[153,0,179,140,150,174,173,158,143,168],
[176,162,0,155,148,169,170,158,159,180],
[168,201,186,0,154,182,172,168,182,162],
[173,191,193,187,0,170,198,180,177,176],
[155,167,172,159,171,0,166,154,175,171],
[151,168,171,169,143,175,0,164,178,162],
[168,183,183,173,161,187,177,0,187,177],
[164,198,182,159,164,166,163,154,0,173],
[173,173,161,179,165,170,179,164,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,161,181,135,152,139,151,158],
[171,0,181,186,174,154,181,167,181,176],
[166,160,0,171,179,165,179,173,180,169],
[180,155,170,0,174,157,181,149,172,140],
[160,167,162,167,0,128,168,137,159,145],
[206,187,176,184,213,0,195,166,174,198],
[189,160,162,160,173,146,0,160,170,165],
[202,174,168,192,204,175,181,0,181,183],
[190,160,161,169,182,167,171,160,0,154],
[183,165,172,201,196,143,176,158,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,186,188,177,175,176,177,161,177],
[169,0,188,189,162,176,169,186,176,177],
[155,153,0,175,171,160,169,162,164,166],
[153,152,166,0,149,164,160,166,155,182],
[164,179,170,192,0,171,163,175,161,174],
[166,165,181,177,170,0,156,167,164,186],
[165,172,172,181,178,185,0,184,175,188],
[164,155,179,175,166,174,157,0,160,162],
[180,165,177,186,180,177,166,181,0,183],
[164,164,175,159,167,155,153,179,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,155,183,160,178,192,149,171,186],
[178,0,185,182,166,186,191,157,181,187],
[186,156,0,177,182,158,185,174,192,187],
[158,159,164,0,165,168,180,170,170,180],
[181,175,159,176,0,180,187,158,171,176],
[163,155,183,173,161,0,172,156,156,171],
[149,150,156,161,154,169,0,161,158,169],
[192,184,167,171,183,185,180,0,185,179],
[170,160,149,171,170,185,183,156,0,178],
[155,154,154,161,165,170,172,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,164,175,155,156,154,169,162,167],
[183,0,152,169,153,149,170,172,129,143],
[177,189,0,176,179,166,178,181,176,153],
[166,172,165,0,183,159,179,186,166,170],
[186,188,162,158,0,160,169,182,163,169],
[185,192,175,182,181,0,170,200,170,182],
[187,171,163,162,172,171,0,194,157,173],
[172,169,160,155,159,141,147,0,173,170],
[179,212,165,175,178,171,184,168,0,168],
[174,198,188,171,172,159,168,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,185,181,170,175,153,180,182,180],
[181,0,159,166,146,167,156,160,182,183],
[156,182,0,178,176,196,153,153,173,198],
[160,175,163,0,172,177,151,163,148,171],
[171,195,165,169,0,170,139,157,165,179],
[166,174,145,164,171,0,153,152,169,205],
[188,185,188,190,202,188,0,170,188,196],
[161,181,188,178,184,189,171,0,182,192],
[159,159,168,193,176,172,153,159,0,178],
[161,158,143,170,162,136,145,149,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,160,170,160,187,169,157,172,177],
[178,0,172,184,182,197,179,167,180,185],
[181,169,0,170,168,196,184,164,172,187],
[171,157,171,0,169,177,191,172,163,171],
[181,159,173,172,0,184,178,163,162,181],
[154,144,145,164,157,0,149,146,162,161],
[172,162,157,150,163,192,0,166,172,168],
[184,174,177,169,178,195,175,0,183,171],
[169,161,169,178,179,179,169,158,0,189],
[164,156,154,170,160,180,173,170,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,153,183,157,150,162,183,184,188],
[162,0,170,168,148,154,164,177,197,190],
[188,171,0,186,172,184,169,172,177,196],
[158,173,155,0,152,156,172,168,185,163],
[184,193,169,189,0,170,164,198,198,181],
[191,187,157,185,171,0,181,199,185,195],
[179,177,172,169,177,160,0,182,190,194],
[158,164,169,173,143,142,159,0,190,184],
[157,144,164,156,143,156,151,151,0,161],
[153,151,145,178,160,146,147,157,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,171,186,177,158,178,175,178],
[170,0,159,169,175,185,164,177,162,165],
[169,182,0,175,188,179,178,186,177,178],
[170,172,166,0,178,182,172,189,167,163],
[155,166,153,163,0,167,150,176,165,160],
[164,156,162,159,174,0,165,168,160,157],
[183,177,163,169,191,176,0,188,175,180],
[163,164,155,152,165,173,153,0,158,162],
[166,179,164,174,176,181,166,183,0,169],
[163,176,163,178,181,184,161,179,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,53,0,0,122,122,0],
[341,0,258,288,219,53,258,258,258,136],
[341,83,0,288,136,136,258,205,258,136],
[341,53,53,0,136,53,53,258,258,53],
[288,122,205,205,0,122,122,122,122,0],
[341,288,205,288,219,0,288,205,205,166],
[341,83,83,288,219,53,0,205,258,219],
[219,83,136,83,219,136,136,0,341,136],
[219,83,83,83,219,136,83,0,0,83],
[341,205,205,288,341,175,122,205,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,162,178,145,178,131,178,161],
[182,0,163,197,186,181,186,165,202,142],
[171,178,0,192,168,176,173,183,206,153],
[179,144,149,0,171,155,200,155,151,157],
[163,155,173,170,0,154,204,175,164,111],
[196,160,165,186,187,0,229,189,184,166],
[163,155,168,141,137,112,0,153,178,118],
[210,176,158,186,166,152,188,0,185,171],
[163,139,135,190,177,157,163,156,0,126],
[180,199,188,184,230,175,223,170,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,173,170,165,180,162,183,173,170],
[164,0,165,171,171,165,161,167,163,166],
[168,176,0,177,181,181,173,196,172,183],
[171,170,164,0,162,167,156,176,168,167],
[176,170,160,179,0,165,158,167,169,167],
[161,176,160,174,176,0,157,182,172,170],
[179,180,168,185,183,184,0,182,175,177],
[158,174,145,165,174,159,159,0,161,167],
[168,178,169,173,172,169,166,180,0,170],
[171,175,158,174,174,171,164,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,157,183,171,175,183,166,173],
[163,0,173,160,179,159,177,178,162,163],
[163,168,0,155,171,167,169,173,165,156],
[184,181,186,0,190,167,177,187,172,172],
[158,162,170,151,0,151,178,158,161,154],
[170,182,174,174,190,0,174,187,174,166],
[166,164,172,164,163,167,0,173,153,164],
[158,163,168,154,183,154,168,0,168,159],
[175,179,176,169,180,167,188,173,0,168],
[168,178,185,169,187,175,177,182,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,187,183,191,200,166,163,185,179],
[139,0,174,171,178,158,166,132,180,147],
[154,167,0,163,193,175,160,157,174,141],
[158,170,178,0,187,180,179,160,178,177],
[150,163,148,154,0,146,148,154,161,162],
[141,183,166,161,195,0,161,174,164,165],
[175,175,181,162,193,180,0,155,175,144],
[178,209,184,181,187,167,186,0,195,167],
[156,161,167,163,180,177,166,146,0,160],
[162,194,200,164,179,176,197,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,193,166,188,195,187,205,202],
[170,0,167,202,173,190,194,203,196,198],
[165,174,0,177,165,175,193,171,181,192],
[148,139,164,0,157,169,169,169,166,157],
[175,168,176,184,0,191,198,179,202,197],
[153,151,166,172,150,0,176,163,198,191],
[146,147,148,172,143,165,0,159,148,183],
[154,138,170,172,162,178,182,0,181,189],
[136,145,160,175,139,143,193,160,0,173],
[139,143,149,184,144,150,158,152,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,168,180,164,173,171,177,187,175],
[178,0,177,188,189,199,165,189,190,173],
[173,164,0,174,171,200,172,168,175,166],
[161,153,167,0,176,202,167,186,170,167],
[177,152,170,165,0,188,146,171,193,156],
[168,142,141,139,153,0,141,158,168,156],
[170,176,169,174,195,200,0,192,196,177],
[164,152,173,155,170,183,149,0,165,135],
[154,151,166,171,148,173,145,176,0,153],
[166,168,175,174,185,185,164,206,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,178,186,173,185,176,176,195],
[167,0,165,174,177,169,185,165,161,183],
[171,176,0,173,183,175,187,167,169,187],
[163,167,168,0,171,181,186,161,161,186],
[155,164,158,170,0,163,182,161,162,190],
[168,172,166,160,178,0,191,155,178,187],
[156,156,154,155,159,150,0,142,158,174],
[165,176,174,180,180,186,199,0,181,192],
[165,180,172,180,179,163,183,160,0,197],
[146,158,154,155,151,154,167,149,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,178,172,166,164,159,171,176],
[176,0,181,173,189,169,158,176,168,170],
[181,160,0,171,188,174,151,167,169,175],
[163,168,170,0,191,167,162,188,167,194],
[169,152,153,150,0,140,151,155,160,183],
[175,172,167,174,201,0,172,183,193,190],
[177,183,190,179,190,169,0,177,195,201],
[182,165,174,153,186,158,164,0,174,172],
[170,173,172,174,181,148,146,167,0,173],
[165,171,166,147,158,151,140,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,156,176,166,181,193,187,176,160],
[161,0,135,144,150,164,160,174,181,161],
[185,206,0,178,184,182,184,171,193,168],
[165,197,163,0,184,186,197,186,192,172],
[175,191,157,157,0,170,171,189,198,155],
[160,177,159,155,171,0,165,177,181,153],
[148,181,157,144,170,176,0,179,191,167],
[154,167,170,155,152,164,162,0,168,159],
[165,160,148,149,143,160,150,173,0,155],
[181,180,173,169,186,188,174,182,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,169,183,171,166,175,174,165],
[174,0,172,155,169,166,150,161,165,167],
[163,169,0,158,161,149,161,161,164,169],
[172,186,183,0,183,170,178,188,188,174],
[158,172,180,158,0,165,169,187,176,163],
[170,175,192,171,176,0,164,185,178,177],
[175,191,180,163,172,177,0,175,188,183],
[166,180,180,153,154,156,166,0,188,171],
[167,176,177,153,165,163,153,153,0,161],
[176,174,172,167,178,164,158,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,189,180,189,184,200,142,197,192],
[153,0,189,168,198,206,175,175,168,198],
[152,152,0,167,188,192,207,170,171,198],
[161,173,174,0,169,163,175,153,171,179],
[152,143,153,172,0,158,186,134,180,156],
[157,135,149,178,183,0,200,164,187,177],
[141,166,134,166,155,141,0,133,181,173],
[199,166,171,188,207,177,208,0,162,193],
[144,173,170,170,161,154,160,179,0,172],
[149,143,143,162,185,164,168,148,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,182,156,179,175,173,159,159],
[166,0,170,147,164,162,165,177,157,147],
[164,171,0,165,166,160,168,170,173,163],
[159,194,176,0,170,175,180,180,173,159],
[185,177,175,171,0,179,169,168,171,176],
[162,179,181,166,162,0,165,163,166,148],
[166,176,173,161,172,176,0,173,171,163],
[168,164,171,161,173,178,168,0,169,155],
[182,184,168,168,170,175,170,172,0,150],
[182,194,178,182,165,193,178,186,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,156,181,160,174,156,157,164,175],
[175,0,158,168,177,174,161,170,172,168],
[185,183,0,166,188,163,174,173,173,184],
[160,173,175,0,168,177,172,171,169,164],
[181,164,153,173,0,171,150,171,154,146],
[167,167,178,164,170,0,159,158,164,167],
[185,180,167,169,191,182,0,186,175,167],
[184,171,168,170,170,183,155,0,170,173],
[177,169,168,172,187,177,166,171,0,175],
[166,173,157,177,195,174,174,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,176,166,175,171,167,179,184,181],
[155,0,162,162,171,168,162,176,176,181],
[165,179,0,173,182,167,173,173,179,177],
[175,179,168,0,169,179,186,181,172,183],
[166,170,159,172,0,172,167,166,168,193],
[170,173,174,162,169,0,168,180,169,164],
[174,179,168,155,174,173,0,178,169,184],
[162,165,168,160,175,161,163,0,168,168],
[157,165,162,169,173,172,172,173,0,178],
[160,160,164,158,148,177,157,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,177,195,186,186,176,175,185,169],
[164,0,158,197,167,181,176,167,177,167],
[164,183,0,181,166,178,170,162,185,161],
[146,144,160,0,168,170,154,149,164,148],
[155,174,175,173,0,175,164,165,181,161],
[155,160,163,171,166,0,158,154,173,160],
[165,165,171,187,177,183,0,176,181,160],
[166,174,179,192,176,187,165,0,177,175],
[156,164,156,177,160,168,160,164,0,162],
[172,174,180,193,180,181,181,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,152,139,195,144,161,160,162,142],
[172,0,165,165,191,183,178,176,189,172],
[189,176,0,190,200,180,184,161,199,172],
[202,176,151,0,201,191,159,173,182,179],
[146,150,141,140,0,137,131,141,151,159],
[197,158,161,150,204,0,185,162,165,163],
[180,163,157,182,210,156,0,167,179,162],
[181,165,180,168,200,179,174,0,163,164],
[179,152,142,159,190,176,162,178,0,152],
[199,169,169,162,182,178,179,177,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,190,185,214,185,177,174,166,173],
[169,0,164,186,206,203,202,191,155,184],
[151,177,0,183,171,187,176,185,152,170],
[156,155,158,0,156,202,151,172,127,171],
[127,135,170,185,0,215,186,161,148,162],
[156,138,154,139,126,0,142,167,134,121],
[164,139,165,190,155,199,0,167,177,202],
[167,150,156,169,180,174,174,0,146,180],
[175,186,189,214,193,207,164,195,0,197],
[168,157,171,170,179,220,139,161,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,184,187,175,185,194,187,180],
[176,0,175,161,165,172,176,184,180,174],
[164,166,0,177,164,163,171,201,187,175],
[157,180,164,0,174,174,166,187,186,153],
[154,176,177,167,0,149,158,189,175,166],
[166,169,178,167,192,0,177,175,183,175],
[156,165,170,175,183,164,0,184,176,165],
[147,157,140,154,152,166,157,0,168,166],
[154,161,154,155,166,158,165,173,0,161],
[161,167,166,188,175,166,176,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,170,195,171,186,180,190,181],
[177,0,189,174,189,172,188,166,169,201],
[171,152,0,168,186,165,184,179,166,163],
[171,167,173,0,184,170,188,179,169,158],
[146,152,155,157,0,161,157,147,179,172],
[170,169,176,171,180,0,171,180,168,162],
[155,153,157,153,184,170,0,175,177,189],
[161,175,162,162,194,161,166,0,161,173],
[151,172,175,172,162,173,164,180,0,171],
[160,140,178,183,169,179,152,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,161,163,163,164,155,170,170],
[163,0,157,149,148,157,164,146,169,158],
[173,184,0,161,164,155,163,161,169,167],
[180,192,180,0,160,174,180,164,180,178],
[178,193,177,181,0,167,179,176,177,194],
[178,184,186,167,174,0,187,162,175,176],
[177,177,178,161,162,154,0,155,174,187],
[186,195,180,177,165,179,186,0,186,186],
[171,172,172,161,164,166,167,155,0,170],
[171,183,174,163,147,165,154,155,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,170,182,181,198,181,185,165,184],
[156,0,150,161,169,159,175,175,155,172],
[171,191,0,180,187,180,162,178,174,170],
[159,180,161,0,170,186,178,171,162,178],
[160,172,154,171,0,166,169,170,162,170],
[143,182,161,155,175,0,166,157,162,168],
[160,166,179,163,172,175,0,163,155,161],
[156,166,163,170,171,184,178,0,160,180],
[176,186,167,179,179,179,186,181,0,183],
[157,169,171,163,171,173,180,161,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,181,161,188,190,170,160,164],
[160,0,172,168,171,194,188,184,165,149],
[166,169,0,162,176,183,178,169,171,151],
[160,173,179,0,157,187,172,162,144,154],
[180,170,165,184,0,199,158,167,151,166],
[153,147,158,154,142,0,138,162,138,134],
[151,153,163,169,183,203,0,182,161,145],
[171,157,172,179,174,179,159,0,150,163],
[181,176,170,197,190,203,180,191,0,187],
[177,192,190,187,175,207,196,178,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,185,175,175,168,148,186,162],
[170,0,169,176,180,162,168,152,185,169],
[174,172,0,179,189,176,169,163,173,171],
[156,165,162,0,167,168,166,148,178,167],
[166,161,152,174,0,162,169,158,180,172],
[166,179,165,173,179,0,175,159,178,181],
[173,173,172,175,172,166,0,162,181,173],
[193,189,178,193,183,182,179,0,193,166],
[155,156,168,163,161,163,160,148,0,162],
[179,172,170,174,169,160,168,175,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,154,167,150,166,148,169,155,144],
[180,0,164,179,168,171,154,164,166,177],
[187,177,0,190,167,184,181,179,159,178],
[174,162,151,0,170,181,159,171,152,162],
[191,173,174,171,0,183,177,190,177,162],
[175,170,157,160,158,0,154,159,160,152],
[193,187,160,182,164,187,0,181,172,169],
[172,177,162,170,151,182,160,0,180,169],
[186,175,182,189,164,181,169,161,0,178],
[197,164,163,179,179,189,172,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,177,176,150,144,160,194,174],
[180,0,177,184,190,184,170,180,180,185],
[175,164,0,195,179,175,183,185,188,164],
[164,157,146,0,163,177,176,192,172,165],
[165,151,162,178,0,172,156,158,165,137],
[191,157,166,164,169,0,169,176,176,170],
[197,171,158,165,185,172,0,169,173,172],
[181,161,156,149,183,165,172,0,173,178],
[147,161,153,169,176,165,168,168,0,182],
[167,156,177,176,204,171,169,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,148,159,173,185,153,162,149,180],
[169,0,198,153,173,177,172,184,181,172],
[193,143,0,164,192,176,176,161,177,169],
[182,188,177,0,167,180,157,171,189,169],
[168,168,149,174,0,166,172,156,160,149],
[156,164,165,161,175,0,168,167,171,153],
[188,169,165,184,169,173,0,173,183,164],
[179,157,180,170,185,174,168,0,188,173],
[192,160,164,152,181,170,158,153,0,154],
[161,169,172,172,192,188,177,168,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,147,155,160,160,160,163,136,165],
[125,0,148,153,151,145,154,141,134,159],
[194,193,0,169,166,185,191,175,153,193],
[186,188,172,0,181,176,190,184,168,194],
[181,190,175,160,0,176,180,171,167,179],
[181,196,156,165,165,0,201,182,159,167],
[181,187,150,151,161,140,0,158,146,175],
[178,200,166,157,170,159,183,0,151,170],
[205,207,188,173,174,182,195,190,0,160],
[176,182,148,147,162,174,166,171,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,167,170,160,177,166,162,152,160],
[186,0,170,162,163,169,183,173,177,183],
[174,171,0,159,156,176,171,147,161,178],
[171,179,182,0,163,175,158,168,171,170],
[181,178,185,178,0,169,177,170,169,167],
[164,172,165,166,172,0,161,165,148,165],
[175,158,170,183,164,180,0,167,153,163],
[179,168,194,173,171,176,174,0,166,177],
[189,164,180,170,172,193,188,175,0,180],
[181,158,163,171,174,176,178,164,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,164,169,184,149,154,170,183],
[174,0,178,172,182,163,142,185,154,179],
[170,163,0,182,172,186,146,164,168,185],
[177,169,159,0,152,159,147,142,173,179],
[172,159,169,189,0,165,141,178,151,171],
[157,178,155,182,176,0,119,158,154,172],
[192,199,195,194,200,222,0,172,164,203],
[187,156,177,199,163,183,169,0,169,202],
[171,187,173,168,190,187,177,172,0,175],
[158,162,156,162,170,169,138,139,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,141,135,169,146,139,136,114,153],
[209,0,155,140,216,182,157,157,166,180],
[200,186,0,155,202,173,147,163,130,165],
[206,201,186,0,206,187,147,177,130,178],
[172,125,139,135,0,180,144,147,128,192],
[195,159,168,154,161,0,165,173,120,175],
[202,184,194,194,197,176,0,149,136,162],
[205,184,178,164,194,168,192,0,180,174],
[227,175,211,211,213,221,205,161,0,199],
[188,161,176,163,149,166,179,167,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,175,142,161,160,175,150,159],
[161,0,171,166,164,169,143,157,138,171],
[176,170,0,177,159,182,165,174,168,182],
[166,175,164,0,156,157,153,167,148,162],
[199,177,182,185,0,169,179,182,176,188],
[180,172,159,184,172,0,156,169,146,183],
[181,198,176,188,162,185,0,160,167,189],
[166,184,167,174,159,172,181,0,155,180],
[191,203,173,193,165,195,174,186,0,191],
[182,170,159,179,153,158,152,161,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,157,176,167,159,158,154,156],
[165,0,158,173,164,161,168,172,159,153],
[168,183,0,174,183,186,171,170,176,166],
[184,168,167,0,172,163,156,181,161,161],
[165,177,158,169,0,158,149,164,159,153],
[174,180,155,178,183,0,173,175,167,161],
[182,173,170,185,192,168,0,189,181,174],
[183,169,171,160,177,166,152,0,177,176],
[187,182,165,180,182,174,160,164,0,170],
[185,188,175,180,188,180,167,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,173,164,163,170,183,171,160],
[168,0,186,186,172,163,156,174,172,165],
[167,155,0,176,161,153,163,173,166,163],
[168,155,165,0,164,160,161,164,171,160],
[177,169,180,177,0,159,162,175,176,161],
[178,178,188,181,182,0,177,183,180,170],
[171,185,178,180,179,164,0,183,189,171],
[158,167,168,177,166,158,158,0,165,162],
[170,169,175,170,165,161,152,176,0,156],
[181,176,178,181,180,171,170,179,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,178,187,178,172,174,161,170],
[168,0,153,170,167,158,159,174,167,150],
[166,188,0,172,175,181,166,159,159,177],
[163,171,169,0,168,166,161,167,163,157],
[154,174,166,173,0,165,162,169,165,152],
[163,183,160,175,176,0,171,169,163,161],
[169,182,175,180,179,170,0,167,184,167],
[167,167,182,174,172,172,174,0,180,169],
[180,174,182,178,176,178,157,161,0,164],
[171,191,164,184,189,180,174,172,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,158,171,173,184,176,171,172,195],
[165,0,170,160,163,192,149,171,176,177],
[183,171,0,171,190,186,178,167,169,182],
[170,181,170,0,166,160,161,150,171,191],
[168,178,151,175,0,170,166,174,165,182],
[157,149,155,181,171,0,170,161,154,186],
[165,192,163,180,175,171,0,162,167,172],
[170,170,174,191,167,180,179,0,181,181],
[169,165,172,170,176,187,174,160,0,194],
[146,164,159,150,159,155,169,160,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,170,208,177,152,177,187,174,215],
[133,0,127,146,128,144,151,167,166,178],
[171,214,0,194,185,160,178,206,199,206],
[133,195,147,0,170,171,195,188,212,194],
[164,213,156,171,0,156,202,174,186,195],
[189,197,181,170,185,0,199,196,203,193],
[164,190,163,146,139,142,0,179,205,191],
[154,174,135,153,167,145,162,0,170,168],
[167,175,142,129,155,138,136,171,0,169],
[126,163,135,147,146,148,150,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,172,178,181,189,185,167,185,160],
[149,0,169,182,142,195,154,199,156,180],
[169,172,0,196,143,203,170,168,175,175],
[163,159,145,0,133,182,161,155,176,169],
[160,199,198,208,0,173,154,175,168,172],
[152,146,138,159,168,0,134,138,163,153],
[156,187,171,180,187,207,0,178,188,203],
[174,142,173,186,166,203,163,0,181,158],
[156,185,166,165,173,178,153,160,0,176],
[181,161,166,172,169,188,138,183,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,174,179,166,184,168,171,174,166],
[178,0,166,187,173,184,193,171,178,182],
[167,175,0,185,159,186,170,179,166,187],
[162,154,156,0,165,161,155,174,167,167],
[175,168,182,176,0,185,187,170,172,158],
[157,157,155,180,156,0,169,170,161,157],
[173,148,171,186,154,172,0,185,173,168],
[170,170,162,167,171,171,156,0,158,167],
[167,163,175,174,169,180,168,183,0,171],
[175,159,154,174,183,184,173,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,171,168,164,166,162,175,171],
[178,0,171,165,178,173,170,161,178,172],
[162,170,0,158,165,178,166,158,165,168],
[170,176,183,0,189,163,165,162,190,184],
[173,163,176,152,0,164,167,157,165,177],
[177,168,163,178,177,0,165,160,168,177],
[175,171,175,176,174,176,0,172,169,173],
[179,180,183,179,184,181,169,0,187,190],
[166,163,176,151,176,173,172,154,0,185],
[170,169,173,157,164,164,168,151,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,156,141,178,166,155,151,163],
[175,0,173,151,161,189,167,178,173,174],
[168,168,0,139,157,172,166,145,160,167],
[185,190,202,0,175,181,175,157,189,198],
[200,180,184,166,0,202,162,167,174,163],
[163,152,169,160,139,0,147,164,159,165],
[175,174,175,166,179,194,0,165,161,163],
[186,163,196,184,174,177,176,0,179,176],
[190,168,181,152,167,182,180,162,0,161],
[178,167,174,143,178,176,178,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,147,182,188,193,164,172,136,181],
[150,0,148,165,141,151,165,159,146,171],
[194,193,0,170,197,196,181,195,168,205],
[159,176,171,0,190,177,175,187,156,178],
[153,200,144,151,0,159,161,154,142,168],
[148,190,145,164,182,0,161,202,160,155],
[177,176,160,166,180,180,0,182,179,192],
[169,182,146,154,187,139,159,0,142,194],
[205,195,173,185,199,181,162,199,0,204],
[160,170,136,163,173,186,149,147,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,190,163,178,152,137,175,162,164],
[159,0,174,166,174,165,152,159,164,171],
[151,167,0,170,163,158,149,178,162,164],
[178,175,171,0,183,161,162,171,161,167],
[163,167,178,158,0,167,152,169,164,179],
[189,176,183,180,174,0,156,177,162,162],
[204,189,192,179,189,185,0,181,176,168],
[166,182,163,170,172,164,160,0,157,163],
[179,177,179,180,177,179,165,184,0,176],
[177,170,177,174,162,179,173,178,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,143,168,146,147,177,153,199,248],
[62,0,114,106,73,116,124,68,151,130],
[198,227,0,129,183,167,169,199,216,156],
[173,235,212,0,125,198,150,176,164,162],
[195,268,158,216,0,180,175,233,249,232],
[194,225,174,143,161,0,163,148,157,203],
[164,217,172,191,166,178,0,206,185,188],
[188,273,142,165,108,193,135,0,155,187],
[142,190,125,177,92,184,156,186,0,165],
[93,211,185,179,109,138,153,154,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,171,181,171,182,173,172,181,169],
[145,0,141,152,162,165,164,158,141,153],
[170,200,0,186,186,184,178,180,176,177],
[160,189,155,0,169,163,172,162,162,152],
[170,179,155,172,0,177,176,162,170,168],
[159,176,157,178,164,0,151,170,158,153],
[168,177,163,169,165,190,0,161,153,160],
[169,183,161,179,179,171,180,0,175,173],
[160,200,165,179,171,183,188,166,0,163],
[172,188,164,189,173,188,181,168,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,150,165,170,161,162,170,163,167],
[172,0,165,171,168,151,157,167,164,167],
[191,176,0,187,167,170,168,174,179,189],
[176,170,154,0,162,163,164,166,144,155],
[171,173,174,179,0,171,162,165,156,175],
[180,190,171,178,170,0,174,170,175,168],
[179,184,173,177,179,167,0,179,147,178],
[171,174,167,175,176,171,162,0,162,168],
[178,177,162,197,185,166,194,179,0,179],
[174,174,152,186,166,173,163,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,134,140,125,123,125,141,165,153],
[228,0,167,238,154,154,188,147,218,143],
[207,174,0,220,192,187,167,187,198,172],
[201,103,121,0,123,146,168,118,175,166],
[216,187,149,218,0,191,194,184,241,191],
[218,187,154,195,150,0,180,167,201,167],
[216,153,174,173,147,161,0,117,187,166],
[200,194,154,223,157,174,224,0,212,188],
[176,123,143,166,100,140,154,129,0,148],
[188,198,169,175,150,174,175,153,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,157,143,164,171,159,190,172,171],
[160,0,129,91,134,103,125,177,130,99],
[184,212,0,138,135,173,161,167,182,168],
[198,250,203,0,236,210,160,199,152,165],
[177,207,206,105,0,139,140,132,158,114],
[170,238,168,131,202,0,144,156,158,172],
[182,216,180,181,201,197,0,218,203,164],
[151,164,174,142,209,185,123,0,145,149],
[169,211,159,189,183,183,138,196,0,166],
[170,242,173,176,227,169,177,192,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,167,168,159,177,173,167,186],
[182,0,179,164,155,168,178,190,175,180],
[179,162,0,169,170,167,167,177,165,180],
[174,177,172,0,163,168,171,179,174,177],
[173,186,171,178,0,162,170,178,178,192],
[182,173,174,173,179,0,170,176,170,197],
[164,163,174,170,171,171,0,184,177,194],
[168,151,164,162,163,165,157,0,164,165],
[174,166,176,167,163,171,164,177,0,178],
[155,161,161,164,149,144,147,176,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,164,166,150,169,149,165,190,171],
[171,0,170,182,157,185,146,160,161,168],
[177,171,0,179,146,177,158,159,149,157],
[175,159,162,0,157,181,150,163,165,164],
[191,184,195,184,0,190,167,172,165,166],
[172,156,164,160,151,0,144,174,155,158],
[192,195,183,191,174,197,0,173,190,163],
[176,181,182,178,169,167,168,0,182,173],
[151,180,192,176,176,186,151,159,0,181],
[170,173,184,177,175,183,178,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,193,167,172,182,174,188,189,153],
[156,0,189,177,172,187,165,180,181,168],
[148,152,0,167,154,182,158,170,166,168],
[174,164,174,0,158,196,171,175,158,155],
[169,169,187,183,0,184,173,185,173,182],
[159,154,159,145,157,0,162,162,161,149],
[167,176,183,170,168,179,0,178,161,165],
[153,161,171,166,156,179,163,0,167,160],
[152,160,175,183,168,180,180,174,0,167],
[188,173,173,186,159,192,176,181,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,164,155,152,162,175,170,181,181],
[156,0,183,173,161,170,184,198,201,199],
[177,158,0,180,171,158,167,169,168,175],
[186,168,161,0,146,145,152,173,166,176],
[189,180,170,195,0,184,160,210,189,183],
[179,171,183,196,157,0,176,191,161,174],
[166,157,174,189,181,165,0,190,160,175],
[171,143,172,168,131,150,151,0,176,153],
[160,140,173,175,152,180,181,165,0,178],
[160,142,166,165,158,167,166,188,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,159,181,163,165,167,161,170,165],
[172,0,156,172,161,174,144,176,173,155],
[182,185,0,160,163,167,164,157,184,174],
[160,169,181,0,163,178,188,178,196,186],
[178,180,178,178,0,183,180,190,182,158],
[176,167,174,163,158,0,161,153,164,166],
[174,197,177,153,161,180,0,174,182,166],
[180,165,184,163,151,188,167,0,198,168],
[171,168,157,145,159,177,159,143,0,161],
[176,186,167,155,183,175,175,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,167,175,175,169,166,184,160],
[164,0,174,176,165,154,170,173,186,163],
[166,167,0,177,177,156,162,169,188,169],
[174,165,164,0,166,157,168,161,185,162],
[166,176,164,175,0,164,183,178,184,167],
[166,187,185,184,177,0,174,159,192,167],
[172,171,179,173,158,167,0,166,182,160],
[175,168,172,180,163,182,175,0,185,173],
[157,155,153,156,157,149,159,156,0,146],
[181,178,172,179,174,174,181,168,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,163,162,199,176,181,162,157],
[166,0,159,135,172,167,144,152,146,138],
[179,182,0,155,179,174,180,178,180,150],
[178,206,186,0,157,186,166,167,161,154],
[179,169,162,184,0,181,155,154,152,173],
[142,174,167,155,160,0,168,172,168,144],
[165,197,161,175,186,173,0,162,191,157],
[160,189,163,174,187,169,179,0,177,171],
[179,195,161,180,189,173,150,164,0,157],
[184,203,191,187,168,197,184,170,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,199,167,172,171,157,168,174,171],
[185,0,208,182,172,181,186,169,190,192],
[142,133,0,145,154,148,147,150,150,160],
[174,159,196,0,180,166,159,171,177,173],
[169,169,187,161,0,184,165,162,177,173],
[170,160,193,175,157,0,166,163,163,173],
[184,155,194,182,176,175,0,175,172,188],
[173,172,191,170,179,178,166,0,178,184],
[167,151,191,164,164,178,169,163,0,174],
[170,149,181,168,168,168,153,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,190,166,169,170,158,157,160,179],
[184,0,192,172,183,178,161,170,157,167],
[151,149,0,149,159,159,148,149,136,147],
[175,169,192,0,174,171,155,167,162,164],
[172,158,182,167,0,180,158,152,157,170],
[171,163,182,170,161,0,168,152,167,176],
[183,180,193,186,183,173,0,168,163,165],
[184,171,192,174,189,189,173,0,167,180],
[181,184,205,179,184,174,178,174,0,170],
[162,174,194,177,171,165,176,161,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,182,173,163,170,179,170,157],
[161,0,169,182,175,167,182,179,182,163],
[157,172,0,177,161,164,168,171,164,161],
[159,159,164,0,156,155,194,163,150,170],
[168,166,180,185,0,187,180,188,172,165],
[178,174,177,186,154,0,172,176,166,171],
[171,159,173,147,161,169,0,167,155,170],
[162,162,170,178,153,165,174,0,172,164],
[171,159,177,191,169,175,186,169,0,169],
[184,178,180,171,176,170,171,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,180,167,167,182,169,167,156,172],
[172,0,181,177,183,172,161,168,161,170],
[161,160,0,157,169,161,167,152,152,157],
[174,164,184,0,178,176,183,170,159,173],
[174,158,172,163,0,173,177,158,159,155],
[159,169,180,165,168,0,177,162,162,163],
[172,180,174,158,164,164,0,158,161,167],
[174,173,189,171,183,179,183,0,160,166],
[185,180,189,182,182,179,180,181,0,169],
[169,171,184,168,186,178,174,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,192,176,160,182,182,205,172,189],
[163,0,165,179,176,163,169,171,164,182],
[149,176,0,148,169,158,172,170,143,181],
[165,162,193,0,156,173,168,189,164,189],
[181,165,172,185,0,184,178,202,188,185],
[159,178,183,168,157,0,175,180,163,179],
[159,172,169,173,163,166,0,180,170,169],
[136,170,171,152,139,161,161,0,158,159],
[169,177,198,177,153,178,171,183,0,166],
[152,159,160,152,156,162,172,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,166,184,157,180,159,154,173,156],
[156,0,162,188,172,169,173,166,171,172],
[175,179,0,173,183,180,166,172,175,169],
[157,153,168,0,170,163,172,165,179,161],
[184,169,158,171,0,180,155,157,172,169],
[161,172,161,178,161,0,151,144,179,161],
[182,168,175,169,186,190,0,169,197,162],
[187,175,169,176,184,197,172,0,178,188],
[168,170,166,162,169,162,144,163,0,164],
[185,169,172,180,172,180,179,153,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,154,160,137,168,176,176,150,140],
[175,0,171,185,166,158,172,175,169,163],
[187,170,0,182,186,190,180,187,177,163],
[181,156,159,0,151,163,196,184,169,164],
[204,175,155,190,0,170,192,206,184,181],
[173,183,151,178,171,0,182,182,164,160],
[165,169,161,145,149,159,0,184,173,152],
[165,166,154,157,135,159,157,0,156,143],
[191,172,164,172,157,177,168,185,0,159],
[201,178,178,177,160,181,189,198,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,190,164,172,213,195,173,142,162],
[190,0,178,170,179,204,190,203,182,169],
[151,163,0,142,181,201,176,178,158,171],
[177,171,199,0,217,209,174,224,194,161],
[169,162,160,124,0,218,177,151,142,145],
[128,137,140,132,123,0,151,161,154,157],
[146,151,165,167,164,190,0,155,160,183],
[168,138,163,117,190,180,186,0,188,186],
[199,159,183,147,199,187,181,153,0,179],
[179,172,170,180,196,184,158,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,181,171,174,164,176,153,161,169],
[181,0,186,176,186,168,178,169,162,184],
[160,155,0,164,160,164,159,161,154,179],
[170,165,177,0,164,169,169,163,162,184],
[167,155,181,177,0,176,171,170,165,182],
[177,173,177,172,165,0,171,175,172,183],
[165,163,182,172,170,170,0,168,163,185],
[188,172,180,178,171,166,173,0,172,197],
[180,179,187,179,176,169,178,169,0,185],
[172,157,162,157,159,158,156,144,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,178,172,171,150,147,170,193,197],
[179,0,178,177,171,153,179,170,170,163],
[163,163,0,159,161,175,169,157,166,194],
[169,164,182,0,176,141,153,176,167,175],
[170,170,180,165,0,156,167,161,185,170],
[191,188,166,200,185,0,172,175,163,196],
[194,162,172,188,174,169,0,177,182,207],
[171,171,184,165,180,166,164,0,172,196],
[148,171,175,174,156,178,159,169,0,174],
[144,178,147,166,171,145,134,145,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,195,194,170,206,212,175,197,179],
[171,0,199,173,195,181,202,157,168,185],
[146,142,0,186,165,164,171,140,147,149],
[147,168,155,0,163,172,196,144,159,163],
[171,146,176,178,0,207,207,152,154,156],
[135,160,177,169,134,0,186,123,164,143],
[129,139,170,145,134,155,0,139,126,133],
[166,184,201,197,189,218,202,0,207,181],
[144,173,194,182,187,177,215,134,0,173],
[162,156,192,178,185,198,208,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,185,165,188,189,183,169,175,159],
[154,0,165,158,169,170,161,162,162,146],
[156,176,0,162,174,162,183,178,162,170],
[176,183,179,0,191,189,197,161,168,150],
[153,172,167,150,0,170,184,167,167,152],
[152,171,179,152,171,0,180,177,157,162],
[158,180,158,144,157,161,0,163,161,145],
[172,179,163,180,174,164,178,0,183,173],
[166,179,179,173,174,184,180,158,0,170],
[182,195,171,191,189,179,196,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,180,180,191,205,187,194,166,210],
[115,0,166,145,157,154,116,139,119,167],
[161,175,0,163,155,214,174,166,129,180],
[161,196,178,0,220,221,165,203,174,218],
[150,184,186,121,0,169,156,165,146,168],
[136,187,127,120,172,0,131,155,123,138],
[154,225,167,176,185,210,0,185,164,192],
[147,202,175,138,176,186,156,0,156,193],
[175,222,212,167,195,218,177,185,0,190],
[131,174,161,123,173,203,149,148,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,154,156,175,165,198,160,179,178],
[184,0,159,160,168,152,205,156,183,177],
[187,182,0,171,186,188,212,181,182,165],
[185,181,170,0,171,173,202,180,190,177],
[166,173,155,170,0,159,185,165,168,174],
[176,189,153,168,182,0,197,166,185,194],
[143,136,129,139,156,144,0,141,169,159],
[181,185,160,161,176,175,200,0,190,191],
[162,158,159,151,173,156,172,151,0,163],
[163,164,176,164,167,147,182,150,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,155,152,157,173,161,178,161,150],
[175,0,157,162,172,173,172,171,171,158],
[186,184,0,173,182,179,180,181,186,155],
[189,179,168,0,176,173,183,169,173,178],
[184,169,159,165,0,163,182,161,181,158],
[168,168,162,168,178,0,177,170,153,156],
[180,169,161,158,159,164,0,168,164,156],
[163,170,160,172,180,171,173,0,157,166],
[180,170,155,168,160,188,177,184,0,163],
[191,183,186,163,183,185,185,175,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,179,177,177,168,166,183,178,174],
[188,0,179,171,167,176,184,178,189,180],
[162,162,0,154,168,152,157,169,153,163],
[164,170,187,0,178,174,164,178,175,183],
[164,174,173,163,0,175,159,170,188,174],
[173,165,189,167,166,0,177,172,180,179],
[175,157,184,177,182,164,0,169,176,179],
[158,163,172,163,171,169,172,0,178,177],
[163,152,188,166,153,161,165,163,0,163],
[167,161,178,158,167,162,162,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,174,186,156,183,186,171,179],
[175,0,177,167,172,162,179,172,175,175],
[183,164,0,161,180,159,177,160,174,182],
[167,174,180,0,189,183,168,199,190,202],
[155,169,161,152,0,164,160,190,152,162],
[185,179,182,158,177,0,194,190,184,175],
[158,162,164,173,181,147,0,165,156,180],
[155,169,181,142,151,151,176,0,164,188],
[170,166,167,151,189,157,185,177,0,186],
[162,166,159,139,179,166,161,153,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,183,165,188,180,148,179,164],
[162,0,166,165,175,152,203,163,187,158],
[160,175,0,166,159,148,193,171,192,160],
[158,176,175,0,175,182,189,166,188,177],
[176,166,182,166,0,179,197,159,177,146],
[153,189,193,159,162,0,182,147,175,163],
[161,138,148,152,144,159,0,135,139,123],
[193,178,170,175,182,194,206,0,175,157],
[162,154,149,153,164,166,202,166,0,164],
[177,183,181,164,195,178,218,184,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,154,139,169,173,146,163,200,153],
[165,0,174,176,209,187,163,171,202,175],
[187,167,0,141,166,159,180,188,195,160],
[202,165,200,0,178,174,169,212,227,168],
[172,132,175,163,0,138,162,192,197,149],
[168,154,182,167,203,0,165,211,209,162],
[195,178,161,172,179,176,0,212,202,166],
[178,170,153,129,149,130,129,0,184,153],
[141,139,146,114,144,132,139,157,0,152],
[188,166,181,173,192,179,175,188,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,155,156,159,151,166,146,183],
[167,0,169,170,163,165,156,178,164,175],
[178,172,0,154,160,169,146,172,158,185],
[186,171,187,0,173,171,165,184,174,187],
[185,178,181,168,0,179,172,196,174,186],
[182,176,172,170,162,0,154,170,157,171],
[190,185,195,176,169,187,0,188,169,203],
[175,163,169,157,145,171,153,0,163,180],
[195,177,183,167,167,184,172,178,0,191],
[158,166,156,154,155,170,138,161,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,198,228,189,171,190,173,180,162],
[134,0,194,208,156,198,190,184,147,154],
[143,147,0,169,136,191,178,147,148,160],
[113,133,172,0,138,157,171,131,153,134],
[152,185,205,203,0,180,202,214,191,174],
[170,143,150,184,161,0,165,159,156,168],
[151,151,163,170,139,176,0,156,141,159],
[168,157,194,210,127,182,185,0,178,151],
[161,194,193,188,150,185,200,163,0,185],
[179,187,181,207,167,173,182,190,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,155,167,155,168,167,172,170,178],
[174,0,159,163,167,177,174,173,188,190],
[186,182,0,184,160,166,158,176,181,177],
[174,178,157,0,178,167,180,184,186,174],
[186,174,181,163,0,159,153,165,164,179],
[173,164,175,174,182,0,156,168,172,170],
[174,167,183,161,188,185,0,168,181,185],
[169,168,165,157,176,173,173,0,181,179],
[171,153,160,155,177,169,160,160,0,160],
[163,151,164,167,162,171,156,162,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,137,138,147,143,186,150,133,129],
[196,0,165,142,158,160,212,169,158,171],
[204,176,0,171,174,162,195,206,194,159],
[203,199,170,0,167,183,218,184,172,156],
[194,183,167,174,0,150,192,202,165,157],
[198,181,179,158,191,0,188,191,160,185],
[155,129,146,123,149,153,0,152,149,126],
[191,172,135,157,139,150,189,0,174,157],
[208,183,147,169,176,181,192,167,0,175],
[212,170,182,185,184,156,215,184,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,158,177,177,169,184,169,168,190],
[157,0,147,161,149,157,164,146,151,161],
[183,194,0,200,180,182,190,162,177,177],
[164,180,141,0,159,157,177,162,156,177],
[164,192,161,182,0,158,176,178,171,184],
[172,184,159,184,183,0,176,167,163,166],
[157,177,151,164,165,165,0,159,159,163],
[172,195,179,179,163,174,182,0,173,174],
[173,190,164,185,170,178,182,168,0,189],
[151,180,164,164,157,175,178,167,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,152,185,166,155,172,163,163,164],
[172,0,164,169,164,171,189,161,161,163],
[189,177,0,180,170,185,197,178,173,185],
[156,172,161,0,158,162,185,162,153,184],
[175,177,171,183,0,156,177,152,175,169],
[186,170,156,179,185,0,176,168,180,151],
[169,152,144,156,164,165,0,163,187,171],
[178,180,163,179,189,173,178,0,190,183],
[178,180,168,188,166,161,154,151,0,161],
[177,178,156,157,172,190,170,158,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,157,157,166,160,163,175,192],
[176,0,173,171,163,168,190,170,186,185],
[180,168,0,171,157,176,181,179,157,184],
[184,170,170,0,157,171,171,163,169,183],
[184,178,184,184,0,179,181,169,174,192],
[175,173,165,170,162,0,160,160,174,173],
[181,151,160,170,160,181,0,168,181,198],
[178,171,162,178,172,181,173,0,176,193],
[166,155,184,172,167,167,160,165,0,207],
[149,156,157,158,149,168,143,148,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,247,196,178,227,156,172,176,162],
[209,0,240,176,192,248,189,170,171,183],
[94,101,0,98,128,150,97,110,121,133],
[145,165,243,0,142,175,176,170,204,197],
[163,149,213,199,0,212,156,154,176,159],
[114,93,191,166,129,0,147,139,165,114],
[185,152,244,165,185,194,0,173,154,202],
[169,171,231,171,187,202,168,0,165,193],
[165,170,220,137,165,176,187,176,0,163],
[179,158,208,144,182,227,139,148,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,161,158,161,166,163,182,146,167],
[154,0,160,148,166,142,166,174,155,150],
[180,181,0,162,170,188,187,206,178,172],
[183,193,179,0,177,194,155,204,196,182],
[180,175,171,164,0,189,137,176,171,159],
[175,199,153,147,152,0,162,182,176,171],
[178,175,154,186,204,179,0,193,159,198],
[159,167,135,137,165,159,148,0,151,152],
[195,186,163,145,170,165,182,190,0,169],
[174,191,169,159,182,170,143,189,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,125,245,341,125,245,221,221,243],
[96,0,98,218,314,98,245,221,221,243],
[216,243,0,120,216,98,147,123,123,243],
[96,123,221,0,341,221,125,221,123,123],
[0,27,125,0,0,125,125,221,123,123],
[216,243,243,120,216,0,147,123,123,243],
[96,96,194,216,216,194,0,194,123,123],
[120,120,218,120,120,218,147,0,27,147],
[120,120,218,218,218,218,218,314,0,216],
[98,98,98,218,218,98,218,194,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,179,173,167,165,169,172,176],
[161,0,168,164,175,153,167,158,164,170],
[158,173,0,162,162,154,168,160,167,178],
[162,177,179,0,168,172,176,169,163,178],
[168,166,179,173,0,176,169,170,179,177],
[174,188,187,169,165,0,171,177,175,182],
[176,174,173,165,172,170,0,169,170,184],
[172,183,181,172,171,164,172,0,164,173],
[169,177,174,178,162,166,171,177,0,164],
[165,171,163,163,164,159,157,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,178,160,145,170,161,171,176],
[173,0,161,188,158,157,170,158,163,177],
[181,180,0,161,172,163,176,160,157,170],
[163,153,180,0,165,148,161,162,152,159],
[181,183,169,176,0,160,181,173,159,167],
[196,184,178,193,181,0,183,168,181,188],
[171,171,165,180,160,158,0,164,164,162],
[180,183,181,179,168,173,177,0,168,189],
[170,178,184,189,182,160,177,173,0,191],
[165,164,171,182,174,153,179,152,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,175,180,185,178,173,172,166],
[157,0,167,173,180,178,159,171,166,164],
[166,174,0,160,171,177,168,161,167,166],
[166,168,181,0,184,192,167,177,167,168],
[161,161,170,157,0,177,172,164,173,171],
[156,163,164,149,164,0,165,157,154,153],
[163,182,173,174,169,176,0,174,158,183],
[168,170,180,164,177,184,167,0,160,172],
[169,175,174,174,168,187,183,181,0,169],
[175,177,175,173,170,188,158,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,189,172,176,156,170,176,179,181],
[143,0,162,157,147,148,154,167,159,167],
[152,179,0,151,161,153,145,157,151,161],
[169,184,190,0,162,164,158,171,173,177],
[165,194,180,179,0,172,180,187,181,193],
[185,193,188,177,169,0,172,172,178,184],
[171,187,196,183,161,169,0,179,173,191],
[165,174,184,170,154,169,162,0,163,167],
[162,182,190,168,160,163,168,178,0,163],
[160,174,180,164,148,157,150,174,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,164,175,182,175,163,179,169],
[159,0,162,166,164,161,152,153,166,167],
[165,179,0,176,159,167,166,151,165,169],
[177,175,165,0,161,167,164,164,190,158],
[166,177,182,180,0,163,161,158,169,157],
[159,180,174,174,178,0,176,163,162,161],
[166,189,175,177,180,165,0,179,178,160],
[178,188,190,177,183,178,162,0,179,173],
[162,175,176,151,172,179,163,162,0,167],
[172,174,172,183,184,180,181,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,157,149,213,222,217,201,175,188],
[153,0,174,195,155,252,265,144,208,160],
[184,167,0,220,189,258,263,213,185,179],
[192,146,121,0,149,209,213,183,223,178],
[128,186,152,192,0,230,279,213,191,188],
[119,89,83,132,111,0,146,100,159,126],
[124,76,78,128,62,195,0,97,140,104],
[140,197,128,158,128,241,244,0,213,202],
[166,133,156,118,150,182,201,128,0,156],
[153,181,162,163,153,215,237,139,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,181,166,192,145,144,156,146,122],
[176,0,190,167,188,186,137,184,158,145],
[160,151,0,156,137,132,111,137,140,121],
[175,174,185,0,183,139,161,154,160,129],
[149,153,204,158,0,136,144,137,147,155],
[196,155,209,202,205,0,180,162,181,178],
[197,204,230,180,197,161,0,173,176,160],
[185,157,204,187,204,179,168,0,178,181],
[195,183,201,181,194,160,165,163,0,171],
[219,196,220,212,186,163,181,160,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,159,173,174,176,176,180,165],
[179,0,159,159,182,174,169,172,172,164],
[170,182,0,167,200,180,185,171,196,185],
[182,182,174,0,181,165,184,165,181,185],
[168,159,141,160,0,165,166,163,168,160],
[167,167,161,176,176,0,186,169,168,168],
[165,172,156,157,175,155,0,164,161,169],
[165,169,170,176,178,172,177,0,183,164],
[161,169,145,160,173,173,180,158,0,163],
[176,177,156,156,181,173,172,177,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,195,230,195,194,132,194,172,172],
[182,0,196,239,216,171,176,169,175,187],
[146,145,0,221,172,170,167,144,169,141],
[111,102,120,0,175,165,128,127,109,175],
[146,125,169,166,0,100,97,104,122,120],
[147,170,171,176,241,0,105,125,100,183],
[209,165,174,213,244,236,0,197,188,199],
[147,172,197,214,237,216,144,0,127,180],
[169,166,172,232,219,241,153,214,0,181],
[169,154,200,166,221,158,142,161,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,187,172,196,179,160,160,182,166],
[171,0,156,165,175,188,160,171,175,156],
[154,185,0,161,168,166,166,153,165,148],
[169,176,180,0,170,197,161,153,184,158],
[145,166,173,171,0,180,160,160,159,131],
[162,153,175,144,161,0,133,142,151,143],
[181,181,175,180,181,208,0,166,158,168],
[181,170,188,188,181,199,175,0,171,175],
[159,166,176,157,182,190,183,170,0,168],
[175,185,193,183,210,198,173,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,143,154,174,155,185,172,168,151],
[161,0,144,162,164,154,167,159,185,150],
[198,197,0,168,185,175,197,202,190,181],
[187,179,173,0,180,159,185,187,189,153],
[167,177,156,161,0,145,177,163,181,168],
[186,187,166,182,196,0,186,183,191,163],
[156,174,144,156,164,155,0,155,189,144],
[169,182,139,154,178,158,186,0,188,155],
[173,156,151,152,160,150,152,153,0,147],
[190,191,160,188,173,178,197,186,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,193,171,209,163,187,183,174,173],
[162,0,176,160,185,146,171,165,161,147],
[148,165,0,152,183,146,171,160,171,163],
[170,181,189,0,193,171,188,172,170,164],
[132,156,158,148,0,140,173,127,152,148],
[178,195,195,170,201,0,190,181,191,184],
[154,170,170,153,168,151,0,144,167,153],
[158,176,181,169,214,160,197,0,173,162],
[167,180,170,171,189,150,174,168,0,169],
[168,194,178,177,193,157,188,179,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,180,181,170,169,167,147,179,173],
[164,0,175,163,162,151,170,156,161,161],
[161,166,0,168,163,160,167,164,171,148],
[160,178,173,0,171,168,154,170,177,169],
[171,179,178,170,0,173,180,172,186,161],
[172,190,181,173,168,0,180,161,186,176],
[174,171,174,187,161,161,0,167,179,165],
[194,185,177,171,169,180,174,0,174,177],
[162,180,170,164,155,155,162,167,0,162],
[168,180,193,172,180,165,176,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,134,157,162,178,141,167,141,155],
[218,0,157,197,213,212,177,177,185,203],
[207,184,0,221,178,198,163,177,193,183],
[184,144,120,0,174,186,162,160,143,130],
[179,128,163,167,0,195,159,176,184,174],
[163,129,143,155,146,0,111,170,152,140],
[200,164,178,179,182,230,0,204,178,196],
[174,164,164,181,165,171,137,0,183,179],
[200,156,148,198,157,189,163,158,0,169],
[186,138,158,211,167,201,145,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,152,166,157,158,170,154,180,152],
[174,0,173,162,170,173,174,166,172,156],
[189,168,0,187,183,190,177,184,196,184],
[175,179,154,0,151,183,184,175,183,168],
[184,171,158,190,0,170,173,155,171,168],
[183,168,151,158,171,0,149,179,184,159],
[171,167,164,157,168,192,0,177,185,159],
[187,175,157,166,186,162,164,0,186,169],
[161,169,145,158,170,157,156,155,0,151],
[189,185,157,173,173,182,182,172,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,167,142,164,176,148,149,143,158],
[193,0,172,151,157,188,152,148,151,173],
[174,169,0,161,176,174,155,167,165,177],
[199,190,180,0,179,196,178,169,168,186],
[177,184,165,162,0,187,170,153,171,165],
[165,153,167,145,154,0,146,148,137,155],
[193,189,186,163,171,195,0,174,177,181],
[192,193,174,172,188,193,167,0,171,164],
[198,190,176,173,170,204,164,170,0,188],
[183,168,164,155,176,186,160,177,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,160,176,182,167,172,158,168],
[160,0,145,157,159,157,137,167,139,169],
[171,196,0,165,183,175,156,187,154,159],
[181,184,176,0,173,179,188,182,155,170],
[165,182,158,168,0,169,158,175,168,160],
[159,184,166,162,172,0,166,181,174,171],
[174,204,185,153,183,175,0,195,164,179],
[169,174,154,159,166,160,146,0,161,147],
[183,202,187,186,173,167,177,180,0,195],
[173,172,182,171,181,170,162,194,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,158,181,172,177,171,167,184,173],
[162,0,160,183,179,171,178,172,175,181],
[183,181,0,181,172,172,168,176,168,160],
[160,158,160,0,152,169,151,160,152,154],
[169,162,169,189,0,194,170,174,182,172],
[164,170,169,172,147,0,168,161,174,165],
[170,163,173,190,171,173,0,176,183,167],
[174,169,165,181,167,180,165,0,177,177],
[157,166,173,189,159,167,158,164,0,151],
[168,160,181,187,169,176,174,164,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,183,189,167,200,194,189,180],
[163,0,193,183,188,176,197,172,191,197],
[183,148,0,199,186,175,185,181,191,189],
[158,158,142,0,172,137,187,163,168,155],
[152,153,155,169,0,167,158,152,162,175],
[174,165,166,204,174,0,186,182,184,198],
[141,144,156,154,183,155,0,158,159,163],
[147,169,160,178,189,159,183,0,180,186],
[152,150,150,173,179,157,182,161,0,170],
[161,144,152,186,166,143,178,155,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,186,162,170,159,187,174,181],
[174,0,166,187,167,184,177,197,176,190],
[185,175,0,193,177,188,163,186,176,186],
[155,154,148,0,150,168,159,175,150,183],
[179,174,164,191,0,187,171,214,170,187],
[171,157,153,173,154,0,169,193,166,187],
[182,164,178,182,170,172,0,197,167,188],
[154,144,155,166,127,148,144,0,149,166],
[167,165,165,191,171,175,174,192,0,185],
[160,151,155,158,154,154,153,175,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,165,167,165,150,185,177,156],
[174,0,175,171,191,183,170,188,190,145],
[162,166,0,176,171,184,167,174,183,154],
[176,170,165,0,174,194,176,187,191,180],
[174,150,170,167,0,175,166,154,179,153],
[176,158,157,147,166,0,142,162,178,152],
[191,171,174,165,175,199,0,194,182,153],
[156,153,167,154,187,179,147,0,176,149],
[164,151,158,150,162,163,159,165,0,147],
[185,196,187,161,188,189,188,192,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,176,185,166,165,170,192,178],
[166,0,186,193,191,177,179,182,189,176],
[168,155,0,187,181,170,160,172,173,165],
[165,148,154,0,160,163,161,148,174,168],
[156,150,160,181,0,151,158,155,159,157],
[175,164,171,178,190,0,157,164,196,179],
[176,162,181,180,183,184,0,166,185,186],
[171,159,169,193,186,177,175,0,178,180],
[149,152,168,167,182,145,156,163,0,163],
[163,165,176,173,184,162,155,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,178,171,196,216,159,149,198,165],
[188,0,186,181,192,191,188,167,191,188],
[163,155,0,178,200,216,163,191,188,171],
[170,160,163,0,186,189,192,197,196,155],
[145,149,141,155,0,186,178,136,164,162],
[125,150,125,152,155,0,145,125,150,144],
[182,153,178,149,163,196,0,197,204,148],
[192,174,150,144,205,216,144,0,190,160],
[143,150,153,145,177,191,137,151,0,167],
[176,153,170,186,179,197,193,181,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,156,155,174,167,161,188,177],
[176,0,177,176,173,177,197,150,184,175],
[176,164,0,164,167,177,178,171,200,176],
[185,165,177,0,168,188,178,156,191,179],
[186,168,174,173,0,173,193,161,187,188],
[167,164,164,153,168,0,168,173,163,169],
[174,144,163,163,148,173,0,170,170,176],
[180,191,170,185,180,168,171,0,194,186],
[153,157,141,150,154,178,171,147,0,163],
[164,166,165,162,153,172,165,155,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,188,177,173,187,207,167,181,176],
[170,0,200,180,151,182,193,151,187,166],
[153,141,0,159,156,156,183,152,157,161],
[164,161,182,0,164,169,195,149,152,161],
[168,190,185,177,0,193,194,161,162,171],
[154,159,185,172,148,0,190,173,162,156],
[134,148,158,146,147,151,0,142,153,141],
[174,190,189,192,180,168,199,0,170,174],
[160,154,184,189,179,179,188,171,0,160],
[165,175,180,180,170,185,200,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,191,175,156,204,175,204,197,171],
[156,0,221,156,183,144,201,183,156,182],
[150,120,0,139,148,124,192,153,144,107],
[166,185,202,0,191,195,209,203,209,148],
[185,158,193,150,0,215,208,192,209,166],
[137,197,217,146,126,0,168,190,184,155],
[166,140,149,132,133,173,0,167,166,158],
[137,158,188,138,149,151,174,0,151,112],
[144,185,197,132,132,157,175,190,0,152],
[170,159,234,193,175,186,183,229,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,173,168,179,156,159,173,172],
[163,0,168,164,161,181,157,163,169,177],
[173,173,0,173,164,170,172,163,176,179],
[168,177,168,0,171,182,165,170,182,177],
[173,180,177,170,0,188,171,176,168,175],
[162,160,171,159,153,0,157,158,166,163],
[185,184,169,176,170,184,0,166,183,168],
[182,178,178,171,165,183,175,0,179,178],
[168,172,165,159,173,175,158,162,0,175],
[169,164,162,164,166,178,173,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,115,226,187,138,153,185,169],
[234,0,184,167,263,265,210,184,210,230],
[224,157,0,189,231,284,208,202,213,207],
[226,174,152,0,262,256,226,190,282,217],
[115,78,110,79,0,104,124,102,198,110],
[154,76,57,85,237,0,99,107,195,160],
[203,131,133,115,217,242,0,211,223,224],
[188,157,139,151,239,234,130,0,222,207],
[156,131,128,59,143,146,118,119,0,204],
[172,111,134,124,231,181,117,134,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,153,167,176,160,167,166,161],
[173,0,160,164,190,176,150,192,153,166],
[173,181,0,174,174,194,167,171,157,171],
[188,177,167,0,190,197,162,181,164,189],
[174,151,167,151,0,167,159,166,163,153],
[165,165,147,144,174,0,160,152,158,144],
[181,191,174,179,182,181,0,168,176,179],
[174,149,170,160,175,189,173,0,157,162],
[175,188,184,177,178,183,165,184,0,177],
[180,175,170,152,188,197,162,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,178,165,169,178,160,161,162,157],
[162,0,164,162,164,165,162,163,168,156],
[163,177,0,180,174,180,165,177,171,171],
[176,179,161,0,167,174,175,168,172,158],
[172,177,167,174,0,173,179,167,174,165],
[163,176,161,167,168,0,169,165,168,153],
[181,179,176,166,162,172,0,174,178,168],
[180,178,164,173,174,176,167,0,176,160],
[179,173,170,169,167,173,163,165,0,171],
[184,185,170,183,176,188,173,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,187,181,183,159,163,178,179],
[166,0,177,179,165,180,167,163,181,157],
[161,164,0,181,170,191,172,172,173,174],
[154,162,160,0,161,150,152,151,161,167],
[160,176,171,180,0,156,167,159,162,160],
[158,161,150,191,185,0,169,153,163,175],
[182,174,169,189,174,172,0,183,164,187],
[178,178,169,190,182,188,158,0,169,170],
[163,160,168,180,179,178,177,172,0,169],
[162,184,167,174,181,166,154,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,154,195,166,155,157,175,172,175],
[158,0,139,168,159,149,161,156,163,163],
[187,202,0,178,174,175,170,192,185,198],
[146,173,163,0,171,139,153,136,149,163],
[175,182,167,170,0,171,150,176,184,189],
[186,192,166,202,170,0,179,174,156,194],
[184,180,171,188,191,162,0,178,190,209],
[166,185,149,205,165,167,163,0,163,193],
[169,178,156,192,157,185,151,178,0,193],
[166,178,143,178,152,147,132,148,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,194,183,172,202,177,167,179,189],
[171,0,160,164,169,208,167,135,210,190],
[147,181,0,177,191,169,170,152,204,185],
[158,177,164,0,176,153,149,162,185,191],
[169,172,150,165,0,166,134,137,201,186],
[139,133,172,188,175,0,135,152,182,171],
[164,174,171,192,207,206,0,216,180,186],
[174,206,189,179,204,189,125,0,183,181],
[162,131,137,156,140,159,161,158,0,174],
[152,151,156,150,155,170,155,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,181,164,155,158,168,136,169,149],
[181,0,178,160,153,167,172,151,154,172],
[160,163,0,150,171,162,175,142,162,157],
[177,181,191,0,165,174,193,177,162,193],
[186,188,170,176,0,178,181,177,170,191],
[183,174,179,167,163,0,201,151,169,200],
[173,169,166,148,160,140,0,131,134,162],
[205,190,199,164,164,190,210,0,190,189],
[172,187,179,179,171,172,207,151,0,191],
[192,169,184,148,150,141,179,152,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,193,175,185,166,162,184,154,160],
[159,0,138,157,165,127,131,158,123,168],
[148,203,0,183,182,163,188,189,178,165],
[166,184,158,0,202,171,186,173,142,176],
[156,176,159,139,0,152,163,170,122,137],
[175,214,178,170,189,0,185,183,153,187],
[179,210,153,155,178,156,0,153,146,153],
[157,183,152,168,171,158,188,0,174,148],
[187,218,163,199,219,188,195,167,0,193],
[181,173,176,165,204,154,188,193,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,177,176,194,184,164,189,177,184],
[178,0,179,181,176,184,160,168,163,183],
[164,162,0,165,182,176,175,178,166,188],
[165,160,176,0,182,173,171,176,172,174],
[147,165,159,159,0,163,149,165,150,180],
[157,157,165,168,178,0,146,171,170,164],
[177,181,166,170,192,195,0,191,183,190],
[152,173,163,165,176,170,150,0,156,181],
[164,178,175,169,191,171,158,185,0,178],
[157,158,153,167,161,177,151,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,188,169,153,171,176,161,171],
[177,0,169,173,175,160,172,176,172,173],
[168,172,0,193,193,166,183,177,164,177],
[153,168,148,0,183,163,163,173,163,169],
[172,166,148,158,0,154,147,157,156,159],
[188,181,175,178,187,0,177,176,166,172],
[170,169,158,178,194,164,0,170,171,160],
[165,165,164,168,184,165,171,0,178,170],
[180,169,177,178,185,175,170,163,0,174],
[170,168,164,172,182,169,181,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,175,180,168,166,153,163,184],
[167,0,181,182,165,161,165,183,173,174],
[171,160,0,171,150,164,177,171,161,184],
[166,159,170,0,155,166,165,165,184,177],
[161,176,191,186,0,188,166,186,193,188],
[173,180,177,175,153,0,177,177,169,172],
[175,176,164,176,175,164,0,173,188,174],
[188,158,170,176,155,164,168,0,169,168],
[178,168,180,157,148,172,153,172,0,175],
[157,167,157,164,153,169,167,173,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,189,168,160,177,174,170,172,164],
[165,0,186,170,180,183,166,174,176,164],
[152,155,0,148,163,175,170,150,180,155],
[173,171,193,0,169,173,164,153,193,162],
[181,161,178,172,0,173,174,162,161,173],
[164,158,166,168,168,0,163,165,173,147],
[167,175,171,177,167,178,0,169,178,160],
[171,167,191,188,179,176,172,0,185,164],
[169,165,161,148,180,168,163,156,0,156],
[177,177,186,179,168,194,181,177,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,174,183,166,164,183,167,175],
[160,0,167,165,176,176,174,174,169,173],
[160,174,0,154,181,168,171,179,167,160],
[167,176,187,0,176,183,179,190,167,165],
[158,165,160,165,0,170,167,162,165,160],
[175,165,173,158,171,0,176,169,163,168],
[177,167,170,162,174,165,0,176,174,166],
[158,167,162,151,179,172,165,0,170,161],
[174,172,174,174,176,178,167,171,0,175],
[166,168,181,176,181,173,175,180,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,159,163,215,163,176,151,141,208],
[182,0,177,191,216,160,160,162,155,203],
[182,164,0,160,211,152,190,169,199,171],
[178,150,181,0,174,160,171,166,147,167],
[126,125,130,167,0,170,174,122,164,191],
[178,181,189,181,171,0,212,174,149,212],
[165,181,151,170,167,129,0,152,159,168],
[190,179,172,175,219,167,189,0,186,207],
[200,186,142,194,177,192,182,155,0,199],
[133,138,170,174,150,129,173,134,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,145,165,179,164,153,153,168,170],
[185,0,166,187,186,201,172,187,162,172],
[196,175,0,192,193,185,174,180,166,167],
[176,154,149,0,175,166,145,149,165,166],
[162,155,148,166,0,184,125,155,144,161],
[177,140,156,175,157,0,152,152,156,160],
[188,169,167,196,216,189,0,164,174,172],
[188,154,161,192,186,189,177,0,160,199],
[173,179,175,176,197,185,167,181,0,171],
[171,169,174,175,180,181,169,142,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,140,166,185,143,130,177,174,148],
[158,0,92,136,199,165,126,198,153,103],
[201,249,0,177,245,158,143,267,234,174],
[175,205,164,0,242,172,155,230,204,110],
[156,142,96,99,0,124,113,173,125,100],
[198,176,183,169,217,0,209,229,218,160],
[211,215,198,186,228,132,0,260,256,141],
[164,143,74,111,168,112,81,0,166,104],
[167,188,107,137,216,123,85,175,0,86],
[193,238,167,231,241,181,200,237,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,166,158,164,152,128,149,150,165],
[192,0,186,162,200,159,166,177,173,184],
[175,155,0,191,180,140,155,161,149,186],
[183,179,150,0,183,172,155,156,172,178],
[177,141,161,158,0,151,165,164,141,169],
[189,182,201,169,190,0,188,157,151,159],
[213,175,186,186,176,153,0,159,168,173],
[192,164,180,185,177,184,182,0,188,184],
[191,168,192,169,200,190,173,153,0,160],
[176,157,155,163,172,182,168,157,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,147,150,188,166,162,164,152,146],
[209,0,154,175,200,196,181,207,201,160],
[194,187,0,154,164,157,177,198,170,204],
[191,166,187,0,217,171,205,193,192,187],
[153,141,177,124,0,164,168,184,159,161],
[175,145,184,170,177,0,196,196,172,175],
[179,160,164,136,173,145,0,192,204,176],
[177,134,143,148,157,145,149,0,146,157],
[189,140,171,149,182,169,137,195,0,176],
[195,181,137,154,180,166,165,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,153,147,154,153,149,152,157,162],
[191,0,172,173,163,177,178,179,186,185],
[188,169,0,167,177,172,170,177,169,178],
[194,168,174,0,172,169,167,166,167,175],
[187,178,164,169,0,183,174,176,180,180],
[188,164,169,172,158,0,177,164,160,159],
[192,163,171,174,167,164,0,173,162,168],
[189,162,164,175,165,177,168,0,163,171],
[184,155,172,174,161,181,179,178,0,170],
[179,156,163,166,161,182,173,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,122,114,183,126,167,132,119,167],
[204,0,156,194,206,147,186,171,172,216],
[219,185,0,179,169,178,169,156,126,206],
[227,147,162,0,170,165,159,165,153,175],
[158,135,172,171,0,132,170,115,111,172],
[215,194,163,176,209,0,171,163,151,207],
[174,155,172,182,171,170,0,175,167,189],
[209,170,185,176,226,178,166,0,150,182],
[222,169,215,188,230,190,174,191,0,224],
[174,125,135,166,169,134,152,159,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,153,159,173,151,174,188,185,175],
[177,0,166,156,163,171,169,160,184,141],
[188,175,0,161,129,156,160,190,152,153],
[182,185,180,0,164,197,181,175,181,181],
[168,178,212,177,0,173,177,174,180,159],
[190,170,185,144,168,0,151,210,177,138],
[167,172,181,160,164,190,0,192,181,167],
[153,181,151,166,167,131,149,0,158,161],
[156,157,189,160,161,164,160,183,0,190],
[166,200,188,160,182,203,174,180,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,192,185,183,159,163,148,209,171],
[137,0,161,161,155,146,156,144,175,159],
[149,180,0,186,173,142,163,141,188,180],
[156,180,155,0,158,146,146,132,192,171],
[158,186,168,183,0,139,154,127,170,163],
[182,195,199,195,202,0,159,173,216,191],
[178,185,178,195,187,182,0,162,191,177],
[193,197,200,209,214,168,179,0,211,201],
[132,166,153,149,171,125,150,130,0,152],
[170,182,161,170,178,150,164,140,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,182,179,191,196,175,194,169,166],
[159,0,168,197,162,176,172,178,156,166],
[159,173,0,170,165,186,154,175,181,188],
[162,144,171,0,187,183,156,171,186,152],
[150,179,176,154,0,181,179,148,187,144],
[145,165,155,158,160,0,161,157,189,152],
[166,169,187,185,162,180,0,203,201,152],
[147,163,166,170,193,184,138,0,180,160],
[172,185,160,155,154,152,140,161,0,165],
[175,175,153,189,197,189,189,181,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,159,157,160,172,158,173,157,183],
[177,0,183,183,170,186,176,187,163,169],
[182,158,0,174,171,182,173,175,171,169],
[184,158,167,0,169,182,177,182,170,167],
[181,171,170,172,0,185,170,182,171,170],
[169,155,159,159,156,0,152,155,156,158],
[183,165,168,164,171,189,0,180,166,178],
[168,154,166,159,159,186,161,0,160,164],
[184,178,170,171,170,185,175,181,0,173],
[158,172,172,174,171,183,163,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,103,272,173,183,229,222,240,180],
[113,0,126,162,224,146,179,226,193,119],
[238,215,0,253,161,205,238,224,225,180],
[69,179,88,0,165,107,104,209,190,104],
[168,117,180,176,0,133,182,161,205,130],
[158,195,136,234,208,0,177,205,225,175],
[112,162,103,237,159,164,0,182,141,115],
[119,115,117,132,180,136,159,0,228,146],
[101,148,116,151,136,116,200,113,0,137],
[161,222,161,237,211,166,226,195,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,151,163,148,135,137,184,145,151],
[204,0,189,182,203,154,202,182,174,207],
[190,152,0,192,190,142,171,160,169,175],
[178,159,149,0,174,180,181,165,151,167],
[193,138,151,167,0,146,144,150,136,147],
[206,187,199,161,195,0,193,190,172,173],
[204,139,170,160,197,148,0,148,166,171],
[157,159,181,176,191,151,193,0,182,192],
[196,167,172,190,205,169,175,159,0,195],
[190,134,166,174,194,168,170,149,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,182,179,172,171,184,172,161,171],
[150,0,164,167,138,161,172,153,158,148],
[159,177,0,171,142,178,169,162,156,160],
[162,174,170,0,163,193,165,149,177,174],
[169,203,199,178,0,182,174,176,173,176],
[170,180,163,148,159,0,177,163,165,158],
[157,169,172,176,167,164,0,156,169,167],
[169,188,179,192,165,178,185,0,158,146],
[180,183,185,164,168,176,172,183,0,174],
[170,193,181,167,165,183,174,195,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,162,159,158,175,158,174,171,174],
[191,0,179,179,174,184,170,184,169,156],
[179,162,0,167,157,185,171,172,171,160],
[182,162,174,0,166,176,176,170,158,165],
[183,167,184,175,0,187,172,174,167,160],
[166,157,156,165,154,0,161,167,162,150],
[183,171,170,165,169,180,0,174,185,154],
[167,157,169,171,167,174,167,0,175,157],
[170,172,170,183,174,179,156,166,0,159],
[167,185,181,176,181,191,187,184,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,178,155,235,190,203,144,197],
[178,0,175,202,203,220,200,174,168,194],
[176,166,0,160,163,191,171,170,156,159],
[163,139,181,0,145,203,172,164,135,155],
[186,138,178,196,0,236,178,188,178,177],
[106,121,150,138,105,0,132,132,135,148],
[151,141,170,169,163,209,0,177,161,165],
[138,167,171,177,153,209,164,0,141,166],
[197,173,185,206,163,206,180,200,0,187],
[144,147,182,186,164,193,176,175,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,169,178,168,174,173,180,166],
[175,0,164,174,184,171,176,166,171,177],
[169,177,0,177,193,189,176,187,177,172],
[172,167,164,0,163,177,183,178,169,170],
[163,157,148,178,0,161,168,166,163,177],
[173,170,152,164,180,0,168,179,170,160],
[167,165,165,158,173,173,0,179,165,167],
[168,175,154,163,175,162,162,0,161,166],
[161,170,164,172,178,171,176,180,0,169],
[175,164,169,171,164,181,174,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,170,155,154,166,166,156,150,157],
[194,0,179,171,174,180,191,176,166,186],
[171,162,0,174,153,170,177,161,163,179],
[186,170,167,0,165,182,170,163,180,179],
[187,167,188,176,0,165,169,168,170,182],
[175,161,171,159,176,0,178,164,172,183],
[175,150,164,171,172,163,0,169,153,173],
[185,165,180,178,173,177,172,0,158,186],
[191,175,178,161,171,169,188,183,0,180],
[184,155,162,162,159,158,168,155,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,159,142,165,155,156,167,166,169],
[178,0,177,157,168,165,164,166,161,170],
[182,164,0,159,166,165,166,170,164,160],
[199,184,182,0,169,175,166,173,183,181],
[176,173,175,172,0,173,165,170,157,153],
[186,176,176,166,168,0,170,173,185,180],
[185,177,175,175,176,171,0,174,167,179],
[174,175,171,168,171,168,167,0,171,163],
[175,180,177,158,184,156,174,170,0,178],
[172,171,181,160,188,161,162,178,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,162,173,177,173,170,167,155],
[162,0,152,156,158,155,166,159,167,166],
[160,189,0,161,192,166,171,168,166,157],
[179,185,180,0,180,178,182,165,187,158],
[168,183,149,161,0,169,173,159,153,155],
[164,186,175,163,172,0,160,185,158,165],
[168,175,170,159,168,181,0,171,172,171],
[171,182,173,176,182,156,170,0,178,187],
[174,174,175,154,188,183,169,163,0,173],
[186,175,184,183,186,176,170,154,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,119,127,149,146,154,135,154,142],
[204,0,187,178,227,199,203,204,196,169],
[222,154,0,198,216,183,191,228,169,201],
[214,163,143,0,174,153,124,155,213,157],
[192,114,125,167,0,161,128,123,164,161],
[195,142,158,188,180,0,191,149,183,133],
[187,138,150,217,213,150,0,148,170,155],
[206,137,113,186,218,192,193,0,166,152],
[187,145,172,128,177,158,171,175,0,164],
[199,172,140,184,180,208,186,189,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,175,155,172,168,170,171,176],
[161,0,179,170,164,176,166,158,170,168],
[158,162,0,146,147,153,152,151,153,147],
[166,171,195,0,170,175,168,172,178,173],
[186,177,194,171,0,167,176,189,176,169],
[169,165,188,166,174,0,174,176,168,173],
[173,175,189,173,165,167,0,179,160,176],
[171,183,190,169,152,165,162,0,164,159],
[170,171,188,163,165,173,181,177,0,162],
[165,173,194,168,172,168,165,182,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,190,191,199,167,155,202,175,153],
[170,0,192,185,207,158,142,181,179,164],
[151,149,0,182,188,155,139,200,132,158],
[150,156,159,0,190,153,157,194,164,161],
[142,134,153,151,0,127,160,188,141,160],
[174,183,186,188,214,0,180,175,182,169],
[186,199,202,184,181,161,0,223,171,167],
[139,160,141,147,153,166,118,0,134,149],
[166,162,209,177,200,159,170,207,0,193],
[188,177,183,180,181,172,174,192,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,187,166,167,179,174,180,173,172],
[163,0,172,160,169,169,168,168,174,171],
[154,169,0,151,158,160,164,158,156,158],
[175,181,190,0,176,180,166,173,169,176],
[174,172,183,165,0,161,163,170,180,176],
[162,172,181,161,180,0,164,168,164,164],
[167,173,177,175,178,177,0,184,185,181],
[161,173,183,168,171,173,157,0,167,181],
[168,167,185,172,161,177,156,174,0,165],
[169,170,183,165,165,177,160,160,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,186,190,179,146,173,194,180],
[172,0,175,167,176,176,155,179,207,185],
[177,166,0,171,193,187,180,171,198,182],
[155,174,170,0,186,186,151,176,196,166],
[151,165,148,155,0,161,153,146,180,151],
[162,165,154,155,180,0,158,174,175,179],
[195,186,161,190,188,183,0,207,206,185],
[168,162,170,165,195,167,134,0,186,177],
[147,134,143,145,161,166,135,155,0,172],
[161,156,159,175,190,162,156,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,168,146,177,158,163,155,163,169],
[198,0,200,172,182,194,191,192,170,178],
[173,141,0,141,163,175,158,160,142,159],
[195,169,200,0,178,181,184,178,181,181],
[164,159,178,163,0,147,161,174,164,162],
[183,147,166,160,194,0,163,171,171,167],
[178,150,183,157,180,178,0,170,167,178],
[186,149,181,163,167,170,171,0,167,170],
[178,171,199,160,177,170,174,174,0,188],
[172,163,182,160,179,174,163,171,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,192,181,187,218,154,203,208,216],
[159,0,196,200,179,206,179,209,210,184],
[149,145,0,192,193,209,168,205,190,179],
[160,141,149,0,153,182,186,193,190,183],
[154,162,148,188,0,182,157,225,211,187],
[123,135,132,159,159,0,153,177,201,142],
[187,162,173,155,184,188,0,207,200,187],
[138,132,136,148,116,164,134,0,168,176],
[133,131,151,151,130,140,141,173,0,164],
[125,157,162,158,154,199,154,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,172,166,184,171,159,184,161,183],
[157,0,154,164,173,134,154,163,145,166],
[169,187,0,168,192,175,149,165,166,176],
[175,177,173,0,196,182,177,186,169,170],
[157,168,149,145,0,138,160,167,150,159],
[170,207,166,159,203,0,159,199,179,187],
[182,187,192,164,181,182,0,181,174,185],
[157,178,176,155,174,142,160,0,148,148],
[180,196,175,172,191,162,167,193,0,182],
[158,175,165,171,182,154,156,193,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,195,169,183,178,187,163,163,207],
[154,0,163,161,167,171,161,172,148,190],
[146,178,0,155,165,183,172,149,154,170],
[172,180,186,0,169,177,187,156,174,180],
[158,174,176,172,0,185,183,162,176,192],
[163,170,158,164,156,0,167,168,164,173],
[154,180,169,154,158,174,0,155,149,180],
[178,169,192,185,179,173,186,0,170,193],
[178,193,187,167,165,177,192,171,0,211],
[134,151,171,161,149,168,161,148,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,184,182,163,174,165,180,166,180],
[171,0,172,179,168,191,177,174,166,166],
[157,169,0,185,177,166,170,164,167,173],
[159,162,156,0,166,160,150,169,154,161],
[178,173,164,175,0,166,185,175,163,163],
[167,150,175,181,175,0,173,193,161,163],
[176,164,171,191,156,168,0,188,176,178],
[161,167,177,172,166,148,153,0,148,172],
[175,175,174,187,178,180,165,193,0,181],
[161,175,168,180,178,178,163,169,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,174,160,202,164,167,182,164,193],
[149,0,145,170,171,150,164,165,142,162],
[167,196,0,185,211,171,169,198,173,183],
[181,171,156,0,190,169,174,186,151,177],
[139,170,130,151,0,140,154,170,141,158],
[177,191,170,172,201,0,173,207,160,175],
[174,177,172,167,187,168,0,186,167,173],
[159,176,143,155,171,134,155,0,150,175],
[177,199,168,190,200,181,174,191,0,190],
[148,179,158,164,183,166,168,166,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,159,125,109,171,225,113,168,155],
[138,0,128,118,106,181,173,118,156,105],
[182,213,0,132,156,193,223,96,147,170],
[216,223,209,0,190,223,254,166,270,166],
[232,235,185,151,0,175,211,184,182,223],
[170,160,148,118,166,0,163,149,156,157],
[116,168,118,87,130,178,0,108,130,162],
[228,223,245,175,157,192,233,0,159,209],
[173,185,194,71,159,185,211,182,0,187],
[186,236,171,175,118,184,179,132,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,32,210,196,234,234,129,247,196],
[145,0,92,133,168,155,155,135,71,236],
[309,249,0,210,164,273,253,249,273,301],
[131,208,131,0,117,222,192,168,235,279],
[145,173,177,224,0,274,234,274,184,224],
[107,186,68,119,67,0,200,184,138,139],
[107,186,88,149,107,141,0,184,67,135],
[212,206,92,173,67,157,157,0,170,210],
[94,270,68,106,157,203,274,171,0,189],
[145,105,40,62,117,202,206,131,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,165,176,192,166,169,174,174],
[169,0,170,172,170,200,178,172,178,185],
[171,171,0,164,184,197,182,176,185,173],
[176,169,177,0,176,208,182,181,173,174],
[165,171,157,165,0,193,165,174,169,175],
[149,141,144,133,148,0,152,154,141,151],
[175,163,159,159,176,189,0,168,171,177],
[172,169,165,160,167,187,173,0,163,178],
[167,163,156,168,172,200,170,178,0,175],
[167,156,168,167,166,190,164,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,149,158,170,171,186,167,151],
[171,0,166,172,173,168,176,162,172,187],
[170,175,0,157,134,136,161,158,164,154],
[192,169,184,0,173,174,171,159,167,172],
[183,168,207,168,0,163,178,153,176,192],
[171,173,205,167,178,0,178,177,187,183],
[170,165,180,170,163,163,0,167,167,162],
[155,179,183,182,188,164,174,0,182,166],
[174,169,177,174,165,154,174,159,0,173],
[190,154,187,169,149,158,179,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,158,170,112,103,167,135,178,203],
[148,0,174,158,157,182,155,151,186,228],
[183,167,0,152,186,159,145,190,211,181],
[171,183,189,0,164,226,127,184,175,210],
[229,184,155,177,0,162,124,148,210,256],
[238,159,182,115,179,0,200,146,149,190],
[174,186,196,214,217,141,0,210,252,213],
[206,190,151,157,193,195,131,0,171,160],
[163,155,130,166,131,192,89,170,0,191],
[138,113,160,131,85,151,128,181,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,151,154,167,184,135,176,144,188],
[148,0,136,149,173,167,110,136,145,155],
[190,205,0,141,135,177,185,170,136,174],
[187,192,200,0,151,131,144,133,179,151],
[174,168,206,190,0,166,179,145,147,165],
[157,174,164,210,175,0,158,158,167,183],
[206,231,156,197,162,183,0,140,146,118],
[165,205,171,208,196,183,201,0,159,215],
[197,196,205,162,194,174,195,182,0,187],
[153,186,167,190,176,158,223,126,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,185,204,132,191,156,166,179,197],
[176,0,186,187,161,211,186,191,187,200],
[156,155,0,159,120,151,131,170,143,155],
[137,154,182,0,150,154,139,133,149,197],
[209,180,221,191,0,199,203,205,163,203],
[150,130,190,187,142,0,134,142,151,162],
[185,155,210,202,138,207,0,167,164,201],
[175,150,171,208,136,199,174,0,172,211],
[162,154,198,192,178,190,177,169,0,209],
[144,141,186,144,138,179,140,130,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,158,169,157,162,165,168,186],
[163,0,154,162,179,163,158,178,178,170],
[183,187,0,167,195,172,166,180,177,176],
[183,179,174,0,193,174,168,178,180,177],
[172,162,146,148,0,160,150,160,165,167],
[184,178,169,167,181,0,185,180,184,177],
[179,183,175,173,191,156,0,183,173,173],
[176,163,161,163,181,161,158,0,169,160],
[173,163,164,161,176,157,168,172,0,179],
[155,171,165,164,174,164,168,181,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,117,164,148,165,162,147,143],
[177,0,199,169,183,213,153,148,185,183],
[177,142,0,174,170,183,178,118,179,177],
[224,172,167,0,201,172,178,143,166,165],
[177,158,171,140,0,177,153,136,200,161],
[193,128,158,169,164,0,178,152,151,152],
[176,188,163,163,188,163,0,112,144,149],
[179,193,223,198,205,189,229,0,202,169],
[194,156,162,175,141,190,197,139,0,157],
[198,158,164,176,180,189,192,172,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,172,177,168,165,155,164,173],
[172,0,174,162,174,155,155,168,166,179],
[173,167,0,155,167,151,156,169,157,178],
[169,179,186,0,191,163,173,167,168,183],
[164,167,174,150,0,150,160,170,162,171],
[173,186,190,178,191,0,187,168,178,193],
[176,186,185,168,181,154,0,180,176,180],
[186,173,172,174,171,173,161,0,165,181],
[177,175,184,173,179,163,165,176,0,180],
[168,162,163,158,170,148,161,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,179,173,163,178,172,197,160,173],
[153,0,142,180,169,173,164,154,156,148],
[162,199,0,157,174,188,157,164,165,165],
[168,161,184,0,157,183,163,174,143,177],
[178,172,167,184,0,167,165,192,177,169],
[163,168,153,158,174,0,147,162,131,152],
[169,177,184,178,176,194,0,198,164,183],
[144,187,177,167,149,179,143,0,169,176],
[181,185,176,198,164,210,177,172,0,177],
[168,193,176,164,172,189,158,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,188,157,170,165,178,156,167,165],
[177,0,176,160,182,168,167,167,162,174],
[153,165,0,166,168,161,148,155,157,177],
[184,181,175,0,167,163,177,170,173,184],
[171,159,173,174,0,174,174,160,149,177],
[176,173,180,178,167,0,170,162,150,179],
[163,174,193,164,167,171,0,180,149,176],
[185,174,186,171,181,179,161,0,163,189],
[174,179,184,168,192,191,192,178,0,168],
[176,167,164,157,164,162,165,152,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,179,188,157,179,161,163,173,160],
[166,0,160,177,167,175,164,160,169,167],
[162,181,0,180,159,169,170,161,172,171],
[153,164,161,0,152,165,156,160,167,159],
[184,174,182,189,0,186,172,183,186,167],
[162,166,172,176,155,0,165,174,181,166],
[180,177,171,185,169,176,0,170,182,170],
[178,181,180,181,158,167,171,0,177,163],
[168,172,169,174,155,160,159,164,0,167],
[181,174,170,182,174,175,171,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,180,194,201,198,168,185,217,165],
[165,0,181,193,194,188,183,175,188,179],
[161,160,0,182,197,198,175,171,192,196],
[147,148,159,0,208,172,163,182,201,166],
[140,147,144,133,0,162,151,155,185,166],
[143,153,143,169,179,0,153,165,192,161],
[173,158,166,178,190,188,0,188,191,177],
[156,166,170,159,186,176,153,0,189,179],
[124,153,149,140,156,149,150,152,0,164],
[176,162,145,175,175,180,164,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,174,157,170,168,160,171,171,180],
[157,0,165,150,146,158,162,163,158,181],
[167,176,0,173,171,173,163,179,166,192],
[184,191,168,0,168,175,180,172,176,178],
[171,195,170,173,0,169,173,171,180,199],
[173,183,168,166,172,0,165,163,176,173],
[181,179,178,161,168,176,0,170,174,188],
[170,178,162,169,170,178,171,0,163,178],
[170,183,175,165,161,165,167,178,0,182],
[161,160,149,163,142,168,153,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,187,173,179,173,162,159,189],
[161,0,186,174,184,158,169,178,180,181],
[168,155,0,173,161,158,156,157,154,161],
[154,167,168,0,175,178,158,172,161,172],
[168,157,180,166,0,169,164,177,171,191],
[162,183,183,163,172,0,174,179,162,180],
[168,172,185,183,177,167,0,176,169,185],
[179,163,184,169,164,162,165,0,174,173],
[182,161,187,180,170,179,172,167,0,178],
[152,160,180,169,150,161,156,168,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,164,166,156,177,180,172,173],
[174,0,150,148,168,162,168,173,173,175],
[175,191,0,170,168,177,188,184,193,191],
[177,193,171,0,170,166,185,189,178,193],
[175,173,173,171,0,156,177,184,170,169],
[185,179,164,175,185,0,179,192,187,181],
[164,173,153,156,164,162,0,170,166,162],
[161,168,157,152,157,149,171,0,167,168],
[169,168,148,163,171,154,175,174,0,169],
[168,166,150,148,172,160,179,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,144,158,196,176,155,171,155,147],
[176,0,195,178,202,233,215,146,175,189],
[197,146,0,169,207,182,171,169,126,158],
[183,163,172,0,168,193,198,195,176,173],
[145,139,134,173,0,171,135,156,89,160],
[165,108,159,148,170,0,174,167,137,166],
[186,126,170,143,206,167,0,180,129,162],
[170,195,172,146,185,174,161,0,166,158],
[186,166,215,165,252,204,212,175,0,214],
[194,152,183,168,181,175,179,183,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,162,157,171,162,170,162,167],
[171,0,173,165,177,167,163,172,155,172],
[182,168,0,171,162,165,156,159,157,143],
[179,176,170,0,169,147,156,175,164,175],
[184,164,179,172,0,156,161,177,149,174],
[170,174,176,194,185,0,144,158,175,162],
[179,178,185,185,180,197,0,197,165,191],
[171,169,182,166,164,183,144,0,147,174],
[179,186,184,177,192,166,176,194,0,190],
[174,169,198,166,167,179,150,167,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,173,181,162,147,163,174,161,148],
[179,0,189,182,164,157,181,175,174,167],
[168,152,0,184,157,148,161,166,146,160],
[160,159,157,0,164,146,185,156,170,172],
[179,177,184,177,0,171,193,172,176,158],
[194,184,193,195,170,0,174,182,185,171],
[178,160,180,156,148,167,0,165,151,154],
[167,166,175,185,169,159,176,0,169,158],
[180,167,195,171,165,156,190,172,0,165],
[193,174,181,169,183,170,187,183,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,216,170,149,183,163,174,166],
[171,0,173,216,190,174,191,186,151,177],
[176,168,0,193,175,176,178,192,173,176],
[125,125,148,0,155,146,159,174,158,149],
[171,151,166,186,0,155,167,186,152,179],
[192,167,165,195,186,0,178,204,175,177],
[158,150,163,182,174,163,0,178,171,151],
[178,155,149,167,155,137,163,0,153,163],
[167,190,168,183,189,166,170,188,0,186],
[175,164,165,192,162,164,190,178,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,153,155,172,150,157,146,164,164],
[168,0,158,166,167,152,173,177,161,181],
[188,183,0,175,177,168,183,175,172,171],
[186,175,166,0,163,163,178,160,182,173],
[169,174,164,178,0,170,178,163,162,177],
[191,189,173,178,171,0,198,162,171,177],
[184,168,158,163,163,143,0,159,158,163],
[195,164,166,181,178,179,182,0,174,176],
[177,180,169,159,179,170,183,167,0,192],
[177,160,170,168,164,164,178,165,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,162,154,156,162,166,167,194,163],
[184,0,179,168,168,173,182,165,201,162],
[179,162,0,160,183,168,186,146,197,142],
[187,173,181,0,181,198,182,151,193,150],
[185,173,158,160,0,166,182,173,174,153],
[179,168,173,143,175,0,174,150,175,158],
[175,159,155,159,159,167,0,179,170,183],
[174,176,195,190,168,191,162,0,181,176],
[147,140,144,148,167,166,171,160,0,137],
[178,179,199,191,188,183,158,165,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,174,195,168,186,200,180,188],
[171,0,170,187,213,174,172,184,173,183],
[161,171,0,188,192,168,156,178,174,168],
[167,154,153,0,191,170,171,185,161,164],
[146,128,149,150,0,143,150,166,144,151],
[173,167,173,171,198,0,165,177,161,171],
[155,169,185,170,191,176,0,194,151,178],
[141,157,163,156,175,164,147,0,154,168],
[161,168,167,180,197,180,190,187,0,191],
[153,158,173,177,190,170,163,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,178,165,167,171,187,158,167,171],
[179,0,160,167,170,179,187,174,181,169],
[163,181,0,173,179,158,191,168,171,167],
[176,174,168,0,175,162,186,177,175,168],
[174,171,162,166,0,160,189,172,167,165],
[170,162,183,179,181,0,182,174,181,170],
[154,154,150,155,152,159,0,152,155,154],
[183,167,173,164,169,167,189,0,178,173],
[174,160,170,166,174,160,186,163,0,161],
[170,172,174,173,176,171,187,168,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,192,181,192,181,181,173,193,161],
[177,0,154,163,188,162,167,179,215,169],
[149,187,0,184,152,178,166,179,171,172],
[160,178,157,0,163,167,191,193,184,185],
[149,153,189,178,0,178,193,208,209,177],
[160,179,163,174,163,0,165,188,202,173],
[160,174,175,150,148,176,0,156,197,178],
[168,162,162,148,133,153,185,0,186,174],
[148,126,170,157,132,139,144,155,0,174],
[180,172,169,156,164,168,163,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,341,178,341,122,260,204,260,260],
[283,0,285,122,339,201,285,285,204,204],
[0,56,0,56,137,0,56,82,56,202],
[163,219,285,0,219,81,221,165,221,283],
[0,2,204,122,0,2,2,204,122,204],
[219,140,341,260,339,0,260,341,260,260],
[81,56,285,120,339,81,0,285,204,202],
[137,56,259,176,137,0,56,0,56,258],
[81,137,285,120,219,81,137,285,0,283],
[81,137,139,58,137,81,139,83,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,138,195,199,174,191,183,162,168],
[113,0,123,142,156,151,140,159,150,137],
[203,218,0,226,199,185,253,158,201,149],
[146,199,115,0,143,196,214,117,173,150],
[142,185,142,198,0,168,212,138,165,190],
[167,190,156,145,173,0,189,145,171,164],
[150,201,88,127,129,152,0,130,168,146],
[158,182,183,224,203,196,211,0,181,199],
[179,191,140,168,176,170,173,160,0,154],
[173,204,192,191,151,177,195,142,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,217,143,195,215,183,114,291,149],
[169,0,133,84,172,125,228,133,196,133],
[124,208,0,69,159,181,188,103,220,36],
[198,257,272,0,194,215,257,139,281,190],
[146,169,182,147,0,182,180,52,258,116],
[126,216,160,126,159,0,185,96,217,120],
[158,113,153,84,161,156,0,84,163,153],
[227,208,238,202,289,245,257,0,281,169],
[50,145,121,60,83,124,178,60,0,39],
[192,208,305,151,225,221,188,172,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,110,167,205,156,165,126,106,211],
[147,0,128,152,166,166,167,141,148,185],
[231,213,0,195,237,201,190,157,175,194],
[174,189,146,0,200,166,165,141,170,199],
[136,175,104,141,0,117,135,107,107,168],
[185,175,140,175,224,0,170,74,120,184],
[176,174,151,176,206,171,0,125,153,204],
[215,200,184,200,234,267,216,0,141,208],
[235,193,166,171,234,221,188,200,0,232],
[130,156,147,142,173,157,137,133,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,163,164,194,186,168,178,188],
[169,0,171,156,173,161,170,183,157,191],
[159,170,0,148,154,164,186,180,147,179],
[178,185,193,0,180,179,167,180,189,188],
[177,168,187,161,0,167,190,187,165,183],
[147,180,177,162,174,0,171,196,163,174],
[155,171,155,174,151,170,0,166,177,180],
[173,158,161,161,154,145,175,0,144,173],
[163,184,194,152,176,178,164,197,0,193],
[153,150,162,153,158,167,161,168,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,177,177,172,172,168,178,184],
[169,0,169,175,171,169,171,177,178,170],
[163,172,0,169,171,166,167,180,190,182],
[164,166,172,0,163,171,151,169,177,183],
[164,170,170,178,0,167,179,173,195,169],
[169,172,175,170,174,0,170,178,186,183],
[169,170,174,190,162,171,0,185,184,177],
[173,164,161,172,168,163,156,0,168,170],
[163,163,151,164,146,155,157,173,0,167],
[157,171,159,158,172,158,164,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,183,178,190,179,150,172,159,161],
[157,0,163,173,176,166,149,162,159,156],
[158,178,0,188,191,181,166,174,161,158],
[163,168,153,0,187,174,169,173,156,150],
[151,165,150,154,0,169,156,160,136,145],
[162,175,160,167,172,0,150,165,161,148],
[191,192,175,172,185,191,0,174,170,182],
[169,179,167,168,181,176,167,0,157,157],
[182,182,180,185,205,180,171,184,0,168],
[180,185,183,191,196,193,159,184,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,168,185,181,168,174,184,186],
[167,0,167,165,172,170,157,172,164,168],
[164,174,0,171,166,179,174,176,169,174],
[173,176,170,0,180,185,174,165,175,179],
[156,169,175,161,0,171,169,165,158,168],
[160,171,162,156,170,0,169,162,185,159],
[173,184,167,167,172,172,0,158,170,179],
[167,169,165,176,176,179,183,0,178,175],
[157,177,172,166,183,156,171,163,0,172],
[155,173,167,162,173,182,162,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,164,146,153,153,161,170,152,180],
[187,0,162,154,174,167,173,168,181,211],
[177,179,0,173,160,166,181,170,168,202],
[195,187,168,0,162,170,164,180,165,199],
[188,167,181,179,0,181,195,166,175,205],
[188,174,175,171,160,0,192,179,178,201],
[180,168,160,177,146,149,0,183,158,195],
[171,173,171,161,175,162,158,0,175,200],
[189,160,173,176,166,163,183,166,0,203],
[161,130,139,142,136,140,146,141,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,181,147,202,162,177,177,178,172],
[169,0,178,171,175,168,159,183,170,158],
[160,163,0,167,167,160,163,164,169,152],
[194,170,174,0,181,152,170,185,189,177],
[139,166,174,160,0,140,170,173,156,178],
[179,173,181,189,201,0,182,182,178,154],
[164,182,178,171,171,159,0,175,174,167],
[164,158,177,156,168,159,166,0,162,171],
[163,171,172,152,185,163,167,179,0,159],
[169,183,189,164,163,187,174,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,168,148,147,161,160,164,181,149],
[150,0,167,136,146,133,142,150,134,160],
[173,174,0,141,141,139,177,140,167,149],
[193,205,200,0,183,168,186,177,170,173],
[194,195,200,158,0,142,170,151,158,206],
[180,208,202,173,199,0,211,172,168,212],
[181,199,164,155,171,130,0,145,159,163],
[177,191,201,164,190,169,196,0,218,177],
[160,207,174,171,183,173,182,123,0,174],
[192,181,192,168,135,129,178,164,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,173,186,176,162,164,170,198],
[173,0,171,170,176,167,163,161,158,178],
[163,170,0,191,175,178,161,167,178,187],
[168,171,150,0,163,161,164,150,183,175],
[155,165,166,178,0,184,161,162,168,173],
[165,174,163,180,157,0,171,172,177,181],
[179,178,180,177,180,170,0,166,174,182],
[177,180,174,191,179,169,175,0,174,190],
[171,183,163,158,173,164,167,167,0,181],
[143,163,154,166,168,160,159,151,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,193,247,232,183,229,210,164,185],
[157,0,143,216,188,155,151,149,129,149],
[148,198,0,185,215,147,171,157,115,145],
[94,125,156,0,145,97,178,170,139,141],
[109,153,126,196,0,131,167,135,118,165],
[158,186,194,244,210,0,217,253,183,199],
[112,190,170,163,174,124,0,183,179,157],
[131,192,184,171,206,88,158,0,159,145],
[177,212,226,202,223,158,162,182,0,177],
[156,192,196,200,176,142,184,196,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,194,162,157,174,162,172,179,165],
[173,0,177,173,160,163,156,181,176,161],
[147,164,0,154,169,174,145,171,173,156],
[179,168,187,0,169,175,156,165,168,174],
[184,181,172,172,0,177,172,173,155,169],
[167,178,167,166,164,0,163,145,172,157],
[179,185,196,185,169,178,0,170,191,189],
[169,160,170,176,168,196,171,0,169,171],
[162,165,168,173,186,169,150,172,0,171],
[176,180,185,167,172,184,152,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,165,145,165,188,176,156,164],
[179,0,160,183,174,188,184,173,171,172],
[172,181,0,182,165,172,190,182,171,184],
[176,158,159,0,153,174,185,175,168,156],
[196,167,176,188,0,181,187,177,178,186],
[176,153,169,167,160,0,187,188,162,170],
[153,157,151,156,154,154,0,152,164,147],
[165,168,159,166,164,153,189,0,178,154],
[185,170,170,173,163,179,177,163,0,187],
[177,169,157,185,155,171,194,187,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,161,179,178,175,178,176,164,193],
[161,0,151,174,170,173,166,171,160,181],
[180,190,0,172,179,170,164,178,173,187],
[162,167,169,0,175,168,177,161,164,191],
[163,171,162,166,0,156,158,168,150,171],
[166,168,171,173,185,0,179,173,175,189],
[163,175,177,164,183,162,0,178,166,180],
[165,170,163,180,173,168,163,0,161,185],
[177,181,168,177,191,166,175,180,0,193],
[148,160,154,150,170,152,161,156,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,209,193,202,198,170,182,195,204],
[169,0,167,175,187,192,168,179,189,170],
[132,174,0,190,190,174,173,172,167,187],
[148,166,151,0,188,179,149,155,164,167],
[139,154,151,153,0,162,133,152,171,152],
[143,149,167,162,179,0,155,159,179,171],
[171,173,168,192,208,186,0,209,177,180],
[159,162,169,186,189,182,132,0,176,181],
[146,152,174,177,170,162,164,165,0,163],
[137,171,154,174,189,170,161,160,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,165,174,167,163,166,163,174,172],
[174,0,158,164,156,165,149,169,163,165],
[176,183,0,161,177,150,159,153,165,162],
[167,177,180,0,179,175,160,166,158,172],
[174,185,164,162,0,165,154,167,168,167],
[178,176,191,166,176,0,172,180,178,185],
[175,192,182,181,187,169,0,168,167,187],
[178,172,188,175,174,161,173,0,168,168],
[167,178,176,183,173,163,174,173,0,184],
[169,176,179,169,174,156,154,173,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,192,164,189,175,168,195,196],
[164,0,174,162,154,172,169,172,197,160],
[166,167,0,160,149,168,174,190,192,186],
[149,179,181,0,171,184,168,165,216,194],
[177,187,192,170,0,198,178,175,225,160],
[152,169,173,157,143,0,157,152,181,157],
[166,172,167,173,163,184,0,177,184,167],
[173,169,151,176,166,189,164,0,223,184],
[146,144,149,125,116,160,157,118,0,171],
[145,181,155,147,181,184,174,157,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,151,194,189,162,166,162,155,176],
[176,0,174,181,188,169,185,155,170,165],
[190,167,0,203,168,161,191,150,179,157],
[147,160,138,0,160,156,167,129,155,143],
[152,153,173,181,0,169,177,147,175,129],
[179,172,180,185,172,0,196,170,185,150],
[175,156,150,174,164,145,0,145,170,155],
[179,186,191,212,194,171,196,0,199,166],
[186,171,162,186,166,156,171,142,0,119],
[165,176,184,198,212,191,186,175,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,170,157,173,169,160,160,166],
[161,0,172,160,165,170,165,152,147,170],
[164,169,0,166,166,168,173,142,153,158],
[171,181,175,0,169,179,168,159,163,187],
[184,176,175,172,0,184,175,171,165,188],
[168,171,173,162,157,0,166,156,159,179],
[172,176,168,173,166,175,0,168,163,181],
[181,189,199,182,170,185,173,0,172,187],
[181,194,188,178,176,182,178,169,0,181],
[175,171,183,154,153,162,160,154,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,158,158,180,176,168,157,168],
[171,0,161,179,170,182,160,170,176,184],
[175,180,0,181,184,185,187,169,187,190],
[183,162,160,0,167,158,176,157,155,163],
[183,171,157,174,0,163,168,166,166,163],
[161,159,156,183,178,0,154,160,159,190],
[165,181,154,165,173,187,0,184,165,178],
[173,171,172,184,175,181,157,0,178,173],
[184,165,154,186,175,182,176,163,0,176],
[173,157,151,178,178,151,163,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,179,169,160,162,167,182,177],
[178,0,172,163,173,168,172,184,185,173],
[170,169,0,177,165,175,173,179,172,180],
[162,178,164,0,186,178,187,167,180,169],
[172,168,176,155,0,181,169,183,175,183],
[181,173,166,163,160,0,179,181,178,181],
[179,169,168,154,172,162,0,170,179,185],
[174,157,162,174,158,160,171,0,180,175],
[159,156,169,161,166,163,162,161,0,162],
[164,168,161,172,158,160,156,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,239,173,239,314,195,148,270,248],
[237,0,135,174,210,210,91,197,210,210],
[102,206,0,205,272,194,127,153,102,126],
[168,167,136,0,211,167,92,211,167,167],
[102,131,69,130,0,219,52,153,102,126],
[27,131,147,174,122,0,103,122,75,222],
[146,250,214,249,289,238,0,197,119,145],
[193,144,188,130,188,219,144,0,193,192],
[71,131,239,174,239,266,222,148,0,248],
[93,131,215,174,215,119,196,149,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,167,155,184,156,180,190,173,195],
[186,0,160,160,156,147,177,175,182,202],
[174,181,0,156,190,150,187,187,189,212],
[186,181,185,0,167,162,174,173,184,179],
[157,185,151,174,0,173,157,169,181,195],
[185,194,191,179,168,0,195,191,196,230],
[161,164,154,167,184,146,0,178,178,180],
[151,166,154,168,172,150,163,0,162,189],
[168,159,152,157,160,145,163,179,0,190],
[146,139,129,162,146,111,161,152,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,165,160,154,161,181,169,156],
[171,0,160,173,159,145,166,178,170,160],
[171,181,0,179,162,153,166,179,172,163],
[176,168,162,0,144,154,152,177,159,160],
[181,182,179,197,0,178,167,183,185,171],
[187,196,188,187,163,0,179,189,191,173],
[180,175,175,189,174,162,0,178,182,161],
[160,163,162,164,158,152,163,0,170,159],
[172,171,169,182,156,150,159,171,0,166],
[185,181,178,181,170,168,180,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,185,170,180,180,170,186,166],
[162,0,173,166,154,185,171,170,170,166],
[175,168,0,162,174,178,176,165,182,170],
[156,175,179,0,166,187,181,167,170,162],
[171,187,167,175,0,192,167,166,180,172],
[161,156,163,154,149,0,171,168,163,158],
[161,170,165,160,174,170,0,166,168,174],
[171,171,176,174,175,173,175,0,172,162],
[155,171,159,171,161,178,173,169,0,161],
[175,175,171,179,169,183,167,179,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,181,158,199,179,192,187,193,174],
[152,0,137,159,161,170,150,161,189,158],
[160,204,0,180,173,197,174,170,183,170],
[183,182,161,0,177,201,198,196,210,189],
[142,180,168,164,0,171,179,190,195,173],
[162,171,144,140,170,0,177,177,163,157],
[149,191,167,143,162,164,0,159,173,164],
[154,180,171,145,151,164,182,0,166,149],
[148,152,158,131,146,178,168,175,0,149],
[167,183,171,152,168,184,177,192,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,188,166,213,178,232,239,176,159],
[90,0,162,134,216,160,187,186,156,135],
[153,179,0,143,209,167,168,197,190,109],
[175,207,198,0,212,198,188,181,232,128],
[128,125,132,129,0,169,180,151,151,103],
[163,181,174,143,172,0,170,246,229,213],
[109,154,173,153,161,171,0,192,127,121],
[102,155,144,160,190,95,149,0,89,70],
[165,185,151,109,190,112,214,252,0,110],
[182,206,232,213,238,128,220,271,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,162,160,152,170,164,174,153,159],
[168,0,178,185,188,181,192,172,183,182],
[179,163,0,171,180,184,182,185,170,178],
[181,156,170,0,172,177,186,175,151,170],
[189,153,161,169,0,168,170,166,164,170],
[171,160,157,164,173,0,180,181,166,181],
[177,149,159,155,171,161,0,163,157,171],
[167,169,156,166,175,160,178,0,173,170],
[188,158,171,190,177,175,184,168,0,175],
[182,159,163,171,171,160,170,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,180,181,163,184,173,189,199,160],
[170,0,172,204,181,177,175,181,186,183],
[161,169,0,184,160,169,150,168,186,179],
[160,137,157,0,145,148,134,153,173,122],
[178,160,181,196,0,163,166,162,194,144],
[157,164,172,193,178,0,178,163,166,167],
[168,166,191,207,175,163,0,176,175,167],
[152,160,173,188,179,178,165,0,188,152],
[142,155,155,168,147,175,166,153,0,154],
[181,158,162,219,197,174,174,189,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,159,149,150,152,164,166,169,143],
[197,0,181,172,162,167,168,180,176,154],
[182,160,0,157,159,158,162,165,173,167],
[192,169,184,0,173,180,166,178,189,173],
[191,179,182,168,0,168,181,186,179,179],
[189,174,183,161,173,0,178,161,190,160],
[177,173,179,175,160,163,0,178,182,168],
[175,161,176,163,155,180,163,0,183,158],
[172,165,168,152,162,151,159,158,0,161],
[198,187,174,168,162,181,173,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,161,184,194,162,179,180,202,180],
[128,0,131,137,160,146,187,141,178,126],
[180,210,0,179,178,161,195,180,217,193],
[157,204,162,0,169,188,216,192,210,168],
[147,181,163,172,0,182,223,168,194,204],
[179,195,180,153,159,0,238,164,209,161],
[162,154,146,125,118,103,0,149,193,119],
[161,200,161,149,173,177,192,0,190,178],
[139,163,124,131,147,132,148,151,0,115],
[161,215,148,173,137,180,222,163,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,172,178,164,191,186,197,190,176],
[156,0,151,172,160,159,168,176,173,167],
[169,190,0,183,181,186,191,200,180,175],
[163,169,158,0,176,164,181,185,182,164],
[177,181,160,165,0,172,179,185,171,154],
[150,182,155,177,169,0,182,187,178,160],
[155,173,150,160,162,159,0,180,178,158],
[144,165,141,156,156,154,161,0,167,140],
[151,168,161,159,170,163,163,174,0,146],
[165,174,166,177,187,181,183,201,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,176,186,171,189,181,200,175,177],
[182,0,188,201,176,181,167,188,174,172],
[165,153,0,164,163,165,166,181,165,145],
[155,140,177,0,155,160,154,171,159,156],
[170,165,178,186,0,214,169,174,181,157],
[152,160,176,181,127,0,156,161,180,159],
[160,174,175,187,172,185,0,196,193,167],
[141,153,160,170,167,180,145,0,168,169],
[166,167,176,182,160,161,148,173,0,168],
[164,169,196,185,184,182,174,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,180,188,173,180,173,159,172],
[168,0,174,177,169,186,181,178,170,150],
[163,167,0,176,176,177,196,186,161,168],
[161,164,165,0,188,172,188,176,161,157],
[153,172,165,153,0,156,184,185,164,157],
[168,155,164,169,185,0,172,174,170,153],
[161,160,145,153,157,169,0,167,145,151],
[168,163,155,165,156,167,174,0,142,164],
[182,171,180,180,177,171,196,199,0,169],
[169,191,173,184,184,188,190,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,147,213,128,182,144,187,142,221],
[141,0,107,195,147,182,160,162,126,159],
[194,234,0,220,190,195,205,188,159,228],
[128,146,121,0,88,136,137,113,112,148],
[213,194,151,253,0,211,237,183,178,235],
[159,159,146,205,130,0,193,181,147,193],
[197,181,136,204,104,148,0,170,180,175],
[154,179,153,228,158,160,171,0,134,240],
[199,215,182,229,163,194,161,207,0,228],
[120,182,113,193,106,148,166,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,163,186,160,171,169,154,156],
[171,0,155,157,176,169,165,182,155,161],
[165,186,0,152,173,174,170,177,171,162],
[178,184,189,0,193,173,177,187,161,171],
[155,165,168,148,0,165,168,156,162,168],
[181,172,167,168,176,0,170,188,154,162],
[170,176,171,164,173,171,0,171,155,164],
[172,159,164,154,185,153,170,0,161,168],
[187,186,170,180,179,187,186,180,0,177],
[185,180,179,170,173,179,177,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,173,167,179,162,149,156,148,163],
[194,0,221,168,194,177,175,183,179,184],
[168,120,0,165,143,151,168,140,146,151],
[174,173,176,0,187,186,169,155,183,156],
[162,147,198,154,0,178,155,141,151,159],
[179,164,190,155,163,0,144,154,142,162],
[192,166,173,172,186,197,0,167,184,157],
[185,158,201,186,200,187,174,0,182,163],
[193,162,195,158,190,199,157,159,0,164],
[178,157,190,185,182,179,184,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,162,185,183,182,168,167,172],
[170,0,152,165,174,172,176,164,158,159],
[175,189,0,179,181,186,180,185,166,169],
[179,176,162,0,173,185,174,171,171,164],
[156,167,160,168,0,176,179,155,168,153],
[158,169,155,156,165,0,166,155,153,151],
[159,165,161,167,162,175,0,160,176,156],
[173,177,156,170,186,186,181,0,168,162],
[174,183,175,170,173,188,165,173,0,164],
[169,182,172,177,188,190,185,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,162,179,157,168,171,155,170,157],
[167,0,160,152,162,180,176,161,163,150],
[179,181,0,172,170,170,179,172,174,168],
[162,189,169,0,184,177,169,164,184,177],
[184,179,171,157,0,174,179,179,168,180],
[173,161,171,164,167,0,161,160,170,163],
[170,165,162,172,162,180,0,166,171,160],
[186,180,169,177,162,181,175,0,178,169],
[171,178,167,157,173,171,170,163,0,158],
[184,191,173,164,161,178,181,172,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,156,169,169,163,173,165,171,183],
[162,0,170,165,184,181,181,175,175,173],
[185,171,0,171,187,174,173,185,184,166],
[172,176,170,0,206,186,177,190,188,198],
[172,157,154,135,0,179,159,168,184,180],
[178,160,167,155,162,0,173,163,175,167],
[168,160,168,164,182,168,0,168,157,151],
[176,166,156,151,173,178,173,0,167,176],
[170,166,157,153,157,166,184,174,0,164],
[158,168,175,143,161,174,190,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,159,167,167,160,164,189,165],
[168,0,163,147,172,143,178,175,171,154],
[175,178,0,153,163,168,160,184,174,133],
[182,194,188,0,167,189,187,185,218,171],
[174,169,178,174,0,166,166,185,187,164],
[174,198,173,152,175,0,159,178,186,154],
[181,163,181,154,175,182,0,164,172,148],
[177,166,157,156,156,163,177,0,188,169],
[152,170,167,123,154,155,169,153,0,151],
[176,187,208,170,177,187,193,172,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,177,164,171,176,162,163,178],
[179,0,184,180,180,177,184,173,168,192],
[169,157,0,167,163,173,165,179,174,173],
[164,161,174,0,173,181,159,176,164,188],
[177,161,178,168,0,174,164,175,173,178],
[170,164,168,160,167,0,172,173,166,172],
[165,157,176,182,177,169,0,179,186,190],
[179,168,162,165,166,168,162,0,168,164],
[178,173,167,177,168,175,155,173,0,177],
[163,149,168,153,163,169,151,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,205,227,202,184,199,164,183,224],
[127,0,165,154,155,183,184,159,182,196],
[136,176,0,194,182,170,145,161,225,239],
[114,187,147,0,159,182,168,162,194,202],
[139,186,159,182,0,182,174,164,170,202],
[157,158,171,159,159,0,170,147,149,199],
[142,157,196,173,167,171,0,178,147,176],
[177,182,180,179,177,194,163,0,216,181],
[158,159,116,147,171,192,194,125,0,193],
[117,145,102,139,139,142,165,160,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,189,174,185,166,154,178,183,173],
[160,0,185,180,181,182,184,184,163,195],
[152,156,0,143,163,159,152,145,154,149],
[167,161,198,0,173,174,161,163,168,182],
[156,160,178,168,0,156,157,167,171,171],
[175,159,182,167,185,0,152,165,182,175],
[187,157,189,180,184,189,0,174,160,180],
[163,157,196,178,174,176,167,0,182,192],
[158,178,187,173,170,159,181,159,0,176],
[168,146,192,159,170,166,161,149,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,246,194,186,143,109,139,209,170],
[167,0,167,246,167,107,190,221,212,181],
[95,174,0,184,145,184,81,139,152,195],
[147,95,157,0,147,81,83,90,178,170],
[155,174,196,194,0,116,123,188,171,114],
[198,234,157,260,225,0,238,235,200,172],
[232,151,260,258,218,103,0,148,259,170],
[202,120,202,251,153,106,193,0,203,137],
[132,129,189,163,170,141,82,138,0,196],
[171,160,146,171,227,169,171,204,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,174,180,157,156,173,174,186,170],
[165,0,165,161,159,160,162,163,171,153],
[167,176,0,174,170,169,172,159,185,175],
[161,180,167,0,161,165,179,169,180,168],
[184,182,171,180,0,163,166,174,185,174],
[185,181,172,176,178,0,186,181,186,170],
[168,179,169,162,175,155,0,169,172,170],
[167,178,182,172,167,160,172,0,181,169],
[155,170,156,161,156,155,169,160,0,162],
[171,188,166,173,167,171,171,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,164,165,165,165,184,156,159,162],
[182,0,171,169,164,163,177,160,167,165],
[177,170,0,159,174,168,174,176,172,163],
[176,172,182,0,177,165,168,169,179,168],
[176,177,167,164,0,170,167,156,178,159],
[176,178,173,176,171,0,184,169,159,175],
[157,164,167,173,174,157,0,169,163,155],
[185,181,165,172,185,172,172,0,181,167],
[182,174,169,162,163,182,178,160,0,161],
[179,176,178,173,182,166,186,174,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,152,170,184,187,175,176,169],
[170,0,173,164,167,184,162,172,180,159],
[157,168,0,157,174,196,173,155,169,160],
[189,177,184,0,180,190,172,177,168,178],
[171,174,167,161,0,203,170,161,155,163],
[157,157,145,151,138,0,142,143,159,139],
[154,179,168,169,171,199,0,182,182,166],
[166,169,186,164,180,198,159,0,175,167],
[165,161,172,173,186,182,159,166,0,168],
[172,182,181,163,178,202,175,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,251,140,110,182,166,210,132,122],
[173,0,243,117,117,158,114,168,156,129],
[90,98,0,85,134,127,136,118,133,112],
[201,224,256,0,135,238,178,218,158,170],
[231,224,207,206,0,223,183,167,231,216],
[159,183,214,103,118,0,111,171,175,162],
[175,227,205,163,158,230,0,258,150,135],
[131,173,223,123,174,170,83,0,229,128],
[209,185,208,183,110,166,191,112,0,142],
[219,212,229,171,125,179,206,213,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,169,169,178,124,149,151,141],
[163,0,157,165,157,146,156,149,145,155],
[183,184,0,195,179,190,165,181,166,182],
[172,176,146,0,172,174,156,168,174,164],
[172,184,162,169,0,170,152,158,148,156],
[163,195,151,167,171,0,157,147,191,155],
[217,185,176,185,189,184,0,157,177,167],
[192,192,160,173,183,194,184,0,188,181],
[190,196,175,167,193,150,164,153,0,153],
[200,186,159,177,185,186,174,160,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,165,149,173,170,160,165,164],
[169,0,148,174,157,186,173,162,171,171],
[180,193,0,165,179,184,182,170,174,178],
[176,167,176,0,168,187,173,169,175,158],
[192,184,162,173,0,182,179,169,177,178],
[168,155,157,154,159,0,164,151,163,158],
[171,168,159,168,162,177,0,165,169,161],
[181,179,171,172,172,190,176,0,170,171],
[176,170,167,166,164,178,172,171,0,167],
[177,170,163,183,163,183,180,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,144,149,194,125,136,136,152,169],
[172,0,110,160,183,136,161,134,113,158],
[197,231,0,184,205,182,193,176,158,180],
[192,181,157,0,226,159,200,160,168,185],
[147,158,136,115,0,142,125,161,147,134],
[216,205,159,182,199,0,157,157,162,170],
[205,180,148,141,216,184,0,167,182,194],
[205,207,165,181,180,184,174,0,129,191],
[189,228,183,173,194,179,159,212,0,215],
[172,183,161,156,207,171,147,150,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,156,152,155,161,173,181,149],
[164,0,152,145,147,152,151,185,158,160],
[172,189,0,160,168,185,173,186,173,176],
[185,196,181,0,149,164,178,169,178,147],
[189,194,173,192,0,153,159,168,159,171],
[186,189,156,177,188,0,157,173,199,183],
[180,190,168,163,182,184,0,161,181,163],
[168,156,155,172,173,168,180,0,168,149],
[160,183,168,163,182,142,160,173,0,177],
[192,181,165,194,170,158,178,192,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,151,165,146,149,177,157,149],
[173,0,180,175,159,177,161,175,161,164],
[168,161,0,180,173,167,161,170,188,172],
[190,166,161,0,169,161,150,166,172,175],
[176,182,168,172,0,175,183,157,178,166],
[195,164,174,180,166,0,177,168,190,175],
[192,180,180,191,158,164,0,184,183,183],
[164,166,171,175,184,173,157,0,177,166],
[184,180,153,169,163,151,158,164,0,169],
[192,177,169,166,175,166,158,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,152,168,164,156,163,168,158,186],
[185,0,166,170,166,164,157,174,178,182],
[189,175,0,173,184,159,167,168,152,194],
[173,171,168,0,168,178,182,165,165,185],
[177,175,157,173,0,154,163,165,177,191],
[185,177,182,163,187,0,177,179,165,186],
[178,184,174,159,178,164,0,165,181,175],
[173,167,173,176,176,162,176,0,159,186],
[183,163,189,176,164,176,160,182,0,198],
[155,159,147,156,150,155,166,155,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,200,181,173,197,198,156,198,179],
[145,0,154,159,140,155,163,145,165,144],
[141,187,0,150,147,167,172,140,166,157],
[160,182,191,0,183,188,180,163,191,178],
[168,201,194,158,0,178,181,164,175,161],
[144,186,174,153,163,0,184,147,155,177],
[143,178,169,161,160,157,0,151,172,155],
[185,196,201,178,177,194,190,0,170,179],
[143,176,175,150,166,186,169,171,0,163],
[162,197,184,163,180,164,186,162,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,175,160,174,192,190,154,175,177],
[154,0,190,177,190,182,174,172,177,178],
[166,151,0,162,169,180,151,159,144,173],
[181,164,179,0,183,189,146,160,186,158],
[167,151,172,158,0,195,152,161,155,173],
[149,159,161,152,146,0,139,153,159,163],
[151,167,190,195,189,202,0,177,180,179],
[187,169,182,181,180,188,164,0,176,172],
[166,164,197,155,186,182,161,165,0,174],
[164,163,168,183,168,178,162,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,155,124,156,147,188,151,157,181],
[196,0,177,132,151,157,176,171,158,165],
[186,164,0,165,161,182,201,176,169,164],
[217,209,176,0,169,205,186,181,173,192],
[185,190,180,172,0,174,202,166,187,156],
[194,184,159,136,167,0,192,186,178,171],
[153,165,140,155,139,149,0,174,137,152],
[190,170,165,160,175,155,167,0,155,170],
[184,183,172,168,154,163,204,186,0,168],
[160,176,177,149,185,170,189,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,192,175,163,170,178,177,170,174],
[171,0,187,175,184,176,176,179,167,167],
[149,154,0,152,159,149,152,161,146,150],
[166,166,189,0,157,145,173,186,156,163],
[178,157,182,184,0,173,188,175,170,175],
[171,165,192,196,168,0,184,170,163,167],
[163,165,189,168,153,157,0,174,162,176],
[164,162,180,155,166,171,167,0,165,176],
[171,174,195,185,171,178,179,176,0,163],
[167,174,191,178,166,174,165,165,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,203,173,122,131,202,152,185,163],
[140,0,200,150,150,139,191,192,244,203],
[138,141,0,121,132,133,153,147,189,175],
[168,191,220,0,144,145,188,157,192,160],
[219,191,209,197,0,157,213,247,145,210],
[210,202,208,196,184,0,185,248,170,206],
[139,150,188,153,128,156,0,182,212,190],
[189,149,194,184,94,93,159,0,164,178],
[156,97,152,149,196,171,129,177,0,127],
[178,138,166,181,131,135,151,163,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,155,186,171,163,212,161,169],
[163,0,168,147,170,161,160,178,142,142],
[167,173,0,175,187,167,172,206,176,172],
[186,194,166,0,185,170,167,197,175,179],
[155,171,154,156,0,198,166,174,146,148],
[170,180,174,171,143,0,168,175,173,164],
[178,181,169,174,175,173,0,197,173,180],
[129,163,135,144,167,166,144,0,145,165],
[180,199,165,166,195,168,168,196,0,179],
[172,199,169,162,193,177,161,176,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,183,134,172,194,167,189,186],
[171,0,171,159,152,155,179,179,187,175],
[159,170,0,158,169,175,178,150,228,174],
[158,182,183,0,161,173,164,167,197,165],
[207,189,172,180,0,160,191,174,188,173],
[169,186,166,168,181,0,177,174,230,165],
[147,162,163,177,150,164,0,173,182,174],
[174,162,191,174,167,167,168,0,207,206],
[152,154,113,144,153,111,159,134,0,130],
[155,166,167,176,168,176,167,135,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,181,183,174,164,174,178,188,208],
[158,0,153,176,160,165,160,162,166,159],
[160,188,0,171,175,177,176,169,186,170],
[158,165,170,0,166,164,157,174,181,166],
[167,181,166,175,0,157,175,183,189,175],
[177,176,164,177,184,0,178,169,181,188],
[167,181,165,184,166,163,0,178,184,181],
[163,179,172,167,158,172,163,0,184,166],
[153,175,155,160,152,160,157,157,0,165],
[133,182,171,175,166,153,160,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,157,160,181,179,148,155,164,155],
[184,0,180,182,196,192,175,170,174,172],
[184,161,0,151,179,184,160,155,176,169],
[181,159,190,0,182,194,178,162,180,165],
[160,145,162,159,0,170,158,157,160,163],
[162,149,157,147,171,0,158,157,160,159],
[193,166,181,163,183,183,0,168,199,169],
[186,171,186,179,184,184,173,0,170,190],
[177,167,165,161,181,181,142,171,0,172],
[186,169,172,176,178,182,172,151,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,152,159,173,164,177,186,163,178],
[164,0,168,173,163,195,198,173,162,147],
[189,173,0,171,181,204,165,186,159,189],
[182,168,170,0,174,163,173,170,147,158],
[168,178,160,167,0,195,170,171,162,182],
[177,146,137,178,146,0,175,155,146,154],
[164,143,176,168,171,166,0,165,142,139],
[155,168,155,171,170,186,176,0,165,164],
[178,179,182,194,179,195,199,176,0,160],
[163,194,152,183,159,187,202,177,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,179,184,166,175,173,192,179],
[166,0,168,168,178,165,166,169,173,181],
[163,173,0,164,171,158,169,151,168,171],
[162,173,177,0,186,180,172,179,175,174],
[157,163,170,155,0,161,157,165,179,172],
[175,176,183,161,180,0,169,166,176,187],
[166,175,172,169,184,172,0,176,177,180],
[168,172,190,162,176,175,165,0,179,180],
[149,168,173,166,162,165,164,162,0,170],
[162,160,170,167,169,154,161,161,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,162,159,166,158,173,152,169,180],
[164,0,163,165,156,163,174,173,173,168],
[179,178,0,166,158,163,177,174,164,176],
[182,176,175,0,162,172,181,176,159,176],
[175,185,183,179,0,170,172,184,170,184],
[183,178,178,169,171,0,177,175,174,186],
[168,167,164,160,169,164,0,164,163,169],
[189,168,167,165,157,166,177,0,166,169],
[172,168,177,182,171,167,178,175,0,177],
[161,173,165,165,157,155,172,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,145,171,157,156,162,165,175],
[169,0,163,169,172,174,181,167,170,197],
[176,178,0,171,184,177,167,168,170,181],
[196,172,170,0,174,175,159,158,174,184],
[170,169,157,167,0,166,176,170,178,183],
[184,167,164,166,175,0,162,174,176,195],
[185,160,174,182,165,179,0,191,180,179],
[179,174,173,183,171,167,150,0,187,182],
[176,171,171,167,163,165,161,154,0,178],
[166,144,160,157,158,146,162,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,218,220,158,133,257,215,174,259],
[114,0,161,196,202,142,202,91,190,194],
[123,180,0,168,163,147,166,83,173,167],
[121,145,173,0,151,183,116,89,141,166],
[183,139,178,190,0,218,132,105,236,160],
[208,199,194,158,123,0,195,140,135,185],
[84,139,175,225,209,146,0,141,182,194],
[126,250,258,252,236,201,200,0,215,221],
[167,151,168,200,105,206,159,126,0,119],
[82,147,174,175,181,156,147,120,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,185,180,171,197,173,181,150],
[176,0,159,185,177,156,202,163,189,166],
[172,182,0,185,174,145,201,159,153,165],
[156,156,156,0,160,148,182,172,172,138],
[161,164,167,181,0,189,218,174,187,182],
[170,185,196,193,152,0,206,171,166,152],
[144,139,140,159,123,135,0,142,159,135],
[168,178,182,169,167,170,199,0,177,144],
[160,152,188,169,154,175,182,164,0,131],
[191,175,176,203,159,189,206,197,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,192,157,171,189,166,162,175,169],
[155,0,181,155,178,163,166,156,176,159],
[149,160,0,150,161,171,162,148,159,154],
[184,186,191,0,183,186,187,168,179,172],
[170,163,180,158,0,168,170,151,164,160],
[152,178,170,155,173,0,172,146,152,155],
[175,175,179,154,171,169,0,153,173,169],
[179,185,193,173,190,195,188,0,176,170],
[166,165,182,162,177,189,168,165,0,161],
[172,182,187,169,181,186,172,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,161,171,179,147,186,146,165,178],
[156,0,163,164,163,143,165,154,162,170],
[180,178,0,156,173,180,196,183,175,177],
[170,177,185,0,174,123,155,125,171,175],
[162,178,168,167,0,182,158,115,133,177],
[194,198,161,218,159,0,180,131,165,187],
[155,176,145,186,183,161,0,120,188,200],
[195,187,158,216,226,210,221,0,215,205],
[176,179,166,170,208,176,153,126,0,202],
[163,171,164,166,164,154,141,136,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,162,181,174,156,182,173,161,189],
[191,0,172,181,210,185,192,194,168,203],
[179,169,0,185,187,185,182,187,189,191],
[160,160,156,0,173,159,180,156,161,187],
[167,131,154,168,0,176,175,155,163,171],
[185,156,156,182,165,0,193,178,161,180],
[159,149,159,161,166,148,0,166,169,170],
[168,147,154,185,186,163,175,0,161,177],
[180,173,152,180,178,180,172,180,0,184],
[152,138,150,154,170,161,171,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,162,167,170,171,152,193,160,152],
[157,0,144,156,168,156,136,168,147,148],
[179,197,0,166,178,171,177,188,170,164],
[174,185,175,0,158,178,166,186,182,172],
[171,173,163,183,0,176,155,178,174,159],
[170,185,170,163,165,0,160,198,167,171],
[189,205,164,175,186,181,0,193,183,168],
[148,173,153,155,163,143,148,0,152,140],
[181,194,171,159,167,174,158,189,0,162],
[189,193,177,169,182,170,173,201,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,122,62,176,162,160,193,62,162],
[279,0,213,154,176,190,237,148,212,176],
[219,128,0,146,130,132,234,163,248,70],
[279,187,195,0,248,248,174,146,165,173],
[165,165,211,93,0,221,207,121,195,161],
[179,151,209,93,120,0,176,122,166,13],
[181,104,107,167,134,165,0,180,122,63],
[148,193,178,195,220,219,161,0,195,99],
[279,129,93,176,146,175,219,146,0,100],
[179,165,271,168,180,328,278,242,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,174,185,170,170,173,178,189,177],
[148,0,168,171,163,160,178,179,170,178],
[167,173,0,183,174,175,168,181,182,165],
[156,170,158,0,165,162,170,169,168,163],
[171,178,167,176,0,175,182,172,177,169],
[171,181,166,179,166,0,177,177,181,171],
[168,163,173,171,159,164,0,185,177,167],
[163,162,160,172,169,164,156,0,169,165],
[152,171,159,173,164,160,164,172,0,157],
[164,163,176,178,172,170,174,176,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,173,174,180,168,186,175,160],
[163,0,171,173,185,167,172,175,170,171],
[168,170,0,170,181,175,173,160,171,161],
[168,168,171,0,175,162,163,174,170,169],
[167,156,160,166,0,171,169,166,168,164],
[161,174,166,179,170,0,163,168,165,159],
[173,169,168,178,172,178,0,179,172,169],
[155,166,181,167,175,173,162,0,168,159],
[166,171,170,171,173,176,169,173,0,157],
[181,170,180,172,177,182,172,182,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,176,165,158,174,190,169,183,173],
[151,0,158,156,157,156,159,150,165,155],
[165,183,0,176,173,174,179,167,184,167],
[176,185,165,0,165,160,179,163,170,162],
[183,184,168,176,0,180,188,172,181,163],
[167,185,167,181,161,0,167,158,180,167],
[151,182,162,162,153,174,0,157,160,166],
[172,191,174,178,169,183,184,0,182,186],
[158,176,157,171,160,161,181,159,0,167],
[168,186,174,179,178,174,175,155,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,163,183,163,169,175,177,167,183],
[179,0,176,181,161,176,175,182,174,204],
[178,165,0,179,163,169,172,180,175,176],
[158,160,162,0,163,163,168,163,176,173],
[178,180,178,178,0,177,187,183,163,178],
[172,165,172,178,164,0,156,165,168,172],
[166,166,169,173,154,185,0,187,185,189],
[164,159,161,178,158,176,154,0,173,175],
[174,167,166,165,178,173,156,168,0,188],
[158,137,165,168,163,169,152,166,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,187,173,172,176,186,199,188,166],
[154,0,188,174,160,164,183,181,151,165],
[154,153,0,164,157,163,179,191,184,160],
[168,167,177,0,159,178,183,194,182,163],
[169,181,184,182,0,162,178,188,174,160],
[165,177,178,163,179,0,167,177,146,177],
[155,158,162,158,163,174,0,170,151,155],
[142,160,150,147,153,164,171,0,176,170],
[153,190,157,159,167,195,190,165,0,172],
[175,176,181,178,181,164,186,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,131,155,146,197,151,175,175,141],
[189,0,158,163,171,206,178,191,174,137],
[210,183,0,188,167,186,208,183,197,166],
[186,178,153,0,170,191,187,178,208,177],
[195,170,174,171,0,180,198,196,179,170],
[144,135,155,150,161,0,169,178,156,140],
[190,163,133,154,143,172,0,170,191,166],
[166,150,158,163,145,163,171,0,179,164],
[166,167,144,133,162,185,150,162,0,169],
[200,204,175,164,171,201,175,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,164,169,171,181,167,176,183,185],
[159,0,177,185,172,177,178,156,158,189],
[177,164,0,161,175,193,159,181,185,178],
[172,156,180,0,180,198,165,175,186,188],
[170,169,166,161,0,188,152,174,154,177],
[160,164,148,143,153,0,163,156,140,157],
[174,163,182,176,189,178,0,169,163,194],
[165,185,160,166,167,185,172,0,184,189],
[158,183,156,155,187,201,178,157,0,182],
[156,152,163,153,164,184,147,152,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,150,188,179,191,170,143,163,167],
[159,0,184,175,194,206,157,175,183,133],
[191,157,0,184,155,197,151,169,171,136],
[153,166,157,0,136,168,156,175,183,187],
[162,147,186,205,0,190,126,151,180,166],
[150,135,144,173,151,0,143,140,185,122],
[171,184,190,185,215,198,0,163,218,176],
[198,166,172,166,190,201,178,0,194,162],
[178,158,170,158,161,156,123,147,0,141],
[174,208,205,154,175,219,165,179,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,151,154,149,117,179,152,182],
[178,0,191,181,166,166,159,155,167,202],
[169,150,0,161,134,147,145,123,204,144],
[190,160,180,0,175,178,170,160,155,179],
[187,175,207,166,0,167,179,164,206,199],
[192,175,194,163,174,0,166,162,177,174],
[224,182,196,171,162,175,0,218,224,205],
[162,186,218,181,177,179,123,0,182,180],
[189,174,137,186,135,164,117,159,0,180],
[159,139,197,162,142,167,136,161,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,171,170,167,153,165,171,155,177],
[153,0,162,164,158,135,169,163,155,163],
[170,179,0,176,161,158,171,178,167,187],
[171,177,165,0,159,146,173,165,157,174],
[174,183,180,182,0,171,167,188,164,168],
[188,206,183,195,170,0,208,189,182,191],
[176,172,170,168,174,133,0,167,158,184],
[170,178,163,176,153,152,174,0,154,179],
[186,186,174,184,177,159,183,187,0,187],
[164,178,154,167,173,150,157,162,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,168,161,158,154,165,159,161],
[168,0,167,165,176,162,141,176,165,187],
[165,174,0,168,171,163,172,163,167,185],
[173,176,173,0,156,153,171,178,168,176],
[180,165,170,185,0,178,165,183,170,191],
[183,179,178,188,163,0,165,185,153,185],
[187,200,169,170,176,176,0,186,179,203],
[176,165,178,163,158,156,155,0,170,170],
[182,176,174,173,171,188,162,171,0,194],
[180,154,156,165,150,156,138,171,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,106,171,156,133,139,129,118,164],
[198,0,183,210,227,140,196,203,190,219],
[235,158,0,178,210,190,185,166,187,177],
[170,131,163,0,213,140,131,150,158,196],
[185,114,131,128,0,150,186,167,156,177],
[208,201,151,201,191,0,160,152,168,169],
[202,145,156,210,155,181,0,150,179,171],
[212,138,175,191,174,189,191,0,171,152],
[223,151,154,183,185,173,162,170,0,188],
[177,122,164,145,164,172,170,189,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,154,156,157,151,163,158,138],
[173,0,196,165,143,143,158,146,153,154],
[175,145,0,149,168,167,174,145,133,175],
[187,176,192,0,159,199,160,200,159,164],
[185,198,173,182,0,184,177,173,179,168],
[184,198,174,142,157,0,171,156,146,170],
[190,183,167,181,164,170,0,191,178,176],
[178,195,196,141,168,185,150,0,143,172],
[183,188,208,182,162,195,163,198,0,166],
[203,187,166,177,173,171,165,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,181,172,192,182,172,195,184,190],
[187,0,183,182,171,158,178,199,188,185],
[160,158,0,152,151,157,135,162,166,181],
[169,159,189,0,167,174,171,195,183,190],
[149,170,190,174,0,175,173,191,161,167],
[159,183,184,167,166,0,137,182,169,162],
[169,163,206,170,168,204,0,200,174,192],
[146,142,179,146,150,159,141,0,170,161],
[157,153,175,158,180,172,167,171,0,176],
[151,156,160,151,174,179,149,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,171,169,159,166,160,167,183,156],
[190,0,192,194,186,175,161,180,170,182],
[170,149,0,170,165,194,148,165,185,154],
[172,147,171,0,165,163,140,148,177,157],
[182,155,176,176,0,182,156,169,180,167],
[175,166,147,178,159,0,147,157,175,187],
[181,180,193,201,185,194,0,166,189,179],
[174,161,176,193,172,184,175,0,196,173],
[158,171,156,164,161,166,152,145,0,145],
[185,159,187,184,174,154,162,168,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,220,162,179,236,166,213,206,204],
[113,0,127,109,139,134,102,145,149,132],
[121,214,0,140,138,144,159,187,119,89],
[179,232,201,0,163,197,154,183,177,161],
[162,202,203,178,0,185,135,203,171,173],
[105,207,197,144,156,0,150,219,176,168],
[175,239,182,187,206,191,0,225,183,141],
[128,196,154,158,138,122,116,0,133,88],
[135,192,222,164,170,165,158,208,0,120],
[137,209,252,180,168,173,200,253,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,157,181,180,202,176,168,189,182],
[163,0,163,189,189,206,191,160,211,195],
[184,178,0,184,169,207,192,204,232,197],
[160,152,157,0,179,183,177,160,171,194],
[161,152,172,162,0,196,181,175,207,181],
[139,135,134,158,145,0,147,136,181,172],
[165,150,149,164,160,194,0,144,179,200],
[173,181,137,181,166,205,197,0,212,223],
[152,130,109,170,134,160,162,129,0,189],
[159,146,144,147,160,169,141,118,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,192,178,165,156,182,193,175,195],
[172,0,177,162,158,162,163,185,156,155],
[149,164,0,151,153,151,150,178,150,172],
[163,179,190,0,163,158,171,186,155,172],
[176,183,188,178,0,178,201,188,174,167],
[185,179,190,183,163,0,168,181,178,174],
[159,178,191,170,140,173,0,167,148,167],
[148,156,163,155,153,160,174,0,151,175],
[166,185,191,186,167,163,193,190,0,184],
[146,186,169,169,174,167,174,166,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,258,154,232,185,114,183,146,157],
[83,0,268,83,313,195,195,83,83,195],
[83,73,0,126,157,126,2,83,45,238],
[187,258,215,0,232,230,189,187,118,230],
[109,28,184,109,0,109,2,109,109,193],
[156,146,215,111,232,0,189,156,103,193],
[227,146,339,152,339,152,0,227,227,236],
[158,258,258,154,232,185,114,0,148,157],
[195,258,296,223,232,238,114,193,0,195],
[184,146,103,111,148,148,105,184,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,161,144,159,168,148,161,154],
[166,0,163,165,160,167,163,165,155,155],
[178,178,0,175,155,177,172,162,164,170],
[180,176,166,0,163,161,157,169,151,167],
[197,181,186,178,0,181,187,176,172,166],
[182,174,164,180,160,0,166,167,166,154],
[173,178,169,184,154,175,0,163,169,164],
[193,176,179,172,165,174,178,0,168,173],
[180,186,177,190,169,175,172,173,0,164],
[187,186,171,174,175,187,177,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,171,165,172,167,168,184,181],
[164,0,162,171,172,158,159,159,180,162],
[166,179,0,179,168,161,175,170,185,185],
[170,170,162,0,174,162,162,171,180,175],
[176,169,173,167,0,161,158,167,181,175],
[169,183,180,179,180,0,171,168,199,184],
[174,182,166,179,183,170,0,159,177,181],
[173,182,171,170,174,173,182,0,198,179],
[157,161,156,161,160,142,164,143,0,166],
[160,179,156,166,166,157,160,162,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,171,163,187,170,189,172,194],
[159,0,164,164,149,168,184,152,176,168],
[174,177,0,166,151,172,171,190,185,172],
[170,177,175,0,154,171,163,171,173,163],
[178,192,190,187,0,167,165,171,204,178],
[154,173,169,170,174,0,180,165,168,172],
[171,157,170,178,176,161,0,180,167,177],
[152,189,151,170,170,176,161,0,181,181],
[169,165,156,168,137,173,174,160,0,165],
[147,173,169,178,163,169,164,160,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,209,184,167,161,146,184,167,167],
[140,0,170,152,152,136,140,157,150,154],
[132,171,0,144,132,113,125,145,138,138],
[157,189,197,0,154,145,141,139,141,148],
[174,189,209,187,0,144,175,144,173,171],
[180,205,228,196,197,0,161,124,164,181],
[195,201,216,200,166,180,0,142,163,181],
[157,184,196,202,197,217,199,0,184,188],
[174,191,203,200,168,177,178,157,0,183],
[174,187,203,193,170,160,160,153,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,148,175,174,162,135,151,194,168],
[180,0,125,152,169,162,179,138,173,141],
[193,216,0,193,193,190,167,186,194,213],
[166,189,148,0,180,161,154,128,173,154],
[167,172,148,161,0,161,132,146,177,154],
[179,179,151,180,180,0,166,163,174,164],
[206,162,174,187,209,175,0,171,188,191],
[190,203,155,213,195,178,170,0,184,182],
[147,168,147,168,164,167,153,157,0,167],
[173,200,128,187,187,177,150,159,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,182,151,156,198,168,222,152,160],
[195,0,210,146,165,195,179,197,181,185],
[159,131,0,172,132,165,170,182,152,199],
[190,195,169,0,175,188,180,207,190,185],
[185,176,209,166,0,194,214,179,206,206],
[143,146,176,153,147,0,141,215,157,164],
[173,162,171,161,127,200,0,202,148,175],
[119,144,159,134,162,126,139,0,149,128],
[189,160,189,151,135,184,193,192,0,171],
[181,156,142,156,135,177,166,213,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,150,171,163,163,171,163,160],
[177,0,181,173,176,166,167,178,178,160],
[171,160,0,157,172,154,155,172,164,152],
[191,168,184,0,177,171,171,189,193,181],
[170,165,169,164,0,161,161,176,170,169],
[178,175,187,170,180,0,171,175,192,171],
[178,174,186,170,180,170,0,186,175,170],
[170,163,169,152,165,166,155,0,169,168],
[178,163,177,148,171,149,166,172,0,160],
[181,181,189,160,172,170,171,173,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,174,186,169,177,175,202,174,180],
[181,0,160,187,179,183,202,181,175,189],
[167,181,0,196,189,173,185,172,176,191],
[155,154,145,0,136,143,161,176,155,150],
[172,162,152,205,0,175,177,189,177,173],
[164,158,168,198,166,0,176,174,169,171],
[166,139,156,180,164,165,0,161,168,162],
[139,160,169,165,152,167,180,0,184,173],
[167,166,165,186,164,172,173,157,0,166],
[161,152,150,191,168,170,179,168,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,176,178,168,191,179,151,166,159],
[148,0,146,164,153,166,159,138,146,138],
[165,195,0,161,162,177,172,141,145,150],
[163,177,180,0,176,206,194,173,149,178],
[173,188,179,165,0,201,192,155,156,167],
[150,175,164,135,140,0,148,139,132,137],
[162,182,169,147,149,193,0,156,152,153],
[190,203,200,168,186,202,185,0,172,184],
[175,195,196,192,185,209,189,169,0,177],
[182,203,191,163,174,204,188,157,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,163,185,146,181,191,177,174],
[170,0,158,209,195,169,191,212,160,196],
[167,183,0,175,172,155,176,187,153,165],
[178,132,166,0,168,159,169,186,163,186],
[156,146,169,173,0,153,172,172,163,177],
[195,172,186,182,188,0,178,197,162,189],
[160,150,165,172,169,163,0,188,173,180],
[150,129,154,155,169,144,153,0,137,174],
[164,181,188,178,178,179,168,204,0,177],
[167,145,176,155,164,152,161,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,167,162,158,169,179,164,158],
[182,0,156,163,165,163,171,164,159,163],
[179,185,0,183,177,171,171,172,182,163],
[174,178,158,0,161,183,179,166,171,166],
[179,176,164,180,0,175,178,167,172,180],
[183,178,170,158,166,0,183,176,171,177],
[172,170,170,162,163,158,0,171,160,191],
[162,177,169,175,174,165,170,0,158,164],
[177,182,159,170,169,170,181,183,0,180],
[183,178,178,175,161,164,150,177,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,197,124,188,163,175,144,180,111],
[176,0,206,183,179,156,216,157,181,152],
[144,135,0,127,157,132,185,143,121,148],
[217,158,214,0,212,170,195,200,211,181],
[153,162,184,129,0,166,166,162,169,135],
[178,185,209,171,175,0,152,148,172,163],
[166,125,156,146,175,189,0,141,172,138],
[197,184,198,141,179,193,200,0,192,181],
[161,160,220,130,172,169,169,149,0,143],
[230,189,193,160,206,178,203,160,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,162,170,161,164,167,168,160,177],
[179,0,154,172,170,175,149,169,160,184],
[179,187,0,166,179,182,172,182,174,184],
[171,169,175,0,180,182,171,182,169,182],
[180,171,162,161,0,169,178,169,146,180],
[177,166,159,159,172,0,168,167,162,180],
[174,192,169,170,163,173,0,175,179,183],
[173,172,159,159,172,174,166,0,171,180],
[181,181,167,172,195,179,162,170,0,187],
[164,157,157,159,161,161,158,161,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,152,148,168,166,151,164,184,144],
[189,0,154,167,160,187,184,183,183,161],
[189,187,0,187,173,187,182,185,186,169],
[193,174,154,0,168,198,177,173,200,173],
[173,181,168,173,0,186,162,186,195,165],
[175,154,154,143,155,0,159,178,171,147],
[190,157,159,164,179,182,0,193,193,178],
[177,158,156,168,155,163,148,0,176,153],
[157,158,155,141,146,170,148,165,0,149],
[197,180,172,168,176,194,163,188,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,188,174,173,193,163,185,178,177],
[182,0,185,156,174,191,163,167,172,180],
[153,156,0,145,155,174,165,158,177,176],
[167,185,196,0,177,201,181,197,178,172],
[168,167,186,164,0,194,171,182,169,175],
[148,150,167,140,147,0,149,170,169,163],
[178,178,176,160,170,192,0,182,185,169],
[156,174,183,144,159,171,159,0,179,178],
[163,169,164,163,172,172,156,162,0,172],
[164,161,165,169,166,178,172,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,149,152,172,176,172,160,146,152],
[183,0,161,175,178,184,200,185,169,167],
[192,180,0,178,186,188,178,216,166,169],
[189,166,163,0,171,179,166,179,147,172],
[169,163,155,170,0,175,166,182,132,173],
[165,157,153,162,166,0,167,170,140,185],
[169,141,163,175,175,174,0,175,140,181],
[181,156,125,162,159,171,166,0,127,148],
[195,172,175,194,209,201,201,214,0,164],
[189,174,172,169,168,156,160,193,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,198,176,189,149,184,177,163,194],
[167,0,175,157,169,156,165,183,169,199],
[143,166,0,105,172,135,165,134,136,173],
[165,184,236,0,216,182,200,202,202,235],
[152,172,169,125,0,177,145,157,148,192],
[192,185,206,159,164,0,181,174,181,207],
[157,176,176,141,196,160,0,162,171,199],
[164,158,207,139,184,167,179,0,178,227],
[178,172,205,139,193,160,170,163,0,207],
[147,142,168,106,149,134,142,114,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,159,146,156,154,162,162,153,160],
[172,0,175,157,159,164,158,156,165,173],
[182,166,0,159,168,160,156,155,168,163],
[195,184,182,0,171,159,175,182,182,184],
[185,182,173,170,0,173,173,182,193,173],
[187,177,181,182,168,0,176,187,180,179],
[179,183,185,166,168,165,0,177,173,168],
[179,185,186,159,159,154,164,0,175,167],
[188,176,173,159,148,161,168,166,0,178],
[181,168,178,157,168,162,173,174,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,182,157,153,164,168,192,178],
[175,0,173,185,163,167,175,181,189,182],
[176,168,0,189,164,169,163,170,180,175],
[159,156,152,0,156,162,160,180,173,169],
[184,178,177,185,0,177,170,169,177,185],
[188,174,172,179,164,0,161,188,186,173],
[177,166,178,181,171,180,0,184,189,172],
[173,160,171,161,172,153,157,0,177,163],
[149,152,161,168,164,155,152,164,0,154],
[163,159,166,172,156,168,169,178,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,183,179,172,174,180,183,163,172],
[179,0,184,171,166,177,193,175,165,192],
[158,157,0,160,150,164,165,157,144,169],
[162,170,181,0,166,177,185,169,167,185],
[169,175,191,175,0,183,171,177,179,182],
[167,164,177,164,158,0,167,168,162,178],
[161,148,176,156,170,174,0,154,164,182],
[158,166,184,172,164,173,187,0,164,174],
[178,176,197,174,162,179,177,177,0,186],
[169,149,172,156,159,163,159,167,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,158,162,147,164,136,180,177,155],
[167,0,192,164,171,175,158,173,169,165],
[183,149,0,163,158,163,145,178,169,150],
[179,177,178,0,164,167,171,179,171,174],
[194,170,183,177,0,170,169,178,168,177],
[177,166,178,174,171,0,160,177,169,173],
[205,183,196,170,172,181,0,192,182,188],
[161,168,163,162,163,164,149,0,163,163],
[164,172,172,170,173,172,159,178,0,169],
[186,176,191,167,164,168,153,178,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,160,170,152,166,155,133,146,147],
[192,0,159,178,174,170,172,157,185,173],
[181,182,0,178,170,180,173,161,174,189],
[171,163,163,0,155,160,154,166,167,157],
[189,167,171,186,0,161,174,154,194,182],
[175,171,161,181,180,0,168,161,188,177],
[186,169,168,187,167,173,0,176,185,171],
[208,184,180,175,187,180,165,0,197,192],
[195,156,167,174,147,153,156,144,0,175],
[194,168,152,184,159,164,170,149,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,161,150,133,155,159,163,152],
[166,0,168,160,158,153,150,160,176,142],
[172,173,0,161,158,164,155,154,174,163],
[180,181,180,0,186,160,170,172,189,169],
[191,183,183,155,0,149,158,154,177,158],
[208,188,177,181,192,0,177,148,188,171],
[186,191,186,171,183,164,0,155,186,168],
[182,181,187,169,187,193,186,0,184,172],
[178,165,167,152,164,153,155,157,0,146],
[189,199,178,172,183,170,173,169,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,163,172,166,157,160,186,189,171],
[169,0,175,169,189,172,171,181,190,196],
[178,166,0,187,170,188,173,183,194,183],
[169,172,154,0,157,156,178,184,183,182],
[175,152,171,184,0,161,148,189,170,174],
[184,169,153,185,180,0,169,191,185,172],
[181,170,168,163,193,172,0,166,184,182],
[155,160,158,157,152,150,175,0,178,157],
[152,151,147,158,171,156,157,163,0,162],
[170,145,158,159,167,169,159,184,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,146,156,135,142,159,160,170],
[168,0,182,167,176,150,146,158,166,172],
[168,159,0,162,177,144,151,154,172,158],
[195,174,179,0,186,163,170,183,166,165],
[185,165,164,155,0,142,158,172,162,159],
[206,191,197,178,199,0,164,169,151,158],
[199,195,190,171,183,177,0,186,176,148],
[182,183,187,158,169,172,155,0,168,162],
[181,175,169,175,179,190,165,173,0,160],
[171,169,183,176,182,183,193,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,165,149,174,142,167,190,170,155],
[184,0,158,137,170,158,175,175,181,190],
[176,183,0,167,168,171,152,190,197,191],
[192,204,174,0,199,169,189,163,224,193],
[167,171,173,142,0,147,153,170,166,145],
[199,183,170,172,194,0,186,199,213,188],
[174,166,189,152,188,155,0,173,180,189],
[151,166,151,178,171,142,168,0,176,177],
[171,160,144,117,175,128,161,165,0,188],
[186,151,150,148,196,153,152,164,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,133,183,158,160,158,140,162,115],
[209,0,139,202,161,160,165,149,192,125],
[208,202,0,201,165,190,177,158,220,168],
[158,139,140,0,130,128,171,140,173,122],
[183,180,176,211,0,163,197,156,191,161],
[181,181,151,213,178,0,195,186,194,184],
[183,176,164,170,144,146,0,129,186,133],
[201,192,183,201,185,155,212,0,215,173],
[179,149,121,168,150,147,155,126,0,134],
[226,216,173,219,180,157,208,168,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,146,174,163,201,178,192,167],
[171,0,189,150,163,158,179,171,160,151],
[159,152,0,144,168,151,184,130,178,137],
[195,191,197,0,180,196,221,192,201,169],
[167,178,173,161,0,163,190,166,172,150],
[178,183,190,145,178,0,200,188,181,178],
[140,162,157,120,151,141,0,184,157,136],
[163,170,211,149,175,153,157,0,183,151],
[149,181,163,140,169,160,184,158,0,163],
[174,190,204,172,191,163,205,190,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,159,178,164,171,169,172,175,167],
[164,0,150,157,148,164,172,168,171,168],
[182,191,0,168,165,186,181,191,176,161],
[163,184,173,0,156,172,164,175,178,160],
[177,193,176,185,0,173,176,175,170,171],
[170,177,155,169,168,0,182,168,174,165],
[172,169,160,177,165,159,0,180,175,163],
[169,173,150,166,166,173,161,0,176,165],
[166,170,165,163,171,167,166,165,0,168],
[174,173,180,181,170,176,178,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,187,188,179,182,176,169,169,174],
[155,0,177,177,163,168,158,158,161,155],
[154,164,0,169,166,157,165,155,165,154],
[153,164,172,0,159,162,153,159,166,165],
[162,178,175,182,0,167,155,163,153,165],
[159,173,184,179,174,0,163,163,179,165],
[165,183,176,188,186,178,0,178,174,173],
[172,183,186,182,178,178,163,0,163,176],
[172,180,176,175,188,162,167,178,0,177],
[167,186,187,176,176,176,168,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,138,143,136,131,142,154,148,182],
[179,0,172,193,170,173,179,159,168,193],
[203,169,0,160,176,141,176,172,183,186],
[198,148,181,0,166,188,165,171,180,198],
[205,171,165,175,0,151,160,185,198,191],
[210,168,200,153,190,0,173,209,191,209],
[199,162,165,176,181,168,0,175,174,187],
[187,182,169,170,156,132,166,0,185,187],
[193,173,158,161,143,150,167,156,0,174],
[159,148,155,143,150,132,154,154,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,158,169,164,164,171,149,166,175],
[184,0,160,175,181,172,179,178,170,177],
[183,181,0,185,167,159,178,160,175,167],
[172,166,156,0,166,155,177,161,164,172],
[177,160,174,175,0,173,181,159,160,177],
[177,169,182,186,168,0,170,161,174,180],
[170,162,163,164,160,171,0,165,170,170],
[192,163,181,180,182,180,176,0,174,185],
[175,171,166,177,181,167,171,167,0,179],
[166,164,174,169,164,161,171,156,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,196,219,176,183,184,166,181,170],
[170,0,209,192,166,179,167,165,166,169],
[145,132,0,186,169,165,169,149,134,137],
[122,149,155,0,132,154,137,159,145,128],
[165,175,172,209,0,188,177,177,180,175],
[158,162,176,187,153,0,157,164,152,157],
[157,174,172,204,164,184,0,167,172,155],
[175,176,192,182,164,177,174,0,167,156],
[160,175,207,196,161,189,169,174,0,182],
[171,172,204,213,166,184,186,185,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,178,160,181,180,202,177,178,173],
[153,0,179,164,164,171,170,176,164,157],
[163,162,0,170,179,168,180,159,174,164],
[181,177,171,0,176,177,187,192,187,169],
[160,177,162,165,0,168,171,176,173,171],
[161,170,173,164,173,0,166,178,169,161],
[139,171,161,154,170,175,0,164,166,156],
[164,165,182,149,165,163,177,0,166,159],
[163,177,167,154,168,172,175,175,0,159],
[168,184,177,172,170,180,185,182,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,208,164,169,205,204,174,135,172],
[139,0,114,120,116,145,181,114,88,102],
[133,227,0,205,217,192,214,199,140,183],
[177,221,136,0,206,188,186,208,148,168],
[172,225,124,135,0,192,227,176,174,214],
[136,196,149,153,149,0,187,173,108,142],
[137,160,127,155,114,154,0,170,79,122],
[167,227,142,133,165,168,171,0,136,158],
[206,253,201,193,167,233,262,205,0,231],
[169,239,158,173,127,199,219,183,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,186,152,154,181,155,177,166,169],
[188,0,175,166,175,174,183,174,176,167],
[155,166,0,159,171,148,161,167,154,160],
[189,175,182,0,170,189,182,166,155,181],
[187,166,170,171,0,176,159,173,161,175],
[160,167,193,152,165,0,176,165,175,168],
[186,158,180,159,182,165,0,184,175,185],
[164,167,174,175,168,176,157,0,165,184],
[175,165,187,186,180,166,166,176,0,177],
[172,174,181,160,166,173,156,157,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,167,157,179,152,177,151,179,167],
[173,0,169,162,167,160,167,165,164,171],
[174,172,0,162,177,166,172,172,176,157],
[184,179,179,0,186,180,178,171,170,186],
[162,174,164,155,0,164,171,161,172,161],
[189,181,175,161,177,0,171,168,179,178],
[164,174,169,163,170,170,0,166,182,173],
[190,176,169,170,180,173,175,0,174,176],
[162,177,165,171,169,162,159,167,0,168],
[174,170,184,155,180,163,168,165,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,160,185,173,170,156,195,169,192],
[167,0,179,187,175,172,167,175,163,179],
[181,162,0,192,171,168,169,181,172,172],
[156,154,149,0,172,165,159,173,153,164],
[168,166,170,169,0,159,167,188,158,173],
[171,169,173,176,182,0,162,198,160,166],
[185,174,172,182,174,179,0,178,157,190],
[146,166,160,168,153,143,163,0,155,176],
[172,178,169,188,183,181,184,186,0,188],
[149,162,169,177,168,175,151,165,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,149,150,144,125,141,171,147,169],
[186,0,202,171,159,167,183,193,157,173],
[192,139,0,137,143,140,148,156,170,166],
[191,170,204,0,139,151,169,189,161,155],
[197,182,198,202,0,183,178,178,150,188],
[216,174,201,190,158,0,187,191,133,191],
[200,158,193,172,163,154,0,190,179,187],
[170,148,185,152,163,150,151,0,157,167],
[194,184,171,180,191,208,162,184,0,194],
[172,168,175,186,153,150,154,174,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,27,144,122,93,210,123,70,177],
[213,0,75,177,152,144,261,248,177,101],
[314,266,0,236,215,127,288,279,240,211],
[197,164,105,0,53,93,211,149,70,212],
[219,189,126,288,0,170,288,170,121,263],
[248,197,214,248,171,0,219,162,145,197],
[131,80,53,130,53,122,0,148,121,80],
[218,93,62,192,171,179,193,0,112,115],
[271,164,101,271,220,196,220,229,0,264],
[164,240,130,129,78,144,261,226,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,151,168,164,161,171,156,158,145],
[194,0,168,170,184,180,185,176,196,174],
[190,173,0,169,167,181,175,170,181,176],
[173,171,172,0,175,175,172,152,167,165],
[177,157,174,166,0,166,177,174,173,176],
[180,161,160,166,175,0,169,156,167,171],
[170,156,166,169,164,172,0,177,172,171],
[185,165,171,189,167,185,164,0,185,172],
[183,145,160,174,168,174,169,156,0,165],
[196,167,165,176,165,170,170,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,155,169,177,137,146,164,168,152],
[185,0,164,167,185,172,159,176,164,161],
[186,177,0,190,191,169,164,186,169,167],
[172,174,151,0,193,156,158,181,167,144],
[164,156,150,148,0,149,147,185,163,156],
[204,169,172,185,192,0,178,195,190,178],
[195,182,177,183,194,163,0,197,180,168],
[177,165,155,160,156,146,144,0,156,158],
[173,177,172,174,178,151,161,185,0,161],
[189,180,174,197,185,163,173,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,157,158,156,181,151,162,156],
[166,0,180,167,173,173,190,180,188,146],
[179,161,0,175,152,177,169,157,165,131],
[184,174,166,0,162,168,192,165,166,145],
[183,168,189,179,0,163,206,196,187,163],
[185,168,164,173,178,0,219,182,184,180],
[160,151,172,149,135,122,0,135,136,138],
[190,161,184,176,145,159,206,0,189,161],
[179,153,176,175,154,157,205,152,0,159],
[185,195,210,196,178,161,203,180,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,177,168,187,190,159,161,163,190],
[158,0,177,153,162,172,156,164,180,184],
[164,164,0,153,159,183,156,155,154,179],
[173,188,188,0,194,191,171,169,171,191],
[154,179,182,147,0,174,152,141,160,191],
[151,169,158,150,167,0,156,174,156,172],
[182,185,185,170,189,185,0,182,183,190],
[180,177,186,172,200,167,159,0,164,175],
[178,161,187,170,181,185,158,177,0,208],
[151,157,162,150,150,169,151,166,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,134,155,140,146,120,201,115,107],
[237,0,209,210,185,158,209,252,180,147],
[207,132,0,170,152,145,175,185,197,154],
[186,131,171,0,122,158,153,200,154,124],
[201,156,189,219,0,193,185,220,226,229],
[195,183,196,183,148,0,163,182,141,150],
[221,132,166,188,156,178,0,182,187,153],
[140,89,156,141,121,159,159,0,143,104],
[226,161,144,187,115,200,154,198,0,149],
[234,194,187,217,112,191,188,237,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,173,178,182,175,164,191,182,188],
[141,0,163,175,170,179,181,186,168,177],
[168,178,0,193,186,178,184,201,174,177],
[163,166,148,0,165,181,169,183,151,169],
[159,171,155,176,0,173,163,170,155,167],
[166,162,163,160,168,0,164,171,154,170],
[177,160,157,172,178,177,0,180,161,163],
[150,155,140,158,171,170,161,0,141,154],
[159,173,167,190,186,187,180,200,0,169],
[153,164,164,172,174,171,178,187,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,160,178,145,176,172,182,174],
[168,0,177,174,164,150,177,170,186,177],
[169,164,0,166,178,153,174,164,165,178],
[181,167,175,0,157,154,178,166,173,160],
[163,177,163,184,0,161,169,159,177,173],
[196,191,188,187,180,0,184,169,188,186],
[165,164,167,163,172,157,0,178,186,177],
[169,171,177,175,182,172,163,0,182,174],
[159,155,176,168,164,153,155,159,0,173],
[167,164,163,181,168,155,164,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,181,165,173,165,170,174,185,181],
[169,0,173,175,172,178,176,182,182,181],
[160,168,0,183,159,178,176,168,173,165],
[176,166,158,0,169,172,161,177,184,169],
[168,169,182,172,0,190,179,177,182,188],
[176,163,163,169,151,0,166,188,185,162],
[171,165,165,180,162,175,0,164,189,185],
[167,159,173,164,164,153,177,0,172,165],
[156,159,168,157,159,156,152,169,0,156],
[160,160,176,172,153,179,156,176,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,186,178,183,187,169,190,165,162],
[166,0,164,178,165,191,170,168,150,157],
[155,177,0,181,167,192,171,174,145,157],
[163,163,160,0,177,198,164,173,156,162],
[158,176,174,164,0,182,174,175,172,172],
[154,150,149,143,159,0,172,166,140,142],
[172,171,170,177,167,169,0,167,157,146],
[151,173,167,168,166,175,174,0,160,169],
[176,191,196,185,169,201,184,181,0,167],
[179,184,184,179,169,199,195,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,149,197,188,180,205,208,172,171],
[126,0,145,161,153,144,165,181,147,146],
[192,196,0,203,134,171,196,176,173,136],
[144,180,138,0,142,164,154,158,145,127],
[153,188,207,199,0,190,180,193,207,182],
[161,197,170,177,151,0,209,197,154,151],
[136,176,145,187,161,132,0,195,167,139],
[133,160,165,183,148,144,146,0,136,136],
[169,194,168,196,134,187,174,205,0,171],
[170,195,205,214,159,190,202,205,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,222,180,189,191,169,176,175,188],
[145,0,189,141,173,160,169,168,185,158],
[119,152,0,156,148,175,136,166,163,173],
[161,200,185,0,185,193,190,183,192,198],
[152,168,193,156,0,141,146,162,186,174],
[150,181,166,148,200,0,153,131,167,163],
[172,172,205,151,195,188,0,181,186,180],
[165,173,175,158,179,210,160,0,188,182],
[166,156,178,149,155,174,155,153,0,173],
[153,183,168,143,167,178,161,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,189,164,176,173,176,170,181,180],
[167,0,174,174,175,165,155,171,167,159],
[152,167,0,169,176,159,146,175,167,154],
[177,167,172,0,172,162,168,180,179,181],
[165,166,165,169,0,176,156,176,165,167],
[168,176,182,179,165,0,155,183,171,169],
[165,186,195,173,185,186,0,177,185,167],
[171,170,166,161,165,158,164,0,183,172],
[160,174,174,162,176,170,156,158,0,167],
[161,182,187,160,174,172,174,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,163,152,142,142,175,149,180,159],
[202,0,186,175,152,158,190,159,186,171],
[178,155,0,146,159,149,172,169,168,165],
[189,166,195,0,181,176,199,188,187,179],
[199,189,182,160,0,162,189,170,180,179],
[199,183,192,165,179,0,184,169,167,179],
[166,151,169,142,152,157,0,143,159,150],
[192,182,172,153,171,172,198,0,182,178],
[161,155,173,154,161,174,182,159,0,155],
[182,170,176,162,162,162,191,163,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,184,175,163,171,165,175,164],
[172,0,196,180,183,148,165,165,174,156],
[158,145,0,175,168,152,161,160,178,158],
[157,161,166,0,164,146,156,156,171,145],
[166,158,173,177,0,153,154,154,178,138],
[178,193,189,195,188,0,177,172,197,157],
[170,176,180,185,187,164,0,173,194,178],
[176,176,181,185,187,169,168,0,176,166],
[166,167,163,170,163,144,147,165,0,149],
[177,185,183,196,203,184,163,175,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,175,183,164,181,160,181,161,170],
[156,0,165,170,171,167,167,166,176,166],
[166,176,0,175,156,175,143,172,156,156],
[158,171,166,0,146,168,154,157,139,153],
[177,170,185,195,0,190,176,169,164,178],
[160,174,166,173,151,0,154,157,141,152],
[181,174,198,187,165,187,0,180,157,184],
[160,175,169,184,172,184,161,0,165,165],
[180,165,185,202,177,200,184,176,0,169],
[171,175,185,188,163,189,157,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,164,167,145,171,157,163,165],
[168,0,161,130,140,192,177,205,188,166],
[182,180,0,155,130,166,184,169,198,201],
[177,211,186,0,167,175,215,182,185,203],
[174,201,211,174,0,180,213,229,168,167],
[196,149,175,166,161,0,175,181,175,163],
[170,164,157,126,128,166,0,175,170,162],
[184,136,172,159,112,160,166,0,156,151],
[178,153,143,156,173,166,171,185,0,165],
[176,175,140,138,174,178,179,190,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,169,181,172,182,172,172,174],
[162,0,143,160,181,152,170,166,166,162],
[178,198,0,182,184,168,179,179,157,158],
[172,181,159,0,176,165,191,172,164,158],
[160,160,157,165,0,158,174,175,162,152],
[169,189,173,176,183,0,191,176,176,171],
[159,171,162,150,167,150,0,154,160,142],
[169,175,162,169,166,165,187,0,163,169],
[169,175,184,177,179,165,181,178,0,165],
[167,179,183,183,189,170,199,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,172,158,166,158,161,174,178,165],
[188,0,179,157,172,165,156,180,179,170],
[169,162,0,166,186,158,162,163,186,163],
[183,184,175,0,178,177,172,172,183,165],
[175,169,155,163,0,163,161,167,165,174],
[183,176,183,164,178,0,162,165,172,164],
[180,185,179,169,180,179,0,167,182,173],
[167,161,178,169,174,176,174,0,172,160],
[163,162,155,158,176,169,159,169,0,173],
[176,171,178,176,167,177,168,181,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,156,153,139,141,155,182,170,155],
[185,0,178,163,142,152,150,162,159,151],
[185,163,0,162,152,166,167,162,154,181],
[188,178,179,0,160,140,177,171,156,160],
[202,199,189,181,0,174,156,182,176,172],
[200,189,175,201,167,0,167,180,160,166],
[186,191,174,164,185,174,0,178,145,165],
[159,179,179,170,159,161,163,0,145,163],
[171,182,187,185,165,181,196,196,0,140],
[186,190,160,181,169,175,176,178,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,170,173,182,165,175,186,186],
[179,0,172,175,159,157,182,166,183,189],
[167,169,0,161,179,167,178,179,183,179],
[171,166,180,0,187,176,181,194,149,185],
[168,182,162,154,0,173,176,163,177,177],
[159,184,174,165,168,0,158,182,158,194],
[176,159,163,160,165,183,0,185,160,181],
[166,175,162,147,178,159,156,0,158,182],
[155,158,158,192,164,183,181,183,0,180],
[155,152,162,156,164,147,160,159,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,160,154,176,160,168,149,148,169],
[187,0,182,155,196,181,188,176,160,188],
[181,159,0,162,179,173,175,163,149,184],
[187,186,179,0,172,179,189,181,165,171],
[165,145,162,169,0,155,158,153,152,173],
[181,160,168,162,186,0,182,171,164,167],
[173,153,166,152,183,159,0,163,146,171],
[192,165,178,160,188,170,178,0,178,183],
[193,181,192,176,189,177,195,163,0,171],
[172,153,157,170,168,174,170,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,176,182,177,174,156,169,183,168],
[185,0,183,195,184,180,185,179,196,158],
[165,158,0,184,174,174,166,156,183,158],
[159,146,157,0,141,166,157,153,170,139],
[164,157,167,200,0,167,174,168,183,174],
[167,161,167,175,174,0,163,156,181,162],
[185,156,175,184,167,178,0,161,179,167],
[172,162,185,188,173,185,180,0,176,159],
[158,145,158,171,158,160,162,165,0,160],
[173,183,183,202,167,179,174,182,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,174,147,189,179,171,175,175,175],
[187,0,169,187,168,196,187,172,169,167],
[167,172,0,153,168,200,159,181,158,153],
[194,154,188,0,156,190,177,170,178,179],
[152,173,173,185,0,171,172,177,168,164],
[162,145,141,151,170,0,145,147,133,150],
[170,154,182,164,169,196,0,185,176,190],
[166,169,160,171,164,194,156,0,166,171],
[166,172,183,163,173,208,165,175,0,188],
[166,174,188,162,177,191,151,170,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,179,168,163,187,162,165,154,167],
[165,0,159,186,176,166,167,161,160,169],
[162,182,0,181,169,172,158,165,161,162],
[173,155,160,0,141,166,160,161,155,160],
[178,165,172,200,0,183,157,165,147,169],
[154,175,169,175,158,0,165,165,156,179],
[179,174,183,181,184,176,0,166,166,182],
[176,180,176,180,176,176,175,0,179,168],
[187,181,180,186,194,185,175,162,0,199],
[174,172,179,181,172,162,159,173,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,153,171,183,158,156,175,161],
[185,0,178,175,169,170,170,174,166,160],
[179,163,0,177,166,170,197,201,170,177],
[188,166,164,0,161,160,172,165,156,150],
[170,172,175,180,0,167,185,193,166,177],
[158,171,171,181,174,0,166,182,183,173],
[183,171,144,169,156,175,0,166,156,138],
[185,167,140,176,148,159,175,0,157,155],
[166,175,171,185,175,158,185,184,0,154],
[180,181,164,191,164,168,203,186,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,135,148,186,187,200,161,164,187],
[159,0,148,148,161,180,173,176,166,157],
[206,193,0,168,187,191,210,173,189,201],
[193,193,173,0,184,193,221,153,180,180],
[155,180,154,157,0,193,187,159,191,192],
[154,161,150,148,148,0,176,144,167,177],
[141,168,131,120,154,165,0,116,140,167],
[180,165,168,188,182,197,225,0,156,188],
[177,175,152,161,150,174,201,185,0,143],
[154,184,140,161,149,164,174,153,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,151,202,201,181,155,144,254,104],
[191,0,158,183,245,207,159,137,268,127],
[190,183,0,220,232,180,192,194,238,151],
[139,158,121,0,198,204,180,95,290,93],
[140,96,109,143,0,157,176,69,247,91],
[160,134,161,137,184,0,181,88,273,90],
[186,182,149,161,165,160,0,140,234,117],
[197,204,147,246,272,253,201,0,341,180],
[87,73,103,51,94,68,107,0,0,29],
[237,214,190,248,250,251,224,161,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,158,165,185,164,153,168,170,207],
[185,0,172,191,206,170,149,190,190,213],
[183,169,0,171,180,169,168,154,173,196],
[176,150,170,0,190,170,163,189,184,195],
[156,135,161,151,0,156,138,147,136,161],
[177,171,172,171,185,0,166,167,133,187],
[188,192,173,178,203,175,0,192,149,206],
[173,151,187,152,194,174,149,0,152,172],
[171,151,168,157,205,208,192,189,0,206],
[134,128,145,146,180,154,135,169,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,184,170,179,159,157,164,181,161],
[184,0,202,153,185,171,175,177,190,165],
[157,139,0,158,163,154,138,157,156,159],
[171,188,183,0,160,158,160,164,185,171],
[162,156,178,181,0,151,167,167,155,166],
[182,170,187,183,190,0,159,180,173,162],
[184,166,203,181,174,182,0,192,187,206],
[177,164,184,177,174,161,149,0,176,170],
[160,151,185,156,186,168,154,165,0,163],
[180,176,182,170,175,179,135,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,152,177,180,177,176,183,167,157],
[174,0,174,193,179,194,162,182,163,179],
[189,167,0,200,184,189,183,185,168,178],
[164,148,141,0,141,166,138,159,162,167],
[161,162,157,200,0,172,154,183,158,166],
[164,147,152,175,169,0,155,170,150,162],
[165,179,158,203,187,186,0,161,175,184],
[158,159,156,182,158,171,180,0,144,159],
[174,178,173,179,183,191,166,197,0,195],
[184,162,163,174,175,179,157,182,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,168,122,169,169,147,163,177],
[177,0,171,192,153,186,193,162,181,188],
[162,170,0,145,145,157,155,160,173,175],
[173,149,196,0,188,181,172,166,181,184],
[219,188,196,153,0,176,187,183,201,196],
[172,155,184,160,165,0,169,166,172,181],
[172,148,186,169,154,172,0,173,165,166],
[194,179,181,175,158,175,168,0,189,184],
[178,160,168,160,140,169,176,152,0,173],
[164,153,166,157,145,160,175,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,169,183,185,171,169,184,176],
[176,0,168,158,167,168,175,157,164,171],
[181,173,0,165,189,182,179,165,178,179],
[172,183,176,0,183,181,170,160,179,180],
[158,174,152,158,0,175,165,170,180,161],
[156,173,159,160,166,0,184,164,170,155],
[170,166,162,171,176,157,0,173,172,175],
[172,184,176,181,171,177,168,0,182,175],
[157,177,163,162,161,171,169,159,0,163],
[165,170,162,161,180,186,166,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,190,167,172,187,166,189,167,172],
[161,0,184,167,171,184,173,176,167,183],
[151,157,0,143,152,167,157,169,148,157],
[174,174,198,0,179,185,171,195,161,176],
[169,170,189,162,0,183,172,191,175,164],
[154,157,174,156,158,0,165,178,157,172],
[175,168,184,170,169,176,0,183,163,166],
[152,165,172,146,150,163,158,0,143,157],
[174,174,193,180,166,184,178,198,0,149],
[169,158,184,165,177,169,175,184,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,168,172,172,182,179,163,189,177],
[147,0,180,152,156,167,165,162,186,168],
[173,161,0,164,170,181,177,151,179,183],
[169,189,177,0,174,173,199,172,184,183],
[169,185,171,167,0,186,180,164,187,180],
[159,174,160,168,155,0,182,164,166,155],
[162,176,164,142,161,159,0,158,171,159],
[178,179,190,169,177,177,183,0,198,156],
[152,155,162,157,154,175,170,143,0,152],
[164,173,158,158,161,186,182,185,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,154,129,149,178,119,181,157,163],
[169,0,143,155,184,185,168,162,175,149],
[187,198,0,182,179,194,166,184,190,170],
[212,186,159,0,198,202,137,186,184,170],
[192,157,162,143,0,171,140,166,158,163],
[163,156,147,139,170,0,109,149,162,131],
[222,173,175,204,201,232,0,172,188,165],
[160,179,157,155,175,192,169,0,149,186],
[184,166,151,157,183,179,153,192,0,179],
[178,192,171,171,178,210,176,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,193,176,203,191,185,184,176,164],
[168,0,188,166,207,190,173,182,175,174],
[148,153,0,161,176,172,161,165,159,148],
[165,175,180,0,193,170,167,167,163,153],
[138,134,165,148,0,162,164,155,146,148],
[150,151,169,171,179,0,174,169,162,153],
[156,168,180,174,177,167,0,163,161,149],
[157,159,176,174,186,172,178,0,171,152],
[165,166,182,178,195,179,180,170,0,159],
[177,167,193,188,193,188,192,189,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,164,153,173,180,186,182,177,164],
[179,0,184,166,184,187,200,182,201,200],
[177,157,0,171,190,187,195,194,170,196],
[188,175,170,0,184,217,190,170,191,175],
[168,157,151,157,0,159,169,153,132,174],
[161,154,154,124,182,0,171,166,166,181],
[155,141,146,151,172,170,0,169,143,178],
[159,159,147,171,188,175,172,0,151,205],
[164,140,171,150,209,175,198,190,0,171],
[177,141,145,166,167,160,163,136,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,171,161,157,156,151,187,178,173],
[141,0,174,132,158,157,155,170,176,176],
[170,167,0,151,146,175,153,180,157,170],
[180,209,190,0,154,186,167,192,157,201],
[184,183,195,187,0,165,168,204,168,184],
[185,184,166,155,176,0,170,177,176,179],
[190,186,188,174,173,171,0,202,166,184],
[154,171,161,149,137,164,139,0,144,196],
[163,165,184,184,173,165,175,197,0,167],
[168,165,171,140,157,162,157,145,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,182,173,161,172,178,177,178,175],
[153,0,161,144,158,166,163,160,162,167],
[159,180,0,168,176,173,168,170,170,159],
[168,197,173,0,165,179,170,170,174,172],
[180,183,165,176,0,183,177,183,166,182],
[169,175,168,162,158,0,169,169,164,168],
[163,178,173,171,164,172,0,186,174,178],
[164,181,171,171,158,172,155,0,163,164],
[163,179,171,167,175,177,167,178,0,168],
[166,174,182,169,159,173,163,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,181,164,167,164,166,180,164,158],
[180,0,187,176,177,177,197,186,170,161],
[160,154,0,172,171,179,188,166,173,157],
[177,165,169,0,164,175,199,173,172,180],
[174,164,170,177,0,150,194,159,160,179],
[177,164,162,166,191,0,188,164,151,167],
[175,144,153,142,147,153,0,163,140,142],
[161,155,175,168,182,177,178,0,168,166],
[177,171,168,169,181,190,201,173,0,172],
[183,180,184,161,162,174,199,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,186,155,171,173,142,170,159],
[176,0,184,171,167,159,170,170,165,153],
[180,157,0,174,149,171,158,153,166,165],
[155,170,167,0,161,183,180,136,168,161],
[186,174,192,180,0,173,169,167,156,163],
[170,182,170,158,168,0,149,149,156,147],
[168,171,183,161,172,192,0,174,168,160],
[199,171,188,205,174,192,167,0,170,176],
[171,176,175,173,185,185,173,171,0,151],
[182,188,176,180,178,194,181,165,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,169,197,200,165,183,168,161,154],
[145,0,164,139,139,129,177,130,132,141],
[172,177,0,199,166,185,167,195,160,175],
[144,202,142,0,151,172,129,196,161,147],
[141,202,175,190,0,160,157,164,182,182],
[176,212,156,169,181,0,216,184,183,213],
[158,164,174,212,184,125,0,177,167,155],
[173,211,146,145,177,157,164,0,156,137],
[180,209,181,180,159,158,174,185,0,191],
[187,200,166,194,159,128,186,204,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,194,187,163,190,170,179,170,194],
[151,0,168,172,163,171,180,166,151,180],
[147,173,0,173,166,168,173,173,167,185],
[154,169,168,0,160,173,162,170,166,178],
[178,178,175,181,0,191,172,181,177,170],
[151,170,173,168,150,0,170,160,165,177],
[171,161,168,179,169,171,0,167,158,164],
[162,175,168,171,160,181,174,0,164,179],
[171,190,174,175,164,176,183,177,0,184],
[147,161,156,163,171,164,177,162,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,176,169,169,168,158,165,168,160],
[161,0,164,179,162,170,167,158,167,160],
[165,177,0,157,169,170,160,165,165,159],
[172,162,184,0,182,187,174,163,178,165],
[172,179,172,159,0,166,172,160,162,171],
[173,171,171,154,175,0,164,163,165,170],
[183,174,181,167,169,177,0,178,175,160],
[176,183,176,178,181,178,163,0,174,161],
[173,174,176,163,179,176,166,167,0,172],
[181,181,182,176,170,171,181,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,168,175,152,163,172,179,169,160],
[185,0,198,177,168,183,192,189,176,174],
[173,143,0,179,166,178,183,195,176,160],
[166,164,162,0,163,157,157,179,175,167],
[189,173,175,178,0,172,188,178,186,152],
[178,158,163,184,169,0,167,179,170,173],
[169,149,158,184,153,174,0,172,163,166],
[162,152,146,162,163,162,169,0,172,145],
[172,165,165,166,155,171,178,169,0,168],
[181,167,181,174,189,168,175,196,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,164,167,186,160,187,182,170],
[170,0,157,160,174,179,177,176,167,175],
[174,184,0,175,168,176,159,175,176,168],
[177,181,166,0,167,186,159,187,164,182],
[174,167,173,174,0,180,150,187,172,181],
[155,162,165,155,161,0,150,168,162,169],
[181,164,182,182,191,191,0,202,185,185],
[154,165,166,154,154,173,139,0,153,159],
[159,174,165,177,169,179,156,188,0,176],
[171,166,173,159,160,172,156,182,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,172,179,180,165,182,186,186,178],
[156,0,165,165,161,162,159,168,180,165],
[169,176,0,181,161,157,172,178,181,168],
[162,176,160,0,155,172,167,173,187,171],
[161,180,180,186,0,176,163,172,193,165],
[176,179,184,169,165,0,174,183,195,166],
[159,182,169,174,178,167,0,190,192,192],
[155,173,163,168,169,158,151,0,172,170],
[155,161,160,154,148,146,149,169,0,145],
[163,176,173,170,176,175,149,171,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,165,171,173,175,183,177,179,173],
[166,0,169,179,165,166,175,176,190,175],
[176,172,0,170,175,185,185,173,187,176],
[170,162,171,0,174,181,176,169,181,163],
[168,176,166,167,0,167,172,168,177,178],
[166,175,156,160,174,0,172,168,176,173],
[158,166,156,165,169,169,0,168,174,176],
[164,165,168,172,173,173,173,0,189,175],
[162,151,154,160,164,165,167,152,0,168],
[168,166,165,178,163,168,165,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,178,174,189,178,183,167,175],
[162,0,178,175,166,182,161,179,163,177],
[168,163,0,167,167,183,165,172,160,172],
[163,166,174,0,158,178,166,188,168,176],
[167,175,174,183,0,193,167,184,173,188],
[152,159,158,163,148,0,161,184,165,172],
[163,180,176,175,174,180,0,179,170,182],
[158,162,169,153,157,157,162,0,149,156],
[174,178,181,173,168,176,171,192,0,182],
[166,164,169,165,153,169,159,185,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,154,166,164,161,171,181,179,181],
[167,0,141,157,174,157,168,169,174,170],
[187,200,0,180,202,163,193,186,191,194],
[175,184,161,0,189,184,194,190,203,199],
[177,167,139,152,0,181,165,164,189,180],
[180,184,178,157,160,0,151,166,185,185],
[170,173,148,147,176,190,0,164,174,192],
[160,172,155,151,177,175,177,0,185,192],
[162,167,150,138,152,156,167,156,0,164],
[160,171,147,142,161,156,149,149,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,176,173,187,190,184,163,185,173],
[158,0,159,171,178,168,172,161,191,152],
[165,182,0,160,181,169,167,170,179,169],
[168,170,181,0,193,176,182,165,189,157],
[154,163,160,148,0,157,166,160,174,145],
[151,173,172,165,184,0,171,182,180,164],
[157,169,174,159,175,170,0,155,168,172],
[178,180,171,176,181,159,186,0,188,168],
[156,150,162,152,167,161,173,153,0,156],
[168,189,172,184,196,177,169,173,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,184,183,178,165,181,178,180,192],
[178,0,200,200,189,170,183,189,180,192],
[157,141,0,164,157,147,134,157,161,181],
[158,141,177,0,163,166,144,175,163,179],
[163,152,184,178,0,163,160,181,149,164],
[176,171,194,175,178,0,159,173,155,183],
[160,158,207,197,181,182,0,190,178,192],
[163,152,184,166,160,168,151,0,155,166],
[161,161,180,178,192,186,163,186,0,185],
[149,149,160,162,177,158,149,175,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,167,133,193,163,179,150,146,167],
[205,0,180,168,181,193,212,172,146,199],
[174,161,0,163,182,195,203,139,177,173],
[208,173,178,0,178,195,209,152,170,169],
[148,160,159,163,0,192,190,158,162,182],
[178,148,146,146,149,0,188,128,160,182],
[162,129,138,132,151,153,0,153,107,161],
[191,169,202,189,183,213,188,0,162,178],
[195,195,164,171,179,181,234,179,0,204],
[174,142,168,172,159,159,180,163,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,173,159,131,166,153,156,156,174],
[191,0,186,170,171,182,187,188,173,183],
[168,155,0,166,145,156,162,152,169,157],
[182,171,175,0,150,164,163,162,163,162],
[210,170,196,191,0,186,186,187,180,193],
[175,159,185,177,155,0,171,170,155,171],
[188,154,179,178,155,170,0,167,167,175],
[185,153,189,179,154,171,174,0,179,171],
[185,168,172,178,161,186,174,162,0,175],
[167,158,184,179,148,170,166,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,179,176,179,186,172,171,176,167],
[158,0,167,174,178,171,174,179,166,164],
[162,174,0,187,171,170,164,185,177,172],
[165,167,154,0,171,179,173,167,164,160],
[162,163,170,170,0,178,184,162,163,180],
[155,170,171,162,163,0,181,163,159,144],
[169,167,177,168,157,160,0,172,167,165],
[170,162,156,174,179,178,169,0,166,163],
[165,175,164,177,178,182,174,175,0,167],
[174,177,169,181,161,197,176,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,157,164,147,156,169,155,154,155],
[210,0,166,191,184,173,191,193,188,173],
[184,175,0,168,200,172,192,179,191,181],
[177,150,173,0,166,179,171,180,172,172],
[194,157,141,175,0,180,187,179,183,166],
[185,168,169,162,161,0,171,181,180,169],
[172,150,149,170,154,170,0,180,173,164],
[186,148,162,161,162,160,161,0,161,161],
[187,153,150,169,158,161,168,180,0,166],
[186,168,160,169,175,172,177,180,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,159,172,97,153,125,117,146,115],
[226,0,246,207,176,207,211,143,133,158],
[182,95,0,111,119,154,128,71,111,103],
[169,134,230,0,154,208,130,197,116,145],
[244,165,222,187,0,228,148,212,170,159],
[188,134,187,133,113,0,158,168,136,129],
[216,130,213,211,193,183,0,146,118,117],
[224,198,270,144,129,173,195,0,157,174],
[195,208,230,225,171,205,223,184,0,148],
[226,183,238,196,182,212,224,167,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,188,180,171,195,173,168,173,197],
[162,0,156,176,167,174,146,147,154,164],
[153,185,0,151,177,161,158,138,176,166],
[161,165,190,0,177,178,198,150,177,184],
[170,174,164,164,0,169,171,162,185,180],
[146,167,180,163,172,0,164,170,145,196],
[168,195,183,143,170,177,0,191,166,196],
[173,194,203,191,179,171,150,0,169,194],
[168,187,165,164,156,196,175,172,0,203],
[144,177,175,157,161,145,145,147,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,227,168,187,159,167,151,173,167],
[142,0,169,139,171,143,168,142,179,158],
[114,172,0,119,189,183,167,151,190,155],
[173,202,222,0,251,180,209,191,196,162],
[154,170,152,90,0,136,150,128,118,164],
[182,198,158,161,205,0,213,165,164,170],
[174,173,174,132,191,128,0,99,144,142],
[190,199,190,150,213,176,242,0,179,188],
[168,162,151,145,223,177,197,162,0,168],
[174,183,186,179,177,171,199,153,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,155,171,146,139,128,147,135,155],
[188,0,148,163,135,131,144,166,157,141],
[186,193,0,174,167,155,152,187,166,163],
[170,178,167,0,164,138,149,164,146,152],
[195,206,174,177,0,163,171,171,143,168],
[202,210,186,203,178,0,166,185,180,165],
[213,197,189,192,170,175,0,186,178,169],
[194,175,154,177,170,156,155,0,168,166],
[206,184,175,195,198,161,163,173,0,179],
[186,200,178,189,173,176,172,175,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,164,152,189,155,158,175,149,170],
[186,0,192,193,194,169,189,184,186,206],
[177,149,0,154,176,162,174,164,147,164],
[189,148,187,0,197,185,164,190,186,173],
[152,147,165,144,0,170,149,177,144,176],
[186,172,179,156,171,0,170,197,174,171],
[183,152,167,177,192,171,0,177,159,177],
[166,157,177,151,164,144,164,0,143,163],
[192,155,194,155,197,167,182,198,0,189],
[171,135,177,168,165,170,164,178,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,165,179,159,163,156,166,161],
[167,0,182,171,174,173,161,151,176,148],
[168,159,0,159,177,183,154,155,159,162],
[176,170,182,0,178,167,170,162,160,155],
[162,167,164,163,0,166,165,164,157,165],
[182,168,158,174,175,0,158,146,173,153],
[178,180,187,171,176,183,0,171,174,169],
[185,190,186,179,177,195,170,0,195,168],
[175,165,182,181,184,168,167,146,0,180],
[180,193,179,186,176,188,172,173,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,185,190,194,195,195,170,190],
[160,0,156,149,150,172,159,173,162,160],
[160,185,0,152,182,183,190,171,190,174],
[156,192,189,0,174,183,181,183,189,186],
[151,191,159,167,0,174,194,174,171,169],
[147,169,158,158,167,0,159,179,163,157],
[146,182,151,160,147,182,0,172,174,147],
[146,168,170,158,167,162,169,0,169,166],
[171,179,151,152,170,178,167,172,0,155],
[151,181,167,155,172,184,194,175,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,156,166,173,165,163,140,157,171],
[189,0,158,160,170,177,135,154,161,184],
[185,183,0,179,180,204,187,178,176,169],
[175,181,162,0,177,195,146,138,162,156],
[168,171,161,164,0,187,156,160,185,196],
[176,164,137,146,154,0,116,144,151,155],
[178,206,154,195,185,225,0,172,183,175],
[201,187,163,203,181,197,169,0,175,204],
[184,180,165,179,156,190,158,166,0,185],
[170,157,172,185,145,186,166,137,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,178,158,162,169,160,154,163,173],
[167,0,176,161,178,168,156,157,165,159],
[163,165,0,142,152,155,159,148,159,172],
[183,180,199,0,188,190,166,172,188,189],
[179,163,189,153,0,171,155,168,172,175],
[172,173,186,151,170,0,159,163,170,170],
[181,185,182,175,186,182,0,164,176,163],
[187,184,193,169,173,178,177,0,179,187],
[178,176,182,153,169,171,165,162,0,174],
[168,182,169,152,166,171,178,154,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,132,129,152,134,147,199,176,180],
[255,0,170,211,209,212,137,167,197,218],
[209,171,0,260,181,193,161,244,163,182],
[212,130,81,0,176,157,200,173,184,180],
[189,132,160,165,0,152,178,168,160,174],
[207,129,148,184,189,0,142,207,137,253],
[194,204,180,141,163,199,0,207,191,218],
[142,174,97,168,173,134,134,0,170,210],
[165,144,178,157,181,204,150,171,0,189],
[161,123,159,161,167,88,123,131,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,182,181,170,163,171,182,179,185],
[166,0,186,167,180,162,179,177,178,178],
[159,155,0,167,174,149,165,167,160,173],
[160,174,174,0,168,155,174,167,168,177],
[171,161,167,173,0,163,177,182,166,173],
[178,179,192,186,178,0,168,190,176,184],
[170,162,176,167,164,173,0,179,168,164],
[159,164,174,174,159,151,162,0,158,169],
[162,163,181,173,175,165,173,183,0,171],
[156,163,168,164,168,157,177,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,187,143,153,207,172,184,124,115],
[195,0,193,197,158,173,179,139,187,103],
[154,148,0,147,130,182,153,96,117,96],
[198,144,194,0,139,163,150,159,114,171],
[188,183,211,202,0,172,196,153,183,167],
[134,168,159,178,169,0,156,163,119,105],
[169,162,188,191,145,185,0,178,181,126],
[157,202,245,182,188,178,163,0,181,96],
[217,154,224,227,158,222,160,160,0,162],
[226,238,245,170,174,236,215,245,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,186,188,173,198,163,176,185,189],
[137,0,171,166,141,185,135,150,164,170],
[155,170,0,161,149,173,164,149,142,160],
[153,175,180,0,160,167,139,154,178,181],
[168,200,192,181,0,201,173,172,177,197],
[143,156,168,174,140,0,138,147,149,158],
[178,206,177,202,168,203,0,181,186,194],
[165,191,192,187,169,194,160,0,193,174],
[156,177,199,163,164,192,155,148,0,181],
[152,171,181,160,144,183,147,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,149,168,181,168,183,189,164,188],
[188,0,161,187,193,177,181,185,162,188],
[192,180,0,175,182,179,177,193,170,199],
[173,154,166,0,178,164,188,183,182,183],
[160,148,159,163,0,158,169,177,155,171],
[173,164,162,177,183,0,177,175,172,184],
[158,160,164,153,172,164,0,167,165,178],
[152,156,148,158,164,166,174,0,153,175],
[177,179,171,159,186,169,176,188,0,182],
[153,153,142,158,170,157,163,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,88,88,140,42,82,58,131,73],
[277,0,185,143,185,90,127,168,163,218],
[253,156,0,125,131,127,181,156,117,215],
[253,198,216,0,280,228,268,198,204,146],
[201,156,210,61,0,174,89,159,223,195],
[299,251,214,113,167,0,202,187,190,215],
[259,214,160,73,252,139,0,229,223,175],
[283,173,185,143,182,154,112,0,163,230],
[210,178,224,137,118,151,118,178,0,239],
[268,123,126,195,146,126,166,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,185,181,178,175,163,187,180,173],
[160,0,161,160,143,155,157,174,174,167],
[156,180,0,178,174,181,163,171,176,185],
[160,181,163,0,170,166,173,184,174,163],
[163,198,167,171,0,172,153,186,181,186],
[166,186,160,175,169,0,160,190,182,188],
[178,184,178,168,188,181,0,170,172,180],
[154,167,170,157,155,151,171,0,182,182],
[161,167,165,167,160,159,169,159,0,173],
[168,174,156,178,155,153,161,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,149,162,154,161,158,177,157,166],
[186,0,187,173,181,185,167,190,175,190],
[192,154,0,154,148,166,157,179,167,174],
[179,168,187,0,169,171,184,180,167,187],
[187,160,193,172,0,187,176,193,192,177],
[180,156,175,170,154,0,164,163,169,162],
[183,174,184,157,165,177,0,169,164,156],
[164,151,162,161,148,178,172,0,153,158],
[184,166,174,174,149,172,177,188,0,157],
[175,151,167,154,164,179,185,183,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,192,158,169,151,175,151,162,151],
[168,0,180,169,167,135,157,141,145,117],
[149,161,0,167,141,148,129,162,145,159],
[183,172,174,0,153,151,157,154,157,153],
[172,174,200,188,0,163,180,199,152,177],
[190,206,193,190,178,0,217,142,164,171],
[166,184,212,184,161,124,0,140,171,154],
[190,200,179,187,142,199,201,0,169,189],
[179,196,196,184,189,177,170,172,0,176],
[190,224,182,188,164,170,187,152,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,160,168,205,182,168,157,165,185],
[168,0,173,172,186,187,160,173,181,194],
[181,168,0,181,209,172,193,199,174,189],
[173,169,160,0,210,172,165,196,154,201],
[136,155,132,131,0,134,132,160,127,190],
[159,154,169,169,207,0,159,169,174,197],
[173,181,148,176,209,182,0,181,185,189],
[184,168,142,145,181,172,160,0,150,188],
[176,160,167,187,214,167,156,191,0,186],
[156,147,152,140,151,144,152,153,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,162,163,174,160,181,168,166],
[182,0,159,166,165,168,158,156,176,164],
[178,182,0,164,164,193,172,167,164,184],
[179,175,177,0,171,175,167,186,167,189],
[178,176,177,170,0,183,167,159,165,169],
[167,173,148,166,158,0,160,178,171,175],
[181,183,169,174,174,181,0,181,158,188],
[160,185,174,155,182,163,160,0,171,188],
[173,165,177,174,176,170,183,170,0,163],
[175,177,157,152,172,166,153,153,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,191,170,178,178,199,196,190,192],
[170,0,183,167,162,166,190,174,172,167],
[150,158,0,170,164,204,176,177,181,155],
[171,174,171,0,157,177,185,193,182,169],
[163,179,177,184,0,198,177,201,187,180],
[163,175,137,164,143,0,160,156,181,170],
[142,151,165,156,164,181,0,176,177,160],
[145,167,164,148,140,185,165,0,159,152],
[151,169,160,159,154,160,164,182,0,162],
[149,174,186,172,161,171,181,189,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,166,175,170,168,163,166,189,167],
[195,0,175,184,179,182,170,187,192,178],
[175,166,0,177,186,171,175,193,183,193],
[166,157,164,0,177,164,164,170,189,173],
[171,162,155,164,0,158,149,178,181,170],
[173,159,170,177,183,0,169,183,184,186],
[178,171,166,177,192,172,0,181,185,187],
[175,154,148,171,163,158,160,0,177,171],
[152,149,158,152,160,157,156,164,0,165],
[174,163,148,168,171,155,154,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,191,185,179,178,196,160,171],
[167,0,170,181,182,189,190,186,167,166],
[176,171,0,175,188,178,177,176,177,156],
[150,160,166,0,174,163,171,179,177,175],
[156,159,153,167,0,152,174,166,153,146],
[162,152,163,178,189,0,186,181,162,160],
[163,151,164,170,167,155,0,165,162,164],
[145,155,165,162,175,160,176,0,148,166],
[181,174,164,164,188,179,179,193,0,172],
[170,175,185,166,195,181,177,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,162,186,174,185,174,166,166],
[177,0,185,160,187,178,173,166,175,170],
[162,156,0,139,177,169,167,165,146,153],
[179,181,202,0,194,182,181,187,167,165],
[155,154,164,147,0,161,156,155,150,164],
[167,163,172,159,180,0,164,181,154,155],
[156,168,174,160,185,177,0,168,161,157],
[167,175,176,154,186,160,173,0,164,169],
[175,166,195,174,191,187,180,177,0,172],
[175,171,188,176,177,186,184,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,168,174,176,173,179,172,178,187],
[155,0,169,158,166,156,165,171,166,178],
[173,172,0,171,165,171,168,156,168,175],
[167,183,170,0,150,165,164,173,169,172],
[165,175,176,191,0,157,163,176,185,169],
[168,185,170,176,184,0,176,182,185,187],
[162,176,173,177,178,165,0,169,181,182],
[169,170,185,168,165,159,172,0,182,161],
[163,175,173,172,156,156,160,159,0,172],
[154,163,166,169,172,154,159,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,182,202,170,183,162,178,169,183],
[168,0,168,197,171,165,162,170,171,201],
[159,173,0,189,175,161,157,166,180,196],
[139,144,152,0,158,141,136,140,171,174],
[171,170,166,183,0,157,160,155,166,186],
[158,176,180,200,184,0,163,166,161,180],
[179,179,184,205,181,178,0,182,166,190],
[163,171,175,201,186,175,159,0,173,180],
[172,170,161,170,175,180,175,168,0,187],
[158,140,145,167,155,161,151,161,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,162,170,178,166,168,191,179],
[163,0,175,178,171,196,177,162,199,178],
[175,166,0,190,159,187,188,163,184,157],
[179,163,151,0,174,161,150,170,166,163],
[171,170,182,167,0,178,174,159,197,168],
[163,145,154,180,163,0,159,165,162,154],
[175,164,153,191,167,182,0,164,186,179],
[173,179,178,171,182,176,177,0,195,154],
[150,142,157,175,144,179,155,146,0,149],
[162,163,184,178,173,187,162,187,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,183,185,173,177,165,178,182,170],
[174,0,178,187,159,166,162,163,171,164],
[158,163,0,168,159,155,145,156,163,153],
[156,154,173,0,159,167,144,160,168,154],
[168,182,182,182,0,180,165,168,187,161],
[164,175,186,174,161,0,169,169,167,167],
[176,179,196,197,176,172,0,171,177,161],
[163,178,185,181,173,172,170,0,185,172],
[159,170,178,173,154,174,164,156,0,164],
[171,177,188,187,180,174,180,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,146,120,195,132,134,139,122,113],
[221,0,163,171,203,204,223,173,197,167],
[195,178,0,191,203,183,198,179,169,186],
[221,170,150,0,222,195,174,199,172,160],
[146,138,138,119,0,158,153,148,133,129],
[209,137,158,146,183,0,197,158,177,151],
[207,118,143,167,188,144,0,141,177,163],
[202,168,162,142,193,183,200,0,175,166],
[219,144,172,169,208,164,164,166,0,143],
[228,174,155,181,212,190,178,175,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,154,209,183,181,180,168,190,178],
[167,0,176,197,170,206,176,168,203,173],
[187,165,0,203,203,209,207,199,177,181],
[132,144,138,0,144,166,160,140,167,162],
[158,171,138,197,0,189,189,178,185,161],
[160,135,132,175,152,0,156,153,169,144],
[161,165,134,181,152,185,0,152,162,134],
[173,173,142,201,163,188,189,0,175,169],
[151,138,164,174,156,172,179,166,0,155],
[163,168,160,179,180,197,207,172,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,150,214,202,194,182,191,206],
[163,0,155,157,145,170,179,152,187,192],
[179,186,0,187,176,187,198,161,202,172],
[191,184,154,0,156,171,191,159,196,191],
[127,196,165,185,0,183,193,174,172,197],
[139,171,154,170,158,0,194,175,161,188],
[147,162,143,150,148,147,0,156,181,174],
[159,189,180,182,167,166,185,0,179,203],
[150,154,139,145,169,180,160,162,0,187],
[135,149,169,150,144,153,167,138,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,136,189,158,163,168,170,169,188],
[161,0,136,149,147,143,155,175,162,171],
[205,205,0,215,184,202,180,166,184,206],
[152,192,126,0,160,172,165,149,150,188],
[183,194,157,181,0,160,174,170,166,176],
[178,198,139,169,181,0,169,171,161,215],
[173,186,161,176,167,172,0,163,158,180],
[171,166,175,192,171,170,178,0,177,172],
[172,179,157,191,175,180,183,164,0,163],
[153,170,135,153,165,126,161,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,183,158,176,169,167,179,142,164],
[167,0,183,150,175,173,172,163,162,172],
[158,158,0,143,167,170,162,154,137,156],
[183,191,198,0,190,193,190,186,177,170],
[165,166,174,151,0,169,153,177,152,165],
[172,168,171,148,172,0,183,170,152,164],
[174,169,179,151,188,158,0,180,162,166],
[162,178,187,155,164,171,161,0,147,156],
[199,179,204,164,189,189,179,194,0,194],
[177,169,185,171,176,177,175,185,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,183,170,159,144,169,170,157,159],
[171,0,195,179,170,169,179,172,179,154],
[158,146,0,162,140,168,163,160,144,155],
[171,162,179,0,156,173,185,187,174,179],
[182,171,201,185,0,176,186,190,179,161],
[197,172,173,168,165,0,182,175,182,180],
[172,162,178,156,155,159,0,152,170,195],
[171,169,181,154,151,166,189,0,164,166],
[184,162,197,167,162,159,171,177,0,178],
[182,187,186,162,180,161,146,175,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,154,184,198,172,133,171,165,178],
[139,0,156,154,147,144,138,162,154,130],
[187,185,0,172,154,154,170,157,160,159],
[157,187,169,0,167,164,161,179,162,157],
[143,194,187,174,0,161,144,150,150,157],
[169,197,187,177,180,0,175,194,184,181],
[208,203,171,180,197,166,0,188,172,173],
[170,179,184,162,191,147,153,0,155,157],
[176,187,181,179,191,157,169,186,0,147],
[163,211,182,184,184,160,168,184,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,151,155,167,171,156,158,150,169],
[182,0,162,167,163,176,162,159,148,165],
[190,179,0,185,162,176,175,172,183,176],
[186,174,156,0,153,180,171,159,154,187],
[174,178,179,188,0,185,177,166,157,177],
[170,165,165,161,156,0,162,166,146,189],
[185,179,166,170,164,179,0,174,152,176],
[183,182,169,182,175,175,167,0,171,182],
[191,193,158,187,184,195,189,170,0,176],
[172,176,165,154,164,152,165,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,179,177,154,162,164,185,175,173],
[159,0,167,156,150,149,159,174,173,146],
[162,174,0,175,163,165,173,178,179,162],
[164,185,166,0,175,160,167,184,167,165],
[187,191,178,166,0,169,175,176,163,161],
[179,192,176,181,172,0,164,181,175,164],
[177,182,168,174,166,177,0,193,184,150],
[156,167,163,157,165,160,148,0,162,162],
[166,168,162,174,178,166,157,179,0,154],
[168,195,179,176,180,177,191,179,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,177,177,162,187,176,168,185],
[167,0,159,165,168,137,175,170,160,177],
[172,182,0,168,173,177,162,178,160,196],
[164,176,173,0,180,152,189,154,158,192],
[164,173,168,161,0,149,184,179,186,164],
[179,204,164,189,192,0,179,177,185,203],
[154,166,179,152,157,162,0,157,153,178],
[165,171,163,187,162,164,184,0,172,200],
[173,181,181,183,155,156,188,169,0,186],
[156,164,145,149,177,138,163,141,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,190,189,151,151,159,167,140,170],
[156,0,169,158,167,171,194,174,188,191],
[151,172,0,178,136,183,190,142,180,194],
[152,183,163,0,157,137,159,157,129,144],
[190,174,205,184,0,140,165,134,155,177],
[190,170,158,204,201,0,187,167,150,170],
[182,147,151,182,176,154,0,167,142,169],
[174,167,199,184,207,174,174,0,168,170],
[201,153,161,212,186,191,199,173,0,159],
[171,150,147,197,164,171,172,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,193,167,259,259,261,134,140,220],
[174,0,122,244,281,174,281,107,249,146],
[148,219,0,186,223,239,186,189,196,173],
[174,97,155,0,156,244,158,69,90,145],
[82,60,118,185,0,168,192,59,33,168],
[82,167,102,97,173,0,228,134,107,120],
[80,60,155,183,149,113,0,96,123,113],
[207,234,152,272,282,207,245,0,245,179],
[201,92,145,251,308,234,218,96,0,168],
[121,195,168,196,173,221,228,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,191,179,170,166,159,169,148,160],
[187,0,175,191,174,178,155,171,146,179],
[150,166,0,157,155,161,168,171,162,158],
[162,150,184,0,194,173,160,173,174,169],
[171,167,186,147,0,157,170,189,176,175],
[175,163,180,168,184,0,158,151,156,169],
[182,186,173,181,171,183,0,188,165,184],
[172,170,170,168,152,190,153,0,165,160],
[193,195,179,167,165,185,176,176,0,190],
[181,162,183,172,166,172,157,181,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,174,156,166,161,167,154,175],
[172,0,160,161,169,169,175,159,172,187],
[172,181,0,186,166,202,189,177,172,193],
[167,180,155,0,147,176,147,174,155,170],
[185,172,175,194,0,198,182,159,179,187],
[175,172,139,165,143,0,171,150,160,181],
[180,166,152,194,159,170,0,163,164,173],
[174,182,164,167,182,191,178,0,177,193],
[187,169,169,186,162,181,177,164,0,180],
[166,154,148,171,154,160,168,148,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,133,158,138,130,146,170,147,149],
[194,0,168,175,203,197,173,182,189,205],
[208,173,0,153,199,180,178,202,179,185],
[183,166,188,0,193,171,145,175,168,186],
[203,138,142,148,0,175,165,184,170,176],
[211,144,161,170,166,0,185,193,164,184],
[195,168,163,196,176,156,0,183,169,204],
[171,159,139,166,157,148,158,0,164,187],
[194,152,162,173,171,177,172,177,0,200],
[192,136,156,155,165,157,137,154,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,95,149,148,134,133,118,98,164],
[186,0,162,113,139,142,95,173,132,149],
[246,179,0,160,190,133,164,129,175,223],
[192,228,181,0,177,184,133,131,146,124],
[193,202,151,164,0,160,157,130,87,176],
[207,199,208,157,181,0,155,149,177,216],
[208,246,177,208,184,186,0,169,183,213],
[223,168,212,210,211,192,172,0,193,188],
[243,209,166,195,254,164,158,148,0,187],
[177,192,118,217,165,125,128,153,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,174,168,178,161,163,160,158],
[165,0,163,163,182,166,156,154,148,158],
[171,178,0,179,179,173,167,161,167,172],
[167,178,162,0,171,171,163,165,166,164],
[173,159,162,170,0,177,159,165,164,172],
[163,175,168,170,164,0,162,158,165,173],
[180,185,174,178,182,179,0,165,181,176],
[178,187,180,176,176,183,176,0,170,172],
[181,193,174,175,177,176,160,171,0,183],
[183,183,169,177,169,168,165,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,171,178,177,166,178,177,174,186],
[158,0,172,156,144,174,182,160,147,170],
[170,169,0,151,159,160,180,176,165,177],
[163,185,190,0,173,175,202,166,181,174],
[164,197,182,168,0,174,188,173,174,180],
[175,167,181,166,167,0,182,185,183,193],
[163,159,161,139,153,159,0,151,134,171],
[164,181,165,175,168,156,190,0,154,180],
[167,194,176,160,167,158,207,187,0,191],
[155,171,164,167,161,148,170,161,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,148,165,168,137,146,154,153,181],
[185,0,181,163,191,159,147,159,177,170],
[193,160,0,172,199,166,157,162,169,191],
[176,178,169,0,184,159,162,162,173,185],
[173,150,142,157,0,143,153,148,172,182],
[204,182,175,182,198,0,165,177,189,201],
[195,194,184,179,188,176,0,165,179,196],
[187,182,179,179,193,164,176,0,167,197],
[188,164,172,168,169,152,162,174,0,184],
[160,171,150,156,159,140,145,144,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,173,169,168,168,182,179,181],
[163,0,180,171,167,170,170,174,171,165],
[167,161,0,171,165,166,180,180,169,174],
[168,170,170,0,169,172,175,171,188,172],
[172,174,176,172,0,165,174,170,183,168],
[173,171,175,169,176,0,172,177,177,179],
[173,171,161,166,167,169,0,178,176,182],
[159,167,161,170,171,164,163,0,171,160],
[162,170,172,153,158,164,165,170,0,170],
[160,176,167,169,173,162,159,181,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,211,99,159,137,159,279,279,279],
[62,0,112,137,157,135,157,135,135,2],
[130,229,0,137,137,137,99,205,205,94],
[242,204,204,0,204,190,152,180,180,206],
[182,184,204,137,0,40,225,158,160,146],
[204,206,204,151,301,0,225,180,182,206],
[182,184,242,189,116,116,0,160,160,146],
[62,206,136,161,183,161,181,0,138,138],
[62,206,136,161,181,159,181,203,0,206],
[62,339,247,135,195,135,195,203,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,177,158,162,162,164,178,148,173],
[174,0,199,175,181,188,179,172,167,180],
[164,142,0,159,163,156,161,163,143,163],
[183,166,182,0,179,174,173,182,159,178],
[179,160,178,162,0,174,179,160,171,176],
[179,153,185,167,167,0,184,182,157,180],
[177,162,180,168,162,157,0,182,159,167],
[163,169,178,159,181,159,159,0,153,171],
[193,174,198,182,170,184,182,188,0,180],
[168,161,178,163,165,161,174,170,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,156,162,158,149,165,170,165,174],
[163,0,158,168,172,158,166,158,173,170],
[185,183,0,167,177,160,175,183,169,177],
[179,173,174,0,174,165,174,168,179,178],
[183,169,164,167,0,171,179,165,179,177],
[192,183,181,176,170,0,169,173,169,184],
[176,175,166,167,162,172,0,167,181,184],
[171,183,158,173,176,168,174,0,181,168],
[176,168,172,162,162,172,160,160,0,163],
[167,171,164,163,164,157,157,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,144,215,309,256,216,215,256,288],
[73,0,163,136,135,168,199,167,208,239],
[197,178,0,219,165,219,179,219,219,251],
[126,205,122,0,125,248,211,197,234,238],
[32,206,176,216,0,257,207,157,216,239],
[85,173,122,93,84,0,84,156,121,197],
[125,142,162,130,134,257,0,72,162,238],
[126,174,122,144,184,185,269,0,225,252],
[85,133,122,107,125,220,179,116,0,157],
[53,102,90,103,102,144,103,89,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,160,179,169,175,174,162,181],
[168,0,171,173,168,173,182,168,137,182],
[163,170,0,173,170,180,175,168,180,185],
[181,168,168,0,176,179,174,187,151,196],
[162,173,171,165,0,179,182,163,168,175],
[172,168,161,162,162,0,183,176,179,192],
[166,159,166,167,159,158,0,144,155,185],
[167,173,173,154,178,165,197,0,168,179],
[179,204,161,190,173,162,186,173,0,172],
[160,159,156,145,166,149,156,162,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,128,160,136,156,143,166,117,170],
[179,0,127,153,130,145,152,174,151,130],
[213,214,0,208,191,169,170,203,173,205],
[181,188,133,0,143,155,161,178,160,145],
[205,211,150,198,0,172,178,207,154,188],
[185,196,172,186,169,0,152,209,165,204],
[198,189,171,180,163,189,0,188,164,149],
[175,167,138,163,134,132,153,0,139,139],
[224,190,168,181,187,176,177,202,0,189],
[171,211,136,196,153,137,192,202,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,173,162,184,164,180,177,192,188],
[149,0,179,183,172,162,157,174,167,186],
[168,162,0,159,193,156,166,186,187,186],
[179,158,182,0,188,176,175,192,176,202],
[157,169,148,153,0,141,176,172,151,173],
[177,179,185,165,200,0,176,178,196,197],
[161,184,175,166,165,165,0,193,193,195],
[164,167,155,149,169,163,148,0,149,185],
[149,174,154,165,190,145,148,192,0,182],
[153,155,155,139,168,144,146,156,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,139,179,136,183,171,179,200,185],
[199,0,145,121,151,187,143,193,198,163],
[202,196,0,187,144,200,166,183,207,168],
[162,220,154,0,182,181,158,202,196,174],
[205,190,197,159,0,184,164,212,187,177],
[158,154,141,160,157,0,153,168,179,153],
[170,198,175,183,177,188,0,224,185,193],
[162,148,158,139,129,173,117,0,141,168],
[141,143,134,145,154,162,156,200,0,155],
[156,178,173,167,164,188,148,173,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,151,159,159,136,182,172,197,172],
[198,0,225,178,169,172,179,186,196,194],
[190,116,0,170,179,164,185,172,182,188],
[182,163,171,0,175,171,175,165,175,183],
[182,172,162,166,0,166,199,162,174,188],
[205,169,177,170,175,0,186,186,179,207],
[159,162,156,166,142,155,0,146,139,154],
[169,155,169,176,179,155,195,0,196,186],
[144,145,159,166,167,162,202,145,0,179],
[169,147,153,158,153,134,187,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,171,175,161,165,154,156,151],
[176,0,168,175,168,177,177,156,173,153],
[173,173,0,175,179,183,170,161,166,163],
[170,166,166,0,186,165,158,164,163,151],
[166,173,162,155,0,159,162,155,157,164],
[180,164,158,176,182,0,160,170,173,154],
[176,164,171,183,179,181,0,166,170,154],
[187,185,180,177,186,171,175,0,166,172],
[185,168,175,178,184,168,171,175,0,160],
[190,188,178,190,177,187,187,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,175,176,169,168,172,152,164],
[165,0,174,166,165,168,162,165,155,173],
[171,167,0,167,179,149,155,159,162,156],
[166,175,174,0,180,168,184,180,172,175],
[165,176,162,161,0,166,164,159,149,165],
[172,173,192,173,175,0,178,167,167,175],
[173,179,186,157,177,163,0,176,169,164],
[169,176,182,161,182,174,165,0,166,167],
[189,186,179,169,192,174,172,175,0,184],
[177,168,185,166,176,166,177,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,180,173,183,171,177,151,159,162],
[160,0,150,157,155,154,170,166,155,151],
[161,191,0,173,169,160,164,170,168,170],
[168,184,168,0,174,183,160,164,151,168],
[158,186,172,167,0,173,170,168,155,148],
[170,187,181,158,168,0,181,175,164,186],
[164,171,177,181,171,160,0,189,174,168],
[190,175,171,177,173,166,152,0,162,172],
[182,186,173,190,186,177,167,179,0,158],
[179,190,171,173,193,155,173,169,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,169,168,154,164,155,138,177,183],
[192,0,188,175,170,185,182,177,191,192],
[172,153,0,157,168,174,167,156,171,192],
[173,166,184,0,185,190,175,163,178,174],
[187,171,173,156,0,184,176,159,179,202],
[177,156,167,151,157,0,182,157,187,181],
[186,159,174,166,165,159,0,162,179,194],
[203,164,185,178,182,184,179,0,195,182],
[164,150,170,163,162,154,162,146,0,185],
[158,149,149,167,139,160,147,159,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,199,182,183,180,173,189,170,162],
[164,0,206,183,178,172,177,165,174,190],
[142,135,0,158,179,168,170,154,141,157],
[159,158,183,0,189,167,178,173,164,178],
[158,163,162,152,0,164,163,157,152,159],
[161,169,173,174,177,0,179,182,161,158],
[168,164,171,163,178,162,0,166,156,163],
[152,176,187,168,184,159,175,0,159,165],
[171,167,200,177,189,180,185,182,0,182],
[179,151,184,163,182,183,178,176,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,161,165,168,169,177,176,157],
[174,0,166,164,168,154,172,161,167,154],
[185,175,0,175,197,182,192,183,190,164],
[180,177,166,0,183,168,171,168,175,173],
[176,173,144,158,0,159,165,163,169,150],
[173,187,159,173,182,0,191,165,190,169],
[172,169,149,170,176,150,0,165,173,169],
[164,180,158,173,178,176,176,0,179,167],
[165,174,151,166,172,151,168,162,0,154],
[184,187,177,168,191,172,172,174,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,148,167,157,144,158,143,149],
[174,0,165,164,151,160,148,167,160,163],
[173,176,0,160,162,161,157,174,157,160],
[193,177,181,0,167,176,168,166,170,172],
[174,190,179,174,0,179,175,179,156,176],
[184,181,180,165,162,0,157,172,157,157],
[197,193,184,173,166,184,0,185,177,178],
[183,174,167,175,162,169,156,0,160,166],
[198,181,184,171,185,184,164,181,0,180],
[192,178,181,169,165,184,163,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,162,179,180,157,173,163,157,170],
[170,0,150,168,178,167,171,165,155,167],
[179,191,0,180,189,177,179,176,164,183],
[162,173,161,0,186,168,167,163,156,162],
[161,163,152,155,0,155,158,150,158,147],
[184,174,164,173,186,0,166,174,159,172],
[168,170,162,174,183,175,0,166,166,184],
[178,176,165,178,191,167,175,0,164,165],
[184,186,177,185,183,182,175,177,0,168],
[171,174,158,179,194,169,157,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,144,147,143,150,152,134,141,137],
[180,0,159,164,181,171,157,144,160,161],
[197,182,0,180,194,154,175,167,175,173],
[194,177,161,0,158,161,163,159,166,157],
[198,160,147,183,0,181,174,163,174,155],
[191,170,187,180,160,0,165,174,175,176],
[189,184,166,178,167,176,0,176,166,181],
[207,197,174,182,178,167,165,0,156,185],
[200,181,166,175,167,166,175,185,0,183],
[204,180,168,184,186,165,160,156,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,163,163,170,187,175,175,204,154],
[115,0,117,162,107,160,127,158,165,141],
[178,224,0,194,186,179,189,177,205,158],
[178,179,147,0,151,178,184,160,171,171],
[171,234,155,190,0,156,184,198,221,157],
[154,181,162,163,185,0,176,198,201,172],
[166,214,152,157,157,165,0,173,186,157],
[166,183,164,181,143,143,168,0,205,144],
[137,176,136,170,120,140,155,136,0,131],
[187,200,183,170,184,169,184,197,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,132,89,171,142,113,118,150,117],
[209,0,155,158,180,172,152,172,155,157],
[209,186,0,134,172,185,158,170,179,173],
[252,183,207,0,217,193,161,154,193,183],
[170,161,169,124,0,199,153,144,131,171],
[199,169,156,148,142,0,143,132,163,152],
[228,189,183,180,188,198,0,186,150,186],
[223,169,171,187,197,209,155,0,161,187],
[191,186,162,148,210,178,191,180,0,173],
[224,184,168,158,170,189,155,154,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,168,182,177,176,174,186,167,175],
[154,0,144,154,149,167,159,182,153,148],
[173,197,0,178,179,169,171,184,171,175],
[159,187,163,0,165,186,168,174,178,173],
[164,192,162,176,0,185,177,188,172,171],
[165,174,172,155,156,0,147,175,168,167],
[167,182,170,173,164,194,0,193,164,173],
[155,159,157,167,153,166,148,0,156,163],
[174,188,170,163,169,173,177,185,0,171],
[166,193,166,168,170,174,168,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,175,165,180,161,167,191,182,186],
[154,0,162,149,157,152,164,164,169,165],
[166,179,0,177,163,178,168,184,178,174],
[176,192,164,0,165,168,177,172,173,184],
[161,184,178,176,0,171,174,168,177,179],
[180,189,163,173,170,0,170,184,177,178],
[174,177,173,164,167,171,0,165,169,173],
[150,177,157,169,173,157,176,0,175,176],
[159,172,163,168,164,164,172,166,0,169],
[155,176,167,157,162,163,168,165,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,169,152,150,159,183,157,163,168],
[194,0,157,167,163,155,183,178,177,181],
[172,184,0,181,174,164,187,175,165,174],
[189,174,160,0,174,174,190,183,172,179],
[191,178,167,167,0,181,184,160,173,184],
[182,186,177,167,160,0,187,174,163,180],
[158,158,154,151,157,154,0,158,150,170],
[184,163,166,158,181,167,183,0,190,185],
[178,164,176,169,168,178,191,151,0,174],
[173,160,167,162,157,161,171,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,185,172,177,154,151,167,189],
[169,0,188,159,170,173,176,163,166,195],
[171,153,0,145,144,150,141,147,156,182],
[156,182,196,0,170,179,157,151,175,195],
[169,171,197,171,0,191,155,178,183,190],
[164,168,191,162,150,0,175,168,177,177],
[187,165,200,184,186,166,0,177,159,185],
[190,178,194,190,163,173,164,0,177,199],
[174,175,185,166,158,164,182,164,0,174],
[152,146,159,146,151,164,156,142,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,176,168,167,164,178,166,173],
[170,0,183,180,164,174,171,164,178,178],
[172,158,0,165,179,161,160,168,178,166],
[165,161,176,0,171,166,168,166,160,169],
[173,177,162,170,0,169,165,171,175,166],
[174,167,180,175,172,0,181,175,176,185],
[177,170,181,173,176,160,0,160,181,167],
[163,177,173,175,170,166,181,0,161,178],
[175,163,163,181,166,165,160,180,0,178],
[168,163,175,172,175,156,174,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,171,165,179,154,169,161,173],
[179,0,186,183,170,186,179,184,184,184],
[171,155,0,173,182,192,186,177,160,172],
[170,158,168,0,160,176,160,160,161,171],
[176,171,159,181,0,187,169,179,162,181],
[162,155,149,165,154,0,154,165,147,157],
[187,162,155,181,172,187,0,178,168,176],
[172,157,164,181,162,176,163,0,163,171],
[180,157,181,180,179,194,173,178,0,181],
[168,157,169,170,160,184,165,170,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,170,154,128,145,135,159,154,163],
[168,0,147,150,141,147,161,152,146,155],
[171,194,0,170,168,161,165,173,161,149],
[187,191,171,0,179,160,182,173,166,158],
[213,200,173,162,0,156,192,184,156,181],
[196,194,180,181,185,0,183,178,166,167],
[206,180,176,159,149,158,0,188,161,147],
[182,189,168,168,157,163,153,0,178,177],
[187,195,180,175,185,175,180,163,0,163],
[178,186,192,183,160,174,194,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,185,166,171,178,158,159,160,172],
[174,0,173,177,167,185,173,172,172,169],
[156,168,0,160,172,183,141,159,157,167],
[175,164,181,0,164,184,159,158,166,176],
[170,174,169,177,0,179,168,157,168,170],
[163,156,158,157,162,0,159,164,156,174],
[183,168,200,182,173,182,0,179,178,180],
[182,169,182,183,184,177,162,0,172,189],
[181,169,184,175,173,185,163,169,0,174],
[169,172,174,165,171,167,161,152,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,155,175,146,155,158,163,166,161],
[180,0,161,167,175,175,177,179,167,163],
[186,180,0,183,176,180,187,176,169,173],
[166,174,158,0,165,172,168,169,176,170],
[195,166,165,176,0,185,173,173,180,171],
[186,166,161,169,156,0,163,179,166,166],
[183,164,154,173,168,178,0,171,170,158],
[178,162,165,172,168,162,170,0,177,162],
[175,174,172,165,161,175,171,164,0,171],
[180,178,168,171,170,175,183,179,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,176,177,162,172,174,174,169,169],
[172,0,188,184,166,173,175,173,178,181],
[165,153,0,151,162,154,156,163,175,167],
[164,157,190,0,158,167,164,171,183,165],
[179,175,179,183,0,171,170,173,178,171],
[169,168,187,174,170,0,165,181,181,180],
[167,166,185,177,171,176,0,169,182,181],
[167,168,178,170,168,160,172,0,172,171],
[172,163,166,158,163,160,159,169,0,167],
[172,160,174,176,170,161,160,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,196,225,203,208,211,207,148,198],
[126,0,159,157,187,165,164,125,173,158],
[145,182,0,146,171,173,170,145,141,189],
[116,184,195,0,181,157,165,178,133,149],
[138,154,170,160,0,155,174,129,156,161],
[133,176,168,184,186,0,178,161,180,180],
[130,177,171,176,167,163,0,162,132,182],
[134,216,196,163,212,180,179,0,162,187],
[193,168,200,208,185,161,209,179,0,214],
[143,183,152,192,180,161,159,154,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,202,180,197,155,147,166,179,145],
[168,0,176,180,166,172,153,167,221,168],
[139,165,0,168,171,168,127,188,209,168],
[161,161,173,0,157,165,150,199,194,137],
[144,175,170,184,0,164,159,163,189,142],
[186,169,173,176,177,0,146,166,198,162],
[194,188,214,191,182,195,0,169,211,194],
[175,174,153,142,178,175,172,0,176,165],
[162,120,132,147,152,143,130,165,0,159],
[196,173,173,204,199,179,147,176,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,190,155,161,191,167,161,170,188],
[172,0,214,163,171,200,199,186,172,198],
[151,127,0,159,175,175,176,159,173,160],
[186,178,182,0,167,166,189,179,202,183],
[180,170,166,174,0,185,189,174,193,184],
[150,141,166,175,156,0,179,142,188,168],
[174,142,165,152,152,162,0,160,159,162],
[180,155,182,162,167,199,181,0,192,200],
[171,169,168,139,148,153,182,149,0,170],
[153,143,181,158,157,173,179,141,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,154,168,170,152,164,169,171,170],
[165,0,168,154,168,159,177,173,175,177],
[187,173,0,163,176,166,165,177,183,166],
[173,187,178,0,177,164,176,178,187,185],
[171,173,165,164,0,165,170,173,179,174],
[189,182,175,177,176,0,169,187,181,197],
[177,164,176,165,171,172,0,168,191,172],
[172,168,164,163,168,154,173,0,173,175],
[170,166,158,154,162,160,150,168,0,149],
[171,164,175,156,167,144,169,166,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,171,172,186,172,174,153,174],
[164,0,162,168,151,169,168,162,174,173],
[171,179,0,166,162,190,178,169,167,168],
[170,173,175,0,163,184,169,155,153,166],
[169,190,179,178,0,187,173,156,186,181],
[155,172,151,157,154,0,166,154,163,165],
[169,173,163,172,168,175,0,156,170,158],
[167,179,172,186,185,187,185,0,175,172],
[188,167,174,188,155,178,171,166,0,170],
[167,168,173,175,160,176,183,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,209,163,184,179,169,188,193,166],
[157,0,208,141,156,182,191,189,155,151],
[132,133,0,151,142,148,168,184,184,140],
[178,200,190,0,179,198,172,194,194,161],
[157,185,199,162,0,204,188,162,221,196],
[162,159,193,143,137,0,164,163,160,142],
[172,150,173,169,153,177,0,181,159,130],
[153,152,157,147,179,178,160,0,172,184],
[148,186,157,147,120,181,182,169,0,159],
[175,190,201,180,145,199,211,157,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,189,201,170,174,203,206,186,189],
[155,0,167,186,196,168,167,160,197,187],
[152,174,0,178,171,165,208,202,145,202],
[140,155,163,0,156,153,195,153,177,164],
[171,145,170,185,0,172,200,181,182,169],
[167,173,176,188,169,0,199,182,176,179],
[138,174,133,146,141,142,0,179,140,178],
[135,181,139,188,160,159,162,0,139,180],
[155,144,196,164,159,165,201,202,0,181],
[152,154,139,177,172,162,163,161,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,128,155,109,144,121,153,157,192],
[207,0,199,206,150,134,139,179,209,231],
[213,142,0,183,199,152,149,200,198,193],
[186,135,158,0,137,137,128,191,199,264],
[232,191,142,204,0,146,193,217,232,186],
[197,207,189,204,195,0,134,213,227,201],
[220,202,192,213,148,207,0,231,180,192],
[188,162,141,150,124,128,110,0,208,164],
[184,132,143,142,109,114,161,133,0,208],
[149,110,148,77,155,140,149,177,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,142,137,152,141,140,151,158,175],
[191,0,178,177,167,173,174,185,184,209],
[199,163,0,188,175,206,173,186,186,195],
[204,164,153,0,157,175,164,163,179,173],
[189,174,166,184,0,198,177,172,192,181],
[200,168,135,166,143,0,159,149,177,153],
[201,167,168,177,164,182,0,166,198,188],
[190,156,155,178,169,192,175,0,179,196],
[183,157,155,162,149,164,143,162,0,174],
[166,132,146,168,160,188,153,145,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,190,163,178,149,164,164,160,162],
[171,0,185,174,168,166,168,171,177,145],
[151,156,0,157,165,160,151,164,155,139],
[178,167,184,0,167,164,179,173,172,151],
[163,173,176,174,0,149,178,160,153,147],
[192,175,181,177,192,0,168,182,162,149],
[177,173,190,162,163,173,0,164,164,143],
[177,170,177,168,181,159,177,0,151,164],
[181,164,186,169,188,179,177,190,0,178],
[179,196,202,190,194,192,198,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,170,166,172,154,173,172,163,171],
[183,0,182,176,170,170,171,178,176,173],
[171,159,0,166,163,170,159,172,164,170],
[175,165,175,0,177,171,165,190,171,196],
[169,171,178,164,0,170,164,168,188,173],
[187,171,171,170,171,0,176,188,172,182],
[168,170,182,176,177,165,0,179,170,173],
[169,163,169,151,173,153,162,0,165,177],
[178,165,177,170,153,169,171,176,0,162],
[170,168,171,145,168,159,168,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,178,183,167,178,184,173,175,184],
[154,0,159,159,161,162,168,153,157,164],
[163,182,0,162,167,164,169,153,151,172],
[158,182,179,0,163,178,176,166,166,180],
[174,180,174,178,0,180,181,168,163,172],
[163,179,177,163,161,0,158,171,145,176],
[157,173,172,165,160,183,0,160,152,176],
[168,188,188,175,173,170,181,0,163,178],
[166,184,190,175,178,196,189,178,0,168],
[157,177,169,161,169,165,165,163,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,199,130,226,203,202,209,167,229],
[164,0,178,178,175,172,185,170,211,194],
[142,163,0,164,142,202,154,172,194,179],
[211,163,177,0,202,209,198,194,215,181],
[115,166,199,139,0,201,200,145,152,230],
[138,169,139,132,140,0,137,117,169,176],
[139,156,187,143,141,204,0,105,187,189],
[132,171,169,147,196,224,236,0,234,285],
[174,130,147,126,189,172,154,107,0,221],
[112,147,162,160,111,165,152,56,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,145,145,160,143,144,161,160,147],
[165,0,144,147,155,144,133,162,162,167],
[196,197,0,168,158,189,152,193,181,194],
[196,194,173,0,162,178,159,215,162,175],
[181,186,183,179,0,154,160,194,193,207],
[198,197,152,163,187,0,179,179,188,191],
[197,208,189,182,181,162,0,195,183,212],
[180,179,148,126,147,162,146,0,146,169],
[181,179,160,179,148,153,158,195,0,168],
[194,174,147,166,134,150,129,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,163,171,162,181,173,168,169],
[176,0,186,171,164,157,169,181,165,183],
[169,155,0,186,177,176,177,176,175,166],
[178,170,155,0,156,166,158,180,167,161],
[170,177,164,185,0,187,176,172,167,165],
[179,184,165,175,154,0,167,187,166,188],
[160,172,164,183,165,174,0,175,163,175],
[168,160,165,161,169,154,166,0,168,169],
[173,176,166,174,174,175,178,173,0,175],
[172,158,175,180,176,153,166,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,209,212,166,200,232,189,176,220],
[164,0,211,213,177,250,212,202,170,191],
[132,130,0,182,134,199,193,208,184,147],
[129,128,159,0,131,170,178,163,167,153],
[175,164,207,210,0,239,243,206,161,200],
[141,91,142,171,102,0,165,155,111,142],
[109,129,148,163,98,176,0,145,117,123],
[152,139,133,178,135,186,196,0,144,205],
[165,171,157,174,180,230,224,197,0,198],
[121,150,194,188,141,199,218,136,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,171,165,171,177,170,179,177],
[170,0,153,160,158,166,165,164,172,174],
[167,188,0,168,169,178,176,181,184,185],
[170,181,173,0,174,181,173,174,189,177],
[176,183,172,167,0,181,180,178,191,185],
[170,175,163,160,160,0,183,160,168,175],
[164,176,165,168,161,158,0,172,184,173],
[171,177,160,167,163,181,169,0,176,165],
[162,169,157,152,150,173,157,165,0,165],
[164,167,156,164,156,166,168,176,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,157,154,154,160,160,161,154,160],
[178,0,170,161,172,168,165,168,170,165],
[184,171,0,164,163,169,171,167,158,179],
[187,180,177,0,173,162,173,172,164,186],
[187,169,178,168,0,168,163,167,163,157],
[181,173,172,179,173,0,174,174,177,169],
[181,176,170,168,178,167,0,180,176,175],
[180,173,174,169,174,167,161,0,177,167],
[187,171,183,177,178,164,165,164,0,176],
[181,176,162,155,184,172,166,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,132,118,135,168,128,172,140,185],
[160,0,181,173,196,189,153,167,183,157],
[209,160,0,182,175,162,113,203,161,167],
[223,168,159,0,180,243,150,170,167,181],
[206,145,166,161,0,228,179,170,180,185],
[173,152,179,98,113,0,108,130,148,193],
[213,188,228,191,162,233,0,186,245,202],
[169,174,138,171,171,211,155,0,171,168],
[201,158,180,174,161,193,96,170,0,166],
[156,184,174,160,156,148,139,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,193,174,173,167,188,193,188,172],
[160,0,175,178,148,161,174,194,184,167],
[148,166,0,171,159,158,179,185,188,165],
[167,163,170,0,152,155,177,179,179,161],
[168,193,182,189,0,176,196,204,198,177],
[174,180,183,186,165,0,189,182,183,170],
[153,167,162,164,145,152,0,172,167,148],
[148,147,156,162,137,159,169,0,169,148],
[153,157,153,162,143,158,174,172,0,159],
[169,174,176,180,164,171,193,193,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,154,166,179,168,162,166,167],
[173,0,163,156,165,174,175,171,161,170],
[167,178,0,165,172,164,175,175,154,178],
[187,185,176,0,174,191,188,190,171,168],
[175,176,169,167,0,174,170,172,162,168],
[162,167,177,150,167,0,173,161,164,175],
[173,166,166,153,171,168,0,164,154,161],
[179,170,166,151,169,180,177,0,165,170],
[175,180,187,170,179,177,187,176,0,171],
[174,171,163,173,173,166,180,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,158,174,167,174,159,201,171,172],
[179,0,164,170,172,183,173,184,164,183],
[183,177,0,164,178,166,164,169,168,196],
[167,171,177,0,169,171,155,175,160,166],
[174,169,163,172,0,179,170,188,167,183],
[167,158,175,170,162,0,157,185,167,185],
[182,168,177,186,171,184,0,196,166,176],
[140,157,172,166,153,156,145,0,143,171],
[170,177,173,181,174,174,175,198,0,166],
[169,158,145,175,158,156,165,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,161,185,177,171,187,195,182,184],
[164,0,166,171,176,170,191,185,177,187],
[180,175,0,166,178,174,175,185,193,205],
[156,170,175,0,171,183,168,176,166,185],
[164,165,163,170,0,156,184,170,172,179],
[170,171,167,158,185,0,186,168,188,178],
[154,150,166,173,157,155,0,167,160,168],
[146,156,156,165,171,173,174,0,181,173],
[159,164,148,175,169,153,181,160,0,181],
[157,154,136,156,162,163,173,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,163,161,166,152,145,150,162],
[168,0,163,167,160,200,162,176,180,172],
[172,178,0,156,183,195,178,161,169,168],
[178,174,185,0,179,188,164,176,180,171],
[180,181,158,162,0,195,162,167,161,167],
[175,141,146,153,146,0,135,158,152,142],
[189,179,163,177,179,206,0,191,162,186],
[196,165,180,165,174,183,150,0,166,161],
[191,161,172,161,180,189,179,175,0,174],
[179,169,173,170,174,199,155,180,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,179,193,171,188,181,170,174],
[163,0,177,174,179,173,176,174,175,176],
[162,164,0,167,188,180,172,175,171,168],
[162,167,174,0,179,179,168,178,164,171],
[148,162,153,162,0,173,147,165,167,163],
[170,168,161,162,168,0,167,164,163,173],
[153,165,169,173,194,174,0,179,175,169],
[160,167,166,163,176,177,162,0,182,178],
[171,166,170,177,174,178,166,159,0,172],
[167,165,173,170,178,168,172,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,162,161,148,181,173,169,164,146],
[210,0,179,174,180,211,202,179,201,145],
[179,162,0,156,140,188,178,161,155,171],
[180,167,185,0,175,188,190,183,174,175],
[193,161,201,166,0,196,162,185,191,159],
[160,130,153,153,145,0,136,183,141,137],
[168,139,163,151,179,205,0,179,178,150],
[172,162,180,158,156,158,162,0,166,136],
[177,140,186,167,150,200,163,175,0,132],
[195,196,170,166,182,204,191,205,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,203,175,177,200,172,168,171,187],
[151,0,160,150,172,167,166,152,154,153],
[138,181,0,152,156,167,163,153,170,164],
[166,191,189,0,184,200,194,160,210,195],
[164,169,185,157,0,169,195,149,172,166],
[141,174,174,141,172,0,170,137,160,153],
[169,175,178,147,146,171,0,181,164,179],
[173,189,188,181,192,204,160,0,180,187],
[170,187,171,131,169,181,177,161,0,178],
[154,188,177,146,175,188,162,154,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,147,174,193,159,173,195,196,181],
[167,0,151,156,187,153,163,165,165,176],
[194,190,0,200,199,187,151,188,193,199],
[167,185,141,0,201,137,145,179,168,176],
[148,154,142,140,0,128,141,154,142,175],
[182,188,154,204,213,0,173,200,177,203],
[168,178,190,196,200,168,0,171,187,198],
[146,176,153,162,187,141,170,0,163,165],
[145,176,148,173,199,164,154,178,0,192],
[160,165,142,165,166,138,143,176,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,148,170,169,162,180,170,161,185],
[170,0,178,175,161,167,182,162,181,164],
[193,163,0,201,179,187,186,172,182,182],
[171,166,140,0,151,158,176,154,171,158],
[172,180,162,190,0,166,155,172,186,156],
[179,174,154,183,175,0,173,156,170,173],
[161,159,155,165,186,168,0,169,161,174],
[171,179,169,187,169,185,172,0,173,178],
[180,160,159,170,155,171,180,168,0,162],
[156,177,159,183,185,168,167,163,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,173,170,170,193,167,190,195,198],
[159,0,133,175,139,180,189,174,161,164],
[168,208,0,167,181,206,192,215,167,183],
[171,166,174,0,174,183,178,177,166,177],
[171,202,160,167,0,165,169,183,157,191],
[148,161,135,158,176,0,165,157,173,167],
[174,152,149,163,172,176,0,202,173,156],
[151,167,126,164,158,184,139,0,182,149],
[146,180,174,175,184,168,168,159,0,179],
[143,177,158,164,150,174,185,192,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,232,221,231,222,201,239,242],
[173,0,150,211,203,252,238,188,201,228],
[170,191,0,199,208,192,183,178,197,209],
[109,130,142,0,176,188,154,170,168,160],
[120,138,133,165,0,171,167,135,135,161],
[110,89,149,153,170,0,149,133,170,189],
[119,103,158,187,174,192,0,157,207,147],
[140,153,163,171,206,208,184,0,196,193],
[102,140,144,173,206,171,134,145,0,164],
[99,113,132,181,180,152,194,148,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,157,180,139,91,159,172,145,173],
[206,0,170,210,203,178,223,203,196,250],
[184,171,0,174,180,150,163,192,144,206],
[161,131,167,0,131,138,142,187,112,212],
[202,138,161,210,0,152,216,199,164,208],
[250,163,191,203,189,0,179,238,172,202],
[182,118,178,199,125,162,0,180,126,223],
[169,138,149,154,142,103,161,0,191,181],
[196,145,197,229,177,169,215,150,0,233],
[168,91,135,129,133,139,118,160,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,202,149,189,212,176,186,160,169],
[117,0,159,147,130,157,161,139,152,135],
[139,182,0,180,171,187,181,159,180,177],
[192,194,161,0,144,194,186,176,180,157],
[152,211,170,197,0,190,170,187,175,176],
[129,184,154,147,151,0,195,146,167,159],
[165,180,160,155,171,146,0,164,151,116],
[155,202,182,165,154,195,177,0,170,161],
[181,189,161,161,166,174,190,171,0,164],
[172,206,164,184,165,182,225,180,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,182,184,174,169,178,170,172,185],
[151,0,168,162,176,174,158,176,152,177],
[159,173,0,154,167,169,156,167,161,169],
[157,179,187,0,179,159,151,170,174,171],
[167,165,174,162,0,166,151,166,143,167],
[172,167,172,182,175,0,157,198,152,186],
[163,183,185,190,190,184,0,169,170,182],
[171,165,174,171,175,143,172,0,158,156],
[169,189,180,167,198,189,171,183,0,179],
[156,164,172,170,174,155,159,185,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,170,183,170,177,171,168,200],
[173,0,174,167,168,170,162,168,167,180],
[165,167,0,169,166,167,165,164,162,184],
[171,174,172,0,164,169,176,171,165,185],
[158,173,175,177,0,164,168,168,170,181],
[171,171,174,172,177,0,170,165,176,180],
[164,179,176,165,173,171,0,164,176,186],
[170,173,177,170,173,176,177,0,178,185],
[173,174,179,176,171,165,165,163,0,173],
[141,161,157,156,160,161,155,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,187,140,172,168,153,183,195,170],
[178,0,190,160,175,188,177,188,213,203],
[154,151,0,145,142,145,158,166,164,164],
[201,181,196,0,168,198,177,197,196,188],
[169,166,199,173,0,168,192,181,208,181],
[173,153,196,143,173,0,162,144,209,179],
[188,164,183,164,149,179,0,191,212,221],
[158,153,175,144,160,197,150,0,196,182],
[146,128,177,145,133,132,129,145,0,149],
[171,138,177,153,160,162,120,159,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,189,180,165,156,148,174,132,173],
[154,0,169,168,173,153,163,169,153,156],
[152,172,0,176,168,159,153,174,171,192],
[161,173,165,0,177,151,141,175,156,147],
[176,168,173,164,0,155,144,170,138,171],
[185,188,182,190,186,0,173,188,167,196],
[193,178,188,200,197,168,0,192,173,194],
[167,172,167,166,171,153,149,0,169,172],
[209,188,170,185,203,174,168,172,0,189],
[168,185,149,194,170,145,147,169,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,196,162,177,189,172,176,192,168],
[166,0,180,173,185,175,175,171,187,166],
[145,161,0,164,173,180,167,164,185,177],
[179,168,177,0,177,179,164,174,196,175],
[164,156,168,164,0,173,157,162,169,165],
[152,166,161,162,168,0,148,171,181,170],
[169,166,174,177,184,193,0,183,189,187],
[165,170,177,167,179,170,158,0,184,173],
[149,154,156,145,172,160,152,157,0,150],
[173,175,164,166,176,171,154,168,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,183,183,174,181,169,183,181,188],
[159,0,157,165,166,153,153,166,165,171],
[158,184,0,179,162,178,170,183,171,173],
[158,176,162,0,161,166,177,176,164,168],
[167,175,179,180,0,169,168,175,166,184],
[160,188,163,175,172,0,158,178,163,178],
[172,188,171,164,173,183,0,170,168,192],
[158,175,158,165,166,163,171,0,171,181],
[160,176,170,177,175,178,173,170,0,192],
[153,170,168,173,157,163,149,160,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,166,174,167,181,167,166,160,170],
[189,0,177,163,168,176,177,171,168,181],
[175,164,0,167,180,183,186,188,179,183],
[167,178,174,0,170,183,180,180,174,184],
[174,173,161,171,0,178,175,171,177,180],
[160,165,158,158,163,0,171,163,165,167],
[174,164,155,161,166,170,0,174,169,174],
[175,170,153,161,170,178,167,0,170,181],
[181,173,162,167,164,176,172,171,0,178],
[171,160,158,157,161,174,167,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,143,156,163,155,160,157,183,158],
[159,0,152,168,166,156,151,163,164,166],
[198,189,0,165,181,176,173,178,203,171],
[185,173,176,0,187,178,192,160,181,184],
[178,175,160,154,0,183,179,165,185,176],
[186,185,165,163,158,0,166,175,190,182],
[181,190,168,149,162,175,0,150,163,176],
[184,178,163,181,176,166,191,0,186,185],
[158,177,138,160,156,151,178,155,0,169],
[183,175,170,157,165,159,165,156,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,150,158,158,180,155,165,142,139],
[183,0,142,192,137,171,163,208,131,159],
[191,199,0,198,160,209,176,183,150,159],
[183,149,143,0,126,177,152,154,148,144],
[183,204,181,215,0,146,175,193,147,161],
[161,170,132,164,195,0,146,159,130,156],
[186,178,165,189,166,195,0,169,180,162],
[176,133,158,187,148,182,172,0,148,145],
[199,210,191,193,194,211,161,193,0,174],
[202,182,182,197,180,185,179,196,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,196,160,192,171,188,200,185,142],
[166,0,177,155,168,145,135,176,149,179],
[145,164,0,161,186,184,143,202,168,173],
[181,186,180,0,194,160,178,195,169,186],
[149,173,155,147,0,173,154,205,171,189],
[170,196,157,181,168,0,167,194,182,179],
[153,206,198,163,187,174,0,216,178,194],
[141,165,139,146,136,147,125,0,142,155],
[156,192,173,172,170,159,163,199,0,174],
[199,162,168,155,152,162,147,186,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,182,170,200,190,208,204,172,186],
[134,0,166,161,166,169,191,183,157,179],
[159,175,0,164,167,176,192,179,143,159],
[171,180,177,0,165,201,183,190,168,172],
[141,175,174,176,0,189,177,176,144,158],
[151,172,165,140,152,0,191,157,136,167],
[133,150,149,158,164,150,0,164,120,152],
[137,158,162,151,165,184,177,0,172,150],
[169,184,198,173,197,205,221,169,0,160],
[155,162,182,169,183,174,189,191,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,170,185,186,177,198,177,223,174],
[147,0,179,175,205,171,169,153,202,195],
[171,162,0,173,179,187,194,184,182,199],
[156,166,168,0,192,172,171,167,204,169],
[155,136,162,149,0,160,187,151,196,159],
[164,170,154,169,181,0,168,156,183,173],
[143,172,147,170,154,173,0,153,187,183],
[164,188,157,174,190,185,188,0,197,184],
[118,139,159,137,145,158,154,144,0,162],
[167,146,142,172,182,168,158,157,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,143,144,158,183,175,167,159,162],
[177,0,173,155,168,185,184,178,166,191],
[198,168,0,182,190,195,189,183,181,186],
[197,186,159,0,177,183,177,189,189,171],
[183,173,151,164,0,178,182,192,187,165],
[158,156,146,158,163,0,162,162,173,160],
[166,157,152,164,159,179,0,179,179,166],
[174,163,158,152,149,179,162,0,178,165],
[182,175,160,152,154,168,162,163,0,166],
[179,150,155,170,176,181,175,176,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,172,172,179,201,185,196,174],
[158,0,149,159,173,172,170,163,173,157],
[173,192,0,169,176,196,189,175,183,163],
[169,182,172,0,173,172,184,178,192,180],
[169,168,165,168,0,159,184,179,179,157],
[162,169,145,169,182,0,174,154,175,161],
[140,171,152,157,157,167,0,169,166,153],
[156,178,166,163,162,187,172,0,181,180],
[145,168,158,149,162,166,175,160,0,157],
[167,184,178,161,184,180,188,161,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,176,178,168,174,169,173,176,177],
[162,0,165,179,163,175,175,171,174,158],
[165,176,0,185,170,172,167,166,176,178],
[163,162,156,0,159,168,158,165,161,164],
[173,178,171,182,0,164,172,179,176,187],
[167,166,169,173,177,0,170,180,158,173],
[172,166,174,183,169,171,0,176,168,180],
[168,170,175,176,162,161,165,0,167,183],
[165,167,165,180,165,183,173,174,0,174],
[164,183,163,177,154,168,161,158,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,169,172,185,166,172,193,167],
[172,0,179,167,164,175,156,160,186,182],
[174,162,0,180,181,184,164,182,185,174],
[172,174,161,0,168,186,172,171,179,178],
[169,177,160,173,0,168,169,171,186,178],
[156,166,157,155,173,0,160,168,177,159],
[175,185,177,169,172,181,0,171,184,181],
[169,181,159,170,170,173,170,0,183,175],
[148,155,156,162,155,164,157,158,0,169],
[174,159,167,163,163,182,160,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,186,175,161,183,167,173,153,178],
[167,0,166,163,157,185,169,169,174,159],
[155,175,0,163,165,161,172,176,160,167],
[166,178,178,0,161,176,181,157,166,166],
[180,184,176,180,0,173,177,175,162,172],
[158,156,180,165,168,0,157,154,156,150],
[174,172,169,160,164,184,0,165,169,162],
[168,172,165,184,166,187,176,0,172,170],
[188,167,181,175,179,185,172,169,0,158],
[163,182,174,175,169,191,179,171,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,220,281,244,223,226,232,220,166],
[161,0,174,197,205,216,192,163,197,198],
[121,167,0,164,143,188,229,168,104,195],
[60,144,177,0,238,133,179,172,175,138],
[97,136,198,103,0,125,178,121,87,127],
[118,125,153,208,216,0,181,157,156,128],
[115,149,112,162,163,160,0,116,50,144],
[109,178,173,169,220,184,225,0,134,186],
[121,144,237,166,254,185,291,207,0,189],
[175,143,146,203,214,213,197,155,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,186,189,183,167,180,190,190,164],
[133,0,144,151,140,132,157,158,154,134],
[155,197,0,178,160,171,171,166,165,163],
[152,190,163,0,162,158,171,172,179,159],
[158,201,181,179,0,158,182,175,181,171],
[174,209,170,183,183,0,193,202,183,175],
[161,184,170,170,159,148,0,169,170,158],
[151,183,175,169,166,139,172,0,159,155],
[151,187,176,162,160,158,171,182,0,147],
[177,207,178,182,170,166,183,186,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,190,193,139,170,167,187,181,173],
[165,0,210,186,155,203,134,156,171,178],
[151,131,0,157,154,158,123,119,155,147],
[148,155,184,0,149,188,152,180,154,149],
[202,186,187,192,0,194,158,170,180,182],
[171,138,183,153,147,0,123,151,156,144],
[174,207,218,189,183,218,0,166,182,174],
[154,185,222,161,171,190,175,0,167,145],
[160,170,186,187,161,185,159,174,0,164],
[168,163,194,192,159,197,167,196,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,162,185,187,171,173,165,162],
[163,0,183,152,176,164,176,159,170,165],
[167,158,0,162,159,163,156,162,157,153],
[179,189,179,0,191,189,173,180,170,166],
[156,165,182,150,0,172,158,157,155,164],
[154,177,178,152,169,0,182,158,166,150],
[170,165,185,168,183,159,0,159,174,160],
[168,182,179,161,184,183,182,0,177,168],
[176,171,184,171,186,175,167,164,0,179],
[179,176,188,175,177,191,181,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,187,207,200,158,183,155,169],
[158,0,170,154,188,162,151,193,162,146],
[173,171,0,158,210,198,176,196,153,191],
[154,187,183,0,205,194,170,199,167,169],
[134,153,131,136,0,149,134,174,141,148],
[141,179,143,147,192,0,147,176,149,148],
[183,190,165,171,207,194,0,205,161,175],
[158,148,145,142,167,165,136,0,143,143],
[186,179,188,174,200,192,180,198,0,168],
[172,195,150,172,193,193,166,198,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,163,194,176,172,172,177,202,153],
[175,0,170,193,181,171,185,199,196,170],
[178,171,0,180,182,188,159,211,209,177],
[147,148,161,0,144,188,142,164,182,139],
[165,160,159,197,0,175,156,158,175,154],
[169,170,153,153,166,0,135,144,169,148],
[169,156,182,199,185,206,0,198,183,152],
[164,142,130,177,183,197,143,0,195,144],
[139,145,132,159,166,172,158,146,0,154],
[188,171,164,202,187,193,189,197,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,185,168,166,184,183,182,175],
[163,0,147,170,168,157,150,203,162,187],
[183,194,0,172,166,166,170,216,191,181],
[156,171,169,0,177,181,163,187,163,165],
[173,173,175,164,0,178,167,193,171,181],
[175,184,175,160,163,0,170,196,176,175],
[157,191,171,178,174,171,0,192,168,185],
[158,138,125,154,148,145,149,0,160,151],
[159,179,150,178,170,165,173,181,0,181],
[166,154,160,176,160,166,156,190,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,171,188,168,179,168,165,175,170],
[183,0,181,180,172,172,193,184,169,191],
[170,160,0,176,169,166,187,179,171,159],
[153,161,165,0,165,158,165,159,183,148],
[173,169,172,176,0,170,189,170,182,154],
[162,169,175,183,171,0,190,172,178,167],
[173,148,154,176,152,151,0,157,175,162],
[176,157,162,182,171,169,184,0,176,169],
[166,172,170,158,159,163,166,165,0,167],
[171,150,182,193,187,174,179,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,167,161,156,171,176,170,155],
[174,0,172,180,168,163,175,183,169,167],
[173,169,0,154,185,171,169,201,171,166],
[174,161,187,0,184,187,178,180,194,172],
[180,173,156,157,0,172,168,181,174,150],
[185,178,170,154,169,0,171,176,166,164],
[170,166,172,163,173,170,0,172,187,150],
[165,158,140,161,160,165,169,0,166,159],
[171,172,170,147,167,175,154,175,0,178],
[186,174,175,169,191,177,191,182,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,183,179,155,158,165,170,176],
[159,0,176,167,167,157,168,167,166,171],
[174,165,0,168,168,168,173,158,169,180],
[158,174,173,0,159,155,153,159,173,177],
[162,174,173,182,0,163,157,180,159,178],
[186,184,173,186,178,0,174,170,164,179],
[183,173,168,188,184,167,0,165,182,177],
[176,174,183,182,161,171,176,0,181,185],
[171,175,172,168,182,177,159,160,0,169],
[165,170,161,164,163,162,164,156,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,174,187,174,179,169,173,173],
[173,0,172,172,182,152,177,171,172,171],
[165,169,0,160,174,155,177,176,168,178],
[167,169,181,0,182,170,179,182,176,163],
[154,159,167,159,0,157,161,157,158,172],
[167,189,186,171,184,0,184,184,179,179],
[162,164,164,162,180,157,0,166,166,176],
[172,170,165,159,184,157,175,0,164,170],
[168,169,173,165,183,162,175,177,0,176],
[168,170,163,178,169,162,165,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,172,148,142,184,207,154,177,179],
[180,0,152,187,190,152,178,184,158,198],
[169,189,0,175,183,212,226,198,167,222],
[193,154,166,0,164,160,189,193,159,186],
[199,151,158,177,0,189,207,176,165,216],
[157,189,129,181,152,0,179,169,159,199],
[134,163,115,152,134,162,0,186,138,157],
[187,157,143,148,165,172,155,0,165,152],
[164,183,174,182,176,182,203,176,0,194],
[162,143,119,155,125,142,184,189,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,181,177,163,160,156,197,199,199],
[138,0,134,166,147,144,136,142,173,136],
[160,207,0,148,141,156,154,217,143,163],
[164,175,193,0,145,155,165,180,173,191],
[178,194,200,196,0,167,176,195,163,189],
[181,197,185,186,174,0,144,205,201,189],
[185,205,187,176,165,197,0,189,205,195],
[144,199,124,161,146,136,152,0,168,171],
[142,168,198,168,178,140,136,173,0,160],
[142,205,178,150,152,152,146,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,124,177,161,159,170,161,168,158],
[159,0,139,171,173,171,176,171,170,152],
[217,202,0,207,187,201,216,158,202,170],
[164,170,134,0,165,127,160,168,174,149],
[180,168,154,176,0,146,156,176,169,170],
[182,170,140,214,195,0,202,177,191,175],
[171,165,125,181,185,139,0,158,154,172],
[180,170,183,173,165,164,183,0,170,141],
[173,171,139,167,172,150,187,171,0,146],
[183,189,171,192,171,166,169,200,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,177,127,154,120,154,133,127,119],
[201,0,179,177,176,159,174,166,174,178],
[164,162,0,161,178,149,153,137,158,164],
[214,164,180,0,183,169,175,161,167,144],
[187,165,163,158,0,146,181,146,159,171],
[221,182,192,172,195,0,175,164,169,170],
[187,167,188,166,160,166,0,141,164,174],
[208,175,204,180,195,177,200,0,167,154],
[214,167,183,174,182,172,177,174,0,171],
[222,163,177,197,170,171,167,187,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,201,168,211,182,188,188,197,190],
[153,0,165,158,150,173,159,179,180,160],
[140,176,0,179,185,182,160,151,181,173],
[173,183,162,0,169,168,138,174,168,179],
[130,191,156,172,0,180,145,157,173,166],
[159,168,159,173,161,0,155,173,190,161],
[153,182,181,203,196,186,0,190,178,189],
[153,162,190,167,184,168,151,0,185,176],
[144,161,160,173,168,151,163,156,0,153],
[151,181,168,162,175,180,152,165,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,160,163,162,184,165,167,164,186],
[179,0,169,178,172,176,166,169,160,159],
[181,172,0,192,177,187,167,176,177,175],
[178,163,149,0,155,186,149,175,147,166],
[179,169,164,186,0,170,177,175,178,174],
[157,165,154,155,171,0,169,167,153,157],
[176,175,174,192,164,172,0,169,179,189],
[174,172,165,166,166,174,172,0,164,179],
[177,181,164,194,163,188,162,177,0,180],
[155,182,166,175,167,184,152,162,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,122,127,136,134,144,132,139,141],
[216,0,159,191,166,205,178,189,186,186],
[219,182,0,193,185,188,178,158,199,199],
[214,150,148,0,156,166,182,152,179,178],
[205,175,156,185,0,168,181,141,179,195],
[207,136,153,175,173,0,158,136,179,185],
[197,163,163,159,160,183,0,156,170,194],
[209,152,183,189,200,205,185,0,207,185],
[202,155,142,162,162,162,171,134,0,158],
[200,155,142,163,146,156,147,156,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,172,173,174,173,172,169,165],
[171,0,182,168,167,163,167,162,170,171],
[152,159,0,155,160,151,156,146,149,154],
[169,173,186,0,172,180,166,176,176,177],
[168,174,181,169,0,169,156,163,159,156],
[167,178,190,161,172,0,157,158,158,174],
[168,174,185,175,185,184,0,170,164,171],
[169,179,195,165,178,183,171,0,172,172],
[172,171,192,165,182,183,177,169,0,171],
[176,170,187,164,185,167,170,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,159,177,232,194,154,185,188],
[177,0,127,185,223,225,204,156,225,210],
[167,214,0,167,190,223,210,225,205,216],
[182,156,174,0,153,222,237,147,204,215],
[164,118,151,188,0,177,186,155,157,137],
[109,116,118,119,164,0,228,134,168,193],
[147,137,131,104,155,113,0,163,178,190],
[187,185,116,194,186,207,178,0,171,173],
[156,116,136,137,184,173,163,170,0,155],
[153,131,125,126,204,148,151,168,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,178,179,185,188,185,180,177,166],
[160,0,188,175,179,184,177,176,186,171],
[163,153,0,162,164,166,175,167,169,157],
[162,166,179,0,173,179,182,172,182,170],
[156,162,177,168,0,183,181,171,165,165],
[153,157,175,162,158,0,181,163,174,160],
[156,164,166,159,160,160,0,154,160,164],
[161,165,174,169,170,178,187,0,171,163],
[164,155,172,159,176,167,181,170,0,163],
[175,170,184,171,176,181,177,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,181,182,207,162,181,198,197,190],
[142,0,155,160,188,135,160,159,165,143],
[160,186,0,171,211,160,202,203,182,167],
[159,181,170,0,185,171,187,189,185,185],
[134,153,130,156,0,130,186,161,178,171],
[179,206,181,170,211,0,190,197,191,194],
[160,181,139,154,155,151,0,165,169,168],
[143,182,138,152,180,144,176,0,173,157],
[144,176,159,156,163,150,172,168,0,154],
[151,198,174,156,170,147,173,184,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,181,191,198,169,161,176,171],
[178,0,189,173,199,194,186,172,168,183],
[168,152,0,177,202,183,169,140,172,171],
[160,168,164,0,182,172,170,135,147,178],
[150,142,139,159,0,168,146,131,159,156],
[143,147,158,169,173,0,156,151,161,160],
[172,155,172,171,195,185,0,159,166,167],
[180,169,201,206,210,190,182,0,196,184],
[165,173,169,194,182,180,175,145,0,198],
[170,158,170,163,185,181,174,157,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,194,170,174,170,195,190,182,170],
[172,0,181,183,176,158,164,181,168,165],
[147,160,0,163,165,158,177,173,173,144],
[171,158,178,0,187,191,196,208,158,166],
[167,165,176,154,0,177,189,187,186,152],
[171,183,183,150,164,0,187,186,180,164],
[146,177,164,145,152,154,0,176,162,184],
[151,160,168,133,154,155,165,0,182,153],
[159,173,168,183,155,161,179,159,0,178],
[171,176,197,175,189,177,157,188,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,158,164,194,181,189,183,190,191],
[165,0,173,167,189,188,196,182,189,179],
[183,168,0,177,200,190,188,194,199,187],
[177,174,164,0,183,185,199,199,180,179],
[147,152,141,158,0,172,162,163,175,159],
[160,153,151,156,169,0,155,176,169,136],
[152,145,153,142,179,186,0,161,186,156],
[158,159,147,142,178,165,180,0,178,158],
[151,152,142,161,166,172,155,163,0,142],
[150,162,154,162,182,205,185,183,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,139,150,151,172,159,166,155],
[176,0,179,161,167,177,175,181,184,172],
[172,162,0,136,170,146,174,173,173,162],
[202,180,205,0,185,160,174,169,186,174],
[191,174,171,156,0,165,189,179,176,183],
[190,164,195,181,176,0,188,171,172,173],
[169,166,167,167,152,153,0,164,163,137],
[182,160,168,172,162,170,177,0,164,163],
[175,157,168,155,165,169,178,177,0,160],
[186,169,179,167,158,168,204,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,189,233,252,213,207,208,191,167],
[135,0,191,228,193,229,156,181,163,204],
[152,150,0,158,234,196,134,195,153,197],
[108,113,183,0,170,176,147,111,131,116],
[89,148,107,171,0,173,89,147,86,172],
[128,112,145,165,168,0,95,155,115,148],
[134,185,207,194,252,246,0,226,205,161],
[133,160,146,230,194,186,115,0,136,148],
[150,178,188,210,255,226,136,205,0,195],
[174,137,144,225,169,193,180,193,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,155,183,159,167,147,169,162],
[169,0,175,132,156,159,171,141,156,174],
[180,166,0,150,181,181,178,154,164,169],
[186,209,191,0,196,176,190,161,196,177],
[158,185,160,145,0,176,167,168,180,156],
[182,182,160,165,165,0,169,146,176,167],
[174,170,163,151,174,172,0,159,171,149],
[194,200,187,180,173,195,182,0,171,168],
[172,185,177,145,161,165,170,170,0,164],
[179,167,172,164,185,174,192,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,158,186,165,195,154,161,168,183],
[165,0,146,193,176,182,173,177,178,181],
[183,195,0,208,172,192,154,190,199,171],
[155,148,133,0,174,176,133,156,184,168],
[176,165,169,167,0,171,159,175,175,158],
[146,159,149,165,170,0,157,147,173,155],
[187,168,187,208,182,184,0,174,213,171],
[180,164,151,185,166,194,167,0,181,176],
[173,163,142,157,166,168,128,160,0,145],
[158,160,170,173,183,186,170,165,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,172,175,175,158,172,173,170],
[176,0,176,195,185,166,191,170,183,182],
[181,165,0,178,170,160,170,175,173,184],
[169,146,163,0,158,157,173,168,162,166],
[166,156,171,183,0,144,163,178,170,172],
[166,175,181,184,197,0,181,188,180,179],
[183,150,171,168,178,160,0,174,145,168],
[169,171,166,173,163,153,167,0,167,169],
[168,158,168,179,171,161,196,174,0,171],
[171,159,157,175,169,162,173,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,166,195,196,197,151,189,192,177],
[169,0,170,192,187,198,169,174,182,179],
[175,171,0,191,178,178,156,161,179,164],
[146,149,150,0,166,173,139,159,175,152],
[145,154,163,175,0,169,145,159,179,166],
[144,143,163,168,172,0,137,158,177,147],
[190,172,185,202,196,204,0,211,207,168],
[152,167,180,182,182,183,130,0,177,161],
[149,159,162,166,162,164,134,164,0,142],
[164,162,177,189,175,194,173,180,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,174,175,170,178,193,172,173],
[161,0,171,173,181,169,181,181,173,160],
[173,170,0,180,182,173,183,186,185,180],
[167,168,161,0,165,166,163,173,159,165],
[166,160,159,176,0,170,166,186,170,156],
[171,172,168,175,171,0,161,182,178,172],
[163,160,158,178,175,180,0,182,171,165],
[148,160,155,168,155,159,159,0,155,150],
[169,168,156,182,171,163,170,186,0,159],
[168,181,161,176,185,169,176,191,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,178,195,145,132,178,142,194],
[163,0,164,171,180,155,131,155,136,162],
[168,177,0,176,189,156,176,171,161,184],
[163,170,165,0,196,170,177,157,153,192],
[146,161,152,145,0,164,154,182,141,157],
[196,186,185,171,177,0,166,176,141,209],
[209,210,165,164,187,175,0,202,171,189],
[163,186,170,184,159,165,139,0,157,178],
[199,205,180,188,200,200,170,184,0,213],
[147,179,157,149,184,132,152,163,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,142,181,161,161,158,192,162,165],
[182,0,182,182,158,143,168,188,175,202],
[199,159,0,178,172,192,177,197,177,180],
[160,159,163,0,149,150,156,174,150,154],
[180,183,169,192,0,185,168,202,184,190],
[180,198,149,191,156,0,171,194,179,175],
[183,173,164,185,173,170,0,179,162,185],
[149,153,144,167,139,147,162,0,136,156],
[179,166,164,191,157,162,179,205,0,198],
[176,139,161,187,151,166,156,185,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,161,171,175,179,162,168,161],
[178,0,164,141,188,156,165,171,165,165],
[177,177,0,154,180,162,170,153,171,177],
[180,200,187,0,201,193,175,161,175,177],
[170,153,161,140,0,151,161,157,148,151],
[166,185,179,148,190,0,180,171,177,173],
[162,176,171,166,180,161,0,176,179,163],
[179,170,188,180,184,170,165,0,185,175],
[173,176,170,166,193,164,162,156,0,167],
[180,176,164,164,190,168,178,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,166,173,168,156,184,179,170],
[170,0,173,161,162,170,162,170,186,159],
[184,168,0,168,172,164,163,192,171,182],
[175,180,173,0,173,168,159,183,182,174],
[168,179,169,168,0,171,172,162,164,178],
[173,171,177,173,170,0,169,179,174,175],
[185,179,178,182,169,172,0,192,181,186],
[157,171,149,158,179,162,149,0,170,172],
[162,155,170,159,177,167,160,171,0,164],
[171,182,159,167,163,166,155,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,151,159,141,158,180,163,187,142],
[185,0,154,166,182,181,177,213,175,195],
[190,187,0,161,170,167,177,202,130,175],
[182,175,180,0,181,173,185,170,169,194],
[200,159,171,160,0,163,180,230,197,213],
[183,160,174,168,178,0,170,192,166,205],
[161,164,164,156,161,171,0,183,135,155],
[178,128,139,171,111,149,158,0,173,175],
[154,166,211,172,144,175,206,168,0,173],
[199,146,166,147,128,136,186,166,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,163,166,177,175,171,173,173],
[178,0,170,174,175,172,178,184,184,176],
[176,171,0,186,164,190,197,180,181,179],
[178,167,155,0,163,178,177,172,167,175],
[175,166,177,178,0,190,176,170,167,173],
[164,169,151,163,151,0,168,159,150,154],
[166,163,144,164,165,173,0,165,147,158],
[170,157,161,169,171,182,176,0,179,162],
[168,157,160,174,174,191,194,162,0,173],
[168,165,162,166,168,187,183,179,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,159,164,162,165,168,167,166],
[168,0,171,161,162,165,175,162,172,166],
[175,170,0,151,181,173,178,169,173,171],
[182,180,190,0,165,165,169,178,177,176],
[177,179,160,176,0,163,174,164,177,168],
[179,176,168,176,178,0,188,167,170,184],
[176,166,163,172,167,153,0,160,159,166],
[173,179,172,163,177,174,181,0,161,188],
[174,169,168,164,164,171,182,180,0,173],
[175,175,170,165,173,157,175,153,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,173,161,172,175,181,176,186],
[178,0,180,183,172,179,167,192,196,188],
[170,161,0,168,166,168,164,167,165,180],
[168,158,173,0,167,167,176,180,175,182],
[180,169,175,174,0,182,188,186,193,185],
[169,162,173,174,159,0,168,182,180,189],
[166,174,177,165,153,173,0,179,179,177],
[160,149,174,161,155,159,162,0,172,177],
[165,145,176,166,148,161,162,169,0,177],
[155,153,161,159,156,152,164,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,175,183,152,174,179,185,173],
[161,0,171,185,184,170,176,169,165,160],
[164,170,0,179,177,170,171,175,177,168],
[166,156,162,0,171,164,158,165,165,157],
[158,157,164,170,0,162,158,166,156,160],
[189,171,171,177,179,0,176,182,169,159],
[167,165,170,183,183,165,0,158,175,164],
[162,172,166,176,175,159,183,0,172,169],
[156,176,164,176,185,172,166,169,0,163],
[168,181,173,184,181,182,177,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,155,189,176,154,130,183,141,122],
[201,0,178,181,158,185,133,149,193,185],
[186,163,0,192,193,208,150,160,174,148],
[152,160,149,0,145,159,100,191,169,181],
[165,183,148,196,0,196,188,163,186,179],
[187,156,133,182,145,0,114,166,140,128],
[211,208,191,241,153,227,0,188,163,162],
[158,192,181,150,178,175,153,0,159,189],
[200,148,167,172,155,201,178,182,0,195],
[219,156,193,160,162,213,179,152,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,190,163,195,206,205,183,176,161],
[112,0,151,116,160,172,181,176,152,166],
[151,190,0,140,170,175,190,168,179,204],
[178,225,201,0,156,207,223,199,210,152],
[146,181,171,185,0,156,194,183,190,137],
[135,169,166,134,185,0,147,201,153,172],
[136,160,151,118,147,194,0,168,153,111],
[158,165,173,142,158,140,173,0,150,165],
[165,189,162,131,151,188,188,191,0,139],
[180,175,137,189,204,169,230,176,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,170,155,169,162,174,153,163],
[177,0,164,168,170,171,169,169,165,172],
[178,177,0,172,157,151,181,181,161,173],
[171,173,169,0,180,166,178,172,173,176],
[186,171,184,161,0,171,156,177,160,168],
[172,170,190,175,170,0,175,187,173,180],
[179,172,160,163,185,166,0,178,162,177],
[167,172,160,169,164,154,163,0,152,172],
[188,176,180,168,181,168,179,189,0,175],
[178,169,168,165,173,161,164,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,182,172,172,163,173,186,166],
[164,0,152,170,159,166,159,148,165,154],
[165,189,0,196,171,182,180,171,178,169],
[159,171,145,0,153,165,170,158,173,147],
[169,182,170,188,0,179,181,173,176,159],
[169,175,159,176,162,0,173,159,172,169],
[178,182,161,171,160,168,0,170,182,173],
[168,193,170,183,168,182,171,0,176,166],
[155,176,163,168,165,169,159,165,0,155],
[175,187,172,194,182,172,168,175,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,200,169,180,173,175,183,184,187],
[178,0,179,182,170,164,163,167,167,169],
[141,162,0,153,161,167,138,152,154,151],
[172,159,188,0,160,177,166,168,166,160],
[161,171,180,181,0,170,154,169,154,161],
[168,177,174,164,171,0,160,169,169,171],
[166,178,203,175,187,181,0,178,187,180],
[158,174,189,173,172,172,163,0,177,175],
[157,174,187,175,187,172,154,164,0,168],
[154,172,190,181,180,170,161,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,159,144,146,135,176,129,167,177],
[204,0,188,164,184,176,196,164,186,207],
[182,153,0,166,155,136,189,167,176,175],
[197,177,175,0,138,167,176,176,158,204],
[195,157,186,203,0,170,210,172,212,205],
[206,165,205,174,171,0,185,170,185,183],
[165,145,152,165,131,156,0,162,163,170],
[212,177,174,165,169,171,179,0,185,199],
[174,155,165,183,129,156,178,156,0,181],
[164,134,166,137,136,158,171,142,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,172,183,168,178,160,172,172,181],
[151,0,164,153,164,155,149,161,159,155],
[169,177,0,172,155,166,163,156,169,166],
[158,188,169,0,148,167,146,144,161,171],
[173,177,186,193,0,164,156,149,162,181],
[163,186,175,174,177,0,178,174,168,178],
[181,192,178,195,185,163,0,186,178,176],
[169,180,185,197,192,167,155,0,182,163],
[169,182,172,180,179,173,163,159,0,163],
[160,186,175,170,160,163,165,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,176,170,170,189,166,158,187,170],
[155,0,155,161,152,162,149,150,159,155],
[165,186,0,172,159,182,156,176,166,156],
[171,180,169,0,178,173,168,170,163,158],
[171,189,182,163,0,165,152,165,159,150],
[152,179,159,168,176,0,160,168,159,145],
[175,192,185,173,189,181,0,172,167,176],
[183,191,165,171,176,173,169,0,159,149],
[154,182,175,178,182,182,174,182,0,163],
[171,186,185,183,191,196,165,192,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,169,160,176,183,189,193,170],
[168,0,151,161,178,172,196,176,201,180],
[172,190,0,170,191,196,200,199,201,181],
[172,180,171,0,163,177,181,186,208,180],
[181,163,150,178,0,175,165,174,196,169],
[165,169,145,164,166,0,186,192,199,173],
[158,145,141,160,176,155,0,174,184,158],
[152,165,142,155,167,149,167,0,179,159],
[148,140,140,133,145,142,157,162,0,144],
[171,161,160,161,172,168,183,182,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,190,181,160,155,183,174,168,166],
[169,0,178,168,167,164,164,176,172,176],
[151,163,0,178,162,168,180,178,162,168],
[160,173,163,0,170,161,167,166,163,159],
[181,174,179,171,0,165,175,175,169,179],
[186,177,173,180,176,0,186,184,169,176],
[158,177,161,174,166,155,0,159,166,167],
[167,165,163,175,166,157,182,0,160,157],
[173,169,179,178,172,172,175,181,0,178],
[175,165,173,182,162,165,174,184,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,176,190,167,185,167,166,176],
[169,0,194,176,186,172,180,159,167,174],
[165,147,0,155,164,152,155,152,158,167],
[165,165,186,0,173,181,165,163,157,166],
[151,155,177,168,0,173,163,152,159,157],
[174,169,189,160,168,0,176,159,171,161],
[156,161,186,176,178,165,0,160,171,169],
[174,182,189,178,189,182,181,0,167,172],
[175,174,183,184,182,170,170,174,0,175],
[165,167,174,175,184,180,172,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,169,168,194,173,164,174,163],
[171,0,185,172,175,162,171,167,165,163],
[161,156,0,163,178,174,155,151,160,167],
[172,169,178,0,172,184,157,171,181,188],
[173,166,163,169,0,168,167,168,168,169],
[147,179,167,157,173,0,169,162,179,166],
[168,170,186,184,174,172,0,187,187,180],
[177,174,190,170,173,179,154,0,178,183],
[167,176,181,160,173,162,154,163,0,163],
[178,178,174,153,172,175,161,158,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,184,174,187,170,173,170,183,180],
[174,0,186,181,182,169,170,173,177,186],
[157,155,0,156,175,156,163,167,171,169],
[167,160,185,0,167,158,166,157,169,166],
[154,159,166,174,0,163,170,159,172,171],
[171,172,185,183,178,0,174,182,179,170],
[168,171,178,175,171,167,0,164,162,174],
[171,168,174,184,182,159,177,0,172,168],
[158,164,170,172,169,162,179,169,0,170],
[161,155,172,175,170,171,167,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,147,223,240,198,174,222,185,167],
[154,0,140,186,168,196,210,172,162,156],
[194,201,0,227,204,184,160,182,150,171],
[118,155,114,0,135,160,146,165,147,128],
[101,173,137,206,0,170,166,195,163,150],
[143,145,157,181,171,0,168,181,128,114],
[167,131,181,195,175,173,0,168,149,129],
[119,169,159,176,146,160,173,0,164,142],
[156,179,191,194,178,213,192,177,0,178],
[174,185,170,213,191,227,212,199,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,174,159,156,153,163,155,177,174],
[167,0,167,172,172,156,155,160,173,164],
[167,174,0,182,187,159,175,145,203,168],
[182,169,159,0,178,161,162,142,169,180],
[185,169,154,163,0,167,173,151,176,143],
[188,185,182,180,174,0,184,153,189,195],
[178,186,166,179,168,157,0,157,195,153],
[186,181,196,199,190,188,184,0,196,167],
[164,168,138,172,165,152,146,145,0,150],
[167,177,173,161,198,146,188,174,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,157,168,149,163,152,152,170,156],
[188,0,181,173,162,172,160,167,180,168],
[184,160,0,184,163,163,151,171,166,169],
[173,168,157,0,152,165,139,155,163,158],
[192,179,178,189,0,168,175,180,174,172],
[178,169,178,176,173,0,160,176,174,170],
[189,181,190,202,166,181,0,162,177,170],
[189,174,170,186,161,165,179,0,172,178],
[171,161,175,178,167,167,164,169,0,182],
[185,173,172,183,169,171,171,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,106,69,114,75,159,150,98,144],
[216,0,138,141,149,127,192,120,133,151],
[235,203,0,113,102,147,191,128,134,127],
[272,200,228,0,177,169,200,269,175,169],
[227,192,239,164,0,200,218,213,166,199],
[266,214,194,172,141,0,169,234,157,120],
[182,149,150,141,123,172,0,132,140,134],
[191,221,213,72,128,107,209,0,145,119],
[243,208,207,166,175,184,201,196,0,115],
[197,190,214,172,142,221,207,222,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,182,171,167,167,162,171,166,170],
[161,0,184,172,154,162,166,163,159,151],
[159,157,0,154,155,147,153,145,163,140],
[170,169,187,0,184,181,165,167,182,161],
[174,187,186,157,0,181,166,171,175,179],
[174,179,194,160,160,0,160,161,179,169],
[179,175,188,176,175,181,0,156,183,182],
[170,178,196,174,170,180,185,0,169,183],
[175,182,178,159,166,162,158,172,0,154],
[171,190,201,180,162,172,159,158,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,178,172,183,189,169,175,180,176],
[149,0,167,159,165,159,141,147,154,156],
[163,174,0,163,173,155,166,171,168,161],
[169,182,178,0,182,170,165,173,170,175],
[158,176,168,159,0,160,153,159,164,160],
[152,182,186,171,181,0,161,174,166,165],
[172,200,175,176,188,180,0,187,167,178],
[166,194,170,168,182,167,154,0,159,173],
[161,187,173,171,177,175,174,182,0,171],
[165,185,180,166,181,176,163,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,154,138,167,147,174,167,178,189],
[173,0,158,165,185,148,177,182,170,208],
[187,183,0,166,188,197,190,195,176,170],
[203,176,175,0,194,165,192,184,175,190],
[174,156,153,147,0,144,171,169,184,166],
[194,193,144,176,197,0,187,176,207,171],
[167,164,151,149,170,154,0,162,169,185],
[174,159,146,157,172,165,179,0,181,179],
[163,171,165,166,157,134,172,160,0,176],
[152,133,171,151,175,170,156,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,159,155,158,159,148,151,140],
[166,0,157,155,162,134,159,152,149,146],
[160,184,0,160,181,148,180,150,137,147],
[182,186,181,0,155,157,171,152,158,148],
[186,179,160,186,0,166,159,152,166,134],
[183,207,193,184,175,0,182,166,164,158],
[182,182,161,170,182,159,0,159,166,152],
[193,189,191,189,189,175,182,0,194,168],
[190,192,204,183,175,177,175,147,0,181],
[201,195,194,193,207,183,189,173,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,183,177,151,175,177,176,158,155],
[182,0,200,193,177,165,218,188,192,200],
[158,141,0,156,144,131,182,148,119,162],
[164,148,185,0,151,159,190,177,161,141],
[190,164,197,190,0,162,208,182,163,173],
[166,176,210,182,179,0,182,200,158,179],
[164,123,159,151,133,159,0,175,146,146],
[165,153,193,164,159,141,166,0,154,163],
[183,149,222,180,178,183,195,187,0,165],
[186,141,179,200,168,162,195,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,148,165,171,169,134,132,168,169],
[159,0,174,178,155,155,173,147,130,167],
[193,167,0,163,167,157,142,143,145,153],
[176,163,178,0,177,154,152,155,137,171],
[170,186,174,164,0,174,149,157,161,206],
[172,186,184,187,167,0,162,169,161,174],
[207,168,199,189,192,179,0,176,202,176],
[209,194,198,186,184,172,165,0,180,189],
[173,211,196,204,180,180,139,161,0,185],
[172,174,188,170,135,167,165,152,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,159,160,180,180,178,173,172,177],
[166,0,161,163,165,184,179,172,166,176],
[182,180,0,158,168,170,185,173,175,176],
[181,178,183,0,182,171,170,174,172,185],
[161,176,173,159,0,169,176,189,166,188],
[161,157,171,170,172,0,167,170,165,184],
[163,162,156,171,165,174,0,174,178,175],
[168,169,168,167,152,171,167,0,161,170],
[169,175,166,169,175,176,163,180,0,183],
[164,165,165,156,153,157,166,171,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,147,153,175,144,167,152,168],
[161,0,162,128,108,142,135,137,109,149],
[167,179,0,171,179,169,174,185,170,188],
[194,213,170,0,180,185,154,189,192,197],
[188,233,162,161,0,177,189,184,186,184],
[166,199,172,156,164,0,138,176,165,165],
[197,206,167,187,152,203,0,187,177,199],
[174,204,156,152,157,165,154,0,148,191],
[189,232,171,149,155,176,164,193,0,184],
[173,192,153,144,157,176,142,150,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,167,181,167,136,180,146,146,132],
[192,0,172,197,175,165,194,175,159,165],
[174,169,0,197,177,145,175,163,154,169],
[160,144,144,0,189,160,173,152,132,152],
[174,166,164,152,0,151,173,148,152,156],
[205,176,196,181,190,0,177,174,172,148],
[161,147,166,168,168,164,0,153,142,157],
[195,166,178,189,193,167,188,0,173,174],
[195,182,187,209,189,169,199,168,0,164],
[209,176,172,189,185,193,184,167,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,159,160,147,163,179,166,172,180],
[175,0,166,159,164,180,172,166,158,160],
[182,175,0,174,178,168,178,185,176,190],
[181,182,167,0,180,162,185,181,176,171],
[194,177,163,161,0,166,184,162,172,177],
[178,161,173,179,175,0,185,175,165,173],
[162,169,163,156,157,156,0,163,149,170],
[175,175,156,160,179,166,178,0,165,188],
[169,183,165,165,169,176,192,176,0,173],
[161,181,151,170,164,168,171,153,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,172,162,171,183,204,186,173],
[165,0,183,172,159,177,177,210,185,182],
[170,158,0,151,167,177,167,187,169,165],
[169,169,190,0,171,166,179,177,182,161],
[179,182,174,170,0,173,188,183,181,164],
[170,164,164,175,168,0,186,203,187,180],
[158,164,174,162,153,155,0,171,170,157],
[137,131,154,164,158,138,170,0,155,149],
[155,156,172,159,160,154,171,186,0,166],
[168,159,176,180,177,161,184,192,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,153,137,149,135,172,114,166,145],
[185,0,164,160,176,152,183,185,210,183],
[188,177,0,182,163,136,158,172,205,194],
[204,181,159,0,174,185,200,190,229,203],
[192,165,178,167,0,104,209,211,212,259],
[206,189,205,156,237,0,222,172,190,205],
[169,158,183,141,132,119,0,149,165,174],
[227,156,169,151,130,169,192,0,190,168],
[175,131,136,112,129,151,176,151,0,201],
[196,158,147,138,82,136,167,173,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,173,164,165,164,169,185,182,152],
[153,0,159,151,148,132,162,167,153,159],
[168,182,0,163,168,165,156,168,159,164],
[177,190,178,0,162,171,169,165,162,174],
[176,193,173,179,0,160,162,179,173,170],
[177,209,176,170,181,0,177,189,176,170],
[172,179,185,172,179,164,0,165,180,158],
[156,174,173,176,162,152,176,0,170,159],
[159,188,182,179,168,165,161,171,0,160],
[189,182,177,167,171,171,183,182,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,162,160,171,173,197,157,160],
[176,0,153,140,141,141,155,171,143,134],
[165,188,0,161,149,161,167,174,173,156],
[179,201,180,0,168,182,177,186,172,166],
[181,200,192,173,0,187,173,185,168,185],
[170,200,180,159,154,0,164,161,177,175],
[168,186,174,164,168,177,0,170,168,172],
[144,170,167,155,156,180,171,0,163,172],
[184,198,168,169,173,164,173,178,0,163],
[181,207,185,175,156,166,169,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,174,200,196,140,196,184,183,164],
[153,0,165,149,181,118,136,165,132,143],
[167,176,0,184,189,135,193,171,157,174],
[141,192,157,0,164,125,193,162,171,145],
[145,160,152,177,0,134,155,158,146,154],
[201,223,206,216,207,0,203,208,167,185],
[145,205,148,148,186,138,0,147,135,151],
[157,176,170,179,183,133,194,0,161,160],
[158,209,184,170,195,174,206,180,0,183],
[177,198,167,196,187,156,190,181,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,167,148,147,153,161,151,165,124],
[205,0,210,177,170,182,174,208,159,173],
[174,131,0,151,177,156,172,132,154,159],
[193,164,190,0,192,194,180,166,162,165],
[194,171,164,149,0,151,167,180,183,182],
[188,159,185,147,190,0,155,180,163,172],
[180,167,169,161,174,186,0,170,158,176],
[190,133,209,175,161,161,171,0,178,151],
[176,182,187,179,158,178,183,163,0,176],
[217,168,182,176,159,169,165,190,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,193,189,157,174,175,183,187,174],
[164,0,183,173,154,162,171,167,181,162],
[148,158,0,168,150,171,150,162,171,139],
[152,168,173,0,151,157,152,157,176,148],
[184,187,191,190,0,168,184,184,192,172],
[167,179,170,184,173,0,173,166,193,163],
[166,170,191,189,157,168,0,168,172,171],
[158,174,179,184,157,175,173,0,188,171],
[154,160,170,165,149,148,169,153,0,160],
[167,179,202,193,169,178,170,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,184,174,176,184,177,169,166],
[159,0,165,182,166,176,158,169,168,157],
[174,176,0,185,174,186,171,188,176,170],
[157,159,156,0,150,153,164,170,153,156],
[167,175,167,191,0,162,187,185,170,179],
[165,165,155,188,179,0,179,195,161,179],
[157,183,170,177,154,162,0,170,167,156],
[164,172,153,171,156,146,171,0,163,149],
[172,173,165,188,171,180,174,178,0,163],
[175,184,171,185,162,162,185,192,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,156,164,156,170,177,158,167,172],
[157,0,157,149,172,154,168,154,170,152],
[185,184,0,177,162,166,175,169,160,167],
[177,192,164,0,174,161,188,186,185,175],
[185,169,179,167,0,185,195,165,166,161],
[171,187,175,180,156,0,181,172,169,167],
[164,173,166,153,146,160,0,159,160,171],
[183,187,172,155,176,169,182,0,179,191],
[174,171,181,156,175,172,181,162,0,170],
[169,189,174,166,180,174,170,150,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,194,175,164,198,177,178,191],
[175,0,185,186,175,182,196,191,203,169],
[164,156,0,161,170,158,180,179,184,158],
[147,155,180,0,157,147,174,170,156,157],
[166,166,171,184,0,171,188,177,189,172],
[177,159,183,194,170,0,189,176,196,147],
[143,145,161,167,153,152,0,178,189,161],
[164,150,162,171,164,165,163,0,173,155],
[163,138,157,185,152,145,152,168,0,144],
[150,172,183,184,169,194,180,186,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,177,176,184,189,172,191,174,162],
[149,0,164,162,180,170,167,169,160,168],
[164,177,0,180,183,183,175,175,192,176],
[165,179,161,0,175,168,169,179,178,155],
[157,161,158,166,0,174,168,179,160,167],
[152,171,158,173,167,0,150,178,158,155],
[169,174,166,172,173,191,0,169,174,156],
[150,172,166,162,162,163,172,0,166,157],
[167,181,149,163,181,183,167,175,0,166],
[179,173,165,186,174,186,185,184,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,173,182,169,163,157,182,166,183],
[155,0,164,167,164,174,161,180,165,172],
[168,177,0,158,170,167,175,176,159,166],
[159,174,183,0,165,161,162,167,175,172],
[172,177,171,176,0,173,166,185,163,183],
[178,167,174,180,168,0,165,159,169,182],
[184,180,166,179,175,176,0,179,179,185],
[159,161,165,174,156,182,162,0,172,168],
[175,176,182,166,178,172,162,169,0,179],
[158,169,175,169,158,159,156,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,186,187,160,177,156,177,163,157],
[182,0,191,183,177,188,172,181,179,169],
[155,150,0,176,152,170,155,169,153,158],
[154,158,165,0,148,156,154,163,155,162],
[181,164,189,193,0,190,170,172,164,170],
[164,153,171,185,151,0,152,163,160,162],
[185,169,186,187,171,189,0,182,165,174],
[164,160,172,178,169,178,159,0,164,150],
[178,162,188,186,177,181,176,177,0,170],
[184,172,183,179,171,179,167,191,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,188,180,168,179,163,128,171,197],
[200,0,153,185,157,195,185,125,208,164],
[153,188,0,157,165,171,165,155,200,186],
[161,156,184,0,147,169,166,148,195,158],
[173,184,176,194,0,180,151,196,199,182],
[162,146,170,172,161,0,130,164,185,181],
[178,156,176,175,190,211,0,165,220,178],
[213,216,186,193,145,177,176,0,220,188],
[170,133,141,146,142,156,121,121,0,141],
[144,177,155,183,159,160,163,153,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,195,148,158,156,163,174,169],
[176,0,155,165,153,159,158,152,207,167],
[173,186,0,187,171,140,166,204,191,185],
[146,176,154,0,153,148,159,157,157,161],
[193,188,170,188,0,188,200,196,180,169],
[183,182,201,193,153,0,186,199,186,168],
[185,183,175,182,141,155,0,179,187,162],
[178,189,137,184,145,142,162,0,197,143],
[167,134,150,184,161,155,154,144,0,153],
[172,174,156,180,172,173,179,198,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,176,160,148,192,135,161,147,154],
[204,0,183,159,182,193,164,183,163,189],
[165,158,0,139,167,154,143,180,156,161],
[181,182,202,0,188,176,164,239,151,175],
[193,159,174,153,0,163,142,151,143,156],
[149,148,187,165,178,0,152,180,147,146],
[206,177,198,177,199,189,0,213,181,160],
[180,158,161,102,190,161,128,0,138,117],
[194,178,185,190,198,194,160,203,0,174],
[187,152,180,166,185,195,181,224,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,156,166,157,151,171,163,165,164],
[192,0,185,166,164,161,180,163,179,173],
[185,156,0,159,161,172,178,171,166,170],
[175,175,182,0,163,183,171,182,171,175],
[184,177,180,178,0,169,169,176,173,162],
[190,180,169,158,172,0,171,185,177,181],
[170,161,163,170,172,170,0,173,172,166],
[178,178,170,159,165,156,168,0,156,176],
[176,162,175,170,168,164,169,185,0,180],
[177,168,171,166,179,160,175,165,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,175,164,146,159,167,157,165,163],
[159,0,161,148,162,155,162,148,141,152],
[166,180,0,147,147,159,152,167,150,166],
[177,193,194,0,167,188,181,179,177,198],
[195,179,194,174,0,175,184,168,178,177],
[182,186,182,153,166,0,164,156,157,157],
[174,179,189,160,157,177,0,178,162,177],
[184,193,174,162,173,185,163,0,167,179],
[176,200,191,164,163,184,179,174,0,174],
[178,189,175,143,164,184,164,162,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,161,152,174,150,173,170,179,167],
[187,0,190,166,190,177,176,182,198,186],
[180,151,0,154,199,180,183,176,192,177],
[189,175,187,0,174,168,180,176,181,163],
[167,151,142,167,0,155,172,163,172,163],
[191,164,161,173,186,0,199,159,201,182],
[168,165,158,161,169,142,0,169,164,172],
[171,159,165,165,178,182,172,0,185,182],
[162,143,149,160,169,140,177,156,0,157],
[174,155,164,178,178,159,169,159,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,173,174,190,184,178,157,169],
[164,0,171,150,171,174,173,163,160,153],
[174,170,0,154,184,176,176,176,156,169],
[168,191,187,0,185,192,185,182,178,166],
[167,170,157,156,0,177,178,169,165,160],
[151,167,165,149,164,0,154,158,142,145],
[157,168,165,156,163,187,0,173,156,154],
[163,178,165,159,172,183,168,0,162,167],
[184,181,185,163,176,199,185,179,0,177],
[172,188,172,175,181,196,187,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,187,240,148,163,242,193,197,203],
[170,0,197,200,149,157,200,188,200,189],
[154,144,0,206,147,184,195,166,176,175],
[101,141,135,0,141,127,150,132,153,156],
[193,192,194,200,0,174,261,174,161,186],
[178,184,157,214,167,0,254,165,194,195],
[99,141,146,191,80,87,0,105,127,130],
[148,153,175,209,167,176,236,0,211,191],
[144,141,165,188,180,147,214,130,0,164],
[138,152,166,185,155,146,211,150,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,157,161,154,170,161,175,177,169],
[172,0,165,172,163,170,191,175,173,167],
[184,176,0,164,172,177,178,188,179,173],
[180,169,177,0,189,174,167,186,179,173],
[187,178,169,152,0,173,177,175,180,174],
[171,171,164,167,168,0,175,176,174,175],
[180,150,163,174,164,166,0,167,174,165],
[166,166,153,155,166,165,174,0,166,165],
[164,168,162,162,161,167,167,175,0,169],
[172,174,168,168,167,166,176,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,188,156,168,168,158,170,155,182],
[175,0,165,162,168,187,161,168,180,179],
[153,176,0,179,158,180,184,177,167,161],
[185,179,162,0,157,194,179,179,181,162],
[173,173,183,184,0,194,171,186,167,183],
[173,154,161,147,147,0,160,169,157,170],
[183,180,157,162,170,181,0,181,164,176],
[171,173,164,162,155,172,160,0,172,151],
[186,161,174,160,174,184,177,169,0,165],
[159,162,180,179,158,171,165,190,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,190,146,178,177,214,170,197,192],
[186,0,172,179,179,209,188,176,175,143],
[151,169,0,126,187,174,160,166,141,155],
[195,162,215,0,173,221,216,190,164,202],
[163,162,154,168,0,152,157,128,143,178],
[164,132,167,120,189,0,171,186,158,156],
[127,153,181,125,184,170,0,164,185,155],
[171,165,175,151,213,155,177,0,188,190],
[144,166,200,177,198,183,156,153,0,165],
[149,198,186,139,163,185,186,151,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,179,174,161,175,194,175,185],
[158,0,166,182,160,171,175,175,177,179],
[171,175,0,167,167,162,183,184,168,192],
[162,159,174,0,154,152,173,169,162,163],
[167,181,174,187,0,157,173,185,176,196],
[180,170,179,189,184,0,195,196,174,190],
[166,166,158,168,168,146,0,162,142,165],
[147,166,157,172,156,145,179,0,159,171],
[166,164,173,179,165,167,199,182,0,189],
[156,162,149,178,145,151,176,170,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,173,158,139,164,160,152,164,131],
[183,0,145,155,166,175,135,166,152,139],
[168,196,0,201,148,189,157,190,181,136],
[183,186,140,0,172,159,140,169,132,144],
[202,175,193,169,0,173,161,191,174,187],
[177,166,152,182,168,0,160,176,141,124],
[181,206,184,201,180,181,0,209,170,140],
[189,175,151,172,150,165,132,0,144,132],
[177,189,160,209,167,200,171,197,0,142],
[210,202,205,197,154,217,201,209,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,173,174,164,177,183,156,175],
[167,0,182,165,162,157,175,164,162,161],
[172,159,0,175,164,176,180,188,168,168],
[168,176,166,0,160,166,174,175,160,166],
[167,179,177,181,0,174,179,194,176,173],
[177,184,165,175,167,0,171,171,162,163],
[164,166,161,167,162,170,0,164,162,159],
[158,177,153,166,147,170,177,0,155,165],
[185,179,173,181,165,179,179,186,0,184],
[166,180,173,175,168,178,182,176,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,177,159,213,169,176,201,179,151],
[164,0,215,142,184,153,177,206,170,145],
[164,126,0,154,179,152,192,188,168,156],
[182,199,187,0,185,178,200,201,167,180],
[128,157,162,156,0,164,190,177,151,157],
[172,188,189,163,177,0,196,191,162,174],
[165,164,149,141,151,145,0,182,160,147],
[140,135,153,140,164,150,159,0,152,134],
[162,171,173,174,190,179,181,189,0,144],
[190,196,185,161,184,167,194,207,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,152,182,190,162,195,146,155,178],
[150,0,174,180,186,185,202,193,181,185],
[189,167,0,168,185,149,148,114,156,168],
[159,161,173,0,166,132,199,166,160,153],
[151,155,156,175,0,119,176,144,153,141],
[179,156,192,209,222,0,187,160,187,189],
[146,139,193,142,165,154,0,161,137,151],
[195,148,227,175,197,181,180,0,165,177],
[186,160,185,181,188,154,204,176,0,189],
[163,156,173,188,200,152,190,164,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,157,159,154,165,134,168,173],
[178,0,166,169,164,157,188,156,177,161],
[163,175,0,154,157,153,175,150,157,163],
[184,172,187,0,184,166,177,158,184,162],
[182,177,184,157,0,176,195,171,173,160],
[187,184,188,175,165,0,180,161,187,172],
[176,153,166,164,146,161,0,151,166,144],
[207,185,191,183,170,180,190,0,184,184],
[173,164,184,157,168,154,175,157,0,169],
[168,180,178,179,181,169,197,157,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,156,170,173,162,156,157,177],
[170,0,174,171,179,172,170,164,163,177],
[176,167,0,161,164,173,156,163,154,171],
[185,170,180,0,183,180,173,159,161,167],
[171,162,177,158,0,179,167,169,164,180],
[168,169,168,161,162,0,152,170,155,176],
[179,171,185,168,174,189,0,174,172,188],
[185,177,178,182,172,171,167,0,173,194],
[184,178,187,180,177,186,169,168,0,186],
[164,164,170,174,161,165,153,147,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,175,170,167,158,168,169,175,163],
[183,0,192,166,179,175,171,181,177,179],
[166,149,0,168,166,165,172,182,167,172],
[171,175,173,0,182,168,192,181,190,170],
[174,162,175,159,0,170,171,175,168,177],
[183,166,176,173,171,0,171,191,179,166],
[173,170,169,149,170,170,0,189,181,166],
[172,160,159,160,166,150,152,0,168,150],
[166,164,174,151,173,162,160,173,0,149],
[178,162,169,171,164,175,175,191,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,155,163,174,147,165,145,164,159],
[190,0,177,174,185,170,176,162,171,177],
[186,164,0,179,194,167,167,167,181,175],
[178,167,162,0,172,150,161,145,157,163],
[167,156,147,169,0,151,153,153,162,152],
[194,171,174,191,190,0,186,183,179,170],
[176,165,174,180,188,155,0,151,161,164],
[196,179,174,196,188,158,190,0,182,183],
[177,170,160,184,179,162,180,159,0,165],
[182,164,166,178,189,171,177,158,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,169,161,175,180,169,188,181],
[167,0,149,166,160,170,167,153,175,185],
[175,192,0,169,186,193,189,181,191,197],
[172,175,172,0,159,188,184,168,181,170],
[180,181,155,182,0,199,186,178,182,196],
[166,171,148,153,142,0,160,154,169,176],
[161,174,152,157,155,181,0,169,183,187],
[172,188,160,173,163,187,172,0,190,189],
[153,166,150,160,159,172,158,151,0,166],
[160,156,144,171,145,165,154,152,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,190,206,214,243,188,163,230,226],
[127,0,143,151,137,205,123,116,217,123],
[151,198,0,152,148,214,216,169,212,157],
[135,190,189,0,142,217,207,152,168,187],
[127,204,193,199,0,213,194,180,214,187],
[98,136,127,124,128,0,118,141,149,147],
[153,218,125,134,147,223,0,156,201,186],
[178,225,172,189,161,200,185,0,201,143],
[111,124,129,173,127,192,140,140,0,138],
[115,218,184,154,154,194,155,198,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,172,162,189,161,138,168,157,175],
[156,0,155,144,167,163,139,131,141,147],
[169,186,0,160,173,184,164,164,162,163],
[179,197,181,0,188,175,164,162,162,172],
[152,174,168,153,0,165,170,151,153,158],
[180,178,157,166,176,0,147,172,181,170],
[203,202,177,177,171,194,0,190,167,179],
[173,210,177,179,190,169,151,0,191,183],
[184,200,179,179,188,160,174,150,0,184],
[166,194,178,169,183,171,162,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,187,182,160,167,171,165,187,166],
[172,0,180,193,162,186,157,176,184,174],
[154,161,0,147,150,154,164,157,169,166],
[159,148,194,0,171,162,164,161,194,162],
[181,179,191,170,0,170,180,183,184,168],
[174,155,187,179,171,0,176,153,180,175],
[170,184,177,177,161,165,0,168,174,176],
[176,165,184,180,158,188,173,0,198,175],
[154,157,172,147,157,161,167,143,0,163],
[175,167,175,179,173,166,165,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,189,185,208,181,179,154,180,158],
[172,0,194,187,184,188,184,178,195,162],
[152,147,0,173,180,174,191,150,173,154],
[156,154,168,0,166,139,177,152,173,156],
[133,157,161,175,0,171,176,162,179,147],
[160,153,167,202,170,0,165,164,173,161],
[162,157,150,164,165,176,0,151,176,150],
[187,163,191,189,179,177,190,0,201,190],
[161,146,168,168,162,168,165,140,0,154],
[183,179,187,185,194,180,191,151,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,175,165,199,178,157,169,181,185],
[159,0,163,169,158,170,156,152,162,158],
[166,178,0,167,189,180,172,168,178,157],
[176,172,174,0,187,171,171,174,164,163],
[142,183,152,154,0,166,146,161,168,171],
[163,171,161,170,175,0,163,174,183,159],
[184,185,169,170,195,178,0,164,185,188],
[172,189,173,167,180,167,177,0,173,164],
[160,179,163,177,173,158,156,168,0,169],
[156,183,184,178,170,182,153,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,181,151,173,148,163,155,145],
[185,0,175,178,161,168,165,167,147,162],
[178,166,0,191,164,181,154,162,178,175],
[160,163,150,0,164,181,133,146,148,154],
[190,180,177,177,0,190,142,171,179,158],
[168,173,160,160,151,0,143,155,157,153],
[193,176,187,208,199,198,0,168,166,160],
[178,174,179,195,170,186,173,0,170,177],
[186,194,163,193,162,184,175,171,0,163],
[196,179,166,187,183,188,181,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,168,161,185,156,163,185,197,171],
[157,0,167,179,177,171,163,208,189,182],
[173,174,0,187,165,178,169,217,170,194],
[180,162,154,0,181,156,148,186,149,178],
[156,164,176,160,0,149,171,192,181,149],
[185,170,163,185,192,0,161,205,175,140],
[178,178,172,193,170,180,0,201,161,168],
[156,133,124,155,149,136,140,0,153,134],
[144,152,171,192,160,166,180,188,0,172],
[170,159,147,163,192,201,173,207,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,182,177,167,158,174,168,186,163],
[155,0,150,163,169,151,172,178,157,143],
[159,191,0,188,178,176,193,183,178,185],
[164,178,153,0,165,170,171,159,174,167],
[174,172,163,176,0,166,186,171,151,154],
[183,190,165,171,175,0,176,168,180,171],
[167,169,148,170,155,165,0,166,168,146],
[173,163,158,182,170,173,175,0,173,155],
[155,184,163,167,190,161,173,168,0,137],
[178,198,156,174,187,170,195,186,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,181,172,187,171,178,175,157,173],
[175,0,167,176,182,163,175,169,150,162],
[160,174,0,180,192,180,178,167,149,174],
[169,165,161,0,170,166,161,167,158,172],
[154,159,149,171,0,151,160,154,145,156],
[170,178,161,175,190,0,182,170,167,166],
[163,166,163,180,181,159,0,158,162,173],
[166,172,174,174,187,171,183,0,169,170],
[184,191,192,183,196,174,179,172,0,166],
[168,179,167,169,185,175,168,171,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,161,158,159,159,164,159,161],
[169,0,166,173,167,166,169,176,165,155],
[173,175,0,179,167,166,179,170,180,168],
[180,168,162,0,171,180,172,181,170,177],
[183,174,174,170,0,171,174,165,173,163],
[182,175,175,161,170,0,167,159,178,162],
[182,172,162,169,167,174,0,166,173,166],
[177,165,171,160,176,182,175,0,180,169],
[182,176,161,171,168,163,168,161,0,161],
[180,186,173,164,178,179,175,172,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,243,232,182,233,166,189,244,199],
[74,0,172,237,95,131,194,195,179,176],
[98,169,0,154,56,150,131,156,191,175],
[109,104,187,0,60,155,173,149,203,206],
[159,246,285,281,0,227,229,228,223,211],
[108,210,191,186,114,0,132,156,213,199],
[175,147,210,168,112,209,0,147,232,179],
[152,146,185,192,113,185,194,0,213,157],
[97,162,150,138,118,128,109,128,0,140],
[142,165,166,135,130,142,162,184,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,173,170,184,155,159,174,173,179],
[184,0,176,179,194,170,175,174,173,181],
[168,165,0,173,179,159,178,166,178,168],
[171,162,168,0,193,174,156,165,166,176],
[157,147,162,148,0,156,164,164,163,171],
[186,171,182,167,185,0,167,174,183,177],
[182,166,163,185,177,174,0,171,178,191],
[167,167,175,176,177,167,170,0,175,174],
[168,168,163,175,178,158,163,166,0,175],
[162,160,173,165,170,164,150,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,171,166,176,179,171,173,175],
[179,0,178,185,174,180,170,163,182,170],
[171,163,0,181,159,188,180,169,178,163],
[170,156,160,0,176,177,176,185,166,161],
[175,167,182,165,0,176,189,172,178,176],
[165,161,153,164,165,0,169,170,167,162],
[162,171,161,165,152,172,0,159,151,149],
[170,178,172,156,169,171,182,0,158,151],
[168,159,163,175,163,174,190,183,0,172],
[166,171,178,180,165,179,192,190,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,167,181,164,157,158,175,186,171],
[184,0,165,179,170,159,171,158,195,157],
[174,176,0,174,167,165,161,159,190,163],
[160,162,167,0,154,168,169,150,192,162],
[177,171,174,187,0,152,178,167,189,151],
[184,182,176,173,189,0,162,174,207,179],
[183,170,180,172,163,179,0,177,192,176],
[166,183,182,191,174,167,164,0,194,184],
[155,146,151,149,152,134,149,147,0,143],
[170,184,178,179,190,162,165,157,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,173,163,168,171,179,172,187],
[167,0,170,170,173,168,174,178,162,194],
[166,171,0,175,173,171,167,182,182,185],
[168,171,166,0,169,156,166,172,174,186],
[178,168,168,172,0,172,182,176,181,184],
[173,173,170,185,169,0,187,179,181,188],
[170,167,174,175,159,154,0,195,173,183],
[162,163,159,169,165,162,146,0,170,177],
[169,179,159,167,160,160,168,171,0,179],
[154,147,156,155,157,153,158,164,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,168,170,166,166,159,170,159,161],
[194,0,176,185,174,181,180,181,179,170],
[173,165,0,178,160,184,175,165,165,176],
[171,156,163,0,159,172,158,181,156,165],
[175,167,181,182,0,183,182,185,174,182],
[175,160,157,169,158,0,160,161,151,159],
[182,161,166,183,159,181,0,178,169,174],
[171,160,176,160,156,180,163,0,157,168],
[182,162,176,185,167,190,172,184,0,174],
[180,171,165,176,159,182,167,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,172,158,148,177,161,177,180,222],
[154,0,155,153,129,158,128,137,161,193],
[169,186,0,151,186,224,173,150,189,200],
[183,188,190,0,162,190,161,195,168,186],
[193,212,155,179,0,202,182,186,210,206],
[164,183,117,151,139,0,123,161,146,194],
[180,213,168,180,159,218,0,192,200,219],
[164,204,191,146,155,180,149,0,187,212],
[161,180,152,173,131,195,141,154,0,190],
[119,148,141,155,135,147,122,129,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,199,183,174,186,167,168,161,170],
[159,0,166,171,155,176,154,168,162,170],
[142,175,0,182,171,179,171,174,158,165],
[158,170,159,0,158,179,143,161,162,180],
[167,186,170,183,0,198,170,171,171,175],
[155,165,162,162,143,0,160,144,160,150],
[174,187,170,198,171,181,0,175,164,178],
[173,173,167,180,170,197,166,0,170,174],
[180,179,183,179,170,181,177,171,0,177],
[171,171,176,161,166,191,163,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,186,184,153,145,161,176,186,159],
[198,0,209,183,175,159,178,177,196,179],
[155,132,0,149,146,127,146,141,155,136],
[157,158,192,0,163,142,158,152,162,157],
[188,166,195,178,0,158,185,162,187,169],
[196,182,214,199,183,0,161,197,190,178],
[180,163,195,183,156,180,0,187,175,154],
[165,164,200,189,179,144,154,0,189,177],
[155,145,186,179,154,151,166,152,0,170],
[182,162,205,184,172,163,187,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,160,156,181,169,191,181,180,187],
[179,0,141,152,166,168,175,163,162,198],
[181,200,0,192,198,207,175,170,192,183],
[185,189,149,0,181,176,186,167,185,191],
[160,175,143,160,0,177,175,158,180,177],
[172,173,134,165,164,0,157,154,160,181],
[150,166,166,155,166,184,0,173,180,176],
[160,178,171,174,183,187,168,0,168,177],
[161,179,149,156,161,181,161,173,0,187],
[154,143,158,150,164,160,165,164,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,117,108,128,143,111,146,170,123],
[208,0,191,170,164,199,162,208,200,149],
[224,150,0,155,149,194,154,166,156,177],
[233,171,186,0,199,178,176,166,229,172],
[213,177,192,142,0,184,154,191,179,198],
[198,142,147,163,157,0,160,164,167,177],
[230,179,187,165,187,181,0,175,158,181],
[195,133,175,175,150,177,166,0,155,151],
[171,141,185,112,162,174,183,186,0,170],
[218,192,164,169,143,164,160,190,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,185,188,176,164,186,175,176,171],
[160,0,180,182,177,168,183,179,168,154],
[156,161,0,166,151,141,171,163,167,130],
[153,159,175,0,173,177,157,172,173,144],
[165,164,190,168,0,155,175,167,173,169],
[177,173,200,164,186,0,193,172,178,169],
[155,158,170,184,166,148,0,170,163,153],
[166,162,178,169,174,169,171,0,158,149],
[165,173,174,168,168,163,178,183,0,172],
[170,187,211,197,172,172,188,192,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,190,156,181,176,173,197,177,171],
[168,0,173,169,196,175,184,183,175,163],
[151,168,0,154,180,163,155,179,162,161],
[185,172,187,0,187,183,172,183,173,156],
[160,145,161,154,0,159,153,188,156,147],
[165,166,178,158,182,0,155,182,161,173],
[168,157,186,169,188,186,0,189,169,171],
[144,158,162,158,153,159,152,0,146,161],
[164,166,179,168,185,180,172,195,0,163],
[170,178,180,185,194,168,170,180,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,183,186,180,177,196,163,179,178],
[174,0,191,180,174,184,165,180,174,187],
[158,150,0,166,171,150,162,164,146,156],
[155,161,175,0,158,162,153,163,159,147],
[161,167,170,183,0,177,167,161,172,173],
[164,157,191,179,164,0,154,164,164,166],
[145,176,179,188,174,187,0,183,170,172],
[178,161,177,178,180,177,158,0,167,187],
[162,167,195,182,169,177,171,174,0,166],
[163,154,185,194,168,175,169,154,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,186,216,187,169,170,184,187,187],
[169,0,175,213,163,197,169,160,197,201],
[155,166,0,182,171,171,138,176,186,168],
[125,128,159,0,128,162,149,139,167,160],
[154,178,170,213,0,186,173,169,177,202],
[172,144,170,179,155,0,156,151,178,189],
[171,172,203,192,168,185,0,174,188,180],
[157,181,165,202,172,190,167,0,191,184],
[154,144,155,174,164,163,153,150,0,166],
[154,140,173,181,139,152,161,157,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,188,177,202,164,180,181,179,183],
[163,0,180,180,179,171,175,181,180,184],
[153,161,0,163,159,158,175,173,164,162],
[164,161,178,0,188,168,163,167,178,170],
[139,162,182,153,0,164,171,168,173,173],
[177,170,183,173,177,0,175,170,190,173],
[161,166,166,178,170,166,0,177,174,167],
[160,160,168,174,173,171,164,0,165,173],
[162,161,177,163,168,151,167,176,0,169],
[158,157,179,171,168,168,174,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,181,173,177,163,190,187,189,175],
[143,0,161,140,167,153,167,164,175,158],
[160,180,0,165,188,161,181,181,168,179],
[168,201,176,0,188,178,177,182,183,177],
[164,174,153,153,0,160,168,172,164,163],
[178,188,180,163,181,0,167,176,181,176],
[151,174,160,164,173,174,0,179,173,166],
[154,177,160,159,169,165,162,0,158,162],
[152,166,173,158,177,160,168,183,0,164],
[166,183,162,164,178,165,175,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,204,181,189,161,207,208,190,179],
[174,0,210,190,220,187,179,177,205,160],
[137,131,0,140,145,169,200,184,177,147],
[160,151,201,0,171,172,183,192,187,192],
[152,121,196,170,0,141,176,174,175,187],
[180,154,172,169,200,0,201,191,232,165],
[134,162,141,158,165,140,0,160,153,153],
[133,164,157,149,167,150,181,0,186,156],
[151,136,164,154,166,109,188,155,0,179],
[162,181,194,149,154,176,188,185,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,192,192,174,170,167,186,177],
[170,0,197,186,168,156,184,168,177,180],
[157,144,0,178,162,139,154,162,164,151],
[149,155,163,0,154,145,164,151,174,157],
[149,173,179,187,0,155,176,164,174,170],
[167,185,202,196,186,0,176,173,182,172],
[171,157,187,177,165,165,0,164,169,166],
[174,173,179,190,177,168,177,0,186,173],
[155,164,177,167,167,159,172,155,0,159],
[164,161,190,184,171,169,175,168,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,176,156,153,172,174,148,172],
[171,0,171,171,171,173,156,173,149,176],
[175,170,0,177,180,164,164,184,175,165],
[165,170,164,0,169,178,166,179,169,172],
[185,170,161,172,0,186,171,191,153,175],
[188,168,177,163,155,0,164,186,162,167],
[169,185,177,175,170,177,0,187,163,186],
[167,168,157,162,150,155,154,0,144,175],
[193,192,166,172,188,179,178,197,0,199],
[169,165,176,169,166,174,155,166,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,161,159,177,185,177,177,167,169],
[161,0,175,167,178,177,163,184,168,155],
[180,166,0,171,185,182,177,182,171,165],
[182,174,170,0,181,190,181,188,181,174],
[164,163,156,160,0,182,174,169,159,164],
[156,164,159,151,159,0,156,173,158,164],
[164,178,164,160,167,185,0,192,169,157],
[164,157,159,153,172,168,149,0,164,169],
[174,173,170,160,182,183,172,177,0,161],
[172,186,176,167,177,177,184,172,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,190,159,150,134,187,165,170,170],
[174,0,200,147,191,167,195,218,184,190],
[151,141,0,141,151,141,183,180,194,188],
[182,194,200,0,162,192,189,201,199,192],
[191,150,190,179,0,200,196,208,203,211],
[207,174,200,149,141,0,169,181,180,162],
[154,146,158,152,145,172,0,155,156,165],
[176,123,161,140,133,160,186,0,198,201],
[171,157,147,142,138,161,185,143,0,156],
[171,151,153,149,130,179,176,140,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,139,182,155,217,148,161,167,161],
[148,0,165,155,174,205,180,173,189,144],
[202,176,0,164,168,204,210,163,188,176],
[159,186,177,0,162,188,167,167,177,177],
[186,167,173,179,0,185,187,182,184,164],
[124,136,137,153,156,0,157,142,136,126],
[193,161,131,174,154,184,0,179,177,158],
[180,168,178,174,159,199,162,0,182,152],
[174,152,153,164,157,205,164,159,0,165],
[180,197,165,164,177,215,183,189,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,157,177,160,175,154,172,173,159],
[184,0,191,181,175,197,171,186,162,167],
[184,150,0,164,163,172,167,179,168,180],
[164,160,177,0,167,178,163,186,173,178],
[181,166,178,174,0,191,161,175,173,164],
[166,144,169,163,150,0,158,168,152,167],
[187,170,174,178,180,183,0,181,183,181],
[169,155,162,155,166,173,160,0,156,164],
[168,179,173,168,168,189,158,185,0,179],
[182,174,161,163,177,174,160,177,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,154,221,187,168,210,169,215,169],
[151,0,143,210,151,145,210,160,198,155],
[187,198,0,216,202,188,180,163,209,170],
[120,131,125,0,164,150,153,129,168,125],
[154,190,139,177,0,169,201,174,152,145],
[173,196,153,191,172,0,201,149,154,169],
[131,131,161,188,140,140,0,126,142,146],
[172,181,178,212,167,192,215,0,222,198],
[126,143,132,173,189,187,199,119,0,155],
[172,186,171,216,196,172,195,143,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,152,152,156,187,158,140,131,157],
[171,0,153,177,173,167,152,163,153,170],
[189,188,0,189,187,185,164,164,188,162],
[189,164,152,0,155,176,155,133,124,143],
[185,168,154,186,0,187,175,167,150,152],
[154,174,156,165,154,0,154,144,134,162],
[183,189,177,186,166,187,0,172,165,176],
[201,178,177,208,174,197,169,0,170,159],
[210,188,153,217,191,207,176,171,0,153],
[184,171,179,198,189,179,165,182,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,160,150,152,177,127,150,158],
[171,0,179,139,157,172,157,142,159,151],
[182,162,0,161,182,170,154,157,143,149],
[181,202,180,0,169,186,184,172,161,167],
[191,184,159,172,0,168,166,153,163,172],
[189,169,171,155,173,0,172,139,180,174],
[164,184,187,157,175,169,0,145,156,187],
[214,199,184,169,188,202,196,0,186,168],
[191,182,198,180,178,161,185,155,0,154],
[183,190,192,174,169,167,154,173,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,180,195,182,164,180,190,165,189],
[164,0,171,178,172,169,159,185,182,173],
[161,170,0,189,185,175,173,173,173,188],
[146,163,152,0,168,155,144,160,157,178],
[159,169,156,173,0,145,157,169,168,174],
[177,172,166,186,196,0,176,177,175,175],
[161,182,168,197,184,165,0,169,172,184],
[151,156,168,181,172,164,172,0,164,180],
[176,159,168,184,173,166,169,177,0,180],
[152,168,153,163,167,166,157,161,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,150,171,164,168,170,173,171,161],
[182,0,179,183,166,192,173,178,179,177],
[191,162,0,176,173,182,176,176,174,160],
[170,158,165,0,170,178,179,179,172,172],
[177,175,168,171,0,181,165,171,160,168],
[173,149,159,163,160,0,177,172,168,171],
[171,168,165,162,176,164,0,175,181,155],
[168,163,165,162,170,169,166,0,167,162],
[170,162,167,169,181,173,160,174,0,163],
[180,164,181,169,173,170,186,179,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,198,183,190,188,178,195,193,164],
[147,0,171,177,185,177,137,159,172,164],
[143,170,0,175,171,173,165,174,182,164],
[158,164,166,0,173,176,152,170,170,174],
[151,156,170,168,0,155,151,174,162,164],
[153,164,168,165,186,0,155,175,165,173],
[163,204,176,189,190,186,0,186,184,176],
[146,182,167,171,167,166,155,0,168,165],
[148,169,159,171,179,176,157,173,0,162],
[177,177,177,167,177,168,165,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,162,159,167,181,151,170,165,158],
[188,0,186,173,183,193,170,177,188,171],
[179,155,0,164,153,177,157,161,167,166],
[182,168,177,0,174,178,177,186,179,183],
[174,158,188,167,0,186,161,170,181,172],
[160,148,164,163,155,0,165,157,161,163],
[190,171,184,164,180,176,0,169,172,173],
[171,164,180,155,171,184,172,0,173,169],
[176,153,174,162,160,180,169,168,0,168],
[183,170,175,158,169,178,168,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,166,158,163,157,193,202,172],
[160,0,151,120,144,131,144,160,126,164],
[167,190,0,154,197,162,175,195,170,160],
[175,221,187,0,191,169,173,202,215,182],
[183,197,144,150,0,139,165,207,151,168],
[178,210,179,172,202,0,185,208,188,159],
[184,197,166,168,176,156,0,179,161,165],
[148,181,146,139,134,133,162,0,151,147],
[139,215,171,126,190,153,180,190,0,158],
[169,177,181,159,173,182,176,194,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,143,208,190,205,165,164,185,154],
[86,0,80,168,136,100,93,127,61,119],
[198,261,0,226,198,213,188,195,150,177],
[133,173,115,0,141,113,85,124,80,101],
[151,205,143,200,0,167,101,154,114,128],
[136,241,128,228,174,0,140,158,133,191],
[176,248,153,256,240,201,0,200,136,196],
[177,214,146,217,187,183,141,0,180,181],
[156,280,191,261,227,208,205,161,0,185],
[187,222,164,240,213,150,145,160,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,181,168,199,176,172,188,189,154],
[125,0,170,145,176,144,134,139,155,123],
[160,171,0,147,172,157,163,175,175,137],
[173,196,194,0,211,178,138,173,180,184],
[142,165,169,130,0,143,139,145,152,153],
[165,197,184,163,198,0,169,187,186,168],
[169,207,178,203,202,172,0,195,194,161],
[153,202,166,168,196,154,146,0,194,138],
[152,186,166,161,189,155,147,147,0,142],
[187,218,204,157,188,173,180,203,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,181,181,181,171,165,175,169,178],
[164,0,171,175,171,153,155,171,155,168],
[160,170,0,167,174,162,159,163,168,177],
[160,166,174,0,163,164,160,172,172,169],
[160,170,167,178,0,151,153,164,148,162],
[170,188,179,177,190,0,172,180,177,172],
[176,186,182,181,188,169,0,176,170,176],
[166,170,178,169,177,161,165,0,169,158],
[172,186,173,169,193,164,171,172,0,166],
[163,173,164,172,179,169,165,183,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,139,134,157,192,173,178,172,169],
[172,0,173,131,172,217,207,225,190,199],
[202,168,0,174,160,209,168,197,193,178],
[207,210,167,0,212,204,186,191,224,241],
[184,169,181,129,0,224,165,147,189,149],
[149,124,132,137,117,0,136,118,165,144],
[168,134,173,155,176,205,0,214,171,137],
[163,116,144,150,194,223,127,0,176,171],
[169,151,148,117,152,176,170,165,0,186],
[172,142,163,100,192,197,204,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,173,179,186,169,169,165,172,179],
[159,0,166,167,178,162,166,175,171,177],
[168,175,0,172,170,160,176,185,165,184],
[162,174,169,0,180,167,162,171,151,181],
[155,163,171,161,0,159,165,162,158,172],
[172,179,181,174,182,0,182,171,161,180],
[172,175,165,179,176,159,0,179,162,181],
[176,166,156,170,179,170,162,0,163,173],
[169,170,176,190,183,180,179,178,0,192],
[162,164,157,160,169,161,160,168,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,156,131,169,186,191,126,194,184],
[203,0,174,152,176,171,162,153,193,192],
[185,167,0,156,182,184,201,151,186,209],
[210,189,185,0,200,191,145,162,209,202],
[172,165,159,141,0,180,159,137,148,169],
[155,170,157,150,161,0,178,149,157,191],
[150,179,140,196,182,163,0,151,171,209],
[215,188,190,179,204,192,190,0,169,232],
[147,148,155,132,193,184,170,172,0,199],
[157,149,132,139,172,150,132,109,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,175,160,156,185,165,180,174],
[172,0,172,186,154,160,159,181,183,155],
[172,169,0,183,147,152,178,172,164,175],
[166,155,158,0,158,184,166,173,157,167],
[181,187,194,183,0,173,189,171,181,158],
[185,181,189,157,168,0,171,174,166,185],
[156,182,163,175,152,170,0,169,178,165],
[176,160,169,168,170,167,172,0,164,189],
[161,158,177,184,160,175,163,177,0,148],
[167,186,166,174,183,156,176,152,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,173,168,185,166,174,173,165,178],
[179,0,161,176,177,171,182,166,168,170],
[168,180,0,170,190,178,176,182,173,180],
[173,165,171,0,178,179,177,181,166,163],
[156,164,151,163,0,172,167,168,163,168],
[175,170,163,162,169,0,157,171,164,173],
[167,159,165,164,174,184,0,162,168,165],
[168,175,159,160,173,170,179,0,167,184],
[176,173,168,175,178,177,173,174,0,182],
[163,171,161,178,173,168,176,157,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,161,180,176,167,181,184,165,180],
[186,0,168,197,158,185,184,184,166,192],
[180,173,0,172,160,192,186,171,178,190],
[161,144,169,0,154,172,160,173,160,172],
[165,183,181,187,0,177,157,188,162,195],
[174,156,149,169,164,0,196,177,181,184],
[160,157,155,181,184,145,0,183,180,180],
[157,157,170,168,153,164,158,0,165,189],
[176,175,163,181,179,160,161,176,0,172],
[161,149,151,169,146,157,161,152,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,162,166,143,186,147,137,187,161],
[192,0,165,173,150,184,159,182,189,181],
[179,176,0,176,181,185,147,179,176,174],
[175,168,165,0,151,204,191,200,210,193],
[198,191,160,190,0,167,170,171,197,182],
[155,157,156,137,174,0,160,162,165,164],
[194,182,194,150,171,181,0,202,201,184],
[204,159,162,141,170,179,139,0,181,175],
[154,152,165,131,144,176,140,160,0,160],
[180,160,167,148,159,177,157,166,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,176,165,167,173,146,160,154],
[166,0,161,168,142,160,166,155,161,161],
[183,180,0,185,183,179,170,184,195,187],
[165,173,156,0,149,165,171,150,163,149],
[176,199,158,192,0,176,169,173,181,171],
[174,181,162,176,165,0,163,172,170,174],
[168,175,171,170,172,178,0,162,179,165],
[195,186,157,191,168,169,179,0,173,184],
[181,180,146,178,160,171,162,168,0,170],
[187,180,154,192,170,167,176,157,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,168,198,164,194,224,210,199,180],
[189,0,185,178,167,234,222,168,188,163],
[173,156,0,186,117,193,204,165,178,194],
[143,163,155,0,171,191,213,163,192,184],
[177,174,224,170,0,217,218,209,229,176],
[147,107,148,150,124,0,206,156,180,130],
[117,119,137,128,123,135,0,115,134,128],
[131,173,176,178,132,185,226,0,203,141],
[142,153,163,149,112,161,207,138,0,176],
[161,178,147,157,165,211,213,200,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,155,161,171,159,157,168,171,168],
[167,0,160,150,152,148,159,150,172,159],
[186,181,0,170,159,165,176,168,169,174],
[180,191,171,0,167,177,164,192,174,176],
[170,189,182,174,0,172,163,166,177,165],
[182,193,176,164,169,0,171,180,179,170],
[184,182,165,177,178,170,0,170,180,175],
[173,191,173,149,175,161,171,0,180,167],
[170,169,172,167,164,162,161,161,0,164],
[173,182,167,165,176,171,166,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,188,153,148,167,163,163,178,169],
[153,0,170,148,159,149,166,141,185,168],
[153,171,0,147,157,154,169,154,161,159],
[188,193,194,0,169,178,183,178,191,183],
[193,182,184,172,0,167,178,152,195,170],
[174,192,187,163,174,0,160,158,187,180],
[178,175,172,158,163,181,0,173,189,174],
[178,200,187,163,189,183,168,0,183,194],
[163,156,180,150,146,154,152,158,0,164],
[172,173,182,158,171,161,167,147,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,156,157,164,188,167,158,161],
[168,0,161,165,170,177,175,160,174,165],
[169,180,0,177,181,173,188,181,175,176],
[185,176,164,0,165,192,151,169,179,177],
[184,171,160,176,0,173,195,173,191,181],
[177,164,168,149,168,0,172,161,174,167],
[153,166,153,190,146,169,0,171,159,169],
[174,181,160,172,168,180,170,0,159,165],
[183,167,166,162,150,167,182,182,0,172],
[180,176,165,164,160,174,172,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,103,108,175,127,160,143,126,113],
[156,0,133,144,129,103,133,136,166,155],
[238,208,0,180,217,169,234,235,227,183],
[233,197,161,0,167,144,181,146,144,190],
[166,212,124,174,0,131,170,133,147,165],
[214,238,172,197,210,0,218,109,201,242],
[181,208,107,160,171,123,0,126,168,172],
[198,205,106,195,208,232,215,0,221,238],
[215,175,114,197,194,140,173,120,0,139],
[228,186,158,151,176,99,169,103,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,167,148,154,159,160,170,162],
[182,0,168,190,177,179,178,179,184,176],
[180,173,0,171,149,183,169,160,174,169],
[174,151,170,0,155,173,166,179,150,174],
[193,164,192,186,0,186,179,182,185,189],
[187,162,158,168,155,0,173,170,175,171],
[182,163,172,175,162,168,0,165,161,186],
[181,162,181,162,159,171,176,0,175,169],
[171,157,167,191,156,166,180,166,0,165],
[179,165,172,167,152,170,155,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,127,144,163,171,155,155,164,172],
[171,0,155,165,147,194,174,175,149,188],
[214,186,0,167,194,199,192,171,182,215],
[197,176,174,0,157,193,172,179,172,198],
[178,194,147,184,0,216,187,179,166,200],
[170,147,142,148,125,0,158,151,141,176],
[186,167,149,169,154,183,0,158,151,182],
[186,166,170,162,162,190,183,0,180,190],
[177,192,159,169,175,200,190,161,0,189],
[169,153,126,143,141,165,159,151,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,191,199,163,184,181,185,159,189],
[159,0,184,163,157,178,177,161,177,178],
[150,157,0,164,135,179,158,152,152,174],
[142,178,177,0,157,164,151,146,162,165],
[178,184,206,184,0,186,181,175,152,192],
[157,163,162,177,155,0,157,153,151,179],
[160,164,183,190,160,184,0,165,151,187],
[156,180,189,195,166,188,176,0,163,195],
[182,164,189,179,189,190,190,178,0,203],
[152,163,167,176,149,162,154,146,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,159,142,162,157,134,157,168],
[177,0,173,194,170,185,157,158,159,173],
[180,168,0,197,157,175,167,184,167,171],
[182,147,144,0,130,150,151,123,135,138],
[199,171,184,211,0,178,172,160,185,198],
[179,156,166,191,163,0,173,173,160,197],
[184,184,174,190,169,168,0,187,173,194],
[207,183,157,218,181,168,154,0,181,199],
[184,182,174,206,156,181,168,160,0,176],
[173,168,170,203,143,144,147,142,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,169,173,152,142,167,158,161,145],
[188,0,180,175,201,163,176,173,182,174],
[172,161,0,166,160,145,176,149,147,146],
[168,166,175,0,167,155,167,186,164,156],
[189,140,181,174,0,157,184,190,172,171],
[199,178,196,186,184,0,207,174,177,163],
[174,165,165,174,157,134,0,172,157,154],
[183,168,192,155,151,167,169,0,149,146],
[180,159,194,177,169,164,184,192,0,188],
[196,167,195,185,170,178,187,195,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,202,182,193,206,163,195,179,172],
[141,0,195,203,172,179,171,177,162,169],
[139,146,0,177,170,173,132,135,171,138],
[159,138,164,0,157,179,154,150,147,170],
[148,169,171,184,0,182,151,187,151,170],
[135,162,168,162,159,0,156,169,167,150],
[178,170,209,187,190,185,0,185,169,173],
[146,164,206,191,154,172,156,0,162,168],
[162,179,170,194,190,174,172,179,0,166],
[169,172,203,171,171,191,168,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,172,171,200,162,161,200,173,198],
[217,0,164,214,256,242,199,198,209,225],
[169,177,0,159,221,190,183,190,208,211],
[170,127,182,0,237,161,170,222,165,190],
[141,85,120,104,0,132,111,176,119,101],
[179,99,151,180,209,0,193,187,217,212],
[180,142,158,171,230,148,0,178,156,184],
[141,143,151,119,165,154,163,0,171,143],
[168,132,133,176,222,124,185,170,0,195],
[143,116,130,151,240,129,157,198,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,169,180,177,187,175,189,184,191],
[157,0,164,167,191,180,159,156,187,160],
[172,177,0,177,173,176,170,175,181,192],
[161,174,164,0,178,174,162,166,184,170],
[164,150,168,163,0,171,165,157,165,172],
[154,161,165,167,170,0,160,161,174,167],
[166,182,171,179,176,181,0,180,181,181],
[152,185,166,175,184,180,161,0,183,173],
[157,154,160,157,176,167,160,158,0,152],
[150,181,149,171,169,174,160,168,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,136,167,146,184,167,168,155,172],
[186,0,156,195,186,183,180,185,187,184],
[205,185,0,193,164,186,174,182,195,194],
[174,146,148,0,165,194,177,158,179,175],
[195,155,177,176,0,185,173,177,187,172],
[157,158,155,147,156,0,167,159,159,146],
[174,161,167,164,168,174,0,178,187,175],
[173,156,159,183,164,182,163,0,181,155],
[186,154,146,162,154,182,154,160,0,167],
[169,157,147,166,169,195,166,186,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,164,159,148,162,176,168,163,167],
[159,0,158,140,134,137,170,164,166,166],
[177,183,0,188,162,149,172,166,152,168],
[182,201,153,0,185,143,163,170,170,176],
[193,207,179,156,0,155,176,178,159,179],
[179,204,192,198,186,0,187,199,165,186],
[165,171,169,178,165,154,0,162,167,161],
[173,177,175,171,163,142,179,0,180,199],
[178,175,189,171,182,176,174,161,0,177],
[174,175,173,165,162,155,180,142,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,179,143,173,131,163,161,182,159],
[196,0,182,182,217,183,193,163,218,183],
[162,159,0,169,172,153,172,182,188,154],
[198,159,172,0,190,153,187,186,205,188],
[168,124,169,151,0,147,172,154,181,162],
[210,158,188,188,194,0,190,179,185,183],
[178,148,169,154,169,151,0,139,190,163],
[180,178,159,155,187,162,202,0,210,171],
[159,123,153,136,160,156,151,131,0,138],
[182,158,187,153,179,158,178,170,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,196,184,169,175,166,170,176,155],
[161,0,192,174,154,156,176,157,161,168],
[145,149,0,165,145,125,142,134,149,137],
[157,167,176,0,143,159,179,141,168,163],
[172,187,196,198,0,176,186,168,190,185],
[166,185,216,182,165,0,165,168,171,160],
[175,165,199,162,155,176,0,161,175,170],
[171,184,207,200,173,173,180,0,179,163],
[165,180,192,173,151,170,166,162,0,171],
[186,173,204,178,156,181,171,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,170,177,163,172,170,164,181],
[159,0,170,172,163,156,170,160,162,165],
[164,171,0,159,151,151,160,163,162,170],
[171,169,182,0,174,165,158,178,173,181],
[164,178,190,167,0,177,184,176,175,165],
[178,185,190,176,164,0,175,172,174,186],
[169,171,181,183,157,166,0,159,156,173],
[171,181,178,163,165,169,182,0,169,183],
[177,179,179,168,166,167,185,172,0,179],
[160,176,171,160,176,155,168,158,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,139,181,161,145,172,188,180,164],
[138,0,120,154,155,150,145,168,169,146],
[202,221,0,196,188,190,168,218,201,196],
[160,187,145,0,128,132,192,197,187,158],
[180,186,153,213,0,155,182,173,178,192],
[196,191,151,209,186,0,221,223,230,203],
[169,196,173,149,159,120,0,178,183,168],
[153,173,123,144,168,118,163,0,144,164],
[161,172,140,154,163,111,158,197,0,176],
[177,195,145,183,149,138,173,177,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,166,196,196,192,172,189,180,177],
[152,0,160,165,157,156,152,166,142,155],
[175,181,0,194,179,178,167,180,152,160],
[145,176,147,0,146,174,156,160,156,140],
[145,184,162,195,0,190,180,186,199,156],
[149,185,163,167,151,0,177,200,159,167],
[169,189,174,185,161,164,0,173,180,188],
[152,175,161,181,155,141,168,0,174,154],
[161,199,189,185,142,182,161,167,0,169],
[164,186,181,201,185,174,153,187,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,159,179,159,168,158,172,162,178],
[178,0,171,190,170,171,169,163,176,172],
[182,170,0,186,172,175,183,167,173,156],
[162,151,155,0,165,161,149,157,156,165],
[182,171,169,176,0,167,160,173,171,175],
[173,170,166,180,174,0,164,163,154,172],
[183,172,158,192,181,177,0,166,178,178],
[169,178,174,184,168,178,175,0,173,171],
[179,165,168,185,170,187,163,168,0,174],
[163,169,185,176,166,169,163,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,158,139,271,341,213,157,228,209],
[191,0,121,182,244,204,204,121,204,134],
[183,220,0,254,184,213,197,130,161,142],
[202,159,87,0,135,280,267,132,231,99],
[70,97,157,206,0,218,148,0,99,78],
[0,137,128,61,123,0,116,58,131,3],
[128,137,144,74,193,225,0,128,227,144],
[184,220,211,209,341,283,213,0,162,81],
[113,137,180,110,242,210,114,179,0,52],
[132,207,199,242,263,338,197,260,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,184,176,177,170,188,180,179],
[169,0,178,173,171,176,160,169,172,177],
[165,163,0,152,163,164,166,171,173,164],
[157,168,189,0,171,174,175,178,168,180],
[165,170,178,170,0,176,174,174,173,157],
[164,165,177,167,165,0,160,157,157,161],
[171,181,175,166,167,181,0,179,177,163],
[153,172,170,163,167,184,162,0,174,172],
[161,169,168,173,168,184,164,167,0,155],
[162,164,177,161,184,180,178,169,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,179,183,181,175,188,169,185,186],
[157,0,168,180,167,166,189,163,180,170],
[162,173,0,182,173,173,193,161,179,166],
[158,161,159,0,157,174,182,159,168,155],
[160,174,168,184,0,178,193,165,162,168],
[166,175,168,167,163,0,173,173,179,174],
[153,152,148,159,148,168,0,159,170,153],
[172,178,180,182,176,168,182,0,180,172],
[156,161,162,173,179,162,171,161,0,172],
[155,171,175,186,173,167,188,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,166,178,177,167,166,174,183],
[169,0,192,176,176,177,175,166,175,175],
[163,149,0,171,169,171,164,164,163,164],
[175,165,170,0,172,177,158,170,163,173],
[163,165,172,169,0,181,181,184,169,179],
[164,164,170,164,160,0,164,165,166,168],
[174,166,177,183,160,177,0,168,168,181],
[175,175,177,171,157,176,173,0,178,178],
[167,166,178,178,172,175,173,163,0,163],
[158,166,177,168,162,173,160,163,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,184,175,162,175,184,177,176,183],
[165,0,164,162,162,161,158,154,178,160],
[157,177,0,140,149,155,157,157,156,151],
[166,179,201,0,177,181,175,167,174,171],
[179,179,192,164,0,179,165,171,168,178],
[166,180,186,160,162,0,164,157,158,171],
[157,183,184,166,176,177,0,162,174,184],
[164,187,184,174,170,184,179,0,174,180],
[165,163,185,167,173,183,167,167,0,181],
[158,181,190,170,163,170,157,161,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,152,170,180,157,182,145,157,177],
[188,0,193,167,168,173,173,174,183,185],
[189,148,0,179,164,165,169,157,186,184],
[171,174,162,0,181,170,168,185,182,191],
[161,173,177,160,0,142,184,155,168,190],
[184,168,176,171,199,0,176,173,182,190],
[159,168,172,173,157,165,0,164,156,164],
[196,167,184,156,186,168,177,0,169,202],
[184,158,155,159,173,159,185,172,0,191],
[164,156,157,150,151,151,177,139,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,156,163,164,151,154,164,150,163],
[192,0,173,186,181,170,172,185,163,171],
[185,168,0,181,187,176,178,180,171,169],
[178,155,160,0,163,169,171,184,162,164],
[177,160,154,178,0,171,174,173,150,157],
[190,171,165,172,170,0,172,183,163,168],
[187,169,163,170,167,169,0,176,160,161],
[177,156,161,157,168,158,165,0,161,154],
[191,178,170,179,191,178,181,180,0,181],
[178,170,172,177,184,173,180,187,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,159,155,141,162,156,157,167,146],
[183,0,184,156,160,163,174,171,168,166],
[182,157,0,161,153,155,158,159,181,160],
[186,185,180,0,173,177,181,172,183,167],
[200,181,188,168,0,186,172,178,178,182],
[179,178,186,164,155,0,175,174,189,173],
[185,167,183,160,169,166,0,178,187,178],
[184,170,182,169,163,167,163,0,183,149],
[174,173,160,158,163,152,154,158,0,162],
[195,175,181,174,159,168,163,192,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,167,158,161,164,174,158,169,160],
[182,0,182,177,172,182,186,159,178,161],
[174,159,0,164,166,159,177,156,178,158],
[183,164,177,0,165,171,175,179,185,162],
[180,169,175,176,0,179,187,162,176,165],
[177,159,182,170,162,0,173,145,172,163],
[167,155,164,166,154,168,0,161,174,147],
[183,182,185,162,179,196,180,0,181,175],
[172,163,163,156,165,169,167,160,0,146],
[181,180,183,179,176,178,194,166,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,161,167,183,180,168,177,158,166],
[155,0,172,164,179,178,156,174,165,147],
[180,169,0,173,170,171,167,174,175,171],
[174,177,168,0,186,182,170,178,161,169],
[158,162,171,155,0,167,162,177,168,173],
[161,163,170,159,174,0,163,170,170,169],
[173,185,174,171,179,178,0,176,168,171],
[164,167,167,163,164,171,165,0,164,162],
[183,176,166,180,173,171,173,177,0,164],
[175,194,170,172,168,172,170,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,159,164,157,167,159,159,187,153],
[186,0,163,154,150,172,155,163,173,162],
[182,178,0,176,174,180,163,180,188,188],
[177,187,165,0,175,170,162,183,188,168],
[184,191,167,166,0,190,172,184,182,171],
[174,169,161,171,151,0,160,179,171,159],
[182,186,178,179,169,181,0,192,192,165],
[182,178,161,158,157,162,149,0,176,162],
[154,168,153,153,159,170,149,165,0,160],
[188,179,153,173,170,182,176,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,161,177,166,167,172,170,179],
[163,0,151,158,164,158,162,160,169,181],
[168,190,0,171,184,181,180,181,163,181],
[180,183,170,0,190,175,170,187,174,180],
[164,177,157,151,0,152,152,160,163,176],
[175,183,160,166,189,0,166,167,169,178],
[174,179,161,171,189,175,0,177,172,192],
[169,181,160,154,181,174,164,0,167,170],
[171,172,178,167,178,172,169,174,0,189],
[162,160,160,161,165,163,149,171,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,160,171,181,161,165,165,170,168],
[153,0,153,167,171,147,150,145,161,150],
[181,188,0,180,186,177,175,173,180,167],
[170,174,161,0,173,165,158,164,169,162],
[160,170,155,168,0,159,163,152,161,162],
[180,194,164,176,182,0,163,168,173,163],
[176,191,166,183,178,178,0,168,167,169],
[176,196,168,177,189,173,173,0,178,182],
[171,180,161,172,180,168,174,163,0,157],
[173,191,174,179,179,178,172,159,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,173,173,200,195,175,145,198,174],
[146,0,139,161,186,151,146,143,164,169],
[168,202,0,192,223,204,160,165,190,185],
[168,180,149,0,204,202,150,177,192,213],
[141,155,118,137,0,146,161,139,160,146],
[146,190,137,139,195,0,175,155,178,211],
[166,195,181,191,180,166,0,157,184,190],
[196,198,176,164,202,186,184,0,201,196],
[143,177,151,149,181,163,157,140,0,181],
[167,172,156,128,195,130,151,145,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,167,167,182,166,159,153,168],
[181,0,183,179,186,162,158,184,170,182],
[182,158,0,173,188,166,168,166,169,193],
[174,162,168,0,173,171,151,171,169,179],
[174,155,153,168,0,173,164,160,156,186],
[159,179,175,170,168,0,187,168,180,167],
[175,183,173,190,177,154,0,176,181,189],
[182,157,175,170,181,173,165,0,170,176],
[188,171,172,172,185,161,160,171,0,177],
[173,159,148,162,155,174,152,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,156,162,155,165,158,160,152,166],
[175,0,163,163,158,171,159,157,166,170],
[185,178,0,174,173,169,162,162,175,175],
[179,178,167,0,163,181,159,159,171,163],
[186,183,168,178,0,181,178,170,173,181],
[176,170,172,160,160,0,151,170,160,182],
[183,182,179,182,163,190,0,177,172,181],
[181,184,179,182,171,171,164,0,175,187],
[189,175,166,170,168,181,169,166,0,175],
[175,171,166,178,160,159,160,154,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,177,175,169,180,171,177,180],
[175,0,172,178,190,176,183,168,164,186],
[170,169,0,168,177,192,185,174,167,184],
[164,163,173,0,187,185,180,167,159,184],
[166,151,164,154,0,173,179,164,159,179],
[172,165,149,156,168,0,165,155,166,178],
[161,158,156,161,162,176,0,177,163,185],
[170,173,167,174,177,186,164,0,171,184],
[164,177,174,182,182,175,178,170,0,193],
[161,155,157,157,162,163,156,157,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,169,169,174,184,178,174,172,169],
[162,0,166,152,177,180,182,163,148,175],
[172,175,0,172,165,197,178,152,166,182],
[172,189,169,0,166,166,174,172,165,174],
[167,164,176,175,0,185,166,176,159,183],
[157,161,144,175,156,0,177,157,158,174],
[163,159,163,167,175,164,0,151,161,176],
[167,178,189,169,165,184,190,0,174,184],
[169,193,175,176,182,183,180,167,0,187],
[172,166,159,167,158,167,165,157,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,158,188,190,212,173,194,181,209],
[159,0,187,171,147,173,189,205,179,197],
[183,154,0,204,180,190,204,193,179,255],
[153,170,137,0,171,189,164,177,164,208],
[151,194,161,170,0,180,169,175,178,190],
[129,168,151,152,161,0,170,156,190,206],
[168,152,137,177,172,171,0,166,163,203],
[147,136,148,164,166,185,175,0,205,172],
[160,162,162,177,163,151,178,136,0,173],
[132,144,86,133,151,135,138,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,169,164,165,162,144,161,155,155],
[199,0,187,186,188,161,177,174,172,200],
[172,154,0,159,176,168,172,158,176,167],
[177,155,182,0,183,179,159,167,179,189],
[176,153,165,158,0,154,167,153,161,156],
[179,180,173,162,187,0,180,180,175,190],
[197,164,169,182,174,161,0,158,172,186],
[180,167,183,174,188,161,183,0,182,182],
[186,169,165,162,180,166,169,159,0,175],
[186,141,174,152,185,151,155,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,160,132,177,153,164,147,171,182],
[188,0,185,166,193,168,204,170,193,174],
[181,156,0,167,173,145,207,164,150,182],
[209,175,174,0,177,165,211,171,206,203],
[164,148,168,164,0,186,183,168,157,157],
[188,173,196,176,155,0,192,161,191,178],
[177,137,134,130,158,149,0,143,162,148],
[194,171,177,170,173,180,198,0,171,174],
[170,148,191,135,184,150,179,170,0,172],
[159,167,159,138,184,163,193,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,161,182,160,154,173,176,176],
[166,0,186,174,185,181,176,183,170,189],
[177,155,0,164,187,187,160,179,164,179],
[180,167,177,0,189,171,158,172,169,181],
[159,156,154,152,0,171,156,165,136,163],
[181,160,154,170,170,0,163,170,156,170],
[187,165,181,183,185,178,0,185,165,196],
[168,158,162,169,176,171,156,0,138,164],
[165,171,177,172,205,185,176,203,0,165],
[165,152,162,160,178,171,145,177,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,151,164,157,160,175,146,165,158],
[165,0,154,163,171,161,168,160,181,161],
[190,187,0,179,170,192,183,176,186,176],
[177,178,162,0,166,163,163,152,175,184],
[184,170,171,175,0,166,165,162,180,170],
[181,180,149,178,175,0,174,168,187,156],
[166,173,158,178,176,167,0,164,183,154],
[195,181,165,189,179,173,177,0,185,177],
[176,160,155,166,161,154,158,156,0,166],
[183,180,165,157,171,185,187,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,172,167,185,170,169,174,174],
[174,0,163,177,171,169,171,159,160,176],
[165,178,0,183,173,178,185,161,167,175],
[169,164,158,0,164,166,167,174,163,173],
[174,170,168,177,0,173,170,174,172,174],
[156,172,163,175,168,0,174,173,163,182],
[171,170,156,174,171,167,0,163,164,166],
[172,182,180,167,167,168,178,0,164,182],
[167,181,174,178,169,178,177,177,0,189],
[167,165,166,168,167,159,175,159,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,168,179,157,148,142,158,143,161],
[175,0,174,195,167,149,145,180,166,160],
[173,167,0,186,154,146,161,167,153,128],
[162,146,155,0,160,133,150,178,150,142],
[184,174,187,181,0,147,154,197,159,182],
[193,192,195,208,194,0,166,181,153,160],
[199,196,180,191,187,175,0,179,188,150],
[183,161,174,163,144,160,162,0,154,183],
[198,175,188,191,182,188,153,187,0,173],
[180,181,213,199,159,181,191,158,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,193,177,182,169,166,184,179,197],
[158,0,194,169,161,156,163,189,166,177],
[148,147,0,153,158,151,171,166,159,187],
[164,172,188,0,195,177,179,177,181,183],
[159,180,183,146,0,155,152,165,167,170],
[172,185,190,164,186,0,179,190,182,180],
[175,178,170,162,189,162,0,197,176,179],
[157,152,175,164,176,151,144,0,180,176],
[162,175,182,160,174,159,165,161,0,174],
[144,164,154,158,171,161,162,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,156,167,166,153,145,165,157,176],
[191,0,163,179,186,174,151,179,176,168],
[185,178,0,192,183,173,166,188,179,194],
[174,162,149,0,159,174,130,158,147,166],
[175,155,158,182,0,165,141,187,161,199],
[188,167,168,167,176,0,173,171,176,193],
[196,190,175,211,200,168,0,181,162,204],
[176,162,153,183,154,170,160,0,155,194],
[184,165,162,194,180,165,179,186,0,176],
[165,173,147,175,142,148,137,147,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,136,150,154,151,169,179,164,167],
[158,0,145,164,136,166,176,200,152,159],
[205,196,0,184,175,177,165,202,185,218],
[191,177,157,0,151,168,176,195,156,162],
[187,205,166,190,0,183,174,197,149,198],
[190,175,164,173,158,0,158,184,167,164],
[172,165,176,165,167,183,0,208,149,156],
[162,141,139,146,144,157,133,0,150,162],
[177,189,156,185,192,174,192,191,0,195],
[174,182,123,179,143,177,185,179,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,171,190,184,184,186,157,195,184],
[139,0,184,189,177,169,149,161,170,180],
[170,157,0,144,126,180,158,171,161,163],
[151,152,197,0,162,171,187,162,162,175],
[157,164,215,179,0,157,149,149,139,175],
[157,172,161,170,184,0,179,188,149,173],
[155,192,183,154,192,162,0,166,165,143],
[184,180,170,179,192,153,175,0,165,178],
[146,171,180,179,202,192,176,176,0,187],
[157,161,178,166,166,168,198,163,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,193,179,176,168,172,167,181,162],
[162,0,172,194,155,169,172,172,163,153],
[148,169,0,182,153,153,158,135,154,156],
[162,147,159,0,150,159,158,164,146,138],
[165,186,188,191,0,174,186,179,175,177],
[173,172,188,182,167,0,178,179,177,164],
[169,169,183,183,155,163,0,156,171,168],
[174,169,206,177,162,162,185,0,174,155],
[160,178,187,195,166,164,170,167,0,165],
[179,188,185,203,164,177,173,186,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,28,97,146,96,96,0,194,137],
[244,0,272,126,244,99,269,95,166,166],
[313,69,0,100,146,140,232,95,235,140],
[244,215,241,0,241,71,241,95,166,166],
[195,97,195,100,0,168,260,95,263,140],
[245,242,201,270,173,0,338,173,167,232],
[245,72,109,100,81,3,0,3,167,140],
[341,246,246,246,246,168,338,0,263,168],
[147,175,106,175,78,174,174,78,0,137],
[204,175,201,175,201,109,201,173,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,172,170,177,169,183,176,174,182],
[153,0,172,164,161,167,161,166,156,179],
[169,169,0,177,158,163,166,182,159,176],
[171,177,164,0,154,179,166,167,172,172],
[164,180,183,187,0,181,194,179,188,195],
[172,174,178,162,160,0,166,161,157,176],
[158,180,175,175,147,175,0,164,164,177],
[165,175,159,174,162,180,177,0,163,162],
[167,185,182,169,153,184,177,178,0,193],
[159,162,165,169,146,165,164,179,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,143,143,162,158,169,167,156,176],
[178,0,164,167,168,172,167,161,168,166],
[198,177,0,177,184,152,183,192,177,177],
[198,174,164,0,170,159,164,161,181,176],
[179,173,157,171,0,157,169,176,174,166],
[183,169,189,182,184,0,176,169,180,190],
[172,174,158,177,172,165,0,172,190,169],
[174,180,149,180,165,172,169,0,171,173],
[185,173,164,160,167,161,151,170,0,153],
[165,175,164,165,175,151,172,168,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,229,162,212,270,279,279,258,212],
[71,0,154,190,145,203,292,161,256,135],
[112,187,0,197,256,231,232,183,247,232],
[179,151,144,0,152,180,213,213,341,187],
[129,196,85,189,0,290,286,178,332,210],
[71,138,110,161,51,0,160,96,206,70],
[62,49,109,128,55,181,0,60,163,0],
[62,180,158,128,163,245,281,0,213,91],
[83,85,94,0,9,135,178,128,0,128],
[129,206,109,154,131,271,341,250,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,179,186,165,160,159,157,181,171],
[166,0,179,189,182,161,170,167,177,170],
[162,162,0,190,168,166,152,162,179,176],
[155,152,151,0,151,146,152,148,160,166],
[176,159,173,190,0,170,158,174,184,184],
[181,180,175,195,171,0,171,168,194,185],
[182,171,189,189,183,170,0,170,200,184],
[184,174,179,193,167,173,171,0,187,188],
[160,164,162,181,157,147,141,154,0,159],
[170,171,165,175,157,156,157,153,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,153,178,191,171,172,175,173,189],
[169,0,165,167,171,163,177,169,170,179],
[188,176,0,169,188,185,181,188,173,178],
[163,174,172,0,193,179,175,178,190,179],
[150,170,153,148,0,164,162,168,161,174],
[170,178,156,162,177,0,172,170,188,189],
[169,164,160,166,179,169,0,166,184,175],
[166,172,153,163,173,171,175,0,172,176],
[168,171,168,151,180,153,157,169,0,170],
[152,162,163,162,167,152,166,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,143,125,124,140,124,158,139,150],
[182,0,137,159,160,180,148,138,173,135],
[198,204,0,182,201,170,208,186,183,153],
[216,182,159,0,202,173,202,180,196,163],
[217,181,140,139,0,178,179,172,154,154],
[201,161,171,168,163,0,187,150,166,140],
[217,193,133,139,162,154,0,176,169,148],
[183,203,155,161,169,191,165,0,161,189],
[202,168,158,145,187,175,172,180,0,161],
[191,206,188,178,187,201,193,152,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,173,157,169,163,194,174,154,190],
[151,0,175,160,174,155,191,174,167,173],
[168,166,0,154,184,184,195,158,171,158],
[184,181,187,0,180,192,195,191,167,177],
[172,167,157,161,0,178,190,185,152,176],
[178,186,157,149,163,0,198,156,163,187],
[147,150,146,146,151,143,0,131,163,161],
[167,167,183,150,156,185,210,0,188,200],
[187,174,170,174,189,178,178,153,0,193],
[151,168,183,164,165,154,180,141,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,192,168,173,177,179,174,184,178],
[155,0,175,167,163,168,178,172,176,171],
[149,166,0,162,154,170,165,167,164,163],
[173,174,179,0,172,169,177,164,164,168],
[168,178,187,169,0,173,183,182,178,166],
[164,173,171,172,168,0,178,170,170,170],
[162,163,176,164,158,163,0,167,178,164],
[167,169,174,177,159,171,174,0,174,173],
[157,165,177,177,163,171,163,167,0,173],
[163,170,178,173,175,171,177,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,181,181,179,169,187,178,170],
[160,0,169,172,165,164,162,171,170,163],
[171,172,0,178,172,180,174,177,165,168],
[160,169,163,0,174,175,163,175,174,171],
[160,176,169,167,0,168,168,174,164,166],
[162,177,161,166,173,0,169,177,169,169],
[172,179,167,178,173,172,0,175,163,170],
[154,170,164,166,167,164,166,0,164,164],
[163,171,176,167,177,172,178,177,0,163],
[171,178,173,170,175,172,171,177,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,155,183,164,163,169,157,161,155],
[177,0,163,183,162,172,178,181,176,170],
[186,178,0,176,171,179,198,166,177,162],
[158,158,165,0,172,181,182,168,155,147],
[177,179,170,169,0,168,186,178,167,179],
[178,169,162,160,173,0,169,182,157,153],
[172,163,143,159,155,172,0,156,153,155],
[184,160,175,173,163,159,185,0,181,166],
[180,165,164,186,174,184,188,160,0,154],
[186,171,179,194,162,188,186,175,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,189,188,203,215,210,186,209,170],
[126,0,167,189,209,180,178,191,194,171],
[152,174,0,173,217,186,190,173,184,175],
[153,152,168,0,182,181,168,176,192,143],
[138,132,124,159,0,152,162,150,174,134],
[126,161,155,160,189,0,159,171,179,147],
[131,163,151,173,179,182,0,170,201,150],
[155,150,168,165,191,170,171,0,180,151],
[132,147,157,149,167,162,140,161,0,139],
[171,170,166,198,207,194,191,190,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,199,144,182,164,148,159,197,193],
[196,0,172,185,175,161,123,182,191,174],
[142,169,0,134,127,188,135,165,141,182],
[197,156,207,0,193,190,191,172,213,221],
[159,166,214,148,0,206,140,205,177,192],
[177,180,153,151,135,0,116,142,181,166],
[193,218,206,150,201,225,0,187,189,186],
[182,159,176,169,136,199,154,0,232,181],
[144,150,200,128,164,160,152,109,0,136],
[148,167,159,120,149,175,155,160,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,168,187,215,163,192,182,179],
[162,0,154,153,164,201,167,179,167,158],
[161,187,0,175,170,184,174,186,194,157],
[173,188,166,0,183,186,148,176,186,153],
[154,177,171,158,0,181,165,165,180,172],
[126,140,157,155,160,0,129,164,154,143],
[178,174,167,193,176,212,0,173,188,192],
[149,162,155,165,176,177,168,0,185,150],
[159,174,147,155,161,187,153,156,0,147],
[162,183,184,188,169,198,149,191,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,186,176,172,175,165,161,168,186],
[166,0,185,177,172,169,164,180,175,172],
[155,156,0,148,159,151,142,158,145,170],
[165,164,193,0,186,180,153,184,162,183],
[169,169,182,155,0,169,156,182,171,172],
[166,172,190,161,172,0,174,163,152,178],
[176,177,199,188,185,167,0,186,166,174],
[180,161,183,157,159,178,155,0,166,180],
[173,166,196,179,170,189,175,175,0,175],
[155,169,171,158,169,163,167,161,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,164,149,147,164,175,149,165,172],
[185,0,178,178,164,167,198,167,170,177],
[177,163,0,171,163,171,189,183,175,175],
[192,163,170,0,151,181,191,189,154,167],
[194,177,178,190,0,181,191,165,169,172],
[177,174,170,160,160,0,189,164,178,173],
[166,143,152,150,150,152,0,156,139,147],
[192,174,158,152,176,177,185,0,164,171],
[176,171,166,187,172,163,202,177,0,191],
[169,164,166,174,169,168,194,170,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,176,166,163,176,151,137,168,168],
[154,0,149,139,161,156,139,146,147,146],
[165,192,0,182,174,174,173,180,190,167],
[175,202,159,0,192,165,162,148,171,170],
[178,180,167,149,0,176,159,156,160,153],
[165,185,167,176,165,0,163,154,172,159],
[190,202,168,179,182,178,0,165,165,181],
[204,195,161,193,185,187,176,0,187,176],
[173,194,151,170,181,169,176,154,0,171],
[173,195,174,171,188,182,160,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,150,160,138,184,163,178,166,171],
[177,0,150,162,158,184,158,181,156,174],
[191,191,0,183,159,185,182,182,174,179],
[181,179,158,0,164,183,154,158,187,176],
[203,183,182,177,0,185,158,180,182,178],
[157,157,156,158,156,0,135,143,170,164],
[178,183,159,187,183,206,0,183,177,179],
[163,160,159,183,161,198,158,0,173,163],
[175,185,167,154,159,171,164,168,0,173],
[170,167,162,165,163,177,162,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,173,154,151,169,167,167,175,161],
[182,0,188,173,164,176,179,145,172,165],
[168,153,0,160,158,173,153,140,160,158],
[187,168,181,0,184,188,188,155,175,178],
[190,177,183,157,0,188,189,178,163,183],
[172,165,168,153,153,0,170,149,153,169],
[174,162,188,153,152,171,0,141,158,167],
[174,196,201,186,163,192,200,0,175,188],
[166,169,181,166,178,188,183,166,0,187],
[180,176,183,163,158,172,174,153,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,182,167,174,167,181,181,184,179],
[156,0,174,166,169,163,162,170,168,166],
[159,167,0,162,168,165,176,164,169,169],
[174,175,179,0,181,171,178,163,177,173],
[167,172,173,160,0,152,182,167,163,167],
[174,178,176,170,189,0,166,156,179,167],
[160,179,165,163,159,175,0,169,167,169],
[160,171,177,178,174,185,172,0,173,177],
[157,173,172,164,178,162,174,168,0,172],
[162,175,172,168,174,174,172,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,172,180,161,178,204,180,185,145],
[182,0,191,184,160,175,208,186,194,162],
[169,150,0,155,179,165,194,161,178,138],
[161,157,186,0,165,175,196,169,175,140],
[180,181,162,176,0,164,177,178,170,161],
[163,166,176,166,177,0,199,162,162,177],
[137,133,147,145,164,142,0,148,158,120],
[161,155,180,172,163,179,193,0,171,161],
[156,147,163,166,171,179,183,170,0,136],
[196,179,203,201,180,164,221,180,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,163,180,175,183,171,166,174],
[171,0,176,178,180,189,205,174,188,162],
[166,165,0,158,172,170,169,171,170,143],
[178,163,183,0,174,170,171,157,186,168],
[161,161,169,167,0,177,191,178,193,163],
[166,152,171,171,164,0,162,174,182,168],
[158,136,172,170,150,179,0,158,194,149],
[170,167,170,184,163,167,183,0,186,170],
[175,153,171,155,148,159,147,155,0,158],
[167,179,198,173,178,173,192,171,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,161,163,173,169,197,224,152,153],
[173,0,191,153,176,190,197,201,181,196],
[180,150,0,145,156,188,217,216,153,199],
[178,188,196,0,184,197,229,219,152,186],
[168,165,185,157,0,223,193,196,143,208],
[172,151,153,144,118,0,201,189,140,170],
[144,144,124,112,148,140,0,190,154,147],
[117,140,125,122,145,152,151,0,116,181],
[189,160,188,189,198,201,187,225,0,196],
[188,145,142,155,133,171,194,160,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,172,187,175,174,173,173,192,173],
[180,0,152,184,172,169,196,162,200,185],
[169,189,0,216,204,194,199,207,206,157],
[154,157,125,0,148,145,155,148,169,160],
[166,169,137,193,0,164,191,164,184,161],
[167,172,147,196,177,0,177,176,177,159],
[168,145,142,186,150,164,0,159,163,171],
[168,179,134,193,177,165,182,0,167,176],
[149,141,135,172,157,164,178,174,0,176],
[168,156,184,181,180,182,170,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,191,169,166,162,168,177,208,190],
[158,0,170,169,179,175,162,166,177,185],
[150,171,0,175,159,168,143,158,182,168],
[172,172,166,0,165,164,164,167,163,175],
[175,162,182,176,0,187,171,177,184,174],
[179,166,173,177,154,0,164,176,173,167],
[173,179,198,177,170,177,0,165,185,175],
[164,175,183,174,164,165,176,0,187,173],
[133,164,159,178,157,168,156,154,0,167],
[151,156,173,166,167,174,166,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,160,170,169,175,171,171,164],
[163,0,186,171,182,173,181,171,172,162],
[167,155,0,158,161,151,168,166,157,167],
[181,170,183,0,175,179,184,176,164,164],
[171,159,180,166,0,164,179,187,166,174],
[172,168,190,162,177,0,162,189,163,176],
[166,160,173,157,162,179,0,174,166,170],
[170,170,175,165,154,152,167,0,154,178],
[170,169,184,177,175,178,175,187,0,178],
[177,179,174,177,167,165,171,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,202,186,192,170,184,171,150,158],
[173,0,185,177,176,193,155,167,173,142],
[139,156,0,157,170,148,153,159,147,148],
[155,164,184,0,149,166,162,162,169,158],
[149,165,171,192,0,178,154,174,147,156],
[171,148,193,175,163,0,155,155,170,170],
[157,186,188,179,187,186,0,181,175,180],
[170,174,182,179,167,186,160,0,135,154],
[191,168,194,172,194,171,166,206,0,154],
[183,199,193,183,185,171,161,187,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,145,113,161,96,112,143,164,137],
[170,0,119,113,152,143,138,185,188,135],
[196,222,0,189,188,132,173,206,188,166],
[228,228,152,0,210,152,145,236,229,161],
[180,189,153,131,0,126,136,156,179,123],
[245,198,209,189,215,0,159,244,204,181],
[229,203,168,196,205,182,0,217,184,168],
[198,156,135,105,185,97,124,0,138,113],
[177,153,153,112,162,137,157,203,0,141],
[204,206,175,180,218,160,173,228,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,0,161,271,271,231,341,271,161],
[231,0,231,231,341,271,231,341,341,161],
[341,110,0,231,271,271,341,341,341,271],
[180,110,110,0,271,271,180,341,271,110],
[70,0,70,70,0,161,70,231,180,0],
[70,70,70,70,180,0,70,341,180,0],
[110,110,0,161,271,271,0,341,271,161],
[0,0,0,0,110,0,0,0,110,0],
[70,0,0,70,161,161,70,231,0,0],
[180,180,70,231,341,341,180,341,341,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,137,155,158,153,164,150,110,139],
[230,0,173,131,185,160,167,157,168,166],
[204,168,0,157,157,160,181,154,177,169],
[186,210,184,0,197,156,196,181,166,190],
[183,156,184,144,0,192,179,185,165,165],
[188,181,181,185,149,0,151,175,161,170],
[177,174,160,145,162,190,0,190,167,189],
[191,184,187,160,156,166,151,0,179,190],
[231,173,164,175,176,180,174,162,0,168],
[202,175,172,151,176,171,152,151,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,248,197,241,269,192,210,140,279],
[141,0,243,79,292,226,176,205,191,245],
[93,98,0,7,153,198,142,181,109,196],
[144,262,334,0,264,308,334,231,158,248],
[100,49,188,77,0,180,121,176,44,105],
[72,115,143,33,161,0,143,148,91,201],
[149,165,199,7,220,198,0,205,163,204],
[131,136,160,110,165,193,136,0,63,147],
[201,150,232,183,297,250,178,278,0,279],
[62,96,145,93,236,140,137,194,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,141,137,169,153,171,148,150,168],
[177,0,167,172,162,181,177,161,156,185],
[200,174,0,168,167,173,170,148,160,185],
[204,169,173,0,183,182,178,183,178,193],
[172,179,174,158,0,160,184,176,157,191],
[188,160,168,159,181,0,185,161,170,199],
[170,164,171,163,157,156,0,158,171,189],
[193,180,193,158,165,180,183,0,173,189],
[191,185,181,163,184,171,170,168,0,173],
[173,156,156,148,150,142,152,152,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,194,169,184,188,175,166,172,128],
[175,0,181,205,203,208,208,185,191,157],
[147,160,0,150,153,218,150,146,138,143],
[172,136,191,0,205,210,164,176,174,143],
[157,138,188,136,0,197,152,174,157,110],
[153,133,123,131,144,0,123,127,128,104],
[166,133,191,177,189,218,0,154,173,118],
[175,156,195,165,167,214,187,0,178,175],
[169,150,203,167,184,213,168,163,0,121],
[213,184,198,198,231,237,223,166,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,184,190,173,183,186,179,175],
[173,0,168,184,164,160,168,164,171,164],
[178,173,0,198,191,180,180,177,189,167],
[157,157,143,0,175,142,156,160,171,148],
[151,177,150,166,0,160,159,181,148,153],
[168,181,161,199,181,0,168,173,179,160],
[158,173,161,185,182,173,0,152,168,155],
[155,177,164,181,160,168,189,0,168,156],
[162,170,152,170,193,162,173,173,0,158],
[166,177,174,193,188,181,186,185,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,181,180,166,161,166,175,168],
[163,0,159,150,169,162,149,147,159,149],
[170,182,0,176,177,188,170,165,165,172],
[160,191,165,0,165,182,159,169,165,173],
[161,172,164,176,0,170,150,163,167,162],
[175,179,153,159,171,0,171,161,160,169],
[180,192,171,182,191,170,0,170,172,177],
[175,194,176,172,178,180,171,0,166,172],
[166,182,176,176,174,181,169,175,0,171],
[173,192,169,168,179,172,164,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,165,154,155,165,164,168,144],
[168,0,173,172,167,165,171,185,180,162],
[170,168,0,177,173,172,161,186,171,153],
[176,169,164,0,158,156,156,165,169,156],
[187,174,168,183,0,170,188,188,183,165],
[186,176,169,185,171,0,161,177,179,172],
[176,170,180,185,153,180,0,174,176,173],
[177,156,155,176,153,164,167,0,161,154],
[173,161,170,172,158,162,165,180,0,151],
[197,179,188,185,176,169,168,187,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,175,196,155,170,176,181,168,200],
[177,0,170,148,157,161,168,155,172,182],
[166,171,0,165,145,163,167,187,173,167],
[145,193,176,0,156,171,177,153,176,187],
[186,184,196,185,0,161,167,155,178,183],
[171,180,178,170,180,0,168,195,186,183],
[165,173,174,164,174,173,0,166,161,180],
[160,186,154,188,186,146,175,0,174,186],
[173,169,168,165,163,155,180,167,0,181],
[141,159,174,154,158,158,161,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,158,145,186,176,171,148,161],
[174,0,194,178,172,185,164,170,175,170],
[182,147,0,169,159,171,157,166,150,154],
[183,163,172,0,173,189,176,165,154,174],
[196,169,182,168,0,183,160,167,142,181],
[155,156,170,152,158,0,156,155,141,162],
[165,177,184,165,181,185,0,178,157,166],
[170,171,175,176,174,186,163,0,155,184],
[193,166,191,187,199,200,184,186,0,185],
[180,171,187,167,160,179,175,157,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,112,181,156,156,130,155,134,117],
[189,0,141,191,176,227,192,175,209,215],
[229,200,0,199,135,222,197,161,178,187],
[160,150,142,0,97,183,207,163,145,188],
[185,165,206,244,0,198,203,243,195,224],
[185,114,119,158,143,0,117,190,144,215],
[211,149,144,134,138,224,0,140,210,192],
[186,166,180,178,98,151,201,0,184,164],
[207,132,163,196,146,197,131,157,0,188],
[224,126,154,153,117,126,149,177,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,169,193,186,181,207,181,164,169],
[182,0,165,199,174,181,191,193,179,183],
[172,176,0,195,179,174,198,175,169,166],
[148,142,146,0,172,149,173,184,127,135],
[155,167,162,169,0,180,184,195,157,160],
[160,160,167,192,161,0,167,169,138,150],
[134,150,143,168,157,174,0,159,144,141],
[160,148,166,157,146,172,182,0,140,161],
[177,162,172,214,184,203,197,201,0,154],
[172,158,175,206,181,191,200,180,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,194,196,191,186,170,174,187,168],
[148,0,169,176,161,175,153,157,167,157],
[147,172,0,203,170,191,159,189,165,171],
[145,165,138,0,157,167,154,170,138,154],
[150,180,171,184,0,191,158,181,162,175],
[155,166,150,174,150,0,140,163,156,155],
[171,188,182,187,183,201,0,184,163,169],
[167,184,152,171,160,178,157,0,162,161],
[154,174,176,203,179,185,178,179,0,186],
[173,184,170,187,166,186,172,180,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,190,171,170,184,186,191,177,190],
[149,0,175,173,167,174,169,178,166,182],
[151,166,0,169,178,164,171,182,164,175],
[170,168,172,0,171,172,177,176,171,168],
[171,174,163,170,0,179,187,181,175,172],
[157,167,177,169,162,0,169,180,170,176],
[155,172,170,164,154,172,0,183,163,173],
[150,163,159,165,160,161,158,0,154,156],
[164,175,177,170,166,171,178,187,0,183],
[151,159,166,173,169,165,168,185,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,170,146,179,160,139,163,167,151],
[156,0,162,148,167,149,141,147,163,157],
[171,179,0,176,179,165,147,163,168,184],
[195,193,165,0,191,170,170,168,184,177],
[162,174,162,150,0,158,156,172,170,141],
[181,192,176,171,183,0,151,158,189,179],
[202,200,194,171,185,190,0,167,191,180],
[178,194,178,173,169,183,174,0,176,163],
[174,178,173,157,171,152,150,165,0,167],
[190,184,157,164,200,162,161,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,162,155,145,170,184,156,172,174],
[155,0,162,163,145,138,182,143,147,163],
[179,179,0,180,149,185,172,144,151,166],
[186,178,161,0,159,153,173,145,185,183],
[196,196,192,182,0,205,199,168,189,213],
[171,203,156,188,136,0,184,156,199,189],
[157,159,169,168,142,157,0,142,158,190],
[185,198,197,196,173,185,199,0,165,212],
[169,194,190,156,152,142,183,176,0,194],
[167,178,175,158,128,152,151,129,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,166,174,176,175,157,184,181,180],
[137,0,130,142,160,160,147,146,148,136],
[175,211,0,159,199,192,167,174,179,179],
[167,199,182,0,198,176,179,180,177,168],
[165,181,142,143,0,167,162,147,166,166],
[166,181,149,165,174,0,157,155,151,161],
[184,194,174,162,179,184,0,170,183,185],
[157,195,167,161,194,186,171,0,162,169],
[160,193,162,164,175,190,158,179,0,166],
[161,205,162,173,175,180,156,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,150,164,110,152,163,149,148,214],
[208,0,153,174,120,169,207,137,171,217],
[191,188,0,189,163,209,222,177,181,162],
[177,167,152,0,172,147,160,181,141,178],
[231,221,178,169,0,154,225,198,187,207],
[189,172,132,194,187,0,158,165,178,173],
[178,134,119,181,116,183,0,161,164,164],
[192,204,164,160,143,176,180,0,178,206],
[193,170,160,200,154,163,177,163,0,188],
[127,124,179,163,134,168,177,135,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,137,177,149,184,171,174,213,194],
[173,0,185,149,150,214,172,179,231,183],
[204,156,0,151,164,203,174,185,198,212],
[164,192,190,0,113,193,164,154,223,191],
[192,191,177,228,0,170,220,195,233,193],
[157,127,138,148,171,0,165,159,217,210],
[170,169,167,177,121,176,0,181,209,183],
[167,162,156,187,146,182,160,0,230,212],
[128,110,143,118,108,124,132,111,0,131],
[147,158,129,150,148,131,158,129,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,175,158,157,153,169,164,171,172],
[183,0,188,165,156,159,167,160,173,177],
[166,153,0,154,153,153,164,160,162,163],
[183,176,187,0,173,172,180,178,178,168],
[184,185,188,168,0,183,190,175,184,186],
[188,182,188,169,158,0,187,179,168,171],
[172,174,177,161,151,154,0,165,167,172],
[177,181,181,163,166,162,176,0,170,176],
[170,168,179,163,157,173,174,171,0,168],
[169,164,178,173,155,170,169,165,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,172,154,131,156,184,194,220,177],
[145,0,186,132,145,175,166,182,208,175],
[169,155,0,192,181,165,197,201,222,171],
[187,209,149,0,207,193,167,230,211,201],
[210,196,160,134,0,171,186,215,198,176],
[185,166,176,148,170,0,164,180,181,172],
[157,175,144,174,155,177,0,205,165,174],
[147,159,140,111,126,161,136,0,162,127],
[121,133,119,130,143,160,176,179,0,138],
[164,166,170,140,165,169,167,214,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,147,148,165,161,156,160,187,140],
[192,0,157,148,170,156,184,148,187,190],
[194,184,0,171,196,161,199,177,199,189],
[193,193,170,0,203,189,184,189,210,206],
[176,171,145,138,0,136,178,155,161,162],
[180,185,180,152,205,0,149,163,205,185],
[185,157,142,157,163,192,0,168,208,191],
[181,193,164,152,186,178,173,0,189,205],
[154,154,142,131,180,136,133,152,0,150],
[201,151,152,135,179,156,150,136,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,205,168,194,204,144,150,182,194],
[161,0,172,160,159,188,158,153,166,169],
[136,169,0,114,146,151,148,154,149,183],
[173,181,227,0,169,239,183,188,177,225],
[147,182,195,172,0,198,140,167,190,177],
[137,153,190,102,143,0,168,152,191,164],
[197,183,193,158,201,173,0,192,182,207],
[191,188,187,153,174,189,149,0,204,192],
[159,175,192,164,151,150,159,137,0,139],
[147,172,158,116,164,177,134,149,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,154,172,174,171,172,170,169,185],
[179,0,163,179,174,181,190,174,173,190],
[187,178,0,161,174,178,164,171,162,185],
[169,162,180,0,180,166,182,179,166,174],
[167,167,167,161,0,154,174,177,155,162],
[170,160,163,175,187,0,177,175,174,187],
[169,151,177,159,167,164,0,151,158,192],
[171,167,170,162,164,166,190,0,159,189],
[172,168,179,175,186,167,183,182,0,177],
[156,151,156,167,179,154,149,152,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,155,142,161,157,176,164,150,136],
[193,0,164,161,186,175,183,192,186,167],
[186,177,0,158,166,164,179,183,184,156],
[199,180,183,0,179,165,200,178,172,172],
[180,155,175,162,0,160,177,178,182,160],
[184,166,177,176,181,0,185,174,185,176],
[165,158,162,141,164,156,0,159,164,156],
[177,149,158,163,163,167,182,0,178,154],
[191,155,157,169,159,156,177,163,0,161],
[205,174,185,169,181,165,185,187,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,178,165,164,168,178,172,181],
[159,0,158,169,170,160,161,155,178,171],
[171,183,0,176,168,174,172,151,161,173],
[163,172,165,0,153,158,162,156,166,170],
[176,171,173,188,0,170,162,177,182,163],
[177,181,167,183,171,0,179,175,178,177],
[173,180,169,179,179,162,0,162,177,185],
[163,186,190,185,164,166,179,0,166,173],
[169,163,180,175,159,163,164,175,0,174],
[160,170,168,171,178,164,156,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,213,174,192,184,183,183,165,213],
[159,0,179,155,173,176,164,170,167,154],
[128,162,0,158,177,162,159,153,149,184],
[167,186,183,0,187,175,178,185,157,190],
[149,168,164,154,0,164,148,148,150,179],
[157,165,179,166,177,0,180,181,175,175],
[158,177,182,163,193,161,0,178,159,189],
[158,171,188,156,193,160,163,0,164,197],
[176,174,192,184,191,166,182,177,0,197],
[128,187,157,151,162,166,152,144,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,184,176,180,183,180,175,176],
[161,0,174,179,175,181,171,162,162,175],
[173,167,0,168,168,180,177,167,178,176],
[157,162,173,0,167,163,174,169,151,179],
[165,166,173,174,0,176,166,157,162,167],
[161,160,161,178,165,0,158,164,154,161],
[158,170,164,167,175,183,0,152,171,176],
[161,179,174,172,184,177,189,0,176,177],
[166,179,163,190,179,187,170,165,0,182],
[165,166,165,162,174,180,165,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,160,163,169,160,168,169,179],
[167,0,171,164,173,168,171,161,171,172],
[176,170,0,164,177,184,170,157,166,164],
[181,177,177,0,176,187,168,173,174,185],
[178,168,164,165,0,180,165,165,163,172],
[172,173,157,154,161,0,164,153,158,156],
[181,170,171,173,176,177,0,170,166,172],
[173,180,184,168,176,188,171,0,157,173],
[172,170,175,167,178,183,175,184,0,180],
[162,169,177,156,169,185,169,168,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,148,161,155,158,151,168,161,164],
[191,0,173,174,173,171,165,171,184,174],
[193,168,0,171,171,165,186,181,171,175],
[180,167,170,0,170,168,175,187,183,165],
[186,168,170,171,0,170,172,185,180,162],
[183,170,176,173,171,0,188,180,181,185],
[190,176,155,166,169,153,0,174,167,166],
[173,170,160,154,156,161,167,0,166,170],
[180,157,170,158,161,160,174,175,0,158],
[177,167,166,176,179,156,175,171,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,182,174,190,228,188,171,201,177],
[207,0,202,158,206,178,136,159,201,213],
[159,139,0,117,154,136,137,154,139,164],
[167,183,224,0,172,194,182,144,163,184],
[151,135,187,169,0,162,150,157,148,183],
[113,163,205,147,179,0,120,113,114,174],
[153,205,204,159,191,221,0,196,171,209],
[170,182,187,197,184,228,145,0,175,164],
[140,140,202,178,193,227,170,166,0,188],
[164,128,177,157,158,167,132,177,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,178,294,203,149,149,205,133,174],
[189,0,165,241,232,216,175,237,247,208],
[163,176,0,221,217,140,160,221,200,162],
[47,100,120,0,101,120,124,191,138,127],
[138,109,124,240,0,205,158,206,174,194],
[192,125,201,221,136,0,205,178,121,160],
[192,166,181,217,183,136,0,164,165,173],
[136,104,120,150,135,163,177,0,185,104],
[208,94,141,203,167,220,176,156,0,139],
[167,133,179,214,147,181,168,237,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,178,178,185,181,188,168,154,195],
[182,0,184,181,205,171,206,170,165,211],
[163,157,0,160,171,159,184,155,138,180],
[163,160,181,0,192,165,193,165,159,200],
[156,136,170,149,0,138,161,148,134,167],
[160,170,182,176,203,0,193,159,173,187],
[153,135,157,148,180,148,0,147,139,168],
[173,171,186,176,193,182,194,0,159,191],
[187,176,203,182,207,168,202,182,0,198],
[146,130,161,141,174,154,173,150,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,162,172,156,165,173,189,164],
[174,0,173,180,177,173,164,170,190,176],
[162,168,0,154,178,158,161,159,168,164],
[179,161,187,0,186,151,165,174,197,173],
[169,164,163,155,0,155,157,159,186,171],
[185,168,183,190,186,0,168,183,202,165],
[176,177,180,176,184,173,0,161,193,175],
[168,171,182,167,182,158,180,0,187,175],
[152,151,173,144,155,139,148,154,0,160],
[177,165,177,168,170,176,166,166,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,156,181,176,148,137,152,177],
[176,0,157,141,145,179,154,147,145,161],
[172,184,0,144,169,195,137,147,160,161],
[185,200,197,0,188,199,176,163,169,181],
[160,196,172,153,0,194,168,177,169,167],
[165,162,146,142,147,0,132,154,144,142],
[193,187,204,165,173,209,0,146,183,170],
[204,194,194,178,164,187,195,0,165,192],
[189,196,181,172,172,197,158,176,0,182],
[164,180,180,160,174,199,171,149,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,172,161,164,168,164,156,155,169],
[183,0,172,179,174,184,170,164,167,164],
[169,169,0,171,181,185,170,172,179,175],
[180,162,170,0,173,177,165,155,159,182],
[177,167,160,168,0,179,163,165,158,159],
[173,157,156,164,162,0,169,166,157,162],
[177,171,171,176,178,172,0,167,180,172],
[185,177,169,186,176,175,174,0,181,170],
[186,174,162,182,183,184,161,160,0,166],
[172,177,166,159,182,179,169,171,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,177,169,168,180,168,161,184,156],
[192,0,184,186,184,185,175,166,179,176],
[164,157,0,168,168,182,149,179,183,154],
[172,155,173,0,169,159,172,161,190,174],
[173,157,173,172,0,157,171,161,159,170],
[161,156,159,182,184,0,161,160,175,169],
[173,166,192,169,170,180,0,179,187,171],
[180,175,162,180,180,181,162,0,188,184],
[157,162,158,151,182,166,154,153,0,183],
[185,165,187,167,171,172,170,157,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,181,187,176,155,171,174,185],
[173,0,172,177,183,184,173,162,172,172],
[167,169,0,178,187,178,171,175,177,183],
[160,164,163,0,177,164,159,168,177,174],
[154,158,154,164,0,176,156,168,176,189],
[165,157,163,177,165,0,158,169,151,172],
[186,168,170,182,185,183,0,189,185,180],
[170,179,166,173,173,172,152,0,170,180],
[167,169,164,164,165,190,156,171,0,169],
[156,169,158,167,152,169,161,161,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,151,155,159,171,162,164,170],
[181,0,183,171,167,169,165,168,178,176],
[169,158,0,151,158,161,158,162,173,163],
[190,170,190,0,173,171,189,177,187,190],
[186,174,183,168,0,172,177,169,181,179],
[182,172,180,170,169,0,180,169,166,185],
[170,176,183,152,164,161,0,170,168,165],
[179,173,179,164,172,172,171,0,175,186],
[177,163,168,154,160,175,173,166,0,176],
[171,165,178,151,162,156,176,155,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,171,177,172,169,167,168,179,168],
[158,0,154,158,160,172,169,174,189,153],
[170,187,0,172,161,156,164,169,179,166],
[164,183,169,0,170,170,169,173,164,167],
[169,181,180,171,0,180,176,177,193,177],
[172,169,185,171,161,0,174,170,173,186],
[174,172,177,172,165,167,0,170,172,162],
[173,167,172,168,164,171,171,0,173,147],
[162,152,162,177,148,168,169,168,0,162],
[173,188,175,174,164,155,179,194,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,164,152,167,178,170,169,153],
[181,0,155,181,163,158,176,174,166,159],
[182,186,0,170,175,180,204,169,171,172],
[177,160,171,0,168,192,187,170,173,173],
[189,178,166,173,0,184,196,189,172,187],
[174,183,161,149,157,0,185,174,167,157],
[163,165,137,154,145,156,0,156,152,164],
[171,167,172,171,152,167,185,0,160,169],
[172,175,170,168,169,174,189,181,0,166],
[188,182,169,168,154,184,177,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,154,180,151,149,146,147,144,163],
[182,0,173,172,176,150,162,143,159,185],
[187,168,0,182,177,158,150,151,162,170],
[161,169,159,0,158,154,160,162,160,170],
[190,165,164,183,0,171,149,179,169,171],
[192,191,183,187,170,0,186,158,171,194],
[195,179,191,181,192,155,0,162,152,148],
[194,198,190,179,162,183,179,0,178,183],
[197,182,179,181,172,170,189,163,0,160],
[178,156,171,171,170,147,193,158,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,183,176,173,176,180,173,182,166],
[179,0,182,155,157,175,181,176,187,174],
[158,159,0,159,155,156,165,175,157,157],
[165,186,182,0,171,178,168,166,171,166],
[168,184,186,170,0,194,194,174,184,182],
[165,166,185,163,147,0,167,155,162,167],
[161,160,176,173,147,174,0,164,145,161],
[168,165,166,175,167,186,177,0,177,161],
[159,154,184,170,157,179,196,164,0,162],
[175,167,184,175,159,174,180,180,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,185,187,188,170,165,171,182,194],
[162,0,195,198,194,176,173,170,200,197],
[156,146,0,166,189,166,151,164,184,183],
[154,143,175,0,211,180,147,180,202,192],
[153,147,152,130,0,158,105,152,176,154],
[171,165,175,161,183,0,150,183,184,163],
[176,168,190,194,236,191,0,186,195,228],
[170,171,177,161,189,158,155,0,186,202],
[159,141,157,139,165,157,146,155,0,174],
[147,144,158,149,187,178,113,139,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,147,156,163,150,151,165,171,160],
[182,0,159,175,176,172,179,181,167,175],
[194,182,0,168,178,171,160,186,187,170],
[185,166,173,0,179,169,171,176,186,174],
[178,165,163,162,0,166,152,180,174,169],
[191,169,170,172,175,0,166,184,180,164],
[190,162,181,170,189,175,0,191,186,180],
[176,160,155,165,161,157,150,0,156,151],
[170,174,154,155,167,161,155,185,0,164],
[181,166,171,167,172,177,161,190,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,162,168,165,182,174,173,171,163],
[155,0,161,159,163,159,151,169,164,164],
[179,180,0,160,153,176,171,170,173,160],
[173,182,181,0,171,170,183,180,177,173],
[176,178,188,170,0,186,176,177,172,182],
[159,182,165,171,155,0,175,182,177,169],
[167,190,170,158,165,166,0,169,174,168],
[168,172,171,161,164,159,172,0,182,164],
[170,177,168,164,169,164,167,159,0,171],
[178,177,181,168,159,172,173,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,169,158,165,164,174,190,188,181],
[186,0,155,174,193,174,197,198,202,176],
[172,186,0,165,186,171,174,195,204,192],
[183,167,176,0,183,173,182,178,191,179],
[176,148,155,158,0,165,159,181,178,169],
[177,167,170,168,176,0,184,179,192,184],
[167,144,167,159,182,157,0,174,152,170],
[151,143,146,163,160,162,167,0,172,166],
[153,139,137,150,163,149,189,169,0,155],
[160,165,149,162,172,157,171,175,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,152,151,200,155,186,166,164,184],
[186,0,165,159,168,145,162,168,152,192],
[189,176,0,155,197,157,188,180,145,212],
[190,182,186,0,174,156,201,187,158,216],
[141,173,144,167,0,178,177,176,158,190],
[186,196,184,185,163,0,159,173,180,196],
[155,179,153,140,164,182,0,144,164,181],
[175,173,161,154,165,168,197,0,181,186],
[177,189,196,183,183,161,177,160,0,208],
[157,149,129,125,151,145,160,155,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,150,155,155,157,133,141,146,160],
[182,0,192,182,183,175,163,170,158,185],
[191,149,0,159,166,168,165,159,152,170],
[186,159,182,0,165,169,168,167,154,167],
[186,158,175,176,0,188,150,170,179,173],
[184,166,173,172,153,0,160,156,149,156],
[208,178,176,173,191,181,0,181,169,180],
[200,171,182,174,171,185,160,0,171,189],
[195,183,189,187,162,192,172,170,0,172],
[181,156,171,174,168,185,161,152,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,140,164,146,130,153,140,154,158],
[176,0,149,180,159,160,158,154,181,204],
[201,192,0,178,161,185,205,169,186,190],
[177,161,163,0,177,136,154,156,162,184],
[195,182,180,164,0,145,167,179,173,181],
[211,181,156,205,196,0,200,176,192,208],
[188,183,136,187,174,141,0,177,165,182],
[201,187,172,185,162,165,164,0,179,210],
[187,160,155,179,168,149,176,162,0,189],
[183,137,151,157,160,133,159,131,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,181,162,186,177,183,167,188],
[166,0,163,163,175,158,173,174,176,185],
[164,178,0,168,165,179,186,176,176,174],
[160,178,173,0,171,165,179,171,175,179],
[179,166,176,170,0,173,191,170,179,188],
[155,183,162,176,168,0,169,182,169,185],
[164,168,155,162,150,172,0,166,176,175],
[158,167,165,170,171,159,175,0,164,178],
[174,165,165,166,162,172,165,177,0,193],
[153,156,167,162,153,156,166,163,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,117,153,200,159,96,204,170,189],
[161,0,241,138,205,174,165,267,194,203],
[224,100,0,143,232,212,114,260,113,186],
[188,203,198,0,235,209,165,221,206,262],
[141,136,109,106,0,186,147,209,167,219],
[182,167,129,132,155,0,190,188,197,200],
[245,176,227,176,194,151,0,233,221,219],
[137,74,81,120,132,153,108,0,105,137],
[171,147,228,135,174,144,120,236,0,133],
[152,138,155,79,122,141,122,204,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,171,181,180,155,180,164,184],
[170,0,167,174,183,170,164,165,172,169],
[168,174,0,176,178,160,159,159,160,156],
[170,167,165,0,175,170,167,168,167,166],
[160,158,163,166,0,167,158,167,156,175],
[161,171,181,171,174,0,173,165,166,176],
[186,177,182,174,183,168,0,183,177,170],
[161,176,182,173,174,176,158,0,165,180],
[177,169,181,174,185,175,164,176,0,172],
[157,172,185,175,166,165,171,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,176,168,180,178,189,180,183],
[162,0,164,174,177,173,165,188,174,161],
[175,177,0,171,176,183,181,185,168,168],
[165,167,170,0,173,169,161,173,180,169],
[173,164,165,168,0,165,151,185,170,160],
[161,168,158,172,176,0,165,184,156,167],
[163,176,160,180,190,176,0,180,175,171],
[152,153,156,168,156,157,161,0,166,159],
[161,167,173,161,171,185,166,175,0,181],
[158,180,173,172,181,174,170,182,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,184,182,185,182,180,173,172,182],
[202,0,202,165,194,159,155,192,163,205],
[157,139,0,153,186,149,130,163,145,156],
[159,176,188,0,172,151,135,173,178,192],
[156,147,155,169,0,153,100,154,169,168],
[159,182,192,190,188,0,127,203,175,148],
[161,186,211,206,241,214,0,204,192,206],
[168,149,178,168,187,138,137,0,122,161],
[169,178,196,163,172,166,149,219,0,174],
[159,136,185,149,173,193,135,180,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,222,176,176,177,142,182,173,189],
[142,0,202,150,165,190,177,188,165,193],
[119,139,0,88,138,163,122,121,130,120],
[165,191,253,0,231,235,184,145,202,193],
[165,176,203,110,0,161,116,141,142,182],
[164,151,178,106,180,0,162,178,156,166],
[199,164,219,157,225,179,0,201,195,203],
[159,153,220,196,200,163,140,0,161,161],
[168,176,211,139,199,185,146,180,0,156],
[152,148,221,148,159,175,138,180,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,161,177,177,175,163,168,168],
[170,0,154,150,151,164,152,159,160,165],
[172,187,0,166,155,157,181,165,179,160],
[180,191,175,0,161,175,183,179,183,156],
[164,190,186,180,0,178,196,183,179,186],
[164,177,184,166,163,0,191,181,162,156],
[166,189,160,158,145,150,0,150,163,150],
[178,182,176,162,158,160,191,0,184,164],
[173,181,162,158,162,179,178,157,0,178],
[173,176,181,185,155,185,191,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,189,201,167,180,172,171,184,191],
[171,0,191,189,174,154,176,166,190,162],
[152,150,0,186,173,167,175,152,167,168],
[140,152,155,0,155,147,156,133,160,157],
[174,167,168,186,0,174,176,190,175,180],
[161,187,174,194,167,0,161,175,184,171],
[169,165,166,185,165,180,0,163,180,177],
[170,175,189,208,151,166,178,0,188,185],
[157,151,174,181,166,157,161,153,0,157],
[150,179,173,184,161,170,164,156,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,151,150,169,174,171,155,174,162],
[158,0,154,151,142,161,171,152,173,178],
[190,187,0,146,163,184,199,181,177,184],
[191,190,195,0,170,206,194,187,180,196],
[172,199,178,171,0,194,186,170,174,172],
[167,180,157,135,147,0,191,152,169,174],
[170,170,142,147,155,150,0,157,159,173],
[186,189,160,154,171,189,184,0,189,191],
[167,168,164,161,167,172,182,152,0,171],
[179,163,157,145,169,167,168,150,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,196,176,177,180,165,181,195,181],
[158,0,190,167,176,172,159,168,171,178],
[145,151,0,156,165,148,150,150,157,148],
[165,174,185,0,176,170,163,164,182,177],
[164,165,176,165,0,174,160,170,179,161],
[161,169,193,171,167,0,159,162,171,165],
[176,182,191,178,181,182,0,164,197,173],
[160,173,191,177,171,179,177,0,187,168],
[146,170,184,159,162,170,144,154,0,163],
[160,163,193,164,180,176,168,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,161,153,163,161,167,151,168,183],
[185,0,165,189,165,173,153,172,177,189],
[180,176,0,158,144,155,168,174,165,164],
[188,152,183,0,157,164,157,190,164,170],
[178,176,197,184,0,174,158,161,201,176],
[180,168,186,177,167,0,171,170,188,184],
[174,188,173,184,183,170,0,174,193,167],
[190,169,167,151,180,171,167,0,181,170],
[173,164,176,177,140,153,148,160,0,165],
[158,152,177,171,165,157,174,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,156,174,164,172,167,171,170,176],
[184,0,165,177,171,170,170,154,163,175],
[185,176,0,188,161,190,175,175,186,182],
[167,164,153,0,164,172,154,149,177,176],
[177,170,180,177,0,177,176,166,170,173],
[169,171,151,169,164,0,160,145,161,164],
[174,171,166,187,165,181,0,169,165,160],
[170,187,166,192,175,196,172,0,170,188],
[171,178,155,164,171,180,176,171,0,174],
[165,166,159,165,168,177,181,153,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,165,161,171,161,184,161,172],
[165,0,193,186,186,181,174,173,182,184],
[160,148,0,149,148,160,144,161,153,167],
[176,155,192,0,163,170,154,162,155,176],
[180,155,193,178,0,172,156,165,165,176],
[170,160,181,171,169,0,159,172,156,165],
[180,167,197,187,185,182,0,175,154,190],
[157,168,180,179,176,169,166,0,164,177],
[180,159,188,186,176,185,187,177,0,178],
[169,157,174,165,165,176,151,164,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,179,217,171,207,169,181,162,186],
[132,0,146,176,127,170,121,135,131,137],
[162,195,0,196,159,187,156,182,170,196],
[124,165,145,0,134,190,134,171,146,172],
[170,214,182,207,0,196,177,178,167,189],
[134,171,154,151,145,0,136,153,144,177],
[172,220,185,207,164,205,0,170,158,181],
[160,206,159,170,163,188,171,0,133,178],
[179,210,171,195,174,197,183,208,0,158],
[155,204,145,169,152,164,160,163,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,161,174,187,180,174,185,172],
[177,0,161,176,175,177,166,185,167,161],
[176,180,0,185,203,189,175,197,196,163],
[180,165,156,0,199,184,182,185,169,167],
[167,166,138,142,0,165,165,161,178,156],
[154,164,152,157,176,0,155,157,167,142],
[161,175,166,159,176,186,0,178,177,162],
[167,156,144,156,180,184,163,0,182,169],
[156,174,145,172,163,174,164,159,0,154],
[169,180,178,174,185,199,179,172,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,200,187,177,223,151,160,246,188],
[111,0,188,182,153,171,187,182,230,193],
[141,153,0,153,164,180,165,128,180,149],
[154,159,188,0,173,165,174,155,190,160],
[164,188,177,168,0,182,192,156,222,168],
[118,170,161,176,159,0,162,142,188,153],
[190,154,176,167,149,179,0,152,193,201],
[181,159,213,186,185,199,189,0,206,205],
[95,111,161,151,119,153,148,135,0,157],
[153,148,192,181,173,188,140,136,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,193,188,189,163,194,170,177,181],
[148,0,195,183,158,160,196,175,174,172],
[148,146,0,154,157,140,177,167,147,142],
[153,158,187,0,149,146,168,167,161,166],
[152,183,184,192,0,180,179,141,177,164],
[178,181,201,195,161,0,208,162,177,168],
[147,145,164,173,162,133,0,127,177,123],
[171,166,174,174,200,179,214,0,176,170],
[164,167,194,180,164,164,164,165,0,188],
[160,169,199,175,177,173,218,171,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,164,179,157,181,157,150,176],
[180,0,157,148,158,152,159,152,140,163],
[182,184,0,164,169,177,174,157,183,190],
[177,193,177,0,196,172,182,159,170,148],
[162,183,172,145,0,158,163,139,148,159],
[184,189,164,169,183,0,160,196,171,151],
[160,182,167,159,178,181,0,171,170,174],
[184,189,184,182,202,145,170,0,180,186],
[191,201,158,171,193,170,171,161,0,172],
[165,178,151,193,182,190,167,155,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,190,169,193,173,173,189,173],
[170,0,177,189,163,176,149,176,182,174],
[167,164,0,180,175,171,161,169,188,182],
[151,152,161,0,156,178,151,155,174,179],
[172,178,166,185,0,191,184,190,189,186],
[148,165,170,163,150,0,161,162,174,165],
[168,192,180,190,157,180,0,170,189,165],
[168,165,172,186,151,179,171,0,177,172],
[152,159,153,167,152,167,152,164,0,166],
[168,167,159,162,155,176,176,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,180,162,181,180,152,173,162,186],
[187,0,202,188,193,187,168,206,191,203],
[161,139,0,162,165,160,152,159,153,166],
[179,153,179,0,172,160,175,175,176,196],
[160,148,176,169,0,180,160,172,150,169],
[161,154,181,181,161,0,150,173,156,178],
[189,173,189,166,181,191,0,204,168,186],
[168,135,182,166,169,168,137,0,168,170],
[179,150,188,165,191,185,173,173,0,204],
[155,138,175,145,172,163,155,171,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,172,185,177,174,169,165,159],
[176,0,184,164,181,180,184,167,175,167],
[179,157,0,173,174,178,183,175,174,181],
[169,177,168,0,175,183,184,182,166,175],
[156,160,167,166,0,173,177,164,167,167],
[164,161,163,158,168,0,182,168,164,163],
[167,157,158,157,164,159,0,165,166,156],
[172,174,166,159,177,173,176,0,149,174],
[176,166,167,175,174,177,175,192,0,172],
[182,174,160,166,174,178,185,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,159,177,180,158,189,180,160],
[166,0,155,143,144,173,163,192,161,154],
[178,186,0,185,185,184,167,187,186,180],
[182,198,156,0,175,171,153,194,183,186],
[164,197,156,166,0,178,158,191,162,181],
[161,168,157,170,163,0,176,189,171,160],
[183,178,174,188,183,165,0,189,189,174],
[152,149,154,147,150,152,152,0,142,149],
[161,180,155,158,179,170,152,199,0,170],
[181,187,161,155,160,181,167,192,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,158,155,132,167,122,155,148,152],
[179,0,167,148,141,180,149,179,153,163],
[183,174,0,169,158,190,185,185,163,153],
[186,193,172,0,161,195,157,189,174,183],
[209,200,183,180,0,183,164,200,199,179],
[174,161,151,146,158,0,149,161,155,158],
[219,192,156,184,177,192,0,203,162,174],
[186,162,156,152,141,180,138,0,149,163],
[193,188,178,167,142,186,179,192,0,173],
[189,178,188,158,162,183,167,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,168,178,156,172,179,177,155],
[172,0,177,174,177,160,168,172,161,170],
[174,164,0,179,197,181,170,176,170,170],
[173,167,162,0,179,163,165,158,172,177],
[163,164,144,162,0,158,154,163,138,164],
[185,181,160,178,183,0,179,172,180,170],
[169,173,171,176,187,162,0,167,173,164],
[162,169,165,183,178,169,174,0,168,159],
[164,180,171,169,203,161,168,173,0,156],
[186,171,171,164,177,171,177,182,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,171,181,182,176,178,173,167,169],
[153,0,159,172,169,159,174,165,169,171],
[170,182,0,180,185,166,169,175,184,174],
[160,169,161,0,181,168,163,168,162,164],
[159,172,156,160,0,161,154,159,162,162],
[165,182,175,173,180,0,184,170,170,182],
[163,167,172,178,187,157,0,163,173,174],
[168,176,166,173,182,171,178,0,177,178],
[174,172,157,179,179,171,168,164,0,157],
[172,170,167,177,179,159,167,163,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,167,177,166,187,192,153,198],
[165,0,159,176,193,187,197,192,180,206],
[177,182,0,191,172,171,188,187,168,187],
[174,165,150,0,182,167,167,160,141,180],
[164,148,169,159,0,162,192,189,178,193],
[175,154,170,174,179,0,188,190,181,175],
[154,144,153,174,149,153,0,161,139,174],
[149,149,154,181,152,151,180,0,142,169],
[188,161,173,200,163,160,202,199,0,182],
[143,135,154,161,148,166,167,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,172,174,153,172,178,168,188],
[168,0,178,161,176,160,170,184,178,170],
[170,163,0,175,189,155,157,181,166,187],
[169,180,166,0,189,162,160,178,174,184],
[167,165,152,152,0,145,160,163,160,176],
[188,181,186,179,196,0,169,207,178,198],
[169,171,184,181,181,172,0,171,166,193],
[163,157,160,163,178,134,170,0,168,184],
[173,163,175,167,181,163,175,173,0,178],
[153,171,154,157,165,143,148,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,130,184,141,193,168,164,185,169],
[156,0,182,195,186,189,174,131,182,211],
[211,159,0,169,194,223,189,177,175,205],
[157,146,172,0,162,203,156,159,130,218],
[200,155,147,179,0,196,170,118,152,198],
[148,152,118,138,145,0,172,71,121,104],
[173,167,152,185,171,169,0,120,161,214],
[177,210,164,182,223,270,221,0,219,240],
[156,159,166,211,189,220,180,122,0,205],
[172,130,136,123,143,237,127,101,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,191,179,161,168,160,173,174],
[175,0,161,188,166,158,150,171,182,174],
[171,180,0,173,159,158,158,174,166,166],
[150,153,168,0,154,157,169,137,163,146],
[162,175,182,187,0,178,187,187,189,183],
[180,183,183,184,163,0,176,164,161,193],
[173,191,183,172,154,165,0,166,167,174],
[181,170,167,204,154,177,175,0,167,183],
[168,159,175,178,152,180,174,174,0,175],
[167,167,175,195,158,148,167,158,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,178,172,159,177,157,172,170],
[170,0,165,168,155,168,162,165,161,161],
[171,176,0,171,169,162,172,163,175,176],
[163,173,170,0,153,147,169,158,164,171],
[169,186,172,188,0,180,177,167,178,178],
[182,173,179,194,161,0,173,171,171,181],
[164,179,169,172,164,168,0,158,170,187],
[184,176,178,183,174,170,183,0,183,179],
[169,180,166,177,163,170,171,158,0,173],
[171,180,165,170,163,160,154,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,199,173,192,174,174,147,184,178],
[180,0,209,217,205,177,161,187,193,197],
[142,132,0,174,161,111,133,148,178,169],
[168,124,167,0,168,146,149,136,151,134],
[149,136,180,173,0,161,131,128,184,163],
[167,164,230,195,180,0,170,172,201,179],
[167,180,208,192,210,171,0,179,206,202],
[194,154,193,205,213,169,162,0,180,148],
[157,148,163,190,157,140,135,161,0,132],
[163,144,172,207,178,162,139,193,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,160,178,166,169,183,168,175],
[170,0,162,169,165,180,166,181,173,183],
[173,179,0,166,171,165,178,186,175,192],
[181,172,175,0,173,190,189,191,168,196],
[163,176,170,168,0,167,170,170,167,183],
[175,161,176,151,174,0,176,172,160,193],
[172,175,163,152,171,165,0,178,162,179],
[158,160,155,150,171,169,163,0,162,184],
[173,168,166,173,174,181,179,179,0,185],
[166,158,149,145,158,148,162,157,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,98,129,259,108,233,154,175,170],
[112,0,82,149,181,106,168,103,156,133],
[243,259,0,239,254,194,241,231,233,161],
[212,192,102,0,298,188,211,183,153,153],
[82,160,87,43,0,110,98,36,99,94],
[233,235,147,153,231,0,185,156,170,172],
[108,173,100,130,243,156,0,117,161,159],
[187,238,110,158,305,185,224,0,171,187],
[166,185,108,188,242,171,180,170,0,171],
[171,208,180,188,247,169,182,154,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,161,167,159,165,173,157,154],
[175,0,188,181,184,167,181,175,164,156],
[171,153,0,164,163,159,180,175,164,174],
[180,160,177,0,188,163,170,175,174,171],
[174,157,178,153,0,176,169,167,178,160],
[182,174,182,178,165,0,191,174,167,161],
[176,160,161,171,172,150,0,161,144,146],
[168,166,166,166,174,167,180,0,163,161],
[184,177,177,167,163,174,197,178,0,177],
[187,185,167,170,181,180,195,180,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,165,174,182,165,174,170,158],
[167,0,179,161,176,182,164,184,164,167],
[172,162,0,155,165,184,164,175,170,163],
[176,180,186,0,169,181,168,172,163,159],
[167,165,176,172,0,181,161,190,170,159],
[159,159,157,160,160,0,155,159,153,157],
[176,177,177,173,180,186,0,178,170,174],
[167,157,166,169,151,182,163,0,156,154],
[171,177,171,178,171,188,171,185,0,156],
[183,174,178,182,182,184,167,187,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,183,178,185,164,184,179,176,180],
[167,0,190,170,178,171,177,170,176,172],
[158,151,0,176,176,156,174,177,172,171],
[163,171,165,0,184,160,182,161,178,183],
[156,163,165,157,0,160,168,158,162,175],
[177,170,185,181,181,0,171,175,175,187],
[157,164,167,159,173,170,0,175,161,172],
[162,171,164,180,183,166,166,0,168,182],
[165,165,169,163,179,166,180,173,0,182],
[161,169,170,158,166,154,169,159,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,166,168,165,151,159,139,167,191],
[181,0,183,174,160,168,201,172,180,199],
[175,158,0,177,174,172,166,167,192,175],
[173,167,164,0,175,156,194,171,162,182],
[176,181,167,166,0,180,172,181,177,206],
[190,173,169,185,161,0,180,189,187,186],
[182,140,175,147,169,161,0,167,153,180],
[202,169,174,170,160,152,174,0,159,201],
[174,161,149,179,164,154,188,182,0,191],
[150,142,166,159,135,155,161,140,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,165,158,168,171,165,163,163,160],
[181,0,174,170,172,182,167,177,171,176],
[176,167,0,174,189,179,175,166,164,162],
[183,171,167,0,183,166,179,179,178,174],
[173,169,152,158,0,163,162,155,179,153],
[170,159,162,175,178,0,178,162,171,161],
[176,174,166,162,179,163,0,181,177,178],
[178,164,175,162,186,179,160,0,174,166],
[178,170,177,163,162,170,164,167,0,160],
[181,165,179,167,188,180,163,175,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,184,174,203,173,173,171,186,182],
[174,0,159,166,199,168,172,161,170,186],
[157,182,0,159,199,161,167,161,177,176],
[167,175,182,0,202,174,168,164,165,165],
[138,142,142,139,0,149,143,141,163,170],
[168,173,180,167,192,0,160,183,170,170],
[168,169,174,173,198,181,0,188,193,181],
[170,180,180,177,200,158,153,0,188,186],
[155,171,164,176,178,171,148,153,0,177],
[159,155,165,176,171,171,160,155,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,189,162,150,144,167,148,147,141],
[186,0,200,166,180,184,182,182,156,189],
[152,141,0,131,159,157,157,177,144,162],
[179,175,210,0,214,177,167,190,170,188],
[191,161,182,127,0,158,159,163,169,163],
[197,157,184,164,183,0,149,155,171,165],
[174,159,184,174,182,192,0,207,185,185],
[193,159,164,151,178,186,134,0,180,165],
[194,185,197,171,172,170,156,161,0,181],
[200,152,179,153,178,176,156,176,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,191,166,168,162,172,194,170,163],
[172,0,178,164,144,169,193,177,158,174],
[150,163,0,171,168,153,175,184,150,165],
[175,177,170,0,155,164,195,197,168,168],
[173,197,173,186,0,172,187,187,167,170],
[179,172,188,177,169,0,186,169,177,174],
[169,148,166,146,154,155,0,164,156,160],
[147,164,157,144,154,172,177,0,165,156],
[171,183,191,173,174,164,185,176,0,169],
[178,167,176,173,171,167,181,185,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,164,164,151,166,170,156,172,154],
[188,0,172,168,163,166,184,163,194,176],
[177,169,0,177,150,151,167,154,174,162],
[177,173,164,0,159,170,166,185,180,172],
[190,178,191,182,0,170,178,182,183,180],
[175,175,190,171,171,0,173,168,168,170],
[171,157,174,175,163,168,0,162,171,176],
[185,178,187,156,159,173,179,0,183,179],
[169,147,167,161,158,173,170,158,0,169],
[187,165,179,169,161,171,165,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,120,205,140,203,161,205,165,220],
[170,0,131,207,138,251,140,218,208,221],
[221,210,0,190,152,224,199,235,182,204],
[136,134,151,0,130,189,113,175,176,204],
[201,203,189,211,0,251,143,246,217,207],
[138,90,117,152,90,0,106,129,182,156],
[180,201,142,228,198,235,0,230,206,232],
[136,123,106,166,95,212,111,0,173,157],
[176,133,159,165,124,159,135,168,0,185],
[121,120,137,137,134,185,109,184,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,188,189,178,169,198,191,176,186],
[146,0,164,153,171,173,155,168,155,161],
[153,177,0,173,174,170,165,166,170,173],
[152,188,168,0,169,172,173,180,172,169],
[163,170,167,172,0,181,175,176,168,170],
[172,168,171,169,160,0,171,178,174,176],
[143,186,176,168,166,170,0,177,177,164],
[150,173,175,161,165,163,164,0,158,172],
[165,186,171,169,173,167,164,183,0,167],
[155,180,168,172,171,165,177,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,190,175,182,166,206,167,178,183],
[196,0,210,166,185,203,216,210,176,171],
[151,131,0,173,140,172,183,174,144,138],
[166,175,168,0,164,173,189,169,162,155],
[159,156,201,177,0,166,183,187,145,148],
[175,138,169,168,175,0,182,199,152,173],
[135,125,158,152,158,159,0,155,122,147],
[174,131,167,172,154,142,186,0,139,128],
[163,165,197,179,196,189,219,202,0,163],
[158,170,203,186,193,168,194,213,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,162,212,267,183,188,205,170,170],
[158,0,78,154,189,173,149,171,154,165],
[179,263,0,187,193,181,231,212,194,167],
[129,187,154,0,170,158,170,120,142,161],
[74,152,148,171,0,158,129,160,125,156],
[158,168,160,183,183,0,131,216,171,177],
[153,192,110,171,212,210,0,214,139,177],
[136,170,129,221,181,125,127,0,122,154],
[171,187,147,199,216,170,202,219,0,166],
[171,176,174,180,185,164,164,187,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,182,169,158,172,179,182,180,173],
[173,0,187,152,179,173,163,154,167,171],
[159,154,0,175,161,140,172,161,160,187],
[172,189,166,0,163,151,169,171,147,171],
[183,162,180,178,0,155,174,170,161,181],
[169,168,201,190,186,0,160,176,177,166],
[162,178,169,172,167,181,0,156,162,173],
[159,187,180,170,171,165,185,0,171,181],
[161,174,181,194,180,164,179,170,0,198],
[168,170,154,170,160,175,168,160,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,153,148,193,160,181,169,173,158],
[181,0,168,172,196,177,184,174,177,176],
[188,173,0,163,191,170,184,160,178,176],
[193,169,178,0,190,169,174,171,173,165],
[148,145,150,151,0,140,156,155,162,153],
[181,164,171,172,201,0,180,173,169,182],
[160,157,157,167,185,161,0,157,168,165],
[172,167,181,170,186,168,184,0,182,171],
[168,164,163,168,179,172,173,159,0,175],
[183,165,165,176,188,159,176,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,157,164,175,172,175,176,155,175],
[165,0,161,170,156,162,151,169,146,168],
[184,180,0,187,183,172,171,186,165,183],
[177,171,154,0,175,168,169,176,156,166],
[166,185,158,166,0,161,167,180,168,173],
[169,179,169,173,180,0,174,187,174,172],
[166,190,170,172,174,167,0,188,168,179],
[165,172,155,165,161,154,153,0,173,165],
[186,195,176,185,173,167,173,168,0,178],
[166,173,158,175,168,169,162,176,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,162,164,169,163,167,163,159,178],
[169,0,152,159,169,164,165,164,159,172],
[179,189,0,179,181,167,181,170,173,188],
[177,182,162,0,164,166,158,164,168,188],
[172,172,160,177,0,178,171,160,159,180],
[178,177,174,175,163,0,178,172,161,195],
[174,176,160,183,170,163,0,156,164,191],
[178,177,171,177,181,169,185,0,178,178],
[182,182,168,173,182,180,177,163,0,179],
[163,169,153,153,161,146,150,163,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,176,184,188,177,192,179,188,161],
[153,0,153,179,163,163,149,137,162,147],
[165,188,0,184,185,161,179,163,179,180],
[157,162,157,0,170,146,183,160,171,180],
[153,178,156,171,0,165,166,144,175,151],
[164,178,180,195,176,0,172,152,186,165],
[149,192,162,158,175,169,0,156,178,161],
[162,204,178,181,197,189,185,0,183,191],
[153,179,162,170,166,155,163,158,0,172],
[180,194,161,161,190,176,180,150,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,173,164,188,133,181,143,166,176],
[220,0,157,190,205,183,186,170,225,196],
[168,184,0,188,188,168,193,172,181,219],
[177,151,153,0,192,123,174,157,165,198],
[153,136,153,149,0,146,124,142,153,195],
[208,158,173,218,195,0,198,193,184,190],
[160,155,148,167,217,143,0,158,169,205],
[198,171,169,184,199,148,183,0,179,206],
[175,116,160,176,188,157,172,162,0,153],
[165,145,122,143,146,151,136,135,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,178,156,162,158,161,157,150],
[171,0,182,191,172,170,172,171,181,161],
[166,159,0,160,153,160,163,153,169,156],
[163,150,181,0,161,170,167,161,163,151],
[185,169,188,180,0,175,166,155,187,164],
[179,171,181,171,166,0,175,166,183,165],
[183,169,178,174,175,166,0,165,173,172],
[180,170,188,180,186,175,176,0,181,159],
[184,160,172,178,154,158,168,160,0,150],
[191,180,185,190,177,176,169,182,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,173,168,182,169,173,164,160,154],
[189,0,183,173,178,184,165,190,168,170],
[168,158,0,149,177,173,149,168,149,166],
[173,168,192,0,179,182,158,163,165,175],
[159,163,164,162,0,167,158,154,170,153],
[172,157,168,159,174,0,164,171,168,151],
[168,176,192,183,183,177,0,170,162,173],
[177,151,173,178,187,170,171,0,156,163],
[181,173,192,176,171,173,179,185,0,165],
[187,171,175,166,188,190,168,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,169,173,173,163,171,167,165],
[172,0,166,173,171,180,159,181,172,160],
[174,175,0,176,171,182,192,180,186,160],
[172,168,165,0,161,176,169,174,163,146],
[168,170,170,180,0,164,162,174,166,164],
[168,161,159,165,177,0,150,172,157,169],
[178,182,149,172,179,191,0,187,171,164],
[170,160,161,167,167,169,154,0,163,150],
[174,169,155,178,175,184,170,178,0,175],
[176,181,181,195,177,172,177,191,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,165,189,185,162,171,166,184,155],
[187,0,192,178,194,183,178,187,198,167],
[176,149,0,179,172,161,160,186,180,164],
[152,163,162,0,180,160,155,169,171,163],
[156,147,169,161,0,138,167,155,168,179],
[179,158,180,181,203,0,157,201,202,172],
[170,163,181,186,174,184,0,167,193,164],
[175,154,155,172,186,140,174,0,194,172],
[157,143,161,170,173,139,148,147,0,155],
[186,174,177,178,162,169,177,169,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,180,136,192,148,169,161,156,150],
[184,0,168,154,200,156,165,179,173,162],
[161,173,0,138,174,139,162,133,147,136],
[205,187,203,0,203,170,185,159,188,185],
[149,141,167,138,0,137,159,136,130,133],
[193,185,202,171,204,0,168,176,166,182],
[172,176,179,156,182,173,0,169,188,157],
[180,162,208,182,205,165,172,0,186,178],
[185,168,194,153,211,175,153,155,0,165],
[191,179,205,156,208,159,184,163,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,180,174,179,189,171,170,168,202],
[163,0,135,154,155,160,168,160,161,158],
[161,206,0,175,203,202,173,209,181,193],
[167,187,166,0,174,190,165,182,169,176],
[162,186,138,167,0,182,161,172,162,173],
[152,181,139,151,159,0,171,166,161,170],
[170,173,168,176,180,170,0,174,186,178],
[171,181,132,159,169,175,167,0,172,169],
[173,180,160,172,179,180,155,169,0,164],
[139,183,148,165,168,171,163,172,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,187,163,198,180,184,183,182,185],
[154,0,160,154,170,146,165,148,164,172],
[154,181,0,158,180,170,178,167,170,175],
[178,187,183,0,202,174,191,190,167,212],
[143,171,161,139,0,149,162,165,158,179],
[161,195,171,167,192,0,174,177,176,197],
[157,176,163,150,179,167,0,176,159,169],
[158,193,174,151,176,164,165,0,166,193],
[159,177,171,174,183,165,182,175,0,182],
[156,169,166,129,162,144,172,148,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,191,161,134,173,179,168,131],
[170,0,160,179,169,170,167,187,158,153],
[178,181,0,173,191,145,182,188,176,172],
[150,162,168,0,168,150,155,170,148,153],
[180,172,150,173,0,154,180,187,153,161],
[207,171,196,191,187,0,201,193,166,177],
[168,174,159,186,161,140,0,173,155,143],
[162,154,153,171,154,148,168,0,156,150],
[173,183,165,193,188,175,186,185,0,157],
[210,188,169,188,180,164,198,191,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,153,170,176,172,177,161,186,159],
[174,0,170,183,162,170,160,151,188,148],
[188,171,0,166,169,185,169,170,205,162],
[171,158,175,0,160,188,179,160,194,151],
[165,179,172,181,0,155,153,162,169,153],
[169,171,156,153,186,0,162,156,193,148],
[164,181,172,162,188,179,0,179,188,171],
[180,190,171,181,179,185,162,0,205,177],
[155,153,136,147,172,148,153,136,0,134],
[182,193,179,190,188,193,170,164,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,175,179,178,181,190,165,177,178],
[173,0,176,163,171,168,178,170,176,177],
[166,165,0,172,178,179,167,161,181,164],
[162,178,169,0,194,193,186,179,181,192],
[163,170,163,147,0,184,165,166,164,170],
[160,173,162,148,157,0,176,136,175,155],
[151,163,174,155,176,165,0,163,172,169],
[176,171,180,162,175,205,178,0,177,178],
[164,165,160,160,177,166,169,164,0,165],
[163,164,177,149,171,186,172,163,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,182,169,171,175,170,167,161],
[171,0,161,177,170,169,176,174,175,172],
[174,180,0,185,168,166,179,163,178,169],
[159,164,156,0,160,164,159,169,166,163],
[172,171,173,181,0,183,179,174,185,166],
[170,172,175,177,158,0,172,173,172,164],
[166,165,162,182,162,169,0,179,162,157],
[171,167,178,172,167,168,162,0,169,156],
[174,166,163,175,156,169,179,172,0,136],
[180,169,172,178,175,177,184,185,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,166,164,177,170,157,169,145,190],
[182,0,183,183,166,184,182,188,181,203],
[175,158,0,159,173,168,153,158,140,192],
[177,158,182,0,171,163,171,178,167,186],
[164,175,168,170,0,174,166,172,149,193],
[171,157,173,178,167,0,170,179,162,201],
[184,159,188,170,175,171,0,176,170,200],
[172,153,183,163,169,162,165,0,144,192],
[196,160,201,174,192,179,171,197,0,189],
[151,138,149,155,148,140,141,149,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,172,178,209,185,167,201,158],
[162,0,160,161,179,200,171,169,168,152],
[167,181,0,153,164,183,200,160,185,183],
[169,180,188,0,172,191,179,163,192,166],
[163,162,177,169,0,212,173,169,203,149],
[132,141,158,150,129,0,156,160,150,135],
[156,170,141,162,168,185,0,158,181,144],
[174,172,181,178,172,181,183,0,198,159],
[140,173,156,149,138,191,160,143,0,145],
[183,189,158,175,192,206,197,182,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,173,167,178,155,176,191,183,160],
[191,0,183,156,180,176,177,180,179,185],
[168,158,0,147,185,163,184,156,168,151],
[174,185,194,0,172,172,194,176,184,170],
[163,161,156,169,0,147,158,169,163,160],
[186,165,178,169,194,0,168,166,159,151],
[165,164,157,147,183,173,0,172,164,138],
[150,161,185,165,172,175,169,0,173,163],
[158,162,173,157,178,182,177,168,0,162],
[181,156,190,171,181,190,203,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,186,178,189,183,166,160,174,167],
[145,0,147,166,151,158,168,147,152,162],
[155,194,0,187,180,171,165,162,154,160],
[163,175,154,0,181,159,164,147,157,147],
[152,190,161,160,0,158,177,175,159,166],
[158,183,170,182,183,0,163,175,156,156],
[175,173,176,177,164,178,0,158,170,175],
[181,194,179,194,166,166,183,0,164,191],
[167,189,187,184,182,185,171,177,0,171],
[174,179,181,194,175,185,166,150,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,178,174,156,184,161,208,196,199],
[202,0,211,197,153,202,171,194,190,207],
[163,130,0,192,144,185,145,190,162,165],
[167,144,149,0,155,176,134,173,177,155],
[185,188,197,186,0,181,167,195,214,182],
[157,139,156,165,160,0,159,175,168,167],
[180,170,196,207,174,182,0,194,190,203],
[133,147,151,168,146,166,147,0,166,189],
[145,151,179,164,127,173,151,175,0,166],
[142,134,176,186,159,174,138,152,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,158,174,206,157,163,142,172],
[175,0,178,156,159,195,164,175,169,160],
[172,163,0,144,160,161,169,172,171,140],
[183,185,197,0,177,192,175,202,155,170],
[167,182,181,164,0,195,187,197,178,156],
[135,146,180,149,146,0,150,163,141,150],
[184,177,172,166,154,191,0,205,155,151],
[178,166,169,139,144,178,136,0,142,153],
[199,172,170,186,163,200,186,199,0,171],
[169,181,201,171,185,191,190,188,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,154,112,122,171,141,209,98,181],
[166,0,159,145,158,190,178,152,191,129],
[187,182,0,136,216,157,195,185,187,208],
[229,196,205,0,173,228,180,172,161,219],
[219,183,125,168,0,201,156,151,144,222],
[170,151,184,113,140,0,172,133,158,194],
[200,163,146,161,185,169,0,172,128,194],
[132,189,156,169,190,208,169,0,155,177],
[243,150,154,180,197,183,213,186,0,187],
[160,212,133,122,119,147,147,164,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,151,158,155,132,157,137,145,159],
[163,0,160,170,162,162,147,170,153,162],
[190,181,0,165,198,179,191,161,150,170],
[183,171,176,0,194,183,153,168,181,183],
[186,179,143,147,0,152,167,163,162,171],
[209,179,162,158,189,0,175,177,170,177],
[184,194,150,188,174,166,0,157,146,171],
[204,171,180,173,178,164,184,0,154,173],
[196,188,191,160,179,171,195,187,0,149],
[182,179,171,158,170,164,170,168,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,158,179,178,173,182,152,168,169],
[169,0,174,185,159,159,168,163,175,185],
[183,167,0,172,158,164,166,169,173,170],
[162,156,169,0,160,159,170,158,159,167],
[163,182,183,181,0,163,166,169,173,183],
[168,182,177,182,178,0,179,167,182,190],
[159,173,175,171,175,162,0,165,171,170],
[189,178,172,183,172,174,176,0,163,170],
[173,166,168,182,168,159,170,178,0,173],
[172,156,171,174,158,151,171,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,165,169,167,176,172,167,172],
[169,0,169,170,170,171,165,181,167,178],
[171,172,0,176,162,161,169,165,164,167],
[176,171,165,0,177,179,171,175,185,168],
[172,171,179,164,0,170,172,172,171,164],
[174,170,180,162,171,0,182,178,179,166],
[165,176,172,170,169,159,0,163,163,175],
[169,160,176,166,169,163,178,0,171,169],
[174,174,177,156,170,162,178,170,0,167],
[169,163,174,173,177,175,166,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,187,180,167,173,177,158,150],
[169,0,176,173,175,162,187,172,181,164],
[164,165,0,183,171,173,174,172,161,152],
[154,168,158,0,180,165,176,179,157,161],
[161,166,170,161,0,159,172,170,153,151],
[174,179,168,176,182,0,175,172,170,153],
[168,154,167,165,169,166,0,172,146,167],
[164,169,169,162,171,169,169,0,166,158],
[183,160,180,184,188,171,195,175,0,183],
[191,177,189,180,190,188,174,183,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,164,194,182,185,167,161,174],
[177,0,157,157,167,176,160,165,158,163],
[171,184,0,172,188,186,177,163,181,178],
[177,184,169,0,185,180,184,178,183,183],
[147,174,153,156,0,158,156,153,161,178],
[159,165,155,161,183,0,167,144,161,179],
[156,181,164,157,185,174,0,173,175,174],
[174,176,178,163,188,197,168,0,177,173],
[180,183,160,158,180,180,166,164,0,174],
[167,178,163,158,163,162,167,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,239,239,138,138,169,272,136,238],
[205,0,238,170,172,204,135,241,169,203],
[102,103,0,172,138,137,135,173,136,168],
[102,171,169,0,138,67,135,240,136,202],
[203,169,203,203,0,170,168,274,100,203],
[203,137,204,274,171,0,204,239,235,168],
[172,206,206,206,173,137,0,241,100,201],
[69,100,168,101,67,102,100,0,67,133],
[205,172,205,205,241,106,241,274,0,203],
[103,138,173,139,138,173,140,208,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,147,109,120,137,109,158,132,121],
[218,0,155,182,154,169,157,191,166,131],
[194,186,0,184,194,196,159,182,158,159],
[232,159,157,0,168,193,159,206,165,146],
[221,187,147,173,0,183,211,222,203,146],
[204,172,145,148,158,0,184,192,144,120],
[232,184,182,182,130,157,0,194,167,181],
[183,150,159,135,119,149,147,0,146,120],
[209,175,183,176,138,197,174,195,0,195],
[220,210,182,195,195,221,160,221,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,198,183,191,161,166,176,189,161],
[132,0,135,168,158,158,157,157,164,151],
[143,206,0,187,158,166,163,167,171,164],
[158,173,154,0,159,168,151,157,176,155],
[150,183,183,182,0,168,156,181,177,173],
[180,183,175,173,173,0,168,171,163,172],
[175,184,178,190,185,173,0,180,190,164],
[165,184,174,184,160,170,161,0,181,170],
[152,177,170,165,164,178,151,160,0,178],
[180,190,177,186,168,169,177,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,147,151,158,161,159,162,165],
[175,0,178,164,163,166,161,168,169,181],
[181,163,0,148,164,162,163,179,187,173],
[194,177,193,0,164,177,185,182,173,175],
[190,178,177,177,0,173,173,185,166,174],
[183,175,179,164,168,0,183,172,175,176],
[180,180,178,156,168,158,0,162,175,170],
[182,173,162,159,156,169,179,0,183,177],
[179,172,154,168,175,166,166,158,0,174],
[176,160,168,166,167,165,171,164,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,167,181,151,165,187,185,154,173],
[153,0,165,161,143,151,172,166,140,157],
[174,176,0,182,167,152,187,172,143,162],
[160,180,159,0,154,159,184,168,145,175],
[190,198,174,187,0,177,196,170,161,188],
[176,190,189,182,164,0,182,176,173,181],
[154,169,154,157,145,159,0,151,148,139],
[156,175,169,173,171,165,190,0,150,166],
[187,201,198,196,180,168,193,191,0,160],
[168,184,179,166,153,160,202,175,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,155,185,180,174,152,172,167,171],
[161,0,154,177,192,155,153,158,168,166],
[186,187,0,174,172,182,157,158,167,167],
[156,164,167,0,185,176,148,170,153,183],
[161,149,169,156,0,154,142,157,164,164],
[167,186,159,165,187,0,163,167,153,160],
[189,188,184,193,199,178,0,190,164,181],
[169,183,183,171,184,174,151,0,174,174],
[174,173,174,188,177,188,177,167,0,175],
[170,175,174,158,177,181,160,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,162,159,163,154,154,156,159],
[172,0,173,162,170,168,145,142,163,165],
[166,168,0,156,152,139,150,138,163,144],
[179,179,185,0,166,172,168,174,186,172],
[182,171,189,175,0,157,182,167,188,171],
[178,173,202,169,184,0,166,181,183,189],
[187,196,191,173,159,175,0,192,178,174],
[187,199,203,167,174,160,149,0,154,182],
[185,178,178,155,153,158,163,187,0,163],
[182,176,197,169,170,152,167,159,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,178,188,168,183,164,161,166,156],
[160,0,166,189,164,160,146,154,166,171],
[163,175,0,174,155,168,172,139,157,151],
[153,152,167,0,170,171,169,167,153,160],
[173,177,186,171,0,199,175,165,175,169],
[158,181,173,170,142,0,168,146,149,145],
[177,195,169,172,166,173,0,150,156,171],
[180,187,202,174,176,195,191,0,157,172],
[175,175,184,188,166,192,185,184,0,162],
[185,170,190,181,172,196,170,169,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,160,193,191,182,153,163,202],
[169,0,183,159,176,178,151,159,187,184],
[158,158,0,143,175,129,149,149,140,170],
[181,182,198,0,206,166,166,197,196,188],
[148,165,166,135,0,151,178,147,168,162],
[150,163,212,175,190,0,177,146,198,185],
[159,190,192,175,163,164,0,171,154,190],
[188,182,192,144,194,195,170,0,180,186],
[178,154,201,145,173,143,187,161,0,179],
[139,157,171,153,179,156,151,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,194,189,160,172,182,174,182,176],
[152,0,180,169,179,177,179,176,168,178],
[147,161,0,178,172,162,175,153,166,165],
[152,172,163,0,179,161,172,161,167,170],
[181,162,169,162,0,171,170,168,171,169],
[169,164,179,180,170,0,178,168,178,167],
[159,162,166,169,171,163,0,172,165,175],
[167,165,188,180,173,173,169,0,169,174],
[159,173,175,174,170,163,176,172,0,168],
[165,163,176,171,172,174,166,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,152,165,171,176,151,149,171,171],
[169,0,167,185,193,152,177,162,189,168],
[189,174,0,203,207,155,180,168,170,187],
[176,156,138,0,173,157,167,138,154,169],
[170,148,134,168,0,151,150,145,177,174],
[165,189,186,184,190,0,197,180,193,188],
[190,164,161,174,191,144,0,171,182,165],
[192,179,173,203,196,161,170,0,188,184],
[170,152,171,187,164,148,159,153,0,164],
[170,173,154,172,167,153,176,157,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,183,168,187,165,163,165,179],
[163,0,194,223,172,216,188,170,190,176],
[165,147,0,194,157,176,166,156,183,168],
[158,118,147,0,163,178,129,124,166,151],
[173,169,184,178,0,193,174,156,204,168],
[154,125,165,163,148,0,166,148,147,137],
[176,153,175,212,167,175,0,165,172,144],
[178,171,185,217,185,193,176,0,168,188],
[176,151,158,175,137,194,169,173,0,170],
[162,165,173,190,173,204,197,153,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,198,142,185,211,183,186,225],
[169,0,171,254,153,212,183,210,183,169],
[185,170,0,224,196,241,252,168,200,250],
[143,87,117,0,72,144,157,102,131,156],
[199,188,145,269,0,217,230,216,201,243],
[156,129,100,197,124,0,199,171,126,185],
[130,158,89,184,111,142,0,172,141,169],
[158,131,173,239,125,170,169,0,156,212],
[155,158,141,210,140,215,200,185,0,213],
[116,172,91,185,98,156,172,129,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,166,193,190,181,185,173,185],
[164,0,195,163,166,171,169,175,166,170],
[169,146,0,148,157,164,157,172,158,166],
[175,178,193,0,186,179,172,173,166,168],
[148,175,184,155,0,169,172,183,167,163],
[151,170,177,162,172,0,172,176,161,173],
[160,172,184,169,169,169,0,176,170,158],
[156,166,169,168,158,165,165,0,165,155],
[168,175,183,175,174,180,171,176,0,172],
[156,171,175,173,178,168,183,186,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,183,193,152,178,171,173,164,178],
[179,0,170,173,162,163,173,158,164,164],
[158,171,0,182,149,181,155,177,160,168],
[148,168,159,0,153,149,160,170,155,179],
[189,179,192,188,0,177,184,184,164,190],
[163,178,160,192,164,0,173,167,183,207],
[170,168,186,181,157,168,0,178,155,162],
[168,183,164,171,157,174,163,0,162,169],
[177,177,181,186,177,158,186,179,0,182],
[163,177,173,162,151,134,179,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,161,165,160,155,166,138,154,166],
[208,0,160,186,196,179,151,179,177,191],
[180,181,0,159,175,178,139,124,111,184],
[176,155,182,0,175,149,159,156,151,178],
[181,145,166,166,0,160,143,155,144,220],
[186,162,163,192,181,0,153,131,114,218],
[175,190,202,182,198,188,0,155,142,204],
[203,162,217,185,186,210,186,0,176,222],
[187,164,230,190,197,227,199,165,0,238],
[175,150,157,163,121,123,137,119,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,183,179,171,160,176,185,163,154],
[193,0,195,209,191,195,177,207,183,167],
[158,146,0,192,171,175,164,170,164,155],
[162,132,149,0,184,171,156,176,143,148],
[170,150,170,157,0,194,182,165,159,153],
[181,146,166,170,147,0,184,176,159,159],
[165,164,177,185,159,157,0,198,178,173],
[156,134,171,165,176,165,143,0,164,142],
[178,158,177,198,182,182,163,177,0,175],
[187,174,186,193,188,182,168,199,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,176,166,172,159,173,160,177],
[169,0,166,181,165,164,149,174,167,168],
[157,175,0,172,168,161,166,170,166,169],
[165,160,169,0,171,159,165,162,177,172],
[175,176,173,170,0,149,158,169,177,174],
[169,177,180,182,192,0,163,179,182,174],
[182,192,175,176,183,178,0,164,183,184],
[168,167,171,179,172,162,177,0,171,169],
[181,174,175,164,164,159,158,170,0,178],
[164,173,172,169,167,167,157,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,124,184,190,227,149,160,180,179],
[192,0,151,158,184,210,150,152,151,162],
[217,190,0,219,182,200,121,179,171,197],
[157,183,122,0,150,154,155,148,174,161],
[151,157,159,191,0,192,174,150,185,147],
[114,131,141,187,149,0,129,157,162,147],
[192,191,220,186,167,212,0,215,170,185],
[181,189,162,193,191,184,126,0,152,190],
[161,190,170,167,156,179,171,189,0,162],
[162,179,144,180,194,194,156,151,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,182,190,175,174,150,166,169,162],
[178,0,171,169,189,189,166,173,152,184],
[159,170,0,172,182,166,166,188,180,166],
[151,172,169,0,165,161,150,176,171,163],
[166,152,159,176,0,164,156,141,160,140],
[167,152,175,180,177,0,179,150,174,170],
[191,175,175,191,185,162,0,178,161,165],
[175,168,153,165,200,191,163,0,169,167],
[172,189,161,170,181,167,180,172,0,172],
[179,157,175,178,201,171,176,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,203,171,189,183,191,177,183,163],
[149,0,179,172,185,160,183,178,182,155],
[138,162,0,159,160,150,180,153,179,156],
[170,169,182,0,175,173,204,170,161,157],
[152,156,181,166,0,151,185,170,171,162],
[158,181,191,168,190,0,182,170,192,182],
[150,158,161,137,156,159,0,167,169,162],
[164,163,188,171,171,171,174,0,182,170],
[158,159,162,180,170,149,172,159,0,149],
[178,186,185,184,179,159,179,171,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,187,202,171,171,140,187,184,215],
[213,0,158,216,157,143,170,171,173,158],
[154,183,0,241,186,198,154,197,142,155],
[139,125,100,0,127,125,112,154,143,140],
[170,184,155,214,0,199,212,228,185,155],
[170,198,143,216,142,0,186,140,128,186],
[201,171,187,229,129,155,0,170,157,173],
[154,170,144,187,113,201,171,0,127,157],
[157,168,199,198,156,213,184,214,0,199],
[126,183,186,201,186,155,168,184,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,172,169,166,173,163,173,178,174],
[156,0,152,149,150,160,146,146,169,143],
[169,189,0,168,172,187,160,173,167,163],
[172,192,173,0,165,187,177,172,170,178],
[175,191,169,176,0,172,170,172,162,161],
[168,181,154,154,169,0,166,169,173,173],
[178,195,181,164,171,175,0,173,181,174],
[168,195,168,169,169,172,168,0,163,180],
[163,172,174,171,179,168,160,178,0,144],
[167,198,178,163,180,168,167,161,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,208,183,206,237,182,166,204,199],
[168,0,163,189,167,189,215,160,208,213],
[133,178,0,192,175,210,165,197,203,197],
[158,152,149,0,167,182,155,130,166,181],
[135,174,166,174,0,213,177,131,173,182],
[104,152,131,159,128,0,126,136,163,122],
[159,126,176,186,164,215,0,158,194,202],
[175,181,144,211,210,205,183,0,166,191],
[137,133,138,175,168,178,147,175,0,174],
[142,128,144,160,159,219,139,150,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,177,155,168,155,193,187,191,194],
[164,0,175,161,162,173,202,182,175,179],
[164,166,0,168,160,177,192,171,202,174],
[186,180,173,0,182,171,187,165,197,209],
[173,179,181,159,0,187,208,209,188,194],
[186,168,164,170,154,0,206,191,182,195],
[148,139,149,154,133,135,0,166,149,158],
[154,159,170,176,132,150,175,0,171,181],
[150,166,139,144,153,159,192,170,0,199],
[147,162,167,132,147,146,183,160,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,186,169,173,189,179,186,178,176],
[165,0,169,173,181,170,172,184,166,160],
[155,172,0,163,160,170,159,184,160,159],
[172,168,178,0,175,176,177,177,174,165],
[168,160,181,166,0,170,162,181,174,170],
[152,171,171,165,171,0,177,183,164,166],
[162,169,182,164,179,164,0,183,167,148],
[155,157,157,164,160,158,158,0,170,158],
[163,175,181,167,167,177,174,171,0,153],
[165,181,182,176,171,175,193,183,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,173,171,172,157,172,172,178],
[173,0,163,179,178,171,177,178,181,173],
[169,178,0,174,164,179,174,175,160,175],
[168,162,167,0,162,167,162,168,158,172],
[170,163,177,179,0,174,168,186,169,176],
[169,170,162,174,167,0,170,170,160,173],
[184,164,167,179,173,171,0,162,170,171],
[169,163,166,173,155,171,179,0,172,169],
[169,160,181,183,172,181,171,169,0,172],
[163,168,166,169,165,168,170,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,170,132,136,140,167,145,172,131],
[185,0,183,151,110,155,186,146,154,152],
[171,158,0,174,143,140,197,147,163,151],
[209,190,167,0,154,159,178,156,178,172],
[205,231,198,187,0,167,182,170,205,192],
[201,186,201,182,174,0,203,162,195,177],
[174,155,144,163,159,138,0,150,162,166],
[196,195,194,185,171,179,191,0,201,157],
[169,187,178,163,136,146,179,140,0,151],
[210,189,190,169,149,164,175,184,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,177,181,164,187,165,173,167,167],
[172,0,177,161,159,161,163,173,159,173],
[164,164,0,186,155,190,158,181,171,161],
[160,180,155,0,155,169,172,178,165,161],
[177,182,186,186,0,183,182,157,174,172],
[154,180,151,172,158,0,173,158,142,156],
[176,178,183,169,159,168,0,163,154,171],
[168,168,160,163,184,183,178,0,140,174],
[174,182,170,176,167,199,187,201,0,184],
[174,168,180,180,169,185,170,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,170,179,170,132,137,151,155,194],
[199,0,165,196,182,169,187,154,186,207],
[171,176,0,205,216,173,183,162,156,217],
[162,145,136,0,169,149,143,141,157,199],
[171,159,125,172,0,126,142,129,160,186],
[209,172,168,192,215,0,190,184,216,223],
[204,154,158,198,199,151,0,179,183,204],
[190,187,179,200,212,157,162,0,172,216],
[186,155,185,184,181,125,158,169,0,212],
[147,134,124,142,155,118,137,125,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,170,171,145,168,167,174,170,176],
[185,0,202,196,166,175,182,186,187,192],
[171,139,0,155,146,161,152,173,176,169],
[170,145,186,0,151,158,160,180,165,174],
[196,175,195,190,0,170,185,187,168,190],
[173,166,180,183,171,0,183,171,183,181],
[174,159,189,181,156,158,0,177,162,175],
[167,155,168,161,154,170,164,0,160,165],
[171,154,165,176,173,158,179,181,0,177],
[165,149,172,167,151,160,166,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,166,137,219,156,139,171,190,173],
[160,0,145,135,180,181,178,156,160,194],
[175,196,0,152,195,150,159,192,144,147],
[204,206,189,0,169,189,182,176,199,191],
[122,161,146,172,0,147,140,151,166,135],
[185,160,191,152,194,0,176,186,157,162],
[202,163,182,159,201,165,0,199,170,159],
[170,185,149,165,190,155,142,0,142,155],
[151,181,197,142,175,184,171,199,0,168],
[168,147,194,150,206,179,182,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,172,185,171,204,165,159,137],
[171,0,185,187,164,183,175,195,162,173],
[180,156,0,194,183,184,204,215,180,184],
[169,154,147,0,154,188,167,200,175,170],
[156,177,158,187,0,184,216,208,203,174],
[170,158,157,153,157,0,168,198,163,134],
[137,166,137,174,125,173,0,198,180,164],
[176,146,126,141,133,143,143,0,118,134],
[182,179,161,166,138,178,161,223,0,156],
[204,168,157,171,167,207,177,207,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,175,182,179,171,185,173,164],
[174,0,194,168,178,193,187,182,175,179],
[162,147,0,168,165,168,170,150,165,162],
[166,173,173,0,164,178,156,164,173,175],
[159,163,176,177,0,170,161,143,157,170],
[162,148,173,163,171,0,169,165,151,151],
[170,154,171,185,180,172,0,166,183,165],
[156,159,191,177,198,176,175,0,180,180],
[168,166,176,168,184,190,158,161,0,181],
[177,162,179,166,171,190,176,161,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,150,166,157,177,169,150,173,165],
[157,0,153,156,155,147,156,147,176,152],
[191,188,0,167,177,184,183,171,181,190],
[175,185,174,0,165,164,174,160,176,174],
[184,186,164,176,0,194,180,173,190,175],
[164,194,157,177,147,0,161,158,185,161],
[172,185,158,167,161,180,0,170,192,163],
[191,194,170,181,168,183,171,0,180,171],
[168,165,160,165,151,156,149,161,0,158],
[176,189,151,167,166,180,178,170,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,175,165,168,162,145,182,121,182],
[152,0,152,148,148,122,152,187,164,174],
[166,189,0,171,174,173,140,195,163,196],
[176,193,170,0,172,153,145,175,174,197],
[173,193,167,169,0,171,168,197,167,206],
[179,219,168,188,170,0,167,206,176,215],
[196,189,201,196,173,174,0,201,159,221],
[159,154,146,166,144,135,140,0,149,163],
[220,177,178,167,174,165,182,192,0,212],
[159,167,145,144,135,126,120,178,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,131,166,150,153,147,177,132,186],
[189,0,165,195,194,188,174,183,165,193],
[210,176,0,197,177,178,174,184,170,204],
[175,146,144,0,146,158,150,145,176,183],
[191,147,164,195,0,185,145,139,158,177],
[188,153,163,183,156,0,149,161,144,191],
[194,167,167,191,196,192,0,182,178,204],
[164,158,157,196,202,180,159,0,173,214],
[209,176,171,165,183,197,163,168,0,208],
[155,148,137,158,164,150,137,127,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,139,163,160,169,135,154,177,167],
[170,0,166,163,170,164,163,170,165,177],
[202,175,0,161,169,166,162,168,186,203],
[178,178,180,0,171,175,166,172,177,191],
[181,171,172,170,0,199,185,187,185,183],
[172,177,175,166,142,0,161,171,180,187],
[206,178,179,175,156,180,0,177,187,207],
[187,171,173,169,154,170,164,0,165,192],
[164,176,155,164,156,161,154,176,0,189],
[174,164,138,150,158,154,134,149,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,202,169,165,187,173,179,195,157],
[174,0,169,159,167,154,168,151,173,165],
[139,172,0,162,183,153,152,167,171,180],
[172,182,179,0,168,180,144,175,165,174],
[176,174,158,173,0,184,172,174,191,201],
[154,187,188,161,157,0,155,168,177,175],
[168,173,189,197,169,186,0,187,179,190],
[162,190,174,166,167,173,154,0,179,187],
[146,168,170,176,150,164,162,162,0,168],
[184,176,161,167,140,166,151,154,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,154,187,192,128,210,171,166,188],
[168,0,153,187,134,170,172,228,207,210],
[187,188,0,168,189,203,206,226,185,187],
[154,154,173,0,155,171,209,229,189,207],
[149,207,152,186,0,164,207,151,165,223],
[213,171,138,170,177,0,191,196,186,229],
[131,169,135,132,134,150,0,209,130,206],
[170,113,115,112,190,145,132,0,147,130],
[175,134,156,152,176,155,211,194,0,246],
[153,131,154,134,118,112,135,211,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,183,189,163,168,159,164,173,169],
[164,0,182,181,172,160,153,157,181,170],
[158,159,0,157,155,152,148,153,172,166],
[152,160,184,0,156,155,155,150,173,160],
[178,169,186,185,0,178,177,168,186,182],
[173,181,189,186,163,0,175,178,176,182],
[182,188,193,186,164,166,0,177,170,176],
[177,184,188,191,173,163,164,0,177,162],
[168,160,169,168,155,165,171,164,0,165],
[172,171,175,181,159,159,165,179,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,183,191,200,189,169,194,187,194],
[156,0,155,155,173,165,146,162,156,168],
[158,186,0,158,183,180,153,164,164,179],
[150,186,183,0,193,169,161,170,165,169],
[141,168,158,148,0,149,140,164,145,161],
[152,176,161,172,192,0,175,181,186,174],
[172,195,188,180,201,166,0,182,172,175],
[147,179,177,171,177,160,159,0,161,160],
[154,185,177,176,196,155,169,180,0,173],
[147,173,162,172,180,167,166,181,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,171,171,155,166,173,177,174],
[174,0,178,159,165,142,152,144,169,143],
[165,163,0,178,171,160,144,177,165,179],
[170,182,163,0,195,155,166,179,176,195],
[170,176,170,146,0,171,156,167,161,157],
[186,199,181,186,170,0,182,187,204,183],
[175,189,197,175,185,159,0,162,184,184],
[168,197,164,162,174,154,179,0,168,147],
[164,172,176,165,180,137,157,173,0,186],
[167,198,162,146,184,158,157,194,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,178,168,168,173,173,166,170,165],
[151,0,149,157,152,160,151,148,144,158],
[163,192,0,168,174,170,168,167,161,169],
[173,184,173,0,171,168,172,172,171,177],
[173,189,167,170,0,164,172,182,166,177],
[168,181,171,173,177,0,166,173,168,182],
[168,190,173,169,169,175,0,156,163,166],
[175,193,174,169,159,168,185,0,163,178],
[171,197,180,170,175,173,178,178,0,173],
[176,183,172,164,164,159,175,163,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,173,179,188,170,181,176,176],
[164,0,171,170,171,175,160,169,163,154],
[171,170,0,175,177,188,178,176,176,165],
[168,171,166,0,165,168,166,176,172,162],
[162,170,164,176,0,173,167,184,170,165],
[153,166,153,173,168,0,180,168,164,173],
[171,181,163,175,174,161,0,176,175,165],
[160,172,165,165,157,173,165,0,165,163],
[165,178,165,169,171,177,166,176,0,167],
[165,187,176,179,176,168,176,178,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,167,158,173,179,186,155,206,193],
[190,0,170,165,173,178,186,173,195,205],
[174,171,0,165,162,179,192,164,200,200],
[183,176,176,0,175,167,171,170,209,200],
[168,168,179,166,0,179,180,171,204,178],
[162,163,162,174,162,0,182,168,203,181],
[155,155,149,170,161,159,0,160,201,181],
[186,168,177,171,170,173,181,0,208,193],
[135,146,141,132,137,138,140,133,0,165],
[148,136,141,141,163,160,160,148,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,187,180,180,165,186,163,186,167],
[171,0,191,177,186,177,200,162,182,170],
[154,150,0,161,165,164,179,157,164,164],
[161,164,180,0,175,179,186,165,184,172],
[161,155,176,166,0,180,185,163,177,163],
[176,164,177,162,161,0,175,160,171,161],
[155,141,162,155,156,166,0,160,156,152],
[178,179,184,176,178,181,181,0,184,168],
[155,159,177,157,164,170,185,157,0,161],
[174,171,177,169,178,180,189,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,160,172,178,178,178,167,173],
[162,0,170,163,164,171,171,150,168,177],
[178,171,0,161,159,164,168,172,170,175],
[181,178,180,0,173,170,174,176,185,181],
[169,177,182,168,0,165,173,170,185,173],
[163,170,177,171,176,0,173,177,171,165],
[163,170,173,167,168,168,0,165,164,162],
[163,191,169,165,171,164,176,0,182,160],
[174,173,171,156,156,170,177,159,0,175],
[168,164,166,160,168,176,179,181,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,154,140,177,153,167,168,163],
[165,0,156,140,139,180,152,161,149,151],
[177,185,0,151,156,194,145,181,165,162],
[187,201,190,0,173,191,175,183,161,183],
[201,202,185,168,0,198,173,199,181,190],
[164,161,147,150,143,0,158,153,142,167],
[188,189,196,166,168,183,0,170,170,166],
[174,180,160,158,142,188,171,0,145,164],
[173,192,176,180,160,199,171,196,0,184],
[178,190,179,158,151,174,175,177,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,158,174,155,174,161,163,169,158],
[185,0,170,179,169,190,163,164,169,173],
[183,171,0,180,167,180,169,156,166,180],
[167,162,161,0,151,167,169,153,170,163],
[186,172,174,190,0,189,170,174,172,179],
[167,151,161,174,152,0,169,144,160,156],
[180,178,172,172,171,172,0,170,177,179],
[178,177,185,188,167,197,171,0,178,178],
[172,172,175,171,169,181,164,163,0,173],
[183,168,161,178,162,185,162,163,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,144,182,150,142,133,176,172,154],
[201,0,143,178,173,150,180,190,172,168],
[197,198,0,181,192,175,160,179,179,170],
[159,163,160,0,171,145,193,168,183,180],
[191,168,149,170,0,193,169,172,160,175],
[199,191,166,196,148,0,189,199,202,161],
[208,161,181,148,172,152,0,182,166,182],
[165,151,162,173,169,142,159,0,166,176],
[169,169,162,158,181,139,175,175,0,201],
[187,173,171,161,166,180,159,165,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,171,180,173,191,178,172,174,177],
[176,0,191,167,181,181,184,178,181,174],
[170,150,0,157,176,170,178,162,173,177],
[161,174,184,0,170,183,182,176,170,186],
[168,160,165,171,0,172,168,170,148,177],
[150,160,171,158,169,0,171,161,161,176],
[163,157,163,159,173,170,0,164,171,174],
[169,163,179,165,171,180,177,0,176,182],
[167,160,168,171,193,180,170,165,0,178],
[164,167,164,155,164,165,167,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,184,185,185,183,170,192,196],
[162,0,182,158,182,173,179,165,170,183],
[171,159,0,170,180,178,159,167,193,182],
[157,183,171,0,165,171,177,175,185,168],
[156,159,161,176,0,160,162,157,168,174],
[156,168,163,170,181,0,164,164,192,180],
[158,162,182,164,179,177,0,171,185,176],
[171,176,174,166,184,177,170,0,177,190],
[149,171,148,156,173,149,156,164,0,168],
[145,158,159,173,167,161,165,151,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,196,165,163,166,178,179,180,167],
[177,0,189,170,168,147,165,185,164,178],
[145,152,0,161,148,170,159,166,171,164],
[176,171,180,0,160,156,183,186,155,182],
[178,173,193,181,0,162,182,181,179,178],
[175,194,171,185,179,0,177,181,164,176],
[163,176,182,158,159,164,0,195,177,176],
[162,156,175,155,160,160,146,0,164,165],
[161,177,170,186,162,177,164,177,0,167],
[174,163,177,159,163,165,165,176,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,150,189,164,164,158,154,164,149],
[173,0,165,172,146,178,162,161,160,171],
[191,176,0,191,174,180,180,161,181,179],
[152,169,150,0,155,164,152,153,156,155],
[177,195,167,186,0,189,187,172,167,171],
[177,163,161,177,152,0,181,167,165,177],
[183,179,161,189,154,160,0,159,170,182],
[187,180,180,188,169,174,182,0,168,187],
[177,181,160,185,174,176,171,173,0,183],
[192,170,162,186,170,164,159,154,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,210,174,181,164,187,189,196],
[177,0,172,184,167,185,172,197,170,175],
[175,169,0,196,159,187,182,198,169,187],
[131,157,145,0,152,153,153,153,168,138],
[167,174,182,189,0,190,152,195,176,163],
[160,156,154,188,151,0,172,181,172,162],
[177,169,159,188,189,169,0,187,173,178],
[154,144,143,188,146,160,154,0,160,155],
[152,171,172,173,165,169,168,181,0,160],
[145,166,154,203,178,179,163,186,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,168,149,159,173,171,177,165],
[178,0,154,168,174,168,186,182,180,178],
[169,187,0,180,177,177,174,179,177,186],
[173,173,161,0,159,180,176,173,185,183],
[192,167,164,182,0,173,185,192,184,186],
[182,173,164,161,168,0,173,169,175,171],
[168,155,167,165,156,168,0,181,177,173],
[170,159,162,168,149,172,160,0,170,170],
[164,161,164,156,157,166,164,171,0,176],
[176,163,155,158,155,170,168,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,161,155,170,160,166,156,183],
[165,0,162,158,147,163,157,164,176,176],
[172,179,0,160,138,172,137,180,156,158],
[180,183,181,0,145,187,175,189,186,190],
[186,194,203,196,0,177,174,177,169,183],
[171,178,169,154,164,0,169,166,154,181],
[181,184,204,166,167,172,0,175,176,193],
[175,177,161,152,164,175,166,0,174,187],
[185,165,185,155,172,187,165,167,0,172],
[158,165,183,151,158,160,148,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,184,173,205,170,223,156,163,178],
[156,0,166,154,178,176,190,162,170,156],
[157,175,0,166,211,190,174,143,138,163],
[168,187,175,0,202,163,207,175,188,153],
[136,163,130,139,0,177,187,168,161,168],
[171,165,151,178,164,0,187,178,170,157],
[118,151,167,134,154,154,0,145,145,159],
[185,179,198,166,173,163,196,0,156,189],
[178,171,203,153,180,171,196,185,0,205],
[163,185,178,188,173,184,182,152,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,168,165,174,154,172,174,182,173],
[184,0,185,165,187,160,179,181,174,164],
[173,156,0,168,179,158,169,154,157,162],
[176,176,173,0,186,171,183,183,170,173],
[167,154,162,155,0,156,171,139,166,166],
[187,181,183,170,185,0,165,175,165,174],
[169,162,172,158,170,176,0,176,169,171],
[167,160,187,158,202,166,165,0,161,160],
[159,167,184,171,175,176,172,180,0,184],
[168,177,179,168,175,167,170,181,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,190,182,158,157,176,167,157],
[169,0,174,153,180,160,165,164,168,163],
[174,167,0,154,169,149,163,167,151,155],
[151,188,187,0,191,161,164,180,157,172],
[159,161,172,150,0,138,150,163,138,139],
[183,181,192,180,203,0,177,180,169,177],
[184,176,178,177,191,164,0,184,173,173],
[165,177,174,161,178,161,157,0,144,159],
[174,173,190,184,203,172,168,197,0,187],
[184,178,186,169,202,164,168,182,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,153,156,166,168,173,177,200,176],
[176,0,174,184,170,169,197,172,196,179],
[188,167,0,172,175,188,191,177,199,189],
[185,157,169,0,189,199,214,182,206,184],
[175,171,166,152,0,170,189,183,190,194],
[173,172,153,142,171,0,185,173,189,192],
[168,144,150,127,152,156,0,144,165,177],
[164,169,164,159,158,168,197,0,196,189],
[141,145,142,135,151,152,176,145,0,190],
[165,162,152,157,147,149,164,152,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,182,190,173,178,170,191,187,202],
[180,0,179,185,162,185,173,171,185,195],
[159,162,0,168,164,186,154,176,158,179],
[151,156,173,0,179,166,172,162,183,188],
[168,179,177,162,0,174,164,170,173,182],
[163,156,155,175,167,0,158,144,143,171],
[171,168,187,169,177,183,0,186,165,185],
[150,170,165,179,171,197,155,0,152,175],
[154,156,183,158,168,198,176,189,0,172],
[139,146,162,153,159,170,156,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,162,170,161,169,172,157,170,165],
[179,0,169,154,175,164,176,158,179,178],
[179,172,0,172,161,169,168,160,170,169],
[171,187,169,0,166,173,182,183,191,188],
[180,166,180,175,0,173,172,166,173,174],
[172,177,172,168,168,0,168,160,180,168],
[169,165,173,159,169,173,0,168,166,164],
[184,183,181,158,175,181,173,0,187,181],
[171,162,171,150,168,161,175,154,0,160],
[176,163,172,153,167,173,177,160,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,171,177,159,160,155,153,171],
[176,0,173,162,195,173,173,165,143,151],
[163,168,0,164,207,171,157,186,153,154],
[170,179,177,0,214,160,168,152,148,172],
[164,146,134,127,0,140,150,134,132,158],
[182,168,170,181,201,0,168,184,174,197],
[181,168,184,173,191,173,0,176,159,174],
[186,176,155,189,207,157,165,0,157,165],
[188,198,188,193,209,167,182,184,0,193],
[170,190,187,169,183,144,167,176,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,164,184,183,171,183,171,184],
[159,0,163,159,167,164,157,161,166,154],
[165,178,0,170,166,180,159,175,167,180],
[177,182,171,0,167,173,177,173,156,180],
[157,174,175,174,0,161,162,184,165,169],
[158,177,161,168,180,0,162,173,173,178],
[170,184,182,164,179,179,0,180,179,170],
[158,180,166,168,157,168,161,0,164,170],
[170,175,174,185,176,168,162,177,0,173],
[157,187,161,161,172,163,171,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,191,183,154,180,175,180,144,155],
[171,0,185,169,174,150,161,152,158,165],
[150,156,0,169,179,161,169,169,152,157],
[158,172,172,0,174,159,184,170,167,156],
[187,167,162,167,0,157,172,168,154,154],
[161,191,180,182,184,0,189,182,183,160],
[166,180,172,157,169,152,0,174,159,159],
[161,189,172,171,173,159,167,0,157,158],
[197,183,189,174,187,158,182,184,0,184],
[186,176,184,185,187,181,182,183,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,168,175,175,168,180,187,181,170],
[156,0,158,165,164,140,171,174,157,160],
[173,183,0,192,177,170,173,151,183,189],
[166,176,149,0,161,163,164,170,176,165],
[166,177,164,180,0,173,192,184,163,177],
[173,201,171,178,168,0,175,185,178,176],
[161,170,168,177,149,166,0,170,183,183],
[154,167,190,171,157,156,171,0,188,165],
[160,184,158,165,178,163,158,153,0,169],
[171,181,152,176,164,165,158,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,168,181,172,195,211,184,191,160],
[147,0,155,163,155,163,180,170,147,152],
[173,186,0,183,182,193,203,185,162,184],
[160,178,158,0,168,172,180,166,161,158],
[169,186,159,173,0,190,193,160,176,167],
[146,178,148,169,151,0,168,153,160,166],
[130,161,138,161,148,173,0,153,162,162],
[157,171,156,175,181,188,188,0,161,163],
[150,194,179,180,165,181,179,180,0,155],
[181,189,157,183,174,175,179,178,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,166,160,167,155,168,172,165],
[174,0,170,161,163,168,151,169,162,161],
[170,171,0,165,175,174,165,172,172,167],
[175,180,176,0,165,174,169,173,180,167],
[181,178,166,176,0,174,166,176,178,169],
[174,173,167,167,167,0,173,163,182,169],
[186,190,176,172,175,168,0,173,190,179],
[173,172,169,168,165,178,168,0,176,172],
[169,179,169,161,163,159,151,165,0,146],
[176,180,174,174,172,172,162,169,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,155,160,140,158,155,157,184,135],
[161,0,148,157,162,152,152,150,155,139],
[186,193,0,161,187,160,168,168,165,139],
[181,184,180,0,182,167,167,180,184,175],
[201,179,154,159,0,164,167,177,161,144],
[183,189,181,174,177,0,155,162,162,155],
[186,189,173,174,174,186,0,173,174,150],
[184,191,173,161,164,179,168,0,177,145],
[157,186,176,157,180,179,167,164,0,156],
[206,202,202,166,197,186,191,196,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,174,166,172,193,184,181,187],
[159,0,177,173,156,159,165,174,165,164],
[174,164,0,166,160,164,169,172,156,159],
[167,168,175,0,157,177,180,187,158,173],
[175,185,181,184,0,170,173,172,174,175],
[169,182,177,164,171,0,177,182,167,168],
[148,176,172,161,168,164,0,172,163,174],
[157,167,169,154,169,159,169,0,150,169],
[160,176,185,183,167,174,178,191,0,182],
[154,177,182,168,166,173,167,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,165,167,181,178,181,171,181],
[170,0,177,163,181,160,161,169,187,177],
[175,164,0,171,172,186,180,186,180,187],
[176,178,170,0,184,176,190,191,180,179],
[174,160,169,157,0,171,179,170,177,164],
[160,181,155,165,170,0,184,170,180,180],
[163,180,161,151,162,157,0,166,163,164],
[160,172,155,150,171,171,175,0,181,160],
[170,154,161,161,164,161,178,160,0,157],
[160,164,154,162,177,161,177,181,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,165,161,179,178,145,178,192,193],
[95,0,114,145,116,98,192,132,145,97],
[176,227,0,159,147,212,176,145,193,177],
[180,196,182,0,183,180,161,131,147,228],
[162,225,194,158,0,228,176,148,176,175],
[163,243,129,161,113,0,159,132,159,176],
[196,149,165,180,165,182,0,165,196,196],
[163,209,196,210,193,209,176,0,160,226],
[149,196,148,194,165,182,145,181,0,161],
[148,244,164,113,166,165,145,115,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,171,162,147,162,161,177,172],
[168,0,184,179,161,164,168,155,173,169],
[166,157,0,171,186,159,158,164,185,149],
[170,162,170,0,168,158,159,166,179,164],
[179,180,155,173,0,174,156,165,175,147],
[194,177,182,183,167,0,168,172,184,165],
[179,173,183,182,185,173,0,168,185,175],
[180,186,177,175,176,169,173,0,200,171],
[164,168,156,162,166,157,156,141,0,148],
[169,172,192,177,194,176,166,170,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,208,115,151,191,151,151,152,170],
[190,0,150,174,152,229,154,115,152,112],
[133,191,0,153,171,208,114,152,134,134],
[226,167,188,0,209,188,209,187,172,168],
[190,189,170,132,0,229,190,169,153,172],
[150,112,133,153,112,0,169,92,133,111],
[190,187,227,132,151,172,0,111,132,130],
[190,226,189,154,172,249,230,0,209,209],
[189,189,207,169,188,208,209,132,0,113],
[171,229,207,173,169,230,211,132,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,165,182,146,181,179,164,141,175],
[145,0,198,186,173,137,201,174,123,178],
[176,143,0,171,171,183,167,173,159,155],
[159,155,170,0,146,164,192,142,149,151],
[195,168,170,195,0,170,208,169,156,167],
[160,204,158,177,171,0,173,166,177,166],
[162,140,174,149,133,168,0,166,157,171],
[177,167,168,199,172,175,175,0,135,169],
[200,218,182,192,185,164,184,206,0,185],
[166,163,186,190,174,175,170,172,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,146,183,189,178,173,178,186],
[158,0,142,147,173,173,162,159,182,150],
[168,199,0,183,171,177,162,177,179,163],
[195,194,158,0,197,199,189,188,192,174],
[158,168,170,144,0,160,159,166,173,149],
[152,168,164,142,181,0,164,147,163,167],
[163,179,179,152,182,177,0,170,167,170],
[168,182,164,153,175,194,171,0,188,160],
[163,159,162,149,168,178,174,153,0,174],
[155,191,178,167,192,174,171,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,159,181,173,160,174,165,159],
[171,0,175,162,165,170,157,172,158,152],
[159,166,0,170,172,163,151,165,166,164],
[182,179,171,0,178,172,178,171,176,169],
[160,176,169,163,0,168,161,154,167,165],
[168,171,178,169,173,0,160,177,160,152],
[181,184,190,163,180,181,0,169,176,177],
[167,169,176,170,187,164,172,0,168,161],
[176,183,175,165,174,181,165,173,0,168],
[182,189,177,172,176,189,164,180,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,175,156,181,165,164,162,167,183],
[162,0,191,165,183,152,147,164,167,169],
[166,150,0,167,172,175,164,159,156,159],
[185,176,174,0,179,177,177,166,169,164],
[160,158,169,162,0,146,147,160,154,161],
[176,189,166,164,195,0,163,163,176,191],
[177,194,177,164,194,178,0,181,177,187],
[179,177,182,175,181,178,160,0,175,172],
[174,174,185,172,187,165,164,166,0,170],
[158,172,182,177,180,150,154,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,163,168,170,166,168,164,178,169],
[165,0,175,175,160,172,165,164,171,176],
[178,166,0,173,169,162,162,175,172,178],
[173,166,168,0,166,156,167,168,178,178],
[171,181,172,175,0,171,177,163,180,172],
[175,169,179,185,170,0,175,182,181,174],
[173,176,179,174,164,166,0,174,173,180],
[177,177,166,173,178,159,167,0,172,170],
[163,170,169,163,161,160,168,169,0,184],
[172,165,163,163,169,167,161,171,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,185,162,142,172,167,150,172],
[166,0,169,185,162,133,143,161,141,178],
[157,172,0,182,178,148,160,197,147,197],
[156,156,159,0,186,129,174,168,154,191],
[179,179,163,155,0,135,152,167,158,185],
[199,208,193,212,206,0,168,201,167,190],
[169,198,181,167,189,173,0,174,176,220],
[174,180,144,173,174,140,167,0,178,195],
[191,200,194,187,183,174,165,163,0,202],
[169,163,144,150,156,151,121,146,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,168,161,171,158,171,173,171],
[171,0,161,159,161,163,161,175,163,168],
[178,180,0,163,181,171,160,166,165,167],
[173,182,178,0,174,170,149,176,164,159],
[180,180,160,167,0,176,154,176,167,163],
[170,178,170,171,165,0,164,168,160,173],
[183,180,181,192,187,177,0,186,163,175],
[170,166,175,165,165,173,155,0,164,170],
[168,178,176,177,174,181,178,177,0,169],
[170,173,174,182,178,168,166,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,186,171,152,167,168,170,136,205],
[156,0,236,221,154,153,116,102,118,184],
[155,105,0,207,136,137,134,155,101,172],
[170,120,134,0,151,133,113,65,99,166],
[189,187,205,190,0,190,221,172,154,206],
[174,188,204,208,151,0,187,187,155,206],
[173,225,207,228,120,154,0,137,171,223],
[171,239,186,276,169,154,204,0,104,204],
[205,223,240,242,187,186,170,237,0,258],
[136,157,169,175,135,135,118,137,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,161,166,177,165,169,158,179,164],
[173,0,173,172,177,194,184,164,184,173],
[180,168,0,166,165,174,174,179,183,179],
[175,169,175,0,180,178,171,167,199,158],
[164,164,176,161,0,185,168,178,193,174],
[176,147,167,163,156,0,170,159,163,165],
[172,157,167,170,173,171,0,156,195,168],
[183,177,162,174,163,182,185,0,191,172],
[162,157,158,142,148,178,146,150,0,163],
[177,168,162,183,167,176,173,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,170,171,172,174,167,170,182],
[171,0,167,180,161,184,170,187,172,187],
[169,174,0,191,166,188,181,162,177,190],
[171,161,150,0,162,167,177,155,163,172],
[170,180,175,179,0,173,176,167,167,158],
[169,157,153,174,168,0,180,166,180,168],
[167,171,160,164,165,161,0,173,153,182],
[174,154,179,186,174,175,168,0,169,178],
[171,169,164,178,174,161,188,172,0,181],
[159,154,151,169,183,173,159,163,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,177,173,185,165,163,168,170],
[167,0,176,166,172,177,172,162,157,178],
[173,165,0,165,157,187,172,172,168,160],
[164,175,176,0,172,179,179,154,161,159],
[168,169,184,169,0,189,163,161,160,158],
[156,164,154,162,152,0,160,148,149,160],
[176,169,169,162,178,181,0,171,171,157],
[178,179,169,187,180,193,170,0,170,183],
[173,184,173,180,181,192,170,171,0,172],
[171,163,181,182,183,181,184,158,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,132,208,155,135,176,230,192,152],
[129,0,76,116,114,147,114,152,96,76],
[209,265,0,206,153,210,212,229,229,208],
[133,225,135,0,96,208,170,187,186,169],
[186,227,188,245,0,190,246,191,168,225],
[206,194,131,133,151,0,174,211,172,150],
[165,227,129,171,95,167,0,226,186,206],
[111,189,112,154,150,130,115,0,131,149],
[149,245,112,155,173,169,155,210,0,173],
[189,265,133,172,116,191,135,192,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,162,181,166,171,165,187,172],
[176,0,170,173,172,169,158,174,186,174],
[166,171,0,170,189,168,174,167,187,166],
[179,168,171,0,176,169,169,167,194,180],
[160,169,152,165,0,150,166,160,179,168],
[175,172,173,172,191,0,169,164,194,170],
[170,183,167,172,175,172,0,167,190,183],
[176,167,174,174,181,177,174,0,188,178],
[154,155,154,147,162,147,151,153,0,158],
[169,167,175,161,173,171,158,163,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,173,159,159,154,178,167,169,158],
[190,0,169,151,160,148,168,162,179,167],
[168,172,0,158,172,155,169,180,170,177],
[182,190,183,0,163,175,185,181,184,194],
[182,181,169,178,0,174,181,176,178,190],
[187,193,186,166,167,0,179,172,175,175],
[163,173,172,156,160,162,0,176,158,168],
[174,179,161,160,165,169,165,0,174,162],
[172,162,171,157,163,166,183,167,0,163],
[183,174,164,147,151,166,173,179,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,170,177,172,187,181,168,163],
[162,0,180,156,156,160,166,168,169,152],
[159,161,0,156,148,158,166,183,161,171],
[171,185,185,0,170,176,174,184,174,169],
[164,185,193,171,0,166,179,176,179,158],
[169,181,183,165,175,0,179,167,174,155],
[154,175,175,167,162,162,0,167,167,153],
[160,173,158,157,165,174,174,0,157,156],
[173,172,180,167,162,167,174,184,0,153],
[178,189,170,172,183,186,188,185,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,167,166,141,166,153,164,148,166],
[185,0,196,188,159,178,180,177,164,172],
[174,145,0,174,166,185,171,169,180,178],
[175,153,167,0,152,164,152,176,161,176],
[200,182,175,189,0,192,183,179,168,175],
[175,163,156,177,149,0,176,169,159,166],
[188,161,170,189,158,165,0,178,159,177],
[177,164,172,165,162,172,163,0,157,180],
[193,177,161,180,173,182,182,184,0,172],
[175,169,163,165,166,175,164,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,201,182,180,179,179,183,180,160],
[171,0,194,155,166,174,172,164,167,152],
[140,147,0,146,157,148,156,152,152,153],
[159,186,195,0,171,171,170,168,174,174],
[161,175,184,170,0,172,171,188,166,172],
[162,167,193,170,169,0,167,168,176,157],
[162,169,185,171,170,174,0,174,177,157],
[158,177,189,173,153,173,167,0,162,174],
[161,174,189,167,175,165,164,179,0,167],
[181,189,188,167,169,184,184,167,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,186,167,167,169,151,173,155,177],
[175,0,178,174,167,179,164,166,179,173],
[155,163,0,158,148,168,164,151,151,182],
[174,167,183,0,155,183,155,167,170,185],
[174,174,193,186,0,181,170,182,176,197],
[172,162,173,158,160,0,164,166,170,184],
[190,177,177,186,171,177,0,172,166,183],
[168,175,190,174,159,175,169,0,169,170],
[186,162,190,171,165,171,175,172,0,183],
[164,168,159,156,144,157,158,171,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,154,159,162,152,161,166,176,172],
[157,0,159,182,161,167,179,167,168,169],
[187,182,0,165,170,182,159,183,168,162],
[182,159,176,0,185,189,169,185,167,172],
[179,180,171,156,0,194,171,164,167,179],
[189,174,159,152,147,0,164,175,172,169],
[180,162,182,172,170,177,0,183,165,168],
[175,174,158,156,177,166,158,0,159,162],
[165,173,173,174,174,169,176,182,0,164],
[169,172,179,169,162,172,173,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,170,174,181,161,164,162,169],
[158,0,180,159,167,170,154,165,160,165],
[171,161,0,178,155,172,160,167,160,168],
[171,182,163,0,168,176,174,165,166,175],
[167,174,186,173,0,180,173,169,169,169],
[160,171,169,165,161,0,162,165,157,170],
[180,187,181,167,168,179,0,174,173,172],
[177,176,174,176,172,176,167,0,170,166],
[179,181,181,175,172,184,168,171,0,183],
[172,176,173,166,172,171,169,175,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,164,186,167,186,195,153,171,165],
[148,0,184,170,158,186,192,135,160,162],
[177,157,0,166,163,155,173,155,164,163],
[155,171,175,0,146,160,154,157,158,153],
[174,183,178,195,0,179,174,185,183,162],
[155,155,186,181,162,0,168,146,156,163],
[146,149,168,187,167,173,0,161,157,147],
[188,206,186,184,156,195,180,0,177,181],
[170,181,177,183,158,185,184,164,0,170],
[176,179,178,188,179,178,194,160,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,164,175,162,154,158,137,168,164],
[176,0,175,169,164,159,195,170,177,181],
[177,166,0,174,176,162,181,178,162,181],
[166,172,167,0,182,177,170,160,168,188],
[179,177,165,159,0,163,174,174,162,166],
[187,182,179,164,178,0,171,173,175,180],
[183,146,160,171,167,170,0,164,167,166],
[204,171,163,181,167,168,177,0,174,170],
[173,164,179,173,179,166,174,167,0,163],
[177,160,160,153,175,161,175,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,175,167,169,177,154,171,172],
[167,0,172,178,183,168,169,179,175,176],
[169,169,0,166,172,161,179,157,178,165],
[166,163,175,0,167,155,166,169,188,181],
[174,158,169,174,0,166,165,162,178,173],
[172,173,180,186,175,0,177,170,188,184],
[164,172,162,175,176,164,0,166,182,172],
[187,162,184,172,179,171,175,0,173,170],
[170,166,163,153,163,153,159,168,0,178],
[169,165,176,160,168,157,169,171,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,187,193,174,178,172,185,186,157],
[166,0,188,185,184,180,172,167,180,163],
[154,153,0,171,171,156,163,160,169,158],
[148,156,170,0,153,162,161,167,161,167],
[167,157,170,188,0,176,165,171,163,158],
[163,161,185,179,165,0,163,174,158,152],
[169,169,178,180,176,178,0,178,187,174],
[156,174,181,174,170,167,163,0,171,152],
[155,161,172,180,178,183,154,170,0,161],
[184,178,183,174,183,189,167,189,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,153,128,146,185,158,173,150,167],
[193,0,172,165,167,169,177,179,169,175],
[188,169,0,158,164,170,167,157,185,163],
[213,176,183,0,168,189,180,188,176,168],
[195,174,177,173,0,185,188,184,170,180],
[156,172,171,152,156,0,159,170,148,166],
[183,164,174,161,153,182,0,177,177,172],
[168,162,184,153,157,171,164,0,173,151],
[191,172,156,165,171,193,164,168,0,171],
[174,166,178,173,161,175,169,190,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,237,172,203,170,238,272,237,241],
[135,0,203,171,272,170,204,238,203,273],
[104,138,0,136,138,139,172,240,172,207],
[169,170,205,0,238,206,272,274,237,240],
[138,69,203,103,0,173,136,135,169,138],
[171,171,202,135,168,0,168,237,202,206],
[103,137,169,69,205,173,0,203,135,172],
[69,103,101,67,206,104,138,0,101,173],
[104,138,169,104,172,139,206,240,0,174],
[100,68,134,101,203,135,169,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,175,140,145,153,148,162,147],
[176,0,177,168,181,191,212,181,195,172],
[172,164,0,169,165,172,190,147,175,178],
[166,173,172,0,159,187,194,185,192,176],
[201,160,176,182,0,188,182,195,163,169],
[196,150,169,154,153,0,166,161,173,181],
[188,129,151,147,159,175,0,146,145,161],
[193,160,194,156,146,180,195,0,189,199],
[179,146,166,149,178,168,196,152,0,188],
[194,169,163,165,172,160,180,142,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,184,180,169,195,187,192,194,198],
[163,0,168,191,178,182,188,190,191,198],
[157,173,0,167,157,169,177,186,182,185],
[161,150,174,0,160,165,158,162,175,195],
[172,163,184,181,0,176,192,203,182,199],
[146,159,172,176,165,0,170,165,174,194],
[154,153,164,183,149,171,0,188,176,192],
[149,151,155,179,138,176,153,0,166,175],
[147,150,159,166,159,167,165,175,0,169],
[143,143,156,146,142,147,149,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,181,177,170,185,168,178,187,197],
[171,0,180,159,169,173,182,166,172,166],
[160,161,0,162,171,166,170,168,177,172],
[164,182,179,0,177,211,173,196,179,185],
[171,172,170,164,0,186,164,194,178,171],
[156,168,175,130,155,0,163,170,168,174],
[173,159,171,168,177,178,0,175,180,194],
[163,175,173,145,147,171,166,0,167,171],
[154,169,164,162,163,173,161,174,0,164],
[144,175,169,156,170,167,147,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,171,197,165,164,142,186,196,186],
[138,0,163,167,167,193,145,157,209,146],
[170,178,0,207,186,190,141,199,191,177],
[144,174,134,0,135,144,161,150,153,153],
[176,174,155,206,0,172,141,183,185,210],
[177,148,151,197,169,0,175,205,199,195],
[199,196,200,180,200,166,0,187,185,191],
[155,184,142,191,158,136,154,0,194,167],
[145,132,150,188,156,142,156,147,0,174],
[155,195,164,188,131,146,150,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,181,197,180,193,162,192,215,235],
[151,0,148,179,157,185,178,160,157,164],
[160,193,0,191,195,191,192,180,197,162],
[144,162,150,0,186,174,178,172,200,176],
[161,184,146,155,0,176,118,154,158,165],
[148,156,150,167,165,0,126,166,171,189],
[179,163,149,163,223,215,0,171,197,164],
[149,181,161,169,187,175,170,0,170,183],
[126,184,144,141,183,170,144,171,0,176],
[106,177,179,165,176,152,177,158,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,155,166,147,148,159,164,167],
[178,0,146,163,137,147,154,173,150,147],
[177,195,0,196,164,184,182,190,186,186],
[186,178,145,0,156,149,171,171,157,171],
[175,204,177,185,0,170,191,165,182,187],
[194,194,157,192,171,0,184,186,179,192],
[193,187,159,170,150,157,0,176,152,178],
[182,168,151,170,176,155,165,0,158,168],
[177,191,155,184,159,162,189,183,0,172],
[174,194,155,170,154,149,163,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,164,162,160,168,157,158,147],
[180,0,177,174,184,164,179,161,174,152],
[174,164,0,153,155,167,161,176,171,158],
[177,167,188,0,165,167,155,156,176,158],
[179,157,186,176,0,168,176,165,185,166],
[181,177,174,174,173,0,170,163,179,147],
[173,162,180,186,165,171,0,165,178,175],
[184,180,165,185,176,178,176,0,176,171],
[183,167,170,165,156,162,163,165,0,160],
[194,189,183,183,175,194,166,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,163,185,155,167,180,139,163,166],
[199,0,171,200,177,196,190,181,188,170],
[178,170,0,203,181,179,205,168,192,167],
[156,141,138,0,163,166,176,155,170,168],
[186,164,160,178,0,201,198,160,183,182],
[174,145,162,175,140,0,174,136,160,178],
[161,151,136,165,143,167,0,139,164,148],
[202,160,173,186,181,205,202,0,183,183],
[178,153,149,171,158,181,177,158,0,169],
[175,171,174,173,159,163,193,158,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,180,171,175,160,173,171,180],
[159,0,169,179,162,170,163,184,179,179],
[170,172,0,196,158,176,180,183,168,181],
[161,162,145,0,156,175,146,165,157,175],
[170,179,183,185,0,180,166,174,189,198],
[166,171,165,166,161,0,166,159,178,188],
[181,178,161,195,175,175,0,170,174,191],
[168,157,158,176,167,182,171,0,175,175],
[170,162,173,184,152,163,167,166,0,179],
[161,162,160,166,143,153,150,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,156,136,154,151,163,147,194,155],
[176,0,160,133,143,168,160,136,178,140],
[185,181,0,150,158,164,161,154,207,166],
[205,208,191,0,169,190,167,195,225,180],
[187,198,183,172,0,194,159,147,227,147],
[190,173,177,151,147,0,169,183,208,179],
[178,181,180,174,182,172,0,150,211,165],
[194,205,187,146,194,158,191,0,211,182],
[147,163,134,116,114,133,130,130,0,125],
[186,201,175,161,194,162,176,159,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,180,163,163,192,156,175,160],
[180,0,163,174,181,182,171,172,175,157],
[175,178,0,175,174,177,162,164,173,161],
[161,167,166,0,159,174,167,163,160,172],
[178,160,167,182,0,187,163,163,182,163],
[178,159,164,167,154,0,155,161,166,156],
[149,170,179,174,178,186,0,166,186,157],
[185,169,177,178,178,180,175,0,186,161],
[166,166,168,181,159,175,155,155,0,154],
[181,184,180,169,178,185,184,180,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,199,182,173,179,182,179,165,152],
[155,0,190,142,161,143,144,137,139,157],
[142,151,0,141,149,149,127,109,113,142],
[159,199,200,0,138,168,138,155,152,172],
[168,180,192,203,0,164,193,190,151,168],
[162,198,192,173,177,0,149,160,143,175],
[159,197,214,203,148,192,0,165,171,168],
[162,204,232,186,151,181,176,0,167,179],
[176,202,228,189,190,198,170,174,0,173],
[189,184,199,169,173,166,173,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,167,174,174,165,172,179,183],
[183,0,186,163,185,176,172,177,198,177],
[174,155,0,178,185,175,170,161,187,179],
[174,178,163,0,205,182,176,167,190,173],
[167,156,156,136,0,149,149,152,166,163],
[167,165,166,159,192,0,159,166,180,172],
[176,169,171,165,192,182,0,179,188,182],
[169,164,180,174,189,175,162,0,181,187],
[162,143,154,151,175,161,153,160,0,168],
[158,164,162,168,178,169,159,154,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,188,203,207,205,206,195,163,206],
[139,0,162,169,163,148,164,170,134,160],
[153,179,0,170,168,170,174,174,155,179],
[138,172,171,0,184,169,161,194,154,177],
[134,178,173,157,0,172,165,184,159,156],
[136,193,171,172,169,0,187,167,173,174],
[135,177,167,180,176,154,0,166,157,180],
[146,171,167,147,157,174,175,0,161,167],
[178,207,186,187,182,168,184,180,0,185],
[135,181,162,164,185,167,161,174,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,184,168,159,190,178,165,167,158],
[152,0,176,170,161,181,158,173,161,142],
[157,165,0,175,141,176,159,161,162,145],
[173,171,166,0,171,186,166,160,165,176],
[182,180,200,170,0,191,166,170,185,165],
[151,160,165,155,150,0,139,151,158,138],
[163,183,182,175,175,202,0,170,173,157],
[176,168,180,181,171,190,171,0,181,168],
[174,180,179,176,156,183,168,160,0,154],
[183,199,196,165,176,203,184,173,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,176,160,174,161,167,149,179,181],
[172,0,164,168,157,153,173,152,169,165],
[165,177,0,175,163,164,181,155,185,171],
[181,173,166,0,156,162,167,163,166,175],
[167,184,178,185,0,166,197,178,186,170],
[180,188,177,179,175,0,189,165,189,180],
[174,168,160,174,144,152,0,159,168,177],
[192,189,186,178,163,176,182,0,190,173],
[162,172,156,175,155,152,173,151,0,180],
[160,176,170,166,171,161,164,168,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,187,160,172,156,134,170,131,159],
[209,0,185,174,201,183,199,172,199,155],
[154,156,0,157,144,180,199,143,128,116],
[181,167,184,0,147,168,158,155,154,168],
[169,140,197,194,0,153,157,130,165,114],
[185,158,161,173,188,0,187,172,209,198],
[207,142,142,183,184,154,0,208,169,153],
[171,169,198,186,211,169,133,0,183,153],
[210,142,213,187,176,132,172,158,0,156],
[182,186,225,173,227,143,188,188,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,203,178,181,166,176,167,188],
[167,0,139,156,155,184,133,188,185,181],
[180,202,0,177,150,220,178,215,194,220],
[138,185,164,0,158,165,158,174,165,202],
[163,186,191,183,0,230,182,194,171,206],
[160,157,121,176,111,0,128,181,133,164],
[175,208,163,183,159,213,0,215,211,196],
[165,153,126,167,147,160,126,0,180,157],
[174,156,147,176,170,208,130,161,0,174],
[153,160,121,139,135,177,145,184,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,196,176,167,176,166,164,171],
[163,0,177,172,177,173,161,173,177,172],
[163,164,0,185,165,174,160,156,158,166],
[145,169,156,0,158,160,164,152,148,162],
[165,164,176,183,0,154,154,152,155,168],
[174,168,167,181,187,0,174,175,174,170],
[165,180,181,177,187,167,0,160,160,166],
[175,168,185,189,189,166,181,0,164,164],
[177,164,183,193,186,167,181,177,0,166],
[170,169,175,179,173,171,175,177,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,137,158,156,181,145,147,142,155],
[198,0,184,172,195,194,168,172,163,166],
[204,157,0,172,177,191,155,161,152,163],
[183,169,169,0,167,190,181,157,175,168],
[185,146,164,174,0,172,152,157,148,157],
[160,147,150,151,169,0,172,153,148,152],
[196,173,186,160,189,169,0,175,163,170],
[194,169,180,184,184,188,166,0,179,188],
[199,178,189,166,193,193,178,162,0,165],
[186,175,178,173,184,189,171,153,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,167,214,202,163,170,136,145,174],
[165,0,175,199,200,184,189,153,176,165],
[174,166,0,209,202,172,214,146,149,157],
[127,142,132,0,134,115,132,109,89,118],
[139,141,139,207,0,127,167,92,98,140],
[178,157,169,226,214,0,210,140,171,182],
[171,152,127,209,174,131,0,147,142,138],
[205,188,195,232,249,201,194,0,167,189],
[196,165,192,252,243,170,199,174,0,149],
[167,176,184,223,201,159,203,152,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,170,176,157,164,171,166,174,157],
[198,0,173,175,163,188,183,183,170,170],
[171,168,0,169,157,172,165,171,165,162],
[165,166,172,0,173,175,190,166,166,157],
[184,178,184,168,0,192,182,182,174,178],
[177,153,169,166,149,0,176,177,159,151],
[170,158,176,151,159,165,0,180,169,147],
[175,158,170,175,159,164,161,0,173,161],
[167,171,176,175,167,182,172,168,0,167],
[184,171,179,184,163,190,194,180,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,195,166,184,158,176,184,199],
[172,0,160,189,172,173,175,166,175,190],
[181,181,0,205,173,177,159,184,177,199],
[146,152,136,0,150,167,161,148,161,170],
[175,169,168,191,0,174,169,180,175,194],
[157,168,164,174,167,0,168,171,181,193],
[183,166,182,180,172,173,0,167,183,197],
[165,175,157,193,161,170,174,0,172,175],
[157,166,164,180,166,160,158,169,0,176],
[142,151,142,171,147,148,144,166,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,164,144,146,147,147,157,159,132],
[158,0,150,131,156,138,142,153,126,126],
[177,191,0,182,170,163,170,189,176,161],
[197,210,159,0,171,154,164,175,164,152],
[195,185,171,170,0,168,170,174,179,166],
[194,203,178,187,173,0,172,155,164,165],
[194,199,171,177,171,169,0,189,159,163],
[184,188,152,166,167,186,152,0,175,166],
[182,215,165,177,162,177,182,166,0,188],
[209,215,180,189,175,176,178,175,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,225,202,228,225,159,206,227,206],
[136,0,113,181,137,159,159,162,161,116],
[116,228,0,138,158,205,161,162,183,138],
[139,160,203,0,161,160,138,162,160,163],
[113,204,183,180,0,159,160,208,206,159],
[116,182,136,181,182,0,115,140,229,164],
[182,182,180,203,181,226,0,158,182,160],
[135,179,179,179,133,201,183,0,226,158],
[114,180,158,181,135,112,159,115,0,116],
[135,225,203,178,182,177,181,183,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,127,162,111,145,144,216,124,127],
[161,0,106,125,124,126,126,215,106,106],
[214,235,0,197,159,196,197,251,178,198],
[179,216,144,0,143,144,126,215,141,144],
[230,217,182,198,0,145,178,197,179,162],
[196,215,145,197,196,0,215,269,161,125],
[197,215,144,215,163,126,0,214,126,126],
[125,126,90,126,144,72,127,0,125,73],
[217,235,163,200,162,180,215,216,0,181],
[214,235,143,197,179,216,215,268,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,224,209,183,179,160,199,172],
[175,0,179,194,185,194,168,156,188,157],
[171,162,0,183,202,188,152,164,161,159],
[117,147,158,0,168,157,147,148,158,175],
[132,156,139,173,0,161,149,130,184,164],
[158,147,153,184,180,0,121,143,177,181],
[162,173,189,194,192,220,0,186,201,201],
[181,185,177,193,211,198,155,0,188,182],
[142,153,180,183,157,164,140,153,0,160],
[169,184,182,166,177,160,140,159,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,171,113,84,169,142,169,112],
[171,0,112,199,57,115,255,115,171,141],
[172,229,0,199,117,114,201,171,171,142],
[170,142,142,0,88,115,198,116,198,140],
[228,284,224,253,0,198,228,170,225,168],
[257,226,227,226,143,0,227,227,198,226],
[172,86,140,143,113,114,0,114,170,86],
[199,226,170,225,171,114,227,0,168,140],
[172,170,170,143,116,143,171,173,0,87],
[229,200,199,201,173,115,255,201,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,162,167,176,187,158,183,184],
[161,0,144,181,175,173,173,155,185,163],
[176,197,0,170,172,181,176,183,174,184],
[179,160,171,0,167,164,169,159,168,157],
[174,166,169,174,0,189,168,167,173,160],
[165,168,160,177,152,0,181,176,199,172],
[154,168,165,172,173,160,0,163,166,170],
[183,186,158,182,174,165,178,0,173,180],
[158,156,167,173,168,142,175,168,0,149],
[157,178,157,184,181,169,171,161,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,149,151,163,175,157,167,155,167],
[173,0,169,164,162,160,182,142,166,168],
[192,172,0,179,161,178,187,163,176,164],
[190,177,162,0,172,175,186,189,174,176],
[178,179,180,169,0,173,181,176,151,168],
[166,181,163,166,168,0,166,179,160,157],
[184,159,154,155,160,175,0,155,149,152],
[174,199,178,152,165,162,186,0,177,177],
[186,175,165,167,190,181,192,164,0,177],
[174,173,177,165,173,184,189,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,148,159,126,146,166,121,134,144],
[238,0,169,197,165,172,197,194,177,183],
[193,172,0,195,172,167,206,171,185,166],
[182,144,146,0,152,150,176,165,151,148],
[215,176,169,189,0,172,194,173,158,166],
[195,169,174,191,169,0,187,200,158,176],
[175,144,135,165,147,154,0,163,134,165],
[220,147,170,176,168,141,178,0,151,158],
[207,164,156,190,183,183,207,190,0,183],
[197,158,175,193,175,165,176,183,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,168,200,201,201,182,181,185,183],
[134,0,141,153,147,157,145,148,156,144],
[173,200,0,190,191,190,176,179,197,169],
[141,188,151,0,180,178,168,174,170,138],
[140,194,150,161,0,165,156,150,168,161],
[140,184,151,163,176,0,157,149,157,138],
[159,196,165,173,185,184,0,166,158,161],
[160,193,162,167,191,192,175,0,180,180],
[156,185,144,171,173,184,183,161,0,154],
[158,197,172,203,180,203,180,161,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,158,170,174,149,173,162,166,168],
[185,0,179,166,187,179,190,173,188,190],
[183,162,0,158,163,163,173,175,163,179],
[171,175,183,0,184,171,177,167,184,191],
[167,154,178,157,0,173,170,161,159,170],
[192,162,178,170,168,0,185,183,173,188],
[168,151,168,164,171,156,0,169,164,175],
[179,168,166,174,180,158,172,0,177,162],
[175,153,178,157,182,168,177,164,0,179],
[173,151,162,150,171,153,166,179,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,204,167,213,204,166,194,206,200],
[163,0,203,182,162,171,168,188,192,176],
[137,138,0,145,143,177,166,169,160,162],
[174,159,196,0,171,183,179,165,155,173],
[128,179,198,170,0,156,172,185,159,162],
[137,170,164,158,185,0,171,156,159,168],
[175,173,175,162,169,170,0,187,186,178],
[147,153,172,176,156,185,154,0,170,134],
[135,149,181,186,182,182,155,171,0,165],
[141,165,179,168,179,173,163,207,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,166,183,152,160,166,166,187],
[157,0,167,157,159,154,167,177,162,165],
[166,174,0,172,149,164,147,180,179,184],
[175,184,169,0,162,166,162,176,158,171],
[158,182,192,179,0,184,164,179,163,190],
[189,187,177,175,157,0,173,187,185,187],
[181,174,194,179,177,168,0,175,171,184],
[175,164,161,165,162,154,166,0,156,177],
[175,179,162,183,178,156,170,185,0,187],
[154,176,157,170,151,154,157,164,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,191,188,157,188,182,199,205,196],
[136,0,167,169,167,155,153,169,168,154],
[150,174,0,198,148,168,141,175,213,152],
[153,172,143,0,152,165,144,169,186,156],
[184,174,193,189,0,185,152,185,212,181],
[153,186,173,176,156,0,159,166,177,157],
[159,188,200,197,189,182,0,178,192,153],
[142,172,166,172,156,175,163,0,189,166],
[136,173,128,155,129,164,149,152,0,160],
[145,187,189,185,160,184,188,175,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,163,194,197,172,184,196,184,214],
[164,0,186,154,175,173,184,176,202,173],
[178,155,0,164,166,153,157,155,167,166],
[147,187,177,0,178,136,149,186,204,159],
[144,166,175,163,0,142,165,195,192,174],
[169,168,188,205,199,0,196,186,225,235],
[157,157,184,192,176,145,0,217,213,161],
[145,165,186,155,146,155,124,0,206,174],
[157,139,174,137,149,116,128,135,0,136],
[127,168,175,182,167,106,180,167,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,157,175,174,170,166,171,156],
[172,0,164,167,180,178,187,157,186,179],
[177,177,0,170,160,170,179,171,175,172],
[184,174,171,0,166,180,168,161,184,169],
[166,161,181,175,0,179,167,164,179,182],
[167,163,171,161,162,0,174,165,160,174],
[171,154,162,173,174,167,0,170,182,176],
[175,184,170,180,177,176,171,0,174,156],
[170,155,166,157,162,181,159,167,0,148],
[185,162,169,172,159,167,165,185,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,197,157,170,169,190,164,186],
[163,0,159,176,193,158,168,180,146,162],
[156,182,0,187,197,199,162,177,167,185],
[144,165,154,0,172,173,173,164,150,154],
[184,148,144,169,0,154,156,172,142,159],
[171,183,142,168,187,0,171,163,142,157],
[172,173,179,168,185,170,0,191,175,184],
[151,161,164,177,169,178,150,0,146,150],
[177,195,174,191,199,199,166,195,0,160],
[155,179,156,187,182,184,157,191,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,179,170,173,174,169,163,175,170],
[170,0,164,176,177,178,170,153,163,168],
[162,177,0,182,191,181,165,164,167,166],
[171,165,159,0,177,171,167,172,172,163],
[168,164,150,164,0,181,169,161,161,172],
[167,163,160,170,160,0,169,164,161,159],
[172,171,176,174,172,172,0,167,183,163],
[178,188,177,169,180,177,174,0,187,170],
[166,178,174,169,180,180,158,154,0,164],
[171,173,175,178,169,182,178,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,165,157,144,157,135,172,132],
[172,0,165,184,190,162,181,178,188,171],
[172,176,0,194,204,158,181,179,209,176],
[176,157,147,0,192,151,135,179,172,155],
[184,151,137,149,0,155,146,155,166,145],
[197,179,183,190,186,0,168,187,173,170],
[184,160,160,206,195,173,0,186,173,164],
[206,163,162,162,186,154,155,0,171,149],
[169,153,132,169,175,168,168,170,0,135],
[209,170,165,186,196,171,177,192,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,175,168,171,144,173,162,163,155],
[179,0,171,154,167,148,174,145,158,142],
[166,170,0,152,160,150,168,154,158,153],
[173,187,189,0,183,145,188,162,170,179],
[170,174,181,158,0,153,187,156,155,156],
[197,193,191,196,188,0,195,158,185,175],
[168,167,173,153,154,146,0,143,158,150],
[179,196,187,179,185,183,198,0,170,172],
[178,183,183,171,186,156,183,171,0,160],
[186,199,188,162,185,166,191,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,180,166,157,160,168,164,174,164],
[180,0,168,171,166,165,176,161,180,166],
[161,173,0,166,175,158,171,164,163,162],
[175,170,175,0,172,152,169,170,167,168],
[184,175,166,169,0,171,173,167,167,170],
[181,176,183,189,170,0,189,174,188,173],
[173,165,170,172,168,152,0,170,160,168],
[177,180,177,171,174,167,171,0,166,159],
[167,161,178,174,174,153,181,175,0,169],
[177,175,179,173,171,168,173,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,196,178,211,186,197,185,173,212],
[186,0,209,181,209,178,164,168,189,198],
[145,132,0,143,159,115,126,120,145,159],
[163,160,198,0,192,181,139,167,190,198],
[130,132,182,149,0,156,141,170,180,186],
[155,163,226,160,185,0,168,141,146,166],
[144,177,215,202,200,173,0,176,149,201],
[156,173,221,174,171,200,165,0,176,215],
[168,152,196,151,161,195,192,165,0,179],
[129,143,182,143,155,175,140,126,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,188,161,158,163,177,155,168,169],
[175,0,173,165,152,172,172,170,167,184],
[153,168,0,147,169,181,197,163,150,157],
[180,176,194,0,161,177,193,175,182,198],
[183,189,172,180,0,170,207,182,186,171],
[178,169,160,164,171,0,184,179,156,170],
[164,169,144,148,134,157,0,154,154,177],
[186,171,178,166,159,162,187,0,155,178],
[173,174,191,159,155,185,187,186,0,176],
[172,157,184,143,170,171,164,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,173,156,151,160,161,148,170,163],
[198,0,200,186,156,159,163,164,195,181],
[168,141,0,147,134,133,167,148,159,160],
[185,155,194,0,165,170,171,156,198,163],
[190,185,207,176,0,194,169,167,178,176],
[181,182,208,171,147,0,181,176,185,176],
[180,178,174,170,172,160,0,147,176,185],
[193,177,193,185,174,165,194,0,171,188],
[171,146,182,143,163,156,165,170,0,181],
[178,160,181,178,165,165,156,153,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,161,156,151,183,179,171,168],
[181,0,172,177,160,168,179,178,170,173],
[171,169,0,165,153,169,172,166,157,170],
[180,164,176,0,172,166,178,163,165,166],
[185,181,188,169,0,181,200,166,177,179],
[190,173,172,175,160,0,185,178,179,182],
[158,162,169,163,141,156,0,157,157,163],
[162,163,175,178,175,163,184,0,169,171],
[170,171,184,176,164,162,184,172,0,179],
[173,168,171,175,162,159,178,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,167,191,157,156,164,135,174,151],
[198,0,180,235,184,184,219,188,221,153],
[174,161,0,216,171,218,240,209,220,189],
[150,106,125,0,124,176,174,153,155,158],
[184,157,170,217,0,176,187,193,195,159],
[185,157,123,165,165,0,161,173,178,144],
[177,122,101,167,154,180,0,168,176,153],
[206,153,132,188,148,168,173,0,190,160],
[167,120,121,186,146,163,165,151,0,150],
[190,188,152,183,182,197,188,181,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,143,157,155,156,152,164,155,156],
[188,0,157,159,163,165,174,169,176,147],
[198,184,0,187,162,173,202,175,183,166],
[184,182,154,0,137,160,174,170,150,164],
[186,178,179,204,0,164,200,179,174,171],
[185,176,168,181,177,0,181,183,184,167],
[189,167,139,167,141,160,0,165,178,161],
[177,172,166,171,162,158,176,0,153,147],
[186,165,158,191,167,157,163,188,0,154],
[185,194,175,177,170,174,180,194,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,164,177,150,163,163,173,178,168],
[199,0,185,216,178,179,180,208,193,158],
[177,156,0,196,180,190,179,170,178,178],
[164,125,145,0,137,138,159,160,128,142],
[191,163,161,204,0,166,170,166,183,177],
[178,162,151,203,175,0,178,196,180,167],
[178,161,162,182,171,163,0,177,162,157],
[168,133,171,181,175,145,164,0,186,175],
[163,148,163,213,158,161,179,155,0,158],
[173,183,163,199,164,174,184,166,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,143,166,140,132,179,138,148,154],
[192,0,185,180,183,174,178,167,186,157],
[198,156,0,186,189,188,196,152,158,162],
[175,161,155,0,174,189,163,162,165,172],
[201,158,152,167,0,144,184,152,145,127],
[209,167,153,152,197,0,193,177,192,171],
[162,163,145,178,157,148,0,156,160,139],
[203,174,189,179,189,164,185,0,167,171],
[193,155,183,176,196,149,181,174,0,157],
[187,184,179,169,214,170,202,170,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,188,176,190,170,170,152,166],
[168,0,159,168,157,167,150,149,154,168],
[163,182,0,161,163,185,175,160,160,179],
[153,173,180,0,173,177,174,161,169,165],
[165,184,178,168,0,176,180,174,165,181],
[151,174,156,164,165,0,170,145,161,157],
[171,191,166,167,161,171,0,158,151,164],
[171,192,181,180,167,196,183,0,175,176],
[189,187,181,172,176,180,190,166,0,175],
[175,173,162,176,160,184,177,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,155,152,183,188,247,156,153,154],
[127,0,187,219,184,220,188,126,186,186],
[186,154,0,183,120,216,123,187,247,217],
[189,122,158,0,185,221,218,219,247,186],
[158,157,221,156,0,252,189,219,189,220],
[153,121,125,120,89,0,185,125,153,155],
[94,153,218,123,152,156,0,125,153,154],
[185,215,154,122,122,216,216,0,185,186],
[188,155,94,94,152,188,188,156,0,94],
[187,155,124,155,121,186,187,155,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,150,194,137,202,191,173,164,173],
[148,0,134,165,139,196,152,169,158,154],
[191,207,0,181,166,192,177,190,191,193],
[147,176,160,0,114,186,138,170,147,154],
[204,202,175,227,0,201,170,214,168,209],
[139,145,149,155,140,0,136,174,160,152],
[150,189,164,203,171,205,0,201,191,192],
[168,172,151,171,127,167,140,0,167,162],
[177,183,150,194,173,181,150,174,0,181],
[168,187,148,187,132,189,149,179,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,142,149,171,169,156,177,149,168],
[170,0,128,158,177,202,162,161,176,174],
[199,213,0,173,178,209,190,191,170,177],
[192,183,168,0,212,191,183,184,162,185],
[170,164,163,129,0,158,168,151,148,157],
[172,139,132,150,183,0,167,157,134,163],
[185,179,151,158,173,174,0,169,157,168],
[164,180,150,157,190,184,172,0,166,174],
[192,165,171,179,193,207,184,175,0,200],
[173,167,164,156,184,178,173,167,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,196,142,160,178,173,195,199,172],
[166,0,151,149,158,142,182,178,175,163],
[145,190,0,141,154,137,180,163,153,179],
[199,192,200,0,169,192,205,193,192,172],
[181,183,187,172,0,171,172,199,170,151],
[163,199,204,149,170,0,195,216,187,190],
[168,159,161,136,169,146,0,196,181,178],
[146,163,178,148,142,125,145,0,155,141],
[142,166,188,149,171,154,160,186,0,157],
[169,178,162,169,190,151,163,200,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,157,160,139,127,164,129,155,149],
[175,0,133,142,140,167,167,128,137,114],
[184,208,0,161,151,179,198,168,179,154],
[181,199,180,0,159,191,161,185,171,177],
[202,201,190,182,0,176,185,172,184,168],
[214,174,162,150,165,0,192,188,169,185],
[177,174,143,180,156,149,0,165,151,159],
[212,213,173,156,169,153,176,0,150,168],
[186,204,162,170,157,172,190,191,0,166],
[192,227,187,164,173,156,182,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,165,153,173,160,157,169,176],
[166,0,190,174,173,174,185,176,172,184],
[171,151,0,184,152,165,167,173,167,169],
[176,167,157,0,164,180,170,179,163,181],
[188,168,189,177,0,183,162,177,179,174],
[168,167,176,161,158,0,167,169,171,178],
[181,156,174,171,179,174,0,182,169,182],
[184,165,168,162,164,172,159,0,169,184],
[172,169,174,178,162,170,172,172,0,180],
[165,157,172,160,167,163,159,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,196,185,194,169,200,212,210,203],
[154,0,194,198,198,146,202,172,191,163],
[145,147,0,152,170,133,145,180,181,137],
[156,143,189,0,157,150,175,170,174,158],
[147,143,171,184,0,118,187,174,174,137],
[172,195,208,191,223,0,196,213,222,167],
[141,139,196,166,154,145,0,171,196,132],
[129,169,161,171,167,128,170,0,181,131],
[131,150,160,167,167,119,145,160,0,131],
[138,178,204,183,204,174,209,210,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,166,171,183,181,190,173,187],
[162,0,153,163,171,150,172,183,170,169],
[178,188,0,199,187,182,190,191,165,188],
[175,178,142,0,176,183,180,190,170,176],
[170,170,154,165,0,153,183,182,166,184],
[158,191,159,158,188,0,172,187,171,178],
[160,169,151,161,158,169,0,184,156,181],
[151,158,150,151,159,154,157,0,151,170],
[168,171,176,171,175,170,185,190,0,185],
[154,172,153,165,157,163,160,171,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,158,166,164,153,164,176,168,168],
[170,0,161,173,157,170,155,170,159,168],
[183,180,0,159,174,181,169,180,176,170],
[175,168,182,0,176,179,155,173,175,172],
[177,184,167,165,0,168,171,163,176,167],
[188,171,160,162,173,0,168,172,178,192],
[177,186,172,186,170,173,0,184,177,172],
[165,171,161,168,178,169,157,0,177,168],
[173,182,165,166,165,163,164,164,0,181],
[173,173,171,169,174,149,169,173,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,180,148,185,174,163,175,184,155],
[188,0,184,152,192,165,176,179,179,155],
[161,157,0,140,184,152,143,171,165,159],
[193,189,201,0,188,165,161,170,198,152],
[156,149,157,153,0,154,155,149,174,149],
[167,176,189,176,187,0,181,192,175,189],
[178,165,198,180,186,160,0,189,187,169],
[166,162,170,171,192,149,152,0,173,156],
[157,162,176,143,167,166,154,168,0,166],
[186,186,182,189,192,152,172,185,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,185,178,165,176,166,167,154,168],
[179,0,187,193,165,192,161,174,173,170],
[156,154,0,175,189,163,157,186,170,169],
[163,148,166,0,154,163,172,170,180,165],
[176,176,152,187,0,158,137,175,174,152],
[165,149,178,178,183,0,153,179,159,164],
[175,180,184,169,204,188,0,196,183,177],
[174,167,155,171,166,162,145,0,169,136],
[187,168,171,161,167,182,158,172,0,160],
[173,171,172,176,189,177,164,205,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,176,179,174,185,170,165,169],
[177,0,171,191,194,203,211,184,168,179],
[173,170,0,175,180,190,176,158,173,154],
[165,150,166,0,162,185,187,198,169,174],
[162,147,161,179,0,182,182,178,167,163],
[167,138,151,156,159,0,167,164,172,142],
[156,130,165,154,159,174,0,150,155,140],
[171,157,183,143,163,177,191,0,174,180],
[176,173,168,172,174,169,186,167,0,171],
[172,162,187,167,178,199,201,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,170,172,180,156,192,172,177],
[162,0,162,170,177,177,159,166,155,158],
[178,179,0,174,179,181,165,178,175,168],
[171,171,167,0,175,174,166,182,169,171],
[169,164,162,166,0,171,163,176,166,168],
[161,164,160,167,170,0,158,158,164,154],
[185,182,176,175,178,183,0,184,181,170],
[149,175,163,159,165,183,157,0,159,165],
[169,186,166,172,175,177,160,182,0,168],
[164,183,173,170,173,187,171,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,158,168,155,169,184,165,169,168],
[167,0,153,171,165,162,176,157,172,165],
[183,188,0,173,173,175,189,173,166,175],
[173,170,168,0,169,170,178,172,178,175],
[186,176,168,172,0,171,179,155,177,179],
[172,179,166,171,170,0,179,155,167,166],
[157,165,152,163,162,162,0,170,169,169],
[176,184,168,169,186,186,171,0,166,171],
[172,169,175,163,164,174,172,175,0,176],
[173,176,166,166,162,175,172,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,182,179,171,178,164,171,155,164],
[176,0,187,191,166,184,177,170,168,168],
[159,154,0,173,180,175,184,173,159,179],
[162,150,168,0,167,175,179,180,145,160],
[170,175,161,174,0,175,178,170,152,161],
[163,157,166,166,166,0,165,177,136,180],
[177,164,157,162,163,176,0,161,129,165],
[170,171,168,161,171,164,180,0,158,172],
[186,173,182,196,189,205,212,183,0,169],
[177,173,162,181,180,161,176,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,174,199,182,163,165,161,187,154],
[138,0,151,156,161,158,144,154,133,127],
[167,190,0,181,155,154,140,169,171,141],
[142,185,160,0,156,161,162,145,159,130],
[159,180,186,185,0,150,170,171,146,150],
[178,183,187,180,191,0,175,184,200,158],
[176,197,201,179,171,166,0,173,193,172],
[180,187,172,196,170,157,168,0,165,154],
[154,208,170,182,195,141,148,176,0,149],
[187,214,200,211,191,183,169,187,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,172,175,177,168,170,176,174,163],
[165,0,184,181,186,180,165,180,177,177],
[169,157,0,153,175,153,168,169,168,158],
[166,160,188,0,182,172,176,179,174,172],
[164,155,166,159,0,154,157,172,168,163],
[173,161,188,169,187,0,168,171,180,160],
[171,176,173,165,184,173,0,185,182,172],
[165,161,172,162,169,170,156,0,168,165],
[167,164,173,167,173,161,159,173,0,162],
[178,164,183,169,178,181,169,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,159,164,183,162,160,164,167],
[181,0,177,170,168,173,169,164,170,178],
[177,164,0,168,174,178,168,173,164,165],
[182,171,173,0,165,174,177,166,162,165],
[177,173,167,176,0,180,171,168,161,170],
[158,168,163,167,161,0,172,164,169,169],
[179,172,173,164,170,169,0,164,177,162],
[181,177,168,175,173,177,177,0,168,175],
[177,171,177,179,180,172,164,173,0,168],
[174,163,176,176,171,172,179,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,183,171,161,180,139,170,164,185],
[150,0,184,187,157,157,158,159,161,178],
[158,157,0,169,151,169,146,147,146,161],
[170,154,172,0,172,133,134,151,146,160],
[180,184,190,169,0,159,166,160,171,177],
[161,184,172,208,182,0,177,162,159,178],
[202,183,195,207,175,164,0,171,198,208],
[171,182,194,190,181,179,170,0,170,203],
[177,180,195,195,170,182,143,171,0,163],
[156,163,180,181,164,163,133,138,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,181,169,140,152,171,153,175],
[171,0,168,174,189,170,155,186,173,168],
[172,173,0,171,186,153,169,184,165,176],
[160,167,170,0,178,154,160,164,166,163],
[172,152,155,163,0,152,155,178,173,148],
[201,171,188,187,189,0,167,208,193,187],
[189,186,172,181,186,174,0,192,178,158],
[170,155,157,177,163,133,149,0,139,162],
[188,168,176,175,168,148,163,202,0,177],
[166,173,165,178,193,154,183,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,160,175,172,155,170,174,158,151],
[181,0,170,186,188,155,175,170,180,159],
[181,171,0,176,174,159,168,184,173,178],
[166,155,165,0,169,161,185,160,172,181],
[169,153,167,172,0,152,176,173,179,154],
[186,186,182,180,189,0,193,168,189,165],
[171,166,173,156,165,148,0,182,160,165],
[167,171,157,181,168,173,159,0,176,166],
[183,161,168,169,162,152,181,165,0,163],
[190,182,163,160,187,176,176,175,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,171,191,193,152,162,178,146,183],
[142,0,170,130,148,149,152,181,145,209],
[170,171,0,164,162,179,174,190,163,183],
[150,211,177,0,184,165,180,204,170,178],
[148,193,179,157,0,181,164,192,166,198],
[189,192,162,176,160,0,187,182,150,163],
[179,189,167,161,177,154,0,186,171,191],
[163,160,151,137,149,159,155,0,138,181],
[195,196,178,171,175,191,170,203,0,219],
[158,132,158,163,143,178,150,160,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,162,176,184,185,181,190,163,179],
[158,0,161,172,164,195,167,168,169,177],
[179,180,0,165,181,192,185,183,165,177],
[165,169,176,0,167,207,169,181,182,185],
[157,177,160,174,0,199,177,158,172,189],
[156,146,149,134,142,0,159,151,149,155],
[160,174,156,172,164,182,0,169,167,176],
[151,173,158,160,183,190,172,0,165,180],
[178,172,176,159,169,192,174,176,0,188],
[162,164,164,156,152,186,165,161,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,171,170,226,113,113,114,113],
[170,0,114,57,169,227,114,226,171,57],
[170,227,0,226,169,226,226,226,171,113],
[170,284,115,0,227,170,170,169,228,57],
[171,172,172,114,0,114,114,113,228,57],
[115,114,115,171,227,0,170,113,171,113],
[228,227,115,171,227,171,0,227,171,172],
[228,115,115,172,228,228,114,0,228,115],
[227,170,170,113,113,170,170,113,0,170],
[228,284,228,284,284,228,169,226,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,187,222,186,172,159,178,189,180],
[148,0,181,166,180,154,173,166,152,162],
[154,160,0,180,167,157,140,165,175,157],
[119,175,161,0,162,156,160,150,150,170],
[155,161,174,179,0,152,156,159,158,175],
[169,187,184,185,189,0,181,144,181,192],
[182,168,201,181,185,160,0,182,178,193],
[163,175,176,191,182,197,159,0,185,180],
[152,189,166,191,183,160,163,156,0,188],
[161,179,184,171,166,149,148,161,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,151,169,160,180,154,133,162,158],
[172,0,170,164,164,201,152,150,174,152],
[190,171,0,190,172,182,185,190,170,184],
[172,177,151,0,170,186,162,147,158,177],
[181,177,169,171,0,187,197,169,189,165],
[161,140,159,155,154,0,148,169,167,163],
[187,189,156,179,144,193,0,182,159,194],
[208,191,151,194,172,172,159,0,150,201],
[179,167,171,183,152,174,182,191,0,170],
[183,189,157,164,176,178,147,140,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,167,171,164,162,175,162,182],
[179,0,174,171,163,147,171,180,163,164],
[169,167,0,165,162,162,163,180,167,172],
[174,170,176,0,168,152,176,184,168,161],
[170,178,179,173,0,150,173,175,150,170],
[177,194,179,189,191,0,191,189,167,186],
[179,170,178,165,168,150,0,172,172,169],
[166,161,161,157,166,152,169,0,151,169],
[179,178,174,173,191,174,169,190,0,173],
[159,177,169,180,171,155,172,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,152,151,159,156,160,176,172,154],
[186,0,175,170,172,181,180,202,188,179],
[189,166,0,160,176,173,170,199,179,166],
[190,171,181,0,187,160,182,181,197,184],
[182,169,165,154,0,171,176,194,174,177],
[185,160,168,181,170,0,183,200,189,197],
[181,161,171,159,165,158,0,175,176,163],
[165,139,142,160,147,141,166,0,165,155],
[169,153,162,144,167,152,165,176,0,163],
[187,162,175,157,164,144,178,186,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,169,161,180,181,166,168,177,178],
[155,0,161,169,175,172,171,173,158,173],
[172,180,0,168,163,172,165,176,171,183],
[180,172,173,0,170,170,163,167,173,176],
[161,166,178,171,0,170,170,160,162,163],
[160,169,169,171,171,0,166,171,160,173],
[175,170,176,178,171,175,0,172,166,179],
[173,168,165,174,181,170,169,0,155,181],
[164,183,170,168,179,181,175,186,0,179],
[163,168,158,165,178,168,162,160,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,153,152,181,174,151,155,177,156],
[174,0,171,158,158,159,165,155,166,153],
[188,170,0,164,173,161,175,160,162,165],
[189,183,177,0,165,162,172,169,190,166],
[160,183,168,176,0,163,181,172,168,171],
[167,182,180,179,178,0,177,161,171,159],
[190,176,166,169,160,164,0,161,165,162],
[186,186,181,172,169,180,180,0,190,164],
[164,175,179,151,173,170,176,151,0,162],
[185,188,176,175,170,182,179,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,183,194,183,224,156,187,195,187],
[152,0,167,180,224,180,179,186,184,182],
[158,174,0,224,158,185,116,133,180,159],
[147,161,117,0,148,147,107,136,172,121],
[158,117,183,193,0,182,116,130,232,157],
[117,161,156,194,159,0,104,147,153,145],
[185,162,225,234,225,237,0,188,263,184],
[154,155,208,205,211,194,153,0,191,180],
[146,157,161,169,109,188,78,150,0,119],
[154,159,182,220,184,196,157,161,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,174,167,154,170,179,170,178,169],
[152,0,175,159,176,158,171,179,176,153],
[167,166,0,162,160,160,161,155,157,150],
[174,182,179,0,173,180,170,183,184,182],
[187,165,181,168,0,153,153,179,181,149],
[171,183,181,161,188,0,166,187,188,159],
[162,170,180,171,188,175,0,187,183,185],
[171,162,186,158,162,154,154,0,165,174],
[163,165,184,157,160,153,158,176,0,162],
[172,188,191,159,192,182,156,167,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,172,154,160,155,163,157,163,173],
[180,0,176,175,164,175,180,166,188,170],
[169,165,0,163,165,166,164,158,168,173],
[187,166,178,0,159,169,179,169,183,177],
[181,177,176,182,0,177,173,157,178,182],
[186,166,175,172,164,0,166,164,169,171],
[178,161,177,162,168,175,0,172,154,166],
[184,175,183,172,184,177,169,0,179,202],
[178,153,173,158,163,172,187,162,0,161],
[168,171,168,164,159,170,175,139,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,153,142,164,171,180,140,178],
[181,0,181,152,148,158,150,188,147,174],
[168,160,0,167,157,174,175,204,153,194],
[188,189,174,0,194,167,159,214,161,184],
[199,193,184,147,0,167,161,192,170,178],
[177,183,167,174,174,0,192,207,178,184],
[170,191,166,182,180,149,0,188,185,170],
[161,153,137,127,149,134,153,0,137,164],
[201,194,188,180,171,163,156,204,0,183],
[163,167,147,157,163,157,171,177,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,197,175,172,165,197,152,206,167],
[162,0,187,177,187,179,187,156,198,203],
[144,154,0,160,176,158,158,166,177,157],
[166,164,181,0,183,180,187,181,185,181],
[169,154,165,158,0,159,179,146,185,180],
[176,162,183,161,182,0,150,152,192,151],
[144,154,183,154,162,191,0,152,199,159],
[189,185,175,160,195,189,189,0,220,190],
[135,143,164,156,156,149,142,121,0,150],
[174,138,184,160,161,190,182,151,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,170,186,190,202,161,184,167],
[162,0,179,176,184,175,208,177,190,178],
[174,162,0,178,185,173,187,181,196,190],
[171,165,163,0,183,186,186,169,175,174],
[155,157,156,158,0,166,188,161,166,167],
[151,166,168,155,175,0,189,189,192,196],
[139,133,154,155,153,152,0,155,159,153],
[180,164,160,172,180,152,186,0,191,168],
[157,151,145,166,175,149,182,150,0,176],
[174,163,151,167,174,145,188,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,151,185,168,175,204,166,170,187],
[110,0,121,187,175,129,170,117,139,229],
[190,220,0,222,180,157,182,182,181,240],
[156,154,119,0,158,157,166,156,127,207],
[173,166,161,183,0,128,154,139,144,177],
[166,212,184,184,213,0,203,179,191,189],
[137,171,159,175,187,138,0,128,169,187],
[175,224,159,185,202,162,213,0,164,207],
[171,202,160,214,197,150,172,177,0,209],
[154,112,101,134,164,152,154,134,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,166,176,170,190,171,174,168,170],
[158,0,171,151,168,163,164,168,177,162],
[175,170,0,166,173,178,168,181,181,184],
[165,190,175,0,176,178,172,185,188,157],
[171,173,168,165,0,191,161,174,172,171],
[151,178,163,163,150,0,168,152,156,160],
[170,177,173,169,180,173,0,175,183,170],
[167,173,160,156,167,189,166,0,175,168],
[173,164,160,153,169,185,158,166,0,172],
[171,179,157,184,170,181,171,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,191,166,176,182,173,170,181],
[165,0,172,164,178,170,188,193,178,174],
[171,169,0,168,181,169,165,176,169,170],
[150,177,173,0,187,177,176,174,174,175],
[175,163,160,154,0,178,174,159,182,165],
[165,171,172,164,163,0,179,164,181,166],
[159,153,176,165,167,162,0,176,183,166],
[168,148,165,167,182,177,165,0,169,169],
[171,163,172,167,159,160,158,172,0,172],
[160,167,171,166,176,175,175,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,186,178,175,169,175,193,176,172],
[170,0,201,188,170,176,194,176,189,193],
[155,140,0,145,176,145,155,175,163,167],
[163,153,196,0,172,161,178,183,185,179],
[166,171,165,169,0,152,156,175,179,159],
[172,165,196,180,189,0,174,176,180,164],
[166,147,186,163,185,167,0,177,186,166],
[148,165,166,158,166,165,164,0,169,147],
[165,152,178,156,162,161,155,172,0,158],
[169,148,174,162,182,177,175,194,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,174,204,172,206,149,175,186,187],
[155,0,176,172,178,186,161,170,185,185],
[167,165,0,181,186,182,176,171,180,177],
[137,169,160,0,151,181,155,173,167,166],
[169,163,155,190,0,185,156,177,178,172],
[135,155,159,160,156,0,134,170,179,173],
[192,180,165,186,185,207,0,202,189,190],
[166,171,170,168,164,171,139,0,173,164],
[155,156,161,174,163,162,152,168,0,149],
[154,156,164,175,169,168,151,177,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,164,150,156,142,146,175,155,148],
[191,0,157,199,179,146,177,179,185,183],
[177,184,0,172,170,161,174,173,202,184],
[191,142,169,0,179,185,168,179,192,161],
[185,162,171,162,0,143,161,180,161,165],
[199,195,180,156,198,0,174,182,194,186],
[195,164,167,173,180,167,0,178,208,164],
[166,162,168,162,161,159,163,0,194,187],
[186,156,139,149,180,147,133,147,0,162],
[193,158,157,180,176,155,177,154,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,180,178,178,170,173,169,179],
[168,0,166,171,169,158,186,170,168,170],
[172,175,0,178,171,172,175,182,158,181],
[161,170,163,0,167,159,166,167,171,172],
[163,172,170,174,0,173,176,162,174,168],
[163,183,169,182,168,0,190,173,162,187],
[171,155,166,175,165,151,0,177,161,174],
[168,171,159,174,179,168,164,0,170,176],
[172,173,183,170,167,179,180,171,0,178],
[162,171,160,169,173,154,167,165,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,209,182,171,166,167,135,174,186],
[158,0,202,191,182,172,136,140,120,171],
[132,139,0,158,116,139,130,115,128,132],
[159,150,183,0,167,128,126,107,130,154],
[170,159,225,174,0,161,133,145,132,170],
[175,169,202,213,180,0,161,136,167,181],
[174,205,211,215,208,180,0,151,178,180],
[206,201,226,234,196,205,190,0,200,162],
[167,221,213,211,209,174,163,141,0,178],
[155,170,209,187,171,160,161,179,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,154,212,167,199,176,165,198,210],
[87,0,167,181,143,157,153,132,121,147],
[187,174,0,175,141,166,185,183,143,212],
[129,160,166,0,142,176,142,138,99,174],
[174,198,200,199,0,221,209,154,163,210],
[142,184,175,165,120,0,138,128,154,197],
[165,188,156,199,132,203,0,145,155,179],
[176,209,158,203,187,213,196,0,166,211],
[143,220,198,242,178,187,186,175,0,197],
[131,194,129,167,131,144,162,130,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,175,165,170,175,168,175,162,157],
[178,0,185,175,197,203,196,167,183,201],
[166,156,0,170,172,170,161,154,173,164],
[176,166,171,0,171,166,180,157,188,164],
[171,144,169,170,0,170,172,164,178,151],
[166,138,171,175,171,0,175,182,154,173],
[173,145,180,161,169,166,0,157,179,159],
[166,174,187,184,177,159,184,0,181,178],
[179,158,168,153,163,187,162,160,0,163],
[184,140,177,177,190,168,182,163,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,172,170,182,192,185,174,186,170],
[135,0,157,161,154,151,167,180,159,143],
[169,184,0,177,190,193,191,169,180,181],
[171,180,164,0,195,165,166,171,164,153],
[159,187,151,146,0,160,188,183,171,167],
[149,190,148,176,181,0,174,164,173,159],
[156,174,150,175,153,167,0,176,152,157],
[167,161,172,170,158,177,165,0,173,182],
[155,182,161,177,170,168,189,168,0,174],
[171,198,160,188,174,182,184,159,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,182,182,178,196,170,193,179],
[156,0,178,180,181,182,176,180,208,193],
[167,163,0,177,182,172,180,166,186,170],
[159,161,164,0,188,159,158,166,186,190],
[159,160,159,153,0,162,157,148,166,177],
[163,159,169,182,179,0,179,175,182,162],
[145,165,161,183,184,162,0,171,170,191],
[171,161,175,175,193,166,170,0,185,179],
[148,133,155,155,175,159,171,156,0,164],
[162,148,171,151,164,179,150,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,177,167,170,190,185,178,187],
[168,0,151,153,149,153,161,154,156,173],
[160,190,0,167,165,166,163,179,171,180],
[164,188,174,0,168,167,168,162,161,172],
[174,192,176,173,0,164,179,183,165,190],
[171,188,175,174,177,0,167,186,175,183],
[151,180,178,173,162,174,0,166,159,182],
[156,187,162,179,158,155,175,0,163,189],
[163,185,170,180,176,166,182,178,0,178],
[154,168,161,169,151,158,159,152,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,163,165,163,217,143,164,137,147],
[155,0,150,155,134,188,154,135,144,152],
[178,191,0,176,127,184,140,154,160,178],
[176,186,165,0,171,207,164,184,193,176],
[178,207,214,170,0,194,145,177,181,173],
[124,153,157,134,147,0,171,124,128,146],
[198,187,201,177,196,170,0,162,165,172],
[177,206,187,157,164,217,179,0,178,159],
[204,197,181,148,160,213,176,163,0,161],
[194,189,163,165,168,195,169,182,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,161,177,156,154,171,149,159],
[171,0,164,173,170,158,160,186,174,151],
[178,177,0,163,179,166,161,168,165,173],
[180,168,178,0,179,157,162,171,174,165],
[164,171,162,162,0,142,155,179,165,153],
[185,183,175,184,199,0,169,191,165,173],
[187,181,180,179,186,172,0,192,166,183],
[170,155,173,170,162,150,149,0,155,156],
[192,167,176,167,176,176,175,186,0,167],
[182,190,168,176,188,168,158,185,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,155,172,163,149,170,173,152,160],
[180,0,167,167,183,174,180,181,177,148],
[186,174,0,169,171,168,172,176,175,171],
[169,174,172,0,166,165,171,158,163,174],
[178,158,170,175,0,164,170,175,159,149],
[192,167,173,176,177,0,177,181,171,165],
[171,161,169,170,171,164,0,167,156,166],
[168,160,165,183,166,160,174,0,160,152],
[189,164,166,178,182,170,185,181,0,166],
[181,193,170,167,192,176,175,189,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,164,165,184,196,159,222,186],
[169,0,178,196,172,166,186,172,242,167],
[167,163,0,196,150,164,164,143,180,160],
[177,145,145,0,161,178,150,177,193,170],
[176,169,191,180,0,166,171,176,216,148],
[157,175,177,163,175,0,192,197,204,151],
[145,155,177,191,170,149,0,163,223,139],
[182,169,198,164,165,144,178,0,198,183],
[119,99,161,148,125,137,118,143,0,138],
[155,174,181,171,193,190,202,158,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,172,190,171,165,172,176,183,189],
[152,0,153,186,153,164,157,178,161,164],
[169,188,0,181,175,175,156,175,166,183],
[151,155,160,0,147,144,156,178,164,164],
[170,188,166,194,0,186,162,185,169,170],
[176,177,166,197,155,0,178,182,188,179],
[169,184,185,185,179,163,0,165,166,200],
[165,163,166,163,156,159,176,0,157,162],
[158,180,175,177,172,153,175,184,0,191],
[152,177,158,177,171,162,141,179,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,178,179,178,165,182,181,176,185],
[157,0,158,177,173,161,157,197,155,172],
[163,183,0,183,162,174,167,206,162,183],
[162,164,158,0,172,158,147,178,166,169],
[163,168,179,169,0,185,159,188,152,166],
[176,180,167,183,156,0,158,197,168,149],
[159,184,174,194,182,183,0,187,189,181],
[160,144,135,163,153,144,154,0,143,151],
[165,186,179,175,189,173,152,198,0,166],
[156,169,158,172,175,192,160,190,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,189,178,167,192,172,174,189,196],
[167,0,180,202,191,198,184,161,190,211],
[152,161,0,184,166,170,161,144,178,175],
[163,139,157,0,162,184,163,135,183,164],
[174,150,175,179,0,175,165,149,161,193],
[149,143,171,157,166,0,164,146,155,179],
[169,157,180,178,176,177,0,170,163,192],
[167,180,197,206,192,195,171,0,202,194],
[152,151,163,158,180,186,178,139,0,184],
[145,130,166,177,148,162,149,147,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,174,173,177,176,167,173,168,171],
[193,0,182,173,193,183,170,177,176,183],
[167,159,0,179,180,186,177,169,178,181],
[168,168,162,0,174,160,166,167,168,164],
[164,148,161,167,0,172,165,161,166,158],
[165,158,155,181,169,0,171,155,162,179],
[174,171,164,175,176,170,0,164,165,171],
[168,164,172,174,180,186,177,0,181,181],
[173,165,163,173,175,179,176,160,0,175],
[170,158,160,177,183,162,170,160,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,148,162,166,160,164,172,151,143],
[172,0,156,163,177,180,170,173,173,152],
[193,185,0,173,196,192,182,179,170,175],
[179,178,168,0,180,171,171,179,168,167],
[175,164,145,161,0,169,171,173,162,164],
[181,161,149,170,172,0,178,169,164,175],
[177,171,159,170,170,163,0,167,165,168],
[169,168,162,162,168,172,174,0,164,154],
[190,168,171,173,179,177,176,177,0,166],
[198,189,166,174,177,166,173,187,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,190,175,184,195,167,181,187,182],
[163,0,160,158,164,194,164,175,172,153],
[151,181,0,167,176,193,176,190,179,182],
[166,183,174,0,186,186,171,183,183,180],
[157,177,165,155,0,185,166,178,175,171],
[146,147,148,155,156,0,160,154,158,157],
[174,177,165,170,175,181,0,175,180,172],
[160,166,151,158,163,187,166,0,172,170],
[154,169,162,158,166,183,161,169,0,161],
[159,188,159,161,170,184,169,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,159,172,180,153,160,157,153],
[180,0,181,194,161,167,153,178,176,178],
[165,160,0,157,153,166,177,163,148,158],
[182,147,184,0,168,162,163,177,160,154],
[169,180,188,173,0,162,180,177,142,170],
[161,174,175,179,179,0,155,167,173,149],
[188,188,164,178,161,186,0,184,170,182],
[181,163,178,164,164,174,157,0,157,160],
[184,165,193,181,199,168,171,184,0,187],
[188,163,183,187,171,192,159,181,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,168,166,166,170,181,170,179,171],
[181,0,173,180,160,192,182,184,190,170],
[173,168,0,164,164,174,171,167,171,171],
[175,161,177,0,177,181,169,180,186,177],
[175,181,177,164,0,183,176,181,193,171],
[171,149,167,160,158,0,173,179,175,165],
[160,159,170,172,165,168,0,179,166,176],
[171,157,174,161,160,162,162,0,172,170],
[162,151,170,155,148,166,175,169,0,142],
[170,171,170,164,170,176,165,171,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,173,175,177,182,181,167,175],
[168,0,176,165,173,179,186,187,177,184],
[170,165,0,164,173,170,177,193,162,171],
[168,176,177,0,174,158,169,174,174,167],
[166,168,168,167,0,166,182,173,170,161],
[164,162,171,183,175,0,177,175,172,168],
[159,155,164,172,159,164,0,174,164,161],
[160,154,148,167,168,166,167,0,160,159],
[174,164,179,167,171,169,177,181,0,178],
[166,157,170,174,180,173,180,182,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,167,161,184,172,168,173,174],
[160,0,170,173,168,165,171,163,167,159],
[167,171,0,171,174,169,171,166,164,173],
[174,168,170,0,161,174,167,170,167,164],
[180,173,167,180,0,171,175,184,179,181],
[157,176,172,167,170,0,166,170,159,168],
[169,170,170,174,166,175,0,169,172,163],
[173,178,175,171,157,171,172,0,175,168],
[168,174,177,174,162,182,169,166,0,169],
[167,182,168,177,160,173,178,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,175,172,167,182,174,154,152],
[165,0,172,189,177,173,183,157,157,157],
[164,169,0,187,179,168,178,159,172,157],
[166,152,154,0,163,152,155,133,150,130],
[169,164,162,178,0,174,178,166,175,160],
[174,168,173,189,167,0,176,151,153,149],
[159,158,163,186,163,165,0,160,140,153],
[167,184,182,208,175,190,181,0,182,168],
[187,184,169,191,166,188,201,159,0,178],
[189,184,184,211,181,192,188,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,147,139,132,168,162,128,142,155],
[171,0,177,192,181,188,162,156,178,173],
[194,164,0,174,150,170,177,158,171,178],
[202,149,167,0,154,179,166,155,174,194],
[209,160,191,187,0,166,181,160,155,182],
[173,153,171,162,175,0,190,154,155,167],
[179,179,164,175,160,151,0,151,138,170],
[213,185,183,186,181,187,190,0,166,203],
[199,163,170,167,186,186,203,175,0,200],
[186,168,163,147,159,174,171,138,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,145,184,182,162,172,159,177,156],
[181,0,182,187,207,187,159,188,204,195],
[196,159,0,174,208,194,159,175,197,199],
[157,154,167,0,166,154,135,156,174,162],
[159,134,133,175,0,161,134,164,154,164],
[179,154,147,187,180,0,166,173,187,172],
[169,182,182,206,207,175,0,185,193,173],
[182,153,166,185,177,168,156,0,191,161],
[164,137,144,167,187,154,148,150,0,169],
[185,146,142,179,177,169,168,180,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,167,163,168,157,179,168,174],
[171,0,159,170,173,160,152,174,165,159],
[179,182,0,173,161,177,158,192,168,181],
[174,171,168,0,182,168,168,190,187,175],
[178,168,180,159,0,161,181,179,174,165],
[173,181,164,173,180,0,157,185,172,166],
[184,189,183,173,160,184,0,196,162,172],
[162,167,149,151,162,156,145,0,157,169],
[173,176,173,154,167,169,179,184,0,166],
[167,182,160,166,176,175,169,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,177,173,169,171,176,189,174],
[163,0,177,173,156,173,169,177,173,168],
[179,164,0,174,169,174,170,171,171,174],
[164,168,167,0,156,163,170,169,185,167],
[168,185,172,185,0,177,180,168,180,165],
[172,168,167,178,164,0,165,174,169,163],
[170,172,171,171,161,176,0,168,185,168],
[165,164,170,172,173,167,173,0,180,174],
[152,168,170,156,161,172,156,161,0,167],
[167,173,167,174,176,178,173,167,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,105,183,104,183,131,183,133,53],
[183,0,106,208,129,209,156,155,105,131],
[236,235,0,209,183,210,157,183,211,183],
[158,133,132,0,130,186,133,159,80,158],
[237,212,158,211,0,185,160,211,133,212],
[158,132,131,155,156,0,159,183,133,131],
[210,185,184,208,181,182,0,236,133,184],
[158,186,158,182,130,158,105,0,106,105],
[208,236,130,261,208,208,208,235,0,157],
[288,210,158,183,129,210,157,236,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,194,181,179,164,174,177,172],
[162,0,171,158,157,176,166,175,179,172],
[175,170,0,175,173,173,167,180,184,174],
[147,183,166,0,176,176,168,176,181,180],
[160,184,168,165,0,164,171,172,170,173],
[162,165,168,165,177,0,185,173,167,177],
[177,175,174,173,170,156,0,168,179,183],
[167,166,161,165,169,168,173,0,173,170],
[164,162,157,160,171,174,162,168,0,160],
[169,169,167,161,168,164,158,171,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,159,160,157,161,154,157,161],
[177,0,180,160,171,169,164,161,180,169],
[171,161,0,165,170,175,158,161,163,168],
[182,181,176,0,179,188,170,155,188,179],
[181,170,171,162,0,172,186,168,181,169],
[184,172,166,153,169,0,162,166,176,177],
[180,177,183,171,155,179,0,172,183,182],
[187,180,180,186,173,175,169,0,184,170],
[184,161,178,153,160,165,158,157,0,169],
[180,172,173,162,172,164,159,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,165,149,167,155,178,157,186,162],
[185,0,165,183,187,185,183,190,178,174],
[176,176,0,175,180,192,167,185,184,179],
[192,158,166,0,165,170,176,174,168,171],
[174,154,161,176,0,172,174,171,160,164],
[186,156,149,171,169,0,163,182,178,160],
[163,158,174,165,167,178,0,176,170,160],
[184,151,156,167,170,159,165,0,163,164],
[155,163,157,173,181,163,171,178,0,166],
[179,167,162,170,177,181,181,177,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,159,163,168,182,180,174,184,184],
[163,0,161,145,167,178,185,165,194,171],
[182,180,0,166,165,192,180,168,184,170],
[178,196,175,0,183,182,189,170,182,179],
[173,174,176,158,0,187,174,163,178,181],
[159,163,149,159,154,0,160,154,174,158],
[161,156,161,152,167,181,0,152,176,166],
[167,176,173,171,178,187,189,0,170,176],
[157,147,157,159,163,167,165,171,0,167],
[157,170,171,162,160,183,175,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,183,145,154,122,168,125,173,149],
[174,0,222,128,175,141,161,156,183,141],
[158,119,0,141,160,114,152,156,159,136],
[196,213,200,0,188,181,194,182,194,155],
[187,166,181,153,0,137,150,146,174,157],
[219,200,227,160,204,0,191,182,225,182],
[173,180,189,147,191,150,0,182,179,171],
[216,185,185,159,195,159,159,0,199,161],
[168,158,182,147,167,116,162,142,0,133],
[192,200,205,186,184,159,170,180,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,159,161,154,179,171,145,168,169],
[164,0,150,162,149,180,169,171,158,168],
[182,191,0,183,166,191,171,171,173,175],
[180,179,158,0,157,186,171,182,175,168],
[187,192,175,184,0,209,163,172,175,166],
[162,161,150,155,132,0,168,150,150,159],
[170,172,170,170,178,173,0,158,150,185],
[196,170,170,159,169,191,183,0,164,179],
[173,183,168,166,166,191,191,177,0,159],
[172,173,166,173,175,182,156,162,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,158,167,175,144,162,171,175,169],
[174,0,175,182,176,165,178,181,170,185],
[183,166,0,161,171,156,169,175,171,171],
[174,159,180,0,167,171,170,170,165,168],
[166,165,170,174,0,168,178,165,169,185],
[197,176,185,170,173,0,179,181,179,176],
[179,163,172,171,163,162,0,175,167,181],
[170,160,166,171,176,160,166,0,172,176],
[166,171,170,176,172,162,174,169,0,174],
[172,156,170,173,156,165,160,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,179,169,202,191,186,193,200,197],
[142,0,146,152,157,165,158,158,165,151],
[162,195,0,178,177,174,177,175,193,176],
[172,189,163,0,184,179,169,169,182,187],
[139,184,164,157,0,182,181,159,176,157],
[150,176,167,162,159,0,169,158,167,175],
[155,183,164,172,160,172,0,156,184,181],
[148,183,166,172,182,183,185,0,184,172],
[141,176,148,159,165,174,157,157,0,171],
[144,190,165,154,184,166,160,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,164,174,170,166,163,168,172,172],
[170,0,176,161,175,173,172,179,181,175],
[177,165,0,160,174,158,168,173,184,185],
[167,180,181,0,180,176,182,181,192,190],
[171,166,167,161,0,161,167,170,180,177],
[175,168,183,165,180,0,173,171,188,178],
[178,169,173,159,174,168,0,160,180,180],
[173,162,168,160,171,170,181,0,180,169],
[169,160,157,149,161,153,161,161,0,171],
[169,166,156,151,164,163,161,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,141,170,176,151,147,151,163,158],
[183,0,176,179,178,148,145,165,133,171],
[200,165,0,171,170,158,161,175,151,176],
[171,162,170,0,153,133,137,168,136,157],
[165,163,171,188,0,141,159,158,166,163],
[190,193,183,208,200,0,174,218,155,183],
[194,196,180,204,182,167,0,194,174,175],
[190,176,166,173,183,123,147,0,154,164],
[178,208,190,205,175,186,167,187,0,178],
[183,170,165,184,178,158,166,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,187,176,198,167,163,176,164,168],
[177,0,189,179,180,165,156,173,172,176],
[154,152,0,163,165,145,163,159,159,146],
[165,162,178,0,186,172,162,180,171,165],
[143,161,176,155,0,149,157,152,168,154],
[174,176,196,169,192,0,158,169,180,173],
[178,185,178,179,184,183,0,192,167,187],
[165,168,182,161,189,172,149,0,173,156],
[177,169,182,170,173,161,174,168,0,170],
[173,165,195,176,187,168,154,185,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,186,159,176,183,181,173,179],
[166,0,189,157,154,154,153,191,186,193],
[157,152,0,151,161,156,159,161,165,160],
[155,184,190,0,173,186,168,185,187,184],
[182,187,180,168,0,166,169,198,195,176],
[165,187,185,155,175,0,162,177,188,178],
[158,188,182,173,172,179,0,187,184,173],
[160,150,180,156,143,164,154,0,175,176],
[168,155,176,154,146,153,157,166,0,161],
[162,148,181,157,165,163,168,165,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,175,181,159,168,178,171,167,163],
[181,0,167,172,167,168,179,184,163,175],
[166,174,0,162,154,175,163,178,162,171],
[160,169,179,0,167,176,171,177,163,176],
[182,174,187,174,0,180,174,175,159,173],
[173,173,166,165,161,0,175,171,153,174],
[163,162,178,170,167,166,0,178,172,163],
[170,157,163,164,166,170,163,0,154,170],
[174,178,179,178,182,188,169,187,0,182],
[178,166,170,165,168,167,178,171,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,141,157,162,172,154,150,169,150],
[200,0,173,175,183,193,180,194,149,179],
[200,168,0,163,184,191,172,177,171,187],
[184,166,178,0,177,188,184,175,185,179],
[179,158,157,164,0,169,161,155,177,156],
[169,148,150,153,172,0,162,160,159,150],
[187,161,169,157,180,179,0,149,176,153],
[191,147,164,166,186,181,192,0,184,174],
[172,192,170,156,164,182,165,157,0,177],
[191,162,154,162,185,191,188,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,185,146,186,164,163,181,182,185],
[162,0,162,183,173,153,173,164,156,162],
[156,179,0,159,162,152,161,169,166,152],
[195,158,182,0,181,164,152,189,181,173],
[155,168,179,160,0,156,149,167,163,168],
[177,188,189,177,185,0,164,179,198,178],
[178,168,180,189,192,177,0,188,177,179],
[160,177,172,152,174,162,153,0,183,150],
[159,185,175,160,178,143,164,158,0,184],
[156,179,189,168,173,163,162,191,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,168,192,177,188,176,181,196,180],
[132,0,157,155,154,149,161,151,166,168],
[173,184,0,196,184,178,191,200,198,164],
[149,186,145,0,153,150,176,165,192,153],
[164,187,157,188,0,169,191,207,183,202],
[153,192,163,191,172,0,171,185,185,186],
[165,180,150,165,150,170,0,175,166,172],
[160,190,141,176,134,156,166,0,183,166],
[145,175,143,149,158,156,175,158,0,165],
[161,173,177,188,139,155,169,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,155,184,150,162,165,154,189,180],
[165,0,157,186,172,178,171,155,196,182],
[186,184,0,222,185,199,191,170,201,176],
[157,155,119,0,110,156,166,115,161,134],
[191,169,156,231,0,197,188,189,233,180],
[179,163,142,185,144,0,150,145,170,162],
[176,170,150,175,153,191,0,173,190,183],
[187,186,171,226,152,196,168,0,201,165],
[152,145,140,180,108,171,151,140,0,163],
[161,159,165,207,161,179,158,176,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,155,172,178,170,160,169,175,166],
[183,0,170,163,173,166,161,167,182,168],
[186,171,0,186,181,182,168,185,187,173],
[169,178,155,0,187,151,163,175,171,166],
[163,168,160,154,0,169,171,164,175,168],
[171,175,159,190,172,0,162,161,169,178],
[181,180,173,178,170,179,0,160,182,183],
[172,174,156,166,177,180,181,0,181,173],
[166,159,154,170,166,172,159,160,0,174],
[175,173,168,175,173,163,158,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,189,179,190,161,167,177,180,180],
[166,0,170,168,150,157,165,163,165,167],
[152,171,0,177,152,150,163,162,163,171],
[162,173,164,0,172,165,166,167,147,183],
[151,191,189,169,0,161,154,182,175,175],
[180,184,191,176,180,0,184,169,185,181],
[174,176,178,175,187,157,0,187,163,193],
[164,178,179,174,159,172,154,0,172,186],
[161,176,178,194,166,156,178,169,0,182],
[161,174,170,158,166,160,148,155,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,181,163,186,154,183,190,183,169],
[152,0,164,174,164,186,190,184,173,166],
[160,177,0,171,175,170,210,158,185,177],
[178,167,170,0,174,188,220,194,181,187],
[155,177,166,167,0,187,184,190,175,161],
[187,155,171,153,154,0,207,157,175,156],
[158,151,131,121,157,134,0,152,129,134],
[151,157,183,147,151,184,189,0,181,139],
[158,168,156,160,166,166,212,160,0,159],
[172,175,164,154,180,185,207,202,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,202,194,189,190,169,212,232,197],
[175,0,173,182,174,174,142,198,225,180],
[139,168,0,129,137,178,169,227,193,197],
[147,159,212,0,179,180,172,247,231,198],
[152,167,204,162,0,170,172,223,182,209],
[151,167,163,161,171,0,179,227,233,198],
[172,199,172,169,169,162,0,209,190,207],
[129,143,114,94,118,114,132,0,192,139],
[109,116,148,110,159,108,151,149,0,167],
[144,161,144,143,132,143,134,202,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,186,168,180,167,168,178,174,186],
[158,0,176,157,173,180,165,154,153,185],
[155,165,0,149,175,179,159,156,161,167],
[173,184,192,0,186,177,159,154,162,185],
[161,168,166,155,0,162,157,147,161,167],
[174,161,162,164,179,0,162,160,169,176],
[173,176,182,182,184,179,0,165,169,175],
[163,187,185,187,194,181,176,0,180,191],
[167,188,180,179,180,172,172,161,0,195],
[155,156,174,156,174,165,166,150,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,189,160,155,161,162,156,159,163],
[178,0,180,174,185,171,191,161,171,179],
[152,161,0,157,157,153,168,163,174,147],
[181,167,184,0,183,159,192,173,175,163],
[186,156,184,158,0,160,193,174,171,155],
[180,170,188,182,181,0,187,187,188,187],
[179,150,173,149,148,154,0,172,173,168],
[185,180,178,168,167,154,169,0,180,174],
[182,170,167,166,170,153,168,161,0,171],
[178,162,194,178,186,154,173,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,178,188,179,185,180,172,197],
[174,0,165,166,173,174,192,183,165,183],
[162,176,0,182,190,179,192,174,182,190],
[163,175,159,0,177,157,166,164,169,174],
[153,168,151,164,0,168,170,158,172,157],
[162,167,162,184,173,0,173,167,176,182],
[156,149,149,175,171,168,0,159,164,177],
[161,158,167,177,183,174,182,0,169,182],
[169,176,159,172,169,165,177,172,0,183],
[144,158,151,167,184,159,164,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,153,152,167,148,145,171,149,182],
[185,0,148,149,181,159,145,166,136,174],
[188,193,0,166,176,184,158,163,150,180],
[189,192,175,0,178,190,178,167,169,186],
[174,160,165,163,0,187,152,177,161,190],
[193,182,157,151,154,0,179,193,158,176],
[196,196,183,163,189,162,0,182,176,185],
[170,175,178,174,164,148,159,0,152,170],
[192,205,191,172,180,183,165,189,0,164],
[159,167,161,155,151,165,156,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,213,255,255,213,128,213,213,171],
[128,0,128,170,213,85,85,128,170,86],
[128,213,0,171,213,129,129,171,126,85],
[86,171,170,0,214,127,129,214,128,128],
[86,128,128,127,0,42,129,214,169,43],
[128,256,212,214,299,0,172,257,212,128],
[213,256,212,212,212,169,0,256,212,170],
[128,213,170,127,127,84,85,0,127,127],
[128,171,215,213,172,129,129,214,0,173],
[170,255,256,213,298,213,171,214,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,192,194,187,180,148,164,168,182],
[159,0,171,185,176,165,145,164,149,178],
[149,170,0,162,143,159,143,150,144,164],
[147,156,179,0,175,148,136,139,151,174],
[154,165,198,166,0,152,149,176,164,172],
[161,176,182,193,189,0,154,157,166,187],
[193,196,198,205,192,187,0,165,190,199],
[177,177,191,202,165,184,176,0,164,182],
[173,192,197,190,177,175,151,177,0,178],
[159,163,177,167,169,154,142,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,159,135,164,150,141,189,173],
[182,0,148,120,157,146,146,134,157,115],
[179,193,0,153,125,150,175,135,167,148],
[182,221,188,0,179,198,183,182,188,158],
[206,184,216,162,0,200,186,211,213,153],
[177,195,191,143,141,0,166,172,205,169],
[191,195,166,158,155,175,0,170,205,172],
[200,207,206,159,130,169,171,0,181,149],
[152,184,174,153,128,136,136,160,0,140],
[168,226,193,183,188,172,169,192,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,175,159,162,152,146,169,146],
[171,0,168,183,155,176,164,160,179,172],
[175,173,0,202,182,182,162,164,187,183],
[166,158,139,0,137,160,126,158,158,159],
[182,186,159,204,0,169,173,163,175,172],
[179,165,159,181,172,0,161,169,180,181],
[189,177,179,215,168,180,0,177,173,183],
[195,181,177,183,178,172,164,0,201,175],
[172,162,154,183,166,161,168,140,0,158],
[195,169,158,182,169,160,158,166,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,186,185,183,180,169,175,179],
[159,0,170,162,177,164,174,164,173,155],
[174,171,0,158,185,161,176,166,179,161],
[155,179,183,0,186,153,175,155,175,173],
[156,164,156,155,0,149,160,153,148,155],
[158,177,180,188,192,0,180,177,192,182],
[161,167,165,166,181,161,0,160,168,156],
[172,177,175,186,188,164,181,0,175,173],
[166,168,162,166,193,149,173,166,0,168],
[162,186,180,168,186,159,185,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,176,170,177,192,181,173,168,201],
[147,0,172,157,152,171,165,168,157,162],
[165,169,0,162,140,193,170,173,162,183],
[171,184,179,0,153,191,180,179,179,186],
[164,189,201,188,0,215,207,182,188,190],
[149,170,148,150,126,0,181,154,141,160],
[160,176,171,161,134,160,0,172,139,166],
[168,173,168,162,159,187,169,0,152,183],
[173,184,179,162,153,200,202,189,0,201],
[140,179,158,155,151,181,175,158,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,159,164,169,164,191,169,175,194],
[187,0,160,167,172,173,175,176,167,183],
[182,181,0,191,187,163,177,165,169,189],
[177,174,150,0,161,158,179,174,171,171],
[172,169,154,180,0,171,181,180,172,179],
[177,168,178,183,170,0,201,174,188,180],
[150,166,164,162,160,140,0,161,172,176],
[172,165,176,167,161,167,180,0,176,184],
[166,174,172,170,169,153,169,165,0,171],
[147,158,152,170,162,161,165,157,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,165,167,177,186,176,156,155],
[168,0,170,180,176,161,180,187,170,178],
[177,171,0,176,172,176,181,177,165,169],
[176,161,165,0,176,183,170,164,173,161],
[174,165,169,165,0,166,171,178,170,157],
[164,180,165,158,175,0,174,179,169,175],
[155,161,160,171,170,167,0,160,168,161],
[165,154,164,177,163,162,181,0,166,151],
[185,171,176,168,171,172,173,175,0,161],
[186,163,172,180,184,166,180,190,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,228,171,227,170,228,114,227],
[170,0,228,228,226,226,113,113,170,226],
[170,113,0,170,56,169,112,170,56,112],
[113,113,171,0,56,169,56,170,113,169],
[170,115,285,285,0,341,170,172,115,283],
[114,115,172,172,0,0,113,114,57,226],
[171,228,229,285,171,228,0,229,228,170],
[113,228,171,171,169,227,112,0,171,169],
[227,171,285,228,226,284,113,170,0,283],
[114,115,229,172,58,115,171,172,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,180,190,176,211,216,210,165,169],
[126,0,155,138,145,159,150,156,112,131],
[161,186,0,155,139,177,170,175,180,172],
[151,203,186,0,177,208,185,198,151,169],
[165,196,202,164,0,187,216,194,189,183],
[130,182,164,133,154,0,145,169,137,155],
[125,191,171,156,125,196,0,203,147,131],
[131,185,166,143,147,172,138,0,163,148],
[176,229,161,190,152,204,194,178,0,163],
[172,210,169,172,158,186,210,193,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,152,171,174,177,157,152,168],
[167,0,193,186,159,158,179,173,181,176],
[169,148,0,157,159,142,173,140,167,177],
[189,155,184,0,182,165,173,170,162,176],
[170,182,182,159,0,162,177,163,179,165],
[167,183,199,176,179,0,190,189,174,186],
[164,162,168,168,164,151,0,148,161,163],
[184,168,201,171,178,152,193,0,175,179],
[189,160,174,179,162,167,180,166,0,176],
[173,165,164,165,176,155,178,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,164,162,169,179,193,185,183],
[163,0,180,167,149,159,161,184,171,191],
[162,161,0,154,166,170,163,178,165,181],
[177,174,187,0,155,168,162,165,160,182],
[179,192,175,186,0,168,152,194,181,176],
[172,182,171,173,173,0,167,182,173,189],
[162,180,178,179,189,174,0,174,181,181],
[148,157,163,176,147,159,167,0,156,169],
[156,170,176,181,160,168,160,185,0,174],
[158,150,160,159,165,152,160,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,172,169,162,183,170,173,178],
[171,0,163,155,158,178,163,172,180,173],
[167,178,0,160,167,180,178,165,172,179],
[169,186,181,0,169,172,180,180,166,189],
[172,183,174,172,0,158,190,173,170,186],
[179,163,161,169,183,0,170,174,150,180],
[158,178,163,161,151,171,0,165,165,176],
[171,169,176,161,168,167,176,0,168,184],
[168,161,169,175,171,191,176,173,0,180],
[163,168,162,152,155,161,165,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,177,176,179,184,166,167,161,174],
[163,0,181,165,180,191,162,160,163,148],
[164,160,0,163,178,183,170,164,167,168],
[165,176,178,0,176,187,175,164,169,159],
[162,161,163,165,0,184,164,144,159,152],
[157,150,158,154,157,0,147,143,148,144],
[175,179,171,166,177,194,0,162,168,162],
[174,181,177,177,197,198,179,0,178,167],
[180,178,174,172,182,193,173,163,0,161],
[167,193,173,182,189,197,179,174,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,158,180,188,154,162,176,174],
[185,0,172,176,168,192,171,173,186,173],
[178,169,0,176,181,184,173,165,175,175],
[183,165,165,0,154,177,143,163,179,180],
[161,173,160,187,0,185,148,158,195,169],
[153,149,157,164,156,0,148,151,162,168],
[187,170,168,198,193,193,0,188,205,189],
[179,168,176,178,183,190,153,0,171,185],
[165,155,166,162,146,179,136,170,0,171],
[167,168,166,161,172,173,152,156,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,162,139,118,123,161,188,131,149],
[208,0,183,214,178,169,185,213,195,203],
[179,158,0,174,155,160,187,191,171,181],
[202,127,167,0,173,178,186,212,188,182],
[223,163,186,168,0,160,190,227,182,185],
[218,172,181,163,181,0,171,222,183,183],
[180,156,154,155,151,170,0,174,164,183],
[153,128,150,129,114,119,167,0,113,148],
[210,146,170,153,159,158,177,228,0,183],
[192,138,160,159,156,158,158,193,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,158,173,167,163,168,180,163],
[174,0,166,180,163,168,165,162,184,186],
[167,175,0,151,154,174,166,171,174,193],
[183,161,190,0,170,180,183,171,188,179],
[168,178,187,171,0,172,176,170,193,180],
[174,173,167,161,169,0,180,178,182,172],
[178,176,175,158,165,161,0,160,173,182],
[173,179,170,170,171,163,181,0,183,182],
[161,157,167,153,148,159,168,158,0,174],
[178,155,148,162,161,169,159,159,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,156,180,167,189,174,169,167,170],
[157,0,152,169,161,177,166,152,159,166],
[185,189,0,175,174,188,180,178,177,170],
[161,172,166,0,167,182,167,159,161,162],
[174,180,167,174,0,186,166,165,167,174],
[152,164,153,159,155,0,160,149,159,165],
[167,175,161,174,175,181,0,156,173,166],
[172,189,163,182,176,192,185,0,183,198],
[174,182,164,180,174,182,168,158,0,185],
[171,175,171,179,167,176,175,143,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,179,165,159,156,187,183,163,188],
[158,0,166,178,170,172,197,170,164,160],
[162,175,0,157,159,145,155,148,150,131],
[176,163,184,0,164,151,171,161,155,167],
[182,171,182,177,0,187,199,178,150,151],
[185,169,196,190,154,0,197,169,178,157],
[154,144,186,170,142,144,0,148,152,150],
[158,171,193,180,163,172,193,0,175,178],
[178,177,191,186,191,163,189,166,0,166],
[153,181,210,174,190,184,191,163,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,164,172,156,164,170,166,166,148],
[192,0,177,169,183,161,199,181,181,167],
[177,164,0,185,180,167,168,162,177,173],
[169,172,156,0,177,165,172,169,182,163],
[185,158,161,164,0,161,186,178,160,168],
[177,180,174,176,180,0,186,164,180,165],
[171,142,173,169,155,155,0,176,161,155],
[175,160,179,172,163,177,165,0,166,157],
[175,160,164,159,181,161,180,175,0,173],
[193,174,168,178,173,176,186,184,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,179,165,164,156,177,157,176,158],
[171,0,164,200,160,173,168,158,173,159],
[162,177,0,182,148,146,168,137,162,153],
[176,141,159,0,163,155,155,147,156,150],
[177,181,193,178,0,159,187,174,170,154],
[185,168,195,186,182,0,179,176,170,166],
[164,173,173,186,154,162,0,163,182,176],
[184,183,204,194,167,165,178,0,167,162],
[165,168,179,185,171,171,159,174,0,159],
[183,182,188,191,187,175,165,179,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,151,182,162,166,172,181,161,199],
[172,0,161,157,163,158,154,176,163,171],
[190,180,0,187,174,156,169,205,155,187],
[159,184,154,0,175,165,161,175,155,167],
[179,178,167,166,0,174,150,189,156,192],
[175,183,185,176,167,0,181,166,161,168],
[169,187,172,180,191,160,0,214,190,188],
[160,165,136,166,152,175,127,0,160,155],
[180,178,186,186,185,180,151,181,0,180],
[142,170,154,174,149,173,153,186,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,223,132,118,120,161,120,150,164],
[206,0,207,188,193,103,175,179,150,177],
[118,134,0,115,161,101,101,149,118,100],
[209,153,226,0,166,153,180,153,138,182],
[223,148,180,175,0,121,146,104,148,177],
[221,238,240,188,220,0,190,223,162,205],
[180,166,240,161,195,151,0,182,211,179],
[221,162,192,188,237,118,159,0,131,133],
[191,191,223,203,193,179,130,210,0,177],
[177,164,241,159,164,136,162,208,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,169,144,166,148,186,187,140,137],
[185,0,170,181,183,195,200,170,156,157],
[172,171,0,148,176,161,150,186,131,144],
[197,160,193,0,187,184,197,193,182,164],
[175,158,165,154,0,155,187,197,162,153],
[193,146,180,157,186,0,194,188,162,165],
[155,141,191,144,154,147,0,167,140,143],
[154,171,155,148,144,153,174,0,136,117],
[201,185,210,159,179,179,201,205,0,177],
[204,184,197,177,188,176,198,224,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,124,173,181,159,162,202,204,202],
[171,0,181,204,204,169,132,204,247,223],
[217,160,0,207,195,181,196,203,236,245],
[168,137,134,0,158,124,173,145,190,187],
[160,137,146,183,0,147,199,170,208,223],
[182,172,160,217,194,0,175,171,206,201],
[179,209,145,168,142,166,0,187,203,207],
[139,137,138,196,171,170,154,0,206,244],
[137,94,105,151,133,135,138,135,0,176],
[139,118,96,154,118,140,134,97,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,185,183,185,175,171,180,182,184],
[175,0,178,201,184,190,173,185,187,170],
[156,163,0,176,156,161,150,164,173,156],
[158,140,165,0,171,176,166,162,186,159],
[156,157,185,170,0,167,179,175,182,177],
[166,151,180,165,174,0,174,158,187,164],
[170,168,191,175,162,167,0,176,170,179],
[161,156,177,179,166,183,165,0,173,160],
[159,154,168,155,159,154,171,168,0,150],
[157,171,185,182,164,177,162,181,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,182,173,179,167,164,179,174,164],
[187,0,185,163,180,185,162,180,174,181],
[159,156,0,134,178,163,161,156,163,151],
[168,178,207,0,205,166,173,176,184,171],
[162,161,163,136,0,148,159,165,141,161],
[174,156,178,175,193,0,172,159,178,181],
[177,179,180,168,182,169,0,173,177,175],
[162,161,185,165,176,182,168,0,168,182],
[167,167,178,157,200,163,164,173,0,175],
[177,160,190,170,180,160,166,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,163,157,196,179,153,191,186,193],
[138,0,175,126,170,153,150,146,160,156],
[178,166,0,153,200,172,172,175,193,173],
[184,215,188,0,206,182,167,171,194,184],
[145,171,141,135,0,163,138,139,163,166],
[162,188,169,159,178,0,141,153,161,190],
[188,191,169,174,203,200,0,166,201,213],
[150,195,166,170,202,188,175,0,183,190],
[155,181,148,147,178,180,140,158,0,183],
[148,185,168,157,175,151,128,151,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,184,176,173,176,170,173,182,172],
[160,0,177,175,184,186,175,179,184,188],
[157,164,0,172,172,177,172,178,183,174],
[165,166,169,0,179,173,162,164,166,161],
[168,157,169,162,0,190,170,170,174,161],
[165,155,164,168,151,0,141,152,172,170],
[171,166,169,179,171,200,0,171,178,201],
[168,162,163,177,171,189,170,0,172,171],
[159,157,158,175,167,169,163,169,0,177],
[169,153,167,180,180,171,140,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,179,158,189,170,159,160,162,194],
[158,0,159,156,190,140,133,147,166,149],
[162,182,0,174,207,167,169,179,188,202],
[183,185,167,0,200,209,182,188,157,171],
[152,151,134,141,0,179,136,146,126,146],
[171,201,174,132,162,0,155,159,167,174],
[182,208,172,159,205,186,0,172,153,189],
[181,194,162,153,195,182,169,0,163,189],
[179,175,153,184,215,174,188,178,0,189],
[147,192,139,170,195,167,152,152,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,162,199,130,152,177,162,128,195],
[188,0,218,167,184,173,189,155,181,183],
[179,123,0,133,143,154,158,180,132,175],
[142,174,208,0,164,163,158,185,168,203],
[211,157,198,177,0,144,158,144,129,187],
[189,168,187,178,197,0,144,180,130,177],
[164,152,183,183,183,197,0,163,146,179],
[179,186,161,156,197,161,178,0,180,194],
[213,160,209,173,212,211,195,161,0,176],
[146,158,166,138,154,164,162,147,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,173,171,180,180,185,180,162],
[179,0,196,173,158,162,177,207,193,180],
[174,145,0,195,164,156,182,184,193,161],
[168,168,146,0,176,174,170,183,173,161],
[170,183,177,165,0,168,199,174,207,181],
[161,179,185,167,173,0,170,214,178,180],
[161,164,159,171,142,171,0,189,148,145],
[156,134,157,158,167,127,152,0,170,142],
[161,148,148,168,134,163,193,171,0,174],
[179,161,180,180,160,161,196,199,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,150,158,163,156,170,176,170],
[174,0,174,161,165,180,159,167,178,155],
[162,167,0,168,155,155,159,156,166,155],
[191,180,173,0,175,189,172,162,182,173],
[183,176,186,166,0,173,180,186,184,176],
[178,161,186,152,168,0,156,180,179,157],
[185,182,182,169,161,185,0,180,178,186],
[171,174,185,179,155,161,161,0,176,180],
[165,163,175,159,157,162,163,165,0,159],
[171,186,186,168,165,184,155,161,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,189,197,191,184,180,181,179,187],
[172,0,171,167,182,168,189,175,169,159],
[152,170,0,162,175,162,168,159,156,160],
[144,174,179,0,161,162,156,168,173,147],
[150,159,166,180,0,172,160,149,173,146],
[157,173,179,179,169,0,160,161,177,153],
[161,152,173,185,181,181,0,151,180,151],
[160,166,182,173,192,180,190,0,172,185],
[162,172,185,168,168,164,161,169,0,168],
[154,182,181,194,195,188,190,156,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,173,178,179,182,171,167,167],
[167,0,155,165,168,174,171,182,167,177],
[180,186,0,170,173,174,177,171,173,178],
[168,176,171,0,173,181,168,174,172,164],
[163,173,168,168,0,170,159,173,174,178],
[162,167,167,160,171,0,168,184,168,173],
[159,170,164,173,182,173,0,171,169,187],
[170,159,170,167,168,157,170,0,170,172],
[174,174,168,169,167,173,172,171,0,170],
[174,164,163,177,163,168,154,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,171,164,177,166,157,177,158],
[183,0,170,159,170,161,168,169,187,166],
[174,171,0,161,161,160,158,159,166,159],
[170,182,180,0,179,174,177,168,178,180],
[177,171,180,162,0,179,172,167,171,169],
[164,180,181,167,162,0,170,164,167,161],
[175,173,183,164,169,171,0,155,168,160],
[184,172,182,173,174,177,186,0,183,161],
[164,154,175,163,170,174,173,158,0,169],
[183,175,182,161,172,180,181,180,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,179,151,147,166,150,208,143,167],
[197,0,207,174,152,177,182,186,149,150],
[162,134,0,158,159,141,147,170,145,166],
[190,167,183,0,158,169,158,196,170,187],
[194,189,182,183,0,183,170,216,188,174],
[175,164,200,172,158,0,162,201,163,155],
[191,159,194,183,171,179,0,175,156,165],
[133,155,171,145,125,140,166,0,152,159],
[198,192,196,171,153,178,185,189,0,177],
[174,191,175,154,167,186,176,182,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,160,180,169,137,178,173,167,152],
[162,0,151,154,142,111,140,140,161,122],
[181,190,0,166,171,136,135,183,163,141],
[161,187,175,0,182,160,185,171,139,163],
[172,199,170,159,0,110,164,180,166,133],
[204,230,205,181,231,0,212,187,207,163],
[163,201,206,156,177,129,0,174,156,179],
[168,201,158,170,161,154,167,0,171,174],
[174,180,178,202,175,134,185,170,0,150],
[189,219,200,178,208,178,162,167,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,180,184,170,174,171,166,173,169],
[168,0,190,185,167,169,163,159,170,175],
[161,151,0,172,168,162,159,160,161,163],
[157,156,169,0,168,163,160,155,163,161],
[171,174,173,173,0,164,166,168,172,167],
[167,172,179,178,177,0,168,166,164,177],
[170,178,182,181,175,173,0,168,178,175],
[175,182,181,186,173,175,173,0,159,172],
[168,171,180,178,169,177,163,182,0,163],
[172,166,178,180,174,164,166,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,145,179,170,186,184,173,174,184],
[166,0,153,186,178,170,169,187,184,194],
[196,188,0,177,169,183,169,180,178,192],
[162,155,164,0,148,175,160,155,166,153],
[171,163,172,193,0,172,169,175,183,161],
[155,171,158,166,169,0,179,158,163,167],
[157,172,172,181,172,162,0,175,174,174],
[168,154,161,186,166,183,166,0,165,166],
[167,157,163,175,158,178,167,176,0,171],
[157,147,149,188,180,174,167,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,173,173,170,172,168,171,169],
[160,0,165,155,160,165,165,159,150,165],
[173,176,0,161,155,165,167,166,169,157],
[168,186,180,0,170,167,169,172,172,173],
[168,181,186,171,0,161,175,165,173,179],
[171,176,176,174,180,0,171,165,180,172],
[169,176,174,172,166,170,0,152,181,173],
[173,182,175,169,176,176,189,0,170,177],
[170,191,172,169,168,161,160,171,0,164],
[172,176,184,168,162,169,168,164,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,85,170,170,85,170,170,170,170],
[87,0,87,172,87,172,87,87,87,172],
[256,254,0,257,170,170,170,172,172,169],
[171,169,84,0,85,85,0,171,84,169],
[171,254,171,256,0,169,87,171,171,169],
[256,169,171,256,172,0,172,256,256,169],
[171,254,171,341,254,169,0,256,256,169],
[171,254,169,170,170,85,85,0,170,169],
[171,254,169,257,170,85,85,171,0,169],
[171,169,172,172,172,172,172,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,141,161,167,162,143,158,138,158],
[160,0,142,155,141,164,154,175,143,158],
[200,199,0,199,187,172,180,197,163,194],
[180,186,142,0,171,152,152,182,168,178],
[174,200,154,170,0,159,157,182,174,182],
[179,177,169,189,182,0,164,181,145,163],
[198,187,161,189,184,177,0,179,177,173],
[183,166,144,159,159,160,162,0,128,160],
[203,198,178,173,167,196,164,213,0,180],
[183,183,147,163,159,178,168,181,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,184,196,189,203,170,175,174,173],
[152,0,167,148,158,165,143,123,161,160],
[157,174,0,171,161,171,179,175,167,172],
[145,193,170,0,175,180,143,142,150,167],
[152,183,180,166,0,153,149,174,173,181],
[138,176,170,161,188,0,165,148,178,165],
[171,198,162,198,192,176,0,165,185,192],
[166,218,166,199,167,193,176,0,160,169],
[167,180,174,191,168,163,156,181,0,187],
[168,181,169,174,160,176,149,172,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,166,145,214,170,172,172,189,157],
[143,0,139,102,146,129,113,166,148,116],
[175,202,0,159,214,172,153,171,165,198],
[196,239,182,0,212,191,169,182,189,166],
[127,195,127,129,0,156,147,163,159,143],
[171,212,169,150,185,0,183,166,170,141],
[169,228,188,172,194,158,0,177,160,167],
[169,175,170,159,178,175,164,0,150,161],
[152,193,176,152,182,171,181,191,0,156],
[184,225,143,175,198,200,174,180,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,186,166,182,192,184,166,190,173],
[130,0,148,142,161,151,172,160,164,174],
[155,193,0,194,186,178,183,171,176,168],
[175,199,147,0,164,173,160,154,174,162],
[159,180,155,177,0,167,168,158,193,155],
[149,190,163,168,174,0,183,173,158,173],
[157,169,158,181,173,158,0,163,193,169],
[175,181,170,187,183,168,178,0,181,171],
[151,177,165,167,148,183,148,160,0,168],
[168,167,173,179,186,168,172,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,155,149,184,179,165,148,151,168],
[170,0,179,189,197,204,197,181,178,192],
[186,162,0,175,193,198,166,168,150,179],
[192,152,166,0,171,178,177,181,145,179],
[157,144,148,170,0,159,146,119,143,147],
[162,137,143,163,182,0,130,151,137,158],
[176,144,175,164,195,211,0,165,157,168],
[193,160,173,160,222,190,176,0,153,194],
[190,163,191,196,198,204,184,188,0,199],
[173,149,162,162,194,183,173,147,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,190,182,151,145,182,208,147,200],
[187,0,217,183,178,169,196,210,168,203],
[151,124,0,158,131,157,151,173,142,183],
[159,158,183,0,157,189,189,198,161,193],
[190,163,210,184,0,163,190,189,123,183],
[196,172,184,152,178,0,191,201,172,173],
[159,145,190,152,151,150,0,169,138,173],
[133,131,168,143,152,140,172,0,145,174],
[194,173,199,180,218,169,203,196,0,174],
[141,138,158,148,158,168,168,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,189,216,185,124,217,215,186,217],
[94,0,125,154,123,123,155,184,155,92],
[152,216,0,215,183,61,123,214,93,153],
[125,187,126,0,92,61,93,184,95,154],
[156,218,158,249,0,61,91,156,127,94],
[217,218,280,280,280,0,310,248,158,218],
[124,186,218,248,250,31,0,187,127,156],
[126,157,127,157,185,93,154,0,128,126],
[155,186,248,246,214,183,214,213,0,215],
[124,249,188,187,247,123,185,215,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,171,192,182,173,199,171,162,166],
[161,0,160,187,157,150,174,171,167,172],
[170,181,0,179,163,144,171,160,170,164],
[149,154,162,0,158,144,170,162,175,144],
[159,184,178,183,0,154,181,175,179,172],
[168,191,197,197,187,0,194,193,207,185],
[142,167,170,171,160,147,0,153,152,147],
[170,170,181,179,166,148,188,0,169,178],
[179,174,171,166,162,134,189,172,0,176],
[175,169,177,197,169,156,194,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,167,153,174,149,150,157,166],
[174,0,164,173,169,185,155,154,166,170],
[182,177,0,172,170,182,166,158,175,167],
[174,168,169,0,157,180,164,157,157,176],
[188,172,171,184,0,189,168,170,189,179],
[167,156,159,161,152,0,156,149,165,170],
[192,186,175,177,173,185,0,169,179,187],
[191,187,183,184,171,192,172,0,165,182],
[184,175,166,184,152,176,162,176,0,180],
[175,171,174,165,162,171,154,159,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,149,147,151,182,179,175,154,164],
[182,0,158,160,157,185,153,176,165,157],
[192,183,0,165,170,179,171,184,172,161],
[194,181,176,0,166,179,177,186,173,177],
[190,184,171,175,0,189,170,189,174,155],
[159,156,162,162,152,0,169,174,145,155],
[162,188,170,164,171,172,0,176,162,161],
[166,165,157,155,152,167,165,0,145,142],
[187,176,169,168,167,196,179,196,0,167],
[177,184,180,164,186,186,180,199,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,159,170,154,160,169,172,163,162],
[172,0,164,204,157,184,172,177,193,175],
[182,177,0,191,177,164,171,183,193,192],
[171,137,150,0,149,175,156,168,182,186],
[187,184,164,192,0,180,167,168,189,196],
[181,157,177,166,161,0,176,178,184,176],
[172,169,170,185,174,165,0,168,198,188],
[169,164,158,173,173,163,173,0,163,174],
[178,148,148,159,152,157,143,178,0,175],
[179,166,149,155,145,165,153,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,178,156,193,187,154,174,161,187],
[145,0,146,153,158,173,140,154,168,164],
[163,195,0,134,182,186,151,151,175,179],
[185,188,207,0,181,191,172,164,163,198],
[148,183,159,160,0,153,175,147,169,187],
[154,168,155,150,188,0,133,134,156,162],
[187,201,190,169,166,208,0,165,179,191],
[167,187,190,177,194,207,176,0,190,197],
[180,173,166,178,172,185,162,151,0,197],
[154,177,162,143,154,179,150,144,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,157,170,165,173,164,176,178,156],
[181,0,164,175,174,174,172,179,179,177],
[184,177,0,185,176,153,183,177,186,180],
[171,166,156,0,168,161,177,169,173,156],
[176,167,165,173,0,164,178,170,177,182],
[168,167,188,180,177,0,186,181,187,179],
[177,169,158,164,163,155,0,169,178,170],
[165,162,164,172,171,160,172,0,173,172],
[163,162,155,168,164,154,163,168,0,157],
[185,164,161,185,159,162,171,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,194,202,188,198,173,191,193,136],
[121,0,127,152,127,151,113,171,111,132],
[147,214,0,174,143,162,171,182,181,165],
[139,189,167,0,178,186,184,199,165,150],
[153,214,198,163,0,180,162,182,163,179],
[143,190,179,155,161,0,175,206,180,101],
[168,228,170,157,179,166,0,199,188,144],
[150,170,159,142,159,135,142,0,156,122],
[148,230,160,176,178,161,153,185,0,137],
[205,209,176,191,162,240,197,219,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,181,150,159,162,141,154,164,147],
[180,0,191,170,183,192,169,164,212,185],
[160,150,0,148,172,193,147,156,168,154],
[191,171,193,0,183,187,179,187,193,167],
[182,158,169,158,0,177,145,164,168,165],
[179,149,148,154,164,0,150,143,178,153],
[200,172,194,162,196,191,0,151,200,183],
[187,177,185,154,177,198,190,0,185,171],
[177,129,173,148,173,163,141,156,0,154],
[194,156,187,174,176,188,158,170,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,171,174,174,186,165,172,168,174],
[156,0,174,159,169,185,166,191,178,169],
[170,167,0,177,173,188,168,189,178,171],
[167,182,164,0,196,188,192,180,175,202],
[167,172,168,145,0,185,175,197,165,193],
[155,156,153,153,156,0,168,165,159,166],
[176,175,173,149,166,173,0,183,160,188],
[169,150,152,161,144,176,158,0,150,158],
[173,163,163,166,176,182,181,191,0,180],
[167,172,170,139,148,175,153,183,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,177,153,171,153,164,136,149,172],
[184,0,165,167,171,159,162,150,168,176],
[164,176,0,167,168,164,148,150,158,168],
[188,174,174,0,156,163,172,151,161,173],
[170,170,173,185,0,160,166,182,173,191],
[188,182,177,178,181,0,177,165,177,182],
[177,179,193,169,175,164,0,168,168,174],
[205,191,191,190,159,176,173,0,166,190],
[192,173,183,180,168,164,173,175,0,182],
[169,165,173,168,150,159,167,151,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,182,181,170,178,170,179,166,200],
[163,0,181,184,172,175,174,180,172,194],
[159,160,0,174,163,166,173,152,150,185],
[160,157,167,0,155,158,172,148,149,175],
[171,169,178,186,0,198,174,182,163,199],
[163,166,175,183,143,0,179,170,148,175],
[171,167,168,169,167,162,0,162,139,209],
[162,161,189,193,159,171,179,0,161,189],
[175,169,191,192,178,193,202,180,0,197],
[141,147,156,166,142,166,132,152,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,177,177,175,171,177,183,166,179],
[157,0,172,168,159,162,168,174,169,162],
[164,169,0,175,178,174,185,180,173,181],
[164,173,166,0,167,177,181,185,180,170],
[166,182,163,174,0,178,184,176,171,180],
[170,179,167,164,163,0,175,180,170,185],
[164,173,156,160,157,166,0,163,159,170],
[158,167,161,156,165,161,178,0,171,169],
[175,172,168,161,170,171,182,170,0,176],
[162,179,160,171,161,156,171,172,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,181,197,206,188,182,175,183,162],
[164,0,190,184,178,179,180,154,184,182],
[160,151,0,172,171,185,163,149,162,166],
[144,157,169,0,163,154,174,146,163,163],
[135,163,170,178,0,155,174,153,155,166],
[153,162,156,187,186,0,166,152,178,157],
[159,161,178,167,167,175,0,156,180,163],
[166,187,192,195,188,189,185,0,176,173],
[158,157,179,178,186,163,161,165,0,150],
[179,159,175,178,175,184,178,168,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,194,182,166,185,179,176,173,181],
[168,0,191,182,159,187,174,158,179,180],
[147,150,0,169,156,167,152,160,150,155],
[159,159,172,0,161,165,160,163,168,169],
[175,182,185,180,0,186,167,159,176,169],
[156,154,174,176,155,0,161,152,166,179],
[162,167,189,181,174,180,0,178,169,176],
[165,183,181,178,182,189,163,0,179,189],
[168,162,191,173,165,175,172,162,0,181],
[160,161,186,172,172,162,165,152,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,191,188,168,194,167,197,182,178],
[170,0,192,170,190,200,189,173,173,178],
[150,149,0,168,161,166,162,164,149,156],
[153,171,173,0,179,162,181,163,175,166],
[173,151,180,162,0,190,175,178,169,169],
[147,141,175,179,151,0,144,147,158,159],
[174,152,179,160,166,197,0,178,165,165],
[144,168,177,178,163,194,163,0,172,168],
[159,168,192,166,172,183,176,169,0,164],
[163,163,185,175,172,182,176,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,169,184,168,163,181,171,175,163],
[150,0,171,188,185,171,180,186,168,157],
[172,170,0,191,181,168,187,177,173,167],
[157,153,150,0,154,164,171,159,165,142],
[173,156,160,187,0,150,171,165,165,163],
[178,170,173,177,191,0,183,196,175,174],
[160,161,154,170,170,158,0,160,165,158],
[170,155,164,182,176,145,181,0,168,152],
[166,173,168,176,176,166,176,173,0,156],
[178,184,174,199,178,167,183,189,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,178,186,173,175,167,170,171],
[172,0,167,172,165,168,172,164,163,171],
[181,174,0,176,190,180,173,170,166,179],
[163,169,165,0,180,180,184,182,167,179],
[155,176,151,161,0,179,175,159,149,171],
[168,173,161,161,162,0,160,172,162,158],
[166,169,168,157,166,181,0,179,160,177],
[174,177,171,159,182,169,162,0,171,181],
[171,178,175,174,192,179,181,170,0,182],
[170,170,162,162,170,183,164,160,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,161,162,183,160,196,162,169,165],
[181,0,175,162,164,143,157,169,206,168],
[180,166,0,138,172,145,136,209,188,144],
[179,179,203,0,201,150,167,143,168,181],
[158,177,169,140,0,150,147,191,197,188],
[181,198,196,191,191,0,161,205,214,208],
[145,184,205,174,194,180,0,241,195,209],
[179,172,132,198,150,136,100,0,162,161],
[172,135,153,173,144,127,146,179,0,145],
[176,173,197,160,153,133,132,180,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,191,177,195,205,187,165,176,170],
[143,0,154,155,180,162,167,171,149,160],
[150,187,0,163,183,167,167,177,186,165],
[164,186,178,0,187,181,161,165,174,172],
[146,161,158,154,0,156,138,146,134,144],
[136,179,174,160,185,0,155,166,155,156],
[154,174,174,180,203,186,0,166,183,179],
[176,170,164,176,195,175,175,0,165,174],
[165,192,155,167,207,186,158,176,0,155],
[171,181,176,169,197,185,162,167,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,192,177,167,174,170,170,181,180],
[181,0,182,175,173,185,170,173,181,169],
[149,159,0,167,179,158,162,159,169,160],
[164,166,174,0,183,173,171,171,189,171],
[174,168,162,158,0,167,159,159,175,164],
[167,156,183,168,174,0,158,164,173,159],
[171,171,179,170,182,183,0,169,188,176],
[171,168,182,170,182,177,172,0,189,173],
[160,160,172,152,166,168,153,152,0,161],
[161,172,181,170,177,182,165,168,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,168,176,185,161,169,173,173],
[162,0,166,169,181,188,165,157,181,172],
[176,175,0,179,164,187,185,174,167,177],
[173,172,162,0,175,175,161,162,185,163],
[165,160,177,166,0,176,160,147,177,163],
[156,153,154,166,165,0,160,151,149,153],
[180,176,156,180,181,181,0,164,168,158],
[172,184,167,179,194,190,177,0,177,182],
[168,160,174,156,164,192,173,164,0,163],
[168,169,164,178,178,188,183,159,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,160,168,159,179,176,179,171,173],
[188,0,161,179,183,183,165,169,156,177],
[181,180,0,175,184,169,155,196,152,185],
[173,162,166,0,175,175,141,183,156,181],
[182,158,157,166,0,158,153,175,150,188],
[162,158,172,166,183,0,153,173,149,178],
[165,176,186,200,188,188,0,199,179,183],
[162,172,145,158,166,168,142,0,147,179],
[170,185,189,185,191,192,162,194,0,191],
[168,164,156,160,153,163,158,162,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,175,175,162,164,169,176,178],
[169,0,163,158,161,166,150,172,165,176],
[163,178,0,166,165,166,157,163,170,175],
[166,183,175,0,178,189,163,171,172,178],
[166,180,176,163,0,164,176,161,169,174],
[179,175,175,152,177,0,170,186,179,164],
[177,191,184,178,165,171,0,182,185,182],
[172,169,178,170,180,155,159,0,173,179],
[165,176,171,169,172,162,156,168,0,165],
[163,165,166,163,167,177,159,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,163,173,171,175,169,180,171],
[161,0,181,168,167,168,177,173,176,172],
[179,160,0,169,169,178,174,186,177,175],
[178,173,172,0,178,169,171,181,174,171],
[168,174,172,163,0,165,174,190,166,166],
[170,173,163,172,176,0,175,184,179,173],
[166,164,167,170,167,166,0,181,168,171],
[172,168,155,160,151,157,160,0,171,172],
[161,165,164,167,175,162,173,170,0,169],
[170,169,166,170,175,168,170,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,156,134,165,176,181,154,180,177],
[171,0,173,172,162,173,173,148,194,198],
[185,168,0,162,176,183,164,148,163,178],
[207,169,179,0,192,195,142,159,183,192],
[176,179,165,149,0,173,167,148,185,182],
[165,168,158,146,168,0,126,137,173,174],
[160,168,177,199,174,215,0,171,201,191],
[187,193,193,182,193,204,170,0,196,185],
[161,147,178,158,156,168,140,145,0,171],
[164,143,163,149,159,167,150,156,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,181,168,182,165,168,184,177,181],
[161,0,175,164,167,168,164,187,171,161],
[160,166,0,163,168,161,157,173,163,169],
[173,177,178,0,183,160,161,202,179,171],
[159,174,173,158,0,166,158,171,173,174],
[176,173,180,181,175,0,166,193,180,169],
[173,177,184,180,183,175,0,183,184,168],
[157,154,168,139,170,148,158,0,161,152],
[164,170,178,162,168,161,157,180,0,167],
[160,180,172,170,167,172,173,189,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,183,181,165,185,165,174,195,178],
[180,0,176,176,147,174,169,169,185,172],
[158,165,0,180,167,176,159,183,176,165],
[160,165,161,0,149,180,171,164,185,171],
[176,194,174,192,0,176,180,169,190,175],
[156,167,165,161,165,0,159,165,158,167],
[176,172,182,170,161,182,0,164,178,173],
[167,172,158,177,172,176,177,0,185,191],
[146,156,165,156,151,183,163,156,0,158],
[163,169,176,170,166,174,168,150,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,212,127,168,212,169,212,255,169],
[129,0,86,216,129,258,173,172,216,215],
[129,255,0,170,211,172,212,212,298,212],
[214,125,171,0,171,128,215,171,258,214],
[173,212,130,170,0,172,255,172,216,212],
[129,83,169,213,169,0,170,255,213,255],
[172,168,129,126,86,171,0,128,173,128],
[129,169,129,170,169,86,213,0,256,126],
[86,125,43,83,125,128,168,85,0,168],
[172,126,129,127,129,86,213,215,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,160,156,134,147,164,152,150],
[182,0,173,175,161,160,177,177,164,152],
[178,168,0,156,155,135,161,175,149,151],
[181,166,185,0,174,159,163,195,179,173],
[185,180,186,167,0,168,185,203,176,172],
[207,181,206,182,173,0,197,176,178,170],
[194,164,180,178,156,144,0,177,179,163],
[177,164,166,146,138,165,164,0,150,163],
[189,177,192,162,165,163,162,191,0,154],
[191,189,190,168,169,171,178,178,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,203,177,203,190,168,189,177,229],
[161,0,150,149,175,192,159,188,158,199],
[138,191,0,162,188,189,174,138,174,227],
[164,192,179,0,192,168,191,177,172,252],
[138,166,153,149,0,169,152,179,124,215],
[151,149,152,173,172,0,161,122,161,214],
[173,182,167,150,189,180,0,153,174,213],
[152,153,203,164,162,219,188,0,185,192],
[164,183,167,169,217,180,167,156,0,192],
[112,142,114,89,126,127,128,149,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,160,177,199,142,153,181,147],
[181,0,187,168,188,218,182,187,195,173],
[182,154,0,177,177,217,179,179,195,170],
[181,173,164,0,195,200,184,173,175,175],
[164,153,164,146,0,184,176,180,175,143],
[142,123,124,141,157,0,122,150,174,155],
[199,159,162,157,165,219,0,170,182,150],
[188,154,162,168,161,191,171,0,189,164],
[160,146,146,166,166,167,159,152,0,164],
[194,168,171,166,198,186,191,177,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,167,168,156,167,179,146,169,150],
[189,0,204,195,191,191,215,158,185,196],
[174,137,0,159,179,162,176,146,169,161],
[173,146,182,0,166,167,185,154,168,163],
[185,150,162,175,0,171,182,151,176,173],
[174,150,179,174,170,0,182,173,167,184],
[162,126,165,156,159,159,0,146,154,159],
[195,183,195,187,190,168,195,0,189,202],
[172,156,172,173,165,174,187,152,0,165],
[191,145,180,178,168,157,182,139,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,185,185,210,183,179,192,162,184],
[154,0,191,205,184,177,172,178,152,170],
[156,150,0,180,161,157,153,189,177,174],
[156,136,161,0,156,134,134,133,147,149],
[131,157,180,185,0,161,163,163,154,180],
[158,164,184,207,180,0,168,175,160,181],
[162,169,188,207,178,173,0,163,163,181],
[149,163,152,208,178,166,178,0,170,169],
[179,189,164,194,187,181,178,171,0,185],
[157,171,167,192,161,160,160,172,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,144,187,165,165,205,199,123,197],
[182,0,147,207,178,166,177,235,173,223],
[197,194,0,198,215,161,187,241,179,214],
[154,134,143,0,145,189,156,207,141,188],
[176,163,126,196,0,154,136,226,148,173],
[176,175,180,152,187,0,193,202,177,184],
[136,164,154,185,205,148,0,223,136,180],
[142,106,100,134,115,139,118,0,104,132],
[218,168,162,200,193,164,205,237,0,187],
[144,118,127,153,168,157,161,209,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,191,195,175,185,184,177,183],
[175,0,156,180,167,181,175,170,171,179],
[164,185,0,193,178,178,174,177,186,186],
[150,161,148,0,166,162,161,159,160,160],
[146,174,163,175,0,180,172,175,161,168],
[166,160,163,179,161,0,166,170,173,186],
[156,166,167,180,169,175,0,172,171,169],
[157,171,164,182,166,171,169,0,169,176],
[164,170,155,181,180,168,170,172,0,167],
[158,162,155,181,173,155,172,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,184,155,175,167,184,164,167,164],
[185,0,179,177,180,185,194,176,166,165],
[157,162,0,152,172,169,194,172,176,172],
[186,164,189,0,174,167,191,185,178,183],
[166,161,169,167,0,172,184,175,168,175],
[174,156,172,174,169,0,190,172,179,169],
[157,147,147,150,157,151,0,148,154,140],
[177,165,169,156,166,169,193,0,170,169],
[174,175,165,163,173,162,187,171,0,180],
[177,176,169,158,166,172,201,172,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,195,158,187,192,176,161,182,198],
[162,0,176,161,161,171,185,182,180,192],
[146,165,0,143,160,178,187,164,157,181],
[183,180,198,0,170,183,172,167,179,208],
[154,180,181,171,0,175,171,177,167,181],
[149,170,163,158,166,0,168,172,151,190],
[165,156,154,169,170,173,0,162,155,188],
[180,159,177,174,164,169,179,0,174,173],
[159,161,184,162,174,190,186,167,0,194],
[143,149,160,133,160,151,153,168,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,161,185,161,169,174,166,182],
[176,0,170,181,176,169,182,181,180,172],
[179,171,0,170,171,175,166,173,167,177],
[180,160,171,0,174,157,182,177,175,173],
[156,165,170,167,0,158,170,166,158,159],
[180,172,166,184,183,0,168,176,172,171],
[172,159,175,159,171,173,0,184,169,179],
[167,160,168,164,175,165,157,0,174,170],
[175,161,174,166,183,169,172,167,0,186],
[159,169,164,168,182,170,162,171,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,153,154,174,163,177,188,178],
[174,0,166,155,162,181,156,175,183,182],
[174,175,0,157,171,191,166,174,183,180],
[188,186,184,0,164,198,173,180,188,194],
[187,179,170,177,0,191,178,186,184,185],
[167,160,150,143,150,0,145,138,182,157],
[178,185,175,168,163,196,0,191,169,178],
[164,166,167,161,155,203,150,0,177,170],
[153,158,158,153,157,159,172,164,0,165],
[163,159,161,147,156,184,163,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,171,179,167,173,156,159,165,160],
[181,0,183,163,143,156,162,142,151,137],
[170,158,0,169,151,148,137,159,152,158],
[162,178,172,0,164,164,150,157,153,151],
[174,198,190,177,0,170,161,162,149,154],
[168,185,193,177,171,0,166,160,185,176],
[185,179,204,191,180,175,0,168,182,173],
[182,199,182,184,179,181,173,0,160,157],
[176,190,189,188,192,156,159,181,0,164],
[181,204,183,190,187,165,168,184,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,147,127,82,190,148,212,169,168],
[193,0,191,152,130,167,193,193,195,216],
[194,150,0,152,129,125,192,235,108,129],
[214,189,189,0,105,167,148,233,127,191],
[259,211,212,236,0,210,236,277,170,234],
[151,174,216,174,131,0,195,195,174,194],
[193,148,149,193,105,146,0,168,171,151],
[129,148,106,108,64,146,173,0,172,173],
[172,146,233,214,171,167,170,169,0,210],
[173,125,212,150,107,147,190,168,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,202,186,151,187,170,180,178,186],
[187,0,163,187,168,177,202,180,185,185],
[139,178,0,152,129,178,140,137,158,164],
[155,154,189,0,164,197,177,146,194,161],
[190,173,212,177,0,208,169,175,185,201],
[154,164,163,144,133,0,156,144,184,193],
[171,139,201,164,172,185,0,171,181,178],
[161,161,204,195,166,197,170,0,170,158],
[163,156,183,147,156,157,160,171,0,153],
[155,156,177,180,140,148,163,183,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,172,211,191,184,177,195,170],
[174,0,165,154,201,178,158,159,196,172],
[174,176,0,159,209,191,178,174,181,169],
[169,187,182,0,208,202,180,165,184,178],
[130,140,132,133,0,161,141,151,149,156],
[150,163,150,139,180,0,146,153,165,152],
[157,183,163,161,200,195,0,191,178,171],
[164,182,167,176,190,188,150,0,195,172],
[146,145,160,157,192,176,163,146,0,167],
[171,169,172,163,185,189,170,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,162,167,174,167,158,178,185],
[169,0,169,159,160,173,207,166,177,174],
[176,172,0,166,168,160,167,165,168,187],
[179,182,175,0,185,156,186,171,178,186],
[174,181,173,156,0,188,200,162,188,178],
[167,168,181,185,153,0,192,191,181,180],
[174,134,174,155,141,149,0,146,166,175],
[183,175,176,170,179,150,195,0,176,186],
[163,164,173,163,153,160,175,165,0,190],
[156,167,154,155,163,161,166,155,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,176,143,155,170,127,213,146,179],
[182,0,163,151,183,197,171,235,169,167],
[165,178,0,121,159,159,132,194,150,176],
[198,190,220,0,168,220,200,255,178,192],
[186,158,182,173,0,177,159,220,166,166],
[171,144,182,121,164,0,137,178,148,181],
[214,170,209,141,182,204,0,216,165,197],
[128,106,147,86,121,163,125,0,158,133],
[195,172,191,163,175,193,176,183,0,181],
[162,174,165,149,175,160,144,208,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,106,146,155,127,171,118,173,154],
[186,0,119,132,143,170,199,158,144,167],
[235,222,0,195,218,166,231,178,210,234],
[195,209,146,0,182,167,158,173,184,183],
[186,198,123,159,0,139,252,172,135,154],
[214,171,175,174,202,0,211,175,134,224],
[170,142,110,183,89,130,0,116,158,166],
[223,183,163,168,169,166,225,0,172,196],
[168,197,131,157,206,207,183,169,0,181],
[187,174,107,158,187,117,175,145,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,187,186,185,217,123,249,155,216],
[154,0,186,216,155,216,156,217,186,154],
[154,155,0,216,185,153,187,247,155,248],
[155,125,125,0,155,154,155,279,217,155],
[156,186,156,186,0,218,218,249,218,248],
[124,125,188,187,123,0,125,217,124,247],
[218,185,154,186,123,216,0,247,218,248],
[92,124,94,62,92,124,94,0,217,92],
[186,155,186,124,123,217,123,124,0,154],
[125,187,93,186,93,94,93,249,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,172,192,168,159,177,190,186,165],
[150,0,160,178,171,155,158,192,172,152],
[169,181,0,179,151,156,157,193,183,156],
[149,163,162,0,155,149,161,198,187,170],
[173,170,190,186,0,172,193,199,199,176],
[182,186,185,192,169,0,172,205,193,164],
[164,183,184,180,148,169,0,180,169,143],
[151,149,148,143,142,136,161,0,177,155],
[155,169,158,154,142,148,172,164,0,137],
[176,189,185,171,165,177,198,186,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,170,256,171,256,171,171,256,256],
[85,0,170,170,85,85,85,85,170,170],
[171,171,0,171,171,86,171,256,171,256],
[85,171,170,0,171,171,0,85,170,256],
[170,256,170,170,0,256,85,85,170,256],
[85,256,255,170,85,0,85,170,170,256],
[170,256,170,341,256,256,0,85,170,256],
[170,256,85,256,256,171,256,0,170,171],
[85,171,170,171,171,171,171,171,0,256],
[85,171,85,85,85,85,85,170,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,56,229,114,171,114,113,0,113],
[170,0,114,284,227,171,171,227,114,227],
[285,227,0,285,228,171,114,226,172,170],
[112,57,56,0,56,56,57,112,0,113],
[227,114,113,285,0,228,170,170,171,169],
[170,170,170,285,113,0,113,226,114,170],
[227,170,227,284,171,228,0,226,171,226],
[228,114,115,229,171,115,115,0,172,113],
[341,227,169,341,170,227,170,169,0,170],
[228,114,171,228,172,171,115,228,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,163,183,186,160,174,189,164,201],
[155,0,175,188,182,160,161,167,152,167],
[178,166,0,171,182,166,153,185,148,182],
[158,153,170,0,190,161,145,190,170,166],
[155,159,159,151,0,173,146,167,145,163],
[181,181,175,180,168,0,155,183,167,183],
[167,180,188,196,195,186,0,179,185,217],
[152,174,156,151,174,158,162,0,156,169],
[177,189,193,171,196,174,156,185,0,171],
[140,174,159,175,178,158,124,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,185,170,175,181,187,198,198,197],
[156,0,170,147,153,170,155,178,174,181],
[156,171,0,153,160,145,138,158,186,167],
[171,194,188,0,166,173,168,201,173,195],
[166,188,181,175,0,188,168,191,188,188],
[160,171,196,168,153,0,146,184,176,193],
[154,186,203,173,173,195,0,223,168,199],
[143,163,183,140,150,157,118,0,171,184],
[143,167,155,168,153,165,173,170,0,179],
[144,160,174,146,153,148,142,157,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,159,162,179,197,158,155,143,166],
[159,0,178,182,163,177,168,155,145,155],
[182,163,0,160,192,179,159,153,172,176],
[179,159,181,0,179,175,155,162,149,147],
[162,178,149,162,0,178,150,149,149,151],
[144,164,162,166,163,0,160,134,167,159],
[183,173,182,186,191,181,0,172,176,166],
[186,186,188,179,192,207,169,0,176,186],
[198,196,169,192,192,174,165,165,0,171],
[175,186,165,194,190,182,175,155,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,175,176,178,164,160,163,158,176],
[143,0,156,142,152,139,141,146,158,145],
[166,185,0,160,148,150,144,161,159,158],
[165,199,181,0,169,170,174,162,174,182],
[163,189,193,172,0,163,164,175,180,179],
[177,202,191,171,178,0,171,194,179,167],
[181,200,197,167,177,170,0,171,182,165],
[178,195,180,179,166,147,170,0,166,172],
[183,183,182,167,161,162,159,175,0,168],
[165,196,183,159,162,174,176,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,165,156,161,161,179,161,152],
[168,0,156,179,160,176,174,177,169,173],
[176,185,0,188,176,185,180,174,180,169],
[176,162,153,0,163,176,172,163,168,158],
[185,181,165,178,0,175,181,177,171,171],
[180,165,156,165,166,0,181,171,162,170],
[180,167,161,169,160,160,0,168,160,171],
[162,164,167,178,164,170,173,0,169,176],
[180,172,161,173,170,179,181,172,0,173],
[189,168,172,183,170,171,170,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,197,151,199,183,149,159,179],
[182,0,191,186,167,185,160,168,169,164],
[181,150,0,173,171,184,139,171,174,179],
[144,155,168,0,155,197,142,170,155,160],
[190,174,170,186,0,218,164,194,185,179],
[142,156,157,144,123,0,123,141,135,146],
[158,181,202,199,177,218,0,200,194,202],
[192,173,170,171,147,200,141,0,190,169],
[182,172,167,186,156,206,147,151,0,174],
[162,177,162,181,162,195,139,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,166,126,136,146,164,156,159,141],
[192,0,197,167,162,166,174,157,161,173],
[175,144,0,135,170,144,168,160,148,158],
[215,174,206,0,203,181,200,174,152,188],
[205,179,171,138,0,178,182,164,163,176],
[195,175,197,160,163,0,187,168,153,178],
[177,167,173,141,159,154,0,140,149,165],
[185,184,181,167,177,173,201,0,173,185],
[182,180,193,189,178,188,192,168,0,162],
[200,168,183,153,165,163,176,156,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,190,174,153,180,179,168,170,139],
[160,0,170,166,161,160,161,159,168,146],
[151,171,0,165,148,169,161,150,152,141],
[167,175,176,0,152,172,182,151,160,147],
[188,180,193,189,0,172,185,179,170,178],
[161,181,172,169,169,0,175,160,182,161],
[162,180,180,159,156,166,0,164,153,158],
[173,182,191,190,162,181,177,0,165,163],
[171,173,189,181,171,159,188,176,0,175],
[202,195,200,194,163,180,183,178,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,138,206,206,69,135,138,206,206],
[204,0,207,206,273,69,135,207,138,137],
[203,134,0,272,203,137,66,206,206,68],
[135,135,69,0,135,69,135,69,69,69],
[135,68,138,206,0,69,66,69,69,68],
[272,272,204,272,272,0,135,272,341,137],
[206,206,275,206,275,206,0,275,206,137],
[203,134,135,272,272,69,66,0,272,68],
[135,203,135,272,272,0,135,69,0,68],
[135,204,273,272,273,204,204,273,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,178,167,170,164,176,177,176,154],
[159,0,148,174,184,171,162,165,180,164],
[163,193,0,175,195,169,168,191,180,172],
[174,167,166,0,179,162,179,175,175,158],
[171,157,146,162,0,143,160,160,160,140],
[177,170,172,179,198,0,165,167,188,163],
[165,179,173,162,181,176,0,175,173,159],
[164,176,150,166,181,174,166,0,166,161],
[165,161,161,166,181,153,168,175,0,154],
[187,177,169,183,201,178,182,180,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,159,157,147,152,167,150,157,158],
[192,0,191,178,169,187,174,175,176,169],
[182,150,0,169,149,174,172,178,165,158],
[184,163,172,0,172,169,165,167,175,171],
[194,172,192,169,0,154,182,176,180,184],
[189,154,167,172,187,0,179,160,160,166],
[174,167,169,176,159,162,0,158,151,173],
[191,166,163,174,165,181,183,0,177,183],
[184,165,176,166,161,181,190,164,0,161],
[183,172,183,170,157,175,168,158,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,161,153,176,189,161,164,192],
[167,0,141,152,150,155,181,155,158,154],
[173,200,0,165,153,170,175,173,167,177],
[180,189,176,0,159,180,189,197,158,173],
[188,191,188,182,0,206,218,169,189,170],
[165,186,171,161,135,0,177,163,155,167],
[152,160,166,152,123,164,0,157,145,142],
[180,186,168,144,172,178,184,0,157,149],
[177,183,174,183,152,186,196,184,0,189],
[149,187,164,168,171,174,199,192,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,186,193,172,164,162,191,157,174],
[170,0,179,189,165,163,155,179,173,180],
[155,162,0,177,161,160,150,185,161,177],
[148,152,164,0,180,164,150,159,154,154],
[169,176,180,161,0,152,160,171,166,178],
[177,178,181,177,189,0,174,189,158,159],
[179,186,191,191,181,167,0,201,190,184],
[150,162,156,182,170,152,140,0,137,172],
[184,168,180,187,175,183,151,204,0,164],
[167,161,164,187,163,182,157,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,174,179,179,190,167,167,193],
[169,0,171,159,182,180,179,178,170,179],
[170,170,0,170,187,178,166,169,171,176],
[167,182,171,0,183,187,187,182,177,188],
[162,159,154,158,0,169,163,169,166,168],
[162,161,163,154,172,0,150,160,151,178],
[151,162,175,154,178,191,0,163,160,174],
[174,163,172,159,172,181,178,0,163,188],
[174,171,170,164,175,190,181,178,0,185],
[148,162,165,153,173,163,167,153,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,186,156,158,238,212,130,158,238],
[156,0,212,157,183,185,210,210,132,262],
[155,129,0,181,207,185,210,157,133,260],
[185,184,160,0,185,212,237,264,211,237],
[183,158,134,156,0,237,237,158,133,263],
[103,156,156,129,104,0,208,130,134,260],
[129,131,131,104,104,133,0,158,186,236],
[211,131,184,77,183,211,183,0,184,261],
[183,209,208,130,208,207,155,157,0,262],
[103,79,81,104,78,81,105,80,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,200,180,162,183,166,140,167,138],
[153,0,158,165,155,137,175,144,169,158],
[141,183,0,209,160,174,177,167,182,139],
[161,176,132,0,162,135,173,152,161,153],
[179,186,181,179,0,161,178,187,198,147],
[158,204,167,206,180,0,190,172,202,174],
[175,166,164,168,163,151,0,166,163,146],
[201,197,174,189,154,169,175,0,190,162],
[174,172,159,180,143,139,178,151,0,144],
[203,183,202,188,194,167,195,179,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,175,167,195,173,190,170,186],
[168,0,176,177,165,174,181,165,164,187],
[176,165,0,170,173,180,179,195,158,167],
[166,164,171,0,166,165,170,183,150,170],
[174,176,168,175,0,194,178,178,180,189],
[146,167,161,176,147,0,153,175,149,180],
[168,160,162,171,163,188,0,188,165,174],
[151,176,146,158,163,166,153,0,154,178],
[171,177,183,191,161,192,176,187,0,195],
[155,154,174,171,152,161,167,163,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,153,180,162,153,191,176,185,149],
[191,0,156,201,168,171,181,184,184,158],
[188,185,0,196,183,168,199,200,194,199],
[161,140,145,0,165,159,160,173,159,161],
[179,173,158,176,0,174,169,182,186,155],
[188,170,173,182,167,0,194,193,172,159],
[150,160,142,181,172,147,0,175,168,159],
[165,157,141,168,159,148,166,0,164,145],
[156,157,147,182,155,169,173,177,0,167],
[192,183,142,180,186,182,182,196,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,191,178,168,181,168,209,163,167],
[160,0,149,148,163,155,154,182,180,171],
[150,192,0,174,161,154,163,178,180,177],
[163,193,167,0,172,169,191,192,175,156],
[173,178,180,169,0,164,166,171,164,183],
[160,186,187,172,177,0,159,193,171,144],
[173,187,178,150,175,182,0,189,165,156],
[132,159,163,149,170,148,152,0,137,149],
[178,161,161,166,177,170,176,204,0,160],
[174,170,164,185,158,197,185,192,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,180,164,176,200,190,187,182,190],
[135,0,165,143,119,145,139,148,138,161],
[161,176,0,158,167,186,161,164,145,174],
[177,198,183,0,169,179,157,181,145,189],
[165,222,174,172,0,204,168,208,168,193],
[141,196,155,162,137,0,142,162,151,172],
[151,202,180,184,173,199,0,184,163,187],
[154,193,177,160,133,179,157,0,142,177],
[159,203,196,196,173,190,178,199,0,189],
[151,180,167,152,148,169,154,164,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,148,177,181,173,170,160,152,170],
[169,0,177,176,191,178,178,181,167,195],
[193,164,0,182,179,187,173,186,168,194],
[164,165,159,0,185,177,166,173,174,184],
[160,150,162,156,0,165,157,171,158,166],
[168,163,154,164,176,0,158,174,165,170],
[171,163,168,175,184,183,0,166,168,179],
[181,160,155,168,170,167,175,0,171,180],
[189,174,173,167,183,176,173,170,0,185],
[171,146,147,157,175,171,162,161,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,161,228,203,211,238,212,182,206],
[173,0,144,214,181,184,178,170,176,169],
[180,197,0,238,180,197,229,194,201,169],
[113,127,103,0,155,151,163,134,153,151],
[138,160,161,186,0,187,171,173,166,178],
[130,157,144,190,154,0,186,169,172,156],
[103,163,112,178,170,155,0,137,161,137],
[129,171,147,207,168,172,204,0,188,178],
[159,165,140,188,175,169,180,153,0,153],
[135,172,172,190,163,185,204,163,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,160,162,150,160,175,173,140,178],
[192,0,174,161,173,193,195,172,173,195],
[181,167,0,161,164,185,198,170,170,177],
[179,180,180,0,166,206,194,188,161,195],
[191,168,177,175,0,187,199,183,163,189],
[181,148,156,135,154,0,150,163,134,156],
[166,146,143,147,142,191,0,174,142,174],
[168,169,171,153,158,178,167,0,147,175],
[201,168,171,180,178,207,199,194,0,183],
[163,146,164,146,152,185,167,166,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,190,202,186,247,155,173,230,205],
[142,0,160,227,141,242,185,185,168,153],
[151,181,0,210,152,153,154,194,195,138],
[139,114,131,0,98,143,138,137,195,124],
[155,200,189,243,0,201,198,227,226,186],
[94,99,188,198,140,0,152,122,167,140],
[186,156,187,203,143,189,0,172,188,185],
[168,156,147,204,114,219,169,0,197,187],
[111,173,146,146,115,174,153,144,0,132],
[136,188,203,217,155,201,156,154,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,174,175,184,183,181,183,156],
[167,0,161,179,171,185,186,177,169,158],
[180,180,0,168,162,179,199,170,178,156],
[167,162,173,0,168,161,190,153,177,158],
[166,170,179,173,0,175,189,177,185,171],
[157,156,162,180,166,0,179,170,156,152],
[158,155,142,151,152,162,0,149,136,119],
[160,164,171,188,164,171,192,0,176,160],
[158,172,163,164,156,185,205,165,0,163],
[185,183,185,183,170,189,222,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,183,169,181,181,172,182,181],
[163,0,175,181,181,186,180,178,174,182],
[168,166,0,176,170,176,179,164,170,179],
[158,160,165,0,175,168,172,170,176,188],
[172,160,171,166,0,166,172,158,176,166],
[160,155,165,173,175,0,170,159,163,173],
[160,161,162,169,169,171,0,165,164,172],
[169,163,177,171,183,182,176,0,168,181],
[159,167,171,165,165,178,177,173,0,178],
[160,159,162,153,175,168,169,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,168,160,182,183,182,177,186],
[171,0,205,186,181,183,193,167,190,178],
[175,136,0,172,148,164,179,150,167,157],
[173,155,169,0,166,170,184,164,170,171],
[181,160,193,175,0,189,181,173,169,169],
[159,158,177,171,152,0,162,168,150,182],
[158,148,162,157,160,179,0,159,151,160],
[159,174,191,177,168,173,182,0,178,187],
[164,151,174,171,172,191,190,163,0,171],
[155,163,184,170,172,159,181,154,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,144,165,166,174,184,190,196,195],
[184,0,173,174,168,188,202,196,213,206],
[197,168,0,166,190,178,195,206,207,185],
[176,167,175,0,190,179,201,198,190,186],
[175,173,151,151,0,174,186,187,191,183],
[167,153,163,162,167,0,187,195,194,171],
[157,139,146,140,155,154,0,174,172,161],
[151,145,135,143,154,146,167,0,173,171],
[145,128,134,151,150,147,169,168,0,162],
[146,135,156,155,158,170,180,170,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,189,159,162,184,177,176,174,177],
[178,0,177,167,168,178,185,164,164,176],
[152,164,0,167,162,184,173,165,173,158],
[182,174,174,0,197,190,178,169,183,180],
[179,173,179,144,0,192,161,166,170,174],
[157,163,157,151,149,0,170,164,177,156],
[164,156,168,163,180,171,0,148,157,156],
[165,177,176,172,175,177,193,0,166,168],
[167,177,168,158,171,164,184,175,0,172],
[164,165,183,161,167,185,185,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,189,192,187,215,172,165,183,157],
[180,0,176,180,209,180,161,158,158,186],
[152,165,0,203,214,180,152,182,159,176],
[149,161,138,0,178,172,130,149,130,140],
[154,132,127,163,0,154,122,156,109,119],
[126,161,161,169,187,0,130,145,134,156],
[169,180,189,211,219,211,0,181,169,191],
[176,183,159,192,185,196,160,0,143,181],
[158,183,182,211,232,207,172,198,0,137],
[184,155,165,201,222,185,150,160,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,172,190,171,169,174,172,158,181],
[182,0,166,181,174,172,167,177,167,172],
[169,175,0,182,170,172,181,177,160,181],
[151,160,159,0,162,150,160,165,145,164],
[170,167,171,179,0,154,180,181,156,175],
[172,169,169,191,187,0,180,188,174,187],
[167,174,160,181,161,161,0,181,156,175],
[169,164,164,176,160,153,160,0,149,167],
[183,174,181,196,185,167,185,192,0,199],
[160,169,160,177,166,154,166,174,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,155,174,174,159,165,157,168],
[167,0,174,170,180,176,180,171,170,174],
[178,167,0,163,173,175,168,178,165,171],
[186,171,178,0,175,175,169,171,164,196],
[167,161,168,166,0,172,167,168,168,181],
[167,165,166,166,169,0,159,159,148,170],
[182,161,173,172,174,182,0,178,173,175],
[176,170,163,170,173,182,163,0,162,178],
[184,171,176,177,173,193,168,179,0,188],
[173,167,170,145,160,171,166,163,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,171,181,180,165,185,179,192,179],
[157,0,167,161,173,151,164,152,176,154],
[170,174,0,161,173,151,154,156,175,156],
[160,180,180,0,176,161,173,173,176,167],
[161,168,168,165,0,141,142,164,177,163],
[176,190,190,180,200,0,180,168,190,175],
[156,177,187,168,199,161,0,161,187,167],
[162,189,185,168,177,173,180,0,190,167],
[149,165,166,165,164,151,154,151,0,153],
[162,187,185,174,178,166,174,174,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,207,168,152,129,147,208,151],
[172,0,226,172,168,171,209,154,191,174],
[173,115,0,135,169,135,152,151,156,115],
[134,169,206,0,188,173,208,209,209,190],
[173,173,172,153,0,154,155,132,174,171],
[189,170,206,168,187,0,207,169,189,151],
[212,132,189,133,186,134,0,116,171,192],
[194,187,190,132,209,172,225,0,228,189],
[133,150,185,132,167,152,170,113,0,169],
[190,167,226,151,170,190,149,152,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,185,171,162,188,156,171,150,164],
[175,0,204,175,173,164,151,174,171,173],
[156,137,0,139,138,154,140,147,132,155],
[170,166,202,0,170,170,187,178,164,179],
[179,168,203,171,0,176,169,174,163,189],
[153,177,187,171,165,0,186,169,151,191],
[185,190,201,154,172,155,0,170,162,152],
[170,167,194,163,167,172,171,0,167,163],
[191,170,209,177,178,190,179,174,0,180],
[177,168,186,162,152,150,189,178,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,155,174,171,162,168,165,152],
[174,0,164,165,164,173,189,159,150,156],
[182,177,0,178,182,188,175,171,168,167],
[186,176,163,0,159,177,183,162,170,152],
[167,177,159,182,0,158,177,170,152,160],
[170,168,153,164,183,0,167,161,165,151],
[179,152,166,158,164,174,0,173,164,169],
[173,182,170,179,171,180,168,0,177,177],
[176,191,173,171,189,176,177,164,0,166],
[189,185,174,189,181,190,172,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,153,164,197,176,156,160,165,171],
[176,0,178,175,196,175,179,161,180,186],
[188,163,0,170,194,178,189,185,193,177],
[177,166,171,0,186,181,175,176,171,186],
[144,145,147,155,0,153,158,158,167,159],
[165,166,163,160,188,0,168,168,179,193],
[185,162,152,166,183,173,0,168,181,181],
[181,180,156,165,183,173,173,0,176,190],
[176,161,148,170,174,162,160,165,0,171],
[170,155,164,155,182,148,160,151,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,155,173,176,157,191,173,183],
[171,0,167,176,162,158,172,162,166,166],
[171,174,0,175,181,169,170,188,168,178],
[186,165,166,0,185,183,174,184,181,171],
[168,179,160,156,0,161,164,177,164,170],
[165,183,172,158,180,0,156,189,172,167],
[184,169,171,167,177,185,0,176,171,168],
[150,179,153,157,164,152,165,0,163,161],
[168,175,173,160,177,169,170,178,0,175],
[158,175,163,170,171,174,173,180,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,174,156,167,179,172,166,178],
[168,0,166,150,174,174,179,167,172,167],
[173,175,0,155,153,173,175,176,165,185],
[167,191,186,0,171,173,182,170,179,185],
[185,167,188,170,0,182,196,184,177,189],
[174,167,168,168,159,0,183,165,177,171],
[162,162,166,159,145,158,0,167,158,189],
[169,174,165,171,157,176,174,0,165,170],
[175,169,176,162,164,164,183,176,0,167],
[163,174,156,156,152,170,152,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,193,178,177,191,168,174,176,172],
[171,0,174,152,182,168,149,179,176,174],
[148,167,0,159,165,157,138,144,169,169],
[163,189,182,0,166,186,176,173,204,190],
[164,159,176,175,0,172,148,159,182,168],
[150,173,184,155,169,0,165,142,164,182],
[173,192,203,165,193,176,0,183,185,191],
[167,162,197,168,182,199,158,0,177,180],
[165,165,172,137,159,177,156,164,0,171],
[169,167,172,151,173,159,150,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,175,180,170,195,195,187,169,180],
[163,0,163,184,174,170,173,169,188,177],
[166,178,0,181,182,184,191,184,183,192],
[161,157,160,0,159,184,183,178,179,170],
[171,167,159,182,0,186,194,193,179,181],
[146,171,157,157,155,0,177,169,171,169],
[146,168,150,158,147,164,0,171,160,164],
[154,172,157,163,148,172,170,0,173,169],
[172,153,158,162,162,170,181,168,0,182],
[161,164,149,171,160,172,177,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,136,180,140,133,132,127,148],
[181,0,167,144,176,155,138,148,161,162],
[182,174,0,165,189,160,172,174,156,173],
[205,197,176,0,199,172,161,182,173,186],
[161,165,152,142,0,160,136,158,164,153],
[201,186,181,169,181,0,164,175,169,160],
[208,203,169,180,205,177,0,179,186,178],
[209,193,167,159,183,166,162,0,177,169],
[214,180,185,168,177,172,155,164,0,164],
[193,179,168,155,188,181,163,172,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,189,178,185,146,197,164,184,178],
[180,0,180,176,186,165,181,157,157,174],
[152,161,0,182,179,139,168,182,171,166],
[163,165,159,0,186,162,177,149,170,176],
[156,155,162,155,0,134,185,155,160,173],
[195,176,202,179,207,0,191,158,199,195],
[144,160,173,164,156,150,0,158,172,170],
[177,184,159,192,186,183,183,0,189,174],
[157,184,170,171,181,142,169,152,0,169],
[163,167,175,165,168,146,171,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,182,181,195,177,173,159,191,198],
[168,0,159,180,184,158,166,157,194,177],
[159,182,0,176,185,181,181,171,188,175],
[160,161,165,0,172,164,170,163,170,180],
[146,157,156,169,0,175,159,151,172,173],
[164,183,160,177,166,0,181,161,180,183],
[168,175,160,171,182,160,0,155,181,178],
[182,184,170,178,190,180,186,0,202,193],
[150,147,153,171,169,161,160,139,0,175],
[143,164,166,161,168,158,163,148,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,150,156,167,162,174,193,187,161],
[182,0,176,184,168,187,168,193,153,175],
[191,165,0,162,170,175,183,192,174,176],
[185,157,179,0,164,160,171,168,170,182],
[174,173,171,177,0,184,163,186,178,212],
[179,154,166,181,157,0,180,193,180,176],
[167,173,158,170,178,161,0,194,162,185],
[148,148,149,173,155,148,147,0,154,170],
[154,188,167,171,163,161,179,187,0,189],
[180,166,165,159,129,165,156,171,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,190,197,203,222,182,165,180,239],
[149,0,162,185,180,208,189,158,164,178],
[151,179,0,177,175,211,153,162,173,175],
[144,156,164,0,154,187,164,160,152,200],
[138,161,166,187,0,183,163,171,157,184],
[119,133,130,154,158,0,135,112,135,170],
[159,152,188,177,178,206,0,162,179,192],
[176,183,179,181,170,229,179,0,156,179],
[161,177,168,189,184,206,162,185,0,200],
[102,163,166,141,157,171,149,162,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,186,163,174,150,171,159,165,188],
[161,0,175,164,156,137,164,153,167,177],
[155,166,0,159,183,163,179,165,153,175],
[178,177,182,0,193,172,158,156,173,185],
[167,185,158,148,0,132,155,169,154,159],
[191,204,178,169,209,0,185,206,175,204],
[170,177,162,183,186,156,0,156,173,206],
[182,188,176,185,172,135,185,0,177,187],
[176,174,188,168,187,166,168,164,0,191],
[153,164,166,156,182,137,135,154,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,164,167,173,180,159,171,155,154],
[173,0,169,179,177,181,166,163,167,172],
[177,172,0,164,168,182,173,169,187,173],
[174,162,177,0,166,181,169,167,172,170],
[168,164,173,175,0,197,187,170,184,170],
[161,160,159,160,144,0,160,157,156,159],
[182,175,168,172,154,181,0,179,174,171],
[170,178,172,174,171,184,162,0,166,163],
[186,174,154,169,157,185,167,175,0,163],
[187,169,168,171,171,182,170,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,175,159,168,175,166,170,172,166],
[155,0,155,159,160,155,176,181,173,172],
[166,186,0,172,172,166,183,185,183,173],
[182,182,169,0,181,182,171,185,204,173],
[173,181,169,160,0,171,166,184,175,165],
[166,186,175,159,170,0,184,192,183,173],
[175,165,158,170,175,157,0,186,172,170],
[171,160,156,156,157,149,155,0,173,159],
[169,168,158,137,166,158,169,168,0,171],
[175,169,168,168,176,168,171,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,226,192,177,194,227,225,243,243],
[177,0,209,144,113,196,224,209,227,223],
[115,132,0,166,115,150,211,162,194,161],
[149,197,175,0,131,179,244,193,194,210],
[164,228,226,210,0,196,275,242,228,225],
[147,145,191,162,145,0,194,224,191,210],
[114,117,130,97,66,147,0,176,148,178],
[116,132,179,148,99,117,165,0,165,148],
[98,114,147,147,113,150,193,176,0,146],
[98,118,180,131,116,131,163,193,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,162,175,163,181,183,178,172],
[171,0,160,168,180,163,169,183,173,177],
[161,181,0,162,190,176,174,176,186,182],
[179,173,179,0,177,170,188,179,189,167],
[166,161,151,164,0,154,168,174,169,164],
[178,178,165,171,187,0,173,178,175,176],
[160,172,167,153,173,168,0,171,163,162],
[158,158,165,162,167,163,170,0,173,161],
[163,168,155,152,172,166,178,168,0,164],
[169,164,159,174,177,165,179,180,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,171,163,144,170,172,168,160],
[171,0,169,164,159,153,165,162,175,160],
[166,172,0,172,159,162,180,165,179,159],
[170,177,169,0,165,155,156,160,161,170],
[178,182,182,176,0,164,178,181,182,167],
[197,188,179,186,177,0,179,171,178,165],
[171,176,161,185,163,162,0,167,168,161],
[169,179,176,181,160,170,174,0,174,175],
[173,166,162,180,159,163,173,167,0,162],
[181,181,182,171,174,176,180,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,142,149,147,153,140,141,137,153],
[192,0,176,186,179,186,164,175,153,173],
[199,165,0,170,172,191,179,166,151,178],
[192,155,171,0,156,177,179,164,155,167],
[194,162,169,185,0,182,176,179,162,178],
[188,155,150,164,159,0,158,163,136,166],
[201,177,162,162,165,183,0,179,171,167],
[200,166,175,177,162,178,162,0,139,170],
[204,188,190,186,179,205,170,202,0,186],
[188,168,163,174,163,175,174,171,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,181,182,166,170,185,179,164],
[163,0,188,188,176,175,201,193,179,167],
[167,153,0,148,154,149,184,165,158,159],
[160,153,193,0,156,150,155,171,156,155],
[159,165,187,185,0,157,181,184,178,157],
[175,166,192,191,184,0,178,198,195,183],
[171,140,157,186,160,163,0,187,173,169],
[156,148,176,170,157,143,154,0,146,150],
[162,162,183,185,163,146,168,195,0,178],
[177,174,182,186,184,158,172,191,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,174,156,154,168,151,177,168,163],
[167,0,174,162,167,176,167,181,178,184],
[167,167,0,161,149,171,161,175,174,165],
[185,179,180,0,161,180,166,187,176,180],
[187,174,192,180,0,185,170,191,180,195],
[173,165,170,161,156,0,159,182,174,178],
[190,174,180,175,171,182,0,194,170,193],
[164,160,166,154,150,159,147,0,152,180],
[173,163,167,165,161,167,171,189,0,167],
[178,157,176,161,146,163,148,161,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,197,147,163,180,161,170,214,193],
[189,0,178,183,132,169,165,137,175,184],
[144,163,0,188,118,148,188,151,184,178],
[194,158,153,0,125,169,164,165,199,198],
[178,209,223,216,0,205,194,167,214,202],
[161,172,193,172,136,0,166,179,186,211],
[180,176,153,177,147,175,0,156,193,190],
[171,204,190,176,174,162,185,0,175,226],
[127,166,157,142,127,155,148,166,0,180],
[148,157,163,143,139,130,151,115,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,148,155,159,142,158,146,131,154],
[189,0,175,171,175,177,168,197,160,177],
[193,166,0,171,173,166,160,166,159,170],
[186,170,170,0,164,125,161,163,175,167],
[182,166,168,177,0,146,167,159,172,166],
[199,164,175,216,195,0,193,195,180,175],
[183,173,181,180,174,148,0,190,139,169],
[195,144,175,178,182,146,151,0,174,179],
[210,181,182,166,169,161,202,167,0,168],
[187,164,171,174,175,166,172,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,188,162,165,163,179,196,167],
[166,0,168,174,165,159,178,175,188,159],
[167,173,0,164,149,172,166,174,182,161],
[153,167,177,0,178,162,176,167,203,158],
[179,176,192,163,0,168,169,188,198,168],
[176,182,169,179,173,0,175,176,182,179],
[178,163,175,165,172,166,0,174,180,169],
[162,166,167,174,153,165,167,0,183,153],
[145,153,159,138,143,159,161,158,0,150],
[174,182,180,183,173,162,172,188,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,182,185,190,173,164,179,178,165],
[194,0,136,181,204,201,190,168,186,156],
[159,205,0,186,202,184,171,165,198,167],
[156,160,155,0,162,163,168,160,149,150],
[151,137,139,179,0,160,165,149,189,153],
[168,140,157,178,181,0,170,146,191,147],
[177,151,170,173,176,171,0,162,166,136],
[162,173,176,181,192,195,179,0,168,182],
[163,155,143,192,152,150,175,173,0,154],
[176,185,174,191,188,194,205,159,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,144,163,149,181,154,154,168,174],
[171,0,157,175,160,167,180,161,174,164],
[197,184,0,167,174,177,172,157,191,188],
[178,166,174,0,175,181,184,164,172,156],
[192,181,167,166,0,183,190,172,177,191],
[160,174,164,160,158,0,161,157,193,168],
[187,161,169,157,151,180,0,153,173,174],
[187,180,184,177,169,184,188,0,187,178],
[173,167,150,169,164,148,168,154,0,161],
[167,177,153,185,150,173,167,163,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,180,161,155,180,173,157,167,181],
[160,0,157,154,151,153,158,149,155,155],
[161,184,0,151,156,168,148,158,172,161],
[180,187,190,0,166,179,159,170,184,178],
[186,190,185,175,0,189,164,175,178,171],
[161,188,173,162,152,0,161,162,160,169],
[168,183,193,182,177,180,0,160,170,181],
[184,192,183,171,166,179,181,0,183,174],
[174,186,169,157,163,181,171,158,0,163],
[160,186,180,163,170,172,160,167,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,213,180,181,163,176,185,199,215],
[168,0,185,173,160,162,163,169,200,209],
[128,156,0,169,152,143,176,162,160,179],
[161,168,172,0,175,192,178,187,190,196],
[160,181,189,166,0,150,193,186,186,201],
[178,179,198,149,191,0,187,163,157,195],
[165,178,165,163,148,154,0,142,184,203],
[156,172,179,154,155,178,199,0,171,199],
[142,141,181,151,155,184,157,170,0,195],
[126,132,162,145,140,146,138,142,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,160,167,165,156,182,176,162,185],
[160,0,158,166,177,147,172,174,163,175],
[181,183,0,176,176,168,178,187,172,190],
[174,175,165,0,171,164,191,175,174,163],
[176,164,165,170,0,173,162,171,160,161],
[185,194,173,177,168,0,183,192,169,184],
[159,169,163,150,179,158,0,151,153,171],
[165,167,154,166,170,149,190,0,160,168],
[179,178,169,167,181,172,188,181,0,189],
[156,166,151,178,180,157,170,173,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,182,172,156,171,218,164,172,184],
[137,0,175,159,141,161,188,128,143,163],
[159,166,0,163,146,193,195,129,140,169],
[169,182,178,0,183,194,199,159,142,199],
[185,200,195,158,0,164,192,163,144,159],
[170,180,148,147,177,0,164,134,162,187],
[123,153,146,142,149,177,0,166,124,166],
[177,213,212,182,178,207,175,0,160,209],
[169,198,201,199,197,179,217,181,0,186],
[157,178,172,142,182,154,175,132,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,172,173,199,155,191,185,230,168],
[177,0,137,159,185,153,159,160,198,162],
[169,204,0,170,177,183,207,161,196,170],
[168,182,171,0,196,160,170,178,174,188],
[142,156,164,145,0,140,171,169,197,170],
[186,188,158,181,201,0,207,187,208,185],
[150,182,134,171,170,134,0,145,188,180],
[156,181,180,163,172,154,196,0,206,185],
[111,143,145,167,144,133,153,135,0,151],
[173,179,171,153,171,156,161,156,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,158,166,177,167,167,163,172,169],
[167,0,176,176,188,179,169,176,170,165],
[183,165,0,158,179,176,167,169,177,173],
[175,165,183,0,188,185,173,168,169,171],
[164,153,162,153,0,162,159,145,166,166],
[174,162,165,156,179,0,157,156,165,179],
[174,172,174,168,182,184,0,176,175,180],
[178,165,172,173,196,185,165,0,181,180],
[169,171,164,172,175,176,166,160,0,174],
[172,176,168,170,175,162,161,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,170,150,163,171,151,164,160,144],
[194,0,190,148,190,186,151,184,175,168],
[171,151,0,149,161,166,162,173,170,168],
[191,193,192,0,197,184,164,177,176,172],
[178,151,180,144,0,167,143,163,152,164],
[170,155,175,157,174,0,171,163,160,158],
[190,190,179,177,198,170,0,184,193,176],
[177,157,168,164,178,178,157,0,168,167],
[181,166,171,165,189,181,148,173,0,169],
[197,173,173,169,177,183,165,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,179,176,157,175,166,166,182,168],
[158,0,183,178,146,155,164,133,154,146],
[162,158,0,180,170,156,190,160,183,169],
[165,163,161,0,149,158,170,153,166,155],
[184,195,171,192,0,163,185,178,189,168],
[166,186,185,183,178,0,190,165,180,155],
[175,177,151,171,156,151,0,143,165,158],
[175,208,181,188,163,176,198,0,183,180],
[159,187,158,175,152,161,176,158,0,172],
[173,195,172,186,173,186,183,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,185,149,153,182,218,184,171,179],
[174,0,144,138,173,181,200,194,168,196],
[156,197,0,197,177,185,207,179,213,201],
[192,203,144,0,171,186,185,179,204,158],
[188,168,164,170,0,173,158,186,173,159],
[159,160,156,155,168,0,171,154,191,171],
[123,141,134,156,183,170,0,181,165,167],
[157,147,162,162,155,187,160,0,140,196],
[170,173,128,137,168,150,176,201,0,173],
[162,145,140,183,182,170,174,145,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,174,172,182,165,156,182,168],
[167,0,166,172,163,166,175,165,167,169],
[162,175,0,178,170,166,167,159,172,163],
[167,169,163,0,155,164,168,161,174,162],
[169,178,171,186,0,181,174,170,173,162],
[159,175,175,177,160,0,161,174,167,161],
[176,166,174,173,167,180,0,168,178,174],
[185,176,182,180,171,167,173,0,163,177],
[159,174,169,167,168,174,163,178,0,163],
[173,172,178,179,179,180,167,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,172,154,150,169,144,148,167],
[181,0,191,197,176,184,202,179,179,166],
[178,150,0,165,131,152,196,177,138,141],
[169,144,176,0,136,155,187,162,151,152],
[187,165,210,205,0,166,207,180,158,158],
[191,157,189,186,175,0,189,200,165,211],
[172,139,145,154,134,152,0,167,143,153],
[197,162,164,179,161,141,174,0,155,165],
[193,162,203,190,183,176,198,186,0,188],
[174,175,200,189,183,130,188,176,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,181,178,162,207,196,167,166],
[164,0,199,187,193,176,193,167,188,196],
[171,142,0,148,170,135,179,178,155,166],
[160,154,193,0,187,167,178,154,158,175],
[163,148,171,154,0,148,176,148,168,163],
[179,165,206,174,193,0,204,176,177,197],
[134,148,162,163,165,137,0,147,145,182],
[145,174,163,187,193,165,194,0,183,177],
[174,153,186,183,173,164,196,158,0,174],
[175,145,175,166,178,144,159,164,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,172,171,162,162,181,173,180],
[162,0,162,162,172,161,156,162,161,151],
[167,179,0,168,182,148,176,175,184,166],
[169,179,173,0,189,174,177,188,173,181],
[170,169,159,152,0,162,168,166,177,170],
[179,180,193,167,179,0,185,180,170,172],
[179,185,165,164,173,156,0,181,163,157],
[160,179,166,153,175,161,160,0,163,162],
[168,180,157,168,164,171,178,178,0,161],
[161,190,175,160,171,169,184,179,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,162,162,166,174,168,174,158,178],
[175,0,163,181,177,173,178,188,170,180],
[179,178,0,170,175,183,180,190,160,187],
[179,160,171,0,175,182,169,173,179,185],
[175,164,166,166,0,167,156,165,161,185],
[167,168,158,159,174,0,169,180,166,164],
[173,163,161,172,185,172,0,182,162,185],
[167,153,151,168,176,161,159,0,165,159],
[183,171,181,162,180,175,179,176,0,173],
[163,161,154,156,156,177,156,182,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,194,175,163,183,173,174,199,187],
[150,0,173,179,162,169,179,146,184,190],
[147,168,0,167,160,182,171,161,180,189],
[166,162,174,0,174,173,165,154,174,169],
[178,179,181,167,0,186,176,172,181,190],
[158,172,159,168,155,0,164,157,180,186],
[168,162,170,176,165,177,0,179,179,179],
[167,195,180,187,169,184,162,0,179,196],
[142,157,161,167,160,161,162,162,0,183],
[154,151,152,172,151,155,162,145,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,166,183,172,168,175,173,175],
[172,0,169,169,170,173,178,168,166,182],
[166,172,0,162,164,153,165,174,155,183],
[175,172,179,0,167,176,175,160,176,174],
[158,171,177,174,0,163,155,152,159,155],
[169,168,188,165,178,0,164,164,160,156],
[173,163,176,166,186,177,0,173,160,164],
[166,173,167,181,189,177,168,0,154,175],
[168,175,186,165,182,181,181,187,0,179],
[166,159,158,167,186,185,177,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,178,173,178,162,173,179,174,165],
[167,0,166,166,176,174,167,172,154,163],
[163,175,0,165,174,175,165,158,159,173],
[168,175,176,0,184,177,170,177,172,174],
[163,165,167,157,0,163,166,154,159,163],
[179,167,166,164,178,0,174,185,168,169],
[168,174,176,171,175,167,0,167,175,170],
[162,169,183,164,187,156,174,0,165,178],
[167,187,182,169,182,173,166,176,0,178],
[176,178,168,167,178,172,171,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,170,185,84,257,169,170,188,118],
[136,0,188,134,84,223,168,118,185,135],
[171,153,0,167,172,204,219,220,185,169],
[156,207,174,0,105,244,170,171,154,172],
[257,257,169,236,0,241,237,239,237,186],
[84,118,137,97,100,0,148,115,167,114],
[172,173,122,171,104,193,0,153,170,156],
[171,223,121,170,102,226,188,0,167,123],
[153,156,156,187,104,174,171,174,0,172],
[223,206,172,169,155,227,185,218,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,145,115,172,113,173,257,144,256],
[228,0,145,115,116,172,172,284,172,227],
[196,196,0,140,226,197,172,313,227,226],
[226,226,201,0,170,226,199,341,230,314],
[169,225,115,171,0,169,113,341,198,227],
[228,169,144,115,172,0,200,284,257,227],
[168,169,169,142,228,141,0,228,200,227],
[84,57,28,0,0,57,113,0,56,170],
[197,169,114,111,143,84,141,285,0,200],
[85,114,115,27,114,114,114,171,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,145,156,176,168,181,155,149,135],
[186,0,164,187,179,146,185,199,160,151],
[196,177,0,165,183,177,179,185,178,171],
[185,154,176,0,168,169,176,180,162,159],
[165,162,158,173,0,166,180,184,182,142],
[173,195,164,172,175,0,191,176,184,169],
[160,156,162,165,161,150,0,159,154,134],
[186,142,156,161,157,165,182,0,171,131],
[192,181,163,179,159,157,187,170,0,151],
[206,190,170,182,199,172,207,210,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,175,180,162,162,185,157,183],
[167,0,168,158,172,187,165,166,140,176],
[162,173,0,159,178,160,163,155,161,174],
[166,183,182,0,186,171,153,162,156,185],
[161,169,163,155,0,162,152,158,159,168],
[179,154,181,170,179,0,156,156,156,187],
[179,176,178,188,189,185,0,168,173,188],
[156,175,186,179,183,185,173,0,171,184],
[184,201,180,185,182,185,168,170,0,181],
[158,165,167,156,173,154,153,157,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,158,183,184,186,170,173,174,174],
[165,0,167,166,177,178,169,164,180,169],
[183,174,0,184,169,176,173,157,183,176],
[158,175,157,0,169,171,165,158,156,162],
[157,164,172,172,0,182,164,167,183,170],
[155,163,165,170,159,0,153,150,175,157],
[171,172,168,176,177,188,0,170,182,161],
[168,177,184,183,174,191,171,0,185,180],
[167,161,158,185,158,166,159,156,0,167],
[167,172,165,179,171,184,180,161,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,171,218,217,216,194,170,218,266],
[98,0,121,143,242,167,169,95,193,194],
[170,220,0,144,195,242,96,120,218,192],
[123,198,197,0,195,220,148,122,171,172],
[124,99,146,146,0,193,171,122,172,170],
[125,174,99,121,148,0,148,99,147,196],
[147,172,245,193,170,193,0,193,195,219],
[171,246,221,219,219,242,148,0,193,220],
[123,148,123,170,169,194,146,148,0,147],
[75,147,149,169,171,145,122,121,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,197,182,189,190,165,187,227,137],
[129,0,134,171,154,141,137,160,166,126],
[144,207,0,158,172,168,173,196,183,161],
[159,170,183,0,185,168,150,185,225,147],
[152,187,169,156,0,166,209,172,203,171],
[151,200,173,173,175,0,174,211,174,169],
[176,204,168,191,132,167,0,178,203,160],
[154,181,145,156,169,130,163,0,180,155],
[114,175,158,116,138,167,138,161,0,129],
[204,215,180,194,170,172,181,186,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,142,184,165,142,163,191,158,157],
[175,0,202,197,168,176,181,188,176,161],
[199,139,0,185,164,159,165,160,160,135],
[157,144,156,0,148,164,160,178,161,140],
[176,173,177,193,0,163,189,194,165,127],
[199,165,182,177,178,0,181,189,180,174],
[178,160,176,181,152,160,0,182,166,148],
[150,153,181,163,147,152,159,0,156,137],
[183,165,181,180,176,161,175,185,0,156],
[184,180,206,201,214,167,193,204,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,186,179,188,178,174,179,175,193],
[175,0,149,170,176,171,172,160,168,180],
[155,192,0,187,160,154,181,168,176,167],
[162,171,154,0,184,192,187,144,182,195],
[153,165,181,157,0,147,167,156,177,180],
[163,170,187,149,194,0,167,160,159,203],
[167,169,160,154,174,174,0,161,167,162],
[162,181,173,197,185,181,180,0,184,177],
[166,173,165,159,164,182,174,157,0,171],
[148,161,174,146,161,138,179,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,168,181,159,159,163,160,147,128],
[197,0,181,201,193,180,200,175,179,158],
[173,160,0,187,172,160,183,145,181,141],
[160,140,154,0,141,164,173,115,157,136],
[182,148,169,200,0,168,186,150,148,137],
[182,161,181,177,173,0,166,154,156,139],
[178,141,158,168,155,175,0,140,168,119],
[181,166,196,226,191,187,201,0,193,183],
[194,162,160,184,193,185,173,148,0,146],
[213,183,200,205,204,202,222,158,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,166,146,155,164,151,165,173,167],
[191,0,173,177,180,175,173,170,175,175],
[175,168,0,162,156,197,187,192,192,174],
[195,164,179,0,177,190,181,181,178,175],
[186,161,185,164,0,188,185,154,180,168],
[177,166,144,151,153,0,159,157,161,162],
[190,168,154,160,156,182,0,169,186,177],
[176,171,149,160,187,184,172,0,172,153],
[168,166,149,163,161,180,155,169,0,144],
[174,166,167,166,173,179,164,188,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,167,175,166,185,175,171,181],
[173,0,174,176,183,182,197,175,167,172],
[171,167,0,163,175,170,171,183,169,176],
[174,165,178,0,172,169,193,175,174,163],
[166,158,166,169,0,176,185,184,183,155],
[175,159,171,172,165,0,190,178,173,159],
[156,144,170,148,156,151,0,140,159,162],
[166,166,158,166,157,163,201,0,173,165],
[170,174,172,167,158,168,182,168,0,168],
[160,169,165,178,186,182,179,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,163,156,174,168,159,165,149,168],
[190,0,171,173,176,171,180,180,159,162],
[178,170,0,170,174,163,181,175,155,164],
[185,168,171,0,190,175,162,172,165,178],
[167,165,167,151,0,153,167,159,154,162],
[173,170,178,166,188,0,175,169,166,172],
[182,161,160,179,174,166,0,173,163,175],
[176,161,166,169,182,172,168,0,173,188],
[192,182,186,176,187,175,178,168,0,172],
[173,179,177,163,179,169,166,153,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,179,171,162,183,171,150,180,172],
[166,0,157,158,145,177,169,152,163,160],
[162,184,0,185,183,188,176,167,184,193],
[170,183,156,0,167,177,156,161,173,172],
[179,196,158,174,0,180,186,168,177,174],
[158,164,153,164,161,0,156,148,176,161],
[170,172,165,185,155,185,0,168,174,175],
[191,189,174,180,173,193,173,0,184,165],
[161,178,157,168,164,165,167,157,0,167],
[169,181,148,169,167,180,166,176,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,162,148,148,155,169,169,165],
[171,0,175,167,170,173,173,165,180,164],
[161,166,0,158,162,168,152,168,155,168],
[179,174,183,0,173,176,153,173,187,165],
[193,171,179,168,0,171,168,174,178,165],
[193,168,173,165,170,0,154,169,174,159],
[186,168,189,188,173,187,0,189,180,172],
[172,176,173,168,167,172,152,0,163,171],
[172,161,186,154,163,167,161,178,0,169],
[176,177,173,176,176,182,169,170,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,179,197,155,187,191,144,159,173],
[189,0,165,174,166,196,170,176,166,132],
[162,176,0,185,175,209,192,153,174,161],
[144,167,156,0,156,170,200,124,173,140],
[186,175,166,185,0,207,168,148,167,161],
[154,145,132,171,134,0,120,118,140,115],
[150,171,149,141,173,221,0,150,150,158],
[197,165,188,217,193,223,191,0,209,158],
[182,175,167,168,174,201,191,132,0,138],
[168,209,180,201,180,226,183,183,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,208,157,226,157,189,188,218,158],
[177,0,224,190,192,192,191,174,208,145],
[133,117,0,115,145,132,173,130,143,116],
[184,151,226,0,212,186,236,226,225,195],
[115,149,196,129,0,158,176,189,175,116],
[184,149,209,155,183,0,174,191,252,191],
[152,150,168,105,165,167,0,136,178,136],
[153,167,211,115,152,150,205,0,179,122],
[123,133,198,116,166,89,163,162,0,131],
[183,196,225,146,225,150,205,219,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,186,143,89,124,144,120,149,109],
[192,0,163,194,163,156,153,122,165,141],
[155,178,0,178,123,149,143,95,157,113],
[198,147,163,0,150,134,166,149,156,190],
[252,178,218,191,0,145,186,196,215,194],
[217,185,192,207,196,0,194,161,211,177],
[197,188,198,175,155,147,0,157,182,139],
[221,219,246,192,145,180,184,0,170,153],
[192,176,184,185,126,130,159,171,0,150],
[232,200,228,151,147,164,202,188,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,155,178,168,201,187,198,199,221],
[155,0,180,156,161,199,182,197,157,220],
[186,161,0,176,159,208,192,201,189,223],
[163,185,165,0,159,198,187,190,182,197],
[173,180,182,182,0,204,198,195,170,209],
[140,142,133,143,137,0,168,168,155,169],
[154,159,149,154,143,173,0,173,153,206],
[143,144,140,151,146,173,168,0,165,165],
[142,184,152,159,171,186,188,176,0,187],
[120,121,118,144,132,172,135,176,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,185,159,161,170,194,165,159],
[171,0,154,175,169,166,188,184,174,162],
[168,187,0,212,171,181,171,195,176,179],
[156,166,129,0,169,151,168,153,149,157],
[182,172,170,172,0,171,176,192,175,172],
[180,175,160,190,170,0,184,199,179,194],
[171,153,170,173,165,157,0,194,172,161],
[147,157,146,188,149,142,147,0,172,150],
[176,167,165,192,166,162,169,169,0,158],
[182,179,162,184,169,147,180,191,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,152,156,159,152,156,144,145,146],
[190,0,182,171,166,164,182,157,164,166],
[189,159,0,165,174,174,147,158,165,148],
[185,170,176,0,187,174,183,178,186,172],
[182,175,167,154,0,169,172,169,156,171],
[189,177,167,167,172,0,167,159,161,167],
[185,159,194,158,169,174,0,169,176,167],
[197,184,183,163,172,182,172,0,164,172],
[196,177,176,155,185,180,165,177,0,165],
[195,175,193,169,170,174,174,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,163,170,163,185,172,176,167,166],
[163,0,145,153,159,159,158,152,151,155],
[178,196,0,169,175,167,192,180,183,186],
[171,188,172,0,163,175,179,173,175,178],
[178,182,166,178,0,180,182,176,185,167],
[156,182,174,166,161,0,175,161,173,170],
[169,183,149,162,159,166,0,170,171,164],
[165,189,161,168,165,180,171,0,174,168],
[174,190,158,166,156,168,170,167,0,184],
[175,186,155,163,174,171,177,173,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,164,173,161,172,172,156,161,158],
[171,0,156,170,169,162,179,167,158,166],
[177,185,0,180,180,190,181,177,168,173],
[168,171,161,0,162,175,164,160,170,154],
[180,172,161,179,0,191,165,175,174,168],
[169,179,151,166,150,0,163,151,159,149],
[169,162,160,177,176,178,0,173,166,165],
[185,174,164,181,166,190,168,0,163,169],
[180,183,173,171,167,182,175,178,0,163],
[183,175,168,187,173,192,176,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,184,184,157,172,146,160,224,158],
[185,0,209,158,196,238,187,201,213,183],
[157,132,0,186,184,195,200,200,200,159],
[157,183,155,0,157,182,147,197,222,186],
[184,145,157,184,0,187,173,228,215,174],
[169,103,146,159,154,0,173,162,237,160],
[195,154,141,194,168,168,0,155,208,196],
[181,140,141,144,113,179,186,0,234,119],
[117,128,141,119,126,104,133,107,0,93],
[183,158,182,155,167,181,145,222,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,183,153,176,175,185,196,197,147],
[181,0,176,174,185,172,189,169,195,158],
[158,165,0,162,163,199,168,159,160,162],
[188,167,179,0,179,200,181,191,155,162],
[165,156,178,162,0,191,169,167,163,166],
[166,169,142,141,150,0,156,181,178,142],
[156,152,173,160,172,185,0,174,180,173],
[145,172,182,150,174,160,167,0,188,128],
[144,146,181,186,178,163,161,153,0,129],
[194,183,179,179,175,199,168,213,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,175,152,165,158,157,161,156],
[174,0,186,175,166,170,165,145,168,165],
[174,155,0,163,162,158,158,138,172,159],
[166,166,178,0,160,169,154,162,172,156],
[189,175,179,181,0,183,175,167,184,173],
[176,171,183,172,158,0,147,160,160,170],
[183,176,183,187,166,194,0,178,177,184],
[184,196,203,179,174,181,163,0,193,188],
[180,173,169,169,157,181,164,148,0,171],
[185,176,182,185,168,171,157,153,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,167,169,146,164,154,157,161],
[179,0,194,188,204,188,190,161,169,189],
[172,147,0,155,168,154,186,144,146,167],
[174,153,186,0,168,177,174,167,177,164],
[172,137,173,173,0,179,172,150,153,164],
[195,153,187,164,162,0,165,165,158,168],
[177,151,155,167,169,176,0,173,152,165],
[187,180,197,174,191,176,168,0,162,163],
[184,172,195,164,188,183,189,179,0,180],
[180,152,174,177,177,173,176,178,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,160,192,155,179,171,167,183,188],
[155,0,164,204,154,174,168,167,186,189],
[181,177,0,196,158,176,169,182,196,175],
[149,137,145,0,146,165,142,163,150,180],
[186,187,183,195,0,164,173,188,178,200],
[162,167,165,176,177,0,165,178,147,188],
[170,173,172,199,168,176,0,157,169,207],
[174,174,159,178,153,163,184,0,154,173],
[158,155,145,191,163,194,172,187,0,201],
[153,152,166,161,141,153,134,168,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,200,167,199,190,191,185,181,173],
[146,0,168,166,167,168,175,174,171,138],
[141,173,0,159,168,171,175,190,178,150],
[174,175,182,0,186,187,199,196,181,155],
[142,174,173,155,0,171,160,175,184,149],
[151,173,170,154,170,0,184,177,162,135],
[150,166,166,142,181,157,0,193,190,148],
[156,167,151,145,166,164,148,0,151,155],
[160,170,163,160,157,179,151,190,0,146],
[168,203,191,186,192,206,193,186,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,147,162,165,171,165,170,160,150],
[200,0,149,177,184,180,173,182,194,187],
[194,192,0,194,184,192,170,204,175,188],
[179,164,147,0,175,181,179,175,173,160],
[176,157,157,166,0,169,166,172,167,164],
[170,161,149,160,172,0,171,185,176,161],
[176,168,171,162,175,170,0,188,177,175],
[171,159,137,166,169,156,153,0,151,155],
[181,147,166,168,174,165,164,190,0,172],
[191,154,153,181,177,180,166,186,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,177,177,166,172,178,168,174],
[167,0,176,165,169,161,161,174,173,180],
[162,165,0,165,159,168,152,182,174,173],
[164,176,176,0,168,168,170,176,153,177],
[164,172,182,173,0,160,162,169,174,178],
[175,180,173,173,181,0,152,172,173,182],
[169,180,189,171,179,189,0,190,179,178],
[163,167,159,165,172,169,151,0,166,165],
[173,168,167,188,167,168,162,175,0,180],
[167,161,168,164,163,159,163,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,158,152,131,106,186,141,188],
[165,0,155,167,142,165,163,201,154,201],
[175,186,0,200,139,178,118,185,163,141],
[183,174,141,0,171,139,103,183,177,188],
[189,199,202,170,0,154,154,187,168,191],
[210,176,163,202,187,0,175,183,200,151],
[235,178,223,238,187,166,0,224,202,201],
[155,140,156,158,154,158,117,0,146,130],
[200,187,178,164,173,141,139,195,0,188],
[153,140,200,153,150,190,140,211,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,169,169,257,170,142,113,112,114],
[254,0,284,170,255,227,284,226,199,200],
[172,57,0,140,201,112,171,144,140,85],
[172,171,201,0,201,171,228,171,170,174],
[84,86,140,140,0,112,84,141,111,57],
[171,114,229,170,229,0,200,143,170,143],
[199,57,170,113,257,141,0,141,111,113],
[228,115,197,170,200,198,200,0,197,172],
[229,142,201,171,230,171,230,144,0,229],
[227,141,256,167,284,198,228,169,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,152,167,158,170,171,140,155,195],
[220,0,177,188,169,177,203,175,172,204],
[189,164,0,200,164,185,201,153,167,184],
[174,153,141,0,150,162,172,154,148,186],
[183,172,177,191,0,164,163,132,177,190],
[171,164,156,179,177,0,175,133,159,194],
[170,138,140,169,178,166,0,146,180,172],
[201,166,188,187,209,208,195,0,177,213],
[186,169,174,193,164,182,161,164,0,197],
[146,137,157,155,151,147,169,128,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,227,113,0,114,114,113,114,114],
[341,0,341,227,228,228,341,113,114,228],
[114,0,0,0,0,114,114,113,114,114],
[228,114,341,0,228,228,228,227,228,228],
[341,113,341,113,0,228,341,113,227,227],
[227,113,227,113,113,0,227,113,227,113],
[227,0,227,113,0,114,0,113,114,114],
[228,228,228,114,228,228,228,0,228,228],
[227,227,227,113,114,114,227,113,0,227],
[227,113,227,113,114,228,227,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,189,186,150,175,168,175,188,172],
[162,0,195,161,167,150,182,168,172,168],
[152,146,0,164,166,148,177,158,163,158],
[155,180,177,0,173,159,170,162,175,182],
[191,174,175,168,0,161,169,181,179,186],
[166,191,193,182,180,0,185,190,195,187],
[173,159,164,171,172,156,0,162,179,175],
[166,173,183,179,160,151,179,0,179,158],
[153,169,178,166,162,146,162,162,0,160],
[169,173,183,159,155,154,166,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,185,153,143,166,163,166,156,141],
[173,0,182,169,175,177,172,167,171,150],
[156,159,0,151,169,174,160,151,157,147],
[188,172,190,0,164,184,186,170,172,150],
[198,166,172,177,0,182,169,165,181,178],
[175,164,167,157,159,0,169,168,170,176],
[178,169,181,155,172,172,0,158,164,159],
[175,174,190,171,176,173,183,0,170,169],
[185,170,184,169,160,171,177,171,0,163],
[200,191,194,191,163,165,182,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,175,163,167,167,150,180,157],
[176,0,177,183,177,172,183,175,188,165],
[172,164,0,173,158,174,158,157,178,175],
[166,158,168,0,166,163,174,152,172,153],
[178,164,183,175,0,181,167,158,203,160],
[174,169,167,178,160,0,153,149,194,162],
[174,158,183,167,174,188,0,162,197,160],
[191,166,184,189,183,192,179,0,195,165],
[161,153,163,169,138,147,144,146,0,141],
[184,176,166,188,181,179,181,176,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,177,185,154,164,160,154,199,171],
[180,0,167,170,158,160,172,153,183,175],
[164,174,0,159,148,166,160,151,181,174],
[156,171,182,0,146,172,159,143,172,174],
[187,183,193,195,0,182,164,167,194,188],
[177,181,175,169,159,0,165,155,182,176],
[181,169,181,182,177,176,0,178,190,191],
[187,188,190,198,174,186,163,0,201,189],
[142,158,160,169,147,159,151,140,0,158],
[170,166,167,167,153,165,150,152,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,171,179,219,171,184,193,219,164],
[142,0,137,171,177,156,158,166,192,157],
[170,204,0,214,225,192,175,196,209,173],
[162,170,127,0,191,162,169,172,214,146],
[122,164,116,150,0,143,164,160,204,166],
[170,185,149,179,198,0,158,159,221,152],
[157,183,166,172,177,183,0,190,171,198],
[148,175,145,169,181,182,151,0,176,151],
[122,149,132,127,137,120,170,165,0,159],
[177,184,168,195,175,189,143,190,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,180,188,205,220,184,186,173,209],
[184,0,212,214,165,239,198,158,138,186],
[161,129,0,150,181,182,198,154,142,169],
[153,127,191,0,166,226,202,133,113,157],
[136,176,160,175,0,233,176,180,177,155],
[121,102,159,115,108,0,116,121,99,120],
[157,143,143,139,165,225,0,164,163,160],
[155,183,187,208,161,220,177,0,151,170],
[168,203,199,228,164,242,178,190,0,205],
[132,155,172,184,186,221,181,171,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,153,131,79,86,167,130,133,155],
[213,0,213,169,134,200,208,194,196,220],
[188,128,0,131,132,129,198,140,159,210],
[210,172,210,0,177,169,233,184,200,234],
[262,207,209,164,0,192,205,204,221,273],
[255,141,212,172,149,0,227,188,162,235],
[174,133,143,108,136,114,0,144,108,185],
[211,147,201,157,137,153,197,0,149,235],
[208,145,182,141,120,179,233,192,0,208],
[186,121,131,107,68,106,156,106,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,148,180,181,183,167,169,185,156],
[168,0,165,170,179,171,162,169,193,164],
[193,176,0,180,186,172,168,172,180,165],
[161,171,161,0,161,150,162,165,171,167],
[160,162,155,180,0,154,176,156,184,167],
[158,170,169,191,187,0,168,177,195,159],
[174,179,173,179,165,173,0,172,180,174],
[172,172,169,176,185,164,169,0,182,164],
[156,148,161,170,157,146,161,159,0,164],
[185,177,176,174,174,182,167,177,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,181,172,174,178,172,171,171,169],
[159,0,165,159,169,169,159,165,164,165],
[160,176,0,159,172,181,183,178,169,178],
[169,182,182,0,179,187,201,185,170,175],
[167,172,169,162,0,186,184,176,170,168],
[163,172,160,154,155,0,167,155,152,151],
[169,182,158,140,157,174,0,177,154,154],
[170,176,163,156,165,186,164,0,167,167],
[170,177,172,171,171,189,187,174,0,181],
[172,176,163,166,173,190,187,174,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,168,161,163,163,167,166,169,173],
[153,0,156,171,149,144,177,149,139,149],
[173,185,0,186,185,147,180,173,157,162],
[180,170,155,0,162,156,140,170,161,163],
[178,192,156,179,0,184,172,189,165,172],
[178,197,194,185,157,0,184,188,180,167],
[174,164,161,201,169,157,0,163,162,160],
[175,192,168,171,152,153,178,0,165,178],
[172,202,184,180,176,161,179,176,0,172],
[168,192,179,178,169,174,181,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,163,184,150,170,171,164,161],
[177,0,160,182,192,154,182,174,147,166],
[178,181,0,189,180,163,178,178,176,173],
[178,159,152,0,179,167,185,168,159,168],
[157,149,161,162,0,142,156,164,147,155],
[191,187,178,174,199,0,179,184,168,158],
[171,159,163,156,185,162,0,173,161,160],
[170,167,163,173,177,157,168,0,148,164],
[177,194,165,182,194,173,180,193,0,189],
[180,175,168,173,186,183,181,177,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,151,147,165,168,153,166,178,155],
[159,0,151,144,159,158,152,166,163,155],
[190,190,0,156,190,180,177,167,178,186],
[194,197,185,0,190,173,169,182,176,188],
[176,182,151,151,0,162,153,177,159,176],
[173,183,161,168,179,0,159,157,167,154],
[188,189,164,172,188,182,0,181,181,166],
[175,175,174,159,164,184,160,0,171,175],
[163,178,163,165,182,174,160,170,0,173],
[186,186,155,153,165,187,175,166,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,147,176,160,145,157,124,137,199],
[215,0,207,200,193,174,203,169,178,205],
[194,134,0,196,160,157,169,149,147,181],
[165,141,145,0,168,173,153,144,154,177],
[181,148,181,173,0,189,167,175,148,208],
[196,167,184,168,152,0,194,159,149,203],
[184,138,172,188,174,147,0,162,183,183],
[217,172,192,197,166,182,179,0,171,219],
[204,163,194,187,193,192,158,170,0,195],
[142,136,160,164,133,138,158,122,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,115,172,207,155,193,210,181,192],
[187,0,118,197,208,183,181,185,170,158],
[226,223,0,200,249,184,221,265,236,144],
[169,144,141,0,142,210,183,200,168,129],
[134,133,92,199,0,156,159,175,185,147],
[186,158,157,131,185,0,142,185,198,183],
[148,160,120,158,182,199,0,158,170,196],
[131,156,76,141,166,156,183,0,167,139],
[160,171,105,173,156,143,171,174,0,133],
[149,183,197,212,194,158,145,202,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,151,162,142,159,139,160,141,155],
[170,0,154,165,142,154,145,152,135,154],
[190,187,0,174,168,171,151,186,164,154],
[179,176,167,0,163,167,156,178,160,163],
[199,199,173,178,0,187,165,180,181,169],
[182,187,170,174,154,0,142,172,164,163],
[202,196,190,185,176,199,0,190,164,157],
[181,189,155,163,161,169,151,0,168,163],
[200,206,177,181,160,177,177,173,0,179],
[186,187,187,178,172,178,184,178,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,166,169,160,169,163,163,169,159],
[176,0,175,182,169,182,169,166,168,158],
[175,166,0,173,172,187,165,176,175,161],
[172,159,168,0,155,182,164,160,161,156],
[181,172,169,186,0,174,181,165,164,160],
[172,159,154,159,167,0,164,156,158,160],
[178,172,176,177,160,177,0,173,157,174],
[178,175,165,181,176,185,168,0,166,155],
[172,173,166,180,177,183,184,175,0,155],
[182,183,180,185,181,181,167,186,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,158,164,162,190,170,173,172],
[162,0,171,160,156,180,168,159,161,169],
[174,170,0,189,178,175,182,164,182,193],
[183,181,152,0,189,179,160,167,178,181],
[177,185,163,152,0,178,173,164,174,156],
[179,161,166,162,163,0,169,172,175,165],
[151,173,159,181,168,172,0,169,164,175],
[171,182,177,174,177,169,172,0,172,163],
[168,180,159,163,167,166,177,169,0,176],
[169,172,148,160,185,176,166,178,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,229,189,190,266,266,264,303,152],
[151,0,228,114,115,153,189,227,228,153],
[112,113,0,76,39,76,113,74,150,114],
[152,227,265,0,114,190,188,227,190,188],
[151,226,302,227,0,189,150,187,304,227],
[75,188,265,151,152,0,151,149,228,153],
[75,152,228,153,191,190,0,188,228,114],
[77,114,267,114,154,192,153,0,267,153],
[38,113,191,151,37,113,113,74,0,114],
[189,188,227,153,114,188,227,188,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,156,156,157,155,166,173,165,175],
[176,0,162,177,171,160,166,165,172,179],
[185,179,0,169,175,171,177,178,180,182],
[185,164,172,0,151,156,166,168,172,164],
[184,170,166,190,0,169,170,184,188,190],
[186,181,170,185,172,0,169,178,171,186],
[175,175,164,175,171,172,0,178,163,171],
[168,176,163,173,157,163,163,0,161,174],
[176,169,161,169,153,170,178,180,0,181],
[166,162,159,177,151,155,170,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,167,177,180,176,176,166,192],
[169,0,153,155,136,158,155,160,168,185],
[174,188,0,167,163,173,177,169,178,179],
[174,186,174,0,161,187,181,182,173,173],
[164,205,178,180,0,187,177,194,187,179],
[161,183,168,154,154,0,150,149,155,183],
[165,186,164,160,164,191,0,178,178,167],
[165,181,172,159,147,192,163,0,182,174],
[175,173,163,168,154,186,163,159,0,179],
[149,156,162,168,162,158,174,167,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,142,184,154,148,190,163,181],
[161,0,147,132,189,140,168,167,154,162],
[173,194,0,190,205,167,167,186,163,179],
[199,209,151,0,200,176,167,193,184,198],
[157,152,136,141,0,128,134,159,155,171],
[187,201,174,165,213,0,180,202,176,186],
[193,173,174,174,207,161,0,213,172,186],
[151,174,155,148,182,139,128,0,153,167],
[178,187,178,157,186,165,169,188,0,205],
[160,179,162,143,170,155,155,174,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,179,184,181,169,176,179,165],
[178,0,181,185,191,191,164,185,176,168],
[162,160,0,171,173,167,156,168,154,152],
[162,156,170,0,172,172,161,163,165,147],
[157,150,168,169,0,169,163,160,157,151],
[160,150,174,169,172,0,157,185,163,156],
[172,177,185,180,178,184,0,179,168,163],
[165,156,173,178,181,156,162,0,169,166],
[162,165,187,176,184,178,173,172,0,171],
[176,173,189,194,190,185,178,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,194,180,170,182,187,191,207,191],
[164,0,185,162,168,156,174,168,207,164],
[147,156,0,160,171,151,190,170,180,180],
[161,179,181,0,174,160,178,174,198,171],
[171,173,170,167,0,170,171,178,191,171],
[159,185,190,181,171,0,164,164,183,183],
[154,167,151,163,170,177,0,163,195,171],
[150,173,171,167,163,177,178,0,196,192],
[134,134,161,143,150,158,146,145,0,160],
[150,177,161,170,170,158,170,149,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,187,176,157,184,205,161,190,175],
[160,0,201,216,193,217,232,192,210,170],
[154,140,0,139,164,155,151,168,168,144],
[165,125,202,0,180,155,191,149,176,179],
[184,148,177,161,0,200,150,127,133,148],
[157,124,186,186,141,0,155,125,174,164],
[136,109,190,150,191,186,0,142,187,135],
[180,149,173,192,214,216,199,0,184,147],
[151,131,173,165,208,167,154,157,0,137],
[166,171,197,162,193,177,206,194,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,186,162,160,164,179,172,165],
[175,0,178,172,159,161,156,161,171,164],
[169,163,0,166,151,165,154,165,167,161],
[155,169,175,0,146,157,141,167,163,155],
[179,182,190,195,0,174,168,182,193,190],
[181,180,176,184,167,0,165,175,199,170],
[177,185,187,200,173,176,0,180,188,170],
[162,180,176,174,159,166,161,0,177,169],
[169,170,174,178,148,142,153,164,0,152],
[176,177,180,186,151,171,171,172,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,155,142,137,153,177,147,141,182],
[200,0,169,142,186,200,193,159,170,181],
[186,172,0,153,179,158,170,154,175,178],
[199,199,188,0,192,192,205,163,173,191],
[204,155,162,149,0,194,180,160,156,192],
[188,141,183,149,147,0,194,162,163,186],
[164,148,171,136,161,147,0,147,144,182],
[194,182,187,178,181,179,194,0,148,184],
[200,171,166,168,185,178,197,193,0,199],
[159,160,163,150,149,155,159,157,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,176,177,174,172,203,166,172,166],
[154,0,168,173,167,200,181,169,158,158],
[165,173,0,195,187,191,185,167,166,169],
[164,168,146,0,161,173,185,183,154,169],
[167,174,154,180,0,184,172,169,162,171],
[169,141,150,168,157,0,167,163,133,158],
[138,160,156,156,169,174,0,177,163,156],
[175,172,174,158,172,178,164,0,165,182],
[169,183,175,187,179,208,178,176,0,183],
[175,183,172,172,170,183,185,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,179,178,183,202,175,201,187],
[161,0,185,173,180,175,196,150,169,176],
[171,156,0,163,176,184,181,169,178,171],
[162,168,178,0,174,188,198,171,176,184],
[163,161,165,167,0,168,188,161,172,184],
[158,166,157,153,173,0,189,175,186,176],
[139,145,160,143,153,152,0,164,180,175],
[166,191,172,170,180,166,177,0,182,184],
[140,172,163,165,169,155,161,159,0,180],
[154,165,170,157,157,165,166,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,177,175,223,163,155,140,161,180],
[198,0,190,179,196,152,177,184,184,185],
[164,151,0,157,178,125,159,156,170,136],
[166,162,184,0,172,173,163,148,180,193],
[118,145,163,169,0,138,113,121,128,148],
[178,189,216,168,203,0,155,154,172,185],
[186,164,182,178,228,186,0,138,174,170],
[201,157,185,193,220,187,203,0,176,194],
[180,157,171,161,213,169,167,165,0,174],
[161,156,205,148,193,156,171,147,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,177,168,192,180,178,174,183,172],
[137,0,159,155,164,142,162,152,142,142],
[164,182,0,162,186,164,173,177,180,164],
[173,186,179,0,184,173,177,157,179,168],
[149,177,155,157,0,156,154,164,149,158],
[161,199,177,168,185,0,187,175,193,176],
[163,179,168,164,187,154,0,178,185,161],
[167,189,164,184,177,166,163,0,165,167],
[158,199,161,162,192,148,156,176,0,174],
[169,199,177,173,183,165,180,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,162,172,163,173,174,166,179],
[161,0,156,164,174,151,171,180,161,179],
[166,185,0,181,187,171,177,182,160,201],
[179,177,160,0,182,159,182,177,171,186],
[169,167,154,159,0,142,166,170,156,178],
[178,190,170,182,199,0,181,190,179,191],
[168,170,164,159,175,160,0,175,163,177],
[167,161,159,164,171,151,166,0,144,175],
[175,180,181,170,185,162,178,197,0,185],
[162,162,140,155,163,150,164,166,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,189,176,180,178,171,171,197,180],
[172,0,182,173,178,178,172,170,194,179],
[152,159,0,161,158,173,157,162,183,165],
[165,168,180,0,183,186,165,173,191,186],
[161,163,183,158,0,170,161,175,182,173],
[163,163,168,155,171,0,163,168,193,187],
[170,169,184,176,180,178,0,174,194,182],
[170,171,179,168,166,173,167,0,189,179],
[144,147,158,150,159,148,147,152,0,150],
[161,162,176,155,168,154,159,162,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,169,195,162,166,164,171,180,176],
[191,0,173,188,177,186,175,168,175,176],
[172,168,0,199,162,155,152,152,167,163],
[146,153,142,0,146,143,147,158,155,145],
[179,164,179,195,0,157,152,183,173,165],
[175,155,186,198,184,0,166,186,180,182],
[177,166,189,194,189,175,0,173,180,186],
[170,173,189,183,158,155,168,0,162,168],
[161,166,174,186,168,161,161,179,0,174],
[165,165,178,196,176,159,155,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,159,143,135,131,141,155,106,136],
[222,0,182,204,179,168,193,198,170,170],
[182,159,0,205,157,142,166,210,158,150],
[198,137,136,0,108,94,109,186,141,108],
[206,162,184,233,0,136,203,221,149,181],
[210,173,199,247,205,0,233,237,195,156],
[200,148,175,232,138,108,0,180,128,130],
[186,143,131,155,120,104,161,0,133,115],
[235,171,183,200,192,146,213,208,0,186],
[205,171,191,233,160,185,211,226,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,154,170,160,154,157,168,152,176],
[194,0,175,192,190,166,181,199,162,180],
[187,166,0,180,170,189,184,168,169,171],
[171,149,161,0,154,163,156,167,165,163],
[181,151,171,187,0,173,177,162,162,162],
[187,175,152,178,168,0,176,196,172,166],
[184,160,157,185,164,165,0,188,176,179],
[173,142,173,174,179,145,153,0,156,182],
[189,179,172,176,179,169,165,185,0,162],
[165,161,170,178,179,175,162,159,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,173,165,176,152,172,153,158],
[177,0,164,185,177,172,164,161,171,177],
[177,177,0,190,182,183,173,163,157,182],
[168,156,151,0,156,167,159,168,161,170],
[176,164,159,185,0,169,166,155,163,179],
[165,169,158,174,172,0,165,172,165,177],
[189,177,168,182,175,176,0,178,173,181],
[169,180,178,173,186,169,163,0,175,165],
[188,170,184,180,178,176,168,166,0,172],
[183,164,159,171,162,164,160,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,154,181,189,140,180,170,169,171],
[181,0,179,187,194,164,183,190,204,214],
[187,162,0,181,198,156,146,161,159,192],
[160,154,160,0,176,146,151,169,150,158],
[152,147,143,165,0,183,157,177,156,164],
[201,177,185,195,158,0,194,168,190,171],
[161,158,195,190,184,147,0,155,156,185],
[171,151,180,172,164,173,186,0,179,173],
[172,137,182,191,185,151,185,162,0,203],
[170,127,149,183,177,170,156,168,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,177,164,178,157,174,169,178,175],
[187,0,171,170,176,161,169,173,175,183],
[164,170,0,178,185,169,177,160,171,186],
[177,171,163,0,190,171,183,177,170,170],
[163,165,156,151,0,162,162,153,155,170],
[184,180,172,170,179,0,176,182,175,182],
[167,172,164,158,179,165,0,176,174,166],
[172,168,181,164,188,159,165,0,176,166],
[163,166,170,171,186,166,167,165,0,178],
[166,158,155,171,171,159,175,175,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,206,172,219,166,166,198,191,167],
[142,0,168,140,180,155,182,173,166,154],
[135,173,0,151,180,155,178,171,158,149],
[169,201,190,0,197,175,174,184,190,186],
[122,161,161,144,0,165,163,166,176,147],
[175,186,186,166,176,0,175,175,174,179],
[175,159,163,167,178,166,0,165,173,166],
[143,168,170,157,175,166,176,0,166,162],
[150,175,183,151,165,167,168,175,0,167],
[174,187,192,155,194,162,175,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,175,167,176,170,168,176,168,158],
[181,0,184,164,168,158,164,168,173,172],
[166,157,0,166,175,166,154,162,154,160],
[174,177,175,0,172,162,168,171,162,165],
[165,173,166,169,0,168,161,174,168,161],
[171,183,175,179,173,0,163,175,159,166],
[173,177,187,173,180,178,0,179,177,155],
[165,173,179,170,167,166,162,0,160,159],
[173,168,187,179,173,182,164,181,0,161],
[183,169,181,176,180,175,186,182,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,149,162,152,173,172,167,168,171],
[175,0,177,191,164,185,151,177,182,181],
[192,164,0,188,169,185,177,180,175,188],
[179,150,153,0,146,151,159,153,161,154],
[189,177,172,195,0,177,169,182,193,164],
[168,156,156,190,164,0,172,164,162,156],
[169,190,164,182,172,169,0,173,177,177],
[174,164,161,188,159,177,168,0,182,172],
[173,159,166,180,148,179,164,159,0,170],
[170,160,153,187,177,185,164,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,185,158,151,170,161,174,184],
[177,0,158,170,172,158,170,162,182,173],
[167,183,0,186,177,160,177,162,192,186],
[156,171,155,0,163,146,170,149,172,175],
[183,169,164,178,0,172,171,166,181,172],
[190,183,181,195,169,0,179,178,186,189],
[171,171,164,171,170,162,0,159,171,172],
[180,179,179,192,175,163,182,0,183,188],
[167,159,149,169,160,155,170,158,0,165],
[157,168,155,166,169,152,169,153,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,208,164,188,172,167,208,180,167],
[165,0,173,154,155,157,159,165,155,151],
[133,168,0,163,140,133,138,161,138,132],
[177,187,178,0,175,161,171,194,168,159],
[153,186,201,166,0,145,150,188,179,162],
[169,184,208,180,196,0,164,202,182,168],
[174,182,203,170,191,177,0,193,177,174],
[133,176,180,147,153,139,148,0,150,157],
[161,186,203,173,162,159,164,191,0,167],
[174,190,209,182,179,173,167,184,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,83,119,161,163,142,98,158,201],
[222,0,162,181,224,161,202,201,178,218],
[258,179,0,139,221,182,259,197,199,178],
[222,160,202,0,221,242,223,240,259,240],
[180,117,120,120,0,161,182,177,180,217],
[178,180,159,99,180,0,200,216,202,197],
[199,139,82,118,159,141,0,156,157,160],
[243,140,144,101,164,125,185,0,161,181],
[183,163,142,82,161,139,184,180,0,181],
[140,123,163,101,124,144,181,160,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,163,200,157,169,182,169,135,171],
[154,0,156,178,156,152,156,138,138,149],
[178,185,0,186,163,151,159,152,150,163],
[141,163,155,0,164,165,166,124,126,164],
[184,185,178,177,0,169,182,159,172,184],
[172,189,190,176,172,0,172,156,146,188],
[159,185,182,175,159,169,0,162,147,175],
[172,203,189,217,182,185,179,0,161,183],
[206,203,191,215,169,195,194,180,0,188],
[170,192,178,177,157,153,166,158,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,152,177,179,165,177,161,184],
[178,0,150,167,175,195,183,169,182,181],
[176,191,0,170,178,176,180,183,174,205],
[189,174,171,0,175,172,177,180,166,190],
[164,166,163,166,0,171,164,175,176,179],
[162,146,165,169,170,0,162,149,152,173],
[176,158,161,164,177,179,0,173,158,183],
[164,172,158,161,166,192,168,0,187,188],
[180,159,167,175,165,189,183,154,0,171],
[157,160,136,151,162,168,158,153,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,159,191,172,168,168,166,173],
[174,0,183,173,180,158,166,167,167,160],
[162,158,0,165,184,154,159,159,149,161],
[182,168,176,0,177,160,168,176,166,173],
[150,161,157,164,0,160,171,163,159,153],
[169,183,187,181,181,0,171,183,161,171],
[173,175,182,173,170,170,0,170,165,170],
[173,174,182,165,178,158,171,0,166,163],
[175,174,192,175,182,180,176,175,0,168],
[168,181,180,168,188,170,171,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,172,183,189,187,163,202,171,197],
[160,0,159,164,154,170,159,177,180,180],
[169,182,0,175,161,192,167,202,170,199],
[158,177,166,0,161,183,145,193,172,196],
[152,187,180,180,0,197,183,202,171,201],
[154,171,149,158,144,0,151,186,155,180],
[178,182,174,196,158,190,0,210,186,189],
[139,164,139,148,139,155,131,0,146,172],
[170,161,171,169,170,186,155,195,0,189],
[144,161,142,145,140,161,152,169,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,194,207,201,212,180,203,197,159],
[129,0,134,155,157,165,148,157,156,130],
[147,207,0,190,192,167,178,190,179,147],
[134,186,151,0,172,165,159,177,148,151],
[140,184,149,169,0,161,161,201,181,144],
[129,176,174,176,180,0,155,175,167,129],
[161,193,163,182,180,186,0,185,158,158],
[138,184,151,164,140,166,156,0,135,173],
[144,185,162,193,160,174,183,206,0,151],
[182,211,194,190,197,212,183,168,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,183,154,159,174,158,153,172],
[171,0,182,186,172,194,165,162,177,173],
[171,159,0,158,141,152,177,161,172,179],
[158,155,183,0,158,155,153,152,152,160],
[187,169,200,183,0,201,186,160,197,183],
[182,147,189,186,140,0,160,167,176,148],
[167,176,164,188,155,181,0,158,187,179],
[183,179,180,189,181,174,183,0,184,151],
[188,164,169,189,144,165,154,157,0,158],
[169,168,162,181,158,193,162,190,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,153,122,137,139,146,167,171],
[180,0,153,166,150,166,151,149,167,167],
[174,188,0,171,151,163,178,172,178,174],
[188,175,170,0,151,167,175,169,181,185],
[219,191,190,190,0,185,178,179,167,211],
[204,175,178,174,156,0,167,163,185,203],
[202,190,163,166,163,174,0,170,173,189],
[195,192,169,172,162,178,171,0,174,196],
[174,174,163,160,174,156,168,167,0,166],
[170,174,167,156,130,138,152,145,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,196,166,179,171,179,167,152],
[175,0,176,187,179,173,193,184,163,172],
[170,165,0,184,177,187,153,188,171,175],
[145,154,157,0,149,167,149,170,150,163],
[175,162,164,192,0,176,153,170,172,153],
[162,168,154,174,165,0,171,180,167,187],
[170,148,188,192,188,170,0,171,172,168],
[162,157,153,171,171,161,170,0,170,181],
[174,178,170,191,169,174,169,171,0,173],
[189,169,166,178,188,154,173,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,156,143,165,176,149,147,130,147],
[192,0,166,176,161,174,166,166,188,159],
[185,175,0,166,157,182,186,181,161,156],
[198,165,175,0,170,182,179,156,167,167],
[176,180,184,171,0,181,176,184,169,154],
[165,167,159,159,160,0,145,160,152,137],
[192,175,155,162,165,196,0,173,168,175],
[194,175,160,185,157,181,168,0,160,166],
[211,153,180,174,172,189,173,181,0,168],
[194,182,185,174,187,204,166,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,185,175,173,170,180,191,166,171],
[147,0,152,144,140,146,150,155,153,162],
[156,189,0,161,158,173,169,174,161,158],
[166,197,180,0,168,163,181,181,179,184],
[168,201,183,173,0,163,160,177,159,182],
[171,195,168,178,178,0,195,184,158,182],
[161,191,172,160,181,146,0,170,187,171],
[150,186,167,160,164,157,171,0,168,172],
[175,188,180,162,182,183,154,173,0,189],
[170,179,183,157,159,159,170,169,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,149,162,175,158,172,178,158,169],
[166,0,172,156,169,168,159,169,172,190],
[192,169,0,186,185,184,171,185,163,168],
[179,185,155,0,183,176,191,175,173,178],
[166,172,156,158,0,165,136,152,154,167],
[183,173,157,165,176,0,162,160,162,165],
[169,182,170,150,205,179,0,166,170,181],
[163,172,156,166,189,181,175,0,177,176],
[183,169,178,168,187,179,171,164,0,181],
[172,151,173,163,174,176,160,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,195,176,190,181,175,166,192],
[164,0,152,185,166,183,179,178,176,202],
[169,189,0,187,187,183,195,184,178,205],
[146,156,154,0,157,176,178,174,169,197],
[165,175,154,184,0,182,182,172,181,192],
[151,158,158,165,159,0,182,167,169,175],
[160,162,146,163,159,159,0,161,157,179],
[166,163,157,167,169,174,180,0,166,189],
[175,165,163,172,160,172,184,175,0,193],
[149,139,136,144,149,166,162,152,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,170,168,180,171,169,172,159],
[162,0,167,152,164,176,174,158,169,156],
[176,174,0,167,178,168,164,170,163,162],
[171,189,174,0,176,174,173,166,163,168],
[173,177,163,165,0,160,174,156,173,167],
[161,165,173,167,181,0,186,187,176,175],
[170,167,177,168,167,155,0,167,171,168],
[172,183,171,175,185,154,174,0,186,156],
[169,172,178,178,168,165,170,155,0,162],
[182,185,179,173,174,166,173,185,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,173,180,177,173,159,171,173],
[173,0,175,178,196,165,159,162,168,167],
[173,166,0,175,181,173,172,156,166,167],
[168,163,166,0,197,179,182,161,180,180],
[161,145,160,144,0,166,157,157,169,159],
[164,176,168,162,175,0,166,164,168,170],
[168,182,169,159,184,175,0,159,166,169],
[182,179,185,180,184,177,182,0,170,184],
[170,173,175,161,172,173,175,171,0,167],
[168,174,174,161,182,171,172,157,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,169,170,150,173,179,139,147,157],
[185,0,152,172,182,134,147,146,143,147],
[172,189,0,167,172,170,181,157,170,159],
[171,169,174,0,156,153,160,152,136,160],
[191,159,169,185,0,165,186,163,183,167],
[168,207,171,188,176,0,190,154,176,150],
[162,194,160,181,155,151,0,141,162,150],
[202,195,184,189,178,187,200,0,167,185],
[194,198,171,205,158,165,179,174,0,174],
[184,194,182,181,174,191,191,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,174,175,174,174,184,168,173],
[174,0,171,173,187,169,169,189,161,173],
[174,170,0,179,190,183,192,192,183,187],
[167,168,162,0,169,174,174,177,169,174],
[166,154,151,172,0,174,161,172,160,167],
[167,172,158,167,167,0,173,187,167,172],
[167,172,149,167,180,168,0,176,170,166],
[157,152,149,164,169,154,165,0,163,156],
[173,180,158,172,181,174,171,178,0,177],
[168,168,154,167,174,169,175,185,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,166,167,174,200,171,186,174,174],
[152,0,159,184,176,176,159,191,171,145],
[175,182,0,161,160,178,166,185,181,160],
[174,157,180,0,175,194,173,184,179,153],
[167,165,181,166,0,167,171,173,164,152],
[141,165,163,147,174,0,157,158,159,140],
[170,182,175,168,170,184,0,192,170,170],
[155,150,156,157,168,183,149,0,176,167],
[167,170,160,162,177,182,171,165,0,170],
[167,196,181,188,189,201,171,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,165,158,175,180,176,167,172,192],
[184,0,158,169,168,171,191,154,158,165],
[176,183,0,171,182,165,163,175,161,165],
[183,172,170,0,150,168,164,169,161,160],
[166,173,159,191,0,170,177,174,160,186],
[161,170,176,173,171,0,175,166,159,179],
[165,150,178,177,164,166,0,151,166,164],
[174,187,166,172,167,175,190,0,169,175],
[169,183,180,180,181,182,175,172,0,175],
[149,176,176,181,155,162,177,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,185,184,176,189,183,167,175,164],
[172,0,174,179,183,187,182,159,178,167],
[156,167,0,175,162,168,170,171,146,147],
[157,162,166,0,175,182,169,177,177,150],
[165,158,179,166,0,166,165,178,143,173],
[152,154,173,159,175,0,173,170,160,144],
[158,159,171,172,176,168,0,165,167,166],
[174,182,170,164,163,171,176,0,160,145],
[166,163,195,164,198,181,174,181,0,162],
[177,174,194,191,168,197,175,196,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,168,166,177,170,166,169,158,154],
[180,0,171,161,191,170,175,180,165,180],
[173,170,0,155,175,159,156,179,161,157],
[175,180,186,0,197,169,172,182,172,173],
[164,150,166,144,0,157,148,153,163,153],
[171,171,182,172,184,0,166,173,167,165],
[175,166,185,169,193,175,0,183,170,169],
[172,161,162,159,188,168,158,0,160,153],
[183,176,180,169,178,174,171,181,0,171],
[187,161,184,168,188,176,172,188,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,132,161,171,170,152,172,157],
[175,0,179,162,163,183,162,162,169,169],
[175,162,0,142,141,163,150,159,168,176],
[209,179,199,0,179,198,178,178,193,164],
[180,178,200,162,0,181,176,157,170,170],
[170,158,178,143,160,0,172,160,162,150],
[171,179,191,163,165,169,0,159,172,169],
[189,179,182,163,184,181,182,0,187,166],
[169,172,173,148,171,179,169,154,0,169],
[184,172,165,177,171,191,172,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,169,184,187,178,171,175,158],
[181,0,175,186,191,187,167,162,176,165],
[178,166,0,196,186,182,176,182,179,174],
[172,155,145,0,174,170,158,171,169,170],
[157,150,155,167,0,155,161,161,170,170],
[154,154,159,171,186,0,171,171,164,158],
[163,174,165,183,180,170,0,175,172,164],
[170,179,159,170,180,170,166,0,173,170],
[166,165,162,172,171,177,169,168,0,171],
[183,176,167,171,171,183,177,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,155,108,81,146,155,157,186,112],
[199,0,148,127,137,153,183,178,167,150],
[186,193,0,146,122,153,164,175,206,151],
[233,214,195,0,193,160,172,217,239,193],
[260,204,219,148,0,235,204,218,228,206],
[195,188,188,181,106,0,187,186,200,165],
[186,158,177,169,137,154,0,167,196,185],
[184,163,166,124,123,155,174,0,199,183],
[155,174,135,102,113,141,145,142,0,153],
[229,191,190,148,135,176,156,158,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,155,168,175,155,186,182,174,151],
[175,0,161,180,165,152,191,175,170,155],
[186,180,0,188,165,173,200,186,185,166],
[173,161,153,0,177,152,189,173,162,158],
[166,176,176,164,0,175,183,181,170,165],
[186,189,168,189,166,0,199,192,176,174],
[155,150,141,152,158,142,0,170,155,147],
[159,166,155,168,160,149,171,0,161,160],
[167,171,156,179,171,165,186,180,0,166],
[190,186,175,183,176,167,194,181,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,126,152,165,173,156,149,181,125],
[182,0,163,151,198,154,181,170,179,149],
[215,178,0,183,215,162,198,141,194,175],
[189,190,158,0,199,197,211,169,175,175],
[176,143,126,142,0,165,171,150,162,124],
[168,187,179,144,176,0,190,166,187,188],
[185,160,143,130,170,151,0,146,165,143],
[192,171,200,172,191,175,195,0,190,162],
[160,162,147,166,179,154,176,151,0,160],
[216,192,166,166,217,153,198,179,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,192,165,181,179,191,175,176],
[171,0,169,180,173,163,171,176,177,183],
[179,172,0,192,174,181,179,163,185,184],
[149,161,149,0,160,155,154,151,166,167],
[176,168,167,181,0,172,195,173,176,167],
[160,178,160,186,169,0,170,166,182,170],
[162,170,162,187,146,171,0,178,172,177],
[150,165,178,190,168,175,163,0,169,168],
[166,164,156,175,165,159,169,172,0,164],
[165,158,157,174,174,171,164,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,149,167,153,160,140,143,162,148],
[180,0,168,160,166,167,153,168,168,160],
[192,173,0,164,175,173,176,167,168,173],
[174,181,177,0,168,178,150,173,171,161],
[188,175,166,173,0,176,153,156,158,166],
[181,174,168,163,165,0,153,177,166,157],
[201,188,165,191,188,188,0,193,182,189],
[198,173,174,168,185,164,148,0,185,155],
[179,173,173,170,183,175,159,156,0,157],
[193,181,168,180,175,184,152,186,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,184,185,194,172,199,203,169],
[168,0,167,188,175,188,144,197,202,165],
[164,174,0,157,129,176,161,187,154,151],
[157,153,184,0,148,146,143,172,162,155],
[156,166,212,193,0,188,177,191,185,149],
[147,153,165,195,153,0,157,164,188,165],
[169,197,180,198,164,184,0,191,201,177],
[142,144,154,169,150,177,150,0,159,152],
[138,139,187,179,156,153,140,182,0,141],
[172,176,190,186,192,176,164,189,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,171,175,170,180,179,163,174,192],
[155,0,153,155,160,149,134,152,145,169],
[170,188,0,186,187,182,190,187,170,196],
[166,186,155,0,175,161,167,178,163,176],
[171,181,154,166,0,176,168,166,166,189],
[161,192,159,180,165,0,166,170,160,182],
[162,207,151,174,173,175,0,175,167,185],
[178,189,154,163,175,171,166,0,168,192],
[167,196,171,178,175,181,174,173,0,196],
[149,172,145,165,152,159,156,149,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,115,228,228,115,341,113,113],
[226,0,226,113,226,226,113,226,226,226],
[226,115,0,0,113,228,115,341,113,113],
[226,228,341,0,228,341,228,341,226,113],
[113,115,228,113,0,228,115,341,113,113],
[113,115,113,0,113,0,0,226,113,113],
[226,228,226,113,226,341,0,226,226,226],
[0,115,0,0,0,115,115,0,0,0],
[228,115,228,115,228,228,115,341,0,113],
[228,115,228,228,228,228,115,341,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,136,147,150,157,147,141,166,137],
[186,0,153,157,151,176,168,182,174,165],
[205,188,0,156,172,194,178,179,183,194],
[194,184,185,0,164,183,172,181,189,184],
[191,190,169,177,0,177,184,187,169,178],
[184,165,147,158,164,0,155,174,174,159],
[194,173,163,169,157,186,0,174,175,202],
[200,159,162,160,154,167,167,0,162,177],
[175,167,158,152,172,167,166,179,0,156],
[204,176,147,157,163,182,139,164,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,175,192,200,144,163,197,176,167],
[158,0,181,200,200,180,165,193,175,180],
[166,160,0,171,166,156,160,207,166,148],
[149,141,170,0,138,154,142,183,137,145],
[141,141,175,203,0,190,166,197,154,171],
[197,161,185,187,151,0,174,206,172,174],
[178,176,181,199,175,167,0,208,153,171],
[144,148,134,158,144,135,133,0,142,134],
[165,166,175,204,187,169,188,199,0,171],
[174,161,193,196,170,167,170,207,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,169,169,202,150,187,186,132,149],
[158,0,142,155,102,139,154,157,116,105],
[172,199,0,185,198,182,184,220,132,166],
[172,186,156,0,150,135,187,238,115,205],
[139,239,143,191,0,156,188,226,136,172],
[191,202,159,206,185,0,204,204,185,188],
[154,187,157,154,153,137,0,170,151,151],
[155,184,121,103,115,137,171,0,115,136],
[209,225,209,226,205,156,190,226,0,240],
[192,236,175,136,169,153,190,205,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,154,160,170,158,158,172,160],
[169,0,174,172,183,187,171,173,174,160],
[171,167,0,163,161,174,184,166,161,154],
[187,169,178,0,168,187,177,165,166,177],
[181,158,180,173,0,174,174,179,165,170],
[171,154,167,154,167,0,165,177,167,152],
[183,170,157,164,167,176,0,150,164,161],
[183,168,175,176,162,164,191,0,176,177],
[169,167,180,175,176,174,177,165,0,166],
[181,181,187,164,171,189,180,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,184,177,167,167,156,182,189,154],
[174,0,173,171,151,147,175,185,161,161],
[157,168,0,157,157,146,168,153,157,158],
[164,170,184,0,159,163,150,174,178,179],
[174,190,184,182,0,181,177,184,174,170],
[174,194,195,178,160,0,185,181,180,163],
[185,166,173,191,164,156,0,187,184,159],
[159,156,188,167,157,160,154,0,167,168],
[152,180,184,163,167,161,157,174,0,162],
[187,180,183,162,171,178,182,173,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,181,183,164,153,166,173,160,183],
[148,0,152,155,149,149,169,152,163,177],
[160,189,0,187,180,151,159,158,185,180],
[158,186,154,0,159,146,188,164,178,186],
[177,192,161,182,0,158,175,170,179,185],
[188,192,190,195,183,0,184,162,210,199],
[175,172,182,153,166,157,0,159,172,185],
[168,189,183,177,171,179,182,0,180,198],
[181,178,156,163,162,131,169,161,0,193],
[158,164,161,155,156,142,156,143,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,175,178,180,186,191,180,185],
[173,0,180,166,198,192,190,190,183,186],
[167,161,0,166,166,164,171,186,178,174],
[166,175,175,0,188,172,176,184,179,179],
[163,143,175,153,0,159,166,175,178,179],
[161,149,177,169,182,0,176,191,176,182],
[155,151,170,165,175,165,0,171,168,153],
[150,151,155,157,166,150,170,0,179,159],
[161,158,163,162,163,165,173,162,0,169],
[156,155,167,162,162,159,188,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,156,142,123,163,166,153,146,136],
[206,0,187,189,177,188,175,168,175,158],
[185,154,0,177,142,160,151,173,140,164],
[199,152,164,0,143,153,158,169,158,156],
[218,164,199,198,0,204,208,184,192,194],
[178,153,181,188,137,0,178,166,135,164],
[175,166,190,183,133,163,0,190,165,162],
[188,173,168,172,157,175,151,0,150,160],
[195,166,201,183,149,206,176,191,0,162],
[205,183,177,185,147,177,179,181,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,151,173,155,172,171,168,171],
[175,0,159,171,157,165,160,169,167,159],
[176,182,0,174,172,155,176,176,182,181],
[190,170,167,0,176,164,183,177,195,188],
[168,184,169,165,0,155,158,174,173,176],
[186,176,186,177,186,0,184,167,200,199],
[169,181,165,158,183,157,0,179,179,177],
[170,172,165,164,167,174,162,0,178,178],
[173,174,159,146,168,141,162,163,0,164],
[170,182,160,153,165,142,164,163,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,176,155,164,171,165,170,176,167],
[190,0,174,159,167,167,178,171,167,172],
[165,167,0,158,154,169,166,174,171,169],
[186,182,183,0,177,170,169,187,182,175],
[177,174,187,164,0,155,162,181,166,169],
[170,174,172,171,186,0,176,172,176,172],
[176,163,175,172,179,165,0,174,179,178],
[171,170,167,154,160,169,167,0,160,164],
[165,174,170,159,175,165,162,181,0,163],
[174,169,172,166,172,169,163,177,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,149,167,149,152,161,165,171],
[169,0,174,156,148,144,149,168,140,162],
[174,167,0,157,164,155,141,161,160,169],
[192,185,184,0,168,195,151,173,173,162],
[174,193,177,173,0,156,143,169,177,161],
[192,197,186,146,185,0,158,203,202,183],
[189,192,200,190,198,183,0,191,156,178],
[180,173,180,168,172,138,150,0,200,176],
[176,201,181,168,164,139,185,141,0,169],
[170,179,172,179,180,158,163,165,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,228,149,189,189,190,112,112,153],
[189,0,266,74,188,190,192,151,153,155],
[113,75,0,111,151,76,155,150,74,78],
[192,267,230,0,267,155,192,192,192,155],
[152,153,190,74,0,153,153,190,190,155],
[152,151,265,186,188,0,153,190,151,154],
[151,149,186,149,188,188,0,149,149,151],
[229,190,191,149,151,151,192,0,153,117],
[229,188,267,149,151,190,192,188,0,192],
[188,186,263,186,186,187,190,224,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,165,173,166,175,160,163,170],
[177,0,177,179,167,192,174,164,162,151],
[175,164,0,164,155,173,156,155,155,172],
[176,162,177,0,173,176,175,161,160,155],
[168,174,186,168,0,185,177,172,161,169],
[175,149,168,165,156,0,164,168,159,150],
[166,167,185,166,164,177,0,165,162,144],
[181,177,186,180,169,173,176,0,171,172],
[178,179,186,181,180,182,179,170,0,168],
[171,190,169,186,172,191,197,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,149,156,162,168,155,157,169,167],
[183,0,166,156,176,159,171,169,160,163],
[192,175,0,188,171,187,184,180,186,170],
[185,185,153,0,170,182,168,165,167,173],
[179,165,170,171,0,189,171,173,164,163],
[173,182,154,159,152,0,158,156,169,157],
[186,170,157,173,170,183,0,165,171,175],
[184,172,161,176,168,185,176,0,178,175],
[172,181,155,174,177,172,170,163,0,172],
[174,178,171,168,178,184,166,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,151,187,164,177,174,158,179,163],
[198,0,166,168,173,167,176,168,164,181],
[190,175,0,209,191,182,189,163,187,180],
[154,173,132,0,157,164,172,133,155,153],
[177,168,150,184,0,195,189,186,167,180],
[164,174,159,177,146,0,141,166,164,148],
[167,165,152,169,152,200,0,148,194,167],
[183,173,178,208,155,175,193,0,172,180],
[162,177,154,186,174,177,147,169,0,151],
[178,160,161,188,161,193,174,161,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,179,176,157,163,167,182,178,183],
[160,0,159,175,147,162,156,182,150,153],
[162,182,0,167,134,173,172,200,169,180],
[165,166,174,0,164,177,164,197,160,174],
[184,194,207,177,0,165,174,207,168,190],
[178,179,168,164,176,0,184,210,158,157],
[174,185,169,177,167,157,0,180,160,175],
[159,159,141,144,134,131,161,0,144,151],
[163,191,172,181,173,183,181,197,0,178],
[158,188,161,167,151,184,166,190,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,172,177,187,164,162,161,180],
[171,0,175,168,179,190,167,171,173,180],
[167,166,0,161,183,180,168,165,160,174],
[169,173,180,0,170,181,172,158,163,190],
[164,162,158,171,0,167,169,161,174,179],
[154,151,161,160,174,0,154,154,167,180],
[177,174,173,169,172,187,0,179,180,192],
[179,170,176,183,180,187,162,0,166,188],
[180,168,181,178,167,174,161,175,0,184],
[161,161,167,151,162,161,149,153,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,181,180,164,174,171,165,178,176],
[148,0,157,166,167,163,159,166,177,163],
[160,184,0,195,187,174,180,183,190,174],
[161,175,146,0,161,162,166,173,171,164],
[177,174,154,180,0,179,163,180,164,157],
[167,178,167,179,162,0,167,183,175,182],
[170,182,161,175,178,174,0,178,185,167],
[176,175,158,168,161,158,163,0,172,171],
[163,164,151,170,177,166,156,169,0,173],
[165,178,167,177,184,159,174,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,182,163,177,178,187,188,166],
[171,0,164,178,159,163,180,179,178,175],
[165,177,0,186,181,186,190,184,192,185],
[159,163,155,0,152,172,161,166,173,160],
[178,182,160,189,0,186,184,182,195,179],
[164,178,155,169,155,0,157,158,174,164],
[163,161,151,180,157,184,0,170,155,168],
[154,162,157,175,159,183,171,0,182,155],
[153,163,149,168,146,167,186,159,0,154],
[175,166,156,181,162,177,173,186,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,185,172,165,158,173,161,179,174],
[176,0,193,175,197,161,190,182,187,179],
[156,148,0,159,163,174,149,151,154,170],
[169,166,182,0,193,160,180,181,174,175],
[176,144,178,148,0,154,170,156,168,168],
[183,180,167,181,187,0,180,177,180,178],
[168,151,192,161,171,161,0,172,170,183],
[180,159,190,160,185,164,169,0,167,189],
[162,154,187,167,173,161,171,174,0,183],
[167,162,171,166,173,163,158,152,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,183,185,189,160,191,175,180,199],
[167,0,182,178,183,179,188,167,174,189],
[158,159,0,178,190,156,161,170,174,189],
[156,163,163,0,166,144,166,162,160,178],
[152,158,151,175,0,156,170,174,170,184],
[181,162,185,197,185,0,178,188,190,198],
[150,153,180,175,171,163,0,176,157,194],
[166,174,171,179,167,153,165,0,181,193],
[161,167,167,181,171,151,184,160,0,188],
[142,152,152,163,157,143,147,148,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,186,166,165,175,190,184,172],
[176,0,166,182,165,173,182,180,172,171],
[172,175,0,178,161,149,173,168,176,151],
[155,159,163,0,149,168,158,194,164,158],
[175,176,180,192,0,169,172,188,195,166],
[176,168,192,173,172,0,164,199,182,185],
[166,159,168,183,169,177,0,184,174,175],
[151,161,173,147,153,142,157,0,152,158],
[157,169,165,177,146,159,167,189,0,163],
[169,170,190,183,175,156,166,183,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,180,177,154,171,166,185,203,156],
[178,0,186,163,153,151,144,155,170,152],
[161,155,0,154,160,183,174,123,154,136],
[164,178,187,0,171,155,172,149,169,166],
[187,188,181,170,0,201,196,139,167,156],
[170,190,158,186,140,0,146,151,161,143],
[175,197,167,169,145,195,0,144,204,149],
[156,186,218,192,202,190,197,0,207,196],
[138,171,187,172,174,180,137,134,0,118],
[185,189,205,175,185,198,192,145,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,185,155,168,176,164,159,144,173],
[160,0,169,162,158,180,159,158,160,161],
[156,172,0,142,154,163,168,160,168,157],
[186,179,199,0,179,176,176,168,175,187],
[173,183,187,162,0,177,176,174,171,168],
[165,161,178,165,164,0,169,154,153,171],
[177,182,173,165,165,172,0,165,158,176],
[182,183,181,173,167,187,176,0,181,175],
[197,181,173,166,170,188,183,160,0,166],
[168,180,184,154,173,170,165,166,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,178,155,186,181,172,179,186,174],
[159,0,171,169,156,161,153,188,174,163],
[163,170,0,147,177,148,155,169,172,163],
[186,172,194,0,176,167,179,187,199,172],
[155,185,164,165,0,178,159,178,179,173],
[160,180,193,174,163,0,154,177,172,164],
[169,188,186,162,182,187,0,186,188,181],
[162,153,172,154,163,164,155,0,161,158],
[155,167,169,142,162,169,153,180,0,152],
[167,178,178,169,168,177,160,183,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,180,164,169,162,175,181,177],
[166,0,174,170,157,154,174,145,165,178],
[163,167,0,171,150,156,161,149,171,167],
[161,171,170,0,161,160,159,157,168,163],
[177,184,191,180,0,169,170,184,191,168],
[172,187,185,181,172,0,178,170,185,168],
[179,167,180,182,171,163,0,161,183,171],
[166,196,192,184,157,171,180,0,182,174],
[160,176,170,173,150,156,158,159,0,171],
[164,163,174,178,173,173,170,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,175,163,140,166,163,173,200,199],
[163,0,166,145,157,163,147,154,172,157],
[166,175,0,171,146,160,169,162,189,172],
[178,196,170,0,177,181,211,217,173,172],
[201,184,195,164,0,150,198,185,200,184],
[175,178,181,160,191,0,155,184,208,183],
[178,194,172,130,143,186,0,157,172,178],
[168,187,179,124,156,157,184,0,173,156],
[141,169,152,168,141,133,169,168,0,151],
[142,184,169,169,157,158,163,185,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,187,182,160,189,214,177,193,199],
[152,0,179,178,185,178,202,154,174,204],
[154,162,0,162,159,186,173,129,174,172],
[159,163,179,0,180,167,186,112,171,173],
[181,156,182,161,0,178,165,157,169,188],
[152,163,155,174,163,0,175,119,165,167],
[127,139,168,155,176,166,0,142,151,176],
[164,187,212,229,184,222,199,0,189,199],
[148,167,167,170,172,176,190,152,0,187],
[142,137,169,168,153,174,165,142,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,155,125,161,163,140,136,115],
[171,0,185,164,224,218,183,173,164,156],
[178,156,0,176,197,200,150,161,155,150],
[186,177,165,0,180,207,176,171,155,158],
[216,117,144,161,0,190,172,164,139,113],
[180,123,141,134,151,0,137,150,125,137],
[178,158,191,165,169,204,0,171,130,154],
[201,168,180,170,177,191,170,0,168,175],
[205,177,186,186,202,216,211,173,0,167],
[226,185,191,183,228,204,187,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,190,201,184,167,170,175,159,182],
[161,0,170,184,174,167,166,154,163,183],
[151,171,0,187,169,158,156,153,140,174],
[140,157,154,0,159,139,143,134,125,173],
[157,167,172,182,0,178,150,150,156,170],
[174,174,183,202,163,0,166,157,168,191],
[171,175,185,198,191,175,0,163,164,192],
[166,187,188,207,191,184,178,0,177,195],
[182,178,201,216,185,173,177,164,0,195],
[159,158,167,168,171,150,149,146,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,168,131,138,158,134,141,121,170],
[183,0,166,164,155,173,184,191,177,140],
[173,175,0,137,166,168,147,165,158,156],
[210,177,204,0,200,163,177,178,183,177],
[203,186,175,141,0,161,178,141,186,152],
[183,168,173,178,180,0,163,191,161,201],
[207,157,194,164,163,178,0,153,175,178],
[200,150,176,163,200,150,188,0,185,178],
[220,164,183,158,155,180,166,156,0,170],
[171,201,185,164,189,140,163,163,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,191,177,169,176,171,185,175,161],
[173,0,185,170,154,171,175,174,164,172],
[150,156,0,181,138,163,149,173,158,163],
[164,171,160,0,147,152,154,165,160,164],
[172,187,203,194,0,168,178,188,186,186],
[165,170,178,189,173,0,181,188,172,174],
[170,166,192,187,163,160,0,197,173,170],
[156,167,168,176,153,153,144,0,169,165],
[166,177,183,181,155,169,168,172,0,182],
[180,169,178,177,155,167,171,176,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,187,167,155,158,157,134,196,166],
[154,0,166,177,165,158,171,166,151,139],
[154,175,0,155,151,145,165,133,159,139],
[174,164,186,0,154,139,150,165,202,183],
[186,176,190,187,0,157,210,170,197,170],
[183,183,196,202,184,0,187,153,180,176],
[184,170,176,191,131,154,0,149,165,163],
[207,175,208,176,171,188,192,0,218,168],
[145,190,182,139,144,161,176,123,0,172],
[175,202,202,158,171,165,178,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,156,155,216,248,185,155,185,216],
[186,0,186,155,186,216,186,186,217,217],
[185,155,0,187,185,185,92,154,216,123],
[186,186,154,0,247,246,154,154,247,246],
[125,155,156,94,0,188,124,217,185,126],
[93,125,156,95,153,0,155,155,184,125],
[156,155,249,187,217,186,0,217,248,187],
[186,155,187,187,124,186,124,0,155,155],
[156,124,125,94,156,157,93,186,0,157],
[125,124,218,95,215,216,154,186,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,215,194,169,181,142,175,178,157],
[141,0,163,157,147,162,158,147,153,143],
[126,178,0,138,139,135,160,141,143,175],
[147,184,203,0,171,158,182,175,142,159],
[172,194,202,170,0,173,168,174,177,165],
[160,179,206,183,168,0,181,165,158,163],
[199,183,181,159,173,160,0,179,142,135],
[166,194,200,166,167,176,162,0,159,193],
[163,188,198,199,164,183,199,182,0,164],
[184,198,166,182,176,178,206,148,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,184,195,175,183,192,192,182],
[174,0,148,165,169,176,169,171,150,173],
[167,193,0,175,189,184,186,185,170,196],
[157,176,166,0,188,176,192,186,170,179],
[146,172,152,153,0,161,168,165,151,161],
[166,165,157,165,180,0,169,189,152,184],
[158,172,155,149,173,172,0,187,160,177],
[149,170,156,155,176,152,154,0,169,154],
[149,191,171,171,190,189,181,172,0,186],
[159,168,145,162,180,157,164,187,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,144,91,142,117,158,146,121,123],
[206,0,211,168,148,163,182,187,173,204],
[197,130,0,120,143,118,145,166,151,142],
[250,173,221,0,166,173,167,218,179,212],
[199,193,198,175,0,175,188,203,168,167],
[224,178,223,168,166,0,187,185,155,162],
[183,159,196,174,153,154,0,177,161,168],
[195,154,175,123,138,156,164,0,149,164],
[220,168,190,162,173,186,180,192,0,180],
[218,137,199,129,174,179,173,177,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,176,156,167,169,189,190,166,196],
[179,0,184,158,165,180,199,181,181,172],
[165,157,0,152,150,162,188,166,168,178],
[185,183,189,0,190,189,193,190,162,200],
[174,176,191,151,0,163,189,163,146,185],
[172,161,179,152,178,0,186,152,145,177],
[152,142,153,148,152,155,0,136,140,160],
[151,160,175,151,178,189,205,0,176,182],
[175,160,173,179,195,196,201,165,0,179],
[145,169,163,141,156,164,181,159,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,162,159,159,158,159,160,161,163],
[179,0,167,162,163,161,178,154,163,160],
[179,174,0,167,165,161,176,150,178,170],
[182,179,174,0,176,162,173,159,189,175],
[182,178,176,165,0,169,174,154,169,153],
[183,180,180,179,172,0,181,171,178,162],
[182,163,165,168,167,160,0,140,155,170],
[181,187,191,182,187,170,201,0,187,182],
[180,178,163,152,172,163,186,154,0,159],
[178,181,171,166,188,179,171,159,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,167,195,166,194,182,186,181,178],
[160,0,162,167,165,185,164,181,165,163],
[174,179,0,171,177,200,162,182,180,165],
[146,174,170,0,158,183,165,176,169,158],
[175,176,164,183,0,192,171,189,169,178],
[147,156,141,158,149,0,144,158,165,149],
[159,177,179,176,170,197,0,189,182,174],
[155,160,159,165,152,183,152,0,168,168],
[160,176,161,172,172,176,159,173,0,173],
[163,178,176,183,163,192,167,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,188,196,146,202,184,193,218,190],
[137,0,136,141,131,125,142,175,167,122],
[153,205,0,171,147,160,191,186,185,168],
[145,200,170,0,160,165,164,202,167,180],
[195,210,194,181,0,170,170,223,206,175],
[139,216,181,176,171,0,181,190,198,165],
[157,199,150,177,171,160,0,183,180,163],
[148,166,155,139,118,151,158,0,181,130],
[123,174,156,174,135,143,161,160,0,163],
[151,219,173,161,166,176,178,211,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,172,162,166,146,172,164,155],
[170,0,170,177,152,158,172,167,168,165],
[173,171,0,157,165,163,157,176,151,178],
[169,164,184,0,159,162,161,169,162,180],
[179,189,176,182,0,181,185,152,154,175],
[175,183,178,179,160,0,181,178,167,171],
[195,169,184,180,156,160,0,157,163,167],
[169,174,165,172,189,163,184,0,166,174],
[177,173,190,179,187,174,178,175,0,168],
[186,176,163,161,166,170,174,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,181,178,177,170,187,172,160,171],
[177,0,178,173,193,175,192,179,168,168],
[160,163,0,165,185,169,175,165,167,160],
[163,168,176,0,187,169,171,162,164,160],
[164,148,156,154,0,156,166,161,169,159],
[171,166,172,172,185,0,175,174,176,159],
[154,149,166,170,175,166,0,163,157,169],
[169,162,176,179,180,167,178,0,170,180],
[181,173,174,177,172,165,184,171,0,172],
[170,173,181,181,182,182,172,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,210,189,168,146,149,170,190,188],
[172,0,127,171,172,150,128,150,148,193],
[131,214,0,193,214,213,150,172,216,191],
[152,170,148,0,172,126,106,170,148,148],
[173,169,127,169,0,191,149,214,191,212],
[195,191,128,215,150,0,150,237,170,192],
[192,213,191,235,192,191,0,150,235,254],
[171,191,169,171,127,104,191,0,190,169],
[151,193,125,193,150,171,106,151,0,149],
[153,148,150,193,129,149,87,172,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,148,165,154,169,185,164,166,179],
[184,0,161,187,168,172,191,166,190,185],
[193,180,0,180,182,165,192,190,193,176],
[176,154,161,0,153,170,172,174,170,184],
[187,173,159,188,0,170,177,176,194,189],
[172,169,176,171,171,0,182,194,183,199],
[156,150,149,169,164,159,0,154,160,170],
[177,175,151,167,165,147,187,0,170,159],
[175,151,148,171,147,158,181,171,0,166],
[162,156,165,157,152,142,171,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,184,142,150,170,194,156,160,164],
[177,0,161,145,166,181,200,152,162,168],
[157,180,0,160,147,155,185,144,158,158],
[199,196,181,0,194,178,195,163,191,177],
[191,175,194,147,0,189,197,178,168,186],
[171,160,186,163,152,0,201,155,143,169],
[147,141,156,146,144,140,0,135,149,148],
[185,189,197,178,163,186,206,0,174,171],
[181,179,183,150,173,198,192,167,0,175],
[177,173,183,164,155,172,193,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,172,177,171,166,188,177,166],
[170,0,179,169,181,188,174,177,174,167],
[163,162,0,175,180,170,166,170,175,160],
[169,172,166,0,182,174,170,179,177,158],
[164,160,161,159,0,165,156,162,167,151],
[170,153,171,167,176,0,168,167,169,151],
[175,167,175,171,185,173,0,175,171,164],
[153,164,171,162,179,174,166,0,159,155],
[164,167,166,164,174,172,170,182,0,173],
[175,174,181,183,190,190,177,186,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,159,164,162,158,162,162,188,168],
[175,0,148,158,167,171,162,157,179,166],
[182,193,0,165,175,175,171,166,190,171],
[177,183,176,0,168,181,170,172,194,176],
[179,174,166,173,0,163,154,161,173,162],
[183,170,166,160,178,0,162,168,181,162],
[179,179,170,171,187,179,0,174,187,174],
[179,184,175,169,180,173,167,0,184,175],
[153,162,151,147,168,160,154,157,0,158],
[173,175,170,165,179,179,167,166,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,167,177,168,172,168,189,180,161],
[189,0,176,205,200,200,186,184,180,170],
[174,165,0,197,174,147,159,174,178,175],
[164,136,144,0,141,144,163,148,150,148],
[173,141,167,200,0,164,174,182,183,158],
[169,141,194,197,177,0,181,172,183,168],
[173,155,182,178,167,160,0,174,158,157],
[152,157,167,193,159,169,167,0,157,153],
[161,161,163,191,158,158,183,184,0,182],
[180,171,166,193,183,173,184,188,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,203,136,159,174,137,149,207,162],
[154,0,169,166,136,176,123,173,173,183],
[138,172,0,126,134,159,131,134,158,159],
[205,175,215,0,174,180,148,182,195,201],
[182,205,207,167,0,189,172,171,204,202],
[167,165,182,161,152,0,150,171,175,170],
[204,218,210,193,169,191,0,201,222,207],
[192,168,207,159,170,170,140,0,206,188],
[134,168,183,146,137,166,119,135,0,146],
[179,158,182,140,139,171,134,153,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,188,181,162,174,168,168,167,182],
[173,0,201,183,172,176,189,147,148,196],
[153,140,0,157,135,166,166,155,141,169],
[160,158,184,0,152,174,156,162,153,182],
[179,169,206,189,0,212,206,179,151,219],
[167,165,175,167,129,0,172,157,144,212],
[173,152,175,185,135,169,0,145,147,181],
[173,194,186,179,162,184,196,0,199,190],
[174,193,200,188,190,197,194,142,0,204],
[159,145,172,159,122,129,160,151,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,181,170,159,161,184,169,167,164],
[142,0,166,149,116,144,159,144,160,150],
[160,175,0,142,141,165,173,195,158,170],
[171,192,199,0,178,194,193,206,156,186],
[182,225,200,163,0,167,201,198,183,176],
[180,197,176,147,174,0,171,187,166,204],
[157,182,168,148,140,170,0,178,150,144],
[172,197,146,135,143,154,163,0,171,168],
[174,181,183,185,158,175,191,170,0,180],
[177,191,171,155,165,137,197,173,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,169,137,187,189,190,175,172,186],
[144,0,170,148,170,167,145,161,158,193],
[172,171,0,165,176,163,163,164,147,186],
[204,193,176,0,195,184,178,171,165,206],
[154,171,165,146,0,167,170,161,158,184],
[152,174,178,157,174,0,152,144,146,162],
[151,196,178,163,171,189,0,165,156,188],
[166,180,177,170,180,197,176,0,154,182],
[169,183,194,176,183,195,185,187,0,189],
[155,148,155,135,157,179,153,159,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,180,170,167,179,168,177,184],
[169,0,173,199,184,167,197,161,187,195],
[167,168,0,181,179,159,184,177,164,181],
[161,142,160,0,166,151,156,143,147,156],
[171,157,162,175,0,165,195,163,167,179],
[174,174,182,190,176,0,185,167,176,184],
[162,144,157,185,146,156,0,167,155,159],
[173,180,164,198,178,174,174,0,186,192],
[164,154,177,194,174,165,186,155,0,186],
[157,146,160,185,162,157,182,149,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,195,166,174,177,171,168,189,149],
[174,0,166,162,157,163,169,163,164,171],
[146,175,0,152,147,169,178,164,172,162],
[175,179,189,0,153,184,199,179,182,156],
[167,184,194,188,0,178,190,192,180,174],
[164,178,172,157,163,0,163,169,173,162],
[170,172,163,142,151,178,0,163,156,162],
[173,178,177,162,149,172,178,0,183,166],
[152,177,169,159,161,168,185,158,0,189],
[192,170,179,185,167,179,179,175,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,45,170,169,169,171,84,168,213],
[170,0,172,254,212,212,130,212,211,256],
[296,169,0,212,212,212,214,212,211,211],
[171,87,129,0,172,171,87,213,255,213],
[172,129,129,169,0,172,87,171,171,256],
[172,129,129,170,169,0,172,214,214,213],
[170,211,127,254,254,169,0,211,210,211],
[257,129,129,128,170,127,130,0,172,256],
[173,130,130,86,170,127,131,169,0,214],
[128,85,130,128,85,128,130,85,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,178,166,187,174,174,185,184,178],
[156,0,166,168,154,163,157,170,167,177],
[163,175,0,166,184,169,151,182,186,172],
[175,173,175,0,160,170,161,173,162,158],
[154,187,157,181,0,186,168,195,179,186],
[167,178,172,171,155,0,162,171,161,169],
[167,184,190,180,173,179,0,171,170,166],
[156,171,159,168,146,170,170,0,169,166],
[157,174,155,179,162,180,171,172,0,177],
[163,164,169,183,155,172,175,175,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,172,185,168,169,176,164,151],
[172,0,178,181,185,159,178,168,173,164],
[168,163,0,180,180,169,173,169,166,177],
[169,160,161,0,177,168,178,189,158,157],
[156,156,161,164,0,169,167,139,166,157],
[173,182,172,173,172,0,176,170,168,184],
[172,163,168,163,174,165,0,170,161,155],
[165,173,172,152,202,171,171,0,171,168],
[177,168,175,183,175,173,180,170,0,172],
[190,177,164,184,184,157,186,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,165,150,170,156,145,150,154,145],
[191,0,197,165,177,179,173,173,185,180],
[176,144,0,148,151,162,152,154,151,155],
[191,176,193,0,171,188,184,165,186,179],
[171,164,190,170,0,188,177,174,183,163],
[185,162,179,153,153,0,153,161,155,164],
[196,168,189,157,164,188,0,163,193,174],
[191,168,187,176,167,180,178,0,182,164],
[187,156,190,155,158,186,148,159,0,169],
[196,161,186,162,178,177,167,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,226,226,284,227,171,230,115,285],
[0,0,168,168,226,169,113,115,58,113],
[115,173,0,230,229,172,113,230,115,228],
[115,173,111,0,229,170,113,172,58,228],
[57,115,112,112,0,112,170,115,115,170],
[114,172,169,171,229,0,113,173,58,171],
[170,228,228,228,171,228,0,230,228,228],
[111,226,111,169,226,168,111,0,56,226],
[226,283,226,283,226,283,113,285,0,226],
[56,228,113,113,171,170,113,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,195,169,175,179,161,174,194,174],
[179,0,200,189,190,187,170,178,184,182],
[146,141,0,163,151,155,157,149,169,150],
[172,152,178,0,171,167,156,158,197,157],
[166,151,190,170,0,162,132,170,183,150],
[162,154,186,174,179,0,178,176,202,157],
[180,171,184,185,209,163,0,198,182,175],
[167,163,192,183,171,165,143,0,189,157],
[147,157,172,144,158,139,159,152,0,139],
[167,159,191,184,191,184,166,184,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,141,189,175,170,173,169,164,173],
[169,0,136,174,166,167,165,154,161,176],
[200,205,0,211,179,190,179,192,169,184],
[152,167,130,0,162,161,149,159,150,167],
[166,175,162,179,0,180,174,175,171,182],
[171,174,151,180,161,0,163,189,173,175],
[168,176,162,192,167,178,0,186,170,183],
[172,187,149,182,166,152,155,0,166,180],
[177,180,172,191,170,168,171,175,0,187],
[168,165,157,174,159,166,158,161,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,226,226,226,112,112,226,0,112],
[341,0,226,341,226,226,341,226,114,226],
[115,115,0,229,341,115,227,115,115,115],
[115,0,112,0,226,0,227,112,0,112],
[115,115,0,115,0,115,227,115,115,115],
[229,115,226,341,226,0,341,341,229,341],
[229,0,114,114,114,0,0,114,0,0],
[115,115,226,229,226,0,227,0,0,0],
[341,227,226,341,226,112,341,341,0,226],
[229,115,226,229,226,0,341,341,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,172,175,185,171,169,166,161,172],
[183,0,178,163,177,168,158,177,160,174],
[169,163,0,158,168,173,162,169,165,166],
[166,178,183,0,175,167,171,182,163,164],
[156,164,173,166,0,166,159,165,163,172],
[170,173,168,174,175,0,170,163,167,167],
[172,183,179,170,182,171,0,176,185,182],
[175,164,172,159,176,178,165,0,161,174],
[180,181,176,178,178,174,156,180,0,171],
[169,167,175,177,169,174,159,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,181,181,186,203,174,181,168,177],
[153,0,144,166,177,181,155,152,154,171],
[160,197,0,185,178,181,184,177,186,183],
[160,175,156,0,168,184,164,176,161,165],
[155,164,163,173,0,177,171,166,166,177],
[138,160,160,157,164,0,162,160,144,178],
[167,186,157,177,170,179,0,174,165,170],
[160,189,164,165,175,181,167,0,168,168],
[173,187,155,180,175,197,176,173,0,165],
[164,170,158,176,164,163,171,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,208,184,178,165,184,168,180,195],
[157,0,214,182,168,179,167,151,161,175],
[133,127,0,141,131,96,108,116,126,122],
[157,159,200,0,192,141,200,167,144,160],
[163,173,210,149,0,124,181,152,146,140],
[176,162,245,200,217,0,201,173,178,169],
[157,174,233,141,160,140,0,132,179,144],
[173,190,225,174,189,168,209,0,194,174],
[161,180,215,197,195,163,162,147,0,170],
[146,166,219,181,201,172,197,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,191,171,170,183,177,175,172],
[166,0,165,180,165,178,172,176,153,168],
[161,176,0,166,162,177,177,177,173,170],
[150,161,175,0,165,160,177,162,166,176],
[170,176,179,176,0,179,192,179,173,186],
[171,163,164,181,162,0,175,165,156,175],
[158,169,164,164,149,166,0,154,155,157],
[164,165,164,179,162,176,187,0,161,178],
[166,188,168,175,168,185,186,180,0,182],
[169,173,171,165,155,166,184,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,187,176,191,183,169,151,190,183],
[184,0,165,151,186,181,174,148,187,174],
[154,176,0,171,152,152,178,135,155,171],
[165,190,170,0,183,187,138,181,170,175],
[150,155,189,158,0,179,179,139,167,174],
[158,160,189,154,162,0,167,148,153,171],
[172,167,163,203,162,174,0,191,146,200],
[190,193,206,160,202,193,150,0,174,202],
[151,154,186,171,174,188,195,167,0,190],
[158,167,170,166,167,170,141,139,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,160,203,169,165,156,156,161],
[176,0,190,182,221,171,177,188,162,157],
[179,151,0,192,179,188,159,180,159,162],
[181,159,149,0,197,151,209,162,168,144],
[138,120,162,144,0,159,158,154,143,134],
[172,170,153,190,182,0,175,148,171,175],
[176,164,182,132,183,166,0,177,194,171],
[185,153,161,179,187,193,164,0,142,152],
[185,179,182,173,198,170,147,199,0,141],
[180,184,179,197,207,166,170,189,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,184,211,152,190,196,222,221,198],
[124,0,165,191,153,155,176,148,211,180],
[157,176,0,201,151,188,164,202,198,190],
[130,150,140,0,139,163,150,133,208,165],
[189,188,190,202,0,182,144,179,167,179],
[151,186,153,178,159,0,166,211,165,143],
[145,165,177,191,197,175,0,178,195,166],
[119,193,139,208,162,130,163,0,166,176],
[120,130,143,133,174,176,146,175,0,119],
[143,161,151,176,162,198,175,165,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,134,106,109,154,140,128,118,126],
[195,0,160,151,155,173,177,148,163,155],
[207,181,0,182,164,192,191,168,169,175],
[235,190,159,0,166,185,198,171,165,175],
[232,186,177,175,0,162,189,167,160,179],
[187,168,149,156,179,0,173,160,164,166],
[201,164,150,143,152,168,0,159,152,149],
[213,193,173,170,174,181,182,0,173,190],
[223,178,172,176,181,177,189,168,0,189],
[215,186,166,166,162,175,192,151,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,184,178,169,174,177,175,179,191],
[155,0,159,158,159,159,157,156,154,172],
[157,182,0,165,164,164,169,155,151,168],
[163,183,176,0,170,164,172,163,157,173],
[172,182,177,171,0,164,179,169,168,183],
[167,182,177,177,177,0,165,169,166,181],
[164,184,172,169,162,176,0,166,166,180],
[166,185,186,178,172,172,175,0,175,181],
[162,187,190,184,173,175,175,166,0,180],
[150,169,173,168,158,160,161,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,190,183,164,189,173,164,162],
[170,0,165,175,174,153,195,158,153,157],
[168,176,0,186,186,171,191,167,170,163],
[151,166,155,0,164,156,177,145,145,169],
[158,167,155,177,0,155,172,155,165,151],
[177,188,170,185,186,0,191,176,178,171],
[152,146,150,164,169,150,0,146,153,148],
[168,183,174,196,186,165,195,0,170,159],
[177,188,171,196,176,163,188,171,0,166],
[179,184,178,172,190,170,193,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,180,190,167,176,161,173,174,172],
[151,0,174,154,167,155,152,164,159,163],
[161,167,0,169,154,159,156,173,163,163],
[151,187,172,0,161,164,177,162,162,187],
[174,174,187,180,0,162,171,183,169,183],
[165,186,182,177,179,0,181,187,171,179],
[180,189,185,164,170,160,0,181,157,175],
[168,177,168,179,158,154,160,0,158,182],
[167,182,178,179,172,170,184,183,0,193],
[169,178,178,154,158,162,166,159,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,179,167,159,157,158,144,149,178],
[196,0,190,178,193,167,170,162,183,172],
[162,151,0,175,199,161,179,171,162,176],
[174,163,166,0,176,166,172,159,165,160],
[182,148,142,165,0,149,145,153,172,144],
[184,174,180,175,192,0,162,173,183,168],
[183,171,162,169,196,179,0,172,173,184],
[197,179,170,182,188,168,169,0,203,185],
[192,158,179,176,169,158,168,138,0,157],
[163,169,165,181,197,173,157,156,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,169,184,149,200,200,201,198,217],
[156,0,147,186,170,147,149,169,169,177],
[172,194,0,213,185,143,169,184,238,183],
[157,155,128,0,170,158,118,150,179,209],
[192,171,156,171,0,140,178,186,184,191],
[141,194,198,183,201,0,188,209,198,238],
[141,192,172,223,163,153,0,160,174,205],
[140,172,157,191,155,132,181,0,186,172],
[143,172,103,162,157,143,167,155,0,182],
[124,164,158,132,150,103,136,169,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,125,133,157,160,130,131,183,159],
[154,0,166,146,153,168,159,159,139,163],
[216,175,0,170,179,192,183,188,177,189],
[208,195,171,0,190,169,173,175,199,192],
[184,188,162,151,0,180,172,185,172,205],
[181,173,149,172,161,0,176,154,173,186],
[211,182,158,168,169,165,0,170,159,177],
[210,182,153,166,156,187,171,0,176,170],
[158,202,164,142,169,168,182,165,0,147],
[182,178,152,149,136,155,164,171,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,185,179,182,172,189,183,163,177],
[161,0,169,151,164,157,165,168,168,170],
[156,172,0,155,164,167,172,168,155,174],
[162,190,186,0,172,170,177,181,171,180],
[159,177,177,169,0,168,181,176,167,175],
[169,184,174,171,173,0,174,175,164,185],
[152,176,169,164,160,167,0,165,163,172],
[158,173,173,160,165,166,176,0,163,181],
[178,173,186,170,174,177,178,178,0,188],
[164,171,167,161,166,156,169,160,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,185,170,187,181,148,178,171,167],
[165,0,169,169,175,170,162,180,147,160],
[156,172,0,159,175,170,158,161,144,150],
[171,172,182,0,192,172,162,167,163,168],
[154,166,166,149,0,153,144,158,152,156],
[160,171,171,169,188,0,154,167,156,163],
[193,179,183,179,197,187,0,181,161,160],
[163,161,180,174,183,174,160,0,159,149],
[170,194,197,178,189,185,180,182,0,171],
[174,181,191,173,185,178,181,192,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,187,173,189,142,185,162,180],
[165,0,172,166,159,170,149,160,162,145],
[176,169,0,181,161,171,161,173,161,138],
[154,175,160,0,177,154,160,171,151,170],
[168,182,180,164,0,166,147,176,162,158],
[152,171,170,187,175,0,171,177,193,183],
[199,192,180,181,194,170,0,191,169,165],
[156,181,168,170,165,164,150,0,153,146],
[179,179,180,190,179,148,172,188,0,163],
[161,196,203,171,183,158,176,195,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,180,167,178,172,189,151,175,155],
[189,0,176,176,168,167,182,160,184,158],
[161,165,0,157,163,161,187,161,180,155],
[174,165,184,0,174,170,183,167,193,171],
[163,173,178,167,0,170,188,176,197,171],
[169,174,180,171,171,0,190,169,182,165],
[152,159,154,158,153,151,0,165,178,143],
[190,181,180,174,165,172,176,0,195,188],
[166,157,161,148,144,159,163,146,0,171],
[186,183,186,170,170,176,198,153,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,165,161,181,186,171,173,174],
[168,0,190,157,157,173,180,127,138,171],
[167,151,0,164,167,177,168,136,153,159],
[176,184,177,0,159,188,190,157,159,187],
[180,184,174,182,0,182,168,180,169,167],
[160,168,164,153,159,0,158,145,175,156],
[155,161,173,151,173,183,0,153,152,159],
[170,214,205,184,161,196,188,0,175,163],
[168,203,188,182,172,166,189,166,0,150],
[167,170,182,154,174,185,182,178,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,180,184,168,163,182,180,166,155],
[186,0,167,161,188,165,177,174,182,179],
[161,174,0,148,171,171,183,154,176,172],
[157,180,193,0,175,161,176,168,172,173],
[173,153,170,166,0,161,184,179,171,162],
[178,176,170,180,180,0,182,181,160,173],
[159,164,158,165,157,159,0,159,150,147],
[161,167,187,173,162,160,182,0,171,156],
[175,159,165,169,170,181,191,170,0,174],
[186,162,169,168,179,168,194,185,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,168,201,168,178,172,173,166],
[175,0,161,171,191,172,160,159,194,173],
[171,180,0,170,198,161,186,162,161,189],
[173,170,171,0,183,170,182,165,176,174],
[140,150,143,158,0,153,174,161,165,160],
[173,169,180,171,188,0,188,167,181,176],
[163,181,155,159,167,153,0,159,160,153],
[169,182,179,176,180,174,182,0,174,178],
[168,147,180,165,176,160,181,167,0,182],
[175,168,152,167,181,165,188,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,143,149,158,165,150,151,147,167],
[180,0,158,168,165,167,168,174,148,171],
[198,183,0,179,169,183,166,175,162,175],
[192,173,162,0,176,182,187,181,173,196],
[183,176,172,165,0,192,180,184,176,203],
[176,174,158,159,149,0,166,152,148,189],
[191,173,175,154,161,175,0,170,140,190],
[190,167,166,160,157,189,171,0,151,197],
[194,193,179,168,165,193,201,190,0,204],
[174,170,166,145,138,152,151,144,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,199,188,168,193,214,186,184,180],
[172,0,171,162,153,176,197,167,157,163],
[142,170,0,183,157,181,191,167,136,183],
[153,179,158,0,131,162,195,167,134,177],
[173,188,184,210,0,183,197,150,197,177],
[148,165,160,179,158,0,190,137,150,150],
[127,144,150,146,144,151,0,133,125,130],
[155,174,174,174,191,204,208,0,188,185],
[157,184,205,207,144,191,216,153,0,167],
[161,178,158,164,164,191,211,156,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,202,177,188,189,233,169,176,176],
[150,0,192,183,173,212,210,170,186,167],
[139,149,0,165,146,176,206,164,171,139],
[164,158,176,0,158,188,198,149,166,157],
[153,168,195,183,0,208,208,178,184,172],
[152,129,165,153,133,0,202,144,165,145],
[108,131,135,143,133,139,0,158,144,138],
[172,171,177,192,163,197,183,0,172,173],
[165,155,170,175,157,176,197,169,0,142],
[165,174,202,184,169,196,203,168,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,156,194,167,169,171,164,181,160],
[153,0,152,212,162,178,211,194,193,180],
[185,189,0,193,176,162,157,165,172,172],
[147,129,148,0,151,127,150,137,183,169],
[174,179,165,190,0,143,181,157,183,176],
[172,163,179,214,198,0,184,179,155,196],
[170,130,184,191,160,157,0,153,197,138],
[177,147,176,204,184,162,188,0,173,168],
[160,148,169,158,158,186,144,168,0,156],
[181,161,169,172,165,145,203,173,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,188,169,169,186,175,171,178,165],
[174,0,185,153,147,184,170,161,166,170],
[153,156,0,163,179,180,163,144,159,165],
[172,188,178,0,167,182,160,172,182,152],
[172,194,162,174,0,176,173,161,180,173],
[155,157,161,159,165,0,163,151,149,148],
[166,171,178,181,168,178,0,154,167,158],
[170,180,197,169,180,190,187,0,178,169],
[163,175,182,159,161,192,174,163,0,143],
[176,171,176,189,168,193,183,172,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,154,158,159,170,181,173,150,171],
[162,0,156,154,148,146,176,149,149,164],
[187,185,0,171,173,169,187,182,180,185],
[183,187,170,0,150,185,186,180,190,179],
[182,193,168,191,0,166,203,187,166,170],
[171,195,172,156,175,0,195,168,172,175],
[160,165,154,155,138,146,0,174,138,162],
[168,192,159,161,154,173,167,0,181,175],
[191,192,161,151,175,169,203,160,0,172],
[170,177,156,162,171,166,179,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,163,143,159,160,155,164,145],
[166,0,170,158,167,169,151,148,171,157],
[177,171,0,146,149,172,177,154,181,170],
[178,183,195,0,167,163,162,158,157,167],
[198,174,192,174,0,176,175,164,188,174],
[182,172,169,178,165,0,171,151,172,170],
[181,190,164,179,166,170,0,156,171,165],
[186,193,187,183,177,190,185,0,185,169],
[177,170,160,184,153,169,170,156,0,160],
[196,184,171,174,167,171,176,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,170,183,179,177,187,189,189],
[166,0,161,170,173,182,166,185,181,190],
[167,180,0,178,177,190,185,186,189,186],
[171,171,163,0,176,171,176,185,185,168],
[158,168,164,165,0,184,178,183,182,172],
[162,159,151,170,157,0,172,185,166,178],
[164,175,156,165,163,169,0,168,164,176],
[154,156,155,156,158,156,173,0,165,162],
[152,160,152,156,159,175,177,176,0,178],
[152,151,155,173,169,163,165,179,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,159,164,164,168,157,163,161],
[173,0,168,161,163,159,173,155,152,164],
[184,173,0,169,177,179,175,169,163,175],
[182,180,172,0,177,175,196,174,178,167],
[177,178,164,164,0,173,175,168,171,165],
[177,182,162,166,168,0,169,173,173,178],
[173,168,166,145,166,172,0,162,168,158],
[184,186,172,167,173,168,179,0,172,174],
[178,189,178,163,170,168,173,169,0,166],
[180,177,166,174,176,163,183,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,184,179,177,187,169,180,195,186],
[152,0,172,151,149,177,158,169,162,167],
[157,169,0,167,152,172,176,176,181,175],
[162,190,174,0,156,176,171,198,169,172],
[164,192,189,185,0,178,170,176,186,185],
[154,164,169,165,163,0,156,178,165,168],
[172,183,165,170,171,185,0,189,176,189],
[161,172,165,143,165,163,152,0,162,164],
[146,179,160,172,155,176,165,179,0,181],
[155,174,166,169,156,173,152,177,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,151,167,185,181,162,158,163,158],
[184,0,164,184,195,207,190,175,193,177],
[190,177,0,187,197,188,176,182,181,167],
[174,157,154,0,171,184,157,169,168,161],
[156,146,144,170,0,167,146,155,163,149],
[160,134,153,157,174,0,154,148,150,152],
[179,151,165,184,195,187,0,173,176,167],
[183,166,159,172,186,193,168,0,181,168],
[178,148,160,173,178,191,165,160,0,149],
[183,164,174,180,192,189,174,173,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,194,164,170,157,181,177,180,173],
[164,0,180,164,164,153,169,145,157,153],
[147,161,0,166,158,168,182,155,159,166],
[177,177,175,0,175,141,211,168,177,178],
[171,177,183,166,0,172,198,164,171,168],
[184,188,173,200,169,0,197,184,185,178],
[160,172,159,130,143,144,0,148,154,148],
[164,196,186,173,177,157,193,0,182,166],
[161,184,182,164,170,156,187,159,0,194],
[168,188,175,163,173,163,193,175,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,187,152,199,167,159,170,160,153],
[150,0,203,140,164,181,153,156,116,139],
[154,138,0,117,187,170,153,134,120,154],
[189,201,224,0,206,193,135,184,158,119],
[142,177,154,135,0,157,149,147,142,115],
[174,160,171,148,184,0,174,190,125,129],
[182,188,188,206,192,167,0,207,183,173],
[171,185,207,157,194,151,134,0,131,161],
[181,225,221,183,199,216,158,210,0,189],
[188,202,187,222,226,212,168,180,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,180,134,178,140,157,166,154,145],
[188,0,193,180,176,162,147,164,175,171],
[161,148,0,136,159,137,149,172,151,140],
[207,161,205,0,194,156,164,186,169,156],
[163,165,182,147,0,171,196,175,178,163],
[201,179,204,185,170,0,187,178,196,161],
[184,194,192,177,145,154,0,168,164,151],
[175,177,169,155,166,163,173,0,152,152],
[187,166,190,172,163,145,177,189,0,138],
[196,170,201,185,178,180,190,189,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,169,191,196,168,192,181,177,170],
[159,0,177,183,174,170,162,181,151,158],
[172,164,0,180,161,159,165,155,162,168],
[150,158,161,0,165,173,153,169,149,165],
[145,167,180,176,0,151,170,170,147,163],
[173,171,182,168,190,0,181,174,178,188],
[149,179,176,188,171,160,0,161,178,182],
[160,160,186,172,171,167,180,0,169,169],
[164,190,179,192,194,163,163,172,0,169],
[171,183,173,176,178,153,159,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,239,238,273,238,170,238,205,170],
[68,0,138,170,206,137,171,69,137,170],
[102,203,0,170,238,237,137,135,239,204],
[103,171,171,0,205,170,137,136,171,170],
[68,135,103,136,0,169,103,101,102,136],
[103,204,104,171,172,0,138,135,137,205],
[171,170,204,204,238,203,0,169,102,169],
[103,272,206,205,240,206,172,0,171,205],
[136,204,102,170,239,204,239,170,0,169],
[171,171,137,171,205,136,172,136,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,181,167,175,156,166,152,152],
[156,0,159,184,167,187,174,161,172,175],
[167,182,0,170,180,170,154,165,167,151],
[160,157,171,0,161,171,164,159,161,159],
[174,174,161,180,0,166,177,159,158,157],
[166,154,171,170,175,0,160,167,164,160],
[185,167,187,177,164,181,0,171,182,162],
[175,180,176,182,182,174,170,0,159,170],
[189,169,174,180,183,177,159,182,0,181],
[189,166,190,182,184,181,179,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,153,142,174,173,133,157,153,155],
[181,0,169,170,166,174,166,166,164,147],
[188,172,0,146,193,188,163,188,167,182],
[199,171,195,0,205,216,182,195,190,160],
[167,175,148,136,0,162,150,146,166,153],
[168,167,153,125,179,0,165,187,175,157],
[208,175,178,159,191,176,0,172,177,164],
[184,175,153,146,195,154,169,0,152,168],
[188,177,174,151,175,166,164,189,0,155],
[186,194,159,181,188,184,177,173,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,165,172,166,168,152,163,179,170],
[160,0,157,161,185,154,159,167,160,176],
[176,184,0,169,186,173,175,171,188,186],
[169,180,172,0,179,181,156,169,175,179],
[175,156,155,162,0,167,154,155,163,172],
[173,187,168,160,174,0,169,159,170,175],
[189,182,166,185,187,172,0,162,182,185],
[178,174,170,172,186,182,179,0,170,190],
[162,181,153,166,178,171,159,171,0,169],
[171,165,155,162,169,166,156,151,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,181,167,168,168,178,182,170,163],
[184,0,174,173,178,158,164,181,172,171],
[160,167,0,170,169,168,152,180,152,160],
[174,168,171,0,164,150,161,175,185,171],
[173,163,172,177,0,164,162,182,187,170],
[173,183,173,191,177,0,163,176,169,173],
[163,177,189,180,179,178,0,168,174,181],
[159,160,161,166,159,165,173,0,169,166],
[171,169,189,156,154,172,167,172,0,170],
[178,170,181,170,171,168,160,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,150,149,155,166,168,169,153],
[180,0,172,174,163,164,178,172,173,180],
[179,169,0,168,167,175,169,175,181,176],
[191,167,173,0,166,168,181,167,181,178],
[192,178,174,175,0,183,185,166,177,175],
[186,177,166,173,158,0,177,174,171,174],
[175,163,172,160,156,164,0,158,171,165],
[173,169,166,174,175,167,183,0,168,163],
[172,168,160,160,164,170,170,173,0,165],
[188,161,165,163,166,167,176,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,179,153,183,157,157,163,163,195],
[181,0,212,170,196,180,199,181,195,203],
[162,129,0,147,148,156,179,175,150,178],
[188,171,194,0,206,187,189,205,162,189],
[158,145,193,135,0,173,177,183,163,180],
[184,161,185,154,168,0,178,193,167,186],
[184,142,162,152,164,163,0,175,153,169],
[178,160,166,136,158,148,166,0,148,184],
[178,146,191,179,178,174,188,193,0,184],
[146,138,163,152,161,155,172,157,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,183,167,161,176,159,178,159,184],
[176,0,178,172,169,178,183,179,155,169],
[158,163,0,158,163,186,167,148,133,176],
[174,169,183,0,172,184,182,178,168,190],
[180,172,178,169,0,185,181,196,175,195],
[165,163,155,157,156,0,160,167,147,172],
[182,158,174,159,160,181,0,167,164,186],
[163,162,193,163,145,174,174,0,160,184],
[182,186,208,173,166,194,177,181,0,187],
[157,172,165,151,146,169,155,157,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,146,168,160,171,170,152,163,163],
[185,0,170,169,174,170,151,174,143,158],
[195,171,0,171,192,170,176,191,158,175],
[173,172,170,0,161,170,165,155,167,173],
[181,167,149,180,0,187,153,150,166,166],
[170,171,171,171,154,0,172,165,152,161],
[171,190,165,176,188,169,0,168,171,193],
[189,167,150,186,191,176,173,0,165,167],
[178,198,183,174,175,189,170,176,0,191],
[178,183,166,168,175,180,148,174,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,164,167,186,168,178,180,185],
[175,0,156,170,167,175,166,168,177,185],
[171,185,0,183,179,182,180,167,193,186],
[177,171,158,0,173,160,166,168,167,178],
[174,174,162,168,0,175,162,167,174,173],
[155,166,159,181,166,0,158,178,161,185],
[173,175,161,175,179,183,0,182,198,199],
[163,173,174,173,174,163,159,0,181,193],
[161,164,148,174,167,180,143,160,0,167],
[156,156,155,163,168,156,142,148,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,210,207,157,188,242,209,226,172],
[130,0,164,225,162,174,180,144,147,114],
[131,177,0,225,191,174,177,192,226,141],
[134,116,116,0,163,141,149,93,117,79],
[184,179,150,178,0,191,228,179,198,93],
[153,167,167,200,150,0,200,183,118,132],
[99,161,164,192,113,141,0,178,161,76],
[132,197,149,248,162,158,163,0,179,144],
[115,194,115,224,143,223,180,162,0,126],
[169,227,200,262,248,209,265,197,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,182,193,188,183,172,189,178,188],
[178,0,174,189,178,178,170,209,186,171],
[159,167,0,199,171,173,170,191,176,181],
[148,152,142,0,171,162,165,175,162,166],
[153,163,170,170,0,170,160,178,183,164],
[158,163,168,179,171,0,162,188,157,176],
[169,171,171,176,181,179,0,184,163,175],
[152,132,150,166,163,153,157,0,150,152],
[163,155,165,179,158,184,178,191,0,172],
[153,170,160,175,177,165,166,189,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,175,165,166,175,169,166,180],
[164,0,159,165,158,151,171,138,156,165],
[165,182,0,165,164,153,165,155,156,174],
[166,176,176,0,177,180,178,171,172,187],
[176,183,177,164,0,167,173,175,169,177],
[175,190,188,161,174,0,168,185,172,198],
[166,170,176,163,168,173,0,170,172,182],
[172,203,186,170,166,156,171,0,170,181],
[175,185,185,169,172,169,169,171,0,185],
[161,176,167,154,164,143,159,160,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,191,190,227,189,189,191,264,189],
[228,0,229,151,190,227,151,190,189,190],
[150,112,0,113,226,188,75,114,188,113],
[151,190,228,0,188,264,226,151,189,226],
[114,151,115,153,0,150,114,113,226,151],
[152,114,153,77,191,0,76,114,188,115],
[152,190,266,115,227,265,0,152,190,153],
[150,151,227,190,228,227,189,0,227,113],
[77,152,153,152,115,153,151,114,0,114],
[152,151,228,115,190,226,188,228,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,156,170,159,171,174,183,154,185],
[162,0,167,178,155,163,173,168,148,164],
[185,174,0,188,178,186,176,190,157,184],
[171,163,153,0,165,160,172,169,158,161],
[182,186,163,176,0,176,174,174,170,181],
[170,178,155,181,165,0,178,170,175,173],
[167,168,165,169,167,163,0,188,142,164],
[158,173,151,172,167,171,153,0,161,176],
[187,193,184,183,171,166,199,180,0,184],
[156,177,157,180,160,168,177,165,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,200,180,186,171,137,145,184,191],
[159,0,186,146,180,163,139,128,174,171],
[141,155,0,166,170,131,146,124,163,137],
[161,195,175,0,170,180,176,128,170,177],
[155,161,171,171,0,164,145,139,161,162],
[170,178,210,161,177,0,164,174,166,158],
[204,202,195,165,196,177,0,165,174,176],
[196,213,217,213,202,167,176,0,195,201],
[157,167,178,171,180,175,167,146,0,175],
[150,170,204,164,179,183,165,140,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,184,178,165,180,155,171,182,177],
[174,0,165,169,163,169,167,173,181,177],
[157,176,0,164,141,182,170,168,172,180],
[163,172,177,0,170,187,174,160,175,182],
[176,178,200,171,0,192,168,169,183,184],
[161,172,159,154,149,0,176,146,165,162],
[186,174,171,167,173,165,0,160,195,187],
[170,168,173,181,172,195,181,0,197,168],
[159,160,169,166,158,176,146,144,0,176],
[164,164,161,159,157,179,154,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,138,157,174,176,148,153,169,162],
[193,0,155,160,174,173,155,170,186,168],
[203,186,0,186,185,168,143,185,165,196],
[184,181,155,0,168,147,159,183,175,169],
[167,167,156,173,0,182,148,154,161,177],
[165,168,173,194,159,0,132,162,158,189],
[193,186,198,182,193,209,0,172,190,160],
[188,171,156,158,187,179,169,0,175,191],
[172,155,176,166,180,183,151,166,0,159],
[179,173,145,172,164,152,181,150,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,164,186,163,166,148,164,172,174],
[183,0,177,173,172,185,166,178,182,186],
[177,164,0,184,166,174,167,160,178,172],
[155,168,157,0,161,161,157,137,160,159],
[178,169,175,180,0,182,171,168,190,189],
[175,156,167,180,159,0,155,156,166,171],
[193,175,174,184,170,186,0,172,184,180],
[177,163,181,204,173,185,169,0,187,185],
[169,159,163,181,151,175,157,154,0,168],
[167,155,169,182,152,170,161,156,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,166,178,170,159,165,156,166],
[174,0,175,169,174,165,176,164,173,167],
[180,166,0,171,175,169,167,169,171,183],
[175,172,170,0,178,169,171,154,152,178],
[163,167,166,163,0,171,167,153,165,170],
[171,176,172,172,170,0,160,159,162,168],
[182,165,174,170,174,181,0,181,158,168],
[176,177,172,187,188,182,160,0,164,174],
[185,168,170,189,176,179,183,177,0,177],
[175,174,158,163,171,173,173,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,177,179,173,184,179,168,175],
[169,0,169,165,172,176,173,175,162,167],
[157,172,0,168,179,177,178,174,165,176],
[164,176,173,0,171,180,167,162,174,173],
[162,169,162,170,0,175,174,166,163,160],
[168,165,164,161,166,0,171,160,169,163],
[157,168,163,174,167,170,0,167,152,159],
[162,166,167,179,175,181,174,0,179,152],
[173,179,176,167,178,172,189,162,0,169],
[166,174,165,168,181,178,182,189,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,196,169,187,177,144,151,162,185],
[146,0,175,148,157,143,153,154,144,188],
[145,166,0,150,157,181,165,127,151,186],
[172,193,191,0,183,162,166,178,146,220],
[154,184,184,158,0,168,159,139,178,162],
[164,198,160,179,173,0,192,133,161,199],
[197,188,176,175,182,149,0,155,161,235],
[190,187,214,163,202,208,186,0,179,220],
[179,197,190,195,163,180,180,162,0,208],
[156,153,155,121,179,142,106,121,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,162,165,156,156,159,156,147,171],
[181,0,190,188,171,170,146,174,173,194],
[179,151,0,178,156,166,136,156,160,168],
[176,153,163,0,143,157,156,168,161,172],
[185,170,185,198,0,185,162,171,169,194],
[185,171,175,184,156,0,168,162,157,182],
[182,195,205,185,179,173,0,168,169,195],
[185,167,185,173,170,179,173,0,167,179],
[194,168,181,180,172,184,172,174,0,204],
[170,147,173,169,147,159,146,162,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,115,0,113,114,57,58,112,173],
[341,0,228,228,283,283,283,228,168,286],
[226,113,0,113,168,225,226,172,168,227],
[341,113,228,0,284,283,283,116,226,228],
[228,58,173,57,0,115,115,116,170,173],
[227,58,116,58,226,0,170,116,55,116],
[284,58,115,58,226,171,0,116,168,173],
[283,113,169,225,225,225,225,0,168,226],
[229,173,173,115,171,286,173,173,0,173],
[168,55,114,113,168,225,168,115,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,181,172,168,160,168,179,163,183],
[174,0,183,164,173,181,187,179,170,187],
[160,158,0,156,169,176,167,164,161,173],
[169,177,185,0,160,187,182,177,183,189],
[173,168,172,181,0,169,172,180,169,201],
[181,160,165,154,172,0,165,191,159,186],
[173,154,174,159,169,176,0,181,158,184],
[162,162,177,164,161,150,160,0,162,184],
[178,171,180,158,172,182,183,179,0,183],
[158,154,168,152,140,155,157,157,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,160,170,158,165,183,163,153,154],
[188,0,188,175,181,175,200,176,165,170],
[181,153,0,172,174,184,198,174,155,143],
[171,166,169,0,164,159,182,169,174,161],
[183,160,167,177,0,178,193,171,160,155],
[176,166,157,182,163,0,199,172,159,144],
[158,141,143,159,148,142,0,162,141,150],
[178,165,167,172,170,169,179,0,159,151],
[188,176,186,167,181,182,200,182,0,174],
[187,171,198,180,186,197,191,190,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,143,172,175,144,191,172,190,219],
[222,0,165,151,198,216,194,217,191,205],
[198,176,0,167,194,152,171,177,219,226],
[169,190,174,0,192,176,209,164,181,193],
[166,143,147,149,0,146,152,188,106,205],
[197,125,189,165,195,0,206,197,147,206],
[150,147,170,132,189,135,0,176,174,169],
[169,124,164,177,153,144,165,0,174,162],
[151,150,122,160,235,194,167,167,0,182],
[122,136,115,148,136,135,172,179,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,161,166,164,162,164,168,157],
[164,0,150,147,167,177,145,168,169,156],
[173,191,0,179,176,198,205,191,176,155],
[180,194,162,0,187,193,187,173,183,183],
[175,174,165,154,0,173,187,157,168,150],
[177,164,143,148,168,0,186,164,170,173],
[179,196,136,154,154,155,0,167,175,162],
[177,173,150,168,184,177,174,0,158,172],
[173,172,165,158,173,171,166,183,0,165],
[184,185,186,158,191,168,179,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,147,127,140,134,150,130,120,143],
[211,0,202,220,170,168,174,154,171,180],
[194,139,0,172,169,155,153,167,152,169],
[214,121,169,0,159,147,161,136,143,152],
[201,171,172,182,0,154,145,123,165,176],
[207,173,186,194,187,0,185,172,171,168],
[191,167,188,180,196,156,0,152,170,168],
[211,187,174,205,218,169,189,0,178,186],
[221,170,189,198,176,170,171,163,0,179],
[198,161,172,189,165,173,173,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,190,181,167,162,154,150,145,181],
[177,0,201,185,156,186,171,147,157,191],
[151,140,0,184,143,164,164,146,144,172],
[160,156,157,0,141,166,152,161,133,166],
[174,185,198,200,0,183,170,169,166,198],
[179,155,177,175,158,0,156,148,156,190],
[187,170,177,189,171,185,0,173,165,199],
[191,194,195,180,172,193,168,0,172,179],
[196,184,197,208,175,185,176,169,0,188],
[160,150,169,175,143,151,142,162,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,181,158,162,167,174,171,168],
[159,0,170,173,164,158,165,169,176,159],
[174,171,0,177,175,177,177,185,169,181],
[160,168,164,0,161,170,173,169,170,166],
[183,177,166,180,0,172,183,177,179,171],
[179,183,164,171,169,0,176,176,187,178],
[174,176,164,168,158,165,0,179,172,183],
[167,172,156,172,164,165,162,0,170,163],
[170,165,172,171,162,154,169,171,0,166],
[173,182,160,175,170,163,158,178,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,199,175,152,151,165,184,185,168],
[157,0,197,176,172,157,171,186,180,156],
[142,144,0,146,136,145,150,161,165,136],
[166,165,195,0,159,162,169,193,187,162],
[189,169,205,182,0,180,166,200,191,176],
[190,184,196,179,161,0,173,187,197,155],
[176,170,191,172,175,168,0,186,183,158],
[157,155,180,148,141,154,155,0,176,146],
[156,161,176,154,150,144,158,165,0,153],
[173,185,205,179,165,186,183,195,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,197,170,168,178,180,174,168,172],
[164,0,172,160,150,168,161,165,157,162],
[144,169,0,156,136,152,160,149,146,150],
[171,181,185,0,170,173,169,168,165,162],
[173,191,205,171,0,177,188,190,170,180],
[163,173,189,168,164,0,172,169,158,162],
[161,180,181,172,153,169,0,153,164,167],
[167,176,192,173,151,172,188,0,171,182],
[173,184,195,176,171,183,177,170,0,181],
[169,179,191,179,161,179,174,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,188,186,187,175,179,191,171],
[171,0,175,189,180,184,183,181,181,164],
[161,166,0,178,163,169,175,190,184,184],
[153,152,163,0,145,154,155,148,180,150],
[155,161,178,196,0,177,177,176,198,188],
[154,157,172,187,164,0,173,166,174,179],
[166,158,166,186,164,168,0,190,194,164],
[162,160,151,193,165,175,151,0,179,157],
[150,160,157,161,143,167,147,162,0,170],
[170,177,157,191,153,162,177,184,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,158,168,158,147,195,193,170,211],
[148,0,215,188,172,182,195,199,185,237],
[183,126,0,170,178,167,171,189,136,214],
[173,153,171,0,159,173,144,207,155,195],
[183,169,163,182,0,199,222,211,186,230],
[194,159,174,168,142,0,194,184,141,209],
[146,146,170,197,119,147,0,197,155,202],
[148,142,152,134,130,157,144,0,110,167],
[171,156,205,186,155,200,186,231,0,220],
[130,104,127,146,111,132,139,174,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,145,175,168,172,176,158,170,175],
[172,0,149,170,172,185,187,163,168,194],
[196,192,0,192,161,186,185,166,198,201],
[166,171,149,0,167,156,173,143,166,168],
[173,169,180,174,0,182,158,154,185,177],
[169,156,155,185,159,0,186,171,186,180],
[165,154,156,168,183,155,0,151,143,178],
[183,178,175,198,187,170,190,0,183,187],
[171,173,143,175,156,155,198,158,0,195],
[166,147,140,173,164,161,163,154,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,171,167,161,179,186,186,165,171],
[187,0,161,181,177,180,207,187,182,189],
[170,180,0,177,184,172,191,182,177,178],
[174,160,164,0,164,176,185,173,166,166],
[180,164,157,177,0,169,187,182,171,171],
[162,161,169,165,172,0,179,169,173,154],
[155,134,150,156,154,162,0,165,155,159],
[155,154,159,168,159,172,176,0,171,163],
[176,159,164,175,170,168,186,170,0,159],
[170,152,163,175,170,187,182,178,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,173,173,159,152,163,160,189,170],
[169,0,166,176,148,165,160,157,173,158],
[168,175,0,172,161,161,158,165,171,164],
[168,165,169,0,147,143,137,146,161,141],
[182,193,180,194,0,176,166,173,188,175],
[189,176,180,198,165,0,172,174,180,168],
[178,181,183,204,175,169,0,154,175,168],
[181,184,176,195,168,167,187,0,185,167],
[152,168,170,180,153,161,166,156,0,165],
[171,183,177,200,166,173,173,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,199,199,186,207,179,169,179,163],
[160,0,187,166,184,173,202,181,175,173],
[142,154,0,235,144,164,172,151,160,153],
[142,175,106,0,135,165,121,99,107,142],
[155,157,197,206,0,173,168,162,187,146],
[134,168,177,176,168,0,188,158,206,190],
[162,139,169,220,173,153,0,143,179,153],
[172,160,190,242,179,183,198,0,198,171],
[162,166,181,234,154,135,162,143,0,155],
[178,168,188,199,195,151,188,170,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,178,202,170,189,197,207,202],
[164,0,164,158,195,164,146,161,189,172],
[165,177,0,153,173,181,208,157,193,170],
[163,183,188,0,194,172,175,172,202,186],
[139,146,168,147,0,150,160,148,183,159],
[171,177,160,169,191,0,185,183,204,196],
[152,195,133,166,181,156,0,162,205,175],
[144,180,184,169,193,158,179,0,199,182],
[134,152,148,139,158,137,136,142,0,155],
[139,169,171,155,182,145,166,159,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,169,168,182,171,167,168,164,170],
[181,0,176,174,165,174,164,172,171,187],
[172,165,0,174,173,178,176,175,169,183],
[173,167,167,0,168,165,164,180,155,172],
[159,176,168,173,0,165,165,175,163,167],
[170,167,163,176,176,0,172,177,166,171],
[174,177,165,177,176,169,0,181,168,171],
[173,169,166,161,166,164,160,0,176,172],
[177,170,172,186,178,175,173,165,0,184],
[171,154,158,169,174,170,170,169,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,181,190,161,189,179,224,184,199],
[109,0,155,180,143,206,173,206,149,171],
[160,186,0,142,178,202,170,213,183,170],
[151,161,199,0,160,185,163,213,211,180],
[180,198,163,181,0,188,174,231,192,218],
[152,135,139,156,153,0,163,197,152,163],
[162,168,171,178,167,178,0,185,183,144],
[117,135,128,128,110,144,156,0,123,130],
[157,192,158,130,149,189,158,218,0,184],
[142,170,171,161,123,178,197,211,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,167,171,177,192,171,179,180],
[164,0,170,161,166,176,174,163,167,169],
[169,171,0,168,159,174,174,164,169,181],
[174,180,173,0,160,189,189,167,175,169],
[170,175,182,181,0,166,184,169,186,176],
[164,165,167,152,175,0,172,162,177,157],
[149,167,167,152,157,169,0,147,174,171],
[170,178,177,174,172,179,194,0,179,178],
[162,174,172,166,155,164,167,162,0,164],
[161,172,160,172,165,184,170,163,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,175,172,179,177,158,189,168,171],
[155,0,179,172,176,172,161,179,161,162],
[166,162,0,163,178,164,149,184,160,162],
[169,169,178,0,185,175,159,183,169,159],
[162,165,163,156,0,167,146,178,166,160],
[164,169,177,166,174,0,159,185,158,163],
[183,180,192,182,195,182,0,190,168,186],
[152,162,157,158,163,156,151,0,147,157],
[173,180,181,172,175,183,173,194,0,168],
[170,179,179,182,181,178,155,184,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,163,169,158,155,186,176,163],
[163,0,166,157,176,171,166,183,171,155],
[171,175,0,187,192,177,171,196,183,156],
[178,184,154,0,179,172,164,178,170,163],
[172,165,149,162,0,161,159,198,170,176],
[183,170,164,169,180,0,162,204,175,178],
[186,175,170,177,182,179,0,194,180,170],
[155,158,145,163,143,137,147,0,152,149],
[165,170,158,171,171,166,161,189,0,157],
[178,186,185,178,165,163,171,192,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,185,186,173,143,163,174,163,153],
[175,0,181,183,160,179,173,180,185,172],
[156,160,0,171,150,147,167,160,163,156],
[155,158,170,0,165,152,156,156,168,158],
[168,181,191,176,0,164,156,176,183,178],
[198,162,194,189,177,0,174,189,171,168],
[178,168,174,185,185,167,0,168,178,176],
[167,161,181,185,165,152,173,0,190,164],
[178,156,178,173,158,170,163,151,0,153],
[188,169,185,183,163,173,165,177,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,146,146,245,245,146,98,197,146],
[197,0,146,197,149,197,149,149,149,149],
[195,195,0,243,147,195,243,147,147,195],
[195,144,98,0,147,149,194,146,197,197],
[96,192,194,194,0,194,194,194,98,146],
[96,144,146,192,147,0,194,146,146,194],
[195,192,98,147,147,147,0,147,149,99],
[243,192,194,195,147,195,194,0,245,197],
[144,192,194,144,243,195,192,96,0,144],
[195,192,146,144,195,147,242,144,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,157,165,179,159,159,159,178,169],
[179,0,177,180,179,162,176,176,182,154],
[184,164,0,166,179,168,174,179,167,172],
[176,161,175,0,173,176,179,171,171,172],
[162,162,162,168,0,173,169,172,179,169],
[182,179,173,165,168,0,172,166,175,160],
[182,165,167,162,172,169,0,167,164,165],
[182,165,162,170,169,175,174,0,175,164],
[163,159,174,170,162,166,177,166,0,165],
[172,187,169,169,172,181,176,177,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,185,173,168,156,184,174,171],
[171,0,173,182,164,165,171,173,170,170],
[169,168,0,177,167,166,162,172,161,184],
[156,159,164,0,158,155,136,152,159,162],
[168,177,174,183,0,165,148,171,161,176],
[173,176,175,186,176,0,156,182,165,175],
[185,170,179,205,193,185,0,182,185,175],
[157,168,169,189,170,159,159,0,163,186],
[167,171,180,182,180,176,156,178,0,181],
[170,171,157,179,165,166,166,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,173,171,161,162,173,158,178,175],
[155,0,161,144,157,153,157,154,147,136],
[168,180,0,164,165,171,173,173,165,161],
[170,197,177,0,180,176,184,174,175,172],
[180,184,176,161,0,156,168,183,173,160],
[179,188,170,165,185,0,173,174,177,171],
[168,184,168,157,173,168,0,166,156,172],
[183,187,168,167,158,167,175,0,187,161],
[163,194,176,166,168,164,185,154,0,157],
[166,205,180,169,181,170,169,180,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,169,188,186,182,187,184,174],
[168,0,177,171,185,173,181,175,185,179],
[173,164,0,168,179,170,170,162,169,151],
[172,170,173,0,180,165,193,173,186,176],
[153,156,162,161,0,159,160,173,170,158],
[155,168,171,176,182,0,173,172,166,166],
[159,160,171,148,181,168,0,162,184,162],
[154,166,179,168,168,169,179,0,178,163],
[157,156,172,155,171,175,157,163,0,168],
[167,162,190,165,183,175,179,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,214,153,155,125,217,125,153,215],
[221,0,221,187,189,158,219,156,219,249],
[127,120,0,92,124,95,156,94,122,186],
[188,154,249,0,155,188,277,186,185,247],
[186,152,217,186,0,154,281,92,154,216],
[216,183,246,153,187,0,279,156,184,216],
[124,122,185,64,60,62,0,93,153,152],
[216,185,247,155,249,185,248,0,246,248],
[188,122,219,156,187,157,188,95,0,217],
[126,92,155,94,125,125,189,93,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,157,187,174,183,159,196,160,169],
[181,0,171,193,178,166,170,196,192,178],
[184,170,0,190,188,184,182,182,181,169],
[154,148,151,0,172,166,183,173,148,150],
[167,163,153,169,0,165,174,152,153,156],
[158,175,157,175,176,0,169,155,173,179],
[182,171,159,158,167,172,0,169,151,177],
[145,145,159,168,189,186,172,0,166,159],
[181,149,160,193,188,168,190,175,0,170],
[172,163,172,191,185,162,164,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,172,168,169,152,164,162,169,164],
[184,0,166,158,179,166,170,181,166,174],
[169,175,0,166,173,166,180,167,164,161],
[173,183,175,0,174,169,178,172,175,166],
[172,162,168,167,0,165,174,168,177,162],
[189,175,175,172,176,0,183,176,165,165],
[177,171,161,163,167,158,0,164,170,160],
[179,160,174,169,173,165,177,0,180,168],
[172,175,177,166,164,176,171,161,0,161],
[177,167,180,175,179,176,181,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,192,189,175,172,171,196,184,170],
[160,0,173,180,163,171,163,172,169,162],
[149,168,0,163,159,171,162,161,162,160],
[152,161,178,0,171,158,166,170,158,147],
[166,178,182,170,0,172,168,176,175,164],
[169,170,170,183,169,0,162,178,182,161],
[170,178,179,175,173,179,0,168,195,174],
[145,169,180,171,165,163,173,0,168,155],
[157,172,179,183,166,159,146,173,0,168],
[171,179,181,194,177,180,167,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,159,179,178,159,161,163,152],
[161,0,156,152,167,155,162,159,154,154],
[167,185,0,177,165,165,168,145,173,169],
[182,189,164,0,174,169,185,177,175,167],
[162,174,176,167,0,180,188,180,178,174],
[163,186,176,172,161,0,169,162,164,173],
[182,179,173,156,153,172,0,149,159,156],
[180,182,196,164,161,179,192,0,173,172],
[178,187,168,166,163,177,182,168,0,163],
[189,187,172,174,167,168,185,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,226,189,228,228,187,152,189,187],
[113,0,74,152,228,152,189,115,152,187],
[115,267,0,230,228,191,226,152,228,187],
[152,189,111,0,228,191,150,152,226,150],
[113,113,113,113,0,111,150,37,150,189],
[113,189,150,150,230,0,189,152,189,189],
[154,152,115,191,191,152,0,154,191,189],
[189,226,189,189,304,189,187,0,152,263],
[152,189,113,115,191,152,150,189,0,226],
[154,154,154,191,152,152,152,78,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,135,182,153,157,175,179,156,148],
[171,0,190,196,181,169,196,178,170,178],
[206,151,0,198,157,168,202,186,162,192],
[159,145,143,0,158,153,165,193,173,157],
[188,160,184,183,0,174,188,189,157,173],
[184,172,173,188,167,0,193,185,166,167],
[166,145,139,176,153,148,0,139,154,156],
[162,163,155,148,152,156,202,0,163,132],
[185,171,179,168,184,175,187,178,0,174],
[193,163,149,184,168,174,185,209,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,175,180,166,183,167,189,162,172],
[162,0,177,174,173,166,175,185,147,155],
[166,164,0,154,167,165,185,180,155,152],
[161,167,187,0,167,180,174,185,164,160],
[175,168,174,174,0,168,176,175,166,164],
[158,175,176,161,173,0,183,183,171,154],
[174,166,156,167,165,158,0,164,145,139],
[152,156,161,156,166,158,177,0,152,136],
[179,194,186,177,175,170,196,189,0,158],
[169,186,189,181,177,187,202,205,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,158,170,146,164,174,166,165],
[163,0,169,152,171,172,173,170,163,146],
[172,172,0,171,167,163,183,175,171,157],
[183,189,170,0,175,176,181,177,178,174],
[171,170,174,166,0,166,181,179,161,170],
[195,169,178,165,175,0,188,177,181,168],
[177,168,158,160,160,153,0,163,152,149],
[167,171,166,164,162,164,178,0,166,160],
[175,178,170,163,180,160,189,175,0,164],
[176,195,184,167,171,173,192,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,166,177,177,182,189,171,175],
[175,0,188,178,173,186,187,197,182,159],
[171,153,0,164,168,167,170,175,160,161],
[175,163,177,0,188,198,169,203,176,183],
[164,168,173,153,0,170,163,170,167,165],
[164,155,174,143,171,0,160,192,159,154],
[159,154,171,172,178,181,0,183,171,177],
[152,144,166,138,171,149,158,0,151,161],
[170,159,181,165,174,182,170,190,0,170],
[166,182,180,158,176,187,164,180,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,144,181,187,156,169,155,147,200],
[191,0,151,186,178,171,180,174,164,196],
[197,190,0,196,206,170,186,183,174,206],
[160,155,145,0,175,167,178,160,158,195],
[154,163,135,166,0,162,155,163,157,176],
[185,170,171,174,179,0,182,176,177,190],
[172,161,155,163,186,159,0,161,166,162],
[186,167,158,181,178,165,180,0,146,195],
[194,177,167,183,184,164,175,195,0,194],
[141,145,135,146,165,151,179,146,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,147,148,138,143,162,189,189,149],
[170,0,169,165,153,170,179,183,210,165],
[194,172,0,183,150,152,198,177,189,151],
[193,176,158,0,164,172,209,192,198,160],
[203,188,191,177,0,161,200,188,211,181],
[198,171,189,169,180,0,187,189,201,154],
[179,162,143,132,141,154,0,169,172,134],
[152,158,164,149,153,152,172,0,189,134],
[152,131,152,143,130,140,169,152,0,130],
[192,176,190,181,160,187,207,207,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,134,125,125,126,167,109,95,84],
[233,0,176,180,109,139,192,149,165,150],
[207,165,0,208,151,167,165,178,139,137],
[216,161,133,0,162,180,204,147,163,149],
[216,232,190,179,0,154,219,149,137,178],
[215,202,174,161,187,0,203,118,145,150],
[174,149,176,137,122,138,0,149,96,151],
[232,192,163,194,192,223,192,0,191,154],
[246,176,202,178,204,196,245,150,0,179],
[257,191,204,192,163,191,190,187,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,180,130,161,110,146,144,128,123],
[180,0,179,165,182,164,202,180,183,146],
[161,162,0,181,177,219,202,199,201,182],
[211,176,160,0,229,198,199,196,178,212],
[180,159,164,112,0,112,147,146,164,144],
[231,177,122,143,229,0,164,125,198,195],
[195,139,139,142,194,177,0,174,196,157],
[197,161,142,145,195,216,167,0,142,195],
[213,158,140,163,177,143,145,199,0,180],
[218,195,159,129,197,146,184,146,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,188,171,193,183,178,181,189,160],
[156,0,200,176,183,189,174,180,173,181],
[153,141,0,158,182,169,156,185,179,137],
[170,165,183,0,185,171,191,165,174,175],
[148,158,159,156,0,171,171,171,166,148],
[158,152,172,170,170,0,161,169,166,153],
[163,167,185,150,170,180,0,171,174,147],
[160,161,156,176,170,172,170,0,163,151],
[152,168,162,167,175,175,167,178,0,161],
[181,160,204,166,193,188,194,190,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,178,171,178,163,171,173,159,157],
[180,0,167,162,173,164,166,171,165,170],
[163,174,0,161,168,168,165,167,165,151],
[170,179,180,0,180,166,172,165,176,157],
[163,168,173,161,0,161,174,158,168,144],
[178,177,173,175,180,0,162,162,182,146],
[170,175,176,169,167,179,0,170,174,164],
[168,170,174,176,183,179,171,0,173,165],
[182,176,176,165,173,159,167,168,0,171],
[184,171,190,184,197,195,177,176,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,168,170,172,181,177,175,159],
[178,0,176,187,181,186,188,181,186,167],
[178,165,0,176,171,183,180,174,172,168],
[173,154,165,0,166,169,179,174,189,177],
[171,160,170,175,0,170,172,171,161,170],
[169,155,158,172,171,0,162,176,171,163],
[160,153,161,162,169,179,0,159,164,155],
[164,160,167,167,170,165,182,0,171,166],
[166,155,169,152,180,170,177,170,0,159],
[182,174,173,164,171,178,186,175,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,153,168,172,179,171,153,139],
[173,0,174,161,172,187,177,159,149,158],
[176,167,0,166,170,191,194,173,173,152],
[188,180,175,0,170,197,189,167,159,160],
[173,169,171,171,0,179,179,164,148,152],
[169,154,150,144,162,0,167,164,144,145],
[162,164,147,152,162,174,0,171,147,150],
[170,182,168,174,177,177,170,0,154,171],
[188,192,168,182,193,197,194,187,0,177],
[202,183,189,181,189,196,191,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,168,174,149,142,151,152,167],
[172,0,170,168,161,156,162,170,162,165],
[181,171,0,171,152,154,153,164,152,173],
[173,173,170,0,154,168,148,175,151,165],
[167,180,189,187,0,168,160,164,170,170],
[192,185,187,173,173,0,170,160,166,188],
[199,179,188,193,181,171,0,166,167,180],
[190,171,177,166,177,181,175,0,171,168],
[189,179,189,190,171,175,174,170,0,170],
[174,176,168,176,171,153,161,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,189,179,177,170,184,174,191,172],
[175,0,190,171,193,166,186,172,177,171],
[152,151,0,180,166,172,164,149,167,155],
[162,170,161,0,174,167,172,167,166,170],
[164,148,175,167,0,171,164,161,162,146],
[171,175,169,174,170,0,175,159,168,159],
[157,155,177,169,177,166,0,172,164,170],
[167,169,192,174,180,182,169,0,171,168],
[150,164,174,175,179,173,177,170,0,186],
[169,170,186,171,195,182,171,173,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,191,156,161,175,168,161,175,187],
[165,0,167,148,164,160,148,152,154,168],
[150,174,0,163,161,162,154,162,171,179],
[185,193,178,0,176,181,177,169,182,195],
[180,177,180,165,0,167,165,173,172,190],
[166,181,179,160,174,0,169,165,171,169],
[173,193,187,164,176,172,0,177,165,189],
[180,189,179,172,168,176,164,0,184,180],
[166,187,170,159,169,170,176,157,0,179],
[154,173,162,146,151,172,152,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,170,175,174,161,160,151,165,165],
[176,0,187,149,176,178,145,151,157,167],
[171,154,0,156,173,147,154,153,158,163],
[166,192,185,0,179,191,166,174,165,186],
[167,165,168,162,0,158,160,153,159,178],
[180,163,194,150,183,0,164,169,168,181],
[181,196,187,175,181,177,0,165,189,195],
[190,190,188,167,188,172,176,0,180,184],
[176,184,183,176,182,173,152,161,0,172],
[176,174,178,155,163,160,146,157,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,183,219,182,184,208,186,197,189],
[178,0,198,187,192,172,216,168,174,182],
[158,143,0,183,154,134,193,144,123,147],
[122,154,158,0,168,130,164,131,171,134],
[159,149,187,173,0,158,205,154,157,163],
[157,169,207,211,183,0,175,170,191,188],
[133,125,148,177,136,166,0,165,169,170],
[155,173,197,210,187,171,176,0,179,189],
[144,167,218,170,184,150,172,162,0,170],
[152,159,194,207,178,153,171,152,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,176,175,181,170,171,184,183],
[172,0,189,167,163,170,155,165,182,174],
[168,152,0,154,163,161,152,173,166,169],
[165,174,187,0,193,186,178,178,144,170],
[166,178,178,148,0,163,151,175,157,164],
[160,171,180,155,178,0,173,200,178,185],
[171,186,189,163,190,168,0,174,180,180],
[170,176,168,163,166,141,167,0,180,179],
[157,159,175,197,184,163,161,161,0,172],
[158,167,172,171,177,156,161,162,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,124,183,186,92,122,151,94,124],
[248,0,155,215,276,155,248,183,217,215],
[217,186,0,183,246,186,154,152,155,280],
[158,126,158,0,249,156,186,153,157,190],
[155,65,95,92,0,156,122,155,92,158],
[249,186,155,185,185,0,216,185,125,187],
[219,93,187,155,219,125,0,186,124,219],
[190,158,189,188,186,156,155,0,159,189],
[247,124,186,184,249,216,217,182,0,218],
[217,126,61,151,183,154,122,152,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,176,151,184,184,141,134,169],
[162,0,168,174,149,145,193,145,173,133],
[173,173,0,173,142,123,193,168,141,183],
[165,167,168,0,143,158,171,166,148,184],
[190,192,199,198,0,172,180,175,151,177],
[157,196,218,183,169,0,190,152,153,198],
[157,148,148,170,161,151,0,146,162,152],
[200,196,173,175,166,189,195,0,163,181],
[207,168,200,193,190,188,179,178,0,194],
[172,208,158,157,164,143,189,160,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,145,157,150,142,150,155,185,149],
[182,0,185,169,165,160,194,168,181,170],
[196,156,0,183,140,173,196,149,156,146],
[184,172,158,0,153,159,167,164,177,160],
[191,176,201,188,0,170,186,173,207,185],
[199,181,168,182,171,0,206,156,197,173],
[191,147,145,174,155,135,0,160,163,151],
[186,173,192,177,168,185,181,0,172,166],
[156,160,185,164,134,144,178,169,0,158],
[192,171,195,181,156,168,190,175,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,169,174,166,186,184,188,171],
[159,0,180,152,177,158,175,176,190,184],
[164,161,0,159,169,152,154,175,178,170],
[172,189,182,0,169,174,175,185,192,171],
[167,164,172,172,0,172,169,180,176,167],
[175,183,189,167,169,0,179,175,188,190],
[155,166,187,166,172,162,0,173,175,181],
[157,165,166,156,161,166,168,0,176,151],
[153,151,163,149,165,153,166,165,0,162],
[170,157,171,170,174,151,160,190,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,182,177,176,197,184,201,167,177],
[154,0,156,161,152,168,159,176,166,168],
[159,185,0,175,169,170,166,191,157,171],
[164,180,166,0,157,175,172,183,163,158],
[165,189,172,184,0,179,174,193,171,172],
[144,173,171,166,162,0,170,160,155,154],
[157,182,175,169,167,171,0,192,165,165],
[140,165,150,158,148,181,149,0,152,171],
[174,175,184,178,170,186,176,189,0,167],
[164,173,170,183,169,187,176,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,158,169,178,165,166,165,160,176],
[176,0,175,178,183,180,162,175,177,177],
[183,166,0,176,187,179,164,169,177,188],
[172,163,165,0,173,153,171,168,179,173],
[163,158,154,168,0,157,159,169,168,156],
[176,161,162,188,184,0,163,178,190,198],
[175,179,177,170,182,178,0,171,174,173],
[176,166,172,173,172,163,170,0,177,170],
[181,164,164,162,173,151,167,164,0,185],
[165,164,153,168,185,143,168,171,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,172,174,168,171,161,172,170,175],
[174,0,168,159,161,173,167,165,166,163],
[169,173,0,168,171,155,170,157,171,158],
[167,182,173,0,172,178,180,169,157,168],
[173,180,170,169,0,167,177,180,163,170],
[170,168,186,163,174,0,176,169,167,179],
[180,174,171,161,164,165,0,170,168,183],
[169,176,184,172,161,172,171,0,177,183],
[171,175,170,184,178,174,173,164,0,167],
[166,178,183,173,171,162,158,158,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,164,184,164,163,176,168,186],
[168,0,148,173,203,206,176,196,201,162],
[174,193,0,176,158,163,165,169,165,160],
[177,168,165,0,196,195,183,175,192,187],
[157,138,183,145,0,155,175,168,162,158],
[177,135,178,146,186,0,185,210,177,191],
[178,165,176,158,166,156,0,181,148,183],
[165,145,172,166,173,131,160,0,151,141],
[173,140,176,149,179,164,193,190,0,177],
[155,179,181,154,183,150,158,200,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,178,182,179,179,173,174,170],
[157,0,171,174,180,158,166,174,173,168],
[166,170,0,173,178,166,180,176,172,169],
[163,167,168,0,175,156,162,165,165,163],
[159,161,163,166,0,168,182,166,178,173],
[162,183,175,185,173,0,182,174,178,168],
[162,175,161,179,159,159,0,167,166,159],
[168,167,165,176,175,167,174,0,176,176],
[167,168,169,176,163,163,175,165,0,176],
[171,173,172,178,168,173,182,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,179,170,183,190,174,177,171,186],
[157,0,160,157,155,172,154,172,151,178],
[162,181,0,162,164,180,176,179,163,180],
[171,184,179,0,186,180,186,178,168,199],
[158,186,177,155,0,178,167,176,165,162],
[151,169,161,161,163,0,162,165,161,177],
[167,187,165,155,174,179,0,179,156,176],
[164,169,162,163,165,176,162,0,142,176],
[170,190,178,173,176,180,185,199,0,176],
[155,163,161,142,179,164,165,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,165,152,158,150,153,134,152,161],
[190,0,187,174,189,160,175,171,171,184],
[176,154,0,153,166,149,153,147,155,171],
[189,167,188,0,198,168,172,171,174,190],
[183,152,175,143,0,139,156,160,156,173],
[191,181,192,173,202,0,182,165,182,197],
[188,166,188,169,185,159,0,158,183,174],
[207,170,194,170,181,176,183,0,183,184],
[189,170,186,167,185,159,158,158,0,158],
[180,157,170,151,168,144,167,157,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,172,148,161,179,156,190,146,190],
[175,0,178,170,177,160,164,174,180,154],
[169,163,0,169,166,175,155,182,148,151],
[193,171,172,0,172,185,163,176,182,178],
[180,164,175,169,0,180,174,191,154,176],
[162,181,166,156,161,0,177,170,169,159],
[185,177,186,178,167,164,0,174,153,165],
[151,167,159,165,150,171,167,0,139,172],
[195,161,193,159,187,172,188,202,0,179],
[151,187,190,163,165,182,176,169,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,173,184,163,170,169,177,166],
[168,0,169,157,173,179,158,167,169,179],
[167,172,0,161,166,150,154,165,166,166],
[168,184,180,0,180,186,171,178,176,184],
[157,168,175,161,0,155,152,156,163,163],
[178,162,191,155,186,0,167,175,169,169],
[171,183,187,170,189,174,0,175,180,180],
[172,174,176,163,185,166,166,0,172,167],
[164,172,175,165,178,172,161,169,0,184],
[175,162,175,157,178,172,161,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,179,192,185,198,208,188,197,178],
[176,0,168,165,169,168,183,171,177,152],
[162,173,0,176,177,181,198,190,161,173],
[149,176,165,0,184,183,185,188,164,154],
[156,172,164,157,0,151,177,174,155,152],
[143,173,160,158,190,0,194,180,166,164],
[133,158,143,156,164,147,0,175,162,141],
[153,170,151,153,167,161,166,0,161,140],
[144,164,180,177,186,175,179,180,0,145],
[163,189,168,187,189,177,200,201,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,154,150,164,175,166,166,170,161],
[179,0,159,158,167,183,168,166,169,158],
[187,182,0,169,163,179,163,182,173,169],
[191,183,172,0,165,184,165,169,174,176],
[177,174,178,176,0,187,167,173,176,155],
[166,158,162,157,154,0,156,155,152,146],
[175,173,178,176,174,185,0,169,171,161],
[175,175,159,172,168,186,172,0,168,157],
[171,172,168,167,165,189,170,173,0,161],
[180,183,172,165,186,195,180,184,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,205,192,191,163,191,184,192,183],
[150,0,177,165,175,169,158,156,177,167],
[136,164,0,153,185,169,150,157,159,151],
[149,176,188,0,170,176,164,166,188,165],
[150,166,156,171,0,156,162,149,170,146],
[178,172,172,165,185,0,172,151,175,161],
[150,183,191,177,179,169,0,166,196,172],
[157,185,184,175,192,190,175,0,196,178],
[149,164,182,153,171,166,145,145,0,149],
[158,174,190,176,195,180,169,163,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,174,177,163,162,176,180,166,165],
[151,0,169,173,164,163,183,161,176,162],
[167,172,0,182,166,162,181,179,174,169],
[164,168,159,0,156,148,166,164,153,149],
[178,177,175,185,0,161,181,174,172,185],
[179,178,179,193,180,0,176,186,166,178],
[165,158,160,175,160,165,0,162,155,154],
[161,180,162,177,167,155,179,0,161,164],
[175,165,167,188,169,175,186,180,0,174],
[176,179,172,192,156,163,187,177,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,176,169,179,182,181,164,180,188],
[157,0,158,160,165,169,169,154,167,171],
[165,183,0,171,187,177,175,168,194,183],
[172,181,170,0,166,180,180,174,174,177],
[162,176,154,175,0,184,183,182,183,163],
[159,172,164,161,157,0,173,153,190,191],
[160,172,166,161,158,168,0,177,169,187],
[177,187,173,167,159,188,164,0,189,193],
[161,174,147,167,158,151,172,152,0,163],
[153,170,158,164,178,150,154,148,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,138,172,153,157,158,165,135],
[168,0,184,167,160,158,152,150,166,167],
[173,157,0,150,180,140,166,160,162,170],
[203,174,191,0,174,162,171,173,186,187],
[169,181,161,167,0,157,162,164,166,175],
[188,183,201,179,184,0,179,178,169,162],
[184,189,175,170,179,162,0,166,179,164],
[183,191,181,168,177,163,175,0,186,170],
[176,175,179,155,175,172,162,155,0,160],
[206,174,171,154,166,179,177,171,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,166,170,180,159,192,167,139,165],
[164,0,170,166,172,146,187,168,184,176],
[175,171,0,136,160,144,136,151,150,152],
[171,175,205,0,183,169,178,175,180,168],
[161,169,181,158,0,137,147,154,159,172],
[182,195,197,172,204,0,172,189,166,181],
[149,154,205,163,194,169,0,195,160,167],
[174,173,190,166,187,152,146,0,154,169],
[202,157,191,161,182,175,181,187,0,177],
[176,165,189,173,169,160,174,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,157,160,183,185,168,160,170],
[182,0,164,164,167,168,183,175,167,158],
[180,177,0,178,180,169,203,180,202,178],
[184,177,163,0,181,181,196,181,192,180],
[181,174,161,160,0,167,183,157,176,160],
[158,173,172,160,174,0,187,167,174,167],
[156,158,138,145,158,154,0,139,155,140],
[173,166,161,160,184,174,202,0,182,161],
[181,174,139,149,165,167,186,159,0,175],
[171,183,163,161,181,174,201,180,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,177,174,166,153,160,174,185,145],
[173,0,169,177,181,156,143,149,164,165],
[164,172,0,170,155,168,158,149,173,155],
[167,164,171,0,157,164,159,149,171,158],
[175,160,186,184,0,168,153,158,189,160],
[188,185,173,177,173,0,173,160,176,169],
[181,198,183,182,188,168,0,172,186,183],
[167,192,192,192,183,181,169,0,182,171],
[156,177,168,170,152,165,155,159,0,153],
[196,176,186,183,181,172,158,170,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,186,176,179,165,167,162,155,172],
[165,0,171,179,175,171,178,172,177,184],
[155,170,0,155,164,153,158,164,156,174],
[165,162,186,0,164,175,163,160,168,181],
[162,166,177,177,0,169,159,170,158,161],
[176,170,188,166,172,0,186,189,177,187],
[174,163,183,178,182,155,0,198,168,171],
[179,169,177,181,171,152,143,0,170,164],
[186,164,185,173,183,164,173,171,0,181],
[169,157,167,160,180,154,170,177,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,166,171,161,175,177,169,162,160],
[182,0,168,160,166,178,177,184,170,155],
[175,173,0,170,171,171,171,186,181,172],
[170,181,171,0,167,165,183,171,178,174],
[180,175,170,174,0,187,186,185,180,165],
[166,163,170,176,154,0,176,172,165,150],
[164,164,170,158,155,165,0,175,163,161],
[172,157,155,170,156,169,166,0,156,155],
[179,171,160,163,161,176,178,185,0,169],
[181,186,169,167,176,191,180,186,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,194,145,196,218,76,196,196,146],
[169,0,167,165,219,218,121,194,216,121],
[147,174,0,171,151,194,197,195,220,148],
[196,176,170,0,222,198,102,200,198,124],
[145,122,190,119,0,169,98,168,166,121],
[123,123,147,143,172,0,123,148,146,122],
[265,220,144,239,243,218,0,291,241,145],
[145,147,146,141,173,193,50,0,196,171],
[145,125,121,143,175,195,100,145,0,98],
[195,220,193,217,220,219,196,170,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,166,185,157,131,145,163,181,171],
[161,0,199,178,159,184,142,163,177,157],
[175,142,0,180,148,177,165,171,192,171],
[156,163,161,0,150,150,135,152,161,161],
[184,182,193,191,0,170,156,194,188,191],
[210,157,164,191,171,0,183,180,205,155],
[196,199,176,206,185,158,0,160,152,166],
[178,178,170,189,147,161,181,0,185,174],
[160,164,149,180,153,136,189,156,0,138],
[170,184,170,180,150,186,175,167,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,138,174,157,149,163,159,172,197],
[215,0,173,187,223,207,234,208,164,246],
[203,168,0,225,203,201,211,208,200,248],
[167,154,116,0,178,153,165,211,198,249],
[184,118,138,163,0,187,197,173,199,247],
[192,134,140,188,154,0,188,178,164,189],
[178,107,130,176,144,153,0,175,166,201],
[182,133,133,130,168,163,166,0,189,153],
[169,177,141,143,142,177,175,152,0,187],
[144,95,93,92,94,152,140,188,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,197,153,173,148,155,150,180,155],
[181,0,210,156,157,169,163,138,219,185],
[144,131,0,133,143,141,166,149,172,149],
[188,185,208,0,140,160,150,177,183,179],
[168,184,198,201,0,202,173,171,193,204],
[193,172,200,181,139,0,180,177,195,155],
[186,178,175,191,168,161,0,166,182,151],
[191,203,192,164,170,164,175,0,200,170],
[161,122,169,158,148,146,159,141,0,150],
[186,156,192,162,137,186,190,171,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,176,168,173,157,159,164,148,169],
[181,0,174,178,176,157,170,167,165,187],
[165,167,0,177,156,162,170,163,164,178],
[173,163,164,0,158,161,164,166,148,182],
[168,165,185,183,0,160,162,185,158,187],
[184,184,179,180,181,0,167,186,170,196],
[182,171,171,177,179,174,0,165,170,186],
[177,174,178,175,156,155,176,0,177,188],
[193,176,177,193,183,171,171,164,0,189],
[172,154,163,159,154,145,155,153,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,151,148,159,161,149,165,160],
[178,0,172,180,171,174,173,172,191,165],
[175,169,0,171,160,176,168,178,193,181],
[190,161,170,0,166,170,172,164,182,163],
[193,170,181,175,0,179,182,164,183,175],
[182,167,165,171,162,0,161,161,179,159],
[180,168,173,169,159,180,0,167,179,170],
[192,169,163,177,177,180,174,0,187,178],
[176,150,148,159,158,162,162,154,0,157],
[181,176,160,178,166,182,171,163,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,163,175,162,183,159,166,155,151],
[187,0,169,195,182,182,185,178,172,172],
[178,172,0,183,161,173,160,176,154,163],
[166,146,158,0,164,174,158,173,153,146],
[179,159,180,177,0,183,159,176,169,156],
[158,159,168,167,158,0,156,168,148,159],
[182,156,181,183,182,185,0,179,170,163],
[175,163,165,168,165,173,162,0,161,167],
[186,169,187,188,172,193,171,180,0,170],
[190,169,178,195,185,182,178,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,157,165,181,152,174,164,169,182],
[168,0,157,159,171,163,176,158,166,189],
[184,184,0,173,182,164,190,173,174,183],
[176,182,168,0,183,178,183,165,177,187],
[160,170,159,158,0,154,175,165,169,175],
[189,178,177,163,187,0,184,181,183,190],
[167,165,151,158,166,157,0,155,165,184],
[177,183,168,176,176,160,186,0,180,186],
[172,175,167,164,172,158,176,161,0,179],
[159,152,158,154,166,151,157,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,169,167,177,166,187,167,188],
[163,0,164,163,160,171,157,173,163,168],
[170,177,0,168,172,187,170,170,177,185],
[172,178,173,0,168,184,172,179,182,191],
[174,181,169,173,0,185,162,183,173,173],
[164,170,154,157,156,0,148,168,161,165],
[175,184,171,169,179,193,0,189,184,181],
[154,168,171,162,158,173,152,0,161,172],
[174,178,164,159,168,180,157,180,0,171],
[153,173,156,150,168,176,160,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,156,154,192,213,214,184,200,176],
[160,0,166,149,140,172,190,156,182,164],
[185,175,0,182,165,200,164,181,180,175],
[187,192,159,0,164,181,198,160,194,184],
[149,201,176,177,0,196,214,173,191,206],
[128,169,141,160,145,0,155,155,181,152],
[127,151,177,143,127,186,0,124,170,129],
[157,185,160,181,168,186,217,0,179,201],
[141,159,161,147,150,160,171,162,0,168],
[165,177,166,157,135,189,212,140,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,165,164,165,163,168,184,178,165],
[155,0,159,177,146,163,167,153,167,168],
[176,182,0,168,161,172,178,179,176,171],
[177,164,173,0,159,161,169,165,175,164],
[176,195,180,182,0,161,174,195,180,170],
[178,178,169,180,180,0,161,184,186,166],
[173,174,163,172,167,180,0,186,194,175],
[157,188,162,176,146,157,155,0,178,155],
[163,174,165,166,161,155,147,163,0,149],
[176,173,170,177,171,175,166,186,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,163,157,166,155,140,156,173,148],
[203,0,167,179,178,176,174,186,183,173],
[178,174,0,175,178,160,158,169,176,151],
[184,162,166,0,172,160,171,180,186,155],
[175,163,163,169,0,173,159,157,168,150],
[186,165,181,181,168,0,162,168,186,161],
[201,167,183,170,182,179,0,168,182,165],
[185,155,172,161,184,173,173,0,182,165],
[168,158,165,155,173,155,159,159,0,151],
[193,168,190,186,191,180,176,176,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,179,162,203,201,181,166,214,209],
[172,0,173,161,182,186,190,179,192,186],
[162,168,0,156,175,161,171,183,192,184],
[179,180,185,0,197,175,155,163,187,203],
[138,159,166,144,0,133,162,157,176,154],
[140,155,180,166,208,0,175,163,188,186],
[160,151,170,186,179,166,0,141,175,169],
[175,162,158,178,184,178,200,0,195,185],
[127,149,149,154,165,153,166,146,0,159],
[132,155,157,138,187,155,172,156,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,167,170,170,163,170,176,194,183],
[150,0,160,158,140,165,151,177,166,159],
[174,181,0,176,187,165,158,187,188,172],
[171,183,165,0,156,180,157,170,174,154],
[171,201,154,185,0,175,166,194,186,178],
[178,176,176,161,166,0,175,186,187,178],
[171,190,183,184,175,166,0,194,180,173],
[165,164,154,171,147,155,147,0,170,165],
[147,175,153,167,155,154,161,171,0,155],
[158,182,169,187,163,163,168,176,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,165,168,187,196,172,175,170,206],
[136,0,112,165,159,147,175,156,163,150],
[176,229,0,201,200,162,179,172,213,194],
[173,176,140,0,194,188,184,151,192,186],
[154,182,141,147,0,160,162,153,183,189],
[145,194,179,153,181,0,185,162,212,178],
[169,166,162,157,179,156,0,168,171,217],
[166,185,169,190,188,179,173,0,201,184],
[171,178,128,149,158,129,170,140,0,180],
[135,191,147,155,152,163,124,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,154,170,170,164,172,155,165,169],
[177,0,168,190,182,187,190,189,179,178],
[187,173,0,166,178,180,192,184,183,181],
[171,151,175,0,167,176,181,180,182,164],
[171,159,163,174,0,151,160,167,172,165],
[177,154,161,165,190,0,183,181,165,176],
[169,151,149,160,181,158,0,166,179,165],
[186,152,157,161,174,160,175,0,170,167],
[176,162,158,159,169,176,162,171,0,174],
[172,163,160,177,176,165,176,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,147,153,161,169,155,165,151],
[175,0,175,168,157,170,166,163,184,174],
[172,166,0,179,176,177,182,161,176,174],
[194,173,162,0,178,186,183,168,171,186],
[188,184,165,163,0,170,181,164,187,168],
[180,171,164,155,171,0,175,160,155,165],
[172,175,159,158,160,166,0,166,164,162],
[186,178,180,173,177,181,175,0,167,166],
[176,157,165,170,154,186,177,174,0,160],
[190,167,167,155,173,176,179,175,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,191,171,164,183,189,183,178,182],
[163,0,184,136,163,192,178,163,182,167],
[150,157,0,152,137,165,162,135,145,160],
[170,205,189,0,175,176,187,184,186,177],
[177,178,204,166,0,207,209,182,182,179],
[158,149,176,165,134,0,169,139,161,172],
[152,163,179,154,132,172,0,169,169,173],
[158,178,206,157,159,202,172,0,176,185],
[163,159,196,155,159,180,172,165,0,167],
[159,174,181,164,162,169,168,156,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,172,185,157,151,169,175,171],
[165,0,153,186,170,160,174,171,178,181],
[160,188,0,179,166,179,171,170,171,167],
[169,155,162,0,159,171,178,180,178,155],
[156,171,175,182,0,126,150,161,138,146],
[184,181,162,170,215,0,165,184,150,181],
[190,167,170,163,191,176,0,194,178,162],
[172,170,171,161,180,157,147,0,164,183],
[166,163,170,163,203,191,163,177,0,171],
[170,160,174,186,195,160,179,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,172,170,256,172,172,84,86],
[171,0,85,172,170,257,172,172,84,86],
[172,256,0,172,256,172,172,172,256,86],
[169,169,169,0,255,341,341,341,169,255],
[171,171,85,86,0,257,86,172,171,171],
[85,84,169,0,84,0,86,0,84,0],
[169,169,169,0,255,255,0,255,169,255],
[169,169,169,0,169,341,86,0,169,171],
[257,257,85,172,170,257,172,172,0,86],
[255,255,255,86,170,341,86,170,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,147,218,208,179,142,148,167,210],
[168,0,156,166,197,169,162,154,147,182],
[194,185,0,191,202,190,162,145,147,193],
[123,175,150,0,177,146,153,143,171,176],
[133,144,139,164,0,134,146,141,152,191],
[162,172,151,195,207,0,182,135,126,186],
[199,179,179,188,195,159,0,165,172,201],
[193,187,196,198,200,206,176,0,161,182],
[174,194,194,170,189,215,169,180,0,166],
[131,159,148,165,150,155,140,159,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,176,185,154,157,160,144,168],
[174,0,172,161,163,157,180,157,156,153],
[171,169,0,155,166,141,173,161,130,128],
[165,180,186,0,193,172,192,189,159,174],
[156,178,175,148,0,157,164,158,143,159],
[187,184,200,169,184,0,182,181,179,162],
[184,161,168,149,177,159,0,143,120,148],
[181,184,180,152,183,160,198,0,147,129],
[197,185,211,182,198,162,221,194,0,183],
[173,188,213,167,182,179,193,212,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,154,157,154,153,171,170,178],
[169,0,174,171,151,149,152,164,173,173],
[170,167,0,159,166,157,167,172,167,166],
[187,170,182,0,157,161,149,180,181,165],
[184,190,175,184,0,155,157,167,177,177],
[187,192,184,180,186,0,182,188,173,166],
[188,189,174,192,184,159,0,191,181,159],
[170,177,169,161,174,153,150,0,166,174],
[171,168,174,160,164,168,160,175,0,168],
[163,168,175,176,164,175,182,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,186,217,213,142,210,240,183,197],
[141,0,185,170,138,153,177,226,182,156],
[155,156,0,157,197,198,154,225,142,154],
[124,171,184,0,171,156,182,143,166,168],
[128,203,144,170,0,173,179,200,156,186],
[199,188,143,185,168,0,179,197,152,186],
[131,164,187,159,162,162,0,158,129,173],
[101,115,116,198,141,144,183,0,125,143],
[158,159,199,175,185,189,212,216,0,188],
[144,185,187,173,155,155,168,198,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,168,171,172,165,162,168,156],
[169,0,167,151,171,162,147,159,169,160],
[174,174,0,170,171,161,161,168,163,160],
[173,190,171,0,183,169,180,170,171,167],
[170,170,170,158,0,151,157,161,173,171],
[169,179,180,172,190,0,170,164,175,164],
[176,194,180,161,184,171,0,169,179,178],
[179,182,173,171,180,177,172,0,171,170],
[173,172,178,170,168,166,162,170,0,163],
[185,181,181,174,170,177,163,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,163,153,163,160,168,162,157,151],
[200,0,188,163,195,172,184,194,200,182],
[178,153,0,163,167,164,178,179,182,185],
[188,178,178,0,181,174,171,171,175,167],
[178,146,174,160,0,177,171,170,178,181],
[181,169,177,167,164,0,173,191,184,174],
[173,157,163,170,170,168,0,175,163,167],
[179,147,162,170,171,150,166,0,162,171],
[184,141,159,166,163,157,178,179,0,169],
[190,159,156,174,160,167,174,170,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,192,149,241,193,162,176,173,172],
[143,0,150,141,193,165,144,178,171,129],
[149,191,0,148,205,186,160,188,199,155],
[192,200,193,0,213,192,178,168,190,184],
[100,148,136,128,0,146,109,110,121,97],
[148,176,155,149,195,0,144,137,179,142],
[179,197,181,163,232,197,0,201,186,119],
[165,163,153,173,231,204,140,0,190,151],
[168,170,142,151,220,162,155,151,0,125],
[169,212,186,157,244,199,222,190,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,189,184,168,175,171,166,165,171],
[152,0,181,162,165,154,152,150,154,163],
[152,160,0,170,162,161,152,153,142,155],
[157,179,171,0,173,163,169,160,167,166],
[173,176,179,168,0,175,180,170,156,159],
[166,187,180,178,166,0,168,172,163,169],
[170,189,189,172,161,173,0,150,160,158],
[175,191,188,181,171,169,191,0,179,183],
[176,187,199,174,185,178,181,162,0,171],
[170,178,186,175,182,172,183,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,145,135,171,125,106,128,134,144],
[205,0,175,176,207,204,168,186,160,199],
[196,166,0,148,185,156,150,164,171,182],
[206,165,193,0,209,174,149,191,167,188],
[170,134,156,132,0,135,142,137,136,156],
[216,137,185,167,206,0,159,163,169,196],
[235,173,191,192,199,182,0,167,167,191],
[213,155,177,150,204,178,174,0,165,204],
[207,181,170,174,205,172,174,176,0,200],
[197,142,159,153,185,145,150,137,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,185,189,183,188,171,192,150,207],
[151,0,179,192,180,197,169,202,175,192],
[156,162,0,182,180,185,176,172,144,192],
[152,149,159,0,158,172,166,181,156,177],
[158,161,161,183,0,204,171,169,153,175],
[153,144,156,169,137,0,145,144,157,160],
[170,172,165,175,170,196,0,179,156,199],
[149,139,169,160,172,197,162,0,159,162],
[191,166,197,185,188,184,185,182,0,191],
[134,149,149,164,166,181,142,179,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,165,170,166,153,153,157,169,175],
[195,0,166,191,188,175,173,176,181,176],
[176,175,0,180,202,163,167,175,186,175],
[171,150,161,0,176,174,175,156,184,164],
[175,153,139,165,0,145,153,170,168,166],
[188,166,178,167,196,0,184,175,178,177],
[188,168,174,166,188,157,0,167,167,181],
[184,165,166,185,171,166,174,0,154,165],
[172,160,155,157,173,163,174,187,0,180],
[166,165,166,177,175,164,160,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,158,157,151,175,174,172,170,163],
[173,0,160,181,159,186,170,173,180,178],
[183,181,0,163,168,183,172,175,190,174],
[184,160,178,0,177,176,164,174,178,166],
[190,182,173,164,0,176,182,181,190,160],
[166,155,158,165,165,0,160,150,152,159],
[167,171,169,177,159,181,0,182,185,173],
[169,168,166,167,160,191,159,0,182,178],
[171,161,151,163,151,189,156,159,0,164],
[178,163,167,175,181,182,168,163,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,196,166,164,172,152,168,163,165],
[166,0,182,163,131,152,140,142,144,137],
[145,159,0,162,145,175,138,160,158,126],
[175,178,179,0,152,191,154,157,177,172],
[177,210,196,189,0,194,164,186,172,158],
[169,189,166,150,147,0,149,153,176,148],
[189,201,203,187,177,192,0,189,191,167],
[173,199,181,184,155,188,152,0,168,149],
[178,197,183,164,169,165,150,173,0,145],
[176,204,215,169,183,193,174,192,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,182,176,163,173,179,162,163],
[169,0,183,183,186,190,205,193,186,146],
[170,158,0,166,181,134,180,193,137,155],
[159,158,175,0,160,121,179,185,154,146],
[165,155,160,181,0,130,166,159,152,126],
[178,151,207,220,211,0,215,194,153,179],
[168,136,161,162,175,126,0,182,166,166],
[162,148,148,156,182,147,159,0,148,153],
[179,155,204,187,189,188,175,193,0,165],
[178,195,186,195,215,162,175,188,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,172,201,162,177,185,182,175],
[171,0,159,178,208,181,190,186,173,203],
[172,182,0,192,226,168,183,170,198,172],
[169,163,149,0,204,155,163,168,171,160],
[140,133,115,137,0,130,163,142,147,136],
[179,160,173,186,211,0,178,167,192,185],
[164,151,158,178,178,163,0,159,189,156],
[156,155,171,173,199,174,182,0,162,186],
[159,168,143,170,194,149,152,179,0,164],
[166,138,169,181,205,156,185,155,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,180,165,184,180,170,161,165,151],
[180,0,183,168,170,168,170,173,178,159],
[161,158,0,158,190,179,160,161,177,174],
[176,173,183,0,170,160,174,189,186,155],
[157,171,151,171,0,185,157,156,158,170],
[161,173,162,181,156,0,175,164,168,164],
[171,171,181,167,184,166,0,182,170,165],
[180,168,180,152,185,177,159,0,183,176],
[176,163,164,155,183,173,171,158,0,158],
[190,182,167,186,171,177,176,165,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,168,178,185,185,171,180,180,173],
[157,0,164,165,179,170,175,173,174,163],
[173,177,0,166,196,185,179,183,168,166],
[163,176,175,0,183,167,161,184,173,170],
[156,162,145,158,0,158,160,169,154,154],
[156,171,156,174,183,0,173,180,161,169],
[170,166,162,180,181,168,0,184,173,161],
[161,168,158,157,172,161,157,0,159,159],
[161,167,173,168,187,180,168,182,0,174],
[168,178,175,171,187,172,180,182,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,154,163,173,188,176,183,168,191],
[172,0,161,166,180,182,172,181,172,175],
[187,180,0,176,183,187,165,184,183,166],
[178,175,165,0,181,176,171,180,173,162],
[168,161,158,160,0,180,180,189,181,167],
[153,159,154,165,161,0,152,198,165,148],
[165,169,176,170,161,189,0,196,176,176],
[158,160,157,161,152,143,145,0,154,169],
[173,169,158,168,160,176,165,187,0,173],
[150,166,175,179,174,193,165,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,192,185,172,189,170,171,178,182],
[150,0,174,180,168,173,175,160,187,184],
[149,167,0,154,166,162,166,173,184,166],
[156,161,187,0,180,189,178,178,177,169],
[169,173,175,161,0,178,180,160,179,188],
[152,168,179,152,163,0,164,163,181,184],
[171,166,175,163,161,177,0,161,175,173],
[170,181,168,163,181,178,180,0,175,181],
[163,154,157,164,162,160,166,166,0,173],
[159,157,175,172,153,157,168,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,179,189,182,166,173,184,197],
[179,0,167,173,184,166,160,167,166,192],
[174,174,0,177,180,181,165,179,189,209],
[162,168,164,0,149,181,172,187,169,175],
[152,157,161,192,0,165,140,158,166,171],
[159,175,160,160,176,0,149,153,170,180],
[175,181,176,169,201,192,0,165,170,185],
[168,174,162,154,183,188,176,0,157,185],
[157,175,152,172,175,171,171,184,0,170],
[144,149,132,166,170,161,156,156,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,177,176,159,167,185,149,169],
[179,0,174,174,173,169,176,169,166,158],
[172,167,0,185,180,171,181,175,177,175],
[164,167,156,0,172,162,149,160,147,155],
[165,168,161,169,0,155,168,166,168,165],
[182,172,170,179,186,0,175,179,158,169],
[174,165,160,192,173,166,0,188,162,153],
[156,172,166,181,175,162,153,0,146,144],
[192,175,164,194,173,183,179,195,0,171],
[172,183,166,186,176,172,188,197,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,163,169,185,161,164,182,161,200],
[156,0,173,154,178,170,160,175,147,167],
[178,168,0,172,180,171,181,178,165,189],
[172,187,169,0,179,179,166,180,187,200],
[156,163,161,162,0,164,155,157,152,167],
[180,171,170,162,177,0,180,163,159,210],
[177,181,160,175,186,161,0,175,170,174],
[159,166,163,161,184,178,166,0,161,185],
[180,194,176,154,189,182,171,180,0,171],
[141,174,152,141,174,131,167,156,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,149,156,167,153,161,155,151,150],
[144,0,146,134,163,146,158,157,152,139],
[192,195,0,192,199,177,176,193,168,165],
[185,207,149,0,182,176,179,159,161,175],
[174,178,142,159,0,152,166,151,150,159],
[188,195,164,165,189,0,187,180,165,166],
[180,183,165,162,175,154,0,164,173,160],
[186,184,148,182,190,161,177,0,164,143],
[190,189,173,180,191,176,168,177,0,160],
[191,202,176,166,182,175,181,198,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,190,175,169,171,181,175,180,176],
[166,0,185,183,176,168,179,173,182,176],
[151,156,0,165,167,173,156,165,176,166],
[166,158,176,0,178,167,181,170,175,178],
[172,165,174,163,0,169,185,180,174,172],
[170,173,168,174,172,0,173,177,167,174],
[160,162,185,160,156,168,0,162,176,182],
[166,168,176,171,161,164,179,0,156,175],
[161,159,165,166,167,174,165,185,0,183],
[165,165,175,163,169,167,159,166,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,151,149,176,138,142,156,133,169],
[179,0,175,163,181,138,168,179,159,172],
[190,166,0,161,182,182,179,173,159,185],
[192,178,180,0,186,173,171,171,165,202],
[165,160,159,155,0,140,136,152,167,177],
[203,203,159,168,201,0,173,164,172,201],
[199,173,162,170,205,168,0,165,160,198],
[185,162,168,170,189,177,176,0,146,181],
[208,182,182,176,174,169,181,195,0,187],
[172,169,156,139,164,140,143,160,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,154,176,175,147,161,160,169,168],
[182,0,155,157,153,163,139,188,134,168],
[187,186,0,159,202,150,135,152,152,179],
[165,184,182,0,180,167,138,173,146,169],
[166,188,139,161,0,130,158,145,160,188],
[194,178,191,174,211,0,151,161,186,189],
[180,202,206,203,183,190,0,193,159,179],
[181,153,189,168,196,180,148,0,140,176],
[172,207,189,195,181,155,182,201,0,165],
[173,173,162,172,153,152,162,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,199,162,171,211,137,164,130,227],
[131,0,167,120,169,157,132,142,143,159],
[142,174,0,130,182,164,138,155,120,193],
[179,221,211,0,156,217,201,189,166,229],
[170,172,159,185,0,172,160,138,127,213],
[130,184,177,124,169,0,127,141,178,205],
[204,209,203,140,181,214,0,190,204,183],
[177,199,186,152,203,200,151,0,189,165],
[211,198,221,175,214,163,137,152,0,226],
[114,182,148,112,128,136,158,176,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,175,186,175,180,157,173,158],
[178,0,178,163,187,181,197,177,179,180],
[170,163,0,159,177,169,189,173,173,173],
[166,178,182,0,195,186,186,184,178,164],
[155,154,164,146,0,175,181,154,145,153],
[166,160,172,155,166,0,164,168,163,164],
[161,144,152,155,160,177,0,153,152,163],
[184,164,168,157,187,173,188,0,168,165],
[168,162,168,163,196,178,189,173,0,177],
[183,161,168,177,188,177,178,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,181,166,183,169,179,172,185,191],
[183,0,180,171,178,175,170,184,169,173],
[160,161,0,171,167,151,151,156,151,173],
[175,170,170,0,181,163,177,169,168,174],
[158,163,174,160,0,150,153,154,156,161],
[172,166,190,178,191,0,176,189,176,186],
[162,171,190,164,188,165,0,183,164,191],
[169,157,185,172,187,152,158,0,168,173],
[156,172,190,173,185,165,177,173,0,169],
[150,168,168,167,180,155,150,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,165,161,143,150,147,155,175,153],
[185,0,190,193,165,168,166,178,200,168],
[176,151,0,174,153,155,163,157,175,159],
[180,148,167,0,149,157,137,157,162,147],
[198,176,188,192,0,167,168,173,169,164],
[191,173,186,184,174,0,150,176,180,171],
[194,175,178,204,173,191,0,177,194,170],
[186,163,184,184,168,165,164,0,181,162],
[166,141,166,179,172,161,147,160,0,155],
[188,173,182,194,177,170,171,179,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,149,175,178,170,170,159,163,176],
[185,0,165,173,187,185,191,171,172,176],
[192,176,0,169,186,181,178,175,190,179],
[166,168,172,0,181,163,175,160,168,174],
[163,154,155,160,0,155,173,154,157,166],
[171,156,160,178,186,0,169,150,154,178],
[171,150,163,166,168,172,0,164,164,168],
[182,170,166,181,187,191,177,0,162,187],
[178,169,151,173,184,187,177,179,0,192],
[165,165,162,167,175,163,173,154,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,160,192,186,181,200,172,168,195],
[148,0,148,158,161,175,164,154,146,176],
[181,193,0,176,171,193,185,137,152,142],
[149,183,165,0,132,173,166,141,184,151],
[155,180,170,209,0,168,206,170,139,189],
[160,166,148,168,173,0,178,130,129,159],
[141,177,156,175,135,163,0,137,128,163],
[169,187,204,200,171,211,204,0,196,198],
[173,195,189,157,202,212,213,145,0,179],
[146,165,199,190,152,182,178,143,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,165,159,165,167,149,164,170,172],
[172,0,168,170,181,166,172,170,185,156],
[176,173,0,168,182,160,176,172,195,196],
[182,171,173,0,194,175,164,172,182,184],
[176,160,159,147,0,174,154,144,163,177],
[174,175,181,166,167,0,157,170,170,174],
[192,169,165,177,187,184,0,168,185,190],
[177,171,169,169,197,171,173,0,178,198],
[171,156,146,159,178,171,156,163,0,168],
[169,185,145,157,164,167,151,143,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,177,186,198,197,146,187,166,160],
[131,0,146,157,158,161,136,158,153,143],
[164,195,0,169,174,184,156,178,187,160],
[155,184,172,0,152,177,149,150,146,161],
[143,183,167,189,0,192,155,192,174,160],
[144,180,157,164,149,0,122,168,120,139],
[195,205,185,192,186,219,0,195,182,165],
[154,183,163,191,149,173,146,0,141,146],
[175,188,154,195,167,221,159,200,0,180],
[181,198,181,180,181,202,176,195,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,187,176,167,182,171,163,174,184],
[157,0,181,183,190,180,163,169,185,176],
[154,160,0,172,156,175,167,159,157,169],
[165,158,169,0,150,157,140,167,160,169],
[174,151,185,191,0,166,170,156,182,178],
[159,161,166,184,175,0,150,149,159,173],
[170,178,174,201,171,191,0,186,175,193],
[178,172,182,174,185,192,155,0,177,185],
[167,156,184,181,159,182,166,164,0,186],
[157,165,172,172,163,168,148,156,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,194,202,174,163,186,163,166,184],
[156,0,174,176,153,153,153,161,169,153],
[147,167,0,187,174,167,158,150,173,164],
[139,165,154,0,139,144,153,152,153,151],
[167,188,167,202,0,177,161,180,170,161],
[178,188,174,197,164,0,188,183,173,154],
[155,188,183,188,180,153,0,176,163,173],
[178,180,191,189,161,158,165,0,148,180],
[175,172,168,188,171,168,178,193,0,168],
[157,188,177,190,180,187,168,161,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,193,180,163,192,191,179,166,156],
[154,0,165,161,162,170,174,167,150,150],
[148,176,0,164,166,171,177,174,164,160],
[161,180,177,0,159,178,178,162,183,177],
[178,179,175,182,0,188,172,172,165,166],
[149,171,170,163,153,0,166,152,156,147],
[150,167,164,163,169,175,0,165,165,161],
[162,174,167,179,169,189,176,0,167,160],
[175,191,177,158,176,185,176,174,0,169],
[185,191,181,164,175,194,180,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,177,180,181,164,180,172,170,171],
[151,0,175,165,164,160,177,176,165,162],
[164,166,0,163,154,153,173,167,160,167],
[161,176,178,0,172,184,185,175,155,167],
[160,177,187,169,0,160,176,170,169,164],
[177,181,188,157,181,0,196,188,175,173],
[161,164,168,156,165,145,0,162,166,171],
[169,165,174,166,171,153,179,0,159,171],
[171,176,181,186,172,166,175,182,0,178],
[170,179,174,174,177,168,170,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,172,188,153,180,173,166,177],
[168,0,176,187,180,187,184,171,175,167],
[182,165,0,176,199,171,183,164,187,180],
[169,154,165,0,181,161,183,162,173,181],
[153,161,142,160,0,167,166,146,147,163],
[188,154,170,180,174,0,190,178,165,169],
[161,157,158,158,175,151,0,150,158,165],
[168,170,177,179,195,163,191,0,158,189],
[175,166,154,168,194,176,183,183,0,183],
[164,174,161,160,178,172,176,152,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,133,151,145,139,145,154,135,143],
[218,0,185,161,154,143,173,193,185,161],
[208,156,0,156,147,150,159,159,172,129],
[190,180,185,0,176,183,173,177,167,161],
[196,187,194,165,0,132,156,164,194,168],
[202,198,191,158,209,0,199,201,183,193],
[196,168,182,168,185,142,0,168,164,161],
[187,148,182,164,177,140,173,0,186,167],
[206,156,169,174,147,158,177,155,0,154],
[198,180,212,180,173,148,180,174,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,174,160,167,187,191,179,166,175],
[175,0,175,163,156,176,181,150,166,164],
[167,166,0,142,154,180,171,152,156,156],
[181,178,199,0,186,177,179,168,187,202],
[174,185,187,155,0,178,196,171,163,179],
[154,165,161,164,163,0,157,156,155,171],
[150,160,170,162,145,184,0,178,168,166],
[162,191,189,173,170,185,163,0,161,177],
[175,175,185,154,178,186,173,180,0,185],
[166,177,185,139,162,170,175,164,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,162,180,163,182,171,185,154,183],
[170,0,154,186,162,168,158,173,161,184],
[179,187,0,202,178,186,177,189,168,207],
[161,155,139,0,149,153,148,160,139,158],
[178,179,163,192,0,169,159,162,152,176],
[159,173,155,188,172,0,156,171,173,179],
[170,183,164,193,182,185,0,174,152,175],
[156,168,152,181,179,170,167,0,162,177],
[187,180,173,202,189,168,189,179,0,190],
[158,157,134,183,165,162,166,164,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,156,160,163,149,162,148,160],
[174,0,193,175,163,162,156,176,156,179],
[175,148,0,162,167,173,160,178,164,166],
[185,166,179,0,166,172,177,178,146,158],
[181,178,174,175,0,164,162,155,174,180],
[178,179,168,169,177,0,167,172,159,167],
[192,185,181,164,179,174,0,174,156,149],
[179,165,163,163,186,169,167,0,161,167],
[193,185,177,195,167,182,185,180,0,182],
[181,162,175,183,161,174,192,174,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,171,178,173,162,189,186,175],
[177,0,176,157,200,184,177,177,179,196],
[168,165,0,175,169,174,159,183,176,169],
[170,184,166,0,197,176,179,176,178,181],
[163,141,172,144,0,147,159,180,176,162],
[168,157,167,165,194,0,146,174,168,172],
[179,164,182,162,182,195,0,178,174,180],
[152,164,158,165,161,167,163,0,171,175],
[155,162,165,163,165,173,167,170,0,176],
[166,145,172,160,179,169,161,166,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,187,184,176,165,185,190,170,176],
[174,0,201,179,177,171,187,194,165,171],
[154,140,0,158,160,158,162,180,150,147],
[157,162,183,0,154,155,179,166,160,153],
[165,164,181,187,0,183,174,183,161,170],
[176,170,183,186,158,0,182,188,175,170],
[156,154,179,162,167,159,0,170,160,163],
[151,147,161,175,158,153,171,0,159,147],
[171,176,191,181,180,166,181,182,0,177],
[165,170,194,188,171,171,178,194,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,139,139,91,116,137,93,114,115],
[228,0,228,252,138,205,204,207,227,183],
[202,113,0,206,137,91,181,137,204,158],
[202,89,135,0,136,66,135,91,134,112],
[250,203,204,205,0,137,202,160,203,204],
[225,136,250,275,204,0,180,159,202,204],
[204,137,160,206,139,161,0,158,205,184],
[248,134,204,250,181,182,183,0,202,227],
[227,114,137,207,138,139,136,139,0,138],
[226,158,183,229,137,137,157,114,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,100,197,99,149,148,148,149],
[241,0,192,198,194,195,196,196,145,146],
[243,149,0,198,198,195,246,196,145,148],
[241,143,143,0,192,243,193,146,145,194],
[144,147,143,149,0,243,246,147,145,146],
[242,146,146,98,98,0,146,98,144,98],
[192,145,95,148,95,195,0,48,96,97],
[193,145,145,195,194,243,293,0,243,243],
[193,196,196,196,196,197,245,98,0,146],
[192,195,193,147,195,243,244,98,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,148,146,140,166,159,173,183,142],
[186,0,156,186,166,158,162,166,207,169],
[193,185,0,163,147,162,182,168,150,157],
[195,155,178,0,154,158,167,153,191,182],
[201,175,194,187,0,168,192,191,183,176],
[175,183,179,183,173,0,191,156,218,172],
[182,179,159,174,149,150,0,164,201,184],
[168,175,173,188,150,185,177,0,179,175],
[158,134,191,150,158,123,140,162,0,164],
[199,172,184,159,165,169,157,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,148,177,169,175,174,179,184,146],
[157,0,143,163,181,168,172,165,195,152],
[193,198,0,166,205,179,200,186,191,181],
[164,178,175,0,175,180,182,179,187,151],
[172,160,136,166,0,179,170,150,181,147],
[166,173,162,161,162,0,174,183,189,150],
[167,169,141,159,171,167,0,165,184,146],
[162,176,155,162,191,158,176,0,190,173],
[157,146,150,154,160,152,157,151,0,139],
[195,189,160,190,194,191,195,168,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,176,176,189,174,182,180,171,150],
[147,0,150,158,180,167,169,182,163,157],
[165,191,0,182,202,162,180,182,177,171],
[165,183,159,0,202,153,172,189,160,147],
[152,161,139,139,0,142,173,165,144,147],
[167,174,179,188,199,0,179,185,166,164],
[159,172,161,169,168,162,0,174,158,148],
[161,159,159,152,176,156,167,0,160,165],
[170,178,164,181,197,175,183,181,0,164],
[191,184,170,194,194,177,193,176,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,172,177,178,166,179,181,160,169],
[160,0,171,159,173,161,174,169,158,160],
[169,170,0,148,177,166,171,149,155,157],
[164,182,193,0,188,179,185,182,173,173],
[163,168,164,153,0,166,189,174,157,159],
[175,180,175,162,175,0,177,171,148,163],
[162,167,170,156,152,164,0,161,160,153],
[160,172,192,159,167,170,180,0,160,165],
[181,183,186,168,184,193,181,181,0,179],
[172,181,184,168,182,178,188,176,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,147,158,169,152,152,153,156,155],
[199,0,165,180,188,174,164,134,172,185],
[194,176,0,197,217,173,175,149,173,161],
[183,161,144,0,173,157,160,148,183,134],
[172,153,124,168,0,134,147,133,158,128],
[189,167,168,184,207,0,174,169,191,137],
[189,177,166,181,194,167,0,175,180,174],
[188,207,192,193,208,172,166,0,211,192],
[185,169,168,158,183,150,161,130,0,138],
[186,156,180,207,213,204,167,149,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,161,192,172,181,171,183,183],
[171,0,176,171,190,181,173,159,186,163],
[183,165,0,171,186,178,185,166,176,179],
[180,170,170,0,174,153,175,165,177,178],
[149,151,155,167,0,160,147,155,167,165],
[169,160,163,188,181,0,163,162,174,171],
[160,168,156,166,194,178,0,156,169,164],
[170,182,175,176,186,179,185,0,179,178],
[158,155,165,164,174,167,172,162,0,172],
[158,178,162,163,176,170,177,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,163,182,170,178,171,176,168],
[172,0,175,167,189,169,176,156,181,159],
[168,166,0,166,169,173,171,153,169,163],
[178,174,175,0,174,178,182,177,176,165],
[159,152,172,167,0,157,167,166,161,154],
[171,172,168,163,184,0,179,170,188,172],
[163,165,170,159,174,162,0,157,163,151],
[170,185,188,164,175,171,184,0,179,173],
[165,160,172,165,180,153,178,162,0,153],
[173,182,178,176,187,169,190,168,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,174,184,174,167,182,173,172],
[166,0,162,164,176,169,174,172,162,163],
[164,179,0,174,183,175,181,180,175,164],
[167,177,167,0,196,173,180,172,178,165],
[157,165,158,145,0,164,169,167,176,166],
[167,172,166,168,177,0,170,176,162,179],
[174,167,160,161,172,171,0,164,172,169],
[159,169,161,169,174,165,177,0,178,179],
[168,179,166,163,165,179,169,163,0,179],
[169,178,177,176,175,162,172,162,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,113,199,143,256,168,141,169,113],
[170,0,141,254,142,284,197,225,198,170],
[228,200,0,201,227,284,171,201,199,115],
[142,87,140,0,172,200,143,112,172,172],
[198,199,114,169,0,256,139,169,224,141],
[85,57,57,141,85,0,85,170,113,29],
[173,144,170,198,202,256,0,112,141,86],
[200,116,140,229,172,171,229,0,228,172],
[172,143,142,169,117,228,200,113,0,88],
[228,171,226,169,200,312,255,169,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,172,177,175,169,181,177,165],
[172,0,167,173,175,181,181,182,178,168],
[173,174,0,179,189,179,171,190,167,175],
[169,168,162,0,178,162,180,174,176,164],
[164,166,152,163,0,164,166,167,165,159],
[166,160,162,179,177,0,162,169,176,151],
[172,160,170,161,175,179,0,174,175,164],
[160,159,151,167,174,172,167,0,178,149],
[164,163,174,165,176,165,166,163,0,160],
[176,173,166,177,182,190,177,192,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,181,175,199,194,167,185,164,194],
[152,0,163,186,200,174,159,179,187,186],
[160,178,0,184,202,186,184,162,186,167],
[166,155,157,0,194,174,150,185,185,201],
[142,141,139,147,0,176,140,155,178,173],
[147,167,155,167,165,0,169,173,181,157],
[174,182,157,191,201,172,0,163,168,172],
[156,162,179,156,186,168,178,0,177,165],
[177,154,155,156,163,160,173,164,0,182],
[147,155,174,140,168,184,169,176,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,201,196,175,173,196,187,171,189],
[179,0,188,166,167,170,184,188,163,177],
[140,153,0,169,153,168,162,150,193,168],
[145,175,172,0,181,169,164,185,167,176],
[166,174,188,160,0,151,173,178,170,166],
[168,171,173,172,190,0,172,193,189,202],
[145,157,179,177,168,169,0,157,180,170],
[154,153,191,156,163,148,184,0,162,165],
[170,178,148,174,171,152,161,179,0,184],
[152,164,173,165,175,139,171,176,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,194,215,178,180,186,181,181,161],
[165,0,180,193,172,176,161,184,151,155],
[147,161,0,182,181,174,160,174,173,176],
[126,148,159,0,165,158,154,158,145,134],
[163,169,160,176,0,175,157,172,146,164],
[161,165,167,183,166,0,166,159,152,151],
[155,180,181,187,184,175,0,187,153,154],
[160,157,167,183,169,182,154,0,160,154],
[160,190,168,196,195,189,188,181,0,174],
[180,186,165,207,177,190,187,187,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,162,176,196,184,147,194,166,182],
[162,0,163,154,192,183,178,193,163,167],
[179,178,0,190,197,191,162,189,174,161],
[165,187,151,0,182,160,151,199,148,175],
[145,149,144,159,0,141,148,161,133,142],
[157,158,150,181,200,0,140,171,148,172],
[194,163,179,190,193,201,0,208,148,183],
[147,148,152,142,180,170,133,0,148,181],
[175,178,167,193,208,193,193,193,0,189],
[159,174,180,166,199,169,158,160,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,153,169,180,180,172,174,175],
[173,0,167,170,189,184,187,184,179,190],
[169,174,0,171,183,175,179,181,167,180],
[188,171,170,0,173,175,188,181,184,184],
[172,152,158,168,0,188,182,171,162,175],
[161,157,166,166,153,0,163,167,160,165],
[161,154,162,153,159,178,0,164,171,169],
[169,157,160,160,170,174,177,0,158,182],
[167,162,174,157,179,181,170,183,0,170],
[166,151,161,157,166,176,172,159,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,161,163,143,188,146,191,168,177],
[161,0,186,191,169,144,174,206,178,206],
[180,155,0,167,155,160,200,176,190,168],
[178,150,174,0,156,166,177,185,178,179],
[198,172,186,185,0,198,162,204,194,197],
[153,197,181,175,143,0,161,197,186,210],
[195,167,141,164,179,180,0,205,171,164],
[150,135,165,156,137,144,136,0,167,171],
[173,163,151,163,147,155,170,174,0,161],
[164,135,173,162,144,131,177,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,184,180,183,174,177,161,175,187],
[176,0,157,182,143,178,170,154,186,177],
[157,184,0,181,165,184,175,160,190,170],
[161,159,160,0,154,170,167,140,142,134],
[158,198,176,187,0,186,173,177,165,153],
[167,163,157,171,155,0,164,150,155,142],
[164,171,166,174,168,177,0,156,167,160],
[180,187,181,201,164,191,185,0,166,165],
[166,155,151,199,176,186,174,175,0,164],
[154,164,171,207,188,199,181,176,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,173,158,236,139,182,180,151,183],
[148,0,174,168,180,140,142,180,160,183],
[168,167,0,200,211,168,202,180,137,213],
[183,173,141,0,211,154,161,170,172,218],
[105,161,130,130,0,117,147,157,141,138],
[202,201,173,187,224,0,205,242,149,257],
[159,199,139,180,194,136,0,188,138,212],
[161,161,161,171,184,99,153,0,152,205],
[190,181,204,169,200,192,203,189,0,203],
[158,158,128,123,203,84,129,136,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,187,140,174,194,193,173,162,201],
[161,0,173,184,155,211,168,162,153,193],
[154,168,0,157,167,171,175,162,161,190],
[201,157,184,0,163,189,182,160,159,183],
[167,186,174,178,0,176,188,171,173,210],
[147,130,170,152,165,0,162,158,141,168],
[148,173,166,159,153,179,0,151,148,193],
[168,179,179,181,170,183,190,0,168,216],
[179,188,180,182,168,200,193,173,0,190],
[140,148,151,158,131,173,148,125,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,188,185,166,188,171,176,163,173],
[174,0,179,162,172,172,180,182,176,167],
[153,162,0,155,157,170,164,169,164,158],
[156,179,186,0,181,174,183,186,168,184],
[175,169,184,160,0,174,166,174,163,165],
[153,169,171,167,167,0,175,183,176,157],
[170,161,177,158,175,166,0,172,171,169],
[165,159,172,155,167,158,169,0,149,170],
[178,165,177,173,178,165,170,192,0,165],
[168,174,183,157,176,184,172,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,168,187,160,182,173,197,180],
[167,0,178,178,175,162,167,168,186,164],
[164,163,0,181,188,163,185,177,179,173],
[173,163,160,0,178,169,169,170,171,164],
[154,166,153,163,0,159,162,183,171,164],
[181,179,178,172,182,0,181,188,182,160],
[159,174,156,172,179,160,0,167,163,150],
[168,173,164,171,158,153,174,0,160,167],
[144,155,162,170,170,159,178,181,0,157],
[161,177,168,177,177,181,191,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,172,202,170,168,203,137,138,171],
[137,0,103,202,138,169,169,103,170,104],
[169,238,0,202,238,236,168,169,203,239],
[139,139,139,0,138,136,139,173,241,104],
[171,203,103,203,0,203,169,137,171,205],
[173,172,105,205,138,0,105,139,206,104],
[138,172,173,202,172,236,0,207,172,172],
[204,238,172,168,204,202,134,0,171,205],
[203,171,138,100,170,135,169,170,0,170],
[170,237,102,237,136,237,169,136,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,167,174,160,177,176,172,179,171],
[161,0,166,188,171,169,176,165,180,182],
[174,175,0,184,176,177,175,167,183,164],
[167,153,157,0,158,170,173,153,174,169],
[181,170,165,183,0,170,181,180,184,175],
[164,172,164,171,171,0,160,166,174,165],
[165,165,166,168,160,181,0,165,181,171],
[169,176,174,188,161,175,176,0,188,168],
[162,161,158,167,157,167,160,153,0,163],
[170,159,177,172,166,176,170,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,161,156,168,146,159,161,153,166],
[187,0,171,169,179,162,174,178,167,178],
[180,170,0,169,173,175,175,180,167,179],
[185,172,172,0,179,173,164,187,175,174],
[173,162,168,162,0,160,162,176,166,172],
[195,179,166,168,181,0,181,181,178,185],
[182,167,166,177,179,160,0,184,169,182],
[180,163,161,154,165,160,157,0,161,152],
[188,174,174,166,175,163,172,180,0,179],
[175,163,162,167,169,156,159,189,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,171,171,176,184,188,170,164],
[159,0,167,163,160,167,182,181,156,166],
[171,174,0,184,178,183,182,181,169,173],
[170,178,157,0,181,174,191,174,177,169],
[170,181,163,160,0,169,178,183,167,167],
[165,174,158,167,172,0,182,175,173,160],
[157,159,159,150,163,159,0,169,160,160],
[153,160,160,167,158,166,172,0,151,155],
[171,185,172,164,174,168,181,190,0,169],
[177,175,168,172,174,181,181,186,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,179,171,176,191,169,163,187,163],
[142,0,176,173,164,173,146,161,172,166],
[162,165,0,150,159,175,146,142,169,159],
[170,168,191,0,182,183,153,158,178,171],
[165,177,182,159,0,177,154,152,173,171],
[150,168,166,158,164,0,150,152,159,169],
[172,195,195,188,187,191,0,171,182,155],
[178,180,199,183,189,189,170,0,190,191],
[154,169,172,163,168,182,159,151,0,160],
[178,175,182,170,170,172,186,150,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,158,150,164,173,165,139,147,158],
[178,0,150,170,159,161,176,149,150,172],
[183,191,0,167,169,176,178,173,166,191],
[191,171,174,0,163,182,168,182,151,163],
[177,182,172,178,0,170,180,162,184,161],
[168,180,165,159,171,0,179,154,147,167],
[176,165,163,173,161,162,0,165,157,156],
[202,192,168,159,179,187,176,0,170,181],
[194,191,175,190,157,194,184,171,0,174],
[183,169,150,178,180,174,185,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,178,163,154,158,165,151,166,170],
[192,0,199,185,182,165,187,171,189,181],
[163,142,0,169,157,146,150,133,169,163],
[178,156,172,0,164,169,159,156,159,168],
[187,159,184,177,0,157,177,160,183,171],
[183,176,195,172,184,0,184,161,184,180],
[176,154,191,182,164,157,0,160,165,173],
[190,170,208,185,181,180,181,0,195,188],
[175,152,172,182,158,157,176,146,0,155],
[171,160,178,173,170,161,168,153,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,168,183,170,181,160,162,180,162],
[182,0,173,179,175,171,185,167,173,175],
[173,168,0,180,200,187,166,171,185,160],
[158,162,161,0,186,167,165,166,167,164],
[171,166,141,155,0,155,159,169,158,159],
[160,170,154,174,186,0,170,175,181,174],
[181,156,175,176,182,171,0,178,175,169],
[179,174,170,175,172,166,163,0,160,152],
[161,168,156,174,183,160,166,181,0,166],
[179,166,181,177,182,167,172,189,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,193,154,181,178,181,163,154,172],
[186,0,185,193,166,195,192,163,166,228],
[148,156,0,139,151,156,148,157,137,146],
[187,148,202,0,165,186,179,162,145,178],
[160,175,190,176,0,188,158,162,160,199],
[163,146,185,155,153,0,147,145,136,175],
[160,149,193,162,183,194,0,166,184,190],
[178,178,184,179,179,196,175,0,160,192],
[187,175,204,196,181,205,157,181,0,210],
[169,113,195,163,142,166,151,149,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,160,180,158,168,166,167,164],
[168,0,158,155,164,168,155,161,159,162],
[168,183,0,165,174,167,175,175,180,167],
[181,186,176,0,169,181,180,175,180,177],
[161,177,167,172,0,160,170,169,177,166],
[183,173,174,160,181,0,170,174,179,176],
[173,186,166,161,171,171,0,173,171,173],
[175,180,166,166,172,167,168,0,183,166],
[174,182,161,161,164,162,170,158,0,165],
[177,179,174,164,175,165,168,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,168,179,138,171,147,179,168,154],
[189,0,174,182,154,175,180,162,165,180],
[173,167,0,168,139,146,160,157,157,154],
[162,159,173,0,143,162,146,160,168,157],
[203,187,202,198,0,167,167,177,179,173],
[170,166,195,179,174,0,179,184,184,168],
[194,161,181,195,174,162,0,174,166,155],
[162,179,184,181,164,157,167,0,173,169],
[173,176,184,173,162,157,175,168,0,149],
[187,161,187,184,168,173,186,172,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,169,171,173,174,167,172,173],
[165,0,175,165,177,177,172,177,175,173],
[168,166,0,165,171,162,168,167,161,171],
[172,176,176,0,170,163,178,165,177,178],
[170,164,170,171,0,166,174,170,172,167],
[168,164,179,178,175,0,172,174,164,172],
[167,169,173,163,167,169,0,166,169,155],
[174,164,174,176,171,167,175,0,167,177],
[169,166,180,164,169,177,172,174,0,167],
[168,168,170,163,174,169,186,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,179,185,202,170,201,170,189,181],
[158,0,184,181,200,158,191,189,202,154],
[162,157,0,175,193,158,177,159,181,186],
[156,160,166,0,219,165,167,167,194,155],
[139,141,148,122,0,154,147,154,157,148],
[171,183,183,176,187,0,188,199,172,159],
[140,150,164,174,194,153,0,143,189,161],
[171,152,182,174,187,142,198,0,173,158],
[152,139,160,147,184,169,152,168,0,181],
[160,187,155,186,193,182,180,183,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,158,149,144,160,158,155,166,167],
[172,0,187,150,162,156,167,166,189,178],
[183,154,0,136,144,154,150,176,148,165],
[192,191,205,0,187,166,187,200,184,202],
[197,179,197,154,0,182,170,169,174,191],
[181,185,187,175,159,0,186,178,180,170],
[183,174,191,154,171,155,0,170,170,165],
[186,175,165,141,172,163,171,0,157,168],
[175,152,193,157,167,161,171,184,0,177],
[174,163,176,139,150,171,176,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,168,160,173,171,162,182,163],
[174,0,165,183,165,169,165,186,190,174],
[174,176,0,168,172,173,176,175,174,159],
[173,158,173,0,160,179,176,172,185,170],
[181,176,169,181,0,192,174,170,192,163],
[168,172,168,162,149,0,167,168,175,162],
[170,176,165,165,167,174,0,165,169,179],
[179,155,166,169,171,173,176,0,175,164],
[159,151,167,156,149,166,172,166,0,150],
[178,167,182,171,178,179,162,177,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,149,149,168,158,149,157,173,173],
[202,0,164,150,161,177,168,195,171,159],
[192,177,0,157,190,181,165,175,187,175],
[192,191,184,0,190,185,170,186,174,183],
[173,180,151,151,0,183,156,170,178,188],
[183,164,160,156,158,0,152,164,162,165],
[192,173,176,171,185,189,0,175,184,165],
[184,146,166,155,171,177,166,0,166,168],
[168,170,154,167,163,179,157,175,0,159],
[168,182,166,158,153,176,176,173,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,172,131,168,181,149,172,146,159],
[191,0,171,166,160,186,154,187,142,164],
[169,170,0,188,174,193,148,186,183,184],
[210,175,153,0,191,184,175,205,161,177],
[173,181,167,150,0,198,141,162,128,167],
[160,155,148,157,143,0,144,152,111,124],
[192,187,193,166,200,197,0,217,186,178],
[169,154,155,136,179,189,124,0,158,161],
[195,199,158,180,213,230,155,183,0,176],
[182,177,157,164,174,217,163,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,149,150,135,176,168,158,157,149],
[164,0,165,161,132,140,177,162,181,157],
[192,176,0,156,170,160,153,163,189,156],
[191,180,185,0,189,175,182,157,190,149],
[206,209,171,152,0,163,164,173,176,184],
[165,201,181,166,178,0,197,187,189,177],
[173,164,188,159,177,144,0,177,173,143],
[183,179,178,184,168,154,164,0,192,162],
[184,160,152,151,165,152,168,149,0,151],
[192,184,185,192,157,164,198,179,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,186,173,179,172,174,158,169,166],
[169,0,167,180,150,169,198,167,174,169],
[155,174,0,165,165,176,171,158,168,154],
[168,161,176,0,152,161,188,150,180,171],
[162,191,176,189,0,190,182,167,193,179],
[169,172,165,180,151,0,174,165,173,163],
[167,143,170,153,159,167,0,157,148,152],
[183,174,183,191,174,176,184,0,175,166],
[172,167,173,161,148,168,193,166,0,192],
[175,172,187,170,162,178,189,175,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,203,182,100,160,119,202,222,141],
[158,0,139,161,159,161,159,179,200,139],
[138,202,0,142,177,200,118,120,217,119],
[159,180,199,0,179,240,178,261,240,160],
[241,182,164,162,0,202,202,242,223,223],
[181,180,141,101,139,0,159,200,220,141],
[222,182,223,163,139,182,0,223,202,141],
[139,162,221,80,99,141,118,0,199,140],
[119,141,124,101,118,121,139,142,0,121],
[200,202,222,181,118,200,200,201,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,163,178,182,175,164,199,191,185],
[147,0,164,129,183,152,148,151,204,150],
[178,177,0,171,199,192,166,206,202,194],
[163,212,170,0,169,177,172,181,202,170],
[159,158,142,172,0,161,160,149,167,168],
[166,189,149,164,180,0,165,175,189,186],
[177,193,175,169,181,176,0,182,193,196],
[142,190,135,160,192,166,159,0,190,176],
[150,137,139,139,174,152,148,151,0,164],
[156,191,147,171,173,155,145,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,189,168,167,182,181,169,184,171],
[174,0,179,170,183,178,185,172,184,181],
[152,162,0,152,142,161,173,170,177,163],
[173,171,189,0,173,195,173,178,192,159],
[174,158,199,168,0,183,170,168,196,172],
[159,163,180,146,158,0,173,164,156,157],
[160,156,168,168,171,168,0,160,169,150],
[172,169,171,163,173,177,181,0,185,158],
[157,157,164,149,145,185,172,156,0,157],
[170,160,178,182,169,184,191,183,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,187,164,187,175,158,194,200,158],
[177,0,178,187,177,184,175,195,201,145],
[154,163,0,168,173,168,166,180,171,159],
[177,154,173,0,179,190,164,185,157,180],
[154,164,168,162,0,186,171,180,194,169],
[166,157,173,151,155,0,159,175,191,156],
[183,166,175,177,170,182,0,202,165,172],
[147,146,161,156,161,166,139,0,175,137],
[141,140,170,184,147,150,176,166,0,141],
[183,196,182,161,172,185,169,204,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,185,180,229,220,162,180,204,218],
[144,0,195,209,172,217,178,215,219,178],
[156,146,0,192,182,162,155,174,189,186],
[161,132,149,0,149,179,169,163,190,169],
[112,169,159,192,0,169,150,157,145,145],
[121,124,179,162,172,0,124,162,156,139],
[179,163,186,172,191,217,0,184,162,187],
[161,126,167,178,184,179,157,0,184,158],
[137,122,152,151,196,185,179,157,0,165],
[123,163,155,172,196,202,154,183,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,159,171,183,160,155,174,161,173],
[177,0,169,185,188,163,174,157,157,181],
[182,172,0,180,179,181,181,174,173,169],
[170,156,161,0,171,166,147,156,156,168],
[158,153,162,170,0,171,150,158,152,161],
[181,178,160,175,170,0,161,171,159,172],
[186,167,160,194,191,180,0,165,177,194],
[167,184,167,185,183,170,176,0,166,189],
[180,184,168,185,189,182,164,175,0,190],
[168,160,172,173,180,169,147,152,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,204,177,219,162,204,205,218,195],
[106,0,161,120,189,106,188,131,159,134],
[137,180,0,151,178,136,203,165,136,178],
[164,221,190,0,203,177,231,218,218,205],
[122,152,163,138,0,163,179,163,217,177],
[179,235,205,164,178,0,246,180,233,207],
[137,153,138,110,162,95,0,190,151,123],
[136,210,176,123,178,161,151,0,163,178],
[123,182,205,123,124,108,190,178,0,153],
[146,207,163,136,164,134,218,163,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,188,185,181,165,164,194,192,188],
[160,0,178,164,180,167,175,183,195,191],
[153,163,0,166,157,139,148,153,184,167],
[156,177,175,0,165,156,162,165,178,166],
[160,161,184,176,0,154,154,175,182,174],
[176,174,202,185,187,0,168,177,179,195],
[177,166,193,179,187,173,0,182,188,191],
[147,158,188,176,166,164,159,0,192,182],
[149,146,157,163,159,162,153,149,0,152],
[153,150,174,175,167,146,150,159,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,167,183,155,173,171,150,158,164],
[161,0,160,185,172,178,157,165,168,168],
[174,181,0,182,159,168,162,173,166,152],
[158,156,159,0,171,164,149,157,161,146],
[186,169,182,170,0,166,150,184,156,180],
[168,163,173,177,175,0,162,169,166,171],
[170,184,179,192,191,179,0,178,182,158],
[191,176,168,184,157,172,163,0,160,176],
[183,173,175,180,185,175,159,181,0,176],
[177,173,189,195,161,170,183,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,161,176,180,173,189,179,176,175],
[165,0,156,163,185,175,170,182,182,174],
[180,185,0,161,175,185,169,180,187,179],
[165,178,180,0,191,171,172,173,172,182],
[161,156,166,150,0,158,144,167,167,165],
[168,166,156,170,183,0,179,160,174,185],
[152,171,172,169,197,162,0,160,173,180],
[162,159,161,168,174,181,181,0,172,177],
[165,159,154,169,174,167,168,169,0,156],
[166,167,162,159,176,156,161,164,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,169,160,164,166,147,171,177,156],
[190,0,178,177,183,176,180,197,176,164],
[172,163,0,171,167,164,169,182,173,171],
[181,164,170,0,179,175,174,192,179,161],
[177,158,174,162,0,164,160,163,155,160],
[175,165,177,166,177,0,170,188,178,158],
[194,161,172,167,181,171,0,187,165,155],
[170,144,159,149,178,153,154,0,154,146],
[164,165,168,162,186,163,176,187,0,151],
[185,177,170,180,181,183,186,195,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,167,172,190,184,158,179,176,185],
[144,0,154,140,182,175,124,155,165,169],
[174,187,0,152,174,178,130,172,200,176],
[169,201,189,0,194,201,182,169,174,188],
[151,159,167,147,0,199,145,137,197,172],
[157,166,163,140,142,0,129,180,178,153],
[183,217,211,159,196,212,0,199,201,188],
[162,186,169,172,204,161,142,0,196,162],
[165,176,141,167,144,163,140,145,0,188],
[156,172,165,153,169,188,153,179,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,116,115,77,191,155,75,114,113],
[152,0,230,115,116,191,230,153,153,191],
[225,111,0,188,150,227,228,150,115,186],
[226,226,153,0,191,228,191,115,154,153],
[264,225,191,150,0,230,230,228,190,191],
[150,150,114,113,111,0,153,112,112,114],
[186,111,113,150,111,188,0,111,114,149],
[266,188,191,226,113,229,230,0,153,191],
[227,188,226,187,151,229,227,188,0,188],
[228,150,155,188,150,227,192,150,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,134,166,148,167,177,132,192],
[166,0,161,141,169,183,159,181,150,191],
[157,180,0,150,180,152,167,192,139,199],
[207,200,191,0,213,186,201,167,181,225],
[175,172,161,128,0,131,161,178,119,156],
[193,158,189,155,210,0,185,182,158,201],
[174,182,174,140,180,156,0,171,135,178],
[164,160,149,174,163,159,170,0,137,175],
[209,191,202,160,222,183,206,204,0,205],
[149,150,142,116,185,140,163,166,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,140,143,161,161,147,156,145,151],
[192,0,159,163,167,181,148,159,149,165],
[201,182,0,162,181,182,156,174,178,165],
[198,178,179,0,178,179,175,169,155,168],
[180,174,160,163,0,177,141,152,171,172],
[180,160,159,162,164,0,143,153,157,176],
[194,193,185,166,200,198,0,174,171,176],
[185,182,167,172,189,188,167,0,169,168],
[196,192,163,186,170,184,170,172,0,168],
[190,176,176,173,169,165,165,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,166,163,160,170,168,174,179,188],
[186,0,168,166,179,173,190,163,169,177],
[175,173,0,177,164,180,184,182,184,175],
[178,175,164,0,173,169,180,166,182,189],
[181,162,177,168,0,155,185,173,170,191],
[171,168,161,172,186,0,178,164,175,183],
[173,151,157,161,156,163,0,176,160,178],
[167,178,159,175,168,177,165,0,181,193],
[162,172,157,159,171,166,181,160,0,174],
[153,164,166,152,150,158,163,148,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,175,181,170,178,179,171,164,170],
[151,0,149,164,155,157,165,156,155,167],
[166,192,0,179,174,170,185,184,174,175],
[160,177,162,0,162,151,167,169,155,170],
[171,186,167,179,0,163,190,176,164,169],
[163,184,171,190,178,0,186,166,170,172],
[162,176,156,174,151,155,0,159,151,156],
[170,185,157,172,165,175,182,0,147,160],
[177,186,167,186,177,171,190,194,0,177],
[171,174,166,171,172,169,185,181,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,156,168,166,153,150,174,168,158],
[177,0,185,184,179,173,172,204,168,169],
[185,156,0,162,173,155,169,168,164,166],
[173,157,179,0,171,175,161,188,163,164],
[175,162,168,170,0,150,166,187,177,174],
[188,168,186,166,191,0,168,186,160,169],
[191,169,172,180,175,173,0,192,190,184],
[167,137,173,153,154,155,149,0,144,166],
[173,173,177,178,164,181,151,197,0,182],
[183,172,175,177,167,172,157,175,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,170,152,164,162,159,171,157,176],
[185,0,175,161,185,185,169,174,182,171],
[171,166,0,165,172,170,169,184,172,174],
[189,180,176,0,168,188,168,186,183,185],
[177,156,169,173,0,164,168,172,162,177],
[179,156,171,153,177,0,171,174,156,172],
[182,172,172,173,173,170,0,178,164,187],
[170,167,157,155,169,167,163,0,168,167],
[184,159,169,158,179,185,177,173,0,173],
[165,170,167,156,164,169,154,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,157,166,171,162,168,161,158,155],
[177,0,182,173,165,165,166,152,173,160],
[184,159,0,162,161,156,179,137,177,152],
[175,168,179,0,187,161,167,154,178,155],
[170,176,180,154,0,181,153,154,165,170],
[179,176,185,180,160,0,189,180,174,171],
[173,175,162,174,188,152,0,136,147,152],
[180,189,204,187,187,161,205,0,176,167],
[183,168,164,163,176,167,194,165,0,160],
[186,181,189,186,171,170,189,174,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,135,67,137,203,273,203,135,273],
[274,0,135,206,206,271,274,271,203,341],
[206,206,0,138,138,203,206,203,136,206],
[274,135,203,0,138,271,206,271,135,273],
[204,135,203,203,0,271,341,271,203,203],
[138,70,138,70,70,0,138,205,70,138],
[68,67,135,135,0,203,0,135,67,203],
[138,70,138,70,70,136,206,0,138,206],
[206,138,205,206,138,271,274,203,0,274],
[68,0,135,68,138,203,138,135,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,177,157,175,169,154,169,172,165],
[170,0,166,149,148,171,147,170,158,157],
[164,175,0,143,143,169,157,159,171,149],
[184,192,198,0,179,170,175,175,183,168],
[166,193,198,162,0,178,172,182,173,180],
[172,170,172,171,163,0,158,172,165,167],
[187,194,184,166,169,183,0,196,168,170],
[172,171,182,166,159,169,145,0,174,174],
[169,183,170,158,168,176,173,167,0,155],
[176,184,192,173,161,174,171,167,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,146,151,153,158,144,163,180,153],
[173,0,176,166,188,155,172,183,175,174],
[195,165,0,157,164,176,169,179,181,168],
[190,175,184,0,172,158,159,175,174,162],
[188,153,177,169,0,167,164,171,180,167],
[183,186,165,183,174,0,161,181,173,178],
[197,169,172,182,177,180,0,184,192,169],
[178,158,162,166,170,160,157,0,179,170],
[161,166,160,167,161,168,149,162,0,173],
[188,167,173,179,174,163,172,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,134,150,179,137,156,139,137],
[176,0,163,139,145,183,158,177,158,141],
[179,178,0,129,165,168,178,153,139,158],
[207,202,212,0,213,211,166,184,186,186],
[191,196,176,128,0,200,172,184,159,153],
[162,158,173,130,141,0,140,165,152,130],
[204,183,163,175,169,201,0,190,158,174],
[185,164,188,157,157,176,151,0,124,149],
[202,183,202,155,182,189,183,217,0,170],
[204,200,183,155,188,211,167,192,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,175,182,182,207,161,187,171,180],
[156,0,157,170,158,180,138,155,177,170],
[166,184,0,170,179,193,170,178,181,180],
[159,171,171,0,168,177,158,160,173,182],
[159,183,162,173,0,181,152,167,159,180],
[134,161,148,164,160,0,150,160,155,180],
[180,203,171,183,189,191,0,164,167,186],
[154,186,163,181,174,181,177,0,165,192],
[170,164,160,168,182,186,174,176,0,194],
[161,171,161,159,161,161,155,149,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,178,174,192,189,175,181,185,166],
[160,0,159,172,183,170,159,149,170,163],
[163,182,0,173,174,154,169,163,164,174],
[167,169,168,0,171,169,172,179,181,166],
[149,158,167,170,0,159,160,157,160,149],
[152,171,187,172,182,0,170,172,175,179],
[166,182,172,169,181,171,0,175,173,165],
[160,192,178,162,184,169,166,0,170,172],
[156,171,177,160,181,166,168,171,0,164],
[175,178,167,175,192,162,176,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,162,173,176,173,177,158,170,172],
[181,0,148,156,177,162,150,149,153,178],
[179,193,0,176,179,183,198,167,163,187],
[168,185,165,0,177,181,176,142,162,156],
[165,164,162,164,0,164,174,145,153,174],
[168,179,158,160,177,0,175,156,166,161],
[164,191,143,165,167,166,0,158,168,145],
[183,192,174,199,196,185,183,0,178,170],
[171,188,178,179,188,175,173,163,0,171],
[169,163,154,185,167,180,196,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,150,159,149,171,130,161,139],
[171,0,158,151,184,162,179,147,168,165],
[178,183,0,174,178,178,180,148,175,167],
[191,190,167,0,182,166,172,146,177,144],
[182,157,163,159,0,167,177,155,161,160],
[192,179,163,175,174,0,194,163,152,162],
[170,162,161,169,164,147,0,144,149,154],
[211,194,193,195,186,178,197,0,189,169],
[180,173,166,164,180,189,192,152,0,178],
[202,176,174,197,181,179,187,172,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,160,223,159,158,143,213,176,163],
[149,0,176,159,144,157,159,162,178,131],
[181,165,0,193,128,160,193,197,178,162],
[118,182,148,0,133,99,132,147,148,115],
[182,197,213,208,0,196,197,243,163,196],
[183,184,181,242,145,0,163,198,179,150],
[198,182,148,209,144,178,0,228,130,130],
[128,179,144,194,98,143,113,0,128,98],
[165,163,163,193,178,162,211,213,0,197],
[178,210,179,226,145,191,211,243,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,140,171,161,182,174,175,163,177],
[169,0,173,158,156,185,170,154,161,166],
[201,168,0,178,181,187,170,170,171,198],
[170,183,163,0,194,196,170,174,158,188],
[180,185,160,147,0,170,186,160,149,179],
[159,156,154,145,171,0,153,148,151,166],
[167,171,171,171,155,188,0,165,163,181],
[166,187,171,167,181,193,176,0,184,188],
[178,180,170,183,192,190,178,157,0,212],
[164,175,143,153,162,175,160,153,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,171,183,157,181,179,180,174,177],
[176,0,169,175,156,175,174,161,168,179],
[170,172,0,174,171,183,171,179,175,175],
[158,166,167,0,159,178,170,180,164,174],
[184,185,170,182,0,188,175,183,174,187],
[160,166,158,163,153,0,152,171,160,165],
[162,167,170,171,166,189,0,184,185,185],
[161,180,162,161,158,170,157,0,176,167],
[167,173,166,177,167,181,156,165,0,174],
[164,162,166,167,154,176,156,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,192,180,177,183,183,182,193,179],
[173,0,190,182,186,171,158,173,194,174],
[149,151,0,172,160,163,149,157,161,157],
[161,159,169,0,169,158,146,166,171,160],
[164,155,181,172,0,164,161,172,166,151],
[158,170,178,183,177,0,159,180,182,178],
[158,183,192,195,180,182,0,187,189,175],
[159,168,184,175,169,161,154,0,163,163],
[148,147,180,170,175,159,152,178,0,155],
[162,167,184,181,190,163,166,178,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,190,185,196,189,178,191,186,170],
[155,0,170,168,182,161,174,186,172,149],
[151,171,0,181,177,170,183,189,177,157],
[156,173,160,0,179,166,168,160,161,151],
[145,159,164,162,0,163,165,164,180,152],
[152,180,171,175,178,0,171,181,181,181],
[163,167,158,173,176,170,0,179,178,152],
[150,155,152,181,177,160,162,0,187,156],
[155,169,164,180,161,160,163,154,0,153],
[171,192,184,190,189,160,189,185,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,163,174,165,150,184,157,156],
[178,0,151,159,160,160,181,183,155,156],
[178,190,0,169,168,199,181,182,175,172],
[178,182,172,0,182,180,171,175,178,163],
[167,181,173,159,0,169,163,173,170,167],
[176,181,142,161,172,0,169,174,167,156],
[191,160,160,170,178,172,0,182,177,163],
[157,158,159,166,168,167,159,0,170,159],
[184,186,166,163,171,174,164,171,0,171],
[185,185,169,178,174,185,178,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,161,163,154,155,177,157,173,177],
[178,0,165,162,166,159,184,157,174,162],
[180,176,0,169,167,167,172,150,181,180],
[178,179,172,0,162,167,176,159,176,165],
[187,175,174,179,0,170,185,175,177,175],
[186,182,174,174,171,0,181,162,181,172],
[164,157,169,165,156,160,0,160,171,160],
[184,184,191,182,166,179,181,0,176,182],
[168,167,160,165,164,160,170,165,0,176],
[164,179,161,176,166,169,181,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,169,187,177,183,185,167,176],
[175,0,163,163,184,164,177,160,161,169],
[166,178,0,171,177,170,180,172,180,165],
[172,178,170,0,188,169,183,167,174,165],
[154,157,164,153,0,174,171,158,159,163],
[164,177,171,172,167,0,177,174,172,172],
[158,164,161,158,170,164,0,164,153,159],
[156,181,169,174,183,167,177,0,175,166],
[174,180,161,167,182,169,188,166,0,173],
[165,172,176,176,178,169,182,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,184,175,163,175,158,172,182],
[167,0,174,176,168,153,175,158,164,164],
[165,167,0,172,160,159,178,160,171,172],
[157,165,169,0,160,145,160,157,154,171],
[166,173,181,181,0,161,174,152,165,183],
[178,188,182,196,180,0,182,172,162,188],
[166,166,163,181,167,159,0,157,160,165],
[183,183,181,184,189,169,184,0,170,187],
[169,177,170,187,176,179,181,171,0,178],
[159,177,169,170,158,153,176,154,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,175,159,170,177,181,173,171,183],
[165,0,159,163,166,159,171,167,163,168],
[166,182,0,175,187,172,183,188,168,173],
[182,178,166,0,175,174,181,184,181,182],
[171,175,154,166,0,173,169,176,175,163],
[164,182,169,167,168,0,181,182,177,173],
[160,170,158,160,172,160,0,168,174,167],
[168,174,153,157,165,159,173,0,172,166],
[170,178,173,160,166,164,167,169,0,163],
[158,173,168,159,178,168,174,175,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,206,188,186,179,182,169,188,180],
[171,0,185,161,175,158,167,153,171,162],
[135,156,0,147,165,155,167,170,177,170],
[153,180,194,0,184,179,188,173,194,169],
[155,166,176,157,0,166,172,159,168,166],
[162,183,186,162,175,0,169,153,186,171],
[159,174,174,153,169,172,0,172,176,173],
[172,188,171,168,182,188,169,0,198,180],
[153,170,164,147,173,155,165,143,0,155],
[161,179,171,172,175,170,168,161,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,213,164,181,213,183,182,198,113],
[213,0,244,196,179,244,164,213,229,210],
[128,97,0,160,162,195,129,148,164,112],
[177,145,181,0,166,179,149,162,178,128],
[160,162,179,175,0,226,194,161,211,144],
[128,97,146,162,115,0,147,146,148,95],
[158,177,212,192,147,194,0,131,176,128],
[159,128,193,179,180,195,210,0,226,111],
[143,112,177,163,130,193,165,115,0,161],
[228,131,229,213,197,246,213,230,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,168,178,182,169,179,176,192,179],
[181,0,161,192,168,176,176,189,196,184],
[173,180,0,186,171,163,167,180,181,195],
[163,149,155,0,150,159,165,162,150,167],
[159,173,170,191,0,163,170,185,193,175],
[172,165,178,182,178,0,167,175,193,173],
[162,165,174,176,171,174,0,191,189,185],
[165,152,161,179,156,166,150,0,167,160],
[149,145,160,191,148,148,152,174,0,174],
[162,157,146,174,166,168,156,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,153,145,156,189,206,136,173],
[165,0,197,172,152,169,172,193,156,149],
[176,144,0,142,140,153,171,192,139,133],
[188,169,199,0,163,175,203,188,176,166],
[196,189,201,178,0,182,184,210,198,145],
[185,172,188,166,159,0,202,202,172,167],
[152,169,170,138,157,139,0,186,158,146],
[135,148,149,153,131,139,155,0,139,133],
[205,185,202,165,143,169,183,202,0,169],
[168,192,208,175,196,174,195,208,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,187,170,176,182,182,162,176,177],
[153,0,170,174,171,187,173,160,158,158],
[154,171,0,165,167,181,149,141,141,170],
[171,167,176,0,166,165,170,162,145,168],
[165,170,174,175,0,188,166,151,147,165],
[159,154,160,176,153,0,154,137,139,157],
[159,168,192,171,175,187,0,163,157,178],
[179,181,200,179,190,204,178,0,157,192],
[165,183,200,196,194,202,184,184,0,180],
[164,183,171,173,176,184,163,149,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,178,170,173,193,249,175,168,192],
[144,0,176,176,147,159,180,95,131,178],
[163,165,0,137,164,164,166,158,156,147],
[171,165,204,0,125,166,203,134,173,198],
[168,194,177,216,0,173,193,162,155,201],
[148,182,177,175,168,0,176,145,153,188],
[92,161,175,138,148,165,0,125,141,178],
[166,246,183,207,179,196,216,0,218,206],
[173,210,185,168,186,188,200,123,0,162],
[149,163,194,143,140,153,163,135,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,182,177,180,181,163,198,187],
[164,0,173,162,178,171,163,171,190,179],
[167,168,0,165,162,171,161,169,189,169],
[159,179,176,0,171,166,164,173,191,180],
[164,163,179,170,0,166,163,154,173,168],
[161,170,170,175,175,0,167,169,195,166],
[160,178,180,177,178,174,0,176,203,169],
[178,170,172,168,187,172,165,0,190,175],
[143,151,152,150,168,146,138,151,0,157],
[154,162,172,161,173,175,172,166,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,166,159,164,169,157,163,175,163],
[179,0,168,172,159,169,181,170,180,175],
[175,173,0,169,167,168,175,177,174,163],
[182,169,172,0,165,170,181,172,175,170],
[177,182,174,176,0,169,191,177,180,180],
[172,172,173,171,172,0,186,179,186,155],
[184,160,166,160,150,155,0,161,162,152],
[178,171,164,169,164,162,180,0,173,157],
[166,161,167,166,161,155,179,168,0,173],
[178,166,178,171,161,186,189,184,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,160,161,195,166,169,142,159,163],
[184,0,164,159,186,176,181,155,170,173],
[181,177,0,181,184,181,169,172,173,175],
[180,182,160,0,186,181,170,154,188,178],
[146,155,157,155,0,148,166,145,159,161],
[175,165,160,160,193,0,167,157,176,174],
[172,160,172,171,175,174,0,179,183,169],
[199,186,169,187,196,184,162,0,176,172],
[182,171,168,153,182,165,158,165,0,175],
[178,168,166,163,180,167,172,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,199,168,169,164,157,173,168],
[170,0,176,179,172,161,158,164,188,161],
[173,165,0,184,157,166,154,147,180,173],
[142,162,157,0,159,148,150,145,149,160],
[173,169,184,182,0,162,166,154,157,161],
[172,180,175,193,179,0,176,151,176,176],
[177,183,187,191,175,165,0,186,188,174],
[184,177,194,196,187,190,155,0,185,177],
[168,153,161,192,184,165,153,156,0,181],
[173,180,168,181,180,165,167,164,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,193,175,169,188,192,185,176,184],
[158,0,134,174,137,143,165,146,165,148],
[148,207,0,168,176,179,179,166,153,174],
[166,167,173,0,153,180,182,172,163,177],
[172,204,165,188,0,166,192,184,163,177],
[153,198,162,161,175,0,176,165,163,180],
[149,176,162,159,149,165,0,148,148,157],
[156,195,175,169,157,176,193,0,174,171],
[165,176,188,178,178,178,193,167,0,172],
[157,193,167,164,164,161,184,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,169,180,152,163,168,173,164,161],
[169,0,159,194,154,186,146,159,175,170],
[172,182,0,181,169,169,165,173,177,164],
[161,147,160,0,177,158,168,154,169,160],
[189,187,172,164,0,184,174,187,180,176],
[178,155,172,183,157,0,158,165,168,163],
[173,195,176,173,167,183,0,173,181,178],
[168,182,168,187,154,176,168,0,175,182],
[177,166,164,172,161,173,160,166,0,168],
[180,171,177,181,165,178,163,159,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,125,151,143,134,126,136,161,162],
[177,0,138,146,172,157,135,136,145,123],
[216,203,0,202,194,175,222,164,192,211],
[190,195,139,0,176,137,167,128,170,186],
[198,169,147,165,0,149,199,158,164,186],
[207,184,166,204,192,0,203,163,174,212],
[215,206,119,174,142,138,0,147,152,153],
[205,205,177,213,183,178,194,0,162,207],
[180,196,149,171,177,167,189,179,0,214],
[179,218,130,155,155,129,188,134,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,193,164,170,170,200,160,158,168],
[144,0,187,177,178,163,184,177,146,174],
[148,154,0,168,159,152,172,165,151,150],
[177,164,173,0,162,160,201,164,158,169],
[171,163,182,179,0,166,187,164,146,148],
[171,178,189,181,175,0,177,178,142,166],
[141,157,169,140,154,164,0,154,140,165],
[181,164,176,177,177,163,187,0,172,153],
[183,195,190,183,195,199,201,169,0,193],
[173,167,191,172,193,175,176,188,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,133,158,197,200,160,148,185],
[167,0,172,182,194,229,232,203,169,180],
[166,169,0,165,166,179,193,204,189,154],
[208,159,176,0,171,183,234,195,172,160],
[183,147,175,170,0,195,173,157,207,157],
[144,112,162,158,146,0,189,165,158,136],
[141,109,148,107,168,152,0,118,144,131],
[181,138,137,146,184,176,223,0,160,135],
[193,172,152,169,134,183,197,181,0,134],
[156,161,187,181,184,205,210,206,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,189,162,151,172,176,172,166],
[175,0,178,182,179,172,161,170,175,167],
[172,163,0,203,177,156,169,176,160,136],
[152,159,138,0,165,163,171,171,165,157],
[179,162,164,176,0,177,170,181,166,161],
[190,169,185,178,164,0,175,174,166,164],
[169,180,172,170,171,166,0,185,184,171],
[165,171,165,170,160,167,156,0,158,162],
[169,166,181,176,175,175,157,183,0,179],
[175,174,205,184,180,177,170,179,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,160,179,179,179,168,173,168,159],
[178,0,178,183,196,189,157,180,186,164],
[181,163,0,160,186,173,170,167,185,199],
[162,158,181,0,188,179,166,173,177,151],
[162,145,155,153,0,172,141,154,166,150],
[162,152,168,162,169,0,143,155,169,145],
[173,184,171,175,200,198,0,187,183,165],
[168,161,174,168,187,186,154,0,175,158],
[173,155,156,164,175,172,158,166,0,158],
[182,177,142,190,191,196,176,183,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,162,170,174,171,164,160,163],
[177,0,170,169,171,188,188,168,165,170],
[172,171,0,175,164,177,169,173,173,173],
[179,172,166,0,165,170,179,175,183,157],
[171,170,177,176,0,173,177,163,183,155],
[167,153,164,171,168,0,171,155,173,161],
[170,153,172,162,164,170,0,164,160,161],
[177,173,168,166,178,186,177,0,181,164],
[181,176,168,158,158,168,181,160,0,159],
[178,171,168,184,186,180,180,177,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,172,167,164,172,161,181,195],
[178,0,179,178,181,170,171,170,175,197],
[178,162,0,181,171,171,161,180,176,186],
[169,163,160,0,171,173,173,170,172,192],
[174,160,170,170,0,179,167,167,180,198],
[177,171,170,168,162,0,165,170,182,192],
[169,170,180,168,174,176,0,182,187,183],
[180,171,161,171,174,171,159,0,171,195],
[160,166,165,169,161,159,154,170,0,183],
[146,144,155,149,143,149,158,146,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,160,162,158,154,156,161,160,169],
[179,0,169,164,163,177,176,173,175,183],
[181,172,0,180,165,178,170,171,171,168],
[179,177,161,0,167,182,169,161,171,197],
[183,178,176,174,0,173,197,184,169,193],
[187,164,163,159,168,0,169,172,162,182],
[185,165,171,172,144,172,0,168,175,176],
[180,168,170,180,157,169,173,0,177,191],
[181,166,170,170,172,179,166,164,0,170],
[172,158,173,144,148,159,165,150,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,209,212,207,205,237,217,202,200],
[196,0,243,159,180,185,224,205,155,159],
[132,98,0,163,163,166,196,148,159,182],
[129,182,178,0,187,171,206,210,168,176],
[134,161,178,154,0,175,233,187,199,209],
[136,156,175,170,166,0,195,198,188,167],
[104,117,145,135,108,146,0,123,115,158],
[124,136,193,131,154,143,218,0,167,179],
[139,186,182,173,142,153,226,174,0,184],
[141,182,159,165,132,174,183,162,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,118,203,169,168,168,186,187,189],
[207,0,121,240,222,155,190,172,190,206],
[223,220,0,238,170,222,206,171,239,205],
[138,101,103,0,154,137,155,153,173,189],
[172,119,171,187,0,121,102,139,155,137],
[173,186,119,204,220,0,153,223,207,206],
[173,151,135,186,239,188,0,153,222,224],
[155,169,170,188,202,118,188,0,153,171],
[154,151,102,168,186,134,119,188,0,186],
[152,135,136,152,204,135,117,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,148,161,170,162,152,174,174,168],
[147,0,140,164,159,156,150,159,150,153],
[193,201,0,204,181,191,160,190,189,174],
[180,177,137,0,161,175,136,169,176,164],
[171,182,160,180,0,170,152,177,174,182],
[179,185,150,166,171,0,152,164,164,189],
[189,191,181,205,189,189,0,196,175,170],
[167,182,151,172,164,177,145,0,156,167],
[167,191,152,165,167,177,166,185,0,177],
[173,188,167,177,159,152,171,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,161,140,169,151,150,160,167],
[172,0,164,168,166,171,154,177,169,171],
[177,177,0,166,174,182,164,183,174,177],
[180,173,175,0,153,177,169,161,161,166],
[201,175,167,188,0,187,173,173,189,176],
[172,170,159,164,154,0,150,176,159,153],
[190,187,177,172,168,191,0,179,191,189],
[191,164,158,180,168,165,162,0,169,167],
[181,172,167,180,152,182,150,172,0,188],
[174,170,164,175,165,188,152,174,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,178,164,164,165,178,184,171,154],
[159,0,158,157,149,139,168,142,151,166],
[163,183,0,163,158,160,160,168,172,151],
[177,184,178,0,174,165,188,169,167,172],
[177,192,183,167,0,164,181,190,176,164],
[176,202,181,176,177,0,180,181,174,164],
[163,173,181,153,160,161,0,177,159,158],
[157,199,173,172,151,160,164,0,169,168],
[170,190,169,174,165,167,182,172,0,166],
[187,175,190,169,177,177,183,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,171,172,170,170,160,156,166,166],
[185,0,186,191,187,170,190,192,182,183],
[170,155,0,161,167,161,167,167,173,164],
[169,150,180,0,171,153,171,174,153,170],
[171,154,174,170,0,169,163,152,172,171],
[171,171,180,188,172,0,166,173,163,187],
[181,151,174,170,178,175,0,178,176,179],
[185,149,174,167,189,168,163,0,160,180],
[175,159,168,188,169,178,165,181,0,166],
[175,158,177,171,170,154,162,161,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,187,168,148,158,194,168,185,149],
[174,0,160,185,158,162,178,162,183,180],
[154,181,0,157,171,152,189,167,177,148],
[173,156,184,0,164,167,180,172,171,157],
[193,183,170,177,0,150,177,165,168,162],
[183,179,189,174,191,0,192,179,179,140],
[147,163,152,161,164,149,0,149,143,150],
[173,179,174,169,176,162,192,0,180,169],
[156,158,164,170,173,162,198,161,0,145],
[192,161,193,184,179,201,191,172,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,178,185,167,166,189,184,194],
[163,0,183,188,192,180,174,191,169,184],
[165,158,0,179,180,179,181,201,168,188],
[163,153,162,0,193,172,154,183,173,206],
[156,149,161,148,0,158,144,174,160,177],
[174,161,162,169,183,0,166,198,177,188],
[175,167,160,187,197,175,0,184,189,188],
[152,150,140,158,167,143,157,0,172,186],
[157,172,173,168,181,164,152,169,0,183],
[147,157,153,135,164,153,153,155,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,121,152,158,165,158,163,153],
[168,0,168,150,151,163,155,162,155,174],
[177,173,0,177,158,159,179,161,180,172],
[220,191,164,0,180,168,186,178,189,170],
[189,190,183,161,0,168,164,168,170,159],
[183,178,182,173,173,0,174,157,172,164],
[176,186,162,155,177,167,0,163,181,167],
[183,179,180,163,173,184,178,0,181,170],
[178,186,161,152,171,169,160,160,0,147],
[188,167,169,171,182,177,174,171,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,180,176,171,173,170,192,172,173],
[163,0,169,163,174,163,153,168,173,160],
[161,172,0,166,176,168,163,177,170,165],
[165,178,175,0,179,170,168,169,164,174],
[170,167,165,162,0,173,172,172,166,168],
[168,178,173,171,168,0,166,186,176,177],
[171,188,178,173,169,175,0,178,174,176],
[149,173,164,172,169,155,163,0,158,170],
[169,168,171,177,175,165,167,183,0,175],
[168,181,176,167,173,164,165,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,160,190,181,177,179,177,165,188],
[143,0,155,161,168,160,173,159,160,159],
[181,186,0,195,166,164,182,186,171,189],
[151,180,146,0,160,167,144,165,146,154],
[160,173,175,181,0,157,174,168,164,161],
[164,181,177,174,184,0,183,185,161,170],
[162,168,159,197,167,158,0,175,148,173],
[164,182,155,176,173,156,166,0,143,164],
[176,181,170,195,177,180,193,198,0,194],
[153,182,152,187,180,171,168,177,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,166,166,173,195,189,181,175,161],
[158,0,142,172,160,179,164,170,170,148],
[175,199,0,183,169,197,182,180,178,172],
[175,169,158,0,174,173,174,191,176,159],
[168,181,172,167,0,186,168,171,173,164],
[146,162,144,168,155,0,166,162,156,160],
[152,177,159,167,173,175,0,171,154,156],
[160,171,161,150,170,179,170,0,160,163],
[166,171,163,165,168,185,187,181,0,159],
[180,193,169,182,177,181,185,178,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,168,160,165,171,166,162,164],
[174,0,175,172,157,159,186,168,161,174],
[170,166,0,174,165,161,178,165,156,163],
[173,169,167,0,160,170,185,166,158,157],
[181,184,176,181,0,178,178,178,160,174],
[176,182,180,171,163,0,173,176,165,170],
[170,155,163,156,163,168,0,156,161,147],
[175,173,176,175,163,165,185,0,171,163],
[179,180,185,183,181,176,180,170,0,174],
[177,167,178,184,167,171,194,178,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,159,180,157,190,190,165,168],
[161,0,171,177,162,152,166,188,168,170],
[161,170,0,163,163,168,187,192,142,164],
[182,164,178,0,165,170,178,197,146,164],
[161,179,178,176,0,171,184,168,163,164],
[184,189,173,171,170,0,203,205,189,183],
[151,175,154,163,157,138,0,168,142,165],
[151,153,149,144,173,136,173,0,144,159],
[176,173,199,195,178,152,199,197,0,167],
[173,171,177,177,177,158,176,182,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,152,160,174,175,163,188,152,160],
[162,0,132,154,165,146,163,178,163,150],
[189,209,0,172,188,170,179,192,174,194],
[181,187,169,0,164,157,155,170,151,138],
[167,176,153,177,0,171,161,204,156,143],
[166,195,171,184,170,0,178,197,171,162],
[178,178,162,186,180,163,0,194,174,163],
[153,163,149,171,137,144,147,0,147,152],
[189,178,167,190,185,170,167,194,0,155],
[181,191,147,203,198,179,178,189,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,177,171,166,188,209,186,187,183],
[137,0,161,156,157,182,173,152,157,143],
[164,180,0,159,168,176,190,145,178,157],
[170,185,182,0,177,186,202,146,205,160],
[175,184,173,164,0,176,210,171,195,172],
[153,159,165,155,165,0,176,152,183,159],
[132,168,151,139,131,165,0,161,178,165],
[155,189,196,195,170,189,180,0,181,188],
[154,184,163,136,146,158,163,160,0,160],
[158,198,184,181,169,182,176,153,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,188,175,167,184,167,183,157],
[161,0,158,176,166,173,163,174,172,172],
[158,183,0,190,158,165,169,178,175,148],
[153,165,151,0,144,140,162,150,166,146],
[166,175,183,197,0,157,170,180,200,172],
[174,168,176,201,184,0,170,195,190,175],
[157,178,172,179,171,171,0,171,180,163],
[174,167,163,191,161,146,170,0,175,163],
[158,169,166,175,141,151,161,166,0,162],
[184,169,193,195,169,166,178,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,197,180,169,172,191,190,175,152],
[174,0,196,174,155,151,176,163,181,190],
[144,145,0,142,151,145,179,147,165,149],
[161,167,199,0,166,167,183,176,184,173],
[172,186,190,175,0,168,197,159,185,161],
[169,190,196,174,173,0,190,174,180,167],
[150,165,162,158,144,151,0,161,162,165],
[151,178,194,165,182,167,180,0,180,165],
[166,160,176,157,156,161,179,161,0,160],
[189,151,192,168,180,174,176,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,185,175,180,183,185,171,169],
[170,0,185,180,169,181,189,189,187,190],
[165,156,0,166,163,164,173,177,156,166],
[156,161,175,0,160,169,172,178,151,179],
[166,172,178,181,0,176,165,186,169,171],
[161,160,177,172,165,0,167,171,165,178],
[158,152,168,169,176,174,0,176,167,173],
[156,152,164,163,155,170,165,0,145,169],
[170,154,185,190,172,176,174,196,0,177],
[172,151,175,162,170,163,168,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,184,192,158,165,190,203,156,179],
[163,0,161,166,176,153,167,184,136,157],
[157,180,0,189,160,151,166,184,150,158],
[149,175,152,0,153,144,151,183,151,146],
[183,165,181,188,0,173,180,205,164,164],
[176,188,190,197,168,0,189,212,189,183],
[151,174,175,190,161,152,0,204,143,167],
[138,157,157,158,136,129,137,0,120,149],
[185,205,191,190,177,152,198,221,0,181],
[162,184,183,195,177,158,174,192,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,154,171,147,168,146,208,191,168],
[124,0,145,126,139,134,157,171,134,143],
[187,196,0,173,148,182,134,216,145,170],
[170,215,168,0,159,132,128,178,165,167],
[194,202,193,182,0,153,118,194,141,190],
[173,207,159,209,188,0,134,206,170,148],
[195,184,207,213,223,207,0,220,157,206],
[133,170,125,163,147,135,121,0,133,133],
[150,207,196,176,200,171,184,208,0,191],
[173,198,171,174,151,193,135,208,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,165,153,165,183,134,159,159,160],
[204,0,204,174,195,202,181,157,194,162],
[176,137,0,144,166,164,147,153,162,163],
[188,167,197,0,171,205,193,173,193,182],
[176,146,175,170,0,210,171,184,173,171],
[158,139,177,136,131,0,148,146,146,161],
[207,160,194,148,170,193,0,158,156,184],
[182,184,188,168,157,195,183,0,174,177],
[182,147,179,148,168,195,185,167,0,144],
[181,179,178,159,170,180,157,164,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,180,195,178,177,177,184,165],
[168,0,166,171,185,193,166,185,172,170],
[182,175,0,159,191,196,175,170,184,167],
[161,170,182,0,197,191,179,176,181,166],
[146,156,150,144,0,157,153,160,157,170],
[163,148,145,150,184,0,171,155,169,162],
[164,175,166,162,188,170,0,153,170,175],
[164,156,171,165,181,186,188,0,187,167],
[157,169,157,160,184,172,171,154,0,187],
[176,171,174,175,171,179,166,174,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,157,168,148,167,165,184,170,160],
[185,0,177,167,174,176,166,197,193,188],
[184,164,0,192,170,178,174,185,182,176],
[173,174,149,0,155,164,166,193,162,183],
[193,167,171,186,0,182,172,182,188,171],
[174,165,163,177,159,0,165,188,175,179],
[176,175,167,175,169,176,0,185,188,187],
[157,144,156,148,159,153,156,0,175,158],
[171,148,159,179,153,166,153,166,0,149],
[181,153,165,158,170,162,154,183,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,150,176,160,154,132,155,151],
[170,0,202,169,194,175,166,177,189,171],
[169,139,0,156,174,158,182,159,173,165],
[191,172,185,0,188,191,157,173,150,188],
[165,147,167,153,0,156,169,131,153,157],
[181,166,183,150,185,0,165,168,168,181],
[187,175,159,184,172,176,0,173,154,187],
[209,164,182,168,210,173,168,0,164,183],
[186,152,168,191,188,173,187,177,0,174],
[190,170,176,153,184,160,154,158,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,158,150,156,153,159,149,160],
[172,0,157,158,162,184,150,168,158,160],
[171,184,0,163,165,175,170,171,161,177],
[183,183,178,0,159,171,158,184,170,174],
[191,179,176,182,0,173,175,170,172,174],
[185,157,166,170,168,0,151,155,150,176],
[188,191,171,183,166,190,0,199,170,191],
[182,173,170,157,171,186,142,0,157,184],
[192,183,180,171,169,191,171,184,0,189],
[181,181,164,167,167,165,150,157,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,182,180,174,184,165,179,181],
[160,0,163,177,173,160,143,152,141,149],
[160,178,0,173,177,172,166,166,158,163],
[159,164,168,0,173,167,163,145,165,166],
[161,168,164,168,0,176,169,178,164,166],
[167,181,169,174,165,0,165,164,162,158],
[157,198,175,178,172,176,0,191,165,181],
[176,189,175,196,163,177,150,0,152,164],
[162,200,183,176,177,179,176,189,0,185],
[160,192,178,175,175,183,160,177,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,165,132,142,183,198,161,189],
[163,0,138,150,107,149,187,162,170,155],
[179,203,0,193,160,182,225,185,176,186],
[176,191,148,0,143,159,188,175,160,169],
[209,234,181,198,0,180,206,207,176,165],
[199,192,159,182,161,0,217,213,206,201],
[158,154,116,153,135,124,0,133,154,132],
[143,179,156,166,134,128,208,0,151,134],
[180,171,165,181,165,135,187,190,0,140],
[152,186,155,172,176,140,209,207,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,195,157,158,146,170,141,191,141],
[163,0,180,179,165,152,152,121,196,125],
[146,161,0,174,147,113,134,95,158,139],
[184,162,167,0,167,187,145,143,190,139],
[183,176,194,174,0,151,169,162,193,147],
[195,189,228,154,190,0,184,146,205,174],
[171,189,207,196,172,157,0,161,196,135],
[200,220,246,198,179,195,180,0,250,159],
[150,145,183,151,148,136,145,91,0,110],
[200,216,202,202,194,167,206,182,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,205,168,161,179,179,184,200,181],
[169,0,152,183,157,164,178,183,171,166],
[136,189,0,159,168,157,157,193,189,174],
[173,158,182,0,173,156,180,180,181,165],
[180,184,173,168,0,167,176,171,170,187],
[162,177,184,185,174,0,198,162,199,214],
[162,163,184,161,165,143,0,155,179,166],
[157,158,148,161,170,179,186,0,165,179],
[141,170,152,160,171,142,162,176,0,149],
[160,175,167,176,154,127,175,162,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,179,185,164,171,183,176,159,167],
[165,0,157,179,151,169,158,152,166,171],
[162,184,0,158,165,173,159,159,157,152],
[156,162,183,0,154,182,155,156,175,165],
[177,190,176,187,0,180,181,161,172,155],
[170,172,168,159,161,0,162,161,160,169],
[158,183,182,186,160,179,0,173,155,177],
[165,189,182,185,180,180,168,0,158,158],
[182,175,184,166,169,181,186,183,0,183],
[174,170,189,176,186,172,164,183,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,159,155,164,177,159,179,155,176],
[184,0,163,165,180,190,176,183,163,176],
[182,178,0,169,168,204,181,170,161,188],
[186,176,172,0,175,197,176,172,165,192],
[177,161,173,166,0,199,178,172,175,191],
[164,151,137,144,142,0,133,163,143,153],
[182,165,160,165,163,208,0,176,171,198],
[162,158,171,169,169,178,165,0,162,171],
[186,178,180,176,166,198,170,179,0,162],
[165,165,153,149,150,188,143,170,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,182,157,175,158,161,172,171,166],
[184,0,182,167,180,178,181,183,198,176],
[159,159,0,142,160,153,161,172,170,171],
[184,174,199,0,190,163,193,190,184,186],
[166,161,181,151,0,157,176,179,195,170],
[183,163,188,178,184,0,185,185,186,172],
[180,160,180,148,165,156,0,177,183,165],
[169,158,169,151,162,156,164,0,170,154],
[170,143,171,157,146,155,158,171,0,157],
[175,165,170,155,171,169,176,187,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,158,189,169,161,178,170,171],
[166,0,168,158,165,156,145,161,186,153],
[170,173,0,160,192,160,164,155,162,153],
[183,183,181,0,174,161,197,186,184,179],
[152,176,149,167,0,151,155,160,159,152],
[172,185,181,180,190,0,170,188,193,194],
[180,196,177,144,186,171,0,181,172,162],
[163,180,186,155,181,153,160,0,159,173],
[171,155,179,157,182,148,169,182,0,169],
[170,188,188,162,189,147,179,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,166,171,173,168,163,168,148,162],
[179,0,155,182,184,189,182,172,175,174],
[175,186,0,179,164,192,171,154,157,177],
[170,159,162,0,151,177,166,162,161,174],
[168,157,177,190,0,173,187,174,168,185],
[173,152,149,164,168,0,159,153,159,150],
[178,159,170,175,154,182,0,156,149,177],
[173,169,187,179,167,188,185,0,183,191],
[193,166,184,180,173,182,192,158,0,177],
[179,167,164,167,156,191,164,150,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,193,170,181,179,165,160,169,164],
[167,0,174,170,155,173,179,143,172,167],
[148,167,0,154,158,172,173,137,160,139],
[171,171,187,0,167,172,185,156,167,163],
[160,186,183,174,0,180,193,153,179,171],
[162,168,169,169,161,0,181,144,171,164],
[176,162,168,156,148,160,0,147,168,156],
[181,198,204,185,188,197,194,0,199,161],
[172,169,181,174,162,170,173,142,0,158],
[177,174,202,178,170,177,185,180,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,189,170,180,163,188,160,186,143],
[197,0,199,166,169,176,208,181,200,159],
[152,142,0,158,151,144,157,153,155,155],
[171,175,183,0,181,175,185,170,180,151],
[161,172,190,160,0,148,190,150,179,181],
[178,165,197,166,193,0,198,171,163,189],
[153,133,184,156,151,143,0,165,171,161],
[181,160,188,171,191,170,176,0,180,173],
[155,141,186,161,162,178,170,161,0,152],
[198,182,186,190,160,152,180,168,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,163,178,189,176,180,170,179],
[161,0,177,159,168,184,165,171,149,165],
[166,164,0,163,178,166,163,160,153,156],
[178,182,178,0,187,184,181,170,169,168],
[163,173,163,154,0,172,165,167,162,159],
[152,157,175,157,169,0,157,143,169,162],
[165,176,178,160,176,184,0,165,164,147],
[161,170,181,171,174,198,176,0,165,171],
[171,192,188,172,179,172,177,176,0,170],
[162,176,185,173,182,179,194,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,139,169,158,187,160,156,172],
[169,0,174,161,179,166,173,150,162,157],
[176,167,0,169,184,171,176,170,161,175],
[202,180,172,0,192,159,200,172,175,192],
[172,162,157,149,0,149,182,161,174,159],
[183,175,170,182,192,0,194,169,180,183],
[154,168,165,141,159,147,0,157,170,157],
[181,191,171,169,180,172,184,0,185,159],
[185,179,180,166,167,161,171,156,0,179],
[169,184,166,149,182,158,184,182,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,164,152,165,159,183,139,137,164],
[188,0,173,147,158,184,192,196,145,182],
[177,168,0,171,166,180,189,172,160,174],
[189,194,170,0,160,182,185,179,165,185],
[176,183,175,181,0,172,179,172,163,181],
[182,157,161,159,169,0,199,176,155,180],
[158,149,152,156,162,142,0,156,171,151],
[202,145,169,162,169,165,185,0,151,168],
[204,196,181,176,178,186,170,190,0,191],
[177,159,167,156,160,161,190,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,160,161,157,154,175,141,171,162],
[174,0,172,167,160,172,177,163,180,167],
[181,169,0,181,170,155,173,161,186,158],
[180,174,160,0,157,158,163,156,169,175],
[184,181,171,184,0,161,186,172,197,172],
[187,169,186,183,180,0,177,171,194,192],
[166,164,168,178,155,164,0,156,178,170],
[200,178,180,185,169,170,185,0,194,172],
[170,161,155,172,144,147,163,147,0,148],
[179,174,183,166,169,149,171,169,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,164,177,160,172,161,165,169,154],
[171,0,162,171,164,165,154,159,168,162],
[177,179,0,189,166,170,171,194,170,170],
[164,170,152,0,163,164,165,155,168,163],
[181,177,175,178,0,173,168,188,168,164],
[169,176,171,177,168,0,167,169,167,161],
[180,187,170,176,173,174,0,164,173,167],
[176,182,147,186,153,172,177,0,165,174],
[172,173,171,173,173,174,168,176,0,170],
[187,179,171,178,177,180,174,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,149,168,166,167,179,183,196,182],
[184,0,161,177,160,173,169,180,187,177],
[192,180,0,182,171,163,186,193,186,196],
[173,164,159,0,157,135,177,175,182,147],
[175,181,170,184,0,172,186,186,186,180],
[174,168,178,206,169,0,187,181,186,178],
[162,172,155,164,155,154,0,166,188,168],
[158,161,148,166,155,160,175,0,159,155],
[145,154,155,159,155,155,153,182,0,164],
[159,164,145,194,161,163,173,186,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,180,186,165,167,163,178,168,185],
[159,0,181,182,175,182,179,178,175,166],
[161,160,0,174,160,158,183,164,168,163],
[155,159,167,0,160,159,169,167,167,158],
[176,166,181,181,0,167,168,155,172,161],
[174,159,183,182,174,0,177,179,181,172],
[178,162,158,172,173,164,0,162,156,164],
[163,163,177,174,186,162,179,0,162,170],
[173,166,173,174,169,160,185,179,0,181],
[156,175,178,183,180,169,177,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,179,167,159,189,155,172,156,143],
[172,0,160,174,141,152,164,140,142,164],
[162,181,0,167,177,183,176,169,180,151],
[174,167,174,0,157,190,135,126,121,133],
[182,200,164,184,0,174,170,167,159,143],
[152,189,158,151,167,0,159,131,155,173],
[186,177,165,206,171,182,0,143,161,175],
[169,201,172,215,174,210,198,0,183,195],
[185,199,161,220,182,186,180,158,0,146],
[198,177,190,208,198,168,166,146,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,287,173,186,205,171,190,223,171],
[188,0,274,207,154,160,157,156,192,206],
[54,67,0,139,120,137,86,140,122,120],
[168,134,202,0,167,189,117,153,207,205],
[155,187,221,174,0,224,188,176,245,240],
[136,181,204,152,117,0,116,138,242,167],
[170,184,255,224,153,225,0,173,208,203],
[151,185,201,188,165,203,168,0,189,217],
[118,149,219,134,96,99,133,152,0,182],
[170,135,221,136,101,174,138,124,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,171,170,85,85,127,171,127,127],
[127,0,130,87,129,86,129,129,171,129],
[170,211,0,170,127,128,170,128,85,127],
[171,254,171,0,128,128,169,171,128,171],
[256,212,214,213,0,213,129,173,173,216],
[256,255,213,213,128,0,172,172,172,172],
[214,212,171,172,212,169,0,213,256,214],
[170,212,213,170,168,169,128,0,212,170],
[214,170,256,213,168,169,85,129,0,213],
[214,212,214,170,125,169,127,171,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,193,197,154,154,186,195,181,175],
[164,0,174,163,159,151,163,186,181,133],
[148,167,0,169,143,152,171,188,166,166],
[144,178,172,0,158,141,147,193,158,125],
[187,182,198,183,0,184,173,208,183,160],
[187,190,189,200,157,0,199,206,202,178],
[155,178,170,194,168,142,0,185,158,154],
[146,155,153,148,133,135,156,0,155,111],
[160,160,175,183,158,139,183,186,0,140],
[166,208,175,216,181,163,187,230,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,181,175,170,187,180,199,184,171],
[200,0,193,189,183,185,198,188,188,165],
[160,148,0,172,176,164,160,169,163,158],
[166,152,169,0,159,161,131,158,163,165],
[171,158,165,182,0,170,154,186,165,165],
[154,156,177,180,171,0,165,181,171,162],
[161,143,181,210,187,176,0,179,191,155],
[142,153,172,183,155,160,162,0,179,149],
[157,153,178,178,176,170,150,162,0,155],
[170,176,183,176,176,179,186,192,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,176,161,159,182,171,176,171,163],
[152,0,155,165,160,172,154,171,173,145],
[165,186,0,168,177,186,166,187,160,170],
[180,176,173,0,170,175,157,195,176,179],
[182,181,164,171,0,185,173,188,187,172],
[159,169,155,166,156,0,159,175,167,172],
[170,187,175,184,168,182,0,186,176,164],
[165,170,154,146,153,166,155,0,160,154],
[170,168,181,165,154,174,165,181,0,171],
[178,196,171,162,169,169,177,187,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,177,178,170,162,174,156,175,174],
[151,0,138,157,136,144,129,143,141,135],
[164,203,0,176,171,167,163,156,164,160],
[163,184,165,0,156,170,151,144,168,143],
[171,205,170,185,0,200,185,164,176,158],
[179,197,174,171,141,0,161,163,154,159],
[167,212,178,190,156,180,0,140,198,166],
[185,198,185,197,177,178,201,0,185,162],
[166,200,177,173,165,187,143,156,0,172],
[167,206,181,198,183,182,175,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,177,193,175,152,143,159,201,173],
[128,0,137,156,148,154,125,133,165,158],
[164,204,0,199,190,186,154,174,184,192],
[148,185,142,0,168,142,153,155,155,159],
[166,193,151,173,0,143,150,144,158,172],
[189,187,155,199,198,0,160,171,165,182],
[198,216,187,188,191,181,0,161,174,192],
[182,208,167,186,197,170,180,0,181,163],
[140,176,157,186,183,176,167,160,0,170],
[168,183,149,182,169,159,149,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,141,167,159,169,163,169,148,158],
[198,0,170,204,189,190,200,177,195,187],
[200,171,0,201,175,190,169,181,171,192],
[174,137,140,0,145,154,165,156,162,166],
[182,152,166,196,0,185,191,175,180,178],
[172,151,151,187,156,0,162,158,161,157],
[178,141,172,176,150,179,0,162,164,186],
[172,164,160,185,166,183,179,0,176,172],
[193,146,170,179,161,180,177,165,0,178],
[183,154,149,175,163,184,155,169,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,166,166,158,166,158,154,163,167],
[159,0,187,175,155,178,165,171,180,175],
[175,154,0,165,164,160,180,164,174,150],
[175,166,176,0,174,194,170,171,181,172],
[183,186,177,167,0,183,169,167,162,173],
[175,163,181,147,158,0,165,167,173,175],
[183,176,161,171,172,176,0,170,177,164],
[187,170,177,170,174,174,171,0,181,188],
[178,161,167,160,179,168,164,160,0,176],
[174,166,191,169,168,166,177,153,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,227,114,227,227,0,227,113,0],
[227,0,227,114,227,227,114,227,113,227],
[114,114,0,114,114,227,114,0,114,114],
[227,227,227,0,227,341,0,113,113,113],
[114,114,227,114,0,227,0,113,113,114],
[114,114,114,0,114,0,0,0,0,0],
[341,227,227,341,341,341,0,227,113,227],
[114,114,341,228,228,341,114,0,227,114],
[228,228,227,228,228,341,228,114,0,228],
[341,114,227,228,227,341,114,227,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,157,205,182,187,144,200,159,180],
[136,0,131,135,130,174,129,171,161,135],
[184,210,0,174,199,212,199,212,158,163],
[136,206,167,0,172,196,174,199,149,171],
[159,211,142,169,0,188,156,182,168,188],
[154,167,129,145,153,0,161,152,168,157],
[197,212,142,167,185,180,0,203,178,157],
[141,170,129,142,159,189,138,0,159,134],
[182,180,183,192,173,173,163,182,0,171],
[161,206,178,170,153,184,184,207,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,200,169,175,161,177,174,199,157],
[177,0,162,153,174,178,169,156,173,165],
[141,179,0,162,166,167,166,148,167,180],
[172,188,179,0,176,152,170,170,178,177],
[166,167,175,165,0,170,202,188,182,177],
[180,163,174,189,171,0,188,167,194,155],
[164,172,175,171,139,153,0,160,160,159],
[167,185,193,171,153,174,181,0,186,149],
[142,168,174,163,159,147,181,155,0,144],
[184,176,161,164,164,186,182,192,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,189,178,180,186,166,177,188],
[165,0,205,200,154,213,161,171,149,160],
[163,136,0,171,153,165,152,150,151,154],
[152,141,170,0,151,171,156,160,154,173],
[163,187,188,190,0,224,156,178,184,178],
[161,128,176,170,117,0,157,137,157,155],
[155,180,189,185,185,184,0,186,191,160],
[175,170,191,181,163,204,155,0,176,187],
[164,192,190,187,157,184,150,165,0,190],
[153,181,187,168,163,186,181,154,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,163,163,158,158,164,156,166,157],
[175,0,166,189,168,165,175,159,170,165],
[178,175,0,175,157,170,163,166,159,171],
[178,152,166,0,158,156,162,144,170,159],
[183,173,184,183,0,166,192,172,181,171],
[183,176,171,185,175,0,177,170,184,164],
[177,166,178,179,149,164,0,168,176,162],
[185,182,175,197,169,171,173,0,185,163],
[175,171,182,171,160,157,165,156,0,160],
[184,176,170,182,170,177,179,178,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,158,164,160,168,160,170,169,171],
[184,0,163,158,174,156,157,176,170,173],
[183,178,0,160,190,177,166,164,176,185],
[177,183,181,0,173,170,182,171,166,173],
[181,167,151,168,0,171,164,183,164,170],
[173,185,164,171,170,0,164,179,173,173],
[181,184,175,159,177,177,0,176,187,182],
[171,165,177,170,158,162,165,0,171,166],
[172,171,165,175,177,168,154,170,0,158],
[170,168,156,168,171,168,159,175,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,177,154,170,157,177,177,169],
[165,0,165,154,163,172,156,183,165,162],
[172,176,0,147,164,166,158,173,172,160],
[164,187,194,0,158,171,173,179,180,169],
[187,178,177,183,0,173,167,186,200,177],
[171,169,175,170,168,0,175,169,176,163],
[184,185,183,168,174,166,0,197,183,183],
[164,158,168,162,155,172,144,0,174,153],
[164,176,169,161,141,165,158,167,0,168],
[172,179,181,172,164,178,158,188,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,158,169,177,184,149,173,166],
[163,0,152,149,154,151,174,148,170,164],
[175,189,0,183,155,173,175,163,181,177],
[183,192,158,0,173,170,181,158,184,189],
[172,187,186,168,0,161,177,145,186,170],
[164,190,168,171,180,0,188,180,187,184],
[157,167,166,160,164,153,0,163,170,166],
[192,193,178,183,196,161,178,0,203,192],
[168,171,160,157,155,154,171,138,0,167],
[175,177,164,152,171,157,175,149,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,193,180,181,159,156,174,170,155],
[189,0,190,185,190,182,173,186,171,161],
[148,151,0,159,156,160,164,175,159,160],
[161,156,182,0,163,167,160,183,162,164],
[160,151,185,178,0,163,142,188,169,163],
[182,159,181,174,178,0,166,172,171,159],
[185,168,177,181,199,175,0,213,178,180],
[167,155,166,158,153,169,128,0,155,143],
[171,170,182,179,172,170,163,186,0,153],
[186,180,181,177,178,182,161,198,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,171,157,163,155,157,152,160,156],
[187,0,183,172,185,173,178,169,184,175],
[170,158,0,149,165,146,154,166,177,148],
[184,169,192,0,188,177,177,176,182,178],
[178,156,176,153,0,159,161,159,178,167],
[186,168,195,164,182,0,176,177,186,167],
[184,163,187,164,180,165,0,168,185,166],
[189,172,175,165,182,164,173,0,179,174],
[181,157,164,159,163,155,156,162,0,160],
[185,166,193,163,174,174,175,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,120,114,161,143,167,128,122,126],
[194,0,148,149,173,185,192,150,138,170],
[221,193,0,154,202,197,211,173,172,160],
[227,192,187,0,197,194,215,145,161,182],
[180,168,139,144,0,183,189,109,96,139],
[198,156,144,147,158,0,184,140,123,182],
[174,149,130,126,152,157,0,109,117,150],
[213,191,168,196,232,201,232,0,139,197],
[219,203,169,180,245,218,224,202,0,232],
[215,171,181,159,202,159,191,144,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,167,162,163,170,171,163,171,159],
[165,0,170,158,163,158,158,171,147,168],
[174,171,0,178,166,160,158,166,169,171],
[179,183,163,0,156,156,160,175,162,158],
[178,178,175,185,0,175,158,163,173,154],
[171,183,181,185,166,0,157,179,166,163],
[170,183,183,181,183,184,0,177,189,167],
[178,170,175,166,178,162,164,0,170,158],
[170,194,172,179,168,175,152,171,0,180],
[182,173,170,183,187,178,174,183,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,162,154,164,194,162,176,172,195],
[170,0,156,181,183,206,156,160,140,168],
[179,185,0,167,185,193,167,166,182,182],
[187,160,174,0,158,217,188,185,201,184],
[177,158,156,183,0,200,185,166,194,175],
[147,135,148,124,141,0,130,179,158,147],
[179,185,174,153,156,211,0,185,185,164],
[165,181,175,156,175,162,156,0,178,149],
[169,201,159,140,147,183,156,163,0,161],
[146,173,159,157,166,194,177,192,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,179,190,188,156,187,185,162,176],
[156,0,170,156,171,155,177,190,172,164],
[162,171,0,181,161,175,165,180,150,189],
[151,185,160,0,160,167,183,174,159,166],
[153,170,180,181,0,151,170,176,150,156],
[185,186,166,174,190,0,169,197,177,172],
[154,164,176,158,171,172,0,165,153,163],
[156,151,161,167,165,144,176,0,152,144],
[179,169,191,182,191,164,188,189,0,164],
[165,177,152,175,185,169,178,197,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,180,200,183,156,170,185,189,170],
[151,0,165,178,173,169,193,155,183,158],
[161,176,0,183,195,173,184,159,176,182],
[141,163,158,0,163,162,170,153,154,141],
[158,168,146,178,0,159,181,168,170,134],
[185,172,168,179,182,0,182,155,192,154],
[171,148,157,171,160,159,0,153,176,138],
[156,186,182,188,173,186,188,0,204,149],
[152,158,165,187,171,149,165,137,0,149],
[171,183,159,200,207,187,203,192,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,197,158,179,167,175,169,187,171],
[147,0,184,147,167,147,170,165,175,178],
[144,157,0,135,147,142,161,156,150,158],
[183,194,206,0,187,173,185,196,194,168],
[162,174,194,154,0,155,160,163,172,171],
[174,194,199,168,186,0,179,186,179,191],
[166,171,180,156,181,162,0,170,175,170],
[172,176,185,145,178,155,171,0,182,164],
[154,166,191,147,169,162,166,159,0,159],
[170,163,183,173,170,150,171,177,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,180,176,151,167,175,162,175,183],
[165,0,174,167,160,168,173,150,161,192],
[161,167,0,173,156,159,180,156,161,183],
[165,174,168,0,165,169,176,157,166,182],
[190,181,185,176,0,165,183,167,171,194],
[174,173,182,172,176,0,188,165,166,185],
[166,168,161,165,158,153,0,164,149,176],
[179,191,185,184,174,176,177,0,170,192],
[166,180,180,175,170,175,192,171,0,189],
[158,149,158,159,147,156,165,149,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,165,154,156,163,171,148,159,165],
[172,0,179,149,153,163,157,148,158,148],
[176,162,0,139,164,162,155,136,162,157],
[187,192,202,0,158,176,177,172,174,170],
[185,188,177,183,0,176,168,167,186,170],
[178,178,179,165,165,0,159,150,164,153],
[170,184,186,164,173,182,0,163,161,166],
[193,193,205,169,174,191,178,0,179,185],
[182,183,179,167,155,177,180,162,0,163],
[176,193,184,171,171,188,175,156,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,172,181,178,180,174,183,178,158],
[180,0,186,179,197,182,161,177,186,181],
[169,155,0,177,198,194,166,175,191,171],
[160,162,164,0,181,195,184,194,196,185],
[163,144,143,160,0,174,157,162,163,145],
[161,159,147,146,167,0,147,148,168,143],
[167,180,175,157,184,194,0,184,172,161],
[158,164,166,147,179,193,157,0,178,167],
[163,155,150,145,178,173,169,163,0,155],
[183,160,170,156,196,198,180,174,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,216,185,191,220,182,175,186,197],
[186,0,212,189,172,195,174,168,184,198],
[125,129,0,164,153,171,154,136,160,152],
[156,152,177,0,140,181,143,144,135,173],
[150,169,188,201,0,188,196,155,197,198],
[121,146,170,160,153,0,183,174,161,178],
[159,167,187,198,145,158,0,183,210,206],
[166,173,205,197,186,167,158,0,186,180],
[155,157,181,206,144,180,131,155,0,162],
[144,143,189,168,143,163,135,161,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,146,156,162,187,175,175,175],
[171,0,155,169,165,178,191,176,179,176],
[180,186,0,171,161,187,170,163,184,178],
[195,172,170,0,180,184,192,181,179,192],
[185,176,180,161,0,179,174,181,170,180],
[179,163,154,157,162,0,175,165,156,170],
[154,150,171,149,167,166,0,166,168,158],
[166,165,178,160,160,176,175,0,155,168],
[166,162,157,162,171,185,173,186,0,180],
[166,165,163,149,161,171,183,173,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,168,166,182,173,154,174,166],
[167,0,197,172,163,168,185,158,168,141],
[166,144,0,154,153,179,166,161,180,149],
[173,169,187,0,173,176,184,171,179,164],
[175,178,188,168,0,184,180,161,175,172],
[159,173,162,165,157,0,190,178,180,167],
[168,156,175,157,161,151,0,157,174,155],
[187,183,180,170,180,163,184,0,176,175],
[167,173,161,162,166,161,167,165,0,160],
[175,200,192,177,169,174,186,166,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,191,203,203,181,159,182,170],
[167,0,195,187,197,191,189,202,204,163],
[170,146,0,168,194,162,163,161,170,172],
[150,154,173,0,177,167,153,119,142,163],
[138,144,147,164,0,154,136,135,141,134],
[138,150,179,174,187,0,173,168,152,163],
[160,152,178,188,205,168,0,140,180,164],
[182,139,180,222,206,173,201,0,170,132],
[159,137,171,199,200,189,161,171,0,169],
[171,178,169,178,207,178,177,209,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,162,162,161,190,166,185,170],
[178,0,163,172,178,177,179,170,181,187],
[170,178,0,174,176,168,181,165,180,173],
[179,169,167,0,166,171,173,168,176,170],
[179,163,165,175,0,175,193,162,178,178],
[180,164,173,170,166,0,172,165,176,185],
[151,162,160,168,148,169,0,160,171,162],
[175,171,176,173,179,176,181,0,168,174],
[156,160,161,165,163,165,170,173,0,171],
[171,154,168,171,163,156,179,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,209,206,226,163,225,204,219,161],
[177,0,210,179,226,192,208,205,206,148],
[132,131,0,206,149,162,207,160,207,178],
[135,162,135,0,179,131,164,204,177,115],
[115,115,192,162,0,162,175,187,116,148],
[178,149,179,210,179,0,207,163,192,179],
[116,133,134,177,166,134,0,147,147,162],
[137,136,181,137,154,178,194,0,164,136],
[122,135,134,164,225,149,194,177,0,118],
[180,193,163,226,193,162,179,205,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,151,171,172,173,169,171,173,183],
[152,0,168,166,171,157,164,156,174,184],
[190,173,0,194,183,191,173,176,158,216],
[170,175,147,0,185,153,139,157,147,177],
[169,170,158,156,0,163,155,154,171,191],
[168,184,150,188,178,0,159,172,158,193],
[172,177,168,202,186,182,0,171,187,203],
[170,185,165,184,187,169,170,0,162,212],
[168,167,183,194,170,183,154,179,0,198],
[158,157,125,164,150,148,138,129,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,119,174,163,142,181,169,173,169],
[161,0,123,143,136,148,170,131,113,138],
[222,218,0,183,154,155,191,199,179,181],
[167,198,158,0,175,182,200,150,166,179],
[178,205,187,166,0,198,197,188,207,219],
[199,193,186,159,143,0,218,175,160,207],
[160,171,150,141,144,123,0,112,145,171],
[172,210,142,191,153,166,229,0,179,181],
[168,228,162,175,134,181,196,162,0,181],
[172,203,160,162,122,134,170,160,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,184,191,171,165,173,168,179],
[174,0,160,189,156,163,160,160,154,183],
[182,181,0,182,194,158,165,151,145,178],
[157,152,159,0,167,133,125,170,140,170],
[150,185,147,174,0,158,155,160,132,178],
[170,178,183,208,183,0,176,191,172,196],
[176,181,176,216,186,165,0,160,168,198],
[168,181,190,171,181,150,181,0,148,189],
[173,187,196,201,209,169,173,193,0,183],
[162,158,163,171,163,145,143,152,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,306,170,135,272,238,238,306,238],
[172,0,239,170,170,170,171,172,272,205],
[35,102,0,205,101,171,137,103,169,171],
[171,171,136,0,203,239,239,171,203,205],
[206,171,240,138,0,172,172,172,240,240],
[69,171,170,102,169,0,136,103,170,205],
[103,170,204,102,169,205,0,137,169,204],
[103,169,238,170,169,238,204,0,238,238],
[35,69,172,138,101,171,172,103,0,137],
[103,136,170,136,101,136,137,103,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,175,169,165,169,182,176,176],
[174,0,174,173,157,165,176,174,165,169],
[168,167,0,163,163,162,170,181,172,176],
[166,168,178,0,172,169,177,176,164,184],
[172,184,178,169,0,180,192,191,181,182],
[176,176,179,172,161,0,177,184,168,182],
[172,165,171,164,149,164,0,176,165,169],
[159,167,160,165,150,157,165,0,169,178],
[165,176,169,177,160,173,176,172,0,178],
[165,172,165,157,159,159,172,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,153,166,140,161,123,172,179,146],
[162,0,168,155,155,160,131,174,194,138],
[188,173,0,165,175,178,148,171,197,167],
[175,186,176,0,163,178,149,174,195,152],
[201,186,166,178,0,165,177,184,183,155],
[180,181,163,163,176,0,133,177,185,171],
[218,210,193,192,164,208,0,196,200,172],
[169,167,170,167,157,164,145,0,168,159],
[162,147,144,146,158,156,141,173,0,154],
[195,203,174,189,186,170,169,182,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,214,218,184,176,196,208,161,177],
[135,0,156,149,139,163,138,147,145,139],
[127,185,0,180,168,186,145,167,156,156],
[123,192,161,0,175,153,157,143,143,118],
[157,202,173,166,0,168,165,174,151,176],
[165,178,155,188,173,0,166,183,129,147],
[145,203,196,184,176,175,0,186,163,167],
[133,194,174,198,167,158,155,0,182,168],
[180,196,185,198,190,212,178,159,0,179],
[164,202,185,223,165,194,174,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,203,189,163,203,187,184,187,171],
[141,0,178,166,142,170,167,172,162,158],
[138,163,0,155,159,171,156,152,155,136],
[152,175,186,0,177,184,184,161,168,172],
[178,199,182,164,0,184,181,181,160,171],
[138,171,170,157,157,0,175,156,174,157],
[154,174,185,157,160,166,0,161,181,147],
[157,169,189,180,160,185,180,0,165,161],
[154,179,186,173,181,167,160,176,0,154],
[170,183,205,169,170,184,194,180,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,189,161,180,175,184,195,183,175],
[163,0,171,169,173,172,163,181,181,184],
[152,170,0,174,174,164,153,180,182,171],
[180,172,167,0,178,155,176,209,175,189],
[161,168,167,163,0,180,174,180,184,157],
[166,169,177,186,161,0,184,190,192,199],
[157,178,188,165,167,157,0,179,171,177],
[146,160,161,132,161,151,162,0,177,170],
[158,160,159,166,157,149,170,164,0,161],
[166,157,170,152,184,142,164,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,149,177,165,141,138,146,174,146],
[178,0,166,217,197,148,153,176,173,163],
[192,175,0,183,182,141,177,172,173,174],
[164,124,158,0,148,124,153,149,166,154],
[176,144,159,193,0,127,175,148,157,138],
[200,193,200,217,214,0,205,168,198,198],
[203,188,164,188,166,136,0,167,143,164],
[195,165,169,192,193,173,174,0,188,193],
[167,168,168,175,184,143,198,153,0,173],
[195,178,167,187,203,143,177,148,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,170,168,137,171,205,273,239],
[173,0,104,138,204,137,205,205,272,274],
[172,237,0,170,202,102,136,171,273,239],
[171,203,171,0,203,171,136,204,238,237],
[173,137,139,138,0,35,206,171,240,206],
[204,204,239,170,306,0,205,205,239,273],
[170,136,205,205,135,136,0,172,237,240],
[136,136,170,137,170,136,169,0,237,168],
[68,69,68,103,101,102,104,104,0,173],
[102,67,102,104,135,68,101,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,150,173,155,176,145,175,175,178],
[161,0,158,160,155,163,145,165,159,164],
[191,183,0,187,153,187,181,179,173,191],
[168,181,154,0,151,179,152,151,170,155],
[186,186,188,190,0,180,157,180,168,181],
[165,178,154,162,161,0,133,161,163,178],
[196,196,160,189,184,208,0,179,197,192],
[166,176,162,190,161,180,162,0,151,174],
[166,182,168,171,173,178,144,190,0,183],
[163,177,150,186,160,163,149,167,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,151,171,153,154,167,163,162,160],
[183,0,175,175,188,173,170,170,180,179],
[190,166,0,172,192,170,183,166,150,181],
[170,166,169,0,167,161,178,157,171,172],
[188,153,149,174,0,163,173,166,160,177],
[187,168,171,180,178,0,185,177,178,183],
[174,171,158,163,168,156,0,155,177,159],
[178,171,175,184,175,164,186,0,190,185],
[179,161,191,170,181,163,164,151,0,183],
[181,162,160,169,164,158,182,156,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,177,163,176,191,168,171,173,183],
[157,0,179,163,171,149,166,169,164,157],
[164,162,0,167,162,172,161,165,171,171],
[178,178,174,0,157,172,171,183,175,180],
[165,170,179,184,0,176,170,176,175,174],
[150,192,169,169,165,0,167,178,168,177],
[173,175,180,170,171,174,0,179,183,179],
[170,172,176,158,165,163,162,0,167,166],
[168,177,170,166,166,173,158,174,0,173],
[158,184,170,161,167,164,162,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,147,164,169,158,182,158,167,170],
[173,0,164,155,167,174,165,158,153,174],
[194,177,0,171,168,172,191,172,173,180],
[177,186,170,0,162,177,159,173,181,174],
[172,174,173,179,0,176,190,161,164,175],
[183,167,169,164,165,0,178,170,163,180],
[159,176,150,182,151,163,0,153,162,165],
[183,183,169,168,180,171,188,0,157,168],
[174,188,168,160,177,178,179,184,0,188],
[171,167,161,167,166,161,176,173,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,178,153,156,164,150,183,160,172],
[188,0,204,172,163,177,166,170,156,169],
[163,137,0,154,133,149,147,153,143,160],
[188,169,187,0,159,187,159,171,167,174],
[185,178,208,182,0,181,175,175,170,188],
[177,164,192,154,160,0,153,180,155,181],
[191,175,194,182,166,188,0,203,174,195],
[158,171,188,170,166,161,138,0,169,169],
[181,185,198,174,171,186,167,172,0,179],
[169,172,181,167,153,160,146,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,152,178,174,173,160,169,182,159],
[145,0,141,158,169,160,141,176,153,161],
[189,200,0,165,183,191,175,185,197,174],
[163,183,176,0,177,180,159,164,174,159],
[167,172,158,164,0,175,151,179,170,158],
[168,181,150,161,166,0,141,169,178,158],
[181,200,166,182,190,200,0,202,182,164],
[172,165,156,177,162,172,139,0,159,146],
[159,188,144,167,171,163,159,182,0,162],
[182,180,167,182,183,183,177,195,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,168,154,159,165,159,151,186,163],
[175,0,175,156,180,167,169,162,178,162],
[173,166,0,172,181,164,164,158,180,170],
[187,185,169,0,187,178,169,176,184,192],
[182,161,160,154,0,162,160,165,165,171],
[176,174,177,163,179,0,155,156,182,162],
[182,172,177,172,181,186,0,167,176,166],
[190,179,183,165,176,185,174,0,189,170],
[155,163,161,157,176,159,165,152,0,148],
[178,179,171,149,170,179,175,171,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,157,193,181,221,178,230,218,176],
[120,0,148,187,184,180,148,190,190,181],
[184,193,0,170,241,220,189,211,207,194],
[148,154,171,0,219,211,136,171,226,176],
[160,157,100,122,0,165,115,164,187,137],
[120,161,121,130,176,0,128,171,202,138],
[163,193,152,205,226,213,0,190,223,186],
[111,151,130,170,177,170,151,0,194,159],
[123,151,134,115,154,139,118,147,0,135],
[165,160,147,165,204,203,155,182,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,217,171,185,171,184,143,197,165],
[158,0,169,147,187,157,177,152,156,180],
[124,172,0,125,178,159,163,110,158,114],
[170,194,216,0,172,180,159,172,173,197],
[156,154,163,169,0,158,133,162,139,136],
[170,184,182,161,183,0,169,170,172,161],
[157,164,178,182,208,172,0,140,172,162],
[198,189,231,169,179,171,201,0,172,161],
[144,185,183,168,202,169,169,169,0,176],
[176,161,227,144,205,180,179,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,158,177,166,164,176,156,149],
[174,0,158,162,174,169,176,168,174,160],
[171,183,0,166,172,155,172,178,165,174],
[183,179,175,0,174,181,201,172,175,163],
[164,167,169,167,0,154,163,169,171,173],
[175,172,186,160,187,0,173,184,169,169],
[177,165,169,140,178,168,0,189,159,166],
[165,173,163,169,172,157,152,0,168,162],
[185,167,176,166,170,172,182,173,0,176],
[192,181,167,178,168,172,175,179,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,166,167,168,166,173,176,167],
[162,0,160,157,156,175,156,168,181,173],
[174,181,0,155,174,175,167,175,176,195],
[175,184,186,0,166,173,172,183,178,180],
[174,185,167,175,0,176,155,168,174,179],
[173,166,166,168,165,0,160,171,179,162],
[175,185,174,169,186,181,0,171,184,183],
[168,173,166,158,173,170,170,0,179,176],
[165,160,165,163,167,162,157,162,0,181],
[174,168,146,161,162,179,158,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,193,153,141,173,209,158,145,148],
[159,0,198,183,130,125,161,162,147,140],
[148,143,0,137,113,159,158,134,150,105],
[188,158,204,0,141,146,163,168,162,150],
[200,211,228,200,0,141,175,161,168,190],
[168,216,182,195,200,0,189,180,163,173],
[132,180,183,178,166,152,0,162,163,160],
[183,179,207,173,180,161,179,0,160,166],
[196,194,191,179,173,178,178,181,0,154],
[193,201,236,191,151,168,181,175,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 341, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_341.csv", index=False, header=False)